/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2024-10-01 07:22:52.699353
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[1]);
x7=IKsin(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((0.07)*x5);
x13=((0.00043624)*x4);
x14=((1.0)*x5);
x15=((0.4)*x5);
x16=((1.0)*x7);
x17=((0.07)*x7);
x18=(x0*x1);
x19=(x3*x6);
x20=(x2*x6);
x21=(x3*x4);
x22=(x0*x6);
x23=(x0*x2);
x24=(x2*x3);
x25=(x1*x7);
x26=(x0*x4);
x27=((0.00043624)*x1*x2);
x28=(x4*x6*x9);
x29=((1.0)*x1*x21);
x30=(x14*x19);
x31=(((x18*x2))+(((-1.0)*x21)));
x32=(((x1*x24))+x26);
x33=((((-1.0)*x14*x20))+x25);
x34=((((1.0)*x18*x4))+(((1.0)*x24)));
x35=(((x1*x14))+((x16*x20)));
x36=(x31*x5);
x37=(x31*x7);
x38=(((x22*x7))+x36);
x39=(((x32*x5))+((x19*x7)));
x40=(((x33*x9))+((x4*x6*x8)));
x41=(((x8*(((((-1.0)*x29))+x23))))+((x39*x9)));
x42=((((-1.0)*x34*x8))+((x38*x9)));
eerot[0]=(((x10*x42))+((x11*(((((-1.0)*x37))+((x14*x22)))))));
eerot[1]=(((x34*x9))+((x38*x8)));
eerot[2]=(((x11*x42))+((x10*((x37+(((-1.0)*x22*x5)))))));
IkReal x43=(x18*x2);
eetrans[0]=(((x8*(((((-1.0)*x12*x31))+(((-1.0)*x17*x22))))))+((x9*(((((-0.07)*x24))+(((-0.07)*x18*x4))))))+(((-0.00043624)*x0))+((x7*(((((-0.4)*x43))+(((0.4)*x21))))))+(((0.00043624)*x43))+(((0.42)*x22))+((x15*x22))+(((-1.0)*x13*x3)));
eerot[3]=(((x10*x41))+((x11*(((((-1.0)*x16*x32))+x30)))));
eerot[4]=(((x39*x8))+((x9*(((((-1.0)*x23))+x29)))));
eerot[5]=(((x10*(((((-1.0)*x30))+((x32*x7))))))+((x11*x41)));
IkReal x44=(x1*x24);
eetrans[1]=(((x8*(((((-1.0)*x12*x32))+(((-1.0)*x17*x19))))))+((x0*x13))+(((-0.00043624)*x3))+((x7*(((((-0.4)*x44))+(((-0.4)*x26))))))+((x9*(((((0.07)*x23))+(((-0.07)*x1*x21))))))+(((0.00043624)*x44))+(((0.42)*x19))+((x15*x19)));
eerot[6]=(((x10*x40))+((x11*x35)));
eerot[7]=((((-1.0)*x28))+((x33*x8)));
eerot[8]=(((x11*x40))+(((-1.0)*x10*x35)));
eetrans[2]=((0.36)+((x8*(((((-1.0)*x1*x17))+((x12*x20))))))+(((-0.00043624)*x20))+((x1*x15))+(((0.4)*x20*x7))+(((0.07)*x28))+(((0.42)*x1)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j9,cj9,sj9,htj9,j9mul,j10,cj10,sj10,htj10,j10mul,j11,cj11,sj11,htj11,j11mul,j12,cj12,sj12,htj12,j12mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij7[2], _nj7,_ij8[2], _nj8,_ij9[2], _nj9,_ij10[2], _nj10,_ij11[2], _nj11,_ij12[2], _nj12;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r02;
new_r01=((-1.0)*r00);
new_r02=((-1.0)*r01);
new_px=((((0.07)*r01))+px);
new_r10=r12;
new_r11=((-1.0)*r10);
new_r12=((-1.0)*r11);
new_py=((((0.07)*r11))+py);
new_r20=r22;
new_r21=((-1.0)*r20);
new_r22=((-1.0)*r21);
new_pz=((-0.36)+pz+(((0.07)*r21)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x45=((1.0)*px);
IkReal x46=((1.0)*pz);
IkReal x47=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x47))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x46)));
rxp0_2=((((-1.0)*r10*x45))+((py*r00)));
rxp1_0=((((-1.0)*r21*x47))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x46)));
rxp1_2=((((-1.0)*r11*x45))+((py*r01)));
rxp2_0=((((-1.0)*r22*x47))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x46))+((px*r22)));
rxp2_2=((((-1.0)*r12*x45))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x48=((0.8)*npx);
IkReal x49=((0.8)*npy);
IkReal x50=((0.4)*r20);
IkReal x51=((0.4)*r22);
IkReal x52=((-0.4)*r20);
IkReal x53=((-0.4)*r21);
IkReal x54=((-1.0)*r22);
IkReal x55=((-0.4)*r22);
IkReal x56=((-1.0)*rxp2_2);
IkReal x57=((-1.0)*r21);
IkReal x58=((-1.0)*npy);
IkReal x59=((-1.0)*rxp0_2);
IkReal x60=((-1.0)*rxp1_2);
IkReal x61=((-1.0)*npx);
matrixinvcoeffs[0]=x52;
matrixinvcoeffs[1]=x48;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=((-1.0)*r20);
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x59;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x52;
matrixinvcoeffs[19]=x48;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=r20;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=x61;
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=rxp0_2;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x53;
matrixinvcoeffs[33]=x49;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=x57;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x60;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x53;
matrixinvcoeffs[51]=x49;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=r21;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=x58;
matrixinvcoeffs[59]=0;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=rxp1_2;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=x54;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=npz;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x55;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=x56;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=npz;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=x54;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x55;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=x56;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=x57;
matrixinvcoeffs[101]=x58;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=rxp1_2;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x53;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=x57;
matrixinvcoeffs[119]=x58;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=rxp1_2;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x53;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=r20;
matrixinvcoeffs[133]=npx;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=x59;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x50;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=r20;
matrixinvcoeffs[151]=npx;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=x59;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x50;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=r22;
matrixinvcoeffs[165]=npz;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=x56;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x51;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=r22;
matrixinvcoeffs[183]=npz;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=x56;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=x51;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=x57;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=npy;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x53;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x60;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=npy;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=x57;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x53;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=x60;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=r20;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=x61;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=x50;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=x61;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=r20;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x50;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=rxp0_2;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_10=matrixinvcoeffs[164], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_11=matrixinvcoeffs[181], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_8=matrixinvcoeffs[134], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_9=matrixinvcoeffs[151], gclwh7_11=matrixinvcoeffs[183], gclwh7_13=matrixinvcoeffs[215], gclwh7_15=matrixinvcoeffs[247], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_8=matrixinvcoeffs[136], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_1=matrixinvcoeffs[25], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_9=matrixinvcoeffs[153], gclwh9_11=matrixinvcoeffs[185], gclwh9_13=matrixinvcoeffs[217], gclwh9_15=matrixinvcoeffs[249], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_8=matrixinvcoeffs[138], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_9=matrixinvcoeffs[155], gclwh11_11=matrixinvcoeffs[187], gclwh11_13=matrixinvcoeffs[219], gclwh11_15=matrixinvcoeffs[251], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_10=matrixinvcoeffs[172], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_11=matrixinvcoeffs[189], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_10=matrixinvcoeffs[174], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_11=matrixinvcoeffs[191], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x62=pz*pz;
IkReal x63=pp*pp;
IkReal x64=((0.000697984)*rxp0_2);
IkReal x65=(npx*pz);
IkReal x66=((2.0)*gclwh9_11);
IkReal x67=((0.16)*r21);
IkReal x68=(gclwh6_12*r21);
IkReal x69=(gclwh13_0*rxp1_2);
IkReal x70=(gclwh8_2*r20);
IkReal x71=(pp*r21);
IkReal x72=((0.8)*rxp0_2);
IkReal x73=((3.2)*rxp2_2);
IkReal x74=(gclwh8_12*r20);
IkReal x75=((0.84)*pp);
IkReal x76=(npy*pz);
IkReal x77=((0.00087248)*pp);
IkReal x78=((2.0)*gclwh6_8);
IkReal x79=(gclwh9_15*r20);
IkReal x80=(pp*r22);
IkReal x81=(gclwh7_0*pz);
IkReal x82=(gclwh9_9*r20);
IkReal x83=(gclwh8_5*r20);
IkReal x84=(gclwh9_6*r20);
IkReal x85=((0.000697984)*rxp2_2);
IkReal x86=((1.0)*pz);
IkReal x87=(npz*pz);
IkReal x88=(gclwh5_1*rxp2_2);
IkReal x89=((0.0001395968)*r22);
IkReal x90=(gclwh9_13*r20);
IkReal x91=(gclwh13_1*rxp1_2);
IkReal x92=(gclwh10_12*r22);
IkReal x93=(gclwh7_1*r21);
IkReal x94=(gclwh9_0*r20);
IkReal x95=((0.001395968)*rxp0_2);
IkReal x96=((1.344)*rxp1_2);
IkReal x97=((0.000697984)*rxp1_2);
IkReal x98=((0.0001395968)*r21);
IkReal x99=((0.16)*r22);
IkReal x100=(gclwh14_3*rxp0_2);
IkReal x101=(gclwh14_14*r20);
IkReal x102=(gclwh14_10*r20);
IkReal x103=((1.344)*rxp0_2);
IkReal x104=(gclwh11_13*r22);
IkReal x105=((1.6)*rxp1_2);
IkReal x106=((0.0001395968)*r20);
IkReal x107=((0.0672)*r21);
IkReal x108=((3.2)*rxp1_2);
IkReal x109=((0.336)*rxp0_2);
IkReal x110=((4.0)*pp);
IkReal x111=(gclwh7_15*r21);
IkReal x112=((0.001395968)*rxp1_2);
IkReal x113=(pp*r20);
IkReal x114=(gclwh8_4*r20);
IkReal x115=(gclwh11_15*r22);
IkReal x116=((0.8)*rxp1_2);
IkReal x117=((2.0)*gclwh7_11);
IkReal x118=(gclwh4_8*rxp2_2);
IkReal x119=((0.42)*pp);
IkReal x120=(gclwh10_2*r22);
IkReal x121=((0.16)*pz);
IkReal x122=((2.0)*gclwh10_8);
IkReal x123=((0.32)*r21);
IkReal x124=(gclwh11_9*r22);
IkReal x125=((2.0)*gclwh11_11);
IkReal x126=(gclwh9_1*r20);
IkReal x127=((0.8)*pp);
IkReal x128=((0.00174496)*gclwh11_15);
IkReal x129=((2.0)*gclwh8_8);
IkReal x130=((1.6)*rxp0_2);
IkReal x131=(gclwh11_1*r22);
IkReal x132=((0.336)*rxp2_2);
IkReal x133=((2.0)*pp);
IkReal x134=(gclwh12_3*rxp1_2);
IkReal x135=((0.64)*r21);
IkReal x136=((3.2)*rxp0_2);
IkReal x137=((0.32)*r20);
IkReal x138=((0.32)*r22);
IkReal x139=(gclwh5_15*rxp2_2);
IkReal x140=((0.64)*r22);
IkReal x141=(gclwh11_0*r22);
IkReal x142=(gclwh15_1*rxp0_2);
IkReal x143=((0.16)*r20);
IkReal x144=(gclwh5_11*rxp2_2);
IkReal x145=(gclwh4_14*rxp2_2);
IkReal x146=((0.00174496)*gclwh7_15);
IkReal x147=(gclwh6_2*pz);
IkReal x148=((0.016)*gclwh14_10*rxp0_2);
IkReal x149=(gclwh6_8*x67);
IkReal x150=((0.0672)*x70);
IkReal x151=(gclwh12_8*x116);
IkReal x152=((0.0672)*x120);
IkReal x153=(gclwh6_8*x71);
IkReal x154=((0.8)*x118);
IkReal x155=(gclwh14_2*x109);
IkReal x156=(gclwh14_8*x72);
IkReal x157=(gclwh6_2*x107);
IkReal x158=(gclwh4_2*x132);
IkReal x159=((0.016)*gclwh4_10*rxp2_2);
IkReal x160=(gclwh10_8*x99);
IkReal x161=((0.336)*gclwh12_2*rxp1_2);
IkReal x162=((0.016)*gclwh12_10*rxp1_2);
IkReal x163=(gclwh8_8*x143);
IkReal x164=(gclwh15_0*x109);
IkReal x165=((0.0672)*x94);
IkReal x166=((0.8)*x144);
IkReal x167=(gclwh13_11*x116);
IkReal x168=((0.1312)*x124);
IkReal x169=((0.1312)*x82);
IkReal x170=((0.656)*gclwh15_9*rxp0_2);
IkReal x171=(gclwh7_11*x67);
IkReal x172=((0.0672)*x141);
IkReal x173=(gclwh7_11*x71);
IkReal x174=(gclwh5_0*x132);
IkReal x175=((0.656)*gclwh5_9*rxp2_2);
IkReal x176=((0.336)*x69);
IkReal x177=((0.1312)*gclwh7_9*r21);
IkReal x178=((0.656)*gclwh13_9*rxp1_2);
IkReal x179=(gclwh9_11*x143);
IkReal x180=(gclwh7_0*x107);
IkReal x181=(gclwh11_11*x99);
IkReal x182=(gclwh15_11*x72);
IkReal x183=(gclwh12_10*x97);
IkReal x184=(gclwh4_10*x85);
IkReal x185=(gclwh14_10*x64);
IkReal x186=(gclwh10_2*x89);
IkReal x187=(gclwh14_2*x64);
IkReal x188=((0.0001395968)*x70);
IkReal x189=((0.00058630656)*x100);
IkReal x190=(gclwh4_2*x85);
IkReal x191=(gclwh6_2*x98);
IkReal x192=((0.00058630656)*x134);
IkReal x193=(gclwh12_2*x97);
IkReal x194=(gclwh7_9*x98);
IkReal x195=(gclwh13_9*x97);
IkReal x196=(gclwh5_9*x85);
IkReal x197=((0.0001395968)*x82);
IkReal x198=(gclwh15_9*x64);
IkReal x199=(gclwh11_9*x89);
IkReal x200=(gclwh11_0*x89);
IkReal x201=((0.000117261312)*x131);
IkReal x202=((0.00058630656)*x142);
IkReal x203=((0.000117261312)*x126);
IkReal x204=((0.0001395968)*x94);
IkReal x205=(gclwh15_0*x64);
IkReal x206=(gclwh7_0*x98);
IkReal x207=((0.000117261312)*x93);
IkReal x208=(gclwh5_0*x85);
IkReal x209=((0.00058630656)*x88);
IkReal x210=((0.00058630656)*x91);
IkReal x211=((0.000697984)*x69);
IkReal x212=((0.8)*pz*rxp2_2);
IkReal x213=((2.0)*x62);
IkReal x214=(gclwh4_2*x212);
IkReal x215=(gclwh14_3*pp*x72);
IkReal x216=(x147*x71);
IkReal x217=((0.42)*gclwh10_2*x80);
IkReal x218=((0.84)*gclwh6_2*x76);
IkReal x219=(gclwh12_2*pz*x116);
IkReal x220=(x147*x67);
IkReal x221=(x129*x65);
IkReal x222=(x122*x87);
IkReal x223=(x119*x70);
IkReal x224=(x121*x70);
IkReal x225=((1.0)*gclwh10_8*x80);
IkReal x226=(x76*x78);
IkReal x227=(gclwh12_3*pp*x116);
IkReal x228=((0.42)*gclwh6_2*x71);
IkReal x229=(gclwh10_2*pz*x99);
IkReal x230=((1.0)*gclwh8_8*x113);
IkReal x231=((0.84)*gclwh10_2*x87);
IkReal x232=((0.84)*gclwh8_2*x65);
IkReal x233=(gclwh14_2*pz*x72);
IkReal x234=(x67*x81);
IkReal x235=((0.82)*pp*x82);
IkReal x236=(x71*x81);
IkReal x237=((0.84)*gclwh7_0*x76);
IkReal x238=((0.42)*gclwh11_0*x80);
IkReal x239=(gclwh5_0*x212);
IkReal x240=(x65*x66);
IkReal x241=((1.64)*gclwh7_9*x76);
IkReal x242=(x126*x63);
IkReal x243=(gclwh15_1*pp*x72);
IkReal x244=(x131*x63);
IkReal x245=(x125*x87);
IkReal x246=(x119*x94);
IkReal x247=((0.82)*gclwh11_9*x80);
IkReal x248=((0.8)*pz*x69);
IkReal x249=(x127*x88);
IkReal x250=((1.64)*gclwh11_9*x87);
IkReal x251=(x127*x91);
IkReal x252=((1.0)*gclwh9_11*x113);
IkReal x253=(gclwh15_0*pz*x72);
IkReal x254=((0.82)*gclwh7_9*x71);
IkReal x255=(x117*x76);
IkReal x256=((1.64)*gclwh9_9*x65);
IkReal x257=(gclwh11_0*pz*x99);
IkReal x258=((0.84)*gclwh11_0*x87);
IkReal x259=((0.42)*gclwh7_0*x71);
IkReal x260=((0.84)*gclwh9_0*x65);
IkReal x261=((1.0)*gclwh11_11*x80);
IkReal x262=(x121*x94);
IkReal x263=((0.00174496)*gclwh6_2*x76);
IkReal x264=(x70*x77);
IkReal x265=(x120*x77);
IkReal x266=((0.00087248)*gclwh6_2*x71);
IkReal x267=((0.00174496)*gclwh8_2*x65);
IkReal x268=((0.00174496)*gclwh10_2*x87);
IkReal x269=((0.00174496)*gclwh11_9*x87);
IkReal x270=((0.00087248)*gclwh7_9*x71);
IkReal x271=((0.00174496)*gclwh9_9*x65);
IkReal x272=(x124*x77);
IkReal x273=(x77*x82);
IkReal x274=((0.00174496)*gclwh7_9*x76);
IkReal x275=((0.00174496)*gclwh7_0*x76);
IkReal x276=((0.0007328832)*gclwh11_1*x80);
IkReal x277=(x141*x77);
IkReal x278=(x77*x94);
IkReal x279=((0.0014657664)*gclwh7_1*x76);
IkReal x280=((0.0007328832)*gclwh9_1*x113);
IkReal x281=((0.0014657664)*gclwh11_1*x87);
IkReal x282=((0.00174496)*gclwh11_0*x87);
IkReal x283=((0.00174496)*gclwh9_0*x65);
IkReal x284=((0.0014657664)*gclwh9_1*x65);
IkReal x285=((0.0007328832)*gclwh7_1*x71);
IkReal x286=((0.00087248)*gclwh7_0*x71);
IkReal x287=(gclwh10_2*npz*x213);
IkReal x288=(gclwh8_2*npx*x213);
IkReal x289=(gclwh10_2*x80*x86);
IkReal x290=(gclwh6_2*npy*x213);
IkReal x291=(pp*x70*x86);
IkReal x292=(gclwh9_0*npx*x213);
IkReal x293=(gclwh7_1*x133*x76);
IkReal x294=(gclwh11_0*npz*x213);
IkReal x295=(pp*x86*x94);
IkReal x296=(gclwh11_0*x80*x86);
IkReal x297=((1.0)*x63*x93);
IkReal x298=(gclwh11_1*x133*x87);
IkReal x299=(gclwh9_1*x133*x65);
IkReal x300=(gclwh7_0*npy*x213);
IkReal x301=(x184+x183);
IkReal x302=(x192+x185);
IkReal x303=(x193+x191+x190+x267+x266+x268);
IkReal x304=(x211+x206+x208+x286+x283+x282);
IkReal x305=(x205+x204+x200+x277+x275+x278);
IkReal x306=(x186+x187+x188+x265+x264+x263);
IkReal x307=(x199+x198+x197+x274+x272+x273);
IkReal x308=(x210+x207+x209+x285+x284+x281);
IkReal x309=((((0.1344)*x68))+(((1.68)*gclwh8_12*x65))+((gclwh14_8*x130))+(((4.0)*gclwh6_8*x76))+((x113*x129))+((x68*x75))+((gclwh10_8*x138))+((gclwh8_8*x137))+((x122*x80))+(((1.68)*gclwh10_12*x87)));
IkReal x310=((((1.68)*gclwh9_13*x65))+(((1.68)*gclwh11_13*x87))+(((0.1344)*gclwh7_13*r21))+((x117*x71))+(((1.6)*x144))+((gclwh13_11*x105))+(((4.0)*gclwh9_11*x65))+(((4.0)*gclwh11_11*x87))+(((0.84)*gclwh7_13*x71))+((gclwh7_11*x123)));
IkReal x311=((((1.6)*x118))+(((0.1344)*x74))+(((0.1344)*x92))+((gclwh12_8*x105))+(((4.0)*gclwh10_8*x87))+((x75*x92))+((gclwh6_8*x123))+(((4.0)*gclwh8_8*x65))+(((1.68)*gclwh6_12*x76))+((x74*x75))+((x71*x78)));
IkReal x312=((((0.1344)*x90))+(((4.0)*gclwh7_11*x76))+((gclwh11_11*x138))+((gclwh15_11*x130))+((x113*x66))+(((0.1344)*x104))+((x125*x80))+(((1.68)*gclwh7_13*x76))+((x104*x75))+((gclwh9_11*x137))+((x75*x90)));
IkReal x313=(x196+x195+x194+x203+x202+x201+x269+x276+x270+x271+x279+x280);
IkReal x314=(x155+x154+x153+x152+x151+x150+x148+x149+x214+x215+x216+x217+x218+x219+x221+x220+x223+x222+x288+x287);
IkReal x315=(x162+x163+x160+x161+x157+x156+x159+x158+x229+x228+x225+x224+x227+x226+x232+x233+x230+x231+x290+x291+x289);
IkReal x316=(x171+x170+x173+x172+x168+x169+x166+x167+x164+x165+x238+x239+x236+x237+x234+x235+x292+x293+x294+x243+x242+x241+x240+x247+x246+x245+x244+x248);
IkReal x317=(x179+x178+x175+x174+x177+x176+x180+x181+x182+x300+x258+x259+x254+x255+x256+x257+x250+x251+x252+x253+x298+x299+x295+x296+x297+x261+x260+x262+x249);
op[0]=0;
op[1]=(x314+(((-1.0)*x315))+(((0.01312)*x134))+(((-0.01312)*x100)));
op[2]=((-0.0007328832)+(((-0.0001395968)*x83))+(((-1.0)*gclwh14_14*x64))+(((-1.0)*x77*x83))+((gclwh4_14*x85))+((gclwh6_5*x98))+(((-1.0)*gclwh10_5*x89))+(((-0.00174496)*gclwh6_5*x76))+(((-1.0)*gclwh10_5*r22*x77))+(((0.00174496)*gclwh10_5*x87))+((gclwh12_14*x97))+(((0.00174496)*gclwh8_5*x65))+(((0.00087248)*gclwh6_5*x71)));
op[3]=0;
op[4]=((((-0.0001395968)*x74))+(((-1.0)*x77*x92))+(((0.0001395968)*x68))+(((0.00174496)*gclwh8_12*x65))+((x68*x77))+x185+(((-1.0)*x74*x77))+(((0.00174496)*gclwh10_12*x87))+(((-0.00174496)*gclwh6_12*x76))+(((-1.0)*x301))+(((-1.0)*gclwh10_12*x89)));
op[5]=((((0.0131206089770803)*x134))+x314+(((-0.0131206089770803)*x100))+(((-1.0)*x315)));
op[6]=((((0.01312)*x91))+(((0.01312)*x88))+(((-0.01312)*x142))+(((0.002624)*x93))+x316+(((-1.0)*x317))+(((-0.1436)*gclwh7_1*x71))+(((0.1436)*gclwh11_1*x80))+(((0.0328)*gclwh9_1*x65))+(((0.0328)*gclwh11_1*x87))+(((-0.002624)*x126))+(((0.1436)*gclwh9_1*x113))+(((-0.002624)*x131))+(((-0.0328)*gclwh7_1*x76)));
op[7]=0;
op[8]=0;
op[9]=((-0.0007328832)+(((-1.0)*x128*x87))+(((-1.0)*gclwh9_7*r20*x77))+((x146*x76))+(((-0.00174496)*gclwh7_7*x76))+(((-1.0)*gclwh5_15*x85))+(((-0.00087248)*gclwh7_15*x71))+(((0.00087248)*gclwh7_7*x71))+((x115*x77))+(((-0.00174496)*gclwh9_15*x65))+((gclwh11_15*x89))+(((0.00174496)*gclwh11_7*x87))+(((-1.0)*gclwh11_7*x89))+(((0.00174496)*gclwh9_7*x65))+(((-1.0)*gclwh13_15*x97))+((gclwh7_7*x98))+(((-1.0)*gclwh7_15*x98))+((x77*x79))+(((-1.0)*gclwh9_7*x106))+((gclwh15_15*x64))+(((0.0001395968)*x79))+(((-1.0)*gclwh11_7*r22*x77)));
op[10]=((((0.0328015224427008)*gclwh11_1*x87))+(((0.00262412179541606)*x93))+(((0.14359923877865)*gclwh11_1*x80))+(((0.0328015224427008)*gclwh9_1*x65))+(((-0.00262412179541606)*x131))+(((-0.0131206089770803)*x142))+(((-0.00262412179541606)*x126))+(((0.0131206089770803)*x88))+x316+(((0.0131206089770803)*x91))+(((-1.0)*x317))+(((0.14359923877865)*gclwh9_1*x113))+(((-0.0328015224427008)*gclwh7_1*x76))+(((-0.14359923877865)*gclwh7_1*x71)));
op[11]=((((-0.0001395968)*x90))+(((0.00174496)*gclwh11_13*x87))+(((-1.0)*x77*x90))+x196+x195+x194+(((0.00174496)*gclwh9_13*x65))+(((-1.0)*gclwh11_13*x89))+x269+x270+x271+(((0.00087248)*gclwh7_13*x71))+(((-0.00174496)*gclwh7_13*x76))+((gclwh7_13*x98))+(((-1.0)*x104*x77))+(((-1.0)*x307)));
op[12]=0;
op[13]=((0.1764)+(((-1.0)*gclwh12_2*pp*pz*r21))+(((-2.0)*gclwh1_2*npx*(pz*pz)))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((0.42)*gclwh12_2*pp*r21))+(((-0.0672)*gclwh14_2*r20))+(((0.0672)*gclwh3_2*r21))+(((-0.02)*gclwh14_10*pp*r20))+(((-0.8)*gclwh8_2*pz*rxp0_2))+(((-0.8)*pz))+((gclwh12_3*r21*(pp*pp)))+(((0.8)*gclwh6_8*rxp1_2))+(((0.0672)*gclwh4_2*r22))+(((-0.0032)*gclwh14_10*r20))+(((-0.16)*gclwh4_8*r22))+((gclwh1_2*pp*pz*r20))+(((0.04)*gclwh14_10*npx*pz))+(((0.1764)*gclwh3_3*pp*r21))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.84)*gclwh12_2*npy*pz))+(((-0.002624)*gclwh1_3*r20))+(((-0.42)*gclwh14_2*pp*r20))+(((0.0032)*gclwh4_10*r22))+(((0.16)*gclwh14_8*r20))+(((2.0)*gclwh3_3*npy*pp*pz))+(((0.0672)*gclwh12_2*r21))+(((-1.0)*gclwh3_3*r21*(pp*pp)))+(((-1.0)*gclwh12_8*pp*r21))+((gclwh3_2*pp*pz*r21))+(((0.02)*gclwh12_10*pp*r21))+(((-0.04)*gclwh4_10*npz*pz))+(((2.0)*gclwh12_8*npy*pz))+((gclwh14_8*pp*r20))+(((-0.002624)*gclwh3_3*r21))+(((-2.0)*gclwh3_2*npy*(pz*pz)))+(((0.336)*gclwh10_2*rxp2_2))+(((-0.002624)*gclwh12_3*r21))+(((-0.04)*gclwh12_10*npy*pz))+(((0.002624)*gclwh14_3*r20))+(((0.336)*gclwh8_2*rxp0_2))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh14_8*npx*pz))+(((-0.8)*gclwh8_8*rxp0_2))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((-0.42)*gclwh1_2*pp*r20))+(((-0.16)*gclwh12_8*r21))+(((0.84)*gclwh14_2*npx*pz))+(((0.84)*gclwh1_2*npx*pz))+(((-0.84)*gclwh4_2*npz*pz))+(((-0.0328)*gclwh14_3*npx*pz))+(((0.1436)*gclwh12_3*pp*r21))+(((0.42)*gclwh4_2*pp*r22))+(((-0.16)*gclwh3_2*pz*r21))+(((2.0)*gclwh1_3*npx*pp*pz))+(((-0.0328)*gclwh3_3*npy*pz))+(((-0.0328)*gclwh1_3*npx*pz))+(((-1.0)*gclwh4_8*pp*r22))+(((-0.16)*gclwh1_2*pz*r20))+(((0.0032)*gclwh12_10*r21))+(((-0.42)*gclwh3_2*pp*r21))+(((0.1764)*gclwh1_3*pp*r20))+(((0.0328)*gclwh12_3*npy*pz))+(((-0.8)*gclwh10_8*rxp2_2))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((0.8)*gclwh6_2*pz*rxp1_2))+(((0.02)*gclwh4_10*pp*r22))+(((-0.16)*gclwh4_2*pz*r22))+(((-0.16)*gclwh12_2*pz*r21))+(((0.0672)*gclwh1_2*r20))+(((0.84)*gclwh3_2*npy*pz))+(((2.0)*gclwh4_8*npz*pz))+(((-0.1436)*gclwh14_3*pp*r20))+(((-0.8)*gclwh10_2*pz*rxp2_2))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((-0.336)*gclwh6_2*rxp1_2))+(((0.16)*gclwh14_2*pz*r20))+(((-1.0)*gclwh1_3*r20*(pp*pp))));
op[14]=((((0.0001395968)*x101))+((gclwh6_5*x97))+((x101*x77))+(((-1.0)*gclwh8_5*x64))+(((-1.0)*gclwh12_14*x98))+(((-1.0)*gclwh10_5*x85))+(((-0.00174496)*gclwh14_14*x65))+(((-0.00087248)*gclwh12_14*x71))+(((-1.0)*gclwh4_14*r22*x77))+(((0.00174496)*gclwh12_14*x76))+(((0.00174496)*gclwh4_14*x87))+(((-1.0)*gclwh4_14*x89)));
op[15]=0;
op[16]=((0.0007328832)+(((-0.00174496)*gclwh12_10*x76))+((gclwh4_10*r22*x77))+(((0.00174496)*gclwh14_10*x65))+(((-0.0001395968)*x102))+(((0.00087248)*gclwh12_10*x71))+((gclwh4_10*x89))+(((-0.00174496)*gclwh4_10*x87))+((gclwh6_12*x97))+((gclwh12_10*x98))+(((-1.0)*gclwh8_12*x64))+(((-1.0)*gclwh10_12*x85))+(((-1.0)*x102*x77)));
op[17]=((0.17639923877865)+(((-0.0328015224427008)*gclwh1_3*npx*pz))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((-2.0)*gclwh1_2*npx*(pz*pz)))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((0.42)*gclwh12_2*pp*r21))+(((-0.0672)*gclwh14_2*r20))+(((-0.00262412179541606)*gclwh3_3*r21))+(((0.0672)*gclwh3_2*r21))+(((-0.02)*gclwh14_10*pp*r20))+(((-0.0328015224427008)*gclwh14_3*npx*pz))+(((-0.8)*gclwh8_2*pz*rxp0_2))+(((-0.8)*pz))+(((0.00262412179541606)*gclwh14_3*r20))+((gclwh12_3*r21*(pp*pp)))+(((0.8)*gclwh6_8*rxp1_2))+(((0.0672)*gclwh4_2*r22))+(((-0.0032)*gclwh14_10*r20))+(((-0.16)*gclwh4_8*r22))+((gclwh1_2*pp*pz*r20))+(((0.04)*gclwh14_10*npx*pz))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.84)*gclwh12_2*npy*pz))+(((-0.0328015224427008)*gclwh3_3*npy*pz))+(((-0.42)*gclwh14_2*pp*r20))+(((0.0032)*gclwh4_10*r22))+(((0.16)*gclwh14_8*r20))+(((2.0)*gclwh3_3*npy*pp*pz))+(((0.0672)*gclwh12_2*r21))+(((-1.0)*gclwh3_3*r21*(pp*pp)))+(((-1.0)*gclwh12_8*pp*r21))+((gclwh3_2*pp*pz*r21))+(((0.02)*gclwh12_10*pp*r21))+(((-0.04)*gclwh4_10*npz*pz))+(((2.0)*gclwh12_8*npy*pz))+((gclwh14_8*pp*r20))+(((-2.0)*gclwh3_2*npy*(pz*pz)))+(((0.336)*gclwh10_2*rxp2_2))+(((0.0328015224427008)*gclwh12_3*npy*pz))+(((-0.04)*gclwh12_10*npy*pz))+(((0.14359923877865)*gclwh12_3*pp*r21))+(((0.336)*gclwh8_2*rxp0_2))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh14_8*npx*pz))+(((-0.8)*gclwh8_8*rxp0_2))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((-0.42)*gclwh1_2*pp*r20))+(((-0.00262412179541606)*gclwh12_3*r21))+(((-0.16)*gclwh12_8*r21))+(((0.84)*gclwh14_2*npx*pz))+(((0.84)*gclwh1_2*npx*pz))+(((-0.84)*gclwh4_2*npz*pz))+(((0.42)*gclwh4_2*pp*r22))+(((-0.16)*gclwh3_2*pz*r21))+(((2.0)*gclwh1_3*npx*pp*pz))+(((0.17640076122135)*gclwh1_3*pp*r20))+(((0.17640076122135)*gclwh3_3*pp*r21))+(((-1.0)*gclwh4_8*pp*r22))+(((-0.16)*gclwh1_2*pz*r20))+(((0.0032)*gclwh12_10*r21))+(((-0.42)*gclwh3_2*pp*r21))+(((-0.14359923877865)*gclwh14_3*pp*r20))+(((-0.8)*gclwh10_8*rxp2_2))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((0.8)*gclwh6_2*pz*rxp1_2))+(((0.02)*gclwh4_10*pp*r22))+(((-0.16)*gclwh4_2*pz*r22))+(((-0.16)*gclwh12_2*pz*r21))+(((0.0672)*gclwh1_2*r20))+(((0.84)*gclwh3_2*npy*pz))+(((2.0)*gclwh4_8*npz*pz))+(((-0.00262412179541606)*gclwh1_3*r20))+(((-0.8)*gclwh10_2*pz*rxp2_2))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((-0.336)*gclwh6_2*rxp1_2))+(((0.16)*gclwh14_2*pz*r20))+(((-1.0)*gclwh1_3*r20*(pp*pp))));
op[18]=((0.1764)+(((-0.8)*gclwh11_11*rxp2_2))+(((0.42)*gclwh5_0*pp*r22))+((gclwh15_0*pp*pz*r20))+((gclwh13_1*r21*(pp*pp)))+(((-0.1764)*gclwh0_1*pp*r20))+(((-0.84)*gclwh13_0*npy*pz))+(((-0.656)*gclwh7_9*rxp1_2))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((-0.0328)*gclwh15_1*npx*pz))+(((0.42)*gclwh2_0*pp*r21))+(((0.82)*gclwh5_9*pp*r22))+(((0.1312)*gclwh13_9*r21))+(((0.82)*gclwh13_9*pp*r21))+(((0.1436)*gclwh13_1*pp*r21))+(((-0.8)*gclwh9_11*rxp0_2))+(((-0.16)*gclwh13_0*pz*r21))+(((0.8)*gclwh11_1*pp*rxp2_2))+(((-1.0)*gclwh13_11*pp*r21))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((0.42)*gclwh0_0*pp*r20))+(((0.16)*gclwh2_0*pz*r21))+(((-0.0672)*gclwh15_0*r20))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((0.656)*gclwh11_9*rxp2_2))+(((-0.8)*gclwh11_0*pz*rxp2_2))+(((0.84)*gclwh15_0*npx*pz))+(((0.16)*gclwh15_11*r20))+(((-0.002624)*gclwh13_1*r21))+(((-0.42)*gclwh15_0*pp*r20))+(((-0.84)*gclwh2_0*npy*pz))+(((-2.0)*gclwh15_11*npx*pz))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((0.8)*gclwh9_1*pp*rxp0_2))+(((0.1436)*gclwh5_1*pp*r22))+(((-0.16)*gclwh5_11*r22))+(((0.8)*gclwh7_11*rxp1_2))+(((0.0328)*gclwh2_1*npy*pz))+(((-0.8)*gclwh9_0*pz*rxp0_2))+(((0.8)*pz))+(((0.8)*gclwh7_0*pz*rxp1_2))+(((0.16)*gclwh15_0*pz*r20))+((gclwh15_11*pp*r20))+(((2.0)*gclwh5_11*npz*pz))+(((0.0328)*gclwh0_1*npx*pz))+(((-0.8)*gclwh7_1*pp*rxp1_2))+(((0.336)*gclwh11_0*rxp2_2))+(((-1.0)*gclwh5_11*pp*r22))+(((1.64)*gclwh15_9*npx*pz))+(((2.0)*gclwh13_11*npy*pz))+(((0.42)*gclwh13_0*pp*r21))+(((0.336)*gclwh9_0*rxp0_2))+(((0.002624)*gclwh15_1*r20))+(((-0.1764)*gclwh2_1*pp*r21))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((-0.84)*gclwh5_0*npz*pz))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-0.1436)*gclwh15_1*pp*r20))+(((-0.82)*gclwh15_9*pp*r20))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-1.64)*gclwh13_9*npy*pz))+(((-1.64)*gclwh5_9*npz*pz))+(((-1.0)*gclwh5_0*pp*pz*r22))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((-0.16)*gclwh13_11*r21))+(((0.01312)*gclwh7_1*rxp1_2))+(((0.0328)*gclwh13_1*npy*pz))+((gclwh2_1*r21*(pp*pp)))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((0.002624)*gclwh2_1*r21))+(((0.16)*gclwh0_0*pz*r20))+(((-0.0672)*gclwh0_0*r20))+(((-0.16)*gclwh5_0*pz*r22))+(((-0.01312)*gclwh9_1*rxp0_2))+(((-0.1312)*gclwh15_9*r20))+(((-0.01312)*gclwh11_1*rxp2_2))+(((0.656)*gclwh9_9*rxp0_2))+((gclwh5_1*r22*(pp*pp)))+(((-0.002624)*gclwh5_1*r22))+(((0.1312)*gclwh5_9*r22))+(((-0.0672)*gclwh2_0*r21))+(((-0.336)*gclwh7_0*rxp1_2))+(((0.0672)*gclwh13_0*r21))+(((0.0672)*gclwh5_0*r22))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((0.002624)*gclwh0_1*r20))+((gclwh0_1*r20*(pp*pp)))+(((0.0328)*gclwh5_1*npz*pz))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-0.84)*gclwh0_0*npx*pz)));
op[19]=0;
op[20]=0;
op[21]=((((-1.0)*gclwh15_15*r20*x77))+(((-0.00174496)*gclwh5_15*x87))+((gclwh13_15*x98))+(((-0.00174496)*gclwh13_15*x76))+((gclwh11_15*x85))+(((-1.0)*gclwh9_7*x64))+(((-1.0)*gclwh11_7*x85))+(((-1.0)*gclwh15_15*x106))+((gclwh5_15*r22*x77))+((gclwh7_7*x97))+((gclwh5_15*x89))+((gclwh9_15*x64))+(((0.00087248)*gclwh13_15*x71))+(((-1.0)*gclwh7_15*x97))+(((0.00174496)*gclwh15_15*x65)));
op[22]=((0.17639923877865)+(((-0.8)*gclwh11_11*rxp2_2))+(((0.42)*gclwh5_0*pp*r22))+((gclwh15_0*pp*pz*r20))+(((0.14359923877865)*gclwh13_1*pp*r21))+((gclwh13_1*r21*(pp*pp)))+(((-0.84)*gclwh13_0*npy*pz))+(((-0.656)*gclwh7_9*rxp1_2))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((0.42)*gclwh2_0*pp*r21))+(((0.82)*gclwh5_9*pp*r22))+(((-0.17640076122135)*gclwh2_1*pp*r21))+(((0.1312)*gclwh13_9*r21))+(((0.82)*gclwh13_9*pp*r21))+(((-0.8)*gclwh9_11*rxp0_2))+(((-0.16)*gclwh13_0*pz*r21))+(((0.8)*gclwh11_1*pp*rxp2_2))+(((-1.0)*gclwh13_11*pp*r21))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((0.42)*gclwh0_0*pp*r20))+(((0.16)*gclwh2_0*pz*r21))+(((-0.0672)*gclwh15_0*r20))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((0.656)*gclwh11_9*rxp2_2))+(((-0.8)*gclwh11_0*pz*rxp2_2))+(((0.84)*gclwh15_0*npx*pz))+(((0.16)*gclwh15_11*r20))+(((0.0328015224427008)*gclwh13_1*npy*pz))+(((-0.42)*gclwh15_0*pp*r20))+(((-0.84)*gclwh2_0*npy*pz))+(((-2.0)*gclwh15_11*npx*pz))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((0.8)*gclwh9_1*pp*rxp0_2))+(((-0.16)*gclwh5_11*r22))+(((0.8)*gclwh7_11*rxp1_2))+(((-0.8)*gclwh9_0*pz*rxp0_2))+(((0.8)*pz))+(((0.00262412179541606)*gclwh2_1*r21))+(((0.8)*gclwh7_0*pz*rxp1_2))+(((0.16)*gclwh15_0*pz*r20))+((gclwh15_11*pp*r20))+(((2.0)*gclwh5_11*npz*pz))+(((-0.00262412179541606)*gclwh5_1*r22))+(((-0.0131206089770803)*gclwh11_1*rxp2_2))+(((-0.8)*gclwh7_1*pp*rxp1_2))+(((0.00262412179541606)*gclwh15_1*r20))+(((0.14359923877865)*gclwh5_1*pp*r22))+(((0.336)*gclwh11_0*rxp2_2))+(((-1.0)*gclwh5_11*pp*r22))+(((1.64)*gclwh15_9*npx*pz))+(((2.0)*gclwh13_11*npy*pz))+(((0.42)*gclwh13_0*pp*r21))+(((0.336)*gclwh9_0*rxp0_2))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((0.0328015224427008)*gclwh0_1*npx*pz))+(((-0.84)*gclwh5_0*npz*pz))+(((-0.00262412179541606)*gclwh13_1*r21))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((0.0328015224427008)*gclwh5_1*npz*pz))+(((-0.0131206089770803)*gclwh9_1*rxp0_2))+(((0.0131206089770803)*gclwh7_1*rxp1_2))+(((-0.82)*gclwh15_9*pp*r20))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-1.64)*gclwh13_9*npy*pz))+(((-1.64)*gclwh5_9*npz*pz))+(((0.0328015224427008)*gclwh2_1*npy*pz))+(((-1.0)*gclwh5_0*pp*pz*r22))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((-0.16)*gclwh13_11*r21))+(((0.00262412179541606)*gclwh0_1*r20))+((gclwh2_1*r21*(pp*pp)))+(((-0.17640076122135)*gclwh0_1*pp*r20))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((0.16)*gclwh0_0*pz*r20))+(((-0.0672)*gclwh0_0*r20))+(((-0.16)*gclwh5_0*pz*r22))+(((-0.1312)*gclwh15_9*r20))+(((0.656)*gclwh9_9*rxp0_2))+(((-0.14359923877865)*gclwh15_1*pp*r20))+((gclwh5_1*r22*(pp*pp)))+(((0.1312)*gclwh5_9*r22))+(((-0.0672)*gclwh2_0*r21))+(((-0.336)*gclwh7_0*rxp1_2))+(((0.0672)*gclwh13_0*r21))+(((0.0672)*gclwh5_0*r22))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((-0.0328015224427008)*gclwh15_1*npx*pz))+((gclwh0_1*r20*(pp*pp)))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-0.84)*gclwh0_0*npx*pz)));
op[23]=((-0.0007328832)+(((0.00174496)*gclwh5_9*x87))+(((-1.0)*gclwh13_9*x98))+(((-1.0)*gclwh9_13*x64))+(((0.00174496)*gclwh13_9*x76))+(((-1.0)*gclwh11_13*x85))+((gclwh7_9*x97))+(((-1.0)*gclwh5_9*x89))+((gclwh7_13*x97))+(((-0.00174496)*gclwh15_9*x65))+(((-1.0)*gclwh11_9*x85))+(((-1.0)*gclwh5_9*r22*x77))+(((-0.00087248)*gclwh13_9*x71))+((gclwh15_9*r20*x77))+((gclwh15_9*x106))+(((-1.0)*gclwh9_9*x64)));
op[24]=(x309+(((-1.0)*x311)));
op[25]=(x189+x303+x301+(((-1.0)*x306))+(((-1.0)*x302)));
op[26]=((0.705601522442701)+(((8.0)*gclwh8_4*x65))+(((-4.0)*gclwh10_4*x80))+(((8.0)*gclwh10_4*x87))+((gclwh12_4*x108))+((gclwh14_14*x103))+(((4.0)*gclwh6_4*x71))+(((-1.0)*x110*x114))+(((-0.64)*x114))+((gclwh6_4*x135))+(((-1.0)*gclwh12_14*x96))+((gclwh4_4*x73))+(((-8.0)*gclwh6_4*x76))+(((-1.0)*gclwh10_4*x140))+(((-1.0)*gclwh14_4*x136))+(((-1.344)*x145)));
op[27]=((((0.001395968)*x145))+((gclwh12_14*x112))+(((-1.0)*gclwh14_14*x95)));
op[28]=(x311+(((-1.0)*x309)));
op[29]=(x189+x306+x301+(((-1.0)*x303))+(((-1.0)*x302)));
op[30]=(x304+x313+(((-1.0)*x307))+(((-1.0)*x308))+(((-1.0)*x305)));
op[31]=(x310+(((-1.0)*x312)));
op[32]=((((-1.0)*x128*x80))+((x146*x71))+(((-0.00348992)*gclwh7_15*x76))+(((-0.0002791936)*x115))+((gclwh13_15*x112))+(((0.00348992)*gclwh11_15*x87))+(((-1.0)*gclwh15_15*x95))+(((0.001395968)*x139))+(((0.0002791936)*x111))+(((-0.0002791936)*x79))+(((-0.00174496)*pp*x79))+(((0.00348992)*gclwh9_15*x65)));
op[33]=((0.705601522442701)+(((-3.36)*gclwh7_15*x76))+(((-4.0)*gclwh11_6*x80))+(((-1.0)*gclwh15_6*x136))+(((8.0)*gclwh11_6*x87))+(((1.344)*x139))+(((1.68)*gclwh7_15*x71))+((gclwh13_15*x96))+(((0.2688)*x111))+(((3.36)*gclwh11_15*x87))+(((3.36)*gclwh9_15*x65))+(((-1.68)*pp*x79))+((gclwh7_6*x135))+(((-8.0)*gclwh7_6*x76))+(((-0.64)*x84))+(((-1.68)*gclwh11_15*x80))+(((-1.0)*gclwh11_6*x140))+(((-1.0)*x110*x84))+((gclwh5_6*x73))+((gclwh13_6*x108))+(((4.0)*gclwh7_6*x71))+(((-1.0)*gclwh15_15*x103))+(((-0.2688)*x115))+(((-0.2688)*x79))+(((8.0)*gclwh9_6*x65)));
op[34]=(x305+x313+(((-1.0)*x307))+(((-1.0)*x308))+(((-1.0)*x304)));
op[35]=(x312+(((-1.0)*x310)));
IkReal x318=pz*pz;
IkReal x319=pp*pp;
IkReal x320=(npx*pz);
IkReal x321=(gclwh4_14*r22);
IkReal x322=((0.00174496)*pp);
IkReal x323=((0.16)*r21);
IkReal x324=((0.0001395968)*r21);
IkReal x325=(npy*pz);
IkReal x326=(gclwh8_2*r20);
IkReal x327=(pp*r21);
IkReal x328=((0.8)*rxp0_2);
IkReal x329=((3.2)*rxp2_2);
IkReal x330=(pp*r22);
IkReal x331=((0.000697984)*rxp2_2);
IkReal x332=(gclwh7_0*pz);
IkReal x333=(gclwh9_15*rxp0_2);
IkReal x334=(gclwh9_9*r20);
IkReal x335=(pp*r20);
IkReal x336=((1.0)*pz);
IkReal x337=((0.0001395968)*r20);
IkReal x338=((0.000697984)*rxp0_2);
IkReal x339=((1.6)*rxp0_2);
IkReal x340=((0.01312)*rxp1_2);
IkReal x341=(gclwh7_1*r21);
IkReal x342=((0.336)*rxp1_2);
IkReal x343=((0.000117261312)*r20);
IkReal x344=((0.000697984)*rxp1_2);
IkReal x345=((0.16)*r22);
IkReal x346=(gclwh11_0*pz);
IkReal x347=(npz*pz);
IkReal x348=(gclwh14_3*rxp0_2);
IkReal x349=((0.0001395968)*r22);
IkReal x350=((0.32)*r20);
IkReal x351=(gclwh9_0*r20);
IkReal x352=((0.64)*r22);
IkReal x353=((0.00087248)*pp);
IkReal x354=((0.64)*r20);
IkReal x355=((0.0672)*r21);
IkReal x356=(gclwh11_15*rxp2_2);
IkReal x357=((0.32)*r21);
IkReal x358=((0.672)*rxp1_2);
IkReal x359=((0.64)*r21);
IkReal x360=(gclwh5_1*rxp2_2);
IkReal x361=(gclwh12_14*r21);
IkReal x362=(gclwh5_15*r22);
IkReal x363=((3.2)*rxp0_2);
IkReal x364=(gclwh15_15*r20);
IkReal x365=(gclwh7_15*rxp1_2);
IkReal x366=((0.16)*pz);
IkReal x367=((0.000117261312)*r21);
IkReal x368=((1.6)*rxp2_2);
IkReal x369=((0.8)*rxp1_2);
IkReal x370=(gclwh9_1*r20);
IkReal x371=(gclwh11_1*r22);
IkReal x372=(gclwh14_14*r20);
IkReal x373=((0.336)*rxp2_2);
IkReal x374=((2.0)*pp);
IkReal x375=((0.672)*rxp2_2);
IkReal x376=(gclwh13_15*r21);
IkReal x377=((0.16)*r20);
IkReal x378=((1.6)*rxp1_2);
IkReal x379=((0.8)*rxp2_2);
IkReal x380=(gclwh15_1*rxp0_2);
IkReal x381=((0.0672)*r22);
IkReal x382=((0.0131206089770803)*rxp1_2);
IkReal x383=((3.2)*rxp1_2);
IkReal x384=((0.672)*rxp0_2);
IkReal x385=((0.336)*rxp0_2);
IkReal x386=((0.32)*r22);
IkReal x387=(gclwh6_2*pz);
IkReal x388=(gclwh10_12*x375);
IkReal x389=(gclwh14_8*x350);
IkReal x390=(gclwh8_12*x384);
IkReal x391=(gclwh6_8*x378);
IkReal x392=(gclwh8_8*x339);
IkReal x393=(gclwh4_8*x386);
IkReal x394=(gclwh10_8*x368);
IkReal x395=(gclwh12_8*x357);
IkReal x396=(gclwh6_12*x358);
IkReal x397=(gclwh10_2*x331);
IkReal x398=(gclwh12_2*x324);
IkReal x399=(gclwh12_3*x367);
IkReal x400=(gclwh4_2*x349);
IkReal x401=(gclwh3_3*x367);
IkReal x402=(gclwh14_10*x337);
IkReal x403=(gclwh1_3*x343);
IkReal x404=(gclwh8_2*x338);
IkReal x405=(gclwh1_2*x337);
IkReal x406=(gclwh3_2*x324);
IkReal x407=(gclwh12_10*x324);
IkReal x408=(gclwh4_10*x349);
IkReal x409=(gclwh14_3*x343);
IkReal x410=(gclwh6_2*x344);
IkReal x411=(gclwh14_2*x337);
IkReal x412=((0.000117261312)*gclwh5_1*r22);
IkReal x413=(gclwh7_9*x344);
IkReal x414=(gclwh13_0*x324);
IkReal x415=(gclwh11_0*x331);
IkReal x416=(gclwh15_9*x337);
IkReal x417=((0.00058630656)*gclwh9_1*rxp0_2);
IkReal x418=(gclwh5_0*x349);
IkReal x419=((0.00058630656)*gclwh11_1*rxp2_2);
IkReal x420=(gclwh13_1*x367);
IkReal x421=(gclwh9_0*x338);
IkReal x422=(gclwh0_0*x337);
IkReal x423=(gclwh7_0*x344);
IkReal x424=((0.00058630656)*gclwh7_1*rxp1_2);
IkReal x425=(gclwh0_1*x343);
IkReal x426=(gclwh2_0*x324);
IkReal x427=(gclwh11_9*x331);
IkReal x428=(gclwh15_1*x343);
IkReal x429=(gclwh15_0*x337);
IkReal x430=(gclwh9_9*x338);
IkReal x431=(gclwh5_9*x349);
IkReal x432=(gclwh13_9*x324);
IkReal x433=(gclwh2_1*x367);
IkReal x434=(gclwh9_11*x339);
IkReal x435=(gclwh5_11*x386);
IkReal x436=(gclwh9_13*x384);
IkReal x437=(gclwh13_11*x357);
IkReal x438=(gclwh11_13*x375);
IkReal x439=(gclwh11_11*x368);
IkReal x440=(gclwh7_11*x378);
IkReal x441=(gclwh15_11*x350);
IkReal x442=(gclwh7_13*x358);
IkReal x443=((0.016)*gclwh14_10*rxp0_2);
IkReal x444=(gclwh10_8*x330);
IkReal x445=(gclwh14_8*x328);
IkReal x446=(gclwh6_2*x355);
IkReal x447=(gclwh4_2*x373);
IkReal x448=(gclwh10_8*x345);
IkReal x449=(gclwh12_2*x342);
IkReal x450=(gclwh8_8*x335);
IkReal x451=(gclwh8_8*x377);
IkReal x452=(gclwh6_8*x323);
IkReal x453=((0.0672)*x326);
IkReal x454=(gclwh12_8*x369);
IkReal x455=(gclwh10_2*x381);
IkReal x456=((0.016)*gclwh4_10*rxp2_2);
IkReal x457=(gclwh4_8*x379);
IkReal x458=((0.016)*gclwh12_10*rxp1_2);
IkReal x459=(gclwh14_2*x385);
IkReal x460=((0.1312)*gclwh11_9*r22);
IkReal x461=((0.1312)*x334);
IkReal x462=(gclwh5_0*x373);
IkReal x463=(gclwh11_11*x330);
IkReal x464=(gclwh13_0*x342);
IkReal x465=((0.656)*gclwh15_9*rxp0_2);
IkReal x466=(gclwh9_11*x377);
IkReal x467=(gclwh7_0*x355);
IkReal x468=(gclwh9_11*x335);
IkReal x469=(gclwh11_11*x345);
IkReal x470=(gclwh15_11*x328);
IkReal x471=(gclwh15_0*x385);
IkReal x472=((0.0672)*x351);
IkReal x473=(gclwh5_11*x379);
IkReal x474=(gclwh13_11*x369);
IkReal x475=((0.656)*gclwh5_9*rxp2_2);
IkReal x476=((0.1312)*gclwh7_9*r21);
IkReal x477=((0.656)*gclwh13_9*rxp1_2);
IkReal x478=(gclwh7_11*x323);
IkReal x479=(gclwh11_0*x381);
IkReal x480=(pz*x379);
IkReal x481=((2.0)*x318);
IkReal x482=((4.0)*gclwh4_8*x347);
IkReal x483=((2.0)*gclwh14_8*x335);
IkReal x484=((4.0)*gclwh12_8*x325);
IkReal x485=((2.0)*gclwh4_8*x330);
IkReal x486=((2.0)*gclwh12_8*x327);
IkReal x487=((4.0)*gclwh14_8*x320);
IkReal x488=((0.00174496)*gclwh14_2*x320);
IkReal x489=((0.00174496)*gclwh4_10*x347);
IkReal x490=((0.0014657664)*gclwh14_3*x320);
IkReal x491=((0.00174496)*gclwh1_2*x320);
IkReal x492=((0.00174496)*gclwh3_2*x325);
IkReal x493=((0.0007328832)*gclwh12_3*x327);
IkReal x494=((0.00087248)*gclwh4_2*x330);
IkReal x495=((0.0014657664)*gclwh1_3*x320);
IkReal x496=((0.00087248)*gclwh14_10*x335);
IkReal x497=((0.00087248)*gclwh12_2*x327);
IkReal x498=((0.0014657664)*gclwh3_3*x325);
IkReal x499=((0.00174496)*gclwh12_10*x325);
IkReal x500=((0.00174496)*gclwh4_2*x347);
IkReal x501=((0.00174496)*gclwh12_2*x325);
IkReal x502=((0.0007328832)*gclwh1_3*x335);
IkReal x503=((0.00087248)*gclwh12_10*x327);
IkReal x504=((0.0007328832)*gclwh3_3*x327);
IkReal x505=((0.0007328832)*gclwh14_3*x335);
IkReal x506=((0.00087248)*gclwh1_2*x335);
IkReal x507=((0.00174496)*gclwh14_10*x320);
IkReal x508=((0.00087248)*gclwh3_2*x327);
IkReal x509=((0.0014657664)*gclwh12_3*x325);
IkReal x510=((0.00087248)*gclwh14_2*x335);
IkReal x511=((0.00087248)*gclwh4_10*x330);
IkReal x512=((0.00174496)*gclwh13_9*x325);
IkReal x513=((0.0007328832)*gclwh5_1*x330);
IkReal x514=((0.00087248)*gclwh2_0*x327);
IkReal x515=((0.0007328832)*gclwh2_1*x327);
IkReal x516=((0.00087248)*gclwh13_0*x327);
IkReal x517=((0.00087248)*gclwh15_9*x335);
IkReal x518=((0.00087248)*gclwh0_0*x335);
IkReal x519=((0.0014657664)*gclwh15_1*x320);
IkReal x520=((0.00087248)*gclwh5_0*x330);
IkReal x521=((0.00174496)*gclwh5_9*x347);
IkReal x522=((0.0007328832)*gclwh0_1*x335);
IkReal x523=((0.0007328832)*gclwh13_1*x327);
IkReal x524=((0.00174496)*gclwh15_0*x320);
IkReal x525=((0.00174496)*gclwh5_0*x347);
IkReal x526=((0.0014657664)*gclwh0_1*x320);
IkReal x527=((0.00174496)*gclwh13_0*x325);
IkReal x528=((0.00174496)*gclwh0_0*x320);
IkReal x529=((0.00087248)*gclwh13_9*x327);
IkReal x530=((0.0014657664)*gclwh2_1*x325);
IkReal x531=((0.0014657664)*gclwh5_1*x347);
IkReal x532=((0.0014657664)*gclwh13_1*x325);
IkReal x533=((0.00087248)*gclwh15_0*x335);
IkReal x534=((0.0007328832)*gclwh15_1*x335);
IkReal x535=((0.00174496)*gclwh2_0*x325);
IkReal x536=((0.00174496)*gclwh15_9*x320);
IkReal x537=((0.00087248)*gclwh5_9*x330);
IkReal x538=((2.0)*gclwh5_11*x330);
IkReal x539=((4.0)*gclwh15_11*x320);
IkReal x540=((2.0)*gclwh13_11*x327);
IkReal x541=((2.0)*gclwh15_11*x335);
IkReal x542=((4.0)*gclwh5_11*x347);
IkReal x543=((4.0)*gclwh13_11*x325);
IkReal x544=(gclwh4_2*x480);
IkReal x545=(gclwh14_3*pp*x328);
IkReal x546=(x327*x387);
IkReal x547=(gclwh12_2*pz*x369);
IkReal x548=(x323*x387);
IkReal x549=((2.0)*gclwh6_8*x325);
IkReal x550=((0.42)*gclwh6_2*x327);
IkReal x551=((0.84)*gclwh10_2*x347);
IkReal x552=((0.84)*gclwh8_2*x320);
IkReal x553=((1.0)*gclwh6_8*x327);
IkReal x554=((0.42)*gclwh10_2*x330);
IkReal x555=((0.84)*gclwh6_2*x325);
IkReal x556=(x326*x366);
IkReal x557=(gclwh12_3*pp*x369);
IkReal x558=((2.0)*gclwh8_8*x320);
IkReal x559=(gclwh10_2*pz*x345);
IkReal x560=((2.0)*gclwh10_8*x347);
IkReal x561=(gclwh14_2*pz*x328);
IkReal x562=((0.42)*pp*x326);
IkReal x563=(x323*x332);
IkReal x564=((0.82)*pp*x334);
IkReal x565=(x327*x332);
IkReal x566=(gclwh5_0*x480);
IkReal x567=((2.0)*gclwh7_11*x325);
IkReal x568=((1.64)*gclwh7_9*x325);
IkReal x569=(x319*x370);
IkReal x570=(gclwh15_1*pp*x328);
IkReal x571=((0.84)*npz*x346);
IkReal x572=(x319*x371);
IkReal x573=((0.42)*gclwh7_0*x327);
IkReal x574=((0.84)*gclwh9_0*x320);
IkReal x575=((0.82)*gclwh11_9*x330);
IkReal x576=(gclwh13_0*pz*x369);
IkReal x577=((0.8)*pp*x360);
IkReal x578=((1.64)*gclwh11_9*x347);
IkReal x579=((1.0)*gclwh7_11*x327);
IkReal x580=((0.84)*gclwh7_0*x325);
IkReal x581=(gclwh13_1*pp*x369);
IkReal x582=((0.42)*gclwh11_0*x330);
IkReal x583=(gclwh15_0*pz*x328);
IkReal x584=((0.82)*gclwh7_9*x327);
IkReal x585=((1.64)*gclwh9_9*x320);
IkReal x586=((2.0)*gclwh9_11*x320);
IkReal x587=(x345*x346);
IkReal x588=((2.0)*gclwh11_11*x347);
IkReal x589=(x351*x366);
IkReal x590=((0.42)*gclwh9_0*x335);
IkReal x591=(gclwh10_2*npz*x481);
IkReal x592=(gclwh8_2*npx*x481);
IkReal x593=(gclwh10_2*x330*x336);
IkReal x594=(gclwh6_2*npy*x481);
IkReal x595=(pp*x326*x336);
IkReal x596=(gclwh9_0*npx*x481);
IkReal x597=(gclwh7_1*x325*x374);
IkReal x598=(gclwh11_0*npz*x481);
IkReal x599=(gclwh9_0*x335*x336);
IkReal x600=(gclwh11_0*x330*x336);
IkReal x601=((1.0)*x319*x341);
IkReal x602=(gclwh11_1*x347*x374);
IkReal x603=(gclwh9_1*x320*x374);
IkReal x604=(gclwh7_0*npy*x481);
IkReal x605=(x489+x499+x496+x402);
IkReal x606=(x407+x408+x503+x507+x511);
IkReal x607=(x409+x509+x502+x504+x505);
IkReal x608=(x441+x440+x442+x541+x542+x543);
IkReal x609=(x427+x430+x431+x432+x537+x536+x529);
IkReal x610=(x388+x389+x391+x390+x483+x482+x484);
IkReal x611=(x399+x498+x493+x490+x495+x401+x403);
IkReal x612=(x410+x411+x508+x500+x501+x506+x510);
IkReal x613=(x395+x394+x396+x393+x392+x485+x487+x486);
IkReal x614=(x438+x439+x434+x435+x436+x437+x540+x539+x538);
IkReal x615=(x414+x415+x418+x421+x520+x524+x518+x516+x514);
IkReal x616=(x428+x425+x424+x433+x531+x530+x532+x534+x526);
IkReal x617=(x429+x426+x423+x422+x533+x535+x527+x525+x528);
IkReal x618=(x397+x398+x488+x492+x491+x497+x494+x400+x405+x404+x406);
IkReal x619=(x412+x413+x416+x417+x419+x420+x522+x523+x521+x519+x517+x515+x513+x512);
IkReal x620=(x449+x448+x445+x444+x447+x446+x443+x450+x451+x552+x551+x550+x544+x545+x546+x547+x548+x549+x592+x591);
IkReal x621=(x458+x459+x456+x457+x454+x455+x452+x453+x559+x558+x553+x557+x556+x555+x554+x562+x560+x561+x595+x594+x593);
IkReal x622=(x469+x468+x463+x462+x461+x460+x467+x466+x465+x464+x470+x575+x574+x576+x571+x570+x573+x572+x568+x569+x566+x567+x564+x565+x563+x597+x596+x598);
IkReal x623=(x474+x475+x476+x477+x471+x472+x473+x478+x479+x579+x578+x577+x580+x581+x582+x583+x584+x585+x586+x587+x588+x589+x590+x599+x603+x602+x601+x600+x604);
op[36]=((0.3528)+(((-1.0)*x610))+x613);
op[37]=((-0.0007328832)+(((-1.0)*x618))+x605+x611+x612+(((-1.0)*x606))+(((-1.0)*x607)));
op[38]=((((-0.2688)*x372))+(((0.2688)*x361))+(((-8.0)*gclwh14_4*x320))+(((3.36)*gclwh14_14*x320))+(((-1.0)*gclwh10_4*x329))+(((4.0)*gclwh14_4*x335))+(((8.0)*gclwh4_4*x347))+(((0.2688)*x321))+(((8.0)*gclwh12_4*x325))+(((1.68)*pp*x321))+(((-1.0)*gclwh8_4*x363))+(((-3.36)*gclwh4_14*x347))+(((-4.0)*gclwh12_4*x327))+(((-1.0)*gclwh4_4*x352))+(((1.68)*gclwh12_14*x327))+(((-3.36)*gclwh12_14*x325))+(((-1.68)*gclwh14_14*x335))+(((-4.0)*gclwh4_4*x330))+((gclwh6_4*x383))+((gclwh14_4*x354))+(((-1.0)*gclwh12_4*x359)));
op[39]=((((-0.0002791936)*x361))+(((-0.0002791936)*x321))+(((-1.0)*x321*x322))+(((0.00348992)*gclwh4_14*x347))+(((0.00348992)*gclwh12_14*x325))+((x322*x372))+(((0.0002791936)*x372))+(((-1.0)*x322*x361))+(((-0.00348992)*gclwh14_14*x320)));
op[40]=((-0.3528)+(((-1.0)*x613))+x610);
op[41]=((0.0007328832)+(((-1.0)*x612))+x605+x618+x611+(((-1.0)*x606))+(((-1.0)*x607)));
op[42]=((-0.0007328832)+(((-1.0)*x616))+(((-1.0)*x615))+x619+x617+(((-1.0)*x609)));
op[43]=((-0.3528)+(((-1.0)*x614))+x608);
op[44]=((((-0.0002791936)*x376))+(((-0.0002791936)*x362))+(((0.00348992)*gclwh13_15*x325))+(((-0.001395968)*x333))+(((0.00348992)*gclwh5_15*x347))+(((0.0002791936)*x364))+((x322*x364))+(((-0.001395968)*x356))+(((-0.00348992)*gclwh15_15*x320))+(((-1.0)*x322*x376))+(((-1.0)*x322*x362))+(((0.001395968)*x365)));
op[45]=((((-1.0)*gclwh13_6*x359))+(((8.0)*gclwh5_6*x347))+(((-0.2688)*x376))+(((3.36)*gclwh13_15*x325))+(((0.2688)*x364))+(((-0.2688)*x362))+(((-8.0)*gclwh15_6*x320))+(((-1.0)*gclwh9_6*x363))+(((-4.0)*gclwh5_6*x330))+(((-1.0)*gclwh5_6*x352))+(((1.68)*gclwh15_15*x335))+((gclwh15_6*x354))+(((1.344)*x365))+(((8.0)*gclwh13_6*x325))+(((-4.0)*gclwh13_6*x327))+(((4.0)*gclwh15_6*x335))+(((-1.68)*gclwh13_15*x327))+(((-3.36)*gclwh15_15*x320))+(((-1.0)*gclwh11_6*x329))+((gclwh7_6*x383))+(((-1.344)*x356))+(((-1.344)*x333))+(((-1.68)*gclwh5_15*x330))+(((3.36)*gclwh5_15*x347)));
op[46]=((0.0007328832)+(((-1.0)*x617))+(((-1.0)*x616))+x619+x615+(((-1.0)*x609)));
op[47]=((0.3528)+x614+(((-1.0)*x608)));
op[48]=(((gclwh14_10*x338))+(((-1.0)*gclwh12_10*x344))+(((0.00174496)*gclwh6_12*x325))+(((-0.00174496)*gclwh8_12*x320))+(((0.00087248)*gclwh10_12*x330))+((gclwh8_12*x337))+(((-1.0)*gclwh6_12*x324))+(((-0.00174496)*gclwh10_12*x347))+(((0.00087248)*gclwh8_12*x335))+(((-1.0)*gclwh4_10*x331))+((gclwh10_12*x349))+(((-0.00087248)*gclwh6_12*x327)));
op[49]=((((-1.0)*x621))+((gclwh12_3*x382))+(((-0.0131206089770803)*x348))+x620);
op[50]=((-0.0007328832)+(((0.00174496)*gclwh6_5*x325))+(((0.00087248)*gclwh10_5*x330))+(((-1.0)*gclwh6_5*x324))+((gclwh4_14*x331))+((gclwh8_5*x337))+(((-1.0)*gclwh14_14*x338))+(((0.00087248)*gclwh8_5*x335))+((gclwh12_14*x344))+(((-0.00087248)*gclwh6_5*x327))+((gclwh10_5*x349))+(((-0.00174496)*gclwh10_5*x347))+(((-0.00174496)*gclwh8_5*x320)));
op[51]=0;
op[52]=0;
op[53]=((((-1.0)*x621))+(((-0.01312)*x348))+((gclwh12_3*x340))+x620);
op[54]=((((-0.14359923877865)*gclwh7_1*x327))+(((-0.00262412179541606)*x370))+(((-0.00262412179541606)*x371))+(((0.00262412179541606)*x341))+(((-1.0)*x623))+(((0.0328015224427008)*gclwh11_1*x347))+(((0.0328015224427008)*gclwh9_1*x320))+(((-0.0131206089770803)*x380))+(((0.0131206089770803)*x360))+x622+(((0.14359923877865)*gclwh11_1*x330))+(((0.14359923877865)*gclwh9_1*x335))+((gclwh13_1*x382))+(((-0.0328015224427008)*gclwh7_1*x325)));
op[55]=((((0.00174496)*gclwh7_13*x325))+(((-0.0001395968)*x334))+((gclwh5_9*x331))+(((-0.00174496)*gclwh11_13*x347))+(((-1.0)*gclwh15_9*x338))+(((-1.0)*gclwh7_13*x324))+(((0.00087248)*gclwh11_13*x330))+(((0.00087248)*gclwh7_9*x327))+(((-0.00174496)*gclwh9_13*x320))+(((0.00087248)*gclwh9_13*x335))+(((-0.00087248)*gclwh7_13*x327))+(((-1.0)*gclwh11_9*x349))+((gclwh9_13*x337))+((gclwh13_9*x344))+((gclwh11_13*x349))+(((-0.00174496)*gclwh7_9*x325))+(((-0.00087248)*gclwh11_9*x330))+(((0.00174496)*gclwh9_9*x320))+(((0.00174496)*gclwh11_9*x347))+(((-1.0)*x334*x353))+((gclwh7_9*x324)));
op[56]=0;
op[57]=((-0.0007328832)+((gclwh15_15*x338))+((gclwh11_15*x349))+(((0.00087248)*gclwh11_15*x330))+(((-0.00087248)*gclwh7_7*x327))+(((-0.00174496)*gclwh11_7*x347))+(((-1.0)*gclwh13_15*x344))+(((0.00087248)*gclwh9_7*x335))+(((-1.0)*gclwh7_7*x324))+(((-0.00174496)*gclwh9_15*x320))+((gclwh9_7*x337))+(((-1.0)*gclwh5_15*x331))+(((-1.0)*gclwh7_15*x324))+((gclwh9_15*x337))+(((0.00087248)*gclwh9_15*x335))+(((0.00174496)*gclwh7_7*x325))+(((-0.00087248)*gclwh7_15*x327))+(((-0.00174496)*gclwh11_15*x347))+((gclwh11_7*x349))+(((0.00087248)*gclwh11_7*x330))+(((0.00174496)*gclwh7_15*x325))+(((-0.00174496)*gclwh9_7*x320)));
op[58]=((((0.1436)*gclwh9_1*x335))+((gclwh13_1*x340))+(((-0.0328)*gclwh7_1*x325))+(((-1.0)*x623))+(((-0.002624)*x370))+(((-0.002624)*x371))+(((0.0328)*gclwh11_1*x347))+(((-0.1436)*gclwh7_1*x327))+(((0.1436)*gclwh11_1*x330))+x622+(((-0.01312)*x380))+(((0.002624)*x341))+(((0.01312)*x360))+(((0.0328)*gclwh9_1*x320)));
op[59]=0;
op[60]=((-0.0007328832)+((gclwh8_12*x338))+(((-1.0)*gclwh6_12*x344))+x606+(((-1.0)*x605))+((gclwh10_12*x331)));
op[61]=((-0.17639923877865)+(((0.8)*gclwh8_8*rxp0_2))+(((-0.0328015224427008)*gclwh1_3*npx*pz))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((-2.0)*gclwh1_2*npx*(pz*pz)))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((0.42)*gclwh14_2*pp*r20))+(((0.84)*gclwh4_2*npz*pz))+(((-0.16)*gclwh14_8*r20))+(((-0.00262412179541606)*gclwh3_3*r21))+(((-0.02)*gclwh14_10*pp*r20))+(((-0.0672)*gclwh12_2*r21))+(((-0.0328015224427008)*gclwh14_3*npx*pz))+(((0.42)*gclwh1_2*pp*r20))+(((-0.8)*gclwh8_2*pz*rxp0_2))+(((-0.8)*pz))+(((-0.0672)*gclwh1_2*r20))+(((0.00262412179541606)*gclwh14_3*r20))+(((0.42)*gclwh3_2*pp*r21))+((gclwh12_3*r21*(pp*pp)))+(((-0.0032)*gclwh14_10*r20))+(((0.8)*gclwh10_8*rxp2_2))+(((-2.0)*gclwh4_8*npz*pz))+(((-1.0)*gclwh14_8*pp*r20))+((gclwh1_2*pp*pz*r20))+(((0.04)*gclwh14_10*npx*pz))+(((-0.42)*gclwh12_2*pp*r21))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.8)*gclwh6_8*rxp1_2))+(((-0.0328015224427008)*gclwh3_3*npy*pz))+(((-0.0672)*gclwh3_2*r21))+(((0.0032)*gclwh4_10*r22))+(((2.0)*gclwh3_3*npy*pp*pz))+(((0.0672)*gclwh14_2*r20))+(((0.16)*gclwh12_8*r21))+(((-1.0)*gclwh3_3*r21*(pp*pp)))+(((-0.42)*gclwh4_2*pp*r22))+(((0.16)*gclwh4_8*r22))+((gclwh3_2*pp*pz*r21))+(((-0.0672)*gclwh4_2*r22))+(((0.02)*gclwh12_10*pp*r21))+(((-0.04)*gclwh4_10*npz*pz))+(((-0.84)*gclwh1_2*npx*pz))+(((-2.0)*gclwh12_8*npy*pz))+(((-2.0)*gclwh3_2*npy*(pz*pz)))+(((0.0328015224427008)*gclwh12_3*npy*pz))+(((-0.04)*gclwh12_10*npy*pz))+(((0.336)*gclwh6_2*rxp1_2))+(((0.14359923877865)*gclwh12_3*pp*r21))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-0.84)*gclwh14_2*npx*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((-0.336)*gclwh10_2*rxp2_2))+((gclwh12_8*pp*r21))+(((-0.00262412179541606)*gclwh12_3*r21))+(((-0.16)*gclwh3_2*pz*r21))+(((2.0)*gclwh1_3*npx*pp*pz))+(((0.17640076122135)*gclwh1_3*pp*r20))+(((0.17640076122135)*gclwh3_3*pp*r21))+(((-0.16)*gclwh1_2*pz*r20))+(((0.0032)*gclwh12_10*r21))+(((2.0)*gclwh14_8*npx*pz))+(((0.84)*gclwh12_2*npy*pz))+(((-0.14359923877865)*gclwh14_3*pp*r20))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((0.8)*gclwh6_2*pz*rxp1_2))+(((0.02)*gclwh4_10*pp*r22))+(((-0.16)*gclwh4_2*pz*r22))+(((-0.16)*gclwh12_2*pz*r21))+(((-0.336)*gclwh8_2*rxp0_2))+(((-0.84)*gclwh3_2*npy*pz))+(((-0.00262412179541606)*gclwh1_3*r20))+((gclwh4_8*pp*r22))+(((-0.8)*gclwh10_2*pz*rxp2_2))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((0.16)*gclwh14_2*pz*r20))+(((-1.0)*gclwh1_3*r20*(pp*pp))));
op[62]=((((-1.0)*gclwh12_14*x324))+(((-1.0)*x321*x353))+(((0.00174496)*gclwh4_14*x347))+(((-0.0001395968)*x321))+(((-0.00174496)*gclwh14_14*x320))+((gclwh8_5*x338))+(((0.00174496)*gclwh12_14*x325))+((gclwh10_5*x331))+(((-1.0)*gclwh6_5*x344))+(((0.00087248)*gclwh14_14*x335))+(((-0.00087248)*gclwh12_14*x327))+((gclwh14_14*x337)));
op[63]=0;
op[64]=0;
op[65]=((-0.1764)+(((0.8)*gclwh8_8*rxp0_2))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((-2.0)*gclwh1_2*npx*(pz*pz)))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((0.42)*gclwh14_2*pp*r20))+(((0.84)*gclwh4_2*npz*pz))+(((-0.16)*gclwh14_8*r20))+(((-0.02)*gclwh14_10*pp*r20))+(((-0.0672)*gclwh12_2*r21))+(((0.42)*gclwh1_2*pp*r20))+(((-0.8)*gclwh8_2*pz*rxp0_2))+(((-0.8)*pz))+(((-0.0672)*gclwh1_2*r20))+(((0.42)*gclwh3_2*pp*r21))+((gclwh12_3*r21*(pp*pp)))+(((-0.0032)*gclwh14_10*r20))+(((0.8)*gclwh10_8*rxp2_2))+(((-2.0)*gclwh4_8*npz*pz))+(((-1.0)*gclwh14_8*pp*r20))+((gclwh1_2*pp*pz*r20))+(((0.04)*gclwh14_10*npx*pz))+(((-0.42)*gclwh12_2*pp*r21))+(((0.1764)*gclwh3_3*pp*r21))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.8)*gclwh6_8*rxp1_2))+(((-0.002624)*gclwh1_3*r20))+(((-0.0672)*gclwh3_2*r21))+(((0.0032)*gclwh4_10*r22))+(((2.0)*gclwh3_3*npy*pp*pz))+(((0.0672)*gclwh14_2*r20))+(((0.16)*gclwh12_8*r21))+(((-1.0)*gclwh3_3*r21*(pp*pp)))+(((-0.42)*gclwh4_2*pp*r22))+(((0.16)*gclwh4_8*r22))+((gclwh3_2*pp*pz*r21))+(((-0.0672)*gclwh4_2*r22))+(((0.02)*gclwh12_10*pp*r21))+(((-0.04)*gclwh4_10*npz*pz))+(((-0.84)*gclwh1_2*npx*pz))+(((-2.0)*gclwh12_8*npy*pz))+(((-0.002624)*gclwh3_3*r21))+(((-2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.002624)*gclwh12_3*r21))+(((-0.04)*gclwh12_10*npy*pz))+(((0.336)*gclwh6_2*rxp1_2))+(((0.002624)*gclwh14_3*r20))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-0.84)*gclwh14_2*npx*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((-0.336)*gclwh10_2*rxp2_2))+((gclwh12_8*pp*r21))+(((-0.0328)*gclwh14_3*npx*pz))+(((0.1436)*gclwh12_3*pp*r21))+(((-0.16)*gclwh3_2*pz*r21))+(((2.0)*gclwh1_3*npx*pp*pz))+(((-0.0328)*gclwh3_3*npy*pz))+(((-0.0328)*gclwh1_3*npx*pz))+(((-0.16)*gclwh1_2*pz*r20))+(((0.0032)*gclwh12_10*r21))+(((2.0)*gclwh14_8*npx*pz))+(((0.84)*gclwh12_2*npy*pz))+(((0.1764)*gclwh1_3*pp*r20))+(((0.0328)*gclwh12_3*npy*pz))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((0.8)*gclwh6_2*pz*rxp1_2))+(((0.02)*gclwh4_10*pp*r22))+(((-0.16)*gclwh4_2*pz*r22))+(((-0.16)*gclwh12_2*pz*r21))+(((-0.1436)*gclwh14_3*pp*r20))+(((-0.336)*gclwh8_2*rxp0_2))+(((-0.84)*gclwh3_2*npy*pz))+((gclwh4_8*pp*r22))+(((-0.8)*gclwh10_2*pz*rxp2_2))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((0.16)*gclwh14_2*pz*r20))+(((-1.0)*gclwh1_3*r20*(pp*pp))));
op[66]=((-0.17639923877865)+((gclwh15_0*pp*pz*r20))+(((2.0)*gclwh15_11*npx*pz))+(((0.14359923877865)*gclwh13_1*pp*r21))+((gclwh13_1*r21*(pp*pp)))+(((-0.656)*gclwh7_9*rxp1_2))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((0.82)*gclwh5_9*pp*r22))+(((-0.17640076122135)*gclwh2_1*pp*r21))+(((0.1312)*gclwh13_9*r21))+(((-0.42)*gclwh13_0*pp*r21))+(((0.0672)*gclwh0_0*r20))+(((0.82)*gclwh13_9*pp*r21))+(((-0.84)*gclwh15_0*npx*pz))+(((-0.42)*gclwh2_0*pp*r21))+(((-0.16)*gclwh13_0*pz*r21))+(((0.8)*gclwh11_1*pp*rxp2_2))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((-0.8)*gclwh7_11*rxp1_2))+(((0.16)*gclwh2_0*pz*r21))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((-2.0)*gclwh13_11*npy*pz))+(((0.656)*gclwh11_9*rxp2_2))+(((0.8)*gclwh9_11*rxp0_2))+(((-0.8)*gclwh11_0*pz*rxp2_2))+(((0.0328015224427008)*gclwh13_1*npy*pz))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((-0.0672)*gclwh13_0*r21))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((0.8)*gclwh9_1*pp*rxp0_2))+(((0.336)*gclwh7_0*rxp1_2))+(((-0.8)*gclwh9_0*pz*rxp0_2))+(((0.8)*pz))+(((0.00262412179541606)*gclwh2_1*r21))+(((-0.336)*gclwh9_0*rxp0_2))+(((0.8)*gclwh7_0*pz*rxp1_2))+(((0.16)*gclwh15_0*pz*r20))+(((-0.0672)*gclwh5_0*r22))+(((0.16)*gclwh13_11*r21))+(((-0.00262412179541606)*gclwh5_1*r22))+(((-0.0131206089770803)*gclwh11_1*rxp2_2))+(((-0.8)*gclwh7_1*pp*rxp1_2))+(((0.00262412179541606)*gclwh15_1*r20))+(((0.14359923877865)*gclwh5_1*pp*r22))+(((1.64)*gclwh15_9*npx*pz))+(((0.0672)*gclwh2_0*r21))+(((0.8)*gclwh11_11*rxp2_2))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((-0.336)*gclwh11_0*rxp2_2))+(((0.0672)*gclwh15_0*r20))+(((-0.16)*gclwh15_11*r20))+(((0.0328015224427008)*gclwh0_1*npx*pz))+(((-0.00262412179541606)*gclwh13_1*r21))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-2.0)*gclwh5_11*npz*pz))+(((0.0328015224427008)*gclwh5_1*npz*pz))+(((-0.0131206089770803)*gclwh9_1*rxp0_2))+(((0.0131206089770803)*gclwh7_1*rxp1_2))+(((-0.82)*gclwh15_9*pp*r20))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-1.64)*gclwh13_9*npy*pz))+(((-1.64)*gclwh5_9*npz*pz))+(((0.0328015224427008)*gclwh2_1*npy*pz))+(((-1.0)*gclwh5_0*pp*pz*r22))+((gclwh5_11*pp*r22))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((0.00262412179541606)*gclwh0_1*r20))+((gclwh2_1*r21*(pp*pp)))+(((-0.17640076122135)*gclwh0_1*pp*r20))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((-0.42)*gclwh5_0*pp*r22))+(((0.16)*gclwh0_0*pz*r20))+(((0.84)*gclwh5_0*npz*pz))+(((0.84)*gclwh2_0*npy*pz))+((gclwh13_11*pp*r21))+(((-0.16)*gclwh5_0*pz*r22))+(((-0.1312)*gclwh15_9*r20))+(((-1.0)*gclwh15_11*pp*r20))+(((-0.42)*gclwh0_0*pp*r20))+(((0.656)*gclwh9_9*rxp0_2))+(((0.84)*gclwh0_0*npx*pz))+(((-0.14359923877865)*gclwh15_1*pp*r20))+((gclwh5_1*r22*(pp*pp)))+(((0.1312)*gclwh5_9*r22))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((0.42)*gclwh15_0*pp*r20))+(((-0.0328015224427008)*gclwh15_1*npx*pz))+((gclwh0_1*r20*(pp*pp)))+(((0.16)*gclwh5_11*r22))+(((2.0)*gclwh15_1*npx*pp*pz))+(((0.84)*gclwh13_0*npy*pz)));
op[67]=((0.0007328832)+(((-1.0)*gclwh7_13*x344))+x413+x416+x521+x517+x512+((gclwh9_13*x338))+(((-1.0)*x609))+((gclwh11_13*x331)));
op[68]=0;
op[69]=((((-0.00087248)*gclwh15_15*x335))+((gclwh5_15*x349))+((gclwh11_15*x331))+(((-0.00174496)*gclwh5_15*x347))+(((-1.0)*gclwh15_15*x337))+(((0.00174496)*gclwh15_15*x320))+((gclwh11_7*x331))+((gclwh9_7*x338))+(((-0.00174496)*gclwh13_15*x325))+((gclwh13_15*x324))+(((-1.0)*gclwh7_7*x344))+(((-1.0)*gclwh7_15*x344))+(((0.00087248)*gclwh13_15*x327))+(((0.00087248)*gclwh5_15*x330))+(((0.000697984)*x333)));
op[70]=((-0.1764)+((gclwh15_0*pp*pz*r20))+(((2.0)*gclwh15_11*npx*pz))+((gclwh13_1*r21*(pp*pp)))+(((-0.1764)*gclwh0_1*pp*r20))+(((-0.656)*gclwh7_9*rxp1_2))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((-0.0328)*gclwh15_1*npx*pz))+(((0.82)*gclwh5_9*pp*r22))+(((0.1312)*gclwh13_9*r21))+(((-0.42)*gclwh13_0*pp*r21))+(((0.0672)*gclwh0_0*r20))+(((0.82)*gclwh13_9*pp*r21))+(((0.1436)*gclwh13_1*pp*r21))+(((-0.84)*gclwh15_0*npx*pz))+(((-0.42)*gclwh2_0*pp*r21))+(((-0.16)*gclwh13_0*pz*r21))+(((0.8)*gclwh11_1*pp*rxp2_2))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((-0.8)*gclwh7_11*rxp1_2))+(((0.16)*gclwh2_0*pz*r21))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((-2.0)*gclwh13_11*npy*pz))+(((0.656)*gclwh11_9*rxp2_2))+(((0.8)*gclwh9_11*rxp0_2))+(((-0.8)*gclwh11_0*pz*rxp2_2))+(((-0.002624)*gclwh13_1*r21))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((-0.0672)*gclwh13_0*r21))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((0.8)*gclwh9_1*pp*rxp0_2))+(((0.1436)*gclwh5_1*pp*r22))+(((0.0328)*gclwh2_1*npy*pz))+(((0.336)*gclwh7_0*rxp1_2))+(((-0.8)*gclwh9_0*pz*rxp0_2))+(((0.8)*pz))+(((-0.336)*gclwh9_0*rxp0_2))+(((0.8)*gclwh7_0*pz*rxp1_2))+(((0.16)*gclwh15_0*pz*r20))+(((-0.0672)*gclwh5_0*r22))+(((0.16)*gclwh13_11*r21))+(((0.0328)*gclwh0_1*npx*pz))+(((-0.8)*gclwh7_1*pp*rxp1_2))+(((1.64)*gclwh15_9*npx*pz))+(((0.0672)*gclwh2_0*r21))+(((0.002624)*gclwh15_1*r20))+(((0.8)*gclwh11_11*rxp2_2))+(((-0.1764)*gclwh2_1*pp*r21))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((-0.336)*gclwh11_0*rxp2_2))+(((0.0672)*gclwh15_0*r20))+(((-0.16)*gclwh15_11*r20))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-2.0)*gclwh5_11*npz*pz))+(((-0.1436)*gclwh15_1*pp*r20))+(((-0.82)*gclwh15_9*pp*r20))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-1.64)*gclwh13_9*npy*pz))+(((-1.64)*gclwh5_9*npz*pz))+(((-1.0)*gclwh5_0*pp*pz*r22))+((gclwh5_11*pp*r22))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((0.01312)*gclwh7_1*rxp1_2))+(((0.0328)*gclwh13_1*npy*pz))+((gclwh2_1*r21*(pp*pp)))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((0.002624)*gclwh2_1*r21))+(((-0.42)*gclwh5_0*pp*r22))+(((0.16)*gclwh0_0*pz*r20))+(((0.84)*gclwh5_0*npz*pz))+(((0.84)*gclwh2_0*npy*pz))+((gclwh13_11*pp*r21))+(((-0.16)*gclwh5_0*pz*r22))+(((-0.01312)*gclwh9_1*rxp0_2))+(((-0.1312)*gclwh15_9*r20))+(((-1.0)*gclwh15_11*pp*r20))+(((-0.01312)*gclwh11_1*rxp2_2))+(((-0.42)*gclwh0_0*pp*r20))+(((0.656)*gclwh9_9*rxp0_2))+(((0.84)*gclwh0_0*npx*pz))+((gclwh5_1*r22*(pp*pp)))+(((-0.002624)*gclwh5_1*r22))+(((0.1312)*gclwh5_9*r22))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((0.42)*gclwh15_0*pp*r20))+(((0.002624)*gclwh0_1*r20))+((gclwh0_1*r20*(pp*pp)))+(((0.16)*gclwh5_11*r22))+(((0.0328)*gclwh5_1*npz*pz))+(((2.0)*gclwh15_1*npx*pp*pz))+(((0.84)*gclwh13_0*npy*pz)));
op[71]=0;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j8array[16], cj8array[16], sj8array[16], j9array[16], cj9array[16], sj9array[16], j10array[16], cj10array[16], sj10array[16];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ij8 += 3)
{
IkReal htj8 = zeror[ij8+0], htj9 = zeror[ij8+1], htj10 = zeror[ij8+2];
if(isnan(htj8)||isnan(htj9)||isnan(htj10)){
continue;
}
j8array[numsolutions]=((2.0)*(atan(htj8)));
j9array[numsolutions]=((2.0)*(atan(htj9)));
j10array[numsolutions]=((2.0)*(atan(htj10)));
if(isinf(htj8)){
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
}
else{
IkReal x624=htj8*htj8;
CheckValue<IkReal> x625=IKPowWithIntegerCheck(((1.0)+x624),-1);
if(!x625.valid){
continue;
}
cj8array[numsolutions]=((x625.value)*(((1.0)+(((-1.0)*x624)))));
CheckValue<IkReal> x626=IKPowWithIntegerCheck(((1.0)+(htj8*htj8)),-1);
if(!x626.valid){
continue;
}
sj8array[numsolutions]=((2.0)*htj8*(x626.value));
}
if(isinf(htj9)){
cj9array[numsolutions] = IKcos(j9array[numsolutions]);
sj9array[numsolutions] = IKsin(j9array[numsolutions]);
}
else{
IkReal x627=htj9*htj9;
CheckValue<IkReal> x628=IKPowWithIntegerCheck(((1.0)+x627),-1);
if(!x628.valid){
continue;
}
cj9array[numsolutions]=((x628.value)*(((1.0)+(((-1.0)*x627)))));
CheckValue<IkReal> x629=IKPowWithIntegerCheck(((1.0)+(htj9*htj9)),-1);
if(!x629.valid){
continue;
}
sj9array[numsolutions]=((2.0)*htj9*(x629.value));
}
if(isinf(htj10)){
cj10array[numsolutions] = IKcos(j10array[numsolutions]);
sj10array[numsolutions] = IKsin(j10array[numsolutions]);
}
else{
IkReal x630=htj10*htj10;
CheckValue<IkReal> x631=IKPowWithIntegerCheck(((1.0)+x630),-1);
if(!x631.valid){
continue;
}
cj10array[numsolutions]=((x631.value)*(((1.0)+(((-1.0)*x630)))));
CheckValue<IkReal> x632=IKPowWithIntegerCheck(((1.0)+(htj10*htj10)),-1);
if(!x632.valid){
continue;
}
sj10array[numsolutions]=((2.0)*htj10*(x632.value));
}
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
if( j9array[numsolutions] > IKPI )
{
    j9array[numsolutions]-=IK2PI;
}
else if( j9array[numsolutions] < -IKPI )
{
    j9array[numsolutions]+=IK2PI;
}
if( j10array[numsolutions] > IKPI )
{
    j10array[numsolutions]-=IK2PI;
}
else if( j10array[numsolutions] < -IKPI )
{
    j10array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j8valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj8 = 16;
_nj9 = 1;
_nj10 = 1;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
_ij9[0] = 0; _ij9[1] = -1;
_ij10[0] = 0; _ij10[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( !j8valid[iij8] ) { continue; }
if( IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(cj9array[ij8]-cj9array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij8]-sj9array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(cj10array[ij8]-cj10array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij8]-sj10array[iij8]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j8valid[iij8]=false; _ij8[1] = iij8; _ij9[1] = 0; _ij10[1] = 0;  break; 
}
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

    j9 = j9array[ij8]; cj9 = cj9array[ij8]; sj9 = sj9array[ij8];

    j10 = j10array[ij8]; cj10 = cj10array[ij8]; sj10 = sj10array[ij8];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j12eval[2];
j12eval[0]=((r20*r20)+(r21*r21));
j12eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[2];
IkReal x633=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x633);
rxp1_0=(pz*r11);
rxp1_1=(r01*x633);
j11eval[0]=r22;
j11eval[1]=sj10;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x634=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x634);
rxp1_0=(pz*r11);
rxp1_1=(r01*x634);
j11eval[0]=cj10;
j11eval[1]=r22;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x637=IKPowWithIntegerCheck(r22,-1);
if(!x637.valid){
continue;
}
IkReal x635=x637.value;
IkReal x636=(sj8*x635);
CheckValue<IkReal> x638=IKPowWithIntegerCheck(cj10,-1);
if(!x638.valid){
continue;
}
if( IKabs((cj9*x636*(x638.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj9*x636)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj9*x636*(x638.value)))+IKsqr((sj9*x636))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((cj9*x636*(x638.value)), (sj9*x636));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x639=IKsin(j11);
IkReal x640=((1.0)*sj8);
IkReal x641=(r22*x639);
evalcond[0]=(((sj10*x641))+cj8);
evalcond[1]=(((r22*(IKcos(j11))))+(((-1.0)*sj9*x640)));
evalcond[2]=((((-1.0)*cj9*x640))+((cj10*x641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j12evalpoly[1];
IkReal x642=cj8*cj8;
IkReal x643=sj9*sj9;
IkReal x644=cj9*cj9;
IkReal x645=(cj11*sj10);
IkReal x646=((8.0)*r01);
IkReal x647=((4.0)*r00);
IkReal x648=(cj10*r01);
IkReal x649=((16.0)*r01);
IkReal x650=(sj11*sj8);
IkReal x651=(cj9*r11);
IkReal x652=(cj8*sj9);
IkReal x653=(r02*sj10*sj11);
IkReal x654=((4.0)*x644);
IkReal x655=(cj11*r02*sj8);
IkReal x656=((16.0)*cj10*r00);
IkReal x657=((8.0)*cj10*r00);
IkReal x658=(x642*x643);
IkReal x659=(cj11*cj9*r12*sj8);
IkReal x660=((4.0)*cj9*r10*x650);
IkReal x661=(x648*x654);
IkReal x662=((12.0)*x659);
IkReal x663=((4.0)*x659);
IkReal x664=(x644*x645*x647);
IkReal x665=(x647*x650*x652);
IkReal x666=((12.0)*x652*x655);
IkReal x667=((12.0)*x644*x653);
IkReal x668=((4.0)*x652*x655);
IkReal x669=(x653*x654);
IkReal x670=((4.0)*x648*x658);
IkReal x671=(x645*x647*x658);
IkReal x672=((12.0)*x653*x658);
IkReal x673=((4.0)*x653*x658);
IkReal x674=(x661+x660+x670);
IkReal x675=(x669+x663+x673);
IkReal x676=(x662+x667+x672);
IkReal x677=(x665+x664+x671);
IkReal x678=((((-1.0)*x657*x658))+(((8.0)*x650*x651))+(((-1.0)*x645*x646*x658))+(((-1.0)*x644*x657))+(((-1.0)*x644*x645*x646))+(((-1.0)*x646*x650*x652)));
op[0]=(x668+x674+(((-1.0)*x675))+(((-1.0)*x677)));
op[1]=x678;
op[2]=(x666+x674+(((-1.0)*x677))+(((-1.0)*x676)));
op[3]=((((-1.0)*x649*x650*x652))+(((-1.0)*x656*x658))+(((-1.0)*x644*x656))+(((-1.0)*x644*x645*x649))+(((-1.0)*x645*x649*x658))+(((16.0)*x650*x651)));
op[4]=(x666+x677+(((-1.0)*x674))+(((-1.0)*x676)));
op[5]=x678;
op[6]=(x668+x677+(((-1.0)*x675))+(((-1.0)*x674)));
polyroots6(op,zeror,numroots);
IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[6]={true,true,true,true,true,true};
_nj12 = 6;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

j12evalpoly[0]=((((4.0)*cj11*cj8*r12*sj8*sj9))+(((4.0)*cj11*cj9*r02*sj8))+(((-4.0)*cj10*r11*(cj8*cj8)*(sj9*sj9)))+(((4.0)*cj8*r10*sj11*sj8*sj9))+(((-4.0)*cj10*r11*(cj9*cj9)))+(((htj12*htj12*htj12*htj12)*(((((12.0)*cj11*cj8*r12*sj8*sj9))+(((12.0)*cj11*cj9*r02*sj8))+(((-12.0)*r12*sj10*sj11*(cj8*cj8)*(sj9*sj9)))+(((4.0)*cj10*r11*(cj8*cj8)*(sj9*sj9)))+(((4.0)*cj10*r11*(cj9*cj9)))+(((-4.0)*cj11*r10*sj10*(cj8*cj8)*(sj9*sj9)))+(((-4.0)*cj9*r00*sj11*sj8))+(((-4.0)*cj11*r10*sj10*(cj9*cj9)))+(((-4.0)*cj8*r10*sj11*sj8*sj9))+(((-12.0)*r12*sj10*sj11*(cj9*cj9)))))))+(((-4.0)*r12*sj10*sj11*(cj9*cj9)))+(((-4.0)*r12*sj10*sj11*(cj8*cj8)*(sj9*sj9)))+((htj12*(((((-8.0)*cj10*r10*(cj9*cj9)))+(((-8.0)*cj9*r01*sj11*sj8))+(((-8.0)*cj11*r11*sj10*(cj8*cj8)*(sj9*sj9)))+(((-8.0)*cj11*r11*sj10*(cj9*cj9)))+(((-8.0)*cj10*r10*(cj8*cj8)*(sj9*sj9)))+(((-8.0)*cj8*r11*sj11*sj8*sj9))))))+(((4.0)*cj11*r10*sj10*(cj8*cj8)*(sj9*sj9)))+(((htj12*htj12)*(((((12.0)*cj11*cj8*r12*sj8*sj9))+(((-4.0)*cj10*r11*(cj8*cj8)*(sj9*sj9)))+(((12.0)*cj11*cj9*r02*sj8))+(((-12.0)*r12*sj10*sj11*(cj8*cj8)*(sj9*sj9)))+(((4.0)*cj8*r10*sj11*sj8*sj9))+(((-4.0)*cj10*r11*(cj9*cj9)))+(((4.0)*cj11*r10*sj10*(cj8*cj8)*(sj9*sj9)))+(((4.0)*cj9*r00*sj11*sj8))+(((4.0)*cj11*r10*sj10*(cj9*cj9)))+(((-12.0)*r12*sj10*sj11*(cj9*cj9)))))))+(((htj12*htj12*htj12)*(((((-16.0)*cj9*r01*sj11*sj8))+(((-16.0)*cj8*r11*sj11*sj8*sj9))+(((-16.0)*cj11*r11*sj10*(cj8*cj8)*(sj9*sj9)))+(((-16.0)*cj10*r10*(cj9*cj9)))+(((-16.0)*cj10*r10*(cj8*cj8)*(sj9*sj9)))+(((-16.0)*cj11*r11*sj10*(cj9*cj9)))))))+(((htj12*htj12*htj12*htj12*htj12)*(((((-8.0)*cj10*r10*(cj9*cj9)))+(((-8.0)*cj9*r01*sj11*sj8))+(((-8.0)*cj11*r11*sj10*(cj8*cj8)*(sj9*sj9)))+(((-8.0)*cj11*r11*sj10*(cj9*cj9)))+(((-8.0)*cj10*r10*(cj8*cj8)*(sj9*sj9)))+(((-8.0)*cj8*r11*sj11*sj8*sj9))))))+(((4.0)*cj9*r00*sj11*sj8))+(((4.0)*cj11*r10*sj10*(cj9*cj9)))+(((htj12*htj12*htj12*htj12*htj12*htj12)*(((((4.0)*cj11*cj8*r12*sj8*sj9))+(((4.0)*cj11*cj9*r02*sj8))+(((4.0)*cj10*r11*(cj8*cj8)*(sj9*sj9)))+(((-4.0)*r12*sj10*sj11*(cj9*cj9)))+(((-4.0)*r12*sj10*sj11*(cj8*cj8)*(sj9*sj9)))+(((4.0)*cj10*r11*(cj9*cj9)))+(((-4.0)*cj11*r10*sj10*(cj8*cj8)*(sj9*sj9)))+(((-4.0)*cj9*r00*sj11*sj8))+(((-4.0)*cj11*r10*sj10*(cj9*cj9)))+(((-4.0)*cj8*r10*sj11*sj8*sj9)))))));
if( IKabs(j12evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
{
IkReal j7eval[2];
IkReal x679=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x679);
rxp1_0=(pz*r11);
rxp1_1=(r01*x679);
IkReal x680=cj8*cj8;
IkReal x681=cj9*cj9;
IkReal x682=(((x680*x681))+(((-1.0)*x681))+(((-1.0)*x680)));
j7eval[0]=x682;
j7eval[1]=IKsign(x682);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x683=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x683);
rxp1_0=(pz*r11);
rxp1_1=(r01*x683);
IkReal x684=(cj9*sj8);
j7eval[0]=(cj8+(((962.772785622593)*x684))+(((-1.0)*cj9)));
j7eval[1]=IKsign(((((5453.0)*cj8))+(((5250000.0)*x684))+(((-5453.0)*cj9))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x685=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x685);
rxp1_0=(pz*r11);
rxp1_1=(r01*x685);
j7eval[0]=cj9;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x695=IKPowWithIntegerCheck(sj8,-1);
if(!x695.valid){
continue;
}
IkReal x686=x695.value;
IkReal x687=((1.0)*r00);
IkReal x688=(cj10*sj12);
IkReal x689=(sj11*sj8);
IkReal x690=(r01*sj12);
IkReal x691=(cj8*sj9);
IkReal x692=(cj11*sj10);
IkReal x693=(r02*sj10*sj11);
IkReal x694=(cj10*cj12*r01);
CheckValue<IkReal> x696=IKPowWithIntegerCheck(cj9,-1);
if(!x696.valid){
continue;
}
if( IKabs((x686*(x696.value)*(((((-1.0)*cj11*r02*sj8))+((x689*x690))+((x691*x694))+((x691*x693))+(((-1.0)*cj12*x687*x689))+((x690*x691*x692))+((r00*x688*x691))+(((-1.0)*cj12*x687*x691*x692)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x686*(((((-1.0)*x687*x688))+(((-1.0)*x690*x692))+((cj12*r00*x692))+(((-1.0)*x693))+(((-1.0)*x694)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x686*(x696.value)*(((((-1.0)*cj11*r02*sj8))+((x689*x690))+((x691*x694))+((x691*x693))+(((-1.0)*cj12*x687*x689))+((x690*x691*x692))+((r00*x688*x691))+(((-1.0)*cj12*x687*x691*x692))))))+IKsqr((x686*(((((-1.0)*x687*x688))+(((-1.0)*x690*x692))+((cj12*r00*x692))+(((-1.0)*x693))+(((-1.0)*x694))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x686*(x696.value)*(((((-1.0)*cj11*r02*sj8))+((x689*x690))+((x691*x694))+((x691*x693))+(((-1.0)*cj12*x687*x689))+((x690*x691*x692))+((r00*x688*x691))+(((-1.0)*cj12*x687*x691*x692))))), (x686*(((((-1.0)*x687*x688))+(((-1.0)*x690*x692))+((cj12*r00*x692))+(((-1.0)*x693))+(((-1.0)*x694))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x697=IKsin(j7);
IkReal x698=IKcos(j7);
IkReal x699=((1.0)*sj12);
IkReal x700=(r00*sj10);
IkReal x701=(cj10*r11);
IkReal x702=(cj11*sj12);
IkReal x703=(cj10*r00);
IkReal x704=(sj10*sj11);
IkReal x705=(r10*sj10);
IkReal x706=(r10*sj12);
IkReal x707=(cj12*r01);
IkReal x708=((1.0)*sj10);
IkReal x709=(cj12*sj11);
IkReal x710=(cj12*r11);
IkReal x711=(cj10*sj11);
IkReal x712=((1.0)*cj11*cj12);
IkReal x713=(sj9*x698);
IkReal x714=(sj8*x697);
IkReal x715=(sj8*x698);
IkReal x716=(cj9*x698);
IkReal x717=((0.00043624)*x697);
IkReal x718=(cj8*x697);
evalcond[0]=(((cj8*x713))+(((-1.0)*r01*sj11*x699))+((cj9*x697))+((r00*x709))+((cj11*r02)));
evalcond[1]=(((sj9*x718))+(((-1.0)*x716))+((cj11*r12))+(((-1.0)*r11*sj11*x699))+((r10*x709)));
evalcond[2]=(x715+((sj12*x703))+((r02*x704))+((r01*sj10*x702))+(((-1.0)*x700*x712))+((cj10*x707)));
evalcond[3]=(((r11*sj10*x702))+((cj12*x701))+(((-1.0)*x705*x712))+x714+((r12*x704))+((cj10*x706)));
evalcond[4]=((((-1.0)*sj9*x717))+(((0.00043624)*cj8*x716))+(((-1.0)*px))+(((-0.4)*r00*sj12))+(((-0.4)*x707))+(((0.42)*x715))+(((-0.00043624)*x698)));
evalcond[5]=((((-1.0)*py))+(((-1.0)*x717))+(((-0.4)*x706))+(((0.00043624)*x713))+(((-0.4)*x710))+((cj8*cj9*x717))+(((0.42)*x714)));
evalcond[6]=(((x701*x702))+(((-1.0)*x699*x705))+(((-1.0)*cj10*r10*x712))+(((-1.0)*x708*x710))+x713+((r12*x711))+((cj9*x718)));
evalcond[7]=(((cj8*x716))+(((-1.0)*x707*x708))+((cj10*r01*x702))+(((-1.0)*x703*x712))+(((-1.0)*x699*x700))+(((-1.0)*sj9*x697))+((r02*x711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x719=((5250000.0)*sj8);
IkReal x720=(cj9*r01);
IkReal x721=((5000000.0)*cj12);
IkReal x722=((5453.0)*cj8);
IkReal x723=((12500000.0)*px);
IkReal x724=(sj11*sj12);
IkReal x725=(cj8*sj9);
IkReal x726=(cj11*r02);
IkReal x727=((5453.0)*sj9);
IkReal x728=(cj12*r00*sj11);
IkReal x729=((5000000.0)*r00*sj12);
CheckValue<IkReal> x730=IKPowWithIntegerCheck(IKsign((x722+((cj9*x719))+(((-5453.0)*cj9)))),-1);
if(!x730.valid){
continue;
}
CheckValue<IkReal> x731 = IKatan2WithCheck(IkReal((((r01*x719*x724))+(((-1.0)*cj9*x722*x726))+(((-1.0)*cj9*x722*x728))+(((-1.0)*x723*x725))+((x720*x722*x724))+(((-1.0)*x725*x729))+(((5453.0)*x726))+(((5453.0)*x728))+(((-5453.0)*r01*x724))+(((-1.0)*x719*x726))+(((-1.0)*x719*x728))+(((-1.0)*r01*x721*x725)))),IkReal(((((-1.0)*x727*x728))+((x720*x721))+((r01*x724*x727))+(((-1.0)*x726*x727))+((cj9*x723))+((cj9*x729)))),IKFAST_ATAN2_MAGTHRESH);
if(!x731.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x730.value)))+(x731.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x732=IKsin(j7);
IkReal x733=IKcos(j7);
IkReal x734=((1.0)*sj12);
IkReal x735=(r00*sj10);
IkReal x736=(cj10*r11);
IkReal x737=(cj11*sj12);
IkReal x738=(cj10*r00);
IkReal x739=(sj10*sj11);
IkReal x740=(r10*sj10);
IkReal x741=(r10*sj12);
IkReal x742=(cj12*r01);
IkReal x743=((1.0)*sj10);
IkReal x744=(cj12*sj11);
IkReal x745=(cj12*r11);
IkReal x746=(cj10*sj11);
IkReal x747=((1.0)*cj11*cj12);
IkReal x748=(sj9*x733);
IkReal x749=(sj8*x732);
IkReal x750=(sj8*x733);
IkReal x751=(cj9*x733);
IkReal x752=((0.00043624)*x732);
IkReal x753=(cj8*x732);
evalcond[0]=(((cj9*x732))+((cj8*x748))+((cj11*r02))+(((-1.0)*r01*sj11*x734))+((r00*x744)));
evalcond[1]=(((r10*x744))+((cj11*r12))+(((-1.0)*r11*sj11*x734))+(((-1.0)*x751))+((sj9*x753)));
evalcond[2]=(((cj10*x742))+((sj12*x738))+((r02*x739))+x750+(((-1.0)*x735*x747))+((r01*sj10*x737)));
evalcond[3]=(((r12*x739))+((cj12*x736))+((r11*sj10*x737))+((cj10*x741))+(((-1.0)*x740*x747))+x749);
evalcond[4]=((((-0.4)*x742))+(((0.42)*x750))+(((0.00043624)*cj8*x751))+(((-1.0)*px))+(((-0.00043624)*x733))+(((-0.4)*r00*sj12))+(((-1.0)*sj9*x752)));
evalcond[5]=(((cj8*cj9*x752))+(((-0.4)*x741))+(((-0.4)*x745))+(((-1.0)*py))+(((0.42)*x749))+(((0.00043624)*x748))+(((-1.0)*x752)));
evalcond[6]=(((cj9*x753))+((x736*x737))+(((-1.0)*cj10*r10*x747))+(((-1.0)*x734*x740))+((r12*x746))+x748+(((-1.0)*x743*x745)));
evalcond[7]=(((r02*x746))+((cj8*x751))+(((-1.0)*x742*x743))+(((-1.0)*x734*x735))+(((-1.0)*x738*x747))+((cj10*r01*x737))+(((-1.0)*sj9*x732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x754=cj8*cj8;
IkReal x755=cj9*cj9;
IkReal x756=(cj11*cj9);
IkReal x757=(cj12*cj9*sj11);
IkReal x758=(cj9*sj11*sj12);
IkReal x759=(cj11*cj8*sj9);
IkReal x760=(cj12*cj8*sj11*sj9);
IkReal x761=((1.0)*cj8*sj11*sj12*sj9);
CheckValue<IkReal> x762=IKPowWithIntegerCheck(IKsign(((((-1.0)*x755))+(((-1.0)*x754))+((x754*x755)))),-1);
if(!x762.valid){
continue;
}
CheckValue<IkReal> x763 = IKatan2WithCheck(IkReal((((r02*x756))+((r10*x760))+((r12*x759))+((r00*x757))+(((-1.0)*r11*x761))+(((-1.0)*r01*x758)))),IkReal(((((-1.0)*r01*x761))+((r02*x759))+(((-1.0)*r10*x757))+((r11*x758))+(((-1.0)*r12*x756))+((r00*x760)))),IKFAST_ATAN2_MAGTHRESH);
if(!x763.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x762.value)))+(x763.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x764=IKsin(j7);
IkReal x765=IKcos(j7);
IkReal x766=((1.0)*sj12);
IkReal x767=(r00*sj10);
IkReal x768=(cj10*r11);
IkReal x769=(cj11*sj12);
IkReal x770=(cj10*r00);
IkReal x771=(sj10*sj11);
IkReal x772=(r10*sj10);
IkReal x773=(r10*sj12);
IkReal x774=(cj12*r01);
IkReal x775=((1.0)*sj10);
IkReal x776=(cj12*sj11);
IkReal x777=(cj12*r11);
IkReal x778=(cj10*sj11);
IkReal x779=((1.0)*cj11*cj12);
IkReal x780=(sj9*x765);
IkReal x781=(sj8*x764);
IkReal x782=(sj8*x765);
IkReal x783=(cj9*x765);
IkReal x784=((0.00043624)*x764);
IkReal x785=(cj8*x764);
evalcond[0]=(((cj8*x780))+(((-1.0)*r01*sj11*x766))+((cj9*x764))+((cj11*r02))+((r00*x776)));
evalcond[1]=((((-1.0)*r11*sj11*x766))+((r10*x776))+((cj11*r12))+(((-1.0)*x783))+((sj9*x785)));
evalcond[2]=((((-1.0)*x767*x779))+((cj10*x774))+x782+((sj12*x770))+((r02*x771))+((r01*sj10*x769)));
evalcond[3]=(((r11*sj10*x769))+((cj10*x773))+((r12*x771))+(((-1.0)*x772*x779))+x781+((cj12*x768)));
evalcond[4]=((((-1.0)*sj9*x784))+(((-0.4)*x774))+(((0.00043624)*cj8*x783))+(((0.42)*x782))+(((-1.0)*px))+(((-0.4)*r00*sj12))+(((-0.00043624)*x765)));
evalcond[5]=((((-0.4)*x777))+(((-0.4)*x773))+(((-1.0)*x784))+(((0.00043624)*x780))+(((0.42)*x781))+(((-1.0)*py))+((cj8*cj9*x784)));
evalcond[6]=(((x768*x769))+((cj9*x785))+(((-1.0)*cj10*r10*x779))+(((-1.0)*x766*x772))+(((-1.0)*x775*x777))+((r12*x778))+x780);
evalcond[7]=(((cj8*x783))+(((-1.0)*x774*x775))+(((-1.0)*x766*x767))+((cj10*r01*x769))+(((-1.0)*sj9*x764))+(((-1.0)*x770*x779))+((r02*x778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x787=IKPowWithIntegerCheck(r22,-1);
if(!x787.valid){
continue;
}
IkReal x786=x787.value;
CheckValue<IkReal> x788=IKPowWithIntegerCheck(sj10,-1);
if(!x788.valid){
continue;
}
if( IKabs(((-1.0)*cj8*x786*(x788.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj8*sj9*x786)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj8*x786*(x788.value)))+IKsqr((sj8*sj9*x786))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*cj8*x786*(x788.value)), (sj8*sj9*x786));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x789=IKsin(j11);
IkReal x790=((1.0)*sj8);
IkReal x791=(r22*x789);
evalcond[0]=(cj8+((sj10*x791)));
evalcond[1]=((((-1.0)*sj9*x790))+((r22*(IKcos(j11)))));
evalcond[2]=((((-1.0)*cj9*x790))+((cj10*x791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j12evalpoly[1];
IkReal x792=cj8*cj8;
IkReal x793=sj9*sj9;
IkReal x794=cj9*cj9;
IkReal x795=(cj11*sj10);
IkReal x796=((8.0)*r01);
IkReal x797=((4.0)*r00);
IkReal x798=(cj10*r01);
IkReal x799=((16.0)*r01);
IkReal x800=(sj11*sj8);
IkReal x801=(cj9*r11);
IkReal x802=(cj8*sj9);
IkReal x803=(r02*sj10*sj11);
IkReal x804=((4.0)*x794);
IkReal x805=(cj11*r02*sj8);
IkReal x806=((16.0)*cj10*r00);
IkReal x807=((8.0)*cj10*r00);
IkReal x808=(x792*x793);
IkReal x809=(cj11*cj9*r12*sj8);
IkReal x810=((4.0)*cj9*r10*x800);
IkReal x811=(x798*x804);
IkReal x812=((12.0)*x809);
IkReal x813=((4.0)*x809);
IkReal x814=(x794*x795*x797);
IkReal x815=(x797*x800*x802);
IkReal x816=((12.0)*x802*x805);
IkReal x817=((12.0)*x794*x803);
IkReal x818=((4.0)*x802*x805);
IkReal x819=(x803*x804);
IkReal x820=((4.0)*x798*x808);
IkReal x821=(x795*x797*x808);
IkReal x822=((12.0)*x803*x808);
IkReal x823=((4.0)*x803*x808);
IkReal x824=(x810+x811+x820);
IkReal x825=(x819+x813+x823);
IkReal x826=(x817+x812+x822);
IkReal x827=(x814+x815+x821);
IkReal x828=((((-1.0)*x807*x808))+(((-1.0)*x795*x796*x808))+(((-1.0)*x796*x800*x802))+(((8.0)*x800*x801))+(((-1.0)*x794*x807))+(((-1.0)*x794*x795*x796)));
op[0]=((((-1.0)*x827))+(((-1.0)*x825))+x818+x824);
op[1]=x828;
op[2]=((((-1.0)*x826))+(((-1.0)*x827))+x816+x824);
op[3]=((((-1.0)*x795*x799*x808))+(((-1.0)*x806*x808))+(((-1.0)*x799*x800*x802))+(((16.0)*x800*x801))+(((-1.0)*x794*x806))+(((-1.0)*x794*x795*x799)));
op[4]=((((-1.0)*x826))+(((-1.0)*x824))+x816+x827);
op[5]=x828;
op[6]=((((-1.0)*x824))+(((-1.0)*x825))+x818+x827);
polyroots6(op,zeror,numroots);
IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[6]={true,true,true,true,true,true};
_nj12 = 6;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

j12evalpoly[0]=((((4.0)*cj11*cj8*r12*sj8*sj9))+(((4.0)*cj11*cj9*r02*sj8))+(((-4.0)*cj10*r11*(cj8*cj8)*(sj9*sj9)))+(((4.0)*cj8*r10*sj11*sj8*sj9))+(((-4.0)*cj10*r11*(cj9*cj9)))+(((htj12*htj12*htj12*htj12)*(((((12.0)*cj11*cj8*r12*sj8*sj9))+(((12.0)*cj11*cj9*r02*sj8))+(((-12.0)*r12*sj10*sj11*(cj8*cj8)*(sj9*sj9)))+(((4.0)*cj10*r11*(cj8*cj8)*(sj9*sj9)))+(((4.0)*cj10*r11*(cj9*cj9)))+(((-4.0)*cj11*r10*sj10*(cj8*cj8)*(sj9*sj9)))+(((-4.0)*cj9*r00*sj11*sj8))+(((-4.0)*cj11*r10*sj10*(cj9*cj9)))+(((-4.0)*cj8*r10*sj11*sj8*sj9))+(((-12.0)*r12*sj10*sj11*(cj9*cj9)))))))+(((-4.0)*r12*sj10*sj11*(cj9*cj9)))+(((-4.0)*r12*sj10*sj11*(cj8*cj8)*(sj9*sj9)))+((htj12*(((((-8.0)*cj10*r10*(cj9*cj9)))+(((-8.0)*cj9*r01*sj11*sj8))+(((-8.0)*cj11*r11*sj10*(cj8*cj8)*(sj9*sj9)))+(((-8.0)*cj11*r11*sj10*(cj9*cj9)))+(((-8.0)*cj10*r10*(cj8*cj8)*(sj9*sj9)))+(((-8.0)*cj8*r11*sj11*sj8*sj9))))))+(((4.0)*cj11*r10*sj10*(cj8*cj8)*(sj9*sj9)))+(((htj12*htj12)*(((((12.0)*cj11*cj8*r12*sj8*sj9))+(((-4.0)*cj10*r11*(cj8*cj8)*(sj9*sj9)))+(((12.0)*cj11*cj9*r02*sj8))+(((-12.0)*r12*sj10*sj11*(cj8*cj8)*(sj9*sj9)))+(((4.0)*cj8*r10*sj11*sj8*sj9))+(((-4.0)*cj10*r11*(cj9*cj9)))+(((4.0)*cj11*r10*sj10*(cj8*cj8)*(sj9*sj9)))+(((4.0)*cj9*r00*sj11*sj8))+(((4.0)*cj11*r10*sj10*(cj9*cj9)))+(((-12.0)*r12*sj10*sj11*(cj9*cj9)))))))+(((htj12*htj12*htj12)*(((((-16.0)*cj9*r01*sj11*sj8))+(((-16.0)*cj8*r11*sj11*sj8*sj9))+(((-16.0)*cj11*r11*sj10*(cj8*cj8)*(sj9*sj9)))+(((-16.0)*cj10*r10*(cj9*cj9)))+(((-16.0)*cj10*r10*(cj8*cj8)*(sj9*sj9)))+(((-16.0)*cj11*r11*sj10*(cj9*cj9)))))))+(((htj12*htj12*htj12*htj12*htj12)*(((((-8.0)*cj10*r10*(cj9*cj9)))+(((-8.0)*cj9*r01*sj11*sj8))+(((-8.0)*cj11*r11*sj10*(cj8*cj8)*(sj9*sj9)))+(((-8.0)*cj11*r11*sj10*(cj9*cj9)))+(((-8.0)*cj10*r10*(cj8*cj8)*(sj9*sj9)))+(((-8.0)*cj8*r11*sj11*sj8*sj9))))))+(((4.0)*cj9*r00*sj11*sj8))+(((4.0)*cj11*r10*sj10*(cj9*cj9)))+(((htj12*htj12*htj12*htj12*htj12*htj12)*(((((4.0)*cj11*cj8*r12*sj8*sj9))+(((4.0)*cj11*cj9*r02*sj8))+(((4.0)*cj10*r11*(cj8*cj8)*(sj9*sj9)))+(((-4.0)*r12*sj10*sj11*(cj9*cj9)))+(((-4.0)*r12*sj10*sj11*(cj8*cj8)*(sj9*sj9)))+(((4.0)*cj10*r11*(cj9*cj9)))+(((-4.0)*cj11*r10*sj10*(cj8*cj8)*(sj9*sj9)))+(((-4.0)*cj9*r00*sj11*sj8))+(((-4.0)*cj11*r10*sj10*(cj9*cj9)))+(((-4.0)*cj8*r10*sj11*sj8*sj9)))))));
if( IKabs(j12evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
{
IkReal j7eval[2];
IkReal x829=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x829);
rxp1_0=(pz*r11);
rxp1_1=(r01*x829);
IkReal x830=cj8*cj8;
IkReal x831=cj9*cj9;
IkReal x832=(((x830*x831))+(((-1.0)*x831))+(((-1.0)*x830)));
j7eval[0]=x832;
j7eval[1]=IKsign(x832);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x833=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x833);
rxp1_0=(pz*r11);
rxp1_1=(r01*x833);
IkReal x834=(cj9*sj8);
j7eval[0]=(cj8+(((962.772785622593)*x834))+(((-1.0)*cj9)));
j7eval[1]=IKsign(((((5453.0)*cj8))+(((5250000.0)*x834))+(((-5453.0)*cj9))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x835=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x835);
rxp1_0=(pz*r11);
rxp1_1=(r01*x835);
j7eval[0]=cj9;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x845=IKPowWithIntegerCheck(sj8,-1);
if(!x845.valid){
continue;
}
IkReal x836=x845.value;
IkReal x837=((1.0)*r00);
IkReal x838=(cj10*sj12);
IkReal x839=(sj11*sj8);
IkReal x840=(r01*sj12);
IkReal x841=(cj8*sj9);
IkReal x842=(cj11*sj10);
IkReal x843=(r02*sj10*sj11);
IkReal x844=(cj10*cj12*r01);
CheckValue<IkReal> x846=IKPowWithIntegerCheck(cj9,-1);
if(!x846.valid){
continue;
}
if( IKabs((x836*(x846.value)*((((x840*x841*x842))+(((-1.0)*cj11*r02*sj8))+(((-1.0)*cj12*x837*x841*x842))+((x839*x840))+(((-1.0)*cj12*x837*x839))+((r00*x838*x841))+((x841*x844))+((x841*x843)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x836*(((((-1.0)*x837*x838))+(((-1.0)*x840*x842))+(((-1.0)*x844))+(((-1.0)*x843))+((cj12*r00*x842)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x836*(x846.value)*((((x840*x841*x842))+(((-1.0)*cj11*r02*sj8))+(((-1.0)*cj12*x837*x841*x842))+((x839*x840))+(((-1.0)*cj12*x837*x839))+((r00*x838*x841))+((x841*x844))+((x841*x843))))))+IKsqr((x836*(((((-1.0)*x837*x838))+(((-1.0)*x840*x842))+(((-1.0)*x844))+(((-1.0)*x843))+((cj12*r00*x842))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x836*(x846.value)*((((x840*x841*x842))+(((-1.0)*cj11*r02*sj8))+(((-1.0)*cj12*x837*x841*x842))+((x839*x840))+(((-1.0)*cj12*x837*x839))+((r00*x838*x841))+((x841*x844))+((x841*x843))))), (x836*(((((-1.0)*x837*x838))+(((-1.0)*x840*x842))+(((-1.0)*x844))+(((-1.0)*x843))+((cj12*r00*x842))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x847=IKsin(j7);
IkReal x848=IKcos(j7);
IkReal x849=((1.0)*sj12);
IkReal x850=(r00*sj10);
IkReal x851=(cj10*r11);
IkReal x852=(cj11*sj12);
IkReal x853=(cj10*r00);
IkReal x854=(sj10*sj11);
IkReal x855=(r10*sj10);
IkReal x856=(r10*sj12);
IkReal x857=(cj12*r01);
IkReal x858=((1.0)*sj10);
IkReal x859=(cj12*sj11);
IkReal x860=(cj12*r11);
IkReal x861=(cj10*sj11);
IkReal x862=((1.0)*cj11*cj12);
IkReal x863=(sj9*x848);
IkReal x864=(sj8*x847);
IkReal x865=(sj8*x848);
IkReal x866=(cj9*x848);
IkReal x867=((0.00043624)*x847);
IkReal x868=(cj8*x847);
evalcond[0]=(((cj9*x847))+(((-1.0)*r01*sj11*x849))+((r00*x859))+((cj8*x863))+((cj11*r02)));
evalcond[1]=(((r10*x859))+((sj9*x868))+(((-1.0)*x866))+((cj11*r12))+(((-1.0)*r11*sj11*x849)));
evalcond[2]=(((sj12*x853))+(((-1.0)*x850*x862))+((cj10*x857))+((r02*x854))+x865+((r01*sj10*x852)));
evalcond[3]=(((r11*sj10*x852))+((r12*x854))+((cj10*x856))+((cj12*x851))+x864+(((-1.0)*x855*x862)));
evalcond[4]=((((0.00043624)*cj8*x866))+(((0.42)*x865))+(((-1.0)*sj9*x867))+(((-1.0)*px))+(((-0.4)*r00*sj12))+(((-0.4)*x857))+(((-0.00043624)*x848)));
evalcond[5]=((((-1.0)*x867))+((cj8*cj9*x867))+(((-0.4)*x860))+(((0.42)*x864))+(((-1.0)*py))+(((-0.4)*x856))+(((0.00043624)*x863)));
evalcond[6]=((((-1.0)*x849*x855))+((r12*x861))+((cj9*x868))+((x851*x852))+(((-1.0)*x858*x860))+x863+(((-1.0)*cj10*r10*x862)));
evalcond[7]=(((cj10*r01*x852))+(((-1.0)*x849*x850))+(((-1.0)*sj9*x847))+(((-1.0)*x853*x862))+((cj8*x866))+((r02*x861))+(((-1.0)*x857*x858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x869=((5250000.0)*sj8);
IkReal x870=(cj9*r01);
IkReal x871=((5000000.0)*cj12);
IkReal x872=((5453.0)*cj8);
IkReal x873=((12500000.0)*px);
IkReal x874=(sj11*sj12);
IkReal x875=(cj8*sj9);
IkReal x876=(cj11*r02);
IkReal x877=((5453.0)*sj9);
IkReal x878=(cj12*r00*sj11);
IkReal x879=((5000000.0)*r00*sj12);
CheckValue<IkReal> x880 = IKatan2WithCheck(IkReal(((((-5453.0)*r01*x874))+((r01*x869*x874))+(((-1.0)*x869*x878))+(((-1.0)*x869*x876))+(((-1.0)*x873*x875))+(((-1.0)*x875*x879))+((x870*x872*x874))+(((5453.0)*x878))+(((5453.0)*x876))+(((-1.0)*r01*x871*x875))+(((-1.0)*cj9*x872*x876))+(((-1.0)*cj9*x872*x878)))),IkReal(((((-1.0)*x877*x878))+(((-1.0)*x876*x877))+((x870*x871))+((cj9*x879))+((cj9*x873))+((r01*x874*x877)))),IKFAST_ATAN2_MAGTHRESH);
if(!x880.valid){
continue;
}
CheckValue<IkReal> x881=IKPowWithIntegerCheck(IKsign((((cj9*x869))+x872+(((-5453.0)*cj9)))),-1);
if(!x881.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x880.value)+(((1.5707963267949)*(x881.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x882=IKsin(j7);
IkReal x883=IKcos(j7);
IkReal x884=((1.0)*sj12);
IkReal x885=(r00*sj10);
IkReal x886=(cj10*r11);
IkReal x887=(cj11*sj12);
IkReal x888=(cj10*r00);
IkReal x889=(sj10*sj11);
IkReal x890=(r10*sj10);
IkReal x891=(r10*sj12);
IkReal x892=(cj12*r01);
IkReal x893=((1.0)*sj10);
IkReal x894=(cj12*sj11);
IkReal x895=(cj12*r11);
IkReal x896=(cj10*sj11);
IkReal x897=((1.0)*cj11*cj12);
IkReal x898=(sj9*x883);
IkReal x899=(sj8*x882);
IkReal x900=(sj8*x883);
IkReal x901=(cj9*x883);
IkReal x902=((0.00043624)*x882);
IkReal x903=(cj8*x882);
evalcond[0]=(((r00*x894))+(((-1.0)*r01*sj11*x884))+((cj11*r02))+((cj9*x882))+((cj8*x898)));
evalcond[1]=(((r10*x894))+(((-1.0)*r11*sj11*x884))+((cj11*r12))+((sj9*x903))+(((-1.0)*x901)));
evalcond[2]=(((r02*x889))+((r01*sj10*x887))+((sj12*x888))+((cj10*x892))+(((-1.0)*x885*x897))+x900);
evalcond[3]=(((cj10*x891))+((cj12*x886))+((r11*sj10*x887))+x899+(((-1.0)*x890*x897))+((r12*x889)));
evalcond[4]=((((0.00043624)*cj8*x901))+(((-0.00043624)*x883))+(((-0.4)*x892))+(((-1.0)*sj9*x902))+(((-1.0)*px))+(((-0.4)*r00*sj12))+(((0.42)*x900)));
evalcond[5]=(((cj8*cj9*x902))+(((0.42)*x899))+(((-1.0)*x902))+(((0.00043624)*x898))+(((-0.4)*x895))+(((-0.4)*x891))+(((-1.0)*py)));
evalcond[6]=((((-1.0)*x884*x890))+((x886*x887))+((cj9*x903))+(((-1.0)*cj10*r10*x897))+(((-1.0)*x893*x895))+x898+((r12*x896)));
evalcond[7]=(((r02*x896))+(((-1.0)*x892*x893))+(((-1.0)*x888*x897))+(((-1.0)*sj9*x882))+((cj8*x901))+((cj10*r01*x887))+(((-1.0)*x884*x885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x904=cj8*cj8;
IkReal x905=cj9*cj9;
IkReal x906=(cj11*cj9);
IkReal x907=(cj12*cj9*sj11);
IkReal x908=(cj9*sj11*sj12);
IkReal x909=(cj11*cj8*sj9);
IkReal x910=(cj12*cj8*sj11*sj9);
IkReal x911=((1.0)*cj8*sj11*sj12*sj9);
CheckValue<IkReal> x912=IKPowWithIntegerCheck(IKsign(((((-1.0)*x904))+(((-1.0)*x905))+((x904*x905)))),-1);
if(!x912.valid){
continue;
}
CheckValue<IkReal> x913 = IKatan2WithCheck(IkReal((((r00*x907))+((r02*x906))+((r10*x910))+((r12*x909))+(((-1.0)*r11*x911))+(((-1.0)*r01*x908)))),IkReal((((r11*x908))+((r02*x909))+(((-1.0)*r01*x911))+(((-1.0)*r12*x906))+(((-1.0)*r10*x907))+((r00*x910)))),IKFAST_ATAN2_MAGTHRESH);
if(!x913.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x912.value)))+(x913.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x914=IKsin(j7);
IkReal x915=IKcos(j7);
IkReal x916=((1.0)*sj12);
IkReal x917=(r00*sj10);
IkReal x918=(cj10*r11);
IkReal x919=(cj11*sj12);
IkReal x920=(cj10*r00);
IkReal x921=(sj10*sj11);
IkReal x922=(r10*sj10);
IkReal x923=(r10*sj12);
IkReal x924=(cj12*r01);
IkReal x925=((1.0)*sj10);
IkReal x926=(cj12*sj11);
IkReal x927=(cj12*r11);
IkReal x928=(cj10*sj11);
IkReal x929=((1.0)*cj11*cj12);
IkReal x930=(sj9*x915);
IkReal x931=(sj8*x914);
IkReal x932=(sj8*x915);
IkReal x933=(cj9*x915);
IkReal x934=((0.00043624)*x914);
IkReal x935=(cj8*x914);
evalcond[0]=((((-1.0)*r01*sj11*x916))+((cj11*r02))+((cj8*x930))+((r00*x926))+((cj9*x914)));
evalcond[1]=(((r10*x926))+((cj11*r12))+(((-1.0)*x933))+((sj9*x935))+(((-1.0)*r11*sj11*x916)));
evalcond[2]=(((sj12*x920))+((cj10*x924))+x932+(((-1.0)*x917*x929))+((r01*sj10*x919))+((r02*x921)));
evalcond[3]=(((cj12*x918))+((r11*sj10*x919))+((r12*x921))+((cj10*x923))+x931+(((-1.0)*x922*x929)));
evalcond[4]=((((0.42)*x932))+(((-0.4)*x924))+(((-1.0)*px))+(((-0.00043624)*x915))+(((-0.4)*r00*sj12))+(((-1.0)*sj9*x934))+(((0.00043624)*cj8*x933)));
evalcond[5]=((((0.42)*x931))+(((-0.4)*x923))+(((-0.4)*x927))+(((-1.0)*py))+((cj8*cj9*x934))+(((0.00043624)*x930))+(((-1.0)*x934)));
evalcond[6]=((((-1.0)*x925*x927))+((x918*x919))+(((-1.0)*cj10*r10*x929))+((r12*x928))+((cj9*x935))+(((-1.0)*x916*x922))+x930);
evalcond[7]=((((-1.0)*x924*x925))+(((-1.0)*x920*x929))+((cj10*r01*x919))+((cj8*x933))+((r02*x928))+(((-1.0)*x916*x917))+(((-1.0)*sj9*x914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[2];
IkReal x936=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x936);
rxp1_0=(pz*r11);
rxp1_1=(r01*x936);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j11eval[0]=r22;
j11eval[1]=sj10;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x937=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x937);
rxp1_0=(pz*r11);
rxp1_1=(r01*x937);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j11eval[0]=cj10;
j11eval[1]=r22;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
IkReal x938=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x938);
rxp1_0=(pz*r11);
rxp1_1=(r01*x938);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j11eval[0]=r22;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x939=IKPowWithIntegerCheck(r22,-1);
if(!x939.valid){
continue;
}
sj11array[0]=((-1.0)*cj8*(x939.value));
if( sj11array[0] >= -1-IKFAST_SINCOS_THRESH && sj11array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j11valid[0] = j11valid[1] = true;
    j11array[0] = IKasin(sj11array[0]);
    cj11array[0] = IKcos(j11array[0]);
    sj11array[1] = sj11array[0];
    j11array[1] = j11array[0] > 0 ? (IKPI-j11array[0]) : (-IKPI-j11array[0]);
    cj11array[1] = -cj11array[0];
}
else if( isnan(sj11array[0]) )
{
    // probably any value will work
    j11valid[0] = true;
    cj11array[0] = 1; sj11array[0] = 0; j11array[0] = 0;
}
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKcos(j11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[1];
IkReal x940=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x940);
rxp1_0=(pz*r11);
rxp1_1=(r01*x940);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j12eval[0]=cj11;
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x942 = IKatan2WithCheck(IkReal(((-1.0)*cj11*r00)),IkReal((cj11*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x942.valid){
continue;
}
IkReal x941=x942.value;
j12array[0]=((-1.0)*x941);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x941)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*cj11*r10*(IKcos(j12))))+((cj11*r11*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
IkReal x943=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x943);
rxp1_0=(pz*r11);
rxp1_1=(r01*x943);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j7eval[0]=sj9;
j7eval[1]=((cj12*cj12)+(sj12*sj12));
j7eval[2]=IKsign(sj9);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[4];
IkReal x944=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x944);
rxp1_0=(pz*r11);
rxp1_1=(r01*x944);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x945=(cj8*sj9);
j7eval[0]=x945;
j7eval[1]=IKsign(x945);
j7eval[2]=sj11;
j7eval[3]=((cj12*cj12)+(sj12*sj12));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  || IKabs(j7eval[3]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x946=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x946);
rxp1_0=(pz*r11);
rxp1_1=(r01*x946);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j7eval[0]=cj8;
j7eval[1]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x948=IKPowWithIntegerCheck(sj9,-1);
if(!x948.valid){
continue;
}
IkReal x947=x948.value;
CheckValue<IkReal> x949=IKPowWithIntegerCheck(cj8,-1);
if(!x949.valid){
continue;
}
if( IKabs((x947*(x949.value)*(((((-1.0)*cj12*r10*sj11))+((r11*sj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x947*((((r10*sj12))+((cj12*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x947*(x949.value)*(((((-1.0)*cj12*r10*sj11))+((r11*sj11*sj12))))))+IKsqr((x947*((((r10*sj12))+((cj12*r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x947*(x949.value)*(((((-1.0)*cj12*r10*sj11))+((r11*sj11*sj12))))), (x947*((((r10*sj12))+((cj12*r11))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x950=IKcos(j7);
IkReal x951=IKsin(j7);
IkReal x952=((1.0)*sj12);
IkReal x953=((0.4)*sj12);
IkReal x954=(cj12*sj11);
IkReal x955=(cj12*r01);
IkReal x956=(cj12*r11);
IkReal x957=((0.00043624)*x950);
IkReal x958=(sj9*x950);
IkReal x959=((0.00043624)*x951);
IkReal x960=(sj9*x951);
evalcond[0]=((((-1.0)*r10*x952))+(((-1.0)*x956))+x958);
evalcond[1]=((((-1.0)*r00*x952))+(((-1.0)*x960))+(((-1.0)*x955)));
evalcond[2]=(((cj8*x958))+(((-1.0)*r01*sj11*x952))+((r00*x954)));
evalcond[3]=(((cj8*x960))+(((-1.0)*r11*sj11*x952))+((r10*x954)));
evalcond[4]=((((-1.0)*r00*x953))+(((-0.4)*x955))+(((-1.0)*px))+(((-1.0)*sj9*x959))+(((-1.0)*x957)));
evalcond[5]=((((-1.0)*r10*x953))+((sj9*x957))+(((-0.4)*x956))+(((-1.0)*py))+(((-1.0)*x959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x961=(sj11*sj12);
IkReal x962=((1.0)*cj12*sj11);
CheckValue<IkReal> x963 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x962))+((r11*x961)))),IkReal(((((-1.0)*r00*x962))+((r01*x961)))),IKFAST_ATAN2_MAGTHRESH);
if(!x963.valid){
continue;
}
CheckValue<IkReal> x964=IKPowWithIntegerCheck(IKsign((cj8*sj9)),-1);
if(!x964.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x963.value)+(((1.5707963267949)*(x964.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x965=IKcos(j7);
IkReal x966=IKsin(j7);
IkReal x967=((1.0)*sj12);
IkReal x968=((0.4)*sj12);
IkReal x969=(cj12*sj11);
IkReal x970=(cj12*r01);
IkReal x971=(cj12*r11);
IkReal x972=((0.00043624)*x965);
IkReal x973=(sj9*x965);
IkReal x974=((0.00043624)*x966);
IkReal x975=(sj9*x966);
evalcond[0]=((((-1.0)*r10*x967))+(((-1.0)*x971))+x973);
evalcond[1]=((((-1.0)*x975))+(((-1.0)*x970))+(((-1.0)*r00*x967)));
evalcond[2]=(((cj8*x973))+((r00*x969))+(((-1.0)*r01*sj11*x967)));
evalcond[3]=(((cj8*x975))+(((-1.0)*r11*sj11*x967))+((r10*x969)));
evalcond[4]=((((-1.0)*r00*x968))+(((-1.0)*px))+(((-1.0)*sj9*x974))+(((-0.4)*x970))+(((-1.0)*x972)));
evalcond[5]=((((-1.0)*r10*x968))+(((-1.0)*py))+(((-0.4)*x971))+(((-1.0)*x974))+((sj9*x972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x976 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r01))+(((-1.0)*r00*sj12)))),IkReal((((r10*sj12))+((cj12*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x976.valid){
continue;
}
CheckValue<IkReal> x977=IKPowWithIntegerCheck(IKsign(sj9),-1);
if(!x977.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x976.value)+(((1.5707963267949)*(x977.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x978=IKcos(j7);
IkReal x979=IKsin(j7);
IkReal x980=((1.0)*sj12);
IkReal x981=((0.4)*sj12);
IkReal x982=(cj12*sj11);
IkReal x983=(cj12*r01);
IkReal x984=(cj12*r11);
IkReal x985=((0.00043624)*x978);
IkReal x986=(sj9*x978);
IkReal x987=((0.00043624)*x979);
IkReal x988=(sj9*x979);
evalcond[0]=((((-1.0)*r10*x980))+(((-1.0)*x984))+x986);
evalcond[1]=((((-1.0)*r00*x980))+(((-1.0)*x983))+(((-1.0)*x988)));
evalcond[2]=(((cj8*x986))+((r00*x982))+(((-1.0)*r01*sj11*x980)));
evalcond[3]=((((-1.0)*r11*sj11*x980))+((cj8*x988))+((r10*x982)));
evalcond[4]=((((-1.0)*x985))+(((-1.0)*r00*x981))+(((-1.0)*px))+(((-0.4)*x983))+(((-1.0)*sj9*x987)));
evalcond[5]=((((-1.0)*r10*x981))+(((-1.0)*x987))+((sj9*x985))+(((-1.0)*py))+(((-0.4)*x984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
IkReal x989=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x989);
rxp1_0=(pz*r11);
rxp1_1=(r01*x989);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j11eval[0]=r22;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x990=IKPowWithIntegerCheck(r22,-1);
if(!x990.valid){
continue;
}
sj11array[0]=(cj8*(x990.value));
if( sj11array[0] >= -1-IKFAST_SINCOS_THRESH && sj11array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j11valid[0] = j11valid[1] = true;
    j11array[0] = IKasin(sj11array[0]);
    cj11array[0] = IKcos(j11array[0]);
    sj11array[1] = sj11array[0];
    j11array[1] = j11array[0] > 0 ? (IKPI-j11array[0]) : (-IKPI-j11array[0]);
    cj11array[1] = -cj11array[0];
}
else if( isnan(sj11array[0]) )
{
    // probably any value will work
    j11valid[0] = true;
    cj11array[0] = 1; sj11array[0] = 0; j11array[0] = 0;
}
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKcos(j11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[1];
IkReal x991=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x991);
rxp1_0=(pz*r11);
rxp1_1=(r01*x991);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j12eval[0]=cj11;
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x993 = IKatan2WithCheck(IkReal((cj11*r00)),IkReal(((-1.0)*cj11*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x993.valid){
continue;
}
IkReal x992=x993.value;
j12array[0]=((-1.0)*x992);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x992)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=(((cj11*r10*(IKcos(j12))))+(((-1.0)*cj11*r11*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
IkReal x994=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x994);
rxp1_0=(pz*r11);
rxp1_1=(r01*x994);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j7eval[0]=sj9;
j7eval[1]=((cj12*cj12)+(sj12*sj12));
j7eval[2]=IKsign(sj9);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[4];
IkReal x995=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x995);
rxp1_0=(pz*r11);
rxp1_1=(r01*x995);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x996=(cj8*sj9);
j7eval[0]=x996;
j7eval[1]=IKsign(x996);
j7eval[2]=sj11;
j7eval[3]=((cj12*cj12)+(sj12*sj12));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  || IKabs(j7eval[3]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x997=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x997);
rxp1_0=(pz*r11);
rxp1_1=(r01*x997);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j7eval[0]=sj9;
j7eval[1]=cj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x999=IKPowWithIntegerCheck(sj9,-1);
if(!x999.valid){
continue;
}
IkReal x998=x999.value;
CheckValue<IkReal> x1000=IKPowWithIntegerCheck(cj8,-1);
if(!x1000.valid){
continue;
}
if( IKabs((x998*((((r00*sj12))+((cj12*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x998*(x1000.value)*((((r01*sj11*sj12))+(((-1.0)*cj12*r00*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x998*((((r00*sj12))+((cj12*r01))))))+IKsqr((x998*(x1000.value)*((((r01*sj11*sj12))+(((-1.0)*cj12*r00*sj11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x998*((((r00*sj12))+((cj12*r01))))), (x998*(x1000.value)*((((r01*sj11*sj12))+(((-1.0)*cj12*r00*sj11))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1001=IKcos(j7);
IkReal x1002=IKsin(j7);
IkReal x1003=((0.4)*sj12);
IkReal x1004=(cj12*sj11);
IkReal x1005=(cj12*r01);
IkReal x1006=(cj12*r11);
IkReal x1007=((1.0)*sj11*sj12);
IkReal x1008=((0.00043624)*x1001);
IkReal x1009=(sj9*x1001);
IkReal x1010=((0.00043624)*x1002);
IkReal x1011=(sj9*x1002);
evalcond[0]=(x1009+x1006+((r10*sj12)));
evalcond[1]=(x1005+((r00*sj12))+(((-1.0)*x1011)));
evalcond[2]=(((cj8*x1009))+(((-1.0)*r01*x1007))+((r00*x1004)));
evalcond[3]=((((-1.0)*r11*x1007))+((cj8*x1011))+((r10*x1004)));
evalcond[4]=((((-1.0)*x1008))+(((-0.4)*x1005))+(((-1.0)*px))+(((-1.0)*sj9*x1010))+(((-1.0)*r00*x1003)));
evalcond[5]=((((-1.0)*r10*x1003))+(((-1.0)*x1010))+(((-0.4)*x1006))+(((-1.0)*py))+((sj9*x1008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1012=(sj11*sj12);
IkReal x1013=((1.0)*cj12*sj11);
CheckValue<IkReal> x1014 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1013))+((r11*x1012)))),IkReal(((((-1.0)*r00*x1013))+((r01*x1012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1014.valid){
continue;
}
CheckValue<IkReal> x1015=IKPowWithIntegerCheck(IKsign((cj8*sj9)),-1);
if(!x1015.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1014.value)+(((1.5707963267949)*(x1015.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1016=IKcos(j7);
IkReal x1017=IKsin(j7);
IkReal x1018=((0.4)*sj12);
IkReal x1019=(cj12*sj11);
IkReal x1020=(cj12*r01);
IkReal x1021=(cj12*r11);
IkReal x1022=((1.0)*sj11*sj12);
IkReal x1023=((0.00043624)*x1016);
IkReal x1024=(sj9*x1016);
IkReal x1025=((0.00043624)*x1017);
IkReal x1026=(sj9*x1017);
evalcond[0]=(x1024+x1021+((r10*sj12)));
evalcond[1]=(x1020+(((-1.0)*x1026))+((r00*sj12)));
evalcond[2]=(((cj8*x1024))+(((-1.0)*r01*x1022))+((r00*x1019)));
evalcond[3]=((((-1.0)*r11*x1022))+((cj8*x1026))+((r10*x1019)));
evalcond[4]=((((-0.4)*x1020))+(((-1.0)*x1023))+(((-1.0)*px))+(((-1.0)*sj9*x1025))+(((-1.0)*r00*x1018)));
evalcond[5]=((((-0.4)*x1021))+(((-1.0)*x1025))+(((-1.0)*py))+((sj9*x1023))+(((-1.0)*r10*x1018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1027 = IKatan2WithCheck(IkReal((((r00*sj12))+((cj12*r01)))),IkReal(((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1027.valid){
continue;
}
CheckValue<IkReal> x1028=IKPowWithIntegerCheck(IKsign(sj9),-1);
if(!x1028.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1027.value)+(((1.5707963267949)*(x1028.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1029=IKcos(j7);
IkReal x1030=IKsin(j7);
IkReal x1031=((0.4)*sj12);
IkReal x1032=(cj12*sj11);
IkReal x1033=(cj12*r01);
IkReal x1034=(cj12*r11);
IkReal x1035=((1.0)*sj11*sj12);
IkReal x1036=((0.00043624)*x1029);
IkReal x1037=(sj9*x1029);
IkReal x1038=((0.00043624)*x1030);
IkReal x1039=(sj9*x1030);
evalcond[0]=(x1037+x1034+((r10*sj12)));
evalcond[1]=(x1033+(((-1.0)*x1039))+((r00*sj12)));
evalcond[2]=(((r00*x1032))+((cj8*x1037))+(((-1.0)*r01*x1035)));
evalcond[3]=(((r10*x1032))+(((-1.0)*r11*x1035))+((cj8*x1039)));
evalcond[4]=((((-1.0)*x1036))+(((-0.4)*x1033))+(((-1.0)*px))+(((-1.0)*sj9*x1038))+(((-1.0)*r00*x1031)));
evalcond[5]=((((-1.0)*r10*x1031))+(((-1.0)*x1038))+(((-0.4)*x1034))+(((-1.0)*py))+((sj9*x1036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x1040=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1040);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1040);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj10=0;
cj10=1.0;
j10=0;
j11eval[0]=r22;
j11eval[1]=((IKabs((sj8*sj9)))+(IKabs((cj9*sj8))));
j11eval[2]=IKsign(r22);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x1041 = IKatan2WithCheck(IkReal((cj9*sj8)),IkReal((sj8*sj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x1041.valid){
continue;
}
CheckValue<IkReal> x1042=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1042.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1041.value)+(((1.5707963267949)*(x1042.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1043=((1.0)*sj8);
evalcond[0]=(((r22*(IKcos(j11))))+(((-1.0)*sj9*x1043)));
evalcond[1]=((((-1.0)*cj9*x1043))+((r22*(IKsin(j11)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
IkReal x1044=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1044);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1044);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x1045=(sj11*sj9);
IkReal x1046=(r01*r11);
IkReal x1047=(cj11*cj9);
IkReal x1048=((4.0)*r00*r10);
IkReal x1049=((1.6)*r00*r10);
IkReal x1050=((((1.6)*x1046*x1047))+((x1047*x1049)));
IkReal x1051=((((1.6)*x1045*x1046))+((x1045*x1049)));
IkReal x1052=((((4.0)*x1046*x1047))+((x1047*x1048)));
IkReal x1053=(((x1045*x1048))+(((4.0)*x1045*x1046)));
j7eval[0]=((IKabs(((((-1.0)*x1051))+x1050)))+(((0.5)*(IKabs(((((-1.0)*x1053))+x1052)))))+(IKabs(((((-1.0)*x1052))+x1053)))+(((0.5)*(IKabs(((((-1.0)*x1050))+x1051))))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j7evalpoly[1];
IkReal x1054=(r01*r11);
IkReal x1055=(r00*r10);
IkReal x1056=((4.0)*cj11*cj9);
IkReal x1057=((4.0)*sj11*sj9);
IkReal x1058=(((x1054*x1056))+((x1055*x1056)));
IkReal x1059=(((x1054*x1057))+((x1055*x1057)));
IkReal x1060=((((-1.0)*x1058))+x1059);
IkReal x1061=((((-1.0)*x1059))+x1058);
op[0]=x1060;
op[1]=0;
op[2]=x1060;
op[3]=0;
op[4]=x1061;
op[5]=0;
op[6]=x1061;
polyroots6(op,zeror,numroots);
IkReal j7array[6], cj7array[6], sj7array[6], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[6]={true,true,true,true,true,true};
_nj7 = 6;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x1062=(sj11*sj9);
IkReal x1063=(cj11*cj9);
IkReal x1064=((1.6)*r01*r11);
IkReal x1065=((1.6)*r00*r10);
IkReal x1066=(x1062*x1064);
IkReal x1067=(x1062*x1065);
IkReal x1068=(((x1063*x1064))+((x1063*x1065)));
IkReal x1069=(x1067+x1066);
IkReal x1070=(x1068+(((-1.0)*x1069)));
j7evalpoly[0]=(x1069+((x1070*(htj7*htj7*htj7*htj7)))+(((htj7*htj7)*((x1069+(((-1.0)*x1068))))))+(((-1.0)*x1068))+((x1070*(htj7*htj7*htj7*htj7*htj7*htj7))));
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j12eval[4];
IkReal x1071=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1071);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1071);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj10=0;
cj10=1.0;
j10=0;
j12eval[0]=r22;
j12eval[1]=sj8;
j12eval[2]=((cj7*cj7)+(sj7*sj7));
j12eval[3]=IKsign(r22);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  || IKabs(j12eval[3]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
IkReal x1072=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1072);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1072);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj10=0;
cj10=1.0;
j10=0;
j12eval[0]=sj11;
j12eval[1]=((((cj9*cj9)*(sj7*sj7)))+(((cj7*cj7)*(sj11*sj11)*(sj8*sj8))));
j12eval[2]=IKsign(sj11);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1073=(cj9*sj7);
IkReal x1074=((1.0)*cj7*sj11*sj8);
CheckValue<IkReal> x1075=IKPowWithIntegerCheck(IKsign(sj11),-1);
if(!x1075.valid){
continue;
}
CheckValue<IkReal> x1076 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x1074))+((r01*x1073)))),IkReal(((((-1.0)*r00*x1073))+(((-1.0)*r01*x1074)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1076.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1075.value)))+(x1076.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1077=IKsin(j12);
IkReal x1078=IKcos(j12);
IkReal x1079=(cj7*sj8);
IkReal x1080=((0.00043624)*cj7);
IkReal x1081=(sj7*sj8);
IkReal x1082=((0.00043624)*sj7);
IkReal x1083=((1.0)*sj11);
IkReal x1084=((1.0)*cj11);
IkReal x1085=(r11*x1078);
IkReal x1086=(r11*x1077);
IkReal x1087=(r01*x1077);
IkReal x1088=(r10*x1077);
IkReal x1089=(r00*x1078);
IkReal x1090=(r01*x1078);
IkReal x1091=(r00*x1077);
IkReal x1092=(r10*x1078);
evalcond[0]=(x1079+x1090+x1091);
evalcond[1]=(x1085+x1081+x1088);
evalcond[2]=(((sj11*x1089))+((cj9*sj7))+(((-1.0)*x1083*x1087)));
evalcond[3]=((((-1.0)*x1084*x1092))+((cj11*x1086))+((cj7*sj9)));
evalcond[4]=((((-1.0)*cj7*cj9))+((sj11*x1092))+(((-1.0)*x1083*x1086)));
evalcond[5]=(((cj11*x1087))+(((-1.0)*x1084*x1089))+(((-1.0)*sj7*sj9)));
evalcond[6]=((((0.42)*x1079))+(((-0.4)*x1091))+(((-0.4)*x1090))+(((-1.0)*px))+(((-1.0)*x1080))+(((-1.0)*sj9*x1082)));
evalcond[7]=((((0.42)*x1081))+(((-0.4)*x1088))+(((-0.4)*x1085))+((sj9*x1080))+(((-1.0)*py))+(((-1.0)*x1082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1093=(cj7*sj8);
IkReal x1094=(sj7*sj8);
CheckValue<IkReal> x1095=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1095.valid){
continue;
}
CheckValue<IkReal> x1096 = IKatan2WithCheck(IkReal((((r01*x1094))+(((-1.0)*r11*x1093)))),IkReal((((r10*x1093))+(((-1.0)*r00*x1094)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1096.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1095.value)))+(x1096.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1097=IKsin(j12);
IkReal x1098=IKcos(j12);
IkReal x1099=(cj7*sj8);
IkReal x1100=((0.00043624)*cj7);
IkReal x1101=(sj7*sj8);
IkReal x1102=((0.00043624)*sj7);
IkReal x1103=((1.0)*sj11);
IkReal x1104=((1.0)*cj11);
IkReal x1105=(r11*x1098);
IkReal x1106=(r11*x1097);
IkReal x1107=(r01*x1097);
IkReal x1108=(r10*x1097);
IkReal x1109=(r00*x1098);
IkReal x1110=(r01*x1098);
IkReal x1111=(r00*x1097);
IkReal x1112=(r10*x1098);
evalcond[0]=(x1111+x1110+x1099);
evalcond[1]=(x1105+x1101+x1108);
evalcond[2]=((((-1.0)*x1103*x1107))+((cj9*sj7))+((sj11*x1109)));
evalcond[3]=(((cj11*x1106))+(((-1.0)*x1104*x1112))+((cj7*sj9)));
evalcond[4]=((((-1.0)*x1103*x1106))+(((-1.0)*cj7*cj9))+((sj11*x1112)));
evalcond[5]=(((cj11*x1107))+(((-1.0)*x1104*x1109))+(((-1.0)*sj7*sj9)));
evalcond[6]=((((-0.4)*x1110))+(((-0.4)*x1111))+(((-1.0)*sj9*x1102))+(((-1.0)*px))+(((0.42)*x1099))+(((-1.0)*x1100)));
evalcond[7]=(((sj9*x1100))+(((0.42)*x1101))+(((-0.4)*x1108))+(((-0.4)*x1105))+(((-1.0)*py))+(((-1.0)*x1102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x1113=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1113);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1113);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j11eval[0]=r22;
j11eval[1]=IKsign(r22);
j11eval[2]=((IKabs((sj8*sj9)))+(IKabs((cj9*sj8))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x1114 = IKatan2WithCheck(IkReal(((-1.0)*cj9*sj8)),IkReal((sj8*sj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x1114.valid){
continue;
}
CheckValue<IkReal> x1115=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1115.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1114.value)+(((1.5707963267949)*(x1115.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1116=((1.0)*sj8);
evalcond[0]=((((-1.0)*sj9*x1116))+((r22*(IKcos(j11)))));
evalcond[1]=((((-1.0)*r22*(IKsin(j11))))+(((-1.0)*cj9*x1116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
IkReal x1117=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1117);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1117);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x1118=(sj11*sj9);
IkReal x1119=(r01*r11);
IkReal x1120=(cj11*cj9);
IkReal x1121=((4.0)*r00*r10);
IkReal x1122=((1.6)*r00*r10);
IkReal x1123=((((4.0)*x1119*x1120))+((x1120*x1121))+(((4.0)*x1118*x1119))+((x1118*x1121)));
IkReal x1124=(((x1120*x1122))+(((1.6)*x1118*x1119))+(((1.6)*x1119*x1120))+((x1118*x1122)));
j7eval[0]=((((1.5)*(IKabs(x1124))))+(((1.5)*(IKabs(x1123)))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j7evalpoly[1];
IkReal x1125=(sj11*sj9);
IkReal x1126=(cj11*cj9);
IkReal x1127=((4.0)*r01*r11);
IkReal x1128=((4.0)*r00*r10);
IkReal x1129=((((-1.0)*x1126*x1127))+(((-1.0)*x1126*x1128))+(((-1.0)*x1125*x1128))+(((-1.0)*x1125*x1127)));
IkReal x1130=(((x1125*x1127))+((x1125*x1128))+((x1126*x1127))+((x1126*x1128)));
op[0]=x1129;
op[1]=0;
op[2]=x1129;
op[3]=0;
op[4]=x1130;
op[5]=0;
op[6]=x1130;
polyroots6(op,zeror,numroots);
IkReal j7array[6], cj7array[6], sj7array[6], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[6]={true,true,true,true,true,true};
_nj7 = 6;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x1131=(sj11*sj9);
IkReal x1132=(cj11*cj9);
IkReal x1133=((1.6)*r01*r11);
IkReal x1134=((1.6)*r00*r10);
IkReal x1135=(x1131*x1133);
IkReal x1136=(x1132*x1134);
IkReal x1137=(x1132*x1133);
IkReal x1138=(x1131*x1134);
IkReal x1139=(x1138+x1137+x1136+x1135);
IkReal x1140=((-1.0)*x1139);
j7evalpoly[0]=(x1139+((x1140*(htj7*htj7*htj7*htj7*htj7*htj7)))+((x1140*(htj7*htj7*htj7*htj7)))+((x1139*(htj7*htj7))));
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j12eval[4];
IkReal x1141=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1141);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1141);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j12eval[0]=r22;
j12eval[1]=sj8;
j12eval[2]=((cj7*cj7)+(sj7*sj7));
j12eval[3]=IKsign(r22);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  || IKabs(j12eval[3]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
IkReal x1142=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1142);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1142);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j12eval[0]=sj11;
j12eval[1]=((((cj9*cj9)*(sj7*sj7)))+(((cj7*cj7)*(sj11*sj11)*(sj8*sj8))));
j12eval[2]=IKsign(sj11);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1143=(cj9*sj7);
IkReal x1144=(cj7*sj11*sj8);
CheckValue<IkReal> x1145=IKPowWithIntegerCheck(IKsign(sj11),-1);
if(!x1145.valid){
continue;
}
CheckValue<IkReal> x1146 = IKatan2WithCheck(IkReal((((r01*x1143))+((r00*x1144)))),IkReal(((((-1.0)*r00*x1143))+((r01*x1144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1146.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1145.value)))+(x1146.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1147=IKcos(j12);
IkReal x1148=IKsin(j12);
IkReal x1149=((0.42)*sj8);
IkReal x1150=((0.00043624)*cj7);
IkReal x1151=((0.00043624)*sj7);
IkReal x1152=(r10*x1147);
IkReal x1153=((1.0)*x1148);
IkReal x1154=((1.0)*x1147);
IkReal x1155=(r00*x1147);
IkReal x1156=((0.4)*x1147);
IkReal x1157=((0.4)*x1148);
evalcond[0]=((((-1.0)*r01*x1154))+(((-1.0)*r00*x1153))+((cj7*sj8)));
evalcond[1]=((((-1.0)*r11*x1154))+(((-1.0)*r10*x1153))+((sj7*sj8)));
evalcond[2]=(((cj9*sj7))+(((-1.0)*r01*sj11*x1153))+((sj11*x1155)));
evalcond[3]=(((cj11*x1152))+((cj7*sj9))+(((-1.0)*cj11*r11*x1153)));
evalcond[4]=((((-1.0)*cj7*cj9))+(((-1.0)*r11*sj11*x1153))+((sj11*x1152)));
evalcond[5]=((((-1.0)*cj11*r01*x1153))+((cj11*x1155))+(((-1.0)*sj7*sj9)));
evalcond[6]=((((-1.0)*x1150))+(((-1.0)*r01*x1156))+(((-1.0)*r00*x1157))+(((-1.0)*px))+(((-1.0)*sj9*x1151))+((cj7*x1149)));
evalcond[7]=(((sj7*x1149))+(((-1.0)*x1151))+((sj9*x1150))+(((-1.0)*py))+(((-1.0)*r11*x1156))+(((-1.0)*r10*x1157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1158=(cj7*sj8);
IkReal x1159=(sj7*sj8);
CheckValue<IkReal> x1160 = IKatan2WithCheck(IkReal((((r11*x1158))+(((-1.0)*r01*x1159)))),IkReal((((r00*x1159))+(((-1.0)*r10*x1158)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1160.valid){
continue;
}
CheckValue<IkReal> x1161=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1161.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1160.value)+(((1.5707963267949)*(x1161.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1162=IKcos(j12);
IkReal x1163=IKsin(j12);
IkReal x1164=((0.42)*sj8);
IkReal x1165=((0.00043624)*cj7);
IkReal x1166=((0.00043624)*sj7);
IkReal x1167=(r10*x1162);
IkReal x1168=((1.0)*x1163);
IkReal x1169=((1.0)*x1162);
IkReal x1170=(r00*x1162);
IkReal x1171=((0.4)*x1162);
IkReal x1172=((0.4)*x1163);
evalcond[0]=((((-1.0)*r00*x1168))+(((-1.0)*r01*x1169))+((cj7*sj8)));
evalcond[1]=((((-1.0)*r10*x1168))+(((-1.0)*r11*x1169))+((sj7*sj8)));
evalcond[2]=((((-1.0)*r01*sj11*x1168))+((cj9*sj7))+((sj11*x1170)));
evalcond[3]=((((-1.0)*cj11*r11*x1168))+((cj11*x1167))+((cj7*sj9)));
evalcond[4]=((((-1.0)*cj7*cj9))+(((-1.0)*r11*sj11*x1168))+((sj11*x1167)));
evalcond[5]=(((cj11*x1170))+(((-1.0)*sj7*sj9))+(((-1.0)*cj11*r01*x1168)));
evalcond[6]=((((-1.0)*sj9*x1166))+(((-1.0)*px))+((cj7*x1164))+(((-1.0)*r01*x1171))+(((-1.0)*r00*x1172))+(((-1.0)*x1165)));
evalcond[7]=((((-1.0)*r11*x1171))+((sj7*x1164))+(((-1.0)*py))+((sj9*x1165))+(((-1.0)*x1166))+(((-1.0)*r10*x1172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7, j11, j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x1175=IKPowWithIntegerCheck(r22,-1);
if(!x1175.valid){
continue;
}
IkReal x1173=x1175.value;
IkReal x1174=(sj8*x1173);
CheckValue<IkReal> x1176=IKPowWithIntegerCheck(cj10,-1);
if(!x1176.valid){
continue;
}
if( IKabs((cj9*x1174*(x1176.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj9*x1174)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj9*x1174*(x1176.value)))+IKsqr((sj9*x1174))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((cj9*x1174*(x1176.value)), (sj9*x1174));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1177=IKsin(j11);
IkReal x1178=((1.0)*sj8);
IkReal x1179=(r22*x1177);
evalcond[0]=(((sj10*x1179))+cj8);
evalcond[1]=((((-1.0)*sj9*x1178))+((r22*(IKcos(j11)))));
evalcond[2]=(((cj10*x1179))+(((-1.0)*cj9*x1178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[1];
IkReal x1180=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1180);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1180);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1181=sj8*sj8;
IkReal x1182=(cj10*cj11);
IkReal x1183=(r11*sj10);
IkReal x1184=(r01*sj10);
IkReal x1185=(sj8*sj9);
IkReal x1186=((8.0)*cj11);
IkReal x1187=((4.0)*cj10);
IkReal x1188=((16.0)*cj11);
IkReal x1189=(cj10*r00);
IkReal x1190=(cj10*r10);
IkReal x1191=(r10*sj10);
IkReal x1192=(r00*sj10);
IkReal x1193=((4.0)*x1181);
IkReal x1194=((16.0)*x1181);
IkReal x1195=((4.0)*cj11*sj10);
IkReal x1196=(cj8*cj9*sj8);
IkReal x1197=((8.0)*x1181);
IkReal x1198=(x1186*x1196);
IkReal x1199=(((r11*x1185*x1187))+(((4.0)*cj11*x1192*x1196)));
IkReal x1200=((((4.0)*cj11*x1185*x1192))+(((4.0)*cj11*x1191*x1196)));
IkReal x1201=(((r01*x1185*x1187))+((x1183*x1193))+((r10*x1182*x1193))+((r11*x1187*x1196)));
IkReal x1202=(((r00*x1182*x1193))+((x1184*x1193))+((r01*x1187*x1196))+(((4.0)*cj11*x1185*x1191)));
j12eval[0]=((((0.5)*(IKabs((((r01*x1182*x1194))+(((-1.0)*x1184*x1188*x1196))+(((16.0)*x1185*x1190))+((x1183*x1185*x1188))+(((-16.0)*x1189*x1196))+(((-1.0)*x1192*x1194)))))))+(IKabs((x1201+(((-1.0)*x1200)))))+(IKabs((x1202+(((-1.0)*x1199)))))+(((0.5)*(IKabs((x1199+(((-1.0)*x1202)))))))+(((0.5)*(IKabs(((((-1.0)*x1184*x1185*x1188))+(((-1.0)*x1191*x1194))+((r11*x1182*x1194))+(((-16.0)*x1185*x1189))+(((-1.0)*x1183*x1188*x1196))+(((-16.0)*x1190*x1196)))))))+(((0.5)*(IKabs((x1200+(((-1.0)*x1201)))))))+(IKabs((((r01*x1182*x1197))+((x1183*x1185*x1186))+(((-1.0)*x1184*x1198))+(((8.0)*x1185*x1190))+(((-1.0)*x1192*x1197))+(((-8.0)*x1189*x1196)))))+(IKabs(((((-1.0)*x1184*x1185*x1186))+(((-8.0)*x1190*x1196))+(((-1.0)*x1191*x1197))+((r11*x1182*x1197))+(((-8.0)*x1185*x1189))+(((-1.0)*x1183*x1198))))));
if( IKabs(j12eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j12]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j12evalpoly[1];
IkReal x1203=sj8*sj8;
IkReal x1204=((4.0)*r11);
IkReal x1205=((16.0)*r10);
IkReal x1206=((8.0)*r11);
IkReal x1207=(cj8*cj9);
IkReal x1208=(r00*sj9);
IkReal x1209=(r01*sj9);
IkReal x1210=((16.0)*cj10);
IkReal x1211=((8.0)*r10);
IkReal x1212=((4.0)*r10);
IkReal x1213=(cj10*sj8);
IkReal x1214=(cj11*sj10*sj8);
IkReal x1215=(cj11*x1203);
IkReal x1216=(sj10*x1203);
IkReal x1217=(x1207*x1213);
IkReal x1218=((((4.0)*x1208*x1214))+((x1207*x1212*x1214)));
IkReal x1219=(((cj10*x1212*x1215))+(((4.0)*x1209*x1213))+((x1204*x1216))+((x1204*x1217)));
IkReal x1220=(x1219+(((-1.0)*x1218)));
IkReal x1221=((((-1.0)*x1206*x1207*x1214))+(((-1.0)*x1211*x1217))+(((-1.0)*x1211*x1216))+((cj10*x1206*x1215))+(((-8.0)*x1209*x1214))+(((-8.0)*x1208*x1213)));
IkReal x1222=(x1218+(((-1.0)*x1219)));
op[0]=x1220;
op[1]=x1221;
op[2]=x1220;
op[3]=((((-16.0)*r11*x1207*x1214))+((r11*x1210*x1215))+(((-16.0)*x1209*x1214))+(((-1.0)*x1205*x1217))+(((-1.0)*x1205*x1216))+(((-1.0)*sj8*x1208*x1210)));
op[4]=x1222;
op[5]=x1221;
op[6]=x1222;
polyroots6(op,zeror,numroots);
IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[6]={true,true,true,true,true,true};
_nj12 = 6;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

IkReal x1223=sj8*sj8;
IkReal x1224=((4.0)*cj10);
IkReal x1225=(r11*sj9);
IkReal x1226=(r10*sj9);
IkReal x1227=(cj10*cj11);
IkReal x1228=(r00*x1223);
IkReal x1229=(cj8*cj9*r01);
IkReal x1230=(cj11*sj10*sj8);
IkReal x1231=(r01*x1223);
IkReal x1232=((8.0)*cj10*sj8);
IkReal x1233=(cj8*cj9*r00);
IkReal x1234=((16.0)*cj10*sj8);
IkReal x1235=((8.0)*x1230);
IkReal x1236=(sj8*x1224*x1225);
IkReal x1237=((4.0)*x1230*x1233);
IkReal x1238=(x1236+x1237);
IkReal x1239=(((cj11*x1224*x1228))+(((4.0)*x1226*x1230))+(((4.0)*sj10*x1231))+((sj8*x1224*x1229)));
IkReal x1240=(x1239+(((-1.0)*x1238)));
IkReal x1241=((((-8.0)*sj10*x1228))+((x1225*x1235))+((x1226*x1232))+(((8.0)*x1227*x1231))+(((-1.0)*x1229*x1235))+(((-1.0)*x1232*x1233)));
j12evalpoly[0]=(x1238+(((htj12*htj12*htj12)*(((((16.0)*x1225*x1230))+(((-16.0)*sj10*x1228))+((x1226*x1234))+(((-16.0)*x1229*x1230))+(((-1.0)*x1233*x1234))+(((16.0)*x1227*x1231))))))+((htj12*x1241))+((x1240*(htj12*htj12*htj12*htj12*htj12*htj12)))+(((-1.0)*x1239))+(((htj12*htj12)*((x1238+(((-1.0)*x1239))))))+((x1240*(htj12*htj12*htj12*htj12)))+((x1241*(htj12*htj12*htj12*htj12*htj12))));
if( IKabs(j12evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
{
IkReal j7eval[3];
IkReal x1242=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1242);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1242);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1243=cj8*cj8;
IkReal x1244=cj9*cj9;
IkReal x1245=sj11*sj11;
IkReal x1246=sj12*sj12;
IkReal x1247=sj9*sj9;
IkReal x1248=cj12*cj12;
IkReal x1249=(x1244*x1245);
IkReal x1250=(x1243*x1245*x1247);
IkReal x1251=((((-1.0)*x1243))+(((-1.0)*x1244))+((x1243*x1244)));
j7eval[0]=x1251;
j7eval[1]=IKsign(x1251);
j7eval[2]=(((x1246*x1250))+((x1248*x1249))+((x1246*x1249))+((x1248*x1250)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x1252=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1252);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1252);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j7eval[0]=cj9;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1253=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1253);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1253);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j7eval[0]=sj8;
j7eval[1]=cj8;
j7eval[2]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1254=(cj9*sj10);
IkReal x1255=(cj12*r11);
IkReal x1256=(r10*sj12);
IkReal x1257=(sj10*sj9);
if( IKabs((((x1254*x1256))+((x1254*x1255)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1256*x1257))+((x1255*x1257)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1254*x1256))+((x1254*x1255))))+IKsqr((((x1256*x1257))+((x1255*x1257))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((x1254*x1256))+((x1254*x1255))), (((x1256*x1257))+((x1255*x1257))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1258=IKsin(j7);
IkReal x1259=IKcos(j7);
IkReal x1260=((1.0)*sj10);
IkReal x1261=(r00*sj12);
IkReal x1262=(r10*sj12);
IkReal x1263=(cj12*r01);
IkReal x1264=(cj12*r11);
IkReal x1265=(cj9*x1259);
IkReal x1266=((0.00043624)*x1259);
IkReal x1267=((0.00043624)*x1258);
IkReal x1268=(sj9*x1258);
IkReal x1269=(((cj9*x1258))+((sj9*x1259)));
evalcond[0]=x1269;
evalcond[1]=(x1268+(((-1.0)*x1265)));
evalcond[2]=(x1269+(((-1.0)*x1260*x1262))+(((-1.0)*x1260*x1264)));
evalcond[3]=(x1265+(((-1.0)*x1260*x1261))+(((-1.0)*x1260*x1263))+(((-1.0)*x1268)));
evalcond[4]=((((-0.4)*x1261))+(((-0.4)*x1263))+(((-1.0)*sj9*x1267))+(((0.00043624)*x1265))+(((-1.0)*px))+(((-1.0)*x1266)));
evalcond[5]=((((-0.4)*x1262))+(((-0.4)*x1264))+(((-1.0)*py))+((cj9*x1267))+((sj9*x1266))+(((-1.0)*x1267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1270=(cj12*r11);
IkReal x1271=(r10*sj12);
IkReal x1272=(sj10*sj9);
IkReal x1273=((1.0)*cj9*sj10);
if( IKabs(((((-1.0)*x1270*x1273))+(((-1.0)*x1271*x1273)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1270*x1272))+((x1271*x1272)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1270*x1273))+(((-1.0)*x1271*x1273))))+IKsqr((((x1270*x1272))+((x1271*x1272))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*x1270*x1273))+(((-1.0)*x1271*x1273))), (((x1270*x1272))+((x1271*x1272))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1274=IKcos(j7);
IkReal x1275=IKsin(j7);
IkReal x1276=((1.0)*sj10);
IkReal x1277=(r00*sj12);
IkReal x1278=(r10*sj12);
IkReal x1279=(cj12*r01);
IkReal x1280=((1.0)*cj9);
IkReal x1281=(cj12*r11);
IkReal x1282=((0.00043624)*x1274);
IkReal x1283=((0.00043624)*x1275);
IkReal x1284=(sj9*x1274);
IkReal x1285=(x1274*x1280);
IkReal x1286=((1.0)*sj9*x1275);
IkReal x1287=(x1285+x1286);
evalcond[0]=((((-1.0)*x1284))+((cj9*x1275)));
evalcond[1]=((-1.0)*x1287);
evalcond[2]=(x1284+(((-1.0)*x1276*x1281))+(((-1.0)*x1275*x1280))+(((-1.0)*x1276*x1278)));
evalcond[3]=((((-1.0)*x1276*x1279))+(((-1.0)*x1276*x1277))+(((-1.0)*x1287)));
evalcond[4]=((((-0.4)*x1277))+(((-0.4)*x1279))+(((-1.0)*cj9*x1282))+(((-1.0)*px))+(((-1.0)*x1282))+(((-1.0)*sj9*x1283)));
evalcond[5]=((((-0.4)*x1278))+((sj9*x1282))+(((-1.0)*cj9*x1283))+(((-0.4)*x1281))+(((-1.0)*py))+(((-1.0)*x1283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1288=((1.0)*cj10);
if( IKabs(((((-1.0)*cj12*r11*x1288))+(((-1.0)*r10*sj12*x1288)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*r01*x1288))+(((-1.0)*r00*sj12*x1288)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj12*r11*x1288))+(((-1.0)*r10*sj12*x1288))))+IKsqr(((((-1.0)*cj12*r01*x1288))+(((-1.0)*r00*sj12*x1288))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj12*r11*x1288))+(((-1.0)*r10*sj12*x1288))), ((((-1.0)*cj12*r01*x1288))+(((-1.0)*r00*sj12*x1288))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1289=IKcos(j7);
IkReal x1290=IKsin(j7);
IkReal x1291=(cj10*cj11);
IkReal x1292=((1.0)*cj12);
IkReal x1293=(cj12*r11);
IkReal x1294=(cj10*sj12);
IkReal x1295=((0.4)*sj12);
IkReal x1296=(cj12*r01);
IkReal x1297=(sj9*x1289);
IkReal x1298=(sj9*x1290);
evalcond[0]=(cj9*x1290);
evalcond[1]=((-1.0)*cj9*x1289);
evalcond[2]=(x1289+((cj10*x1296))+((r00*x1294)));
evalcond[3]=(x1290+((cj10*x1293))+((r10*x1294)));
evalcond[4]=(x1297+(((-1.0)*r10*x1291*x1292))+((r11*sj12*x1291)));
evalcond[5]=((((-1.0)*r00*x1291*x1292))+((r01*sj12*x1291))+(((-1.0)*x1298)));
evalcond[6]=((((-1.0)*r00*x1295))+(((0.41956376)*x1289))+(((-1.0)*px))+(((-0.00043624)*x1298))+(((-0.4)*x1296)));
evalcond[7]=((((0.00043624)*x1297))+(((-1.0)*py))+(((-0.4)*x1293))+(((0.41956376)*x1290))+(((-1.0)*r10*x1295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1299=(cj10*sj12);
IkReal x1300=(cj10*cj12);
if( IKabs((((r11*x1300))+((r10*x1299)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x1299))+((r01*x1300)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1300))+((r10*x1299))))+IKsqr((((r00*x1299))+((r01*x1300))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((r11*x1300))+((r10*x1299))), (((r00*x1299))+((r01*x1300))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1301=IKcos(j7);
IkReal x1302=IKsin(j7);
IkReal x1303=(cj10*cj11);
IkReal x1304=((1.0)*cj12);
IkReal x1305=(cj12*r11);
IkReal x1306=(cj10*sj12);
IkReal x1307=((0.4)*sj12);
IkReal x1308=(cj12*r01);
IkReal x1309=(sj9*x1301);
IkReal x1310=(sj9*x1302);
evalcond[0]=(cj9*x1302);
evalcond[1]=((-1.0)*cj9*x1301);
evalcond[2]=(((cj10*x1308))+(((-1.0)*x1301))+((r00*x1306)));
evalcond[3]=(((cj10*x1305))+(((-1.0)*x1302))+((r10*x1306)));
evalcond[4]=(((r11*sj12*x1303))+x1309+(((-1.0)*r10*x1303*x1304)));
evalcond[5]=((((-1.0)*x1310))+(((-1.0)*r00*x1303*x1304))+((r01*sj12*x1303)));
evalcond[6]=((((-0.00043624)*x1310))+(((-1.0)*r00*x1307))+(((-1.0)*px))+(((-0.4)*x1308))+(((-0.42043624)*x1301)));
evalcond[7]=((((0.00043624)*x1309))+(((-1.0)*py))+(((-1.0)*r10*x1307))+(((-0.4)*x1305))+(((-0.42043624)*x1302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1311=(sj11*sj12);
IkReal x1312=(cj12*sj11);
if( IKabs((((r01*x1311))+(((-1.0)*r00*x1312)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1311))+((r10*x1312)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1311))+(((-1.0)*r00*x1312))))+IKsqr(((((-1.0)*r11*x1311))+((r10*x1312))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((r01*x1311))+(((-1.0)*r00*x1312))), ((((-1.0)*r11*x1311))+((r10*x1312))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1313=IKsin(j7);
IkReal x1314=IKcos(j7);
IkReal x1315=((1.0)*sj12);
IkReal x1316=(cj12*r11);
IkReal x1317=(cj10*sj12);
IkReal x1318=((0.4)*sj12);
IkReal x1319=(cj12*r01);
IkReal x1320=((1.0)*sj10);
IkReal x1321=(cj12*sj11);
IkReal x1322=(cj8*x1313);
IkReal x1323=(cj8*x1314);
IkReal x1324=(sj8*x1314);
IkReal x1325=(sj8*x1313);
evalcond[0]=(x1313+(((-1.0)*r01*sj11*x1315))+((r00*x1321)));
evalcond[1]=(x1324+((r00*x1317))+((cj10*x1319)));
evalcond[2]=(x1325+((cj10*x1316))+((r10*x1317)));
evalcond[3]=((((-1.0)*x1314))+((r10*x1321))+(((-1.0)*r11*sj11*x1315)));
evalcond[4]=(x1322+(((-1.0)*r10*sj10*x1315))+(((-1.0)*x1316*x1320)));
evalcond[5]=(x1323+(((-1.0)*x1319*x1320))+(((-1.0)*r00*sj10*x1315)));
evalcond[6]=((((-0.00043624)*x1314))+(((-1.0)*r00*x1318))+(((-0.4)*x1319))+(((-1.0)*px))+(((0.00043624)*x1323))+(((0.42)*x1324)));
evalcond[7]=((((-0.00043624)*x1313))+(((-0.4)*x1316))+(((-1.0)*py))+(((0.00043624)*x1322))+(((-1.0)*r10*x1318))+(((0.42)*x1325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1326=(sj11*sj12);
IkReal x1327=(cj12*sj11);
if( IKabs((((r00*x1327))+(((-1.0)*r01*x1326)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1327))+((r11*x1326)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1327))+(((-1.0)*r01*x1326))))+IKsqr(((((-1.0)*r10*x1327))+((r11*x1326))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((r00*x1327))+(((-1.0)*r01*x1326))), ((((-1.0)*r10*x1327))+((r11*x1326))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1328=IKcos(j7);
IkReal x1329=IKsin(j7);
IkReal x1330=((1.0)*sj12);
IkReal x1331=(cj12*r11);
IkReal x1332=(cj10*sj12);
IkReal x1333=((0.4)*sj12);
IkReal x1334=((962.772785622593)*pz);
IkReal x1335=(cj12*r01);
IkReal x1336=((1.0)*sj10);
IkReal x1337=(cj12*sj11);
IkReal x1338=(cj8*x1328);
IkReal x1339=(cj8*x1329);
evalcond[0]=(x1328+((r10*x1337))+(((-1.0)*r11*sj11*x1330)));
evalcond[1]=(((cj10*x1335))+((r00*x1332))+((sj8*x1328)));
evalcond[2]=(((cj10*x1331))+((r10*x1332))+((sj8*x1329)));
evalcond[3]=(((r00*x1337))+(((-1.0)*x1329))+(((-1.0)*r01*sj11*x1330)));
evalcond[4]=((((-1.0)*r10*sj10*x1330))+(((-1.0)*x1339))+(((-1.0)*x1331*x1336)));
evalcond[5]=((((-1.0)*x1335*x1336))+(((-1.0)*x1338))+(((-1.0)*r00*sj10*x1330)));
evalcond[6]=((((-0.00043624)*x1328))+(((-404.365006201489)*x1338))+(((-0.4)*x1335))+(((-1.0)*px))+((x1328*x1334))+(((-1.0)*r00*x1333)));
evalcond[7]=(((x1329*x1334))+(((-0.00043624)*x1329))+(((-404.365006201489)*x1339))+(((-0.4)*x1331))+(((-1.0)*py))+(((-1.0)*r10*x1333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1340=((1.0)*sj10);
if( IKabs(((((-1.0)*cj12*r01*x1340))+(((-1.0)*r00*sj12*x1340)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj12*r11*sj10))+((r10*sj10*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj12*r01*x1340))+(((-1.0)*r00*sj12*x1340))))+IKsqr((((cj12*r11*sj10))+((r10*sj10*sj12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj12*r01*x1340))+(((-1.0)*r00*sj12*x1340))), (((cj12*r11*sj10))+((r10*sj10*sj12))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1341=IKcos(j7);
IkReal x1342=IKsin(j7);
IkReal x1343=((1.0)*sj10);
IkReal x1344=(r00*sj12);
IkReal x1345=(cj11*cj12);
IkReal x1346=(r10*sj12);
IkReal x1347=(cj12*r01);
IkReal x1348=(cj12*r11);
IkReal x1349=((0.00043624)*x1341);
IkReal x1350=((0.00043624)*x1342);
IkReal x1351=(cj11*sj10*sj12);
IkReal x1352=(sj8*x1341);
IkReal x1353=(sj8*x1342);
evalcond[0]=(cj8*x1341);
evalcond[1]=(cj8*x1342);
evalcond[2]=(x1341+(((-1.0)*x1343*x1348))+(((-1.0)*x1343*x1346)));
evalcond[3]=((((-1.0)*x1343*x1344))+(((-1.0)*x1343*x1347))+(((-1.0)*x1342)));
evalcond[4]=(x1352+(((-1.0)*r00*x1343*x1345))+((r01*x1351)));
evalcond[5]=(x1353+((r11*x1351))+(((-1.0)*r10*x1343*x1345)));
evalcond[6]=((((-1.0)*x1350))+(((0.42)*x1352))+(((-1.0)*x1349))+(((-1.0)*px))+(((-0.4)*x1347))+(((-0.4)*x1344)));
evalcond[7]=(x1349+(((-1.0)*x1350))+(((0.42)*x1353))+(((-1.0)*py))+(((-0.4)*x1346))+(((-0.4)*x1348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1354=(sj10*sj12);
IkReal x1355=(cj12*sj10);
if( IKabs((((r00*x1354))+((r01*x1355)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1354))+(((-1.0)*r11*x1355)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1354))+((r01*x1355))))+IKsqr(((((-1.0)*r10*x1354))+(((-1.0)*r11*x1355))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((r00*x1354))+((r01*x1355))), ((((-1.0)*r10*x1354))+(((-1.0)*r11*x1355))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1356=IKsin(j7);
IkReal x1357=IKcos(j7);
IkReal x1358=((1.0)*sj10);
IkReal x1359=(r00*sj12);
IkReal x1360=(cj11*cj12);
IkReal x1361=(r10*sj12);
IkReal x1362=(cj12*r01);
IkReal x1363=(cj12*r11);
IkReal x1364=((0.00043624)*x1357);
IkReal x1365=((0.00043624)*x1356);
IkReal x1366=(cj11*sj10*sj12);
IkReal x1367=(sj8*x1357);
IkReal x1368=(sj8*x1356);
IkReal x1369=((-1.0)*cj8);
evalcond[0]=(x1357*x1369);
evalcond[1]=(x1356*x1369);
evalcond[2]=(x1356+(((-1.0)*x1358*x1359))+(((-1.0)*x1358*x1362)));
evalcond[3]=((((-1.0)*x1357))+(((-1.0)*x1358*x1363))+(((-1.0)*x1358*x1361)));
evalcond[4]=(x1367+((r01*x1366))+(((-1.0)*r00*x1358*x1360)));
evalcond[5]=(x1368+(((-1.0)*r10*x1358*x1360))+((r11*x1366)));
evalcond[6]=(x1365+(((0.42)*x1367))+(((-1.0)*px))+(((-0.4)*x1359))+(((-0.4)*x1362))+(((-1.0)*x1364)));
evalcond[7]=((((0.42)*x1368))+(((-1.0)*py))+(((-0.4)*x1363))+(((-0.4)*x1361))+(((-1.0)*x1365))+(((-1.0)*x1364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x1370=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1370);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1370);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj11=0;
cj11=1.0;
j11=0;
IkReal x1371=cj9*cj9;
IkReal x1372=((12500000.0)*px);
IkReal x1373=((12500000.0)*py);
IkReal x1374=((5000000.0)*sj12);
IkReal x1375=((5000000.0)*cj12*r11);
IkReal x1376=((5000000.0)*cj12*r01);
j7eval[0]=((2.0)+(((-1.0)*x1371)));
j7eval[1]=IKsign(((10906.0)+(((-5453.0)*x1371))));
j7eval[2]=((IKabs(((((-1.0)*r00*x1374))+((r10*sj9*x1374))+((sj9*x1375))+((sj9*x1373))+(((-1.0)*x1372))+(((-1.0)*x1376)))))+(IKabs(((((-1.0)*sj9*x1372))+(((-1.0)*sj9*x1376))+(((-1.0)*x1375))+(((-1.0)*x1373))+(((-1.0)*r10*x1374))+(((-1.0)*r00*sj9*x1374))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1377=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1377);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1377);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj11=0;
cj11=1.0;
j11=0;
j7eval[0]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x1378=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1378);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1378);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj11=0;
cj11=1.0;
j11=0;
j7eval[0]=((1.0)+(((-1.0)*(cj9*cj9))));
j7eval[1]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1379=((5453.0)*cj10);
IkReal x1380=(r11*sj12);
IkReal x1381=(cj12*r10);
IkReal x1382=((5000000.0)*sj9);
IkReal x1383=(r10*sj10*sj12);
IkReal x1384=(cj12*r11*sj10);
CheckValue<IkReal> x1385=IKPowWithIntegerCheck(((5453.0)+(((-5453.0)*(cj9*cj9)))),-1);
if(!x1385.valid){
continue;
}
CheckValue<IkReal> x1386=IKPowWithIntegerCheck(sj9,-1);
if(!x1386.valid){
continue;
}
if( IKabs(((x1385.value)*(((((-5453.0)*x1383))+(((-5453.0)*x1384))+((x1379*x1380))+(((-1.0)*cj12*r01*x1382))+(((-1.0)*r00*sj12*x1382))+(((-1.0)*x1379*x1381))+(((-12500000.0)*px*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1386.value)*((x1384+x1383+((cj10*x1381))+(((-1.0)*cj10*x1380)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1385.value)*(((((-5453.0)*x1383))+(((-5453.0)*x1384))+((x1379*x1380))+(((-1.0)*cj12*r01*x1382))+(((-1.0)*r00*sj12*x1382))+(((-1.0)*x1379*x1381))+(((-12500000.0)*px*sj9))))))+IKsqr(((x1386.value)*((x1384+x1383+((cj10*x1381))+(((-1.0)*cj10*x1380))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x1385.value)*(((((-5453.0)*x1383))+(((-5453.0)*x1384))+((x1379*x1380))+(((-1.0)*cj12*r01*x1382))+(((-1.0)*r00*sj12*x1382))+(((-1.0)*x1379*x1381))+(((-12500000.0)*px*sj9))))), ((x1386.value)*((x1384+x1383+((cj10*x1381))+(((-1.0)*cj10*x1380))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x1387=IKcos(j7);
IkReal x1388=IKsin(j7);
IkReal x1389=(cj10*sj12);
IkReal x1390=((1.0)*cj12);
IkReal x1391=((0.4)*cj12);
IkReal x1392=((0.4)*sj12);
IkReal x1393=((1.0)*sj10*sj12);
IkReal x1394=((0.00043624)*x1387);
IkReal x1395=(sj9*x1388);
evalcond[0]=((((-1.0)*r01*x1391))+(((-1.0)*px))+(((-1.0)*r00*x1392))+(((-0.00043624)*x1395))+(((-1.0)*x1394)));
evalcond[1]=(((sj9*x1394))+(((-1.0)*r10*x1392))+(((-1.0)*py))+(((-0.00043624)*x1388))+(((-1.0)*r11*x1391)));
evalcond[2]=((((-1.0)*r11*sj10*x1390))+(((-1.0)*cj10*r10*x1390))+((sj9*x1387))+(((-1.0)*r10*x1393))+((r11*x1389)));
evalcond[3]=((((-1.0)*r00*x1393))+(((-1.0)*cj10*r00*x1390))+((r01*x1389))+(((-1.0)*x1395))+(((-1.0)*r01*sj10*x1390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1396=(cj12*r11);
IkReal x1397=(r10*sj12);
IkReal x1398=((1.0)*cj10*r11*sj12);
IkReal x1399=(((sj10*x1396))+((sj10*x1397))+((cj10*cj12*r10)));
CheckValue<IkReal> x1400=IKPowWithIntegerCheck(sj9,-1);
if(!x1400.valid){
continue;
}
if( IKabs((x1399+(((-916.926462497708)*x1397))+(((-916.926462497708)*x1396))+(((-2292.31615624427)*py))+(((-1.0)*x1398)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1400.value)*((x1399+(((-1.0)*x1398)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1399+(((-916.926462497708)*x1397))+(((-916.926462497708)*x1396))+(((-2292.31615624427)*py))+(((-1.0)*x1398))))+IKsqr(((x1400.value)*((x1399+(((-1.0)*x1398))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x1399+(((-916.926462497708)*x1397))+(((-916.926462497708)*x1396))+(((-2292.31615624427)*py))+(((-1.0)*x1398))), ((x1400.value)*((x1399+(((-1.0)*x1398))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x1401=IKcos(j7);
IkReal x1402=IKsin(j7);
IkReal x1403=(cj10*sj12);
IkReal x1404=((1.0)*cj12);
IkReal x1405=((0.4)*cj12);
IkReal x1406=((0.4)*sj12);
IkReal x1407=((1.0)*sj10*sj12);
IkReal x1408=((0.00043624)*x1401);
IkReal x1409=(sj9*x1402);
evalcond[0]=((((-1.0)*r00*x1406))+(((-1.0)*x1408))+(((-0.00043624)*x1409))+(((-1.0)*px))+(((-1.0)*r01*x1405)));
evalcond[1]=(((sj9*x1408))+(((-1.0)*r11*x1405))+(((-0.00043624)*x1402))+(((-1.0)*py))+(((-1.0)*r10*x1406)));
evalcond[2]=(((sj9*x1401))+(((-1.0)*r11*sj10*x1404))+(((-1.0)*cj10*r10*x1404))+((r11*x1403))+(((-1.0)*r10*x1407)));
evalcond[3]=((((-1.0)*x1409))+(((-1.0)*cj10*r00*x1404))+(((-1.0)*r01*sj10*x1404))+(((-1.0)*r00*x1407))+((r01*x1403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1410=((12500000.0)*px);
IkReal x1411=((12500000.0)*py);
IkReal x1412=((5000000.0)*sj12);
IkReal x1413=((5000000.0)*cj12*r11);
IkReal x1414=((5000000.0)*cj12*r01);
CheckValue<IkReal> x1415=IKPowWithIntegerCheck(IKsign(((10906.0)+(((-5453.0)*(cj9*cj9))))),-1);
if(!x1415.valid){
continue;
}
CheckValue<IkReal> x1416 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1412))+(((-1.0)*x1411))+(((-1.0)*x1413))+(((-1.0)*r00*sj9*x1412))+(((-1.0)*sj9*x1410))+(((-1.0)*sj9*x1414)))),IkReal((((r10*sj9*x1412))+(((-1.0)*x1410))+(((-1.0)*x1414))+((sj9*x1411))+((sj9*x1413))+(((-1.0)*r00*x1412)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1416.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1415.value)))+(x1416.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x1417=IKcos(j7);
IkReal x1418=IKsin(j7);
IkReal x1419=(cj10*sj12);
IkReal x1420=((1.0)*cj12);
IkReal x1421=((0.4)*cj12);
IkReal x1422=((0.4)*sj12);
IkReal x1423=((1.0)*sj10*sj12);
IkReal x1424=((0.00043624)*x1417);
IkReal x1425=(sj9*x1418);
evalcond[0]=((((-0.00043624)*x1425))+(((-1.0)*px))+(((-1.0)*r01*x1421))+(((-1.0)*r00*x1422))+(((-1.0)*x1424)));
evalcond[1]=((((-1.0)*r10*x1422))+((sj9*x1424))+(((-1.0)*r11*x1421))+(((-1.0)*py))+(((-0.00043624)*x1418)));
evalcond[2]=((((-1.0)*r10*x1423))+((sj9*x1417))+((r11*x1419))+(((-1.0)*r11*sj10*x1420))+(((-1.0)*cj10*r10*x1420)));
evalcond[3]=((((-1.0)*cj10*r00*x1420))+((r01*x1419))+(((-1.0)*x1425))+(((-1.0)*r01*sj10*x1420))+(((-1.0)*r00*x1423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x1426=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1426);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1426);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
IkReal x1427=cj9*cj9;
IkReal x1428=((12500000.0)*px);
IkReal x1429=((12500000.0)*py);
IkReal x1430=((5000000.0)*sj12);
IkReal x1431=((5000000.0)*cj12*r11);
IkReal x1432=((5000000.0)*cj12*r01);
j7eval[0]=((2.0)+(((-1.0)*x1427)));
j7eval[1]=IKsign(((10906.0)+(((-5453.0)*x1427))));
j7eval[2]=((IKabs(((((-1.0)*x1432))+((sj9*x1429))+(((-1.0)*r00*x1430))+((r10*sj9*x1430))+((sj9*x1431))+(((-1.0)*x1428)))))+(IKabs(((((-1.0)*x1431))+(((-1.0)*sj9*x1432))+(((-1.0)*r10*x1430))+(((-1.0)*r00*sj9*x1430))+(((-1.0)*sj9*x1428))+(((-1.0)*x1429))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1433=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1433);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1433);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j7eval[0]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x1434=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1434);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1434);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j7eval[0]=((1.0)+(((-1.0)*(cj9*cj9))));
j7eval[1]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1435=((5453.0)*cj10);
IkReal x1436=(r11*sj12);
IkReal x1437=(cj12*r10);
IkReal x1438=((5000000.0)*sj9);
IkReal x1439=(r10*sj10*sj12);
IkReal x1440=(cj12*r11*sj10);
CheckValue<IkReal> x1441=IKPowWithIntegerCheck(((5453.0)+(((-5453.0)*(cj9*cj9)))),-1);
if(!x1441.valid){
continue;
}
CheckValue<IkReal> x1442=IKPowWithIntegerCheck(sj9,-1);
if(!x1442.valid){
continue;
}
if( IKabs(((x1441.value)*(((((-5453.0)*x1440))+(((-1.0)*x1435*x1436))+(((-1.0)*r00*sj12*x1438))+((x1435*x1437))+(((-1.0)*cj12*r01*x1438))+(((-5453.0)*x1439))+(((-12500000.0)*px*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1442.value)*(((((-1.0)*cj10*x1437))+((cj10*x1436))+x1439+x1440)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1441.value)*(((((-5453.0)*x1440))+(((-1.0)*x1435*x1436))+(((-1.0)*r00*sj12*x1438))+((x1435*x1437))+(((-1.0)*cj12*r01*x1438))+(((-5453.0)*x1439))+(((-12500000.0)*px*sj9))))))+IKsqr(((x1442.value)*(((((-1.0)*cj10*x1437))+((cj10*x1436))+x1439+x1440))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x1441.value)*(((((-5453.0)*x1440))+(((-1.0)*x1435*x1436))+(((-1.0)*r00*sj12*x1438))+((x1435*x1437))+(((-1.0)*cj12*r01*x1438))+(((-5453.0)*x1439))+(((-12500000.0)*px*sj9))))), ((x1442.value)*(((((-1.0)*cj10*x1437))+((cj10*x1436))+x1439+x1440))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x1443=IKcos(j7);
IkReal x1444=IKsin(j7);
IkReal x1445=((1.0)*sj10);
IkReal x1446=(r00*sj12);
IkReal x1447=(cj12*r01);
IkReal x1448=(cj12*r11);
IkReal x1449=(r10*sj12);
IkReal x1450=(cj10*cj12);
IkReal x1451=((0.00043624)*x1443);
IkReal x1452=(sj9*x1444);
IkReal x1453=((1.0)*cj10*sj12);
evalcond[0]=((((-1.0)*x1451))+(((-0.00043624)*x1452))+(((-1.0)*px))+(((-0.4)*x1447))+(((-0.4)*x1446)));
evalcond[1]=(((sj9*x1451))+(((-0.00043624)*x1444))+(((-1.0)*py))+(((-0.4)*x1448))+(((-0.4)*x1449)));
evalcond[2]=(((r10*x1450))+(((-1.0)*x1445*x1448))+(((-1.0)*x1445*x1449))+((sj9*x1443))+(((-1.0)*r11*x1453)));
evalcond[3]=((((-1.0)*x1445*x1447))+(((-1.0)*x1445*x1446))+(((-1.0)*x1452))+(((-1.0)*r01*x1453))+((r00*x1450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1454=(cj12*r11);
IkReal x1455=(r10*sj12);
IkReal x1456=((1.0)*cj10*cj12*r10);
IkReal x1457=(((sj10*x1455))+((sj10*x1454))+((cj10*r11*sj12)));
CheckValue<IkReal> x1458=IKPowWithIntegerCheck(sj9,-1);
if(!x1458.valid){
continue;
}
if( IKabs(((((-1.0)*x1456))+(((-916.926462497708)*x1454))+(((-916.926462497708)*x1455))+(((-2292.31615624427)*py))+x1457)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1458.value)*(((((-1.0)*x1456))+x1457)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1456))+(((-916.926462497708)*x1454))+(((-916.926462497708)*x1455))+(((-2292.31615624427)*py))+x1457))+IKsqr(((x1458.value)*(((((-1.0)*x1456))+x1457))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*x1456))+(((-916.926462497708)*x1454))+(((-916.926462497708)*x1455))+(((-2292.31615624427)*py))+x1457), ((x1458.value)*(((((-1.0)*x1456))+x1457))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x1459=IKcos(j7);
IkReal x1460=IKsin(j7);
IkReal x1461=((1.0)*sj10);
IkReal x1462=(r00*sj12);
IkReal x1463=(cj12*r01);
IkReal x1464=(cj12*r11);
IkReal x1465=(r10*sj12);
IkReal x1466=(cj10*cj12);
IkReal x1467=((0.00043624)*x1459);
IkReal x1468=(sj9*x1460);
IkReal x1469=((1.0)*cj10*sj12);
evalcond[0]=((((-0.4)*x1462))+(((-0.4)*x1463))+(((-1.0)*x1467))+(((-1.0)*px))+(((-0.00043624)*x1468)));
evalcond[1]=((((-0.4)*x1465))+(((-0.4)*x1464))+((sj9*x1467))+(((-1.0)*py))+(((-0.00043624)*x1460)));
evalcond[2]=(((sj9*x1459))+(((-1.0)*r11*x1469))+(((-1.0)*x1461*x1464))+(((-1.0)*x1461*x1465))+((r10*x1466)));
evalcond[3]=(((r00*x1466))+(((-1.0)*r01*x1469))+(((-1.0)*x1461*x1463))+(((-1.0)*x1461*x1462))+(((-1.0)*x1468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1470=((12500000.0)*px);
IkReal x1471=((12500000.0)*py);
IkReal x1472=((5000000.0)*sj12);
IkReal x1473=((5000000.0)*cj12*r11);
IkReal x1474=((5000000.0)*cj12*r01);
CheckValue<IkReal> x1475=IKPowWithIntegerCheck(IKsign(((10906.0)+(((-5453.0)*(cj9*cj9))))),-1);
if(!x1475.valid){
continue;
}
CheckValue<IkReal> x1476 = IKatan2WithCheck(IkReal(((((-1.0)*sj9*x1470))+(((-1.0)*sj9*x1474))+(((-1.0)*r10*x1472))+(((-1.0)*r00*sj9*x1472))+(((-1.0)*x1473))+(((-1.0)*x1471)))),IkReal(((((-1.0)*r00*x1472))+((r10*sj9*x1472))+((sj9*x1473))+((sj9*x1471))+(((-1.0)*x1470))+(((-1.0)*x1474)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1476.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1475.value)))+(x1476.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x1477=IKcos(j7);
IkReal x1478=IKsin(j7);
IkReal x1479=((1.0)*sj10);
IkReal x1480=(r00*sj12);
IkReal x1481=(cj12*r01);
IkReal x1482=(cj12*r11);
IkReal x1483=(r10*sj12);
IkReal x1484=(cj10*cj12);
IkReal x1485=((0.00043624)*x1477);
IkReal x1486=(sj9*x1478);
IkReal x1487=((1.0)*cj10*sj12);
evalcond[0]=((((-1.0)*x1485))+(((-0.4)*x1480))+(((-0.4)*x1481))+(((-1.0)*px))+(((-0.00043624)*x1486)));
evalcond[1]=((((-0.4)*x1482))+(((-0.4)*x1483))+(((-0.00043624)*x1478))+(((-1.0)*py))+((sj9*x1485)));
evalcond[2]=((((-1.0)*x1479*x1482))+(((-1.0)*x1479*x1483))+(((-1.0)*r11*x1487))+((r10*x1484))+((sj9*x1477)));
evalcond[3]=((((-1.0)*x1479*x1480))+(((-1.0)*x1479*x1481))+(((-1.0)*r01*x1487))+((r00*x1484))+(((-1.0)*x1486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1495=IKPowWithIntegerCheck(sj8,-1);
if(!x1495.valid){
continue;
}
IkReal x1488=x1495.value;
IkReal x1489=(sj11*sj8);
IkReal x1490=((1.0)*cj12);
IkReal x1491=(cj10*cj9);
IkReal x1492=(r10*sj12);
IkReal x1493=(cj11*sj10);
IkReal x1494=(r11*sj12);
CheckValue<IkReal> x1496=IKPowWithIntegerCheck(cj8,-1);
if(!x1496.valid){
continue;
}
CheckValue<IkReal> x1497=IKPowWithIntegerCheck(sj9,-1);
if(!x1497.valid){
continue;
}
if( IKabs((x1488*((((cj12*r10*x1493))+(((-1.0)*x1493*x1494))+(((-1.0)*cj10*x1492))+(((-1.0)*cj10*r11*x1490)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1488*(x1496.value)*(x1497.value)*((((x1491*x1492))+(((-1.0)*cj9*r10*x1490*x1493))+((cj12*r11*x1491))+((cj9*x1493*x1494))+((r01*sj12*x1489))+(((-1.0)*r00*x1489*x1490)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1488*((((cj12*r10*x1493))+(((-1.0)*x1493*x1494))+(((-1.0)*cj10*x1492))+(((-1.0)*cj10*r11*x1490))))))+IKsqr((x1488*(x1496.value)*(x1497.value)*((((x1491*x1492))+(((-1.0)*cj9*r10*x1490*x1493))+((cj12*r11*x1491))+((cj9*x1493*x1494))+((r01*sj12*x1489))+(((-1.0)*r00*x1489*x1490))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x1488*((((cj12*r10*x1493))+(((-1.0)*x1493*x1494))+(((-1.0)*cj10*x1492))+(((-1.0)*cj10*r11*x1490))))), (x1488*(x1496.value)*(x1497.value)*((((x1491*x1492))+(((-1.0)*cj9*r10*x1490*x1493))+((cj12*r11*x1491))+((cj9*x1493*x1494))+((r01*sj12*x1489))+(((-1.0)*r00*x1489*x1490))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1498=IKsin(j7);
IkReal x1499=IKcos(j7);
IkReal x1500=((1.0)*sj12);
IkReal x1501=(r00*sj10);
IkReal x1502=(cj10*cj11);
IkReal x1503=(r11*sj12);
IkReal x1504=((1.0)*cj12);
IkReal x1505=(cj12*r11);
IkReal x1506=(cj10*sj12);
IkReal x1507=(cj11*sj10);
IkReal x1508=((0.4)*sj12);
IkReal x1509=(cj12*sj11);
IkReal x1510=(cj12*r01);
IkReal x1511=(r01*sj12);
IkReal x1512=(sj9*x1499);
IkReal x1513=(sj8*x1499);
IkReal x1514=(sj8*x1498);
IkReal x1515=(cj9*x1499);
IkReal x1516=((0.00043624)*x1498);
IkReal x1517=(cj8*x1498);
evalcond[0]=(((cj9*x1498))+((cj8*x1512))+((r00*x1509))+(((-1.0)*r01*sj11*x1500)));
evalcond[1]=(((sj9*x1517))+(((-1.0)*x1515))+((r10*x1509))+(((-1.0)*r11*sj11*x1500)));
evalcond[2]=(((x1507*x1511))+((r00*x1506))+(((-1.0)*cj11*x1501*x1504))+x1513+((cj10*x1510)));
evalcond[3]=(((r10*x1506))+x1514+((x1503*x1507))+(((-1.0)*r10*x1504*x1507))+((cj10*x1505)));
evalcond[4]=(((cj9*x1517))+(((-1.0)*r10*sj10*x1500))+x1512+(((-1.0)*r10*x1502*x1504))+(((-1.0)*r11*sj10*x1504))+((x1502*x1503)));
evalcond[5]=((((-1.0)*r01*sj10*x1504))+(((-1.0)*r00*x1502*x1504))+(((-1.0)*sj9*x1498))+((cj8*x1515))+(((-1.0)*x1500*x1501))+((x1502*x1511)));
evalcond[6]=((((0.00043624)*cj8*x1515))+(((-1.0)*sj9*x1516))+(((-1.0)*r00*x1508))+(((-1.0)*px))+(((-0.4)*x1510))+(((-0.00043624)*x1499))+(((0.42)*x1513)));
evalcond[7]=((((-1.0)*x1516))+(((0.00043624)*x1512))+((cj8*cj9*x1516))+(((-1.0)*py))+(((-0.4)*x1505))+(((0.42)*x1514))+(((-1.0)*r10*x1508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1526=IKPowWithIntegerCheck(sj8,-1);
if(!x1526.valid){
continue;
}
IkReal x1518=x1526.value;
IkReal x1519=(sj11*sj8);
IkReal x1520=(cj12*r00);
IkReal x1521=(r01*sj12);
IkReal x1522=(cj11*sj10);
IkReal x1523=(cj8*sj9);
IkReal x1524=(cj10*r00*sj12);
IkReal x1525=(cj10*cj12*r01);
CheckValue<IkReal> x1527=IKPowWithIntegerCheck(cj9,-1);
if(!x1527.valid){
continue;
}
if( IKabs((x1518*(x1527.value)*((((x1521*x1522*x1523))+((x1519*x1521))+((x1523*x1525))+((x1523*x1524))+(((-1.0)*x1519*x1520))+(((-1.0)*x1520*x1522*x1523)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1518*((((x1520*x1522))+(((-1.0)*x1521*x1522))+(((-1.0)*x1524))+(((-1.0)*x1525)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1518*(x1527.value)*((((x1521*x1522*x1523))+((x1519*x1521))+((x1523*x1525))+((x1523*x1524))+(((-1.0)*x1519*x1520))+(((-1.0)*x1520*x1522*x1523))))))+IKsqr((x1518*((((x1520*x1522))+(((-1.0)*x1521*x1522))+(((-1.0)*x1524))+(((-1.0)*x1525))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x1518*(x1527.value)*((((x1521*x1522*x1523))+((x1519*x1521))+((x1523*x1525))+((x1523*x1524))+(((-1.0)*x1519*x1520))+(((-1.0)*x1520*x1522*x1523))))), (x1518*((((x1520*x1522))+(((-1.0)*x1521*x1522))+(((-1.0)*x1524))+(((-1.0)*x1525))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1528=IKsin(j7);
IkReal x1529=IKcos(j7);
IkReal x1530=((1.0)*sj12);
IkReal x1531=(r00*sj10);
IkReal x1532=(cj10*cj11);
IkReal x1533=(r11*sj12);
IkReal x1534=((1.0)*cj12);
IkReal x1535=(cj12*r11);
IkReal x1536=(cj10*sj12);
IkReal x1537=(cj11*sj10);
IkReal x1538=((0.4)*sj12);
IkReal x1539=(cj12*sj11);
IkReal x1540=(cj12*r01);
IkReal x1541=(r01*sj12);
IkReal x1542=(sj9*x1529);
IkReal x1543=(sj8*x1529);
IkReal x1544=(sj8*x1528);
IkReal x1545=(cj9*x1529);
IkReal x1546=((0.00043624)*x1528);
IkReal x1547=(cj8*x1528);
evalcond[0]=(((r00*x1539))+((cj9*x1528))+((cj8*x1542))+(((-1.0)*r01*sj11*x1530)));
evalcond[1]=((((-1.0)*x1545))+(((-1.0)*r11*sj11*x1530))+((r10*x1539))+((sj9*x1547)));
evalcond[2]=((((-1.0)*cj11*x1531*x1534))+((x1537*x1541))+((r00*x1536))+x1543+((cj10*x1540)));
evalcond[3]=((((-1.0)*r10*x1534*x1537))+((r10*x1536))+x1544+((cj10*x1535))+((x1533*x1537)));
evalcond[4]=(((cj9*x1547))+(((-1.0)*r10*x1532*x1534))+((x1532*x1533))+x1542+(((-1.0)*r10*sj10*x1530))+(((-1.0)*r11*sj10*x1534)));
evalcond[5]=((((-1.0)*sj9*x1528))+(((-1.0)*r01*sj10*x1534))+((x1532*x1541))+(((-1.0)*x1530*x1531))+((cj8*x1545))+(((-1.0)*r00*x1532*x1534)));
evalcond[6]=((((-0.00043624)*x1529))+(((-1.0)*r00*x1538))+(((-1.0)*sj9*x1546))+(((0.00043624)*cj8*x1545))+(((-1.0)*px))+(((0.42)*x1543))+(((-0.4)*x1540)));
evalcond[7]=(((cj8*cj9*x1546))+(((0.00043624)*x1542))+(((-1.0)*py))+(((0.42)*x1544))+(((-0.4)*x1535))+(((-1.0)*r10*x1538))+(((-1.0)*x1546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1548=cj8*cj8;
IkReal x1549=cj9*cj9;
IkReal x1550=(cj12*sj11);
IkReal x1551=(cj8*sj9);
IkReal x1552=((1.0)*sj11*sj12);
CheckValue<IkReal> x1553 = IKatan2WithCheck(IkReal((((r10*x1550*x1551))+(((-1.0)*cj9*r01*x1552))+((cj9*r00*x1550))+(((-1.0)*r11*x1551*x1552)))),IkReal(((((-1.0)*r01*x1551*x1552))+((r00*x1550*x1551))+(((-1.0)*cj9*r10*x1550))+((cj9*r11*sj11*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1553.valid){
continue;
}
CheckValue<IkReal> x1554=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1548))+(((-1.0)*x1549))+((x1548*x1549)))),-1);
if(!x1554.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1553.value)+(((1.5707963267949)*(x1554.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1555=IKsin(j7);
IkReal x1556=IKcos(j7);
IkReal x1557=((1.0)*sj12);
IkReal x1558=(r00*sj10);
IkReal x1559=(cj10*cj11);
IkReal x1560=(r11*sj12);
IkReal x1561=((1.0)*cj12);
IkReal x1562=(cj12*r11);
IkReal x1563=(cj10*sj12);
IkReal x1564=(cj11*sj10);
IkReal x1565=((0.4)*sj12);
IkReal x1566=(cj12*sj11);
IkReal x1567=(cj12*r01);
IkReal x1568=(r01*sj12);
IkReal x1569=(sj9*x1556);
IkReal x1570=(sj8*x1556);
IkReal x1571=(sj8*x1555);
IkReal x1572=(cj9*x1556);
IkReal x1573=((0.00043624)*x1555);
IkReal x1574=(cj8*x1555);
evalcond[0]=(((cj8*x1569))+((cj9*x1555))+((r00*x1566))+(((-1.0)*r01*sj11*x1557)));
evalcond[1]=(((r10*x1566))+((sj9*x1574))+(((-1.0)*r11*sj11*x1557))+(((-1.0)*x1572)));
evalcond[2]=((((-1.0)*cj11*x1558*x1561))+x1570+((cj10*x1567))+((x1564*x1568))+((r00*x1563)));
evalcond[3]=(((x1560*x1564))+(((-1.0)*r10*x1561*x1564))+x1571+((cj10*x1562))+((r10*x1563)));
evalcond[4]=((((-1.0)*r10*sj10*x1557))+((cj9*x1574))+(((-1.0)*r11*sj10*x1561))+x1569+((x1559*x1560))+(((-1.0)*r10*x1559*x1561)));
evalcond[5]=(((cj8*x1572))+(((-1.0)*sj9*x1555))+(((-1.0)*x1557*x1558))+(((-1.0)*r00*x1559*x1561))+(((-1.0)*r01*sj10*x1561))+((x1559*x1568)));
evalcond[6]=((((-1.0)*sj9*x1573))+(((0.00043624)*cj8*x1572))+(((-1.0)*px))+(((-1.0)*r00*x1565))+(((0.42)*x1570))+(((-0.4)*x1567))+(((-0.00043624)*x1556)));
evalcond[7]=(((cj8*cj9*x1573))+(((-1.0)*py))+(((0.00043624)*x1569))+(((0.42)*x1571))+(((-0.4)*x1562))+(((-1.0)*r10*x1565))+(((-1.0)*x1573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x1576=IKPowWithIntegerCheck(r22,-1);
if(!x1576.valid){
continue;
}
IkReal x1575=x1576.value;
CheckValue<IkReal> x1577=IKPowWithIntegerCheck(sj10,-1);
if(!x1577.valid){
continue;
}
if( IKabs(((-1.0)*cj8*x1575*(x1577.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj8*sj9*x1575)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj8*x1575*(x1577.value)))+IKsqr((sj8*sj9*x1575))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*cj8*x1575*(x1577.value)), (sj8*sj9*x1575));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x1578=IKsin(j11);
IkReal x1579=((1.0)*sj8);
IkReal x1580=(r22*x1578);
evalcond[0]=(cj8+((sj10*x1580)));
evalcond[1]=((((-1.0)*sj9*x1579))+((r22*(IKcos(j11)))));
evalcond[2]=((((-1.0)*cj9*x1579))+((cj10*x1580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[1];
IkReal x1581=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1581);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1581);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1582=sj8*sj8;
IkReal x1583=(cj10*cj11);
IkReal x1584=(r11*sj10);
IkReal x1585=(r01*sj10);
IkReal x1586=(sj8*sj9);
IkReal x1587=((8.0)*cj11);
IkReal x1588=((4.0)*cj10);
IkReal x1589=((16.0)*cj11);
IkReal x1590=(cj10*r00);
IkReal x1591=(cj10*r10);
IkReal x1592=(r10*sj10);
IkReal x1593=(r00*sj10);
IkReal x1594=((4.0)*x1582);
IkReal x1595=((16.0)*x1582);
IkReal x1596=((4.0)*cj11*sj10);
IkReal x1597=(cj8*cj9*sj8);
IkReal x1598=((8.0)*x1582);
IkReal x1599=(x1587*x1597);
IkReal x1600=(((r11*x1586*x1588))+(((4.0)*cj11*x1593*x1597)));
IkReal x1601=((((4.0)*cj11*x1592*x1597))+(((4.0)*cj11*x1586*x1593)));
IkReal x1602=(((x1584*x1594))+((r10*x1583*x1594))+((r01*x1586*x1588))+((r11*x1588*x1597)));
IkReal x1603=(((r00*x1583*x1594))+(((4.0)*cj11*x1586*x1592))+((x1585*x1594))+((r01*x1588*x1597)));
j12eval[0]=((((0.5)*(IKabs(((((-16.0)*x1590*x1597))+(((16.0)*x1586*x1591))+(((-1.0)*x1585*x1589*x1597))+(((-1.0)*x1593*x1595))+((r01*x1583*x1595))+((x1584*x1586*x1589)))))))+(IKabs(((((-1.0)*x1600))+x1603)))+(((0.5)*(IKabs(((((-1.0)*x1603))+x1600)))))+(((0.5)*(IKabs(((((-1.0)*x1602))+x1601)))))+(IKabs(((((-1.0)*x1585*x1599))+(((-1.0)*x1593*x1598))+((r01*x1583*x1598))+(((8.0)*x1586*x1591))+((x1584*x1586*x1587))+(((-8.0)*x1590*x1597)))))+(IKabs(((((-1.0)*x1585*x1586*x1587))+(((-1.0)*x1592*x1598))+((r11*x1583*x1598))+(((-1.0)*x1584*x1599))+(((-8.0)*x1586*x1590))+(((-8.0)*x1591*x1597)))))+(((0.5)*(IKabs(((((-1.0)*x1584*x1589*x1597))+(((-1.0)*x1585*x1586*x1589))+(((-1.0)*x1592*x1595))+((r11*x1583*x1595))+(((-16.0)*x1586*x1590))+(((-16.0)*x1591*x1597)))))))+(IKabs(((((-1.0)*x1601))+x1602))));
if( IKabs(j12eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j12]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j12evalpoly[1];
IkReal x1604=sj8*sj8;
IkReal x1605=((4.0)*r11);
IkReal x1606=((16.0)*r10);
IkReal x1607=((8.0)*r11);
IkReal x1608=(cj8*cj9);
IkReal x1609=(r00*sj9);
IkReal x1610=(r01*sj9);
IkReal x1611=((16.0)*cj10);
IkReal x1612=((8.0)*r10);
IkReal x1613=((4.0)*r10);
IkReal x1614=(cj10*sj8);
IkReal x1615=(cj11*sj10*sj8);
IkReal x1616=(cj11*x1604);
IkReal x1617=(sj10*x1604);
IkReal x1618=(x1608*x1614);
IkReal x1619=((((4.0)*x1609*x1615))+((x1608*x1613*x1615)));
IkReal x1620=((((4.0)*x1610*x1614))+((x1605*x1617))+((x1605*x1618))+((cj10*x1613*x1616)));
IkReal x1621=(x1620+(((-1.0)*x1619)));
IkReal x1622=((((-8.0)*x1609*x1614))+(((-1.0)*x1607*x1608*x1615))+(((-8.0)*x1610*x1615))+((cj10*x1607*x1616))+(((-1.0)*x1612*x1617))+(((-1.0)*x1612*x1618)));
IkReal x1623=(x1619+(((-1.0)*x1620)));
op[0]=x1621;
op[1]=x1622;
op[2]=x1621;
op[3]=((((-1.0)*x1606*x1618))+(((-1.0)*x1606*x1617))+(((-16.0)*x1610*x1615))+((r11*x1611*x1616))+(((-16.0)*r11*x1608*x1615))+(((-1.0)*sj8*x1609*x1611)));
op[4]=x1623;
op[5]=x1622;
op[6]=x1623;
polyroots6(op,zeror,numroots);
IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[6]={true,true,true,true,true,true};
_nj12 = 6;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

IkReal x1624=sj8*sj8;
IkReal x1625=((4.0)*cj10);
IkReal x1626=(r11*sj9);
IkReal x1627=(r10*sj9);
IkReal x1628=(cj10*cj11);
IkReal x1629=(r00*x1624);
IkReal x1630=(cj8*cj9*r01);
IkReal x1631=(cj11*sj10*sj8);
IkReal x1632=(r01*x1624);
IkReal x1633=((8.0)*cj10*sj8);
IkReal x1634=(cj8*cj9*r00);
IkReal x1635=((16.0)*cj10*sj8);
IkReal x1636=((8.0)*x1631);
IkReal x1637=(sj8*x1625*x1626);
IkReal x1638=((4.0)*x1631*x1634);
IkReal x1639=(x1637+x1638);
IkReal x1640=((((4.0)*sj10*x1632))+(((4.0)*x1627*x1631))+((sj8*x1625*x1630))+((cj11*x1625*x1629)));
IkReal x1641=(x1640+(((-1.0)*x1639)));
IkReal x1642=(((x1627*x1633))+(((8.0)*x1628*x1632))+(((-1.0)*x1633*x1634))+(((-8.0)*sj10*x1629))+(((-1.0)*x1630*x1636))+((x1626*x1636)));
j12evalpoly[0]=(((htj12*x1642))+((x1642*(htj12*htj12*htj12*htj12*htj12)))+x1639+(((htj12*htj12*htj12)*((((x1627*x1635))+(((-1.0)*x1634*x1635))+(((16.0)*x1626*x1631))+(((-16.0)*x1630*x1631))+(((-16.0)*sj10*x1629))+(((16.0)*x1628*x1632))))))+(((-1.0)*x1640))+(((htj12*htj12)*((x1639+(((-1.0)*x1640))))))+((x1641*(htj12*htj12*htj12*htj12)))+((x1641*(htj12*htj12*htj12*htj12*htj12*htj12))));
if( IKabs(j12evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
{
IkReal j7eval[3];
IkReal x1643=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1643);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1643);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1644=cj8*cj8;
IkReal x1645=cj9*cj9;
IkReal x1646=sj11*sj11;
IkReal x1647=sj12*sj12;
IkReal x1648=sj9*sj9;
IkReal x1649=cj12*cj12;
IkReal x1650=(x1645*x1646);
IkReal x1651=(x1644*x1646*x1648);
IkReal x1652=((((-1.0)*x1644))+(((-1.0)*x1645))+((x1644*x1645)));
j7eval[0]=x1652;
j7eval[1]=IKsign(x1652);
j7eval[2]=(((x1647*x1651))+((x1647*x1650))+((x1649*x1650))+((x1649*x1651)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x1653=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1653);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1653);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j7eval[0]=cj9;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1654=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1654);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1654);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j7eval[0]=sj8;
j7eval[1]=cj8;
j7eval[2]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1655=(cj9*sj10);
IkReal x1656=(cj12*r11);
IkReal x1657=(r10*sj12);
IkReal x1658=(sj10*sj9);
if( IKabs((((x1655*x1656))+((x1655*x1657)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1656*x1658))+((x1657*x1658)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1655*x1656))+((x1655*x1657))))+IKsqr((((x1656*x1658))+((x1657*x1658))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((x1655*x1656))+((x1655*x1657))), (((x1656*x1658))+((x1657*x1658))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1659=IKsin(j7);
IkReal x1660=IKcos(j7);
IkReal x1661=((1.0)*sj10);
IkReal x1662=(r00*sj12);
IkReal x1663=(r10*sj12);
IkReal x1664=(cj12*r01);
IkReal x1665=(cj12*r11);
IkReal x1666=(cj9*x1660);
IkReal x1667=((0.00043624)*x1660);
IkReal x1668=((0.00043624)*x1659);
IkReal x1669=(sj9*x1659);
IkReal x1670=(((cj9*x1659))+((sj9*x1660)));
evalcond[0]=x1670;
evalcond[1]=(x1669+(((-1.0)*x1666)));
evalcond[2]=((((-1.0)*x1661*x1665))+(((-1.0)*x1661*x1663))+x1670);
evalcond[3]=((((-1.0)*x1661*x1662))+(((-1.0)*x1661*x1664))+x1666+(((-1.0)*x1669)));
evalcond[4]=((((-0.4)*x1662))+(((-0.4)*x1664))+(((0.00043624)*x1666))+(((-1.0)*px))+(((-1.0)*x1667))+(((-1.0)*sj9*x1668)));
evalcond[5]=(((cj9*x1668))+(((-0.4)*x1665))+(((-0.4)*x1663))+(((-1.0)*py))+((sj9*x1667))+(((-1.0)*x1668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1671=(cj12*r11);
IkReal x1672=(r10*sj12);
IkReal x1673=(sj10*sj9);
IkReal x1674=((1.0)*cj9*sj10);
if( IKabs(((((-1.0)*x1672*x1674))+(((-1.0)*x1671*x1674)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1672*x1673))+((x1671*x1673)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1672*x1674))+(((-1.0)*x1671*x1674))))+IKsqr((((x1672*x1673))+((x1671*x1673))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*x1672*x1674))+(((-1.0)*x1671*x1674))), (((x1672*x1673))+((x1671*x1673))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1675=IKcos(j7);
IkReal x1676=IKsin(j7);
IkReal x1677=((1.0)*sj10);
IkReal x1678=(r00*sj12);
IkReal x1679=(r10*sj12);
IkReal x1680=(cj12*r01);
IkReal x1681=((1.0)*cj9);
IkReal x1682=(cj12*r11);
IkReal x1683=((0.00043624)*x1675);
IkReal x1684=((0.00043624)*x1676);
IkReal x1685=(sj9*x1675);
IkReal x1686=(x1675*x1681);
IkReal x1687=((1.0)*sj9*x1676);
IkReal x1688=(x1687+x1686);
evalcond[0]=((((-1.0)*x1685))+((cj9*x1676)));
evalcond[1]=((-1.0)*x1688);
evalcond[2]=((((-1.0)*x1677*x1682))+x1685+(((-1.0)*x1676*x1681))+(((-1.0)*x1677*x1679)));
evalcond[3]=((((-1.0)*x1677*x1680))+(((-1.0)*x1688))+(((-1.0)*x1677*x1678)));
evalcond[4]=((((-1.0)*x1683))+(((-0.4)*x1678))+(((-1.0)*cj9*x1683))+(((-1.0)*sj9*x1684))+(((-1.0)*px))+(((-0.4)*x1680)));
evalcond[5]=((((-1.0)*x1684))+(((-0.4)*x1679))+(((-1.0)*cj9*x1684))+(((-1.0)*py))+(((-0.4)*x1682))+((sj9*x1683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1689=((1.0)*cj10);
if( IKabs(((((-1.0)*cj12*r11*x1689))+(((-1.0)*r10*sj12*x1689)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj12*x1689))+(((-1.0)*cj12*r01*x1689)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj12*r11*x1689))+(((-1.0)*r10*sj12*x1689))))+IKsqr(((((-1.0)*r00*sj12*x1689))+(((-1.0)*cj12*r01*x1689))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj12*r11*x1689))+(((-1.0)*r10*sj12*x1689))), ((((-1.0)*r00*sj12*x1689))+(((-1.0)*cj12*r01*x1689))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1690=IKcos(j7);
IkReal x1691=IKsin(j7);
IkReal x1692=(cj10*cj11);
IkReal x1693=((1.0)*cj12);
IkReal x1694=(cj12*r11);
IkReal x1695=(cj10*sj12);
IkReal x1696=((0.4)*sj12);
IkReal x1697=(cj12*r01);
IkReal x1698=(sj9*x1690);
IkReal x1699=(sj9*x1691);
evalcond[0]=(cj9*x1691);
evalcond[1]=((-1.0)*cj9*x1690);
evalcond[2]=(((r00*x1695))+((cj10*x1697))+x1690);
evalcond[3]=(((r10*x1695))+((cj10*x1694))+x1691);
evalcond[4]=(x1698+((r11*sj12*x1692))+(((-1.0)*r10*x1692*x1693)));
evalcond[5]=((((-1.0)*x1699))+(((-1.0)*r00*x1692*x1693))+((r01*sj12*x1692)));
evalcond[6]=((((-0.4)*x1697))+(((0.41956376)*x1690))+(((-1.0)*px))+(((-0.00043624)*x1699))+(((-1.0)*r00*x1696)));
evalcond[7]=((((-0.4)*x1694))+(((0.41956376)*x1691))+(((-1.0)*py))+(((0.00043624)*x1698))+(((-1.0)*r10*x1696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1700=(cj10*sj12);
IkReal x1701=(cj10*cj12);
if( IKabs((((r11*x1701))+((r10*x1700)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1701))+((r00*x1700)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1701))+((r10*x1700))))+IKsqr((((r01*x1701))+((r00*x1700))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((r11*x1701))+((r10*x1700))), (((r01*x1701))+((r00*x1700))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1702=IKcos(j7);
IkReal x1703=IKsin(j7);
IkReal x1704=(cj10*cj11);
IkReal x1705=((1.0)*cj12);
IkReal x1706=(cj12*r11);
IkReal x1707=(cj10*sj12);
IkReal x1708=((0.4)*sj12);
IkReal x1709=(cj12*r01);
IkReal x1710=(sj9*x1702);
IkReal x1711=(sj9*x1703);
evalcond[0]=(cj9*x1703);
evalcond[1]=((-1.0)*cj9*x1702);
evalcond[2]=((((-1.0)*x1702))+((r00*x1707))+((cj10*x1709)));
evalcond[3]=((((-1.0)*x1703))+((r10*x1707))+((cj10*x1706)));
evalcond[4]=((((-1.0)*r10*x1704*x1705))+((r11*sj12*x1704))+x1710);
evalcond[5]=(((r01*sj12*x1704))+(((-1.0)*x1711))+(((-1.0)*r00*x1704*x1705)));
evalcond[6]=((((-0.4)*x1709))+(((-1.0)*px))+(((-0.42043624)*x1702))+(((-0.00043624)*x1711))+(((-1.0)*r00*x1708)));
evalcond[7]=((((0.00043624)*x1710))+(((-1.0)*r10*x1708))+(((-0.4)*x1706))+(((-1.0)*py))+(((-0.42043624)*x1703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1712=(sj11*sj12);
IkReal x1713=(cj12*sj11);
if( IKabs(((((-1.0)*r00*x1713))+((r01*x1712)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1712))+((r10*x1713)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1713))+((r01*x1712))))+IKsqr(((((-1.0)*r11*x1712))+((r10*x1713))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*r00*x1713))+((r01*x1712))), ((((-1.0)*r11*x1712))+((r10*x1713))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1714=IKsin(j7);
IkReal x1715=IKcos(j7);
IkReal x1716=((1.0)*sj12);
IkReal x1717=(cj12*r11);
IkReal x1718=(cj10*sj12);
IkReal x1719=((0.4)*sj12);
IkReal x1720=(cj12*r01);
IkReal x1721=((1.0)*sj10);
IkReal x1722=(cj12*sj11);
IkReal x1723=(cj8*x1714);
IkReal x1724=(cj8*x1715);
IkReal x1725=(sj8*x1715);
IkReal x1726=(sj8*x1714);
evalcond[0]=(((r00*x1722))+x1714+(((-1.0)*r01*sj11*x1716)));
evalcond[1]=(x1725+((r00*x1718))+((cj10*x1720)));
evalcond[2]=(((cj10*x1717))+x1726+((r10*x1718)));
evalcond[3]=((((-1.0)*r11*sj11*x1716))+((r10*x1722))+(((-1.0)*x1715)));
evalcond[4]=((((-1.0)*r10*sj10*x1716))+x1723+(((-1.0)*x1717*x1721)));
evalcond[5]=(x1724+(((-1.0)*r00*sj10*x1716))+(((-1.0)*x1720*x1721)));
evalcond[6]=((((-1.0)*r00*x1719))+(((0.42)*x1725))+(((-1.0)*px))+(((-0.00043624)*x1715))+(((0.00043624)*x1724))+(((-0.4)*x1720)));
evalcond[7]=((((0.42)*x1726))+(((-0.4)*x1717))+(((-1.0)*py))+(((-1.0)*r10*x1719))+(((-0.00043624)*x1714))+(((0.00043624)*x1723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1727=(sj11*sj12);
IkReal x1728=(cj12*sj11);
if( IKabs((((r00*x1728))+(((-1.0)*r01*x1727)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1727))+(((-1.0)*r10*x1728)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1728))+(((-1.0)*r01*x1727))))+IKsqr((((r11*x1727))+(((-1.0)*r10*x1728))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((r00*x1728))+(((-1.0)*r01*x1727))), (((r11*x1727))+(((-1.0)*r10*x1728))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1729=IKcos(j7);
IkReal x1730=IKsin(j7);
IkReal x1731=((1.0)*sj12);
IkReal x1732=(cj12*r11);
IkReal x1733=(cj10*sj12);
IkReal x1734=((0.4)*sj12);
IkReal x1735=((962.772785622593)*pz);
IkReal x1736=(cj12*r01);
IkReal x1737=((1.0)*sj10);
IkReal x1738=(cj12*sj11);
IkReal x1739=(cj8*x1729);
IkReal x1740=(cj8*x1730);
evalcond[0]=(x1729+((r10*x1738))+(((-1.0)*r11*sj11*x1731)));
evalcond[1]=(((r00*x1733))+((sj8*x1729))+((cj10*x1736)));
evalcond[2]=(((r10*x1733))+((sj8*x1730))+((cj10*x1732)));
evalcond[3]=(((r00*x1738))+(((-1.0)*r01*sj11*x1731))+(((-1.0)*x1730)));
evalcond[4]=((((-1.0)*r10*sj10*x1731))+(((-1.0)*x1740))+(((-1.0)*x1732*x1737)));
evalcond[5]=((((-1.0)*x1736*x1737))+(((-1.0)*x1739))+(((-1.0)*r00*sj10*x1731)));
evalcond[6]=((((-0.00043624)*x1729))+((x1729*x1735))+(((-1.0)*r00*x1734))+(((-1.0)*px))+(((-404.365006201489)*x1739))+(((-0.4)*x1736)));
evalcond[7]=(((x1730*x1735))+(((-1.0)*r10*x1734))+(((-0.00043624)*x1730))+(((-1.0)*py))+(((-404.365006201489)*x1740))+(((-0.4)*x1732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1741=((1.0)*sj10);
if( IKabs(((((-1.0)*cj12*r01*x1741))+(((-1.0)*r00*sj12*x1741)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj12*r11*sj10))+((r10*sj10*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj12*r01*x1741))+(((-1.0)*r00*sj12*x1741))))+IKsqr((((cj12*r11*sj10))+((r10*sj10*sj12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj12*r01*x1741))+(((-1.0)*r00*sj12*x1741))), (((cj12*r11*sj10))+((r10*sj10*sj12))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1742=IKcos(j7);
IkReal x1743=IKsin(j7);
IkReal x1744=((1.0)*sj10);
IkReal x1745=(r00*sj12);
IkReal x1746=(cj11*cj12);
IkReal x1747=(r10*sj12);
IkReal x1748=(cj12*r01);
IkReal x1749=(cj12*r11);
IkReal x1750=((0.00043624)*x1742);
IkReal x1751=((0.00043624)*x1743);
IkReal x1752=(cj11*sj10*sj12);
IkReal x1753=(sj8*x1742);
IkReal x1754=(sj8*x1743);
evalcond[0]=(cj8*x1742);
evalcond[1]=(cj8*x1743);
evalcond[2]=(x1742+(((-1.0)*x1744*x1749))+(((-1.0)*x1744*x1747)));
evalcond[3]=((((-1.0)*x1743))+(((-1.0)*x1744*x1745))+(((-1.0)*x1744*x1748)));
evalcond[4]=((((-1.0)*r00*x1744*x1746))+x1753+((r01*x1752)));
evalcond[5]=(x1754+(((-1.0)*r10*x1744*x1746))+((r11*x1752)));
evalcond[6]=((((-0.4)*x1748))+(((-0.4)*x1745))+(((0.42)*x1753))+(((-1.0)*px))+(((-1.0)*x1750))+(((-1.0)*x1751)));
evalcond[7]=((((-0.4)*x1747))+(((-0.4)*x1749))+x1750+(((0.42)*x1754))+(((-1.0)*py))+(((-1.0)*x1751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1755=(sj10*sj12);
IkReal x1756=(cj12*sj10);
if( IKabs((((r01*x1756))+((r00*x1755)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1755))+(((-1.0)*r11*x1756)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1756))+((r00*x1755))))+IKsqr(((((-1.0)*r10*x1755))+(((-1.0)*r11*x1756))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((r01*x1756))+((r00*x1755))), ((((-1.0)*r10*x1755))+(((-1.0)*r11*x1756))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1757=IKsin(j7);
IkReal x1758=IKcos(j7);
IkReal x1759=((1.0)*sj10);
IkReal x1760=(r00*sj12);
IkReal x1761=(cj11*cj12);
IkReal x1762=(r10*sj12);
IkReal x1763=(cj12*r01);
IkReal x1764=(cj12*r11);
IkReal x1765=((0.00043624)*x1758);
IkReal x1766=((0.00043624)*x1757);
IkReal x1767=(cj11*sj10*sj12);
IkReal x1768=(sj8*x1758);
IkReal x1769=(sj8*x1757);
IkReal x1770=((-1.0)*cj8);
evalcond[0]=(x1758*x1770);
evalcond[1]=(x1757*x1770);
evalcond[2]=(x1757+(((-1.0)*x1759*x1760))+(((-1.0)*x1759*x1763)));
evalcond[3]=((((-1.0)*x1759*x1762))+(((-1.0)*x1759*x1764))+(((-1.0)*x1758)));
evalcond[4]=(x1768+((r01*x1767))+(((-1.0)*r00*x1759*x1761)));
evalcond[5]=(x1769+((r11*x1767))+(((-1.0)*r10*x1759*x1761)));
evalcond[6]=((((-1.0)*x1765))+x1766+(((-1.0)*px))+(((-0.4)*x1760))+(((-0.4)*x1763))+(((0.42)*x1768)));
evalcond[7]=((((-1.0)*x1766))+(((-1.0)*x1765))+(((-1.0)*py))+(((-0.4)*x1764))+(((-0.4)*x1762))+(((0.42)*x1769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x1771=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1771);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1771);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj11=0;
cj11=1.0;
j11=0;
IkReal x1772=cj9*cj9;
IkReal x1773=((12500000.0)*px);
IkReal x1774=((12500000.0)*py);
IkReal x1775=((5000000.0)*sj12);
IkReal x1776=((5000000.0)*cj12*r11);
IkReal x1777=((5000000.0)*cj12*r01);
j7eval[0]=((2.0)+(((-1.0)*x1772)));
j7eval[1]=IKsign(((10906.0)+(((-5453.0)*x1772))));
j7eval[2]=((IKabs(((((-1.0)*r00*sj9*x1775))+(((-1.0)*r10*x1775))+(((-1.0)*x1776))+(((-1.0)*x1774))+(((-1.0)*sj9*x1777))+(((-1.0)*sj9*x1773)))))+(IKabs((((sj9*x1776))+((sj9*x1774))+(((-1.0)*x1773))+(((-1.0)*x1777))+(((-1.0)*r00*x1775))+((r10*sj9*x1775))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1778=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1778);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1778);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj11=0;
cj11=1.0;
j11=0;
j7eval[0]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x1779=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1779);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1779);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj11=0;
cj11=1.0;
j11=0;
j7eval[0]=((1.0)+(((-1.0)*(cj9*cj9))));
j7eval[1]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1780=((5453.0)*cj10);
IkReal x1781=(r11*sj12);
IkReal x1782=(cj12*r10);
IkReal x1783=((5000000.0)*sj9);
IkReal x1784=(r10*sj10*sj12);
IkReal x1785=(cj12*r11*sj10);
CheckValue<IkReal> x1786=IKPowWithIntegerCheck(((5453.0)+(((-5453.0)*(cj9*cj9)))),-1);
if(!x1786.valid){
continue;
}
CheckValue<IkReal> x1787=IKPowWithIntegerCheck(sj9,-1);
if(!x1787.valid){
continue;
}
if( IKabs(((x1786.value)*(((((-1.0)*r00*sj12*x1783))+(((-1.0)*cj12*r01*x1783))+(((-5453.0)*x1785))+(((-5453.0)*x1784))+(((-1.0)*x1780*x1782))+((x1780*x1781))+(((-12500000.0)*px*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1787.value)*((x1784+x1785+(((-1.0)*cj10*x1781))+((cj10*x1782)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1786.value)*(((((-1.0)*r00*sj12*x1783))+(((-1.0)*cj12*r01*x1783))+(((-5453.0)*x1785))+(((-5453.0)*x1784))+(((-1.0)*x1780*x1782))+((x1780*x1781))+(((-12500000.0)*px*sj9))))))+IKsqr(((x1787.value)*((x1784+x1785+(((-1.0)*cj10*x1781))+((cj10*x1782))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x1786.value)*(((((-1.0)*r00*sj12*x1783))+(((-1.0)*cj12*r01*x1783))+(((-5453.0)*x1785))+(((-5453.0)*x1784))+(((-1.0)*x1780*x1782))+((x1780*x1781))+(((-12500000.0)*px*sj9))))), ((x1787.value)*((x1784+x1785+(((-1.0)*cj10*x1781))+((cj10*x1782))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x1788=IKcos(j7);
IkReal x1789=IKsin(j7);
IkReal x1790=(cj10*sj12);
IkReal x1791=((1.0)*cj12);
IkReal x1792=((0.4)*cj12);
IkReal x1793=((0.4)*sj12);
IkReal x1794=((1.0)*sj10*sj12);
IkReal x1795=((0.00043624)*x1788);
IkReal x1796=(sj9*x1789);
evalcond[0]=((((-1.0)*x1795))+(((-1.0)*r01*x1792))+(((-1.0)*r00*x1793))+(((-0.00043624)*x1796))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*r10*x1793))+(((-1.0)*r11*x1792))+(((-0.00043624)*x1789))+(((-1.0)*py))+((sj9*x1795)));
evalcond[2]=((((-1.0)*r10*x1794))+(((-1.0)*cj10*r10*x1791))+(((-1.0)*r11*sj10*x1791))+((r11*x1790))+((sj9*x1788)));
evalcond[3]=((((-1.0)*cj10*r00*x1791))+(((-1.0)*r00*x1794))+(((-1.0)*x1796))+(((-1.0)*r01*sj10*x1791))+((r01*x1790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1797=(cj12*r11);
IkReal x1798=(r10*sj12);
IkReal x1799=((1.0)*cj10*r11*sj12);
IkReal x1800=(((sj10*x1797))+((sj10*x1798))+((cj10*cj12*r10)));
CheckValue<IkReal> x1801=IKPowWithIntegerCheck(sj9,-1);
if(!x1801.valid){
continue;
}
if( IKabs(((((-1.0)*x1799))+(((-2292.31615624427)*py))+x1800+(((-916.926462497708)*x1797))+(((-916.926462497708)*x1798)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1801.value)*(((((-1.0)*x1799))+x1800)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1799))+(((-2292.31615624427)*py))+x1800+(((-916.926462497708)*x1797))+(((-916.926462497708)*x1798))))+IKsqr(((x1801.value)*(((((-1.0)*x1799))+x1800))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*x1799))+(((-2292.31615624427)*py))+x1800+(((-916.926462497708)*x1797))+(((-916.926462497708)*x1798))), ((x1801.value)*(((((-1.0)*x1799))+x1800))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x1802=IKcos(j7);
IkReal x1803=IKsin(j7);
IkReal x1804=(cj10*sj12);
IkReal x1805=((1.0)*cj12);
IkReal x1806=((0.4)*cj12);
IkReal x1807=((0.4)*sj12);
IkReal x1808=((1.0)*sj10*sj12);
IkReal x1809=((0.00043624)*x1802);
IkReal x1810=(sj9*x1803);
evalcond[0]=((((-0.00043624)*x1810))+(((-1.0)*r00*x1807))+(((-1.0)*r01*x1806))+(((-1.0)*x1809))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*r10*x1807))+(((-1.0)*py))+((sj9*x1809))+(((-0.00043624)*x1803))+(((-1.0)*r11*x1806)));
evalcond[2]=((((-1.0)*r10*x1808))+(((-1.0)*r11*sj10*x1805))+((r11*x1804))+((sj9*x1802))+(((-1.0)*cj10*r10*x1805)));
evalcond[3]=((((-1.0)*r00*x1808))+(((-1.0)*r01*sj10*x1805))+(((-1.0)*cj10*r00*x1805))+((r01*x1804))+(((-1.0)*x1810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1811=((12500000.0)*px);
IkReal x1812=((12500000.0)*py);
IkReal x1813=((5000000.0)*sj12);
IkReal x1814=((5000000.0)*cj12*r11);
IkReal x1815=((5000000.0)*cj12*r01);
CheckValue<IkReal> x1816=IKPowWithIntegerCheck(IKsign(((10906.0)+(((-5453.0)*(cj9*cj9))))),-1);
if(!x1816.valid){
continue;
}
CheckValue<IkReal> x1817 = IKatan2WithCheck(IkReal(((((-1.0)*x1812))+(((-1.0)*x1814))+(((-1.0)*sj9*x1811))+(((-1.0)*sj9*x1815))+(((-1.0)*r10*x1813))+(((-1.0)*r00*sj9*x1813)))),IkReal(((((-1.0)*x1811))+(((-1.0)*x1815))+((sj9*x1812))+((sj9*x1814))+(((-1.0)*r00*x1813))+((r10*sj9*x1813)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1817.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1816.value)))+(x1817.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x1818=IKcos(j7);
IkReal x1819=IKsin(j7);
IkReal x1820=(cj10*sj12);
IkReal x1821=((1.0)*cj12);
IkReal x1822=((0.4)*cj12);
IkReal x1823=((0.4)*sj12);
IkReal x1824=((1.0)*sj10*sj12);
IkReal x1825=((0.00043624)*x1818);
IkReal x1826=(sj9*x1819);
evalcond[0]=((((-1.0)*x1825))+(((-0.00043624)*x1826))+(((-1.0)*px))+(((-1.0)*r00*x1823))+(((-1.0)*r01*x1822)));
evalcond[1]=((((-0.00043624)*x1819))+((sj9*x1825))+(((-1.0)*py))+(((-1.0)*r11*x1822))+(((-1.0)*r10*x1823)));
evalcond[2]=(((sj9*x1818))+(((-1.0)*r11*sj10*x1821))+((r11*x1820))+(((-1.0)*cj10*r10*x1821))+(((-1.0)*r10*x1824)));
evalcond[3]=((((-1.0)*cj10*r00*x1821))+(((-1.0)*x1826))+(((-1.0)*r01*sj10*x1821))+((r01*x1820))+(((-1.0)*r00*x1824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x1827=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1827);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1827);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
IkReal x1828=cj9*cj9;
IkReal x1829=((12500000.0)*px);
IkReal x1830=((12500000.0)*py);
IkReal x1831=((5000000.0)*sj12);
IkReal x1832=((5000000.0)*cj12*r11);
IkReal x1833=((5000000.0)*cj12*r01);
j7eval[0]=((2.0)+(((-1.0)*x1828)));
j7eval[1]=IKsign(((10906.0)+(((-5453.0)*x1828))));
j7eval[2]=((IKabs(((((-1.0)*sj9*x1833))+(((-1.0)*sj9*x1829))+(((-1.0)*r10*x1831))+(((-1.0)*r00*sj9*x1831))+(((-1.0)*x1830))+(((-1.0)*x1832)))))+(IKabs(((((-1.0)*x1829))+((r10*sj9*x1831))+(((-1.0)*r00*x1831))+(((-1.0)*x1833))+((sj9*x1830))+((sj9*x1832))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1834=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1834);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1834);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j7eval[0]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x1835=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1835);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1835);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j7eval[0]=((1.0)+(((-1.0)*(cj9*cj9))));
j7eval[1]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1836=((5453.0)*cj10);
IkReal x1837=(r11*sj12);
IkReal x1838=(cj12*r10);
IkReal x1839=((5000000.0)*sj9);
IkReal x1840=(r10*sj10*sj12);
IkReal x1841=(cj12*r11*sj10);
CheckValue<IkReal> x1842=IKPowWithIntegerCheck(((5453.0)+(((-5453.0)*(cj9*cj9)))),-1);
if(!x1842.valid){
continue;
}
CheckValue<IkReal> x1843=IKPowWithIntegerCheck(sj9,-1);
if(!x1843.valid){
continue;
}
if( IKabs(((x1842.value)*(((((-1.0)*r00*sj12*x1839))+(((-1.0)*cj12*r01*x1839))+(((-5453.0)*x1840))+(((-5453.0)*x1841))+(((-1.0)*x1836*x1837))+((x1836*x1838))+(((-12500000.0)*px*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1843.value)*((x1841+x1840+(((-1.0)*cj10*x1838))+((cj10*x1837)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1842.value)*(((((-1.0)*r00*sj12*x1839))+(((-1.0)*cj12*r01*x1839))+(((-5453.0)*x1840))+(((-5453.0)*x1841))+(((-1.0)*x1836*x1837))+((x1836*x1838))+(((-12500000.0)*px*sj9))))))+IKsqr(((x1843.value)*((x1841+x1840+(((-1.0)*cj10*x1838))+((cj10*x1837))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x1842.value)*(((((-1.0)*r00*sj12*x1839))+(((-1.0)*cj12*r01*x1839))+(((-5453.0)*x1840))+(((-5453.0)*x1841))+(((-1.0)*x1836*x1837))+((x1836*x1838))+(((-12500000.0)*px*sj9))))), ((x1843.value)*((x1841+x1840+(((-1.0)*cj10*x1838))+((cj10*x1837))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x1844=IKcos(j7);
IkReal x1845=IKsin(j7);
IkReal x1846=((1.0)*sj10);
IkReal x1847=(r00*sj12);
IkReal x1848=(cj12*r01);
IkReal x1849=(cj12*r11);
IkReal x1850=(r10*sj12);
IkReal x1851=(cj10*cj12);
IkReal x1852=((0.00043624)*x1844);
IkReal x1853=(sj9*x1845);
IkReal x1854=((1.0)*cj10*sj12);
evalcond[0]=((((-0.00043624)*x1853))+(((-1.0)*px))+(((-0.4)*x1847))+(((-0.4)*x1848))+(((-1.0)*x1852)));
evalcond[1]=((((-0.00043624)*x1845))+((sj9*x1852))+(((-0.4)*x1850))+(((-1.0)*py))+(((-0.4)*x1849)));
evalcond[2]=(((sj9*x1844))+((r10*x1851))+(((-1.0)*r11*x1854))+(((-1.0)*x1846*x1849))+(((-1.0)*x1846*x1850)));
evalcond[3]=((((-1.0)*x1853))+((r00*x1851))+(((-1.0)*r01*x1854))+(((-1.0)*x1846*x1847))+(((-1.0)*x1846*x1848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1855=(cj12*r11);
IkReal x1856=(r10*sj12);
IkReal x1857=((1.0)*cj10*cj12*r10);
IkReal x1858=(((cj10*r11*sj12))+((sj10*x1855))+((sj10*x1856)));
CheckValue<IkReal> x1859=IKPowWithIntegerCheck(sj9,-1);
if(!x1859.valid){
continue;
}
if( IKabs(((((-2292.31615624427)*py))+x1858+(((-916.926462497708)*x1855))+(((-916.926462497708)*x1856))+(((-1.0)*x1857)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1859.value)*((x1858+(((-1.0)*x1857)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2292.31615624427)*py))+x1858+(((-916.926462497708)*x1855))+(((-916.926462497708)*x1856))+(((-1.0)*x1857))))+IKsqr(((x1859.value)*((x1858+(((-1.0)*x1857))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-2292.31615624427)*py))+x1858+(((-916.926462497708)*x1855))+(((-916.926462497708)*x1856))+(((-1.0)*x1857))), ((x1859.value)*((x1858+(((-1.0)*x1857))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x1860=IKcos(j7);
IkReal x1861=IKsin(j7);
IkReal x1862=((1.0)*sj10);
IkReal x1863=(r00*sj12);
IkReal x1864=(cj12*r01);
IkReal x1865=(cj12*r11);
IkReal x1866=(r10*sj12);
IkReal x1867=(cj10*cj12);
IkReal x1868=((0.00043624)*x1860);
IkReal x1869=(sj9*x1861);
IkReal x1870=((1.0)*cj10*sj12);
evalcond[0]=((((-1.0)*px))+(((-0.00043624)*x1869))+(((-1.0)*x1868))+(((-0.4)*x1864))+(((-0.4)*x1863)));
evalcond[1]=(((sj9*x1868))+(((-1.0)*py))+(((-0.00043624)*x1861))+(((-0.4)*x1866))+(((-0.4)*x1865)));
evalcond[2]=(((sj9*x1860))+(((-1.0)*x1862*x1865))+(((-1.0)*x1862*x1866))+(((-1.0)*r11*x1870))+((r10*x1867)));
evalcond[3]=((((-1.0)*r01*x1870))+(((-1.0)*x1862*x1863))+(((-1.0)*x1862*x1864))+(((-1.0)*x1869))+((r00*x1867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1871=((12500000.0)*px);
IkReal x1872=((12500000.0)*py);
IkReal x1873=((5000000.0)*sj12);
IkReal x1874=((5000000.0)*cj12*r11);
IkReal x1875=((5000000.0)*cj12*r01);
CheckValue<IkReal> x1876=IKPowWithIntegerCheck(IKsign(((10906.0)+(((-5453.0)*(cj9*cj9))))),-1);
if(!x1876.valid){
continue;
}
CheckValue<IkReal> x1877 = IKatan2WithCheck(IkReal(((((-1.0)*sj9*x1871))+(((-1.0)*sj9*x1875))+(((-1.0)*x1874))+(((-1.0)*x1872))+(((-1.0)*r10*x1873))+(((-1.0)*r00*sj9*x1873)))),IkReal(((((-1.0)*x1871))+(((-1.0)*x1875))+(((-1.0)*r00*x1873))+((r10*sj9*x1873))+((sj9*x1874))+((sj9*x1872)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1877.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1876.value)))+(x1877.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x1878=IKcos(j7);
IkReal x1879=IKsin(j7);
IkReal x1880=((1.0)*sj10);
IkReal x1881=(r00*sj12);
IkReal x1882=(cj12*r01);
IkReal x1883=(cj12*r11);
IkReal x1884=(r10*sj12);
IkReal x1885=(cj10*cj12);
IkReal x1886=((0.00043624)*x1878);
IkReal x1887=(sj9*x1879);
IkReal x1888=((1.0)*cj10*sj12);
evalcond[0]=((((-0.00043624)*x1887))+(((-1.0)*px))+(((-0.4)*x1882))+(((-0.4)*x1881))+(((-1.0)*x1886)));
evalcond[1]=((((-0.00043624)*x1879))+((sj9*x1886))+(((-1.0)*py))+(((-0.4)*x1883))+(((-0.4)*x1884)));
evalcond[2]=((((-1.0)*x1880*x1884))+(((-1.0)*x1880*x1883))+(((-1.0)*r11*x1888))+((r10*x1885))+((sj9*x1878)));
evalcond[3]=((((-1.0)*x1880*x1881))+(((-1.0)*x1880*x1882))+((r00*x1885))+(((-1.0)*x1887))+(((-1.0)*r01*x1888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1896=IKPowWithIntegerCheck(sj8,-1);
if(!x1896.valid){
continue;
}
IkReal x1889=x1896.value;
IkReal x1890=(sj11*sj8);
IkReal x1891=((1.0)*cj12);
IkReal x1892=(cj10*cj9);
IkReal x1893=(r10*sj12);
IkReal x1894=(cj11*sj10);
IkReal x1895=(r11*sj12);
CheckValue<IkReal> x1897=IKPowWithIntegerCheck(cj8,-1);
if(!x1897.valid){
continue;
}
CheckValue<IkReal> x1898=IKPowWithIntegerCheck(sj9,-1);
if(!x1898.valid){
continue;
}
if( IKabs((x1889*(((((-1.0)*cj10*x1893))+(((-1.0)*cj10*r11*x1891))+((cj12*r10*x1894))+(((-1.0)*x1894*x1895)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1889*(x1897.value)*(x1898.value)*((((cj9*x1894*x1895))+((x1892*x1893))+(((-1.0)*r00*x1890*x1891))+(((-1.0)*cj9*r10*x1891*x1894))+((cj12*r11*x1892))+((r01*sj12*x1890)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1889*(((((-1.0)*cj10*x1893))+(((-1.0)*cj10*r11*x1891))+((cj12*r10*x1894))+(((-1.0)*x1894*x1895))))))+IKsqr((x1889*(x1897.value)*(x1898.value)*((((cj9*x1894*x1895))+((x1892*x1893))+(((-1.0)*r00*x1890*x1891))+(((-1.0)*cj9*r10*x1891*x1894))+((cj12*r11*x1892))+((r01*sj12*x1890))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x1889*(((((-1.0)*cj10*x1893))+(((-1.0)*cj10*r11*x1891))+((cj12*r10*x1894))+(((-1.0)*x1894*x1895))))), (x1889*(x1897.value)*(x1898.value)*((((cj9*x1894*x1895))+((x1892*x1893))+(((-1.0)*r00*x1890*x1891))+(((-1.0)*cj9*r10*x1891*x1894))+((cj12*r11*x1892))+((r01*sj12*x1890))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1899=IKsin(j7);
IkReal x1900=IKcos(j7);
IkReal x1901=((1.0)*sj12);
IkReal x1902=(r00*sj10);
IkReal x1903=(cj10*cj11);
IkReal x1904=(r11*sj12);
IkReal x1905=((1.0)*cj12);
IkReal x1906=(cj12*r11);
IkReal x1907=(cj10*sj12);
IkReal x1908=(cj11*sj10);
IkReal x1909=((0.4)*sj12);
IkReal x1910=(cj12*sj11);
IkReal x1911=(cj12*r01);
IkReal x1912=(r01*sj12);
IkReal x1913=(sj9*x1900);
IkReal x1914=(sj8*x1900);
IkReal x1915=(sj8*x1899);
IkReal x1916=(cj9*x1900);
IkReal x1917=((0.00043624)*x1899);
IkReal x1918=(cj8*x1899);
evalcond[0]=(((cj8*x1913))+((r00*x1910))+((cj9*x1899))+(((-1.0)*r01*sj11*x1901)));
evalcond[1]=(((r10*x1910))+(((-1.0)*r11*sj11*x1901))+((sj9*x1918))+(((-1.0)*x1916)));
evalcond[2]=(((cj10*x1911))+((r00*x1907))+(((-1.0)*cj11*x1902*x1905))+x1914+((x1908*x1912)));
evalcond[3]=(((cj10*x1906))+((x1904*x1908))+(((-1.0)*r10*x1905*x1908))+x1915+((r10*x1907)));
evalcond[4]=(((x1903*x1904))+(((-1.0)*r11*sj10*x1905))+(((-1.0)*r10*sj10*x1901))+((cj9*x1918))+x1913+(((-1.0)*r10*x1903*x1905)));
evalcond[5]=(((cj8*x1916))+(((-1.0)*x1901*x1902))+(((-1.0)*r01*sj10*x1905))+(((-1.0)*sj9*x1899))+((x1903*x1912))+(((-1.0)*r00*x1903*x1905)));
evalcond[6]=((((0.42)*x1914))+(((-0.00043624)*x1900))+(((-1.0)*px))+(((-0.4)*x1911))+(((-1.0)*sj9*x1917))+(((0.00043624)*cj8*x1916))+(((-1.0)*r00*x1909)));
evalcond[7]=((((0.42)*x1915))+((cj8*cj9*x1917))+(((0.00043624)*x1913))+(((-1.0)*r10*x1909))+(((-1.0)*py))+(((-0.4)*x1906))+(((-1.0)*x1917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1927=IKPowWithIntegerCheck(sj8,-1);
if(!x1927.valid){
continue;
}
IkReal x1919=x1927.value;
IkReal x1920=(sj11*sj8);
IkReal x1921=(cj12*r00);
IkReal x1922=(r01*sj12);
IkReal x1923=(cj11*sj10);
IkReal x1924=(cj8*sj9);
IkReal x1925=(cj10*r00*sj12);
IkReal x1926=(cj10*cj12*r01);
CheckValue<IkReal> x1928=IKPowWithIntegerCheck(cj9,-1);
if(!x1928.valid){
continue;
}
if( IKabs((x1919*(x1928.value)*(((((-1.0)*x1920*x1921))+((x1922*x1923*x1924))+((x1920*x1922))+(((-1.0)*x1921*x1923*x1924))+((x1924*x1925))+((x1924*x1926)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1919*((((x1921*x1923))+(((-1.0)*x1925))+(((-1.0)*x1926))+(((-1.0)*x1922*x1923)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1919*(x1928.value)*(((((-1.0)*x1920*x1921))+((x1922*x1923*x1924))+((x1920*x1922))+(((-1.0)*x1921*x1923*x1924))+((x1924*x1925))+((x1924*x1926))))))+IKsqr((x1919*((((x1921*x1923))+(((-1.0)*x1925))+(((-1.0)*x1926))+(((-1.0)*x1922*x1923))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x1919*(x1928.value)*(((((-1.0)*x1920*x1921))+((x1922*x1923*x1924))+((x1920*x1922))+(((-1.0)*x1921*x1923*x1924))+((x1924*x1925))+((x1924*x1926))))), (x1919*((((x1921*x1923))+(((-1.0)*x1925))+(((-1.0)*x1926))+(((-1.0)*x1922*x1923))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1929=IKsin(j7);
IkReal x1930=IKcos(j7);
IkReal x1931=((1.0)*sj12);
IkReal x1932=(r00*sj10);
IkReal x1933=(cj10*cj11);
IkReal x1934=(r11*sj12);
IkReal x1935=((1.0)*cj12);
IkReal x1936=(cj12*r11);
IkReal x1937=(cj10*sj12);
IkReal x1938=(cj11*sj10);
IkReal x1939=((0.4)*sj12);
IkReal x1940=(cj12*sj11);
IkReal x1941=(cj12*r01);
IkReal x1942=(r01*sj12);
IkReal x1943=(sj9*x1930);
IkReal x1944=(sj8*x1930);
IkReal x1945=(sj8*x1929);
IkReal x1946=(cj9*x1930);
IkReal x1947=((0.00043624)*x1929);
IkReal x1948=(cj8*x1929);
evalcond[0]=(((cj9*x1929))+((cj8*x1943))+((r00*x1940))+(((-1.0)*r01*sj11*x1931)));
evalcond[1]=(((sj9*x1948))+((r10*x1940))+(((-1.0)*x1946))+(((-1.0)*r11*sj11*x1931)));
evalcond[2]=(((r00*x1937))+((x1938*x1942))+(((-1.0)*cj11*x1932*x1935))+((cj10*x1941))+x1944);
evalcond[3]=(((cj10*x1936))+((x1934*x1938))+x1945+(((-1.0)*r10*x1935*x1938))+((r10*x1937)));
evalcond[4]=((((-1.0)*r11*sj10*x1935))+(((-1.0)*r10*sj10*x1931))+((cj9*x1948))+x1943+(((-1.0)*r10*x1933*x1935))+((x1933*x1934)));
evalcond[5]=((((-1.0)*sj9*x1929))+((cj8*x1946))+(((-1.0)*r01*sj10*x1935))+(((-1.0)*r00*x1933*x1935))+(((-1.0)*x1931*x1932))+((x1933*x1942)));
evalcond[6]=((((-0.00043624)*x1930))+(((0.00043624)*cj8*x1946))+(((-1.0)*px))+(((-0.4)*x1941))+(((-1.0)*sj9*x1947))+(((0.42)*x1944))+(((-1.0)*r00*x1939)));
evalcond[7]=(((cj8*cj9*x1947))+(((-1.0)*x1947))+(((-1.0)*py))+(((-1.0)*r10*x1939))+(((0.42)*x1945))+(((-0.4)*x1936))+(((0.00043624)*x1943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1949=cj8*cj8;
IkReal x1950=cj9*cj9;
IkReal x1951=(cj12*sj11);
IkReal x1952=(cj8*sj9);
IkReal x1953=((1.0)*sj11*sj12);
CheckValue<IkReal> x1954 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1952*x1953))+(((-1.0)*cj9*r01*x1953))+((r10*x1951*x1952))+((cj9*r00*x1951)))),IkReal((((r00*x1951*x1952))+(((-1.0)*cj9*r10*x1951))+(((-1.0)*r01*x1952*x1953))+((cj9*r11*sj11*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1954.valid){
continue;
}
CheckValue<IkReal> x1955=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1949))+(((-1.0)*x1950))+((x1949*x1950)))),-1);
if(!x1955.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1954.value)+(((1.5707963267949)*(x1955.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1956=IKsin(j7);
IkReal x1957=IKcos(j7);
IkReal x1958=((1.0)*sj12);
IkReal x1959=(r00*sj10);
IkReal x1960=(cj10*cj11);
IkReal x1961=(r11*sj12);
IkReal x1962=((1.0)*cj12);
IkReal x1963=(cj12*r11);
IkReal x1964=(cj10*sj12);
IkReal x1965=(cj11*sj10);
IkReal x1966=((0.4)*sj12);
IkReal x1967=(cj12*sj11);
IkReal x1968=(cj12*r01);
IkReal x1969=(r01*sj12);
IkReal x1970=(sj9*x1957);
IkReal x1971=(sj8*x1957);
IkReal x1972=(sj8*x1956);
IkReal x1973=(cj9*x1957);
IkReal x1974=((0.00043624)*x1956);
IkReal x1975=(cj8*x1956);
evalcond[0]=((((-1.0)*r01*sj11*x1958))+((cj8*x1970))+((cj9*x1956))+((r00*x1967)));
evalcond[1]=(((r10*x1967))+(((-1.0)*x1973))+(((-1.0)*r11*sj11*x1958))+((sj9*x1975)));
evalcond[2]=(((cj10*x1968))+((r00*x1964))+x1971+((x1965*x1969))+(((-1.0)*cj11*x1959*x1962)));
evalcond[3]=(((cj10*x1963))+((r10*x1964))+x1972+((x1961*x1965))+(((-1.0)*r10*x1962*x1965)));
evalcond[4]=(((cj9*x1975))+(((-1.0)*r10*x1960*x1962))+x1970+(((-1.0)*r10*sj10*x1958))+((x1960*x1961))+(((-1.0)*r11*sj10*x1962)));
evalcond[5]=((((-1.0)*r00*x1960*x1962))+(((-1.0)*x1958*x1959))+((cj8*x1973))+(((-1.0)*sj9*x1956))+((x1960*x1969))+(((-1.0)*r01*sj10*x1962)));
evalcond[6]=((((0.00043624)*cj8*x1973))+(((-1.0)*sj9*x1974))+(((-1.0)*r00*x1966))+(((-1.0)*px))+(((0.42)*x1971))+(((-0.4)*x1968))+(((-0.00043624)*x1957)));
evalcond[7]=((((-1.0)*x1974))+(((-1.0)*py))+(((-1.0)*r10*x1966))+(((0.42)*x1972))+(((0.00043624)*x1970))+(((-0.4)*x1963))+((cj8*cj9*x1974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7, j11, j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1978 = IKatan2WithCheck(IkReal(((-0.4)*r21)),IkReal(((-0.4)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1978.valid){
continue;
}
IkReal x1976=((1.0)*(x1978.value));
if((((((0.16)*(r20*r20)))+(((0.16)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1979=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.16)*(r20*r20)))+(((0.16)*(r21*r21)))))),-1);
if(!x1979.valid){
continue;
}
if( (((x1979.value)*(((((-1.0)*pz))+(((0.42)*cj8))+(((-0.00043624)*cj9*sj8)))))) < -1-IKFAST_SINCOS_THRESH || (((x1979.value)*(((((-1.0)*pz))+(((0.42)*cj8))+(((-0.00043624)*cj9*sj8)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1977=IKasin(((x1979.value)*(((((-1.0)*pz))+(((0.42)*cj8))+(((-0.00043624)*cj9*sj8))))));
j12array[0]=((((-1.0)*x1976))+(((-1.0)*x1977)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1976))+x1977);
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
IkReal j11eval[2];
IkReal x1980=r21*r21;
IkReal x1981=cj12*cj12;
IkReal x1982=((1.0)*sj10);
IkReal x1983=(sj10*x1981);
IkReal x1984=((((-1.0)*x1981*x1982*(r20*r20)))+(((-1.0)*x1980*x1982))+((x1980*x1983))+(((-1.0)*x1982*(r22*r22)))+(((2.0)*cj12*r20*r21*sj10*sj12)));
j11eval[0]=x1984;
j11eval[1]=IKsign(x1984);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x1985=r21*r21;
IkReal x1986=cj12*cj12;
IkReal x1987=((1.0)*cj10);
IkReal x1988=(cj10*x1986);
IkReal x1989=((((-1.0)*x1987*(r22*r22)))+(((-1.0)*x1985*x1987))+(((-1.0)*x1986*x1987*(r20*r20)))+(((2.0)*cj10*cj12*r20*r21*sj12))+((x1985*x1988)));
j11eval[0]=x1989;
j11eval[1]=IKsign(x1989);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x1990=cj9*cj9;
IkReal x1991=cj8*cj8;
IkReal x1992=(cj8*cj9);
IkReal x1993=((1925.54557124519)*sj8);
IkReal x1994=((57256500000.0)*sj8);
IkReal x1995=(x1990*x1991);
j7eval[0]=((926933.436735488)+(((-926931.436735488)*x1991))+x1995+(((-1.0)*x1993))+(((-2.0)*x1992))+(((-1.0)*x1990))+((x1992*x1993)));
j7eval[1]=IKsign(((27562559470418.0)+(((-59470418.0)*x1992))+(((-1.0)*x1994))+(((-29735209.0)*x1990))+((x1992*x1994))+(((-27562500000000.0)*x1991))+(((29735209.0)*x1995))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x1996=cj9*cj9;
IkReal x1997=(cj8*cj9);
IkReal x1998=(r10*sj12);
IkReal x1999=(r00*sj12);
IkReal x2000=((1.0)*sj9);
IkReal x2001=(cj12*r11);
IkReal x2002=(cj12*r01);
IkReal x2003=((1.0)+(((-1.0)*x1996))+((x1996*(cj8*cj8))));
j7eval[0]=x2003;
j7eval[1]=IKsign(x2003);
j7eval[2]=((IKabs((((x1997*x2002))+((sj9*x2001))+((sj9*x1998))+((x1997*x1999)))))+(IKabs((((x1997*x2001))+(((-1.0)*x2000*x2002))+((x1997*x1998))+(((-1.0)*x1999*x2000))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x2004=cj12*cj12;
IkReal x2005=r21*r21;
IkReal x2006=(cj12*r20);
IkReal x2007=((1.0)*cj8);
IkReal x2008=(sj8*sj9);
IkReal x2009=(r21*sj12);
IkReal x2010=((r22*r22)+((x2004*(r20*r20)))+x2005+(((-1.0)*x2004*x2005))+(((-2.0)*x2006*x2009)));
j11eval[0]=x2010;
j11eval[1]=((IKabs(((((-1.0)*r22*x2007))+(((-1.0)*x2008*x2009))+((x2006*x2008)))))+(IKabs((((r22*x2008))+(((-1.0)*x2007*x2009))+((cj8*x2006))))));
j11eval[2]=IKsign(x2010);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x2011=cj9*cj9;
IkReal x2012=cj8*cj8;
IkReal x2013=(cj8*cj9);
IkReal x2014=(sj8*x2013);
IkReal x2015=(x2011*x2012);
j7eval[0]=((1.0)+(((962.772785622593)*x2014))+x2015+(((-1.0)*x2011))+(((-1.0)*x2013)));
j7eval[1]=IKsign(((5453.0)+(((5453.0)*x2015))+(((5250000.0)*x2014))+(((-5453.0)*x2013))+(((-5453.0)*x2011))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j9), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-2.5)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.5)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.5)*py))+IKsqr(((-2.5)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-2.5)*py), ((-2.5)*px));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
evalcond[0]=((IKsin(j7))+(((2.5)*py)));
evalcond[1]=((IKcos(j7))+(((2.5)*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=0;
sj8=0;
cj8=1.0;
j9=0;
sj9=0;
cj9=1.0;
IkReal x2016=(((r10*sj12))+((cj12*r11)));
j11eval[0]=x2016;
j11eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj12*r00))+((r01*sj12))))));
j11eval[2]=IKsign(x2016);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=0;
sj8=0;
cj8=1.0;
j9=0;
sj9=0;
cj9=1.0;
IkReal x2017=((1.0)*cj12);
IkReal x2018=((((-1.0)*r11*x2017))+(((-1.0)*r10*sj12)));
j11eval[0]=x2018;
j11eval[1]=IKsign(x2018);
j11eval[2]=((IKabs((r22*sj7)))+(IKabs((((r21*sj12*sj7))+(((-1.0)*r20*sj7*x2017))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=0;
sj8=0;
cj8=1.0;
j9=0;
sj9=0;
cj9=1.0;
IkReal x2019=cj12*cj12;
IkReal x2020=r21*r21;
IkReal x2021=(r21*sj12);
IkReal x2022=(cj12*r20);
IkReal x2023=(((x2019*x2020))+(((2.0)*x2021*x2022))+(((-1.0)*x2020))+(((-1.0)*(r22*r22)))+(((-1.0)*x2019*(r20*r20))));
j11eval[0]=x2023;
j11eval[1]=IKsign(x2023);
j11eval[2]=((IKabs(r22))+(IKabs((x2021+(((-1.0)*x2022))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2024=cj12*cj12;
IkReal x2025=r21*r21;
IkReal x2026=(r21*sj12);
IkReal x2027=(cj12*r20);
CheckValue<IkReal> x2028=IKPowWithIntegerCheck(IKsign((((x2024*x2025))+(((-1.0)*x2025))+(((-1.0)*(r22*r22)))+(((-1.0)*x2024*(r20*r20)))+(((2.0)*x2026*x2027)))),-1);
if(!x2028.valid){
continue;
}
CheckValue<IkReal> x2029 = IKatan2WithCheck(IkReal(r22),IkReal((x2026+(((-1.0)*x2027)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2029.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2028.value)))+(x2029.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2030=IKsin(j11);
IkReal x2031=IKcos(j11);
IkReal x2032=(cj12*x2030);
IkReal x2033=(sj12*x2031);
IkReal x2034=((1.0)*cj12*x2031);
IkReal x2035=((1.0)*sj12*x2030);
evalcond[0]=(((r22*x2031))+((r20*x2032))+(((-1.0)*r21*x2035)));
evalcond[1]=(((r01*x2033))+(((-1.0)*r00*x2034))+((r02*x2030)));
evalcond[2]=(((r12*x2030))+(((-1.0)*r10*x2034))+((r11*x2033)));
evalcond[3]=(sj7+((r00*x2032))+(((-1.0)*r01*x2035))+((r02*x2031)));
evalcond[4]=((1.0)+((r22*x2030))+((r21*x2033))+(((-1.0)*r20*x2034)));
evalcond[5]=(((r10*x2032))+((r12*x2031))+(((-1.0)*r11*x2035))+(((-1.0)*cj7)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2036=((1.0)*cj12);
CheckValue<IkReal> x2037=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2036))+(((-1.0)*r10*sj12)))),-1);
if(!x2037.valid){
continue;
}
CheckValue<IkReal> x2038 = IKatan2WithCheck(IkReal((r22*sj7)),IkReal(((((-1.0)*r20*sj7*x2036))+((r21*sj12*sj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2038.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2037.value)))+(x2038.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2039=IKsin(j11);
IkReal x2040=IKcos(j11);
IkReal x2041=(cj12*x2039);
IkReal x2042=(sj12*x2040);
IkReal x2043=((1.0)*cj12*x2040);
IkReal x2044=((1.0)*sj12*x2039);
evalcond[0]=(((r22*x2040))+((r20*x2041))+(((-1.0)*r21*x2044)));
evalcond[1]=(((r02*x2039))+((r01*x2042))+(((-1.0)*r00*x2043)));
evalcond[2]=(((r12*x2039))+(((-1.0)*r10*x2043))+((r11*x2042)));
evalcond[3]=(sj7+((r02*x2040))+(((-1.0)*r01*x2044))+((r00*x2041)));
evalcond[4]=((1.0)+((r22*x2039))+((r21*x2042))+(((-1.0)*r20*x2043)));
evalcond[5]=(((r12*x2040))+((r10*x2041))+(((-1.0)*r11*x2044))+(((-1.0)*cj7)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2045 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r00))+((r01*sj12)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2045.valid){
continue;
}
CheckValue<IkReal> x2046=IKPowWithIntegerCheck(IKsign((((r10*sj12))+((cj12*r11)))),-1);
if(!x2046.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2045.value)+(((1.5707963267949)*(x2046.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2047=IKsin(j11);
IkReal x2048=IKcos(j11);
IkReal x2049=(cj12*x2047);
IkReal x2050=(sj12*x2048);
IkReal x2051=((1.0)*cj12*x2048);
IkReal x2052=((1.0)*sj12*x2047);
evalcond[0]=(((r22*x2048))+((r20*x2049))+(((-1.0)*r21*x2052)));
evalcond[1]=(((r01*x2050))+(((-1.0)*r00*x2051))+((r02*x2047)));
evalcond[2]=(((r11*x2050))+(((-1.0)*r10*x2051))+((r12*x2047)));
evalcond[3]=(sj7+(((-1.0)*r01*x2052))+((r02*x2048))+((r00*x2049)));
evalcond[4]=((1.0)+((r22*x2047))+(((-1.0)*r20*x2051))+((r21*x2050)));
evalcond[5]=(((r12*x2048))+(((-1.0)*r11*x2052))+((r10*x2049))+(((-1.0)*cj7)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j9), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((2.38342796813528)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.38342796813528)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.38342796813528)*py))+IKsqr(((2.38342796813528)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((2.38342796813528)*py), ((2.38342796813528)*px));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
evalcond[0]=((((0.41956376)*(IKcos(j7))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.41956376)*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j9=0;
sj9=0;
cj9=1.0;
IkReal x2053=((1.0)*cj12);
IkReal x2054=((((-1.0)*r11*x2053))+(((-1.0)*r10*sj12)));
j11eval[0]=x2054;
j11eval[1]=IKsign(x2054);
j11eval[2]=((IKabs((r22*sj7)))+(IKabs((((r21*sj12*sj7))+(((-1.0)*r20*sj7*x2053))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j9=0;
sj9=0;
cj9=1.0;
IkReal x2055=cj12*cj12;
IkReal x2056=(r01*r21);
IkReal x2057=(cj12*r20);
IkReal x2058=(r21*sj12);
IkReal x2059=((((-1.0)*r02*r22))+((x2055*x2056))+(((-1.0)*x2056))+((cj12*r00*x2058))+(((-1.0)*r00*r20*x2055))+((r01*sj12*x2057)));
j11eval[0]=x2059;
j11eval[1]=IKsign(x2059);
j11eval[2]=((IKabs(((((-1.0)*cj7*x2057))+((cj7*x2058)))))+(IKabs((cj7*r22))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j9=0;
sj9=0;
cj9=1.0;
IkReal x2060=cj12*cj12;
IkReal x2061=(r11*r21);
IkReal x2062=(r21*sj12);
IkReal x2063=(cj12*r20);
IkReal x2064=((((-1.0)*r10*r20*x2060))+(((-1.0)*r12*r22))+(((-1.0)*x2061))+((cj12*r10*x2062))+((x2060*x2061))+((r11*sj12*x2063)));
j11eval[0]=x2064;
j11eval[1]=((IKabs((r22*sj7)))+(IKabs((((sj7*x2062))+(((-1.0)*sj7*x2063))))));
j11eval[2]=IKsign(x2064);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2065=cj12*cj12;
IkReal x2066=(r21*sj12);
IkReal x2067=(cj12*r20);
IkReal x2068=(r11*r21);
CheckValue<IkReal> x2069=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x2065))+(((-1.0)*r12*r22))+(((-1.0)*x2068))+((cj12*r10*x2066))+((r11*sj12*x2067))+((x2065*x2068)))),-1);
if(!x2069.valid){
continue;
}
CheckValue<IkReal> x2070 = IKatan2WithCheck(IkReal((r22*sj7)),IkReal((((sj7*x2066))+(((-1.0)*sj7*x2067)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2070.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2069.value)))+(x2070.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2071=IKsin(j11);
IkReal x2072=IKcos(j11);
IkReal x2073=(r21*sj12);
IkReal x2074=(cj12*x2071);
IkReal x2075=((1.0)*x2071);
IkReal x2076=(sj12*x2072);
IkReal x2077=((1.0)*cj12*x2072);
evalcond[0]=(((r22*x2072))+((r20*x2074))+(((-1.0)*x2073*x2075)));
evalcond[1]=(((r22*x2071))+(((-1.0)*r20*x2077))+((x2072*x2073)));
evalcond[2]=(sj7+((r02*x2072))+((r00*x2074))+(((-1.0)*r01*sj12*x2075)));
evalcond[3]=(cj7+((r02*x2071))+((r01*x2076))+(((-1.0)*r00*x2077)));
evalcond[4]=((((-1.0)*r10*x2077))+sj7+((r12*x2071))+((r11*x2076)));
evalcond[5]=(((r12*x2072))+((r10*x2074))+(((-1.0)*r11*sj12*x2075))+(((-1.0)*cj7)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2078=cj12*cj12;
IkReal x2079=(r01*r21);
IkReal x2080=(r21*sj12);
IkReal x2081=(cj12*r20);
CheckValue<IkReal> x2082=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*x2079))+(((-1.0)*r00*r20*x2078))+((cj12*r00*x2080))+((r01*sj12*x2081))+((x2078*x2079)))),-1);
if(!x2082.valid){
continue;
}
CheckValue<IkReal> x2083 = IKatan2WithCheck(IkReal((cj7*r22)),IkReal(((((-1.0)*cj7*x2081))+((cj7*x2080)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2083.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2082.value)))+(x2083.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2084=IKsin(j11);
IkReal x2085=IKcos(j11);
IkReal x2086=(r21*sj12);
IkReal x2087=(cj12*x2084);
IkReal x2088=((1.0)*x2084);
IkReal x2089=(sj12*x2085);
IkReal x2090=((1.0)*cj12*x2085);
evalcond[0]=(((r20*x2087))+(((-1.0)*x2086*x2088))+((r22*x2085)));
evalcond[1]=((((-1.0)*r20*x2090))+((x2085*x2086))+((r22*x2084)));
evalcond[2]=(((r02*x2085))+sj7+(((-1.0)*r01*sj12*x2088))+((r00*x2087)));
evalcond[3]=(((r02*x2084))+cj7+((r01*x2089))+(((-1.0)*r00*x2090)));
evalcond[4]=(sj7+(((-1.0)*r10*x2090))+((r11*x2089))+((r12*x2084)));
evalcond[5]=((((-1.0)*r11*sj12*x2088))+((r10*x2087))+(((-1.0)*cj7))+((r12*x2085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2091=((1.0)*cj12);
CheckValue<IkReal> x2092=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2091))+(((-1.0)*r10*sj12)))),-1);
if(!x2092.valid){
continue;
}
CheckValue<IkReal> x2093 = IKatan2WithCheck(IkReal((r22*sj7)),IkReal((((r21*sj12*sj7))+(((-1.0)*r20*sj7*x2091)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2093.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2092.value)))+(x2093.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2094=IKsin(j11);
IkReal x2095=IKcos(j11);
IkReal x2096=(r21*sj12);
IkReal x2097=(cj12*x2094);
IkReal x2098=((1.0)*x2094);
IkReal x2099=(sj12*x2095);
IkReal x2100=((1.0)*cj12*x2095);
evalcond[0]=(((r20*x2097))+(((-1.0)*x2096*x2098))+((r22*x2095)));
evalcond[1]=(((r22*x2094))+(((-1.0)*r20*x2100))+((x2095*x2096)));
evalcond[2]=((((-1.0)*r01*sj12*x2098))+sj7+((r00*x2097))+((r02*x2095)));
evalcond[3]=(cj7+((r01*x2099))+(((-1.0)*r00*x2100))+((r02*x2094)));
evalcond[4]=((((-1.0)*r10*x2100))+sj7+((r12*x2094))+((r11*x2099)));
evalcond[5]=(((r10*x2097))+((r12*x2095))+(((-1.0)*r11*sj12*x2098))+(((-1.0)*cj7)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j9, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((2.38342796813528)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.38342796813528)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.38342796813528)*py))+IKsqr(((2.38342796813528)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((2.38342796813528)*py), ((2.38342796813528)*px));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
evalcond[0]=((((0.41956376)*(IKcos(j7))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.41956376)*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j9=3.14159265358979;
sj9=0;
cj9=-1.0;
IkReal x2101=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x2101;
j11eval[1]=((IKabs(((((-1.0)*cj12*cj7*r20))+((cj7*r21*sj12)))))+(IKabs((cj7*r22))));
j11eval[2]=IKsign(x2101);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j9=3.14159265358979;
sj9=0;
cj9=-1.0;
IkReal x2102=cj12*cj12;
IkReal x2103=(r01*r21);
IkReal x2104=(cj12*r20);
IkReal x2105=(r21*sj12);
IkReal x2106=((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x2102))+((x2102*x2103))+((cj12*r00*x2105))+((r01*sj12*x2104))+(((-1.0)*x2103)));
j11eval[0]=x2106;
j11eval[1]=IKsign(x2106);
j11eval[2]=((IKabs((cj7*r22)))+(IKabs(((((-1.0)*cj7*x2104))+((cj7*x2105))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j9=3.14159265358979;
sj9=0;
cj9=-1.0;
IkReal x2107=cj12*cj12;
IkReal x2108=(r11*r21);
IkReal x2109=(r21*sj12);
IkReal x2110=(cj12*r20);
IkReal x2111=((((-1.0)*r12*r22))+(((-1.0)*r10*r20*x2107))+((cj12*r10*x2109))+((x2107*x2108))+(((-1.0)*x2108))+((r11*sj12*x2110)));
j11eval[0]=x2111;
j11eval[1]=((IKabs((r22*sj7)))+(IKabs(((((-1.0)*sj7*x2110))+((sj7*x2109))))));
j11eval[2]=IKsign(x2111);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2112=cj12*cj12;
IkReal x2113=(r21*sj12);
IkReal x2114=(cj12*r20);
IkReal x2115=(r11*r21);
CheckValue<IkReal> x2116=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x2112))+(((-1.0)*r12*r22))+((r11*sj12*x2114))+((cj12*r10*x2113))+(((-1.0)*x2115))+((x2112*x2115)))),-1);
if(!x2116.valid){
continue;
}
CheckValue<IkReal> x2117 = IKatan2WithCheck(IkReal((r22*sj7)),IkReal((((sj7*x2113))+(((-1.0)*sj7*x2114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2117.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2116.value)))+(x2117.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2118=IKsin(j11);
IkReal x2119=IKcos(j11);
IkReal x2120=(r21*sj12);
IkReal x2121=(cj12*x2118);
IkReal x2122=((1.0)*x2118);
IkReal x2123=(sj12*x2119);
IkReal x2124=((1.0)*cj12*x2119);
evalcond[0]=(((r20*x2121))+(((-1.0)*x2120*x2122))+((r22*x2119)));
evalcond[1]=(((x2119*x2120))+(((-1.0)*r20*x2124))+((r22*x2118)));
evalcond[2]=(((r12*x2119))+cj7+((r10*x2121))+(((-1.0)*r11*sj12*x2122)));
evalcond[3]=(cj7+(((-1.0)*r00*x2124))+((r02*x2118))+((r01*x2123)));
evalcond[4]=(((r12*x2118))+sj7+(((-1.0)*r10*x2124))+((r11*x2123)));
evalcond[5]=((((-1.0)*sj7))+(((-1.0)*r01*sj12*x2122))+((r02*x2119))+((r00*x2121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2125=cj12*cj12;
IkReal x2126=(r01*r21);
IkReal x2127=(r21*sj12);
IkReal x2128=(cj12*r20);
CheckValue<IkReal> x2129 = IKatan2WithCheck(IkReal((cj7*r22)),IkReal((((cj7*x2127))+(((-1.0)*cj7*x2128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2129.valid){
continue;
}
CheckValue<IkReal> x2130=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r20*x2125))+((x2125*x2126))+(((-1.0)*r02*r22))+((cj12*r00*x2127))+(((-1.0)*x2126))+((r01*sj12*x2128)))),-1);
if(!x2130.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2129.value)+(((1.5707963267949)*(x2130.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2131=IKsin(j11);
IkReal x2132=IKcos(j11);
IkReal x2133=(r21*sj12);
IkReal x2134=(cj12*x2131);
IkReal x2135=((1.0)*x2131);
IkReal x2136=(sj12*x2132);
IkReal x2137=((1.0)*cj12*x2132);
evalcond[0]=(((r22*x2132))+(((-1.0)*x2133*x2135))+((r20*x2134)));
evalcond[1]=(((r22*x2131))+(((-1.0)*r20*x2137))+((x2132*x2133)));
evalcond[2]=(((r12*x2132))+(((-1.0)*r11*sj12*x2135))+cj7+((r10*x2134)));
evalcond[3]=(((r02*x2131))+cj7+(((-1.0)*r00*x2137))+((r01*x2136)));
evalcond[4]=(((r12*x2131))+sj7+((r11*x2136))+(((-1.0)*r10*x2137)));
evalcond[5]=((((-1.0)*sj7))+((r02*x2132))+((r00*x2134))+(((-1.0)*r01*sj12*x2135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2138 = IKatan2WithCheck(IkReal((cj7*r22)),IkReal(((((-1.0)*cj12*cj7*r20))+((cj7*r21*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2138.valid){
continue;
}
CheckValue<IkReal> x2139=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x2139.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2138.value)+(((1.5707963267949)*(x2139.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2140=IKsin(j11);
IkReal x2141=IKcos(j11);
IkReal x2142=(r21*sj12);
IkReal x2143=(cj12*x2140);
IkReal x2144=((1.0)*x2140);
IkReal x2145=(sj12*x2141);
IkReal x2146=((1.0)*cj12*x2141);
evalcond[0]=((((-1.0)*x2142*x2144))+((r20*x2143))+((r22*x2141)));
evalcond[1]=(((x2141*x2142))+((r22*x2140))+(((-1.0)*r20*x2146)));
evalcond[2]=(cj7+(((-1.0)*r11*sj12*x2144))+((r10*x2143))+((r12*x2141)));
evalcond[3]=((((-1.0)*r00*x2146))+cj7+((r02*x2140))+((r01*x2145)));
evalcond[4]=(((r11*x2145))+sj7+(((-1.0)*r10*x2146))+((r12*x2140)));
evalcond[5]=((((-1.0)*sj7))+(((-1.0)*r01*sj12*x2144))+((r02*x2141))+((r00*x2143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j9, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j8, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-2.5)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.5)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.5)*py))+IKsqr(((-2.5)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-2.5)*py), ((-2.5)*px));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
evalcond[0]=((IKsin(j7))+(((2.5)*py)));
evalcond[1]=((IKcos(j7))+(((2.5)*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
j9=3.14159265358979;
sj9=0;
cj9=-1.0;
IkReal x2147=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x2147;
j11eval[1]=((IKabs(((((-1.0)*cj12*cj7*r20))+((cj7*r21*sj12)))))+(IKabs((cj7*r22))));
j11eval[2]=IKsign(x2147);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
j9=3.14159265358979;
sj9=0;
cj9=-1.0;
IkReal x2148=((1.0)*cj12);
IkReal x2149=((((-1.0)*r11*x2148))+(((-1.0)*r10*sj12)));
j11eval[0]=x2149;
j11eval[1]=IKsign(x2149);
j11eval[2]=((IKabs(((((-1.0)*r00*x2148))+((r01*sj12)))))+(IKabs(r02)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
j9=3.14159265358979;
sj9=0;
cj9=-1.0;
IkReal x2150=cj12*cj12;
IkReal x2151=r21*r21;
IkReal x2152=(r21*sj12);
IkReal x2153=(cj12*r20);
IkReal x2154=((r22*r22)+x2151+(((-1.0)*x2150*x2151))+((x2150*(r20*r20)))+(((-2.0)*x2152*x2153)));
j11eval[0]=x2154;
j11eval[1]=IKsign(x2154);
j11eval[2]=((IKabs(r22))+(IKabs((x2152+(((-1.0)*x2153))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2155=cj12*cj12;
IkReal x2156=r21*r21;
IkReal x2157=(r21*sj12);
IkReal x2158=(cj12*r20);
CheckValue<IkReal> x2159=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x2157*x2158))+x2156+((x2155*(r20*r20)))+(((-1.0)*x2155*x2156)))),-1);
if(!x2159.valid){
continue;
}
CheckValue<IkReal> x2160 = IKatan2WithCheck(IkReal(r22),IkReal((x2157+(((-1.0)*x2158)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2160.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2159.value)))+(x2160.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2161=IKsin(j11);
IkReal x2162=IKcos(j11);
IkReal x2163=(cj12*r00);
IkReal x2164=((1.0)*x2162);
IkReal x2165=(sj12*x2162);
IkReal x2166=(cj12*x2161);
IkReal x2167=((1.0)*sj12*x2161);
evalcond[0]=((((-1.0)*r21*x2167))+((r20*x2166))+((r22*x2162)));
evalcond[1]=((((-1.0)*x2163*x2164))+((r01*x2165))+((r02*x2161)));
evalcond[2]=(((r12*x2161))+(((-1.0)*cj12*r10*x2164))+((r11*x2165)));
evalcond[3]=(((r12*x2162))+cj7+((r10*x2166))+(((-1.0)*r11*x2167)));
evalcond[4]=((-1.0)+((r21*x2165))+(((-1.0)*cj12*r20*x2164))+((r22*x2161)));
evalcond[5]=((((-1.0)*r01*x2167))+(((-1.0)*sj7))+((x2161*x2163))+((r02*x2162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2168=((1.0)*cj12);
CheckValue<IkReal> x2169 = IKatan2WithCheck(IkReal((((r01*sj12))+(((-1.0)*r00*x2168)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2169.valid){
continue;
}
CheckValue<IkReal> x2170=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2168))+(((-1.0)*r10*sj12)))),-1);
if(!x2170.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2169.value)+(((1.5707963267949)*(x2170.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2171=IKsin(j11);
IkReal x2172=IKcos(j11);
IkReal x2173=(cj12*r00);
IkReal x2174=((1.0)*x2172);
IkReal x2175=(sj12*x2172);
IkReal x2176=(cj12*x2171);
IkReal x2177=((1.0)*sj12*x2171);
evalcond[0]=((((-1.0)*r21*x2177))+((r22*x2172))+((r20*x2176)));
evalcond[1]=(((r01*x2175))+((r02*x2171))+(((-1.0)*x2173*x2174)));
evalcond[2]=(((r11*x2175))+(((-1.0)*cj12*r10*x2174))+((r12*x2171)));
evalcond[3]=(cj7+((r10*x2176))+(((-1.0)*r11*x2177))+((r12*x2172)));
evalcond[4]=((-1.0)+((r22*x2171))+(((-1.0)*cj12*r20*x2174))+((r21*x2175)));
evalcond[5]=((((-1.0)*sj7))+((x2171*x2173))+((r02*x2172))+(((-1.0)*r01*x2177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2178 = IKatan2WithCheck(IkReal((cj7*r22)),IkReal(((((-1.0)*cj12*cj7*r20))+((cj7*r21*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2178.valid){
continue;
}
CheckValue<IkReal> x2179=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x2179.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2178.value)+(((1.5707963267949)*(x2179.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2180=IKsin(j11);
IkReal x2181=IKcos(j11);
IkReal x2182=(cj12*r00);
IkReal x2183=((1.0)*x2181);
IkReal x2184=(sj12*x2181);
IkReal x2185=(cj12*x2180);
IkReal x2186=((1.0)*sj12*x2180);
evalcond[0]=(((r22*x2181))+(((-1.0)*r21*x2186))+((r20*x2185)));
evalcond[1]=(((r02*x2180))+(((-1.0)*x2182*x2183))+((r01*x2184)));
evalcond[2]=((((-1.0)*cj12*r10*x2183))+((r12*x2180))+((r11*x2184)));
evalcond[3]=(cj7+((r12*x2181))+(((-1.0)*r11*x2186))+((r10*x2185)));
evalcond[4]=((-1.0)+((r22*x2180))+((r21*x2184))+(((-1.0)*cj12*r20*x2183)));
evalcond[5]=((((-1.0)*sj7))+((x2180*x2182))+((r02*x2181))+(((-1.0)*r01*x2186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j9), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-2.37848193105333)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.37848193105333)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.37848193105333)*py))+IKsqr(((-2.37848193105333)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-2.37848193105333)*py), ((-2.37848193105333)*px));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
evalcond[0]=((((-0.42043624)*(IKcos(j7))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.42043624)*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j9=0;
sj9=0;
cj9=1.0;
IkReal x2187=((1.0)*cj12);
IkReal x2188=((((-1.0)*r11*x2187))+(((-1.0)*r10*sj12)));
j11eval[0]=x2188;
j11eval[1]=IKsign(x2188);
j11eval[2]=((IKabs((r22*sj7)))+(IKabs((((r21*sj12*sj7))+(((-1.0)*r20*sj7*x2187))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j9=0;
sj9=0;
cj9=1.0;
IkReal x2189=((1.0)*cj12);
IkReal x2190=((((-1.0)*r00*sj12))+(((-1.0)*r01*x2189)));
j11eval[0]=x2190;
j11eval[1]=((IKabs(((((-1.0)*cj7*r20*x2189))+((cj7*r21*sj12)))))+(IKabs((cj7*r22))));
j11eval[2]=IKsign(x2190);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j9=0;
sj9=0;
cj9=1.0;
IkReal x2191=cj12*cj12;
IkReal x2192=(r21*sj12);
IkReal x2193=(r01*r21);
IkReal x2194=((1.0)*cj12*r20);
IkReal x2195=((((-1.0)*cj12*r00*x2192))+(((-1.0)*r01*sj12*x2194))+x2193+(((-1.0)*x2191*x2193))+((r00*r20*x2191))+((r02*r22)));
j11eval[0]=x2195;
j11eval[1]=((IKabs(((((-1.0)*cj7*x2194))+((cj7*x2192)))))+(IKabs((cj7*r22))));
j11eval[2]=IKsign(x2195);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2196=cj12*cj12;
IkReal x2197=(r21*sj12);
IkReal x2198=(r01*r21);
IkReal x2199=((1.0)*cj12*r20);
CheckValue<IkReal> x2200 = IKatan2WithCheck(IkReal((cj7*r22)),IkReal(((((-1.0)*cj7*x2199))+((cj7*x2197)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2200.valid){
continue;
}
CheckValue<IkReal> x2201=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj12*r00*x2197))+(((-1.0)*x2196*x2198))+(((-1.0)*r01*sj12*x2199))+x2198+((r00*r20*x2196))+((r02*r22)))),-1);
if(!x2201.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2200.value)+(((1.5707963267949)*(x2201.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2202=IKsin(j11);
IkReal x2203=IKcos(j11);
IkReal x2204=((1.0)*cj7);
IkReal x2205=(r21*sj12);
IkReal x2206=(cj12*x2202);
IkReal x2207=((1.0)*x2202);
IkReal x2208=(sj12*x2203);
IkReal x2209=((1.0)*cj12*x2203);
evalcond[0]=((((-1.0)*x2205*x2207))+((r20*x2206))+((r22*x2203)));
evalcond[1]=(((x2203*x2205))+(((-1.0)*r20*x2209))+((r22*x2202)));
evalcond[2]=(((r02*x2203))+sj7+((r00*x2206))+(((-1.0)*r01*sj12*x2207)));
evalcond[3]=((((-1.0)*x2204))+((r12*x2203))+(((-1.0)*r11*sj12*x2207))+((r10*x2206)));
evalcond[4]=(((r02*x2202))+((r01*x2208))+(((-1.0)*x2204))+(((-1.0)*r00*x2209)));
evalcond[5]=((((-1.0)*sj7))+((r12*x2202))+(((-1.0)*r10*x2209))+((r11*x2208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2210=((1.0)*cj12);
CheckValue<IkReal> x2211 = IKatan2WithCheck(IkReal((cj7*r22)),IkReal(((((-1.0)*cj7*r20*x2210))+((cj7*r21*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2211.valid){
continue;
}
CheckValue<IkReal> x2212=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj12))+(((-1.0)*r01*x2210)))),-1);
if(!x2212.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2211.value)+(((1.5707963267949)*(x2212.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2213=IKsin(j11);
IkReal x2214=IKcos(j11);
IkReal x2215=((1.0)*cj7);
IkReal x2216=(r21*sj12);
IkReal x2217=(cj12*x2213);
IkReal x2218=((1.0)*x2213);
IkReal x2219=(sj12*x2214);
IkReal x2220=((1.0)*cj12*x2214);
evalcond[0]=(((r20*x2217))+(((-1.0)*x2216*x2218))+((r22*x2214)));
evalcond[1]=((((-1.0)*r20*x2220))+((x2214*x2216))+((r22*x2213)));
evalcond[2]=(sj7+((r00*x2217))+(((-1.0)*r01*sj12*x2218))+((r02*x2214)));
evalcond[3]=((((-1.0)*x2215))+((r12*x2214))+(((-1.0)*r11*sj12*x2218))+((r10*x2217)));
evalcond[4]=(((r01*x2219))+(((-1.0)*x2215))+(((-1.0)*r00*x2220))+((r02*x2213)));
evalcond[5]=((((-1.0)*r10*x2220))+(((-1.0)*sj7))+((r12*x2213))+((r11*x2219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2221=((1.0)*cj12);
CheckValue<IkReal> x2222=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2221))+(((-1.0)*r10*sj12)))),-1);
if(!x2222.valid){
continue;
}
CheckValue<IkReal> x2223 = IKatan2WithCheck(IkReal((r22*sj7)),IkReal((((r21*sj12*sj7))+(((-1.0)*r20*sj7*x2221)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2223.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2222.value)))+(x2223.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2224=IKsin(j11);
IkReal x2225=IKcos(j11);
IkReal x2226=((1.0)*cj7);
IkReal x2227=(r21*sj12);
IkReal x2228=(cj12*x2224);
IkReal x2229=((1.0)*x2224);
IkReal x2230=(sj12*x2225);
IkReal x2231=((1.0)*cj12*x2225);
evalcond[0]=(((r22*x2225))+(((-1.0)*x2227*x2229))+((r20*x2228)));
evalcond[1]=((((-1.0)*r20*x2231))+((r22*x2224))+((x2225*x2227)));
evalcond[2]=(sj7+((r02*x2225))+(((-1.0)*r01*sj12*x2229))+((r00*x2228)));
evalcond[3]=(((r12*x2225))+((r10*x2228))+(((-1.0)*x2226))+(((-1.0)*r11*sj12*x2229)));
evalcond[4]=(((r02*x2224))+(((-1.0)*r00*x2231))+(((-1.0)*x2226))+((r01*x2230)));
evalcond[5]=((((-1.0)*r10*x2231))+((r12*x2224))+(((-1.0)*sj7))+((r11*x2230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j9, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-2.37848193105333)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.37848193105333)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.37848193105333)*py))+IKsqr(((-2.37848193105333)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-2.37848193105333)*py), ((-2.37848193105333)*px));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
evalcond[0]=((((-0.42043624)*(IKcos(j7))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.42043624)*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j9=3.14159265358979;
sj9=0;
cj9=-1.0;
IkReal x2232=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x2232;
j11eval[1]=((IKabs(((((-1.0)*cj12*cj7*r20))+((cj7*r21*sj12)))))+(IKabs((cj7*r22))));
j11eval[2]=IKsign(x2232);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j9=3.14159265358979;
sj9=0;
cj9=-1.0;
IkReal x2233=(((r10*sj12))+((cj12*r11)));
j11eval[0]=x2233;
j11eval[1]=((IKabs((((r21*sj12*sj7))+(((-1.0)*cj12*r20*sj7)))))+(IKabs((r22*sj7))));
j11eval[2]=IKsign(x2233);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j9=3.14159265358979;
sj9=0;
cj9=-1.0;
IkReal x2234=cj12*cj12;
IkReal x2235=(r21*sj12);
IkReal x2236=(r01*r21);
IkReal x2237=((1.0)*cj12*r20);
IkReal x2238=(x2236+(((-1.0)*x2234*x2236))+(((-1.0)*r01*sj12*x2237))+((r00*r20*x2234))+(((-1.0)*cj12*r00*x2235))+((r02*r22)));
j11eval[0]=x2238;
j11eval[1]=((IKabs((((cj7*x2235))+(((-1.0)*cj7*x2237)))))+(IKabs((cj7*r22))));
j11eval[2]=IKsign(x2238);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2239=cj12*cj12;
IkReal x2240=(r21*sj12);
IkReal x2241=(r01*r21);
IkReal x2242=((1.0)*cj12*r20);
CheckValue<IkReal> x2243=IKPowWithIntegerCheck(IKsign((x2241+((r00*r20*x2239))+(((-1.0)*x2239*x2241))+(((-1.0)*r01*sj12*x2242))+(((-1.0)*cj12*r00*x2240))+((r02*r22)))),-1);
if(!x2243.valid){
continue;
}
CheckValue<IkReal> x2244 = IKatan2WithCheck(IkReal((cj7*r22)),IkReal((((cj7*x2240))+(((-1.0)*cj7*x2242)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2244.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2243.value)))+(x2244.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2245=IKsin(j11);
IkReal x2246=IKcos(j11);
IkReal x2247=((1.0)*sj7);
IkReal x2248=(r21*sj12);
IkReal x2249=(cj12*x2245);
IkReal x2250=((1.0)*x2245);
IkReal x2251=(sj12*x2246);
IkReal x2252=((1.0)*cj12*x2246);
evalcond[0]=(((r20*x2249))+(((-1.0)*x2248*x2250))+((r22*x2246)));
evalcond[1]=(((x2246*x2248))+((r22*x2245))+(((-1.0)*r20*x2252)));
evalcond[2]=((((-1.0)*r11*sj12*x2250))+((r10*x2249))+cj7+((r12*x2246)));
evalcond[3]=((((-1.0)*x2247))+((r00*x2249))+(((-1.0)*r01*sj12*x2250))+((r02*x2246)));
evalcond[4]=((((-1.0)*r00*x2252))+((r01*x2251))+(((-1.0)*cj7))+((r02*x2245)));
evalcond[5]=((((-1.0)*x2247))+(((-1.0)*r10*x2252))+((r12*x2245))+((r11*x2251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2253 = IKatan2WithCheck(IkReal((r22*sj7)),IkReal((((r21*sj12*sj7))+(((-1.0)*cj12*r20*sj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2253.valid){
continue;
}
CheckValue<IkReal> x2254=IKPowWithIntegerCheck(IKsign((((r10*sj12))+((cj12*r11)))),-1);
if(!x2254.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2253.value)+(((1.5707963267949)*(x2254.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2255=IKsin(j11);
IkReal x2256=IKcos(j11);
IkReal x2257=((1.0)*sj7);
IkReal x2258=(r21*sj12);
IkReal x2259=(cj12*x2255);
IkReal x2260=((1.0)*x2255);
IkReal x2261=(sj12*x2256);
IkReal x2262=((1.0)*cj12*x2256);
evalcond[0]=((((-1.0)*x2258*x2260))+((r20*x2259))+((r22*x2256)));
evalcond[1]=(((x2256*x2258))+(((-1.0)*r20*x2262))+((r22*x2255)));
evalcond[2]=(((r10*x2259))+cj7+((r12*x2256))+(((-1.0)*r11*sj12*x2260)));
evalcond[3]=((((-1.0)*x2257))+(((-1.0)*r01*sj12*x2260))+((r00*x2259))+((r02*x2256)));
evalcond[4]=(((r01*x2261))+(((-1.0)*r00*x2262))+(((-1.0)*cj7))+((r02*x2255)));
evalcond[5]=(((r12*x2255))+(((-1.0)*x2257))+((r11*x2261))+(((-1.0)*r10*x2262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2263 = IKatan2WithCheck(IkReal((cj7*r22)),IkReal(((((-1.0)*cj12*cj7*r20))+((cj7*r21*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2263.valid){
continue;
}
CheckValue<IkReal> x2264=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x2264.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2263.value)+(((1.5707963267949)*(x2264.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2265=IKsin(j11);
IkReal x2266=IKcos(j11);
IkReal x2267=((1.0)*sj7);
IkReal x2268=(r21*sj12);
IkReal x2269=(cj12*x2265);
IkReal x2270=((1.0)*x2265);
IkReal x2271=(sj12*x2266);
IkReal x2272=((1.0)*cj12*x2266);
evalcond[0]=(((r22*x2266))+(((-1.0)*x2268*x2270))+((r20*x2269)));
evalcond[1]=(((r22*x2265))+(((-1.0)*r20*x2272))+((x2266*x2268)));
evalcond[2]=(cj7+((r10*x2269))+((r12*x2266))+(((-1.0)*r11*sj12*x2270)));
evalcond[3]=(((r00*x2269))+(((-1.0)*r01*sj12*x2270))+((r02*x2266))+(((-1.0)*x2267)));
evalcond[4]=(((r01*x2271))+(((-1.0)*r00*x2272))+((r02*x2265))+(((-1.0)*cj7)));
evalcond[5]=(((r11*x2271))+((r12*x2265))+(((-1.0)*r10*x2272))+(((-1.0)*x2267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7, j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x2273=cj9*cj9;
IkReal x2274=(r10*sj12);
IkReal x2275=(cj12*r11);
IkReal x2276=((5250000.0)*sj8);
IkReal x2277=(cj8*cj9);
IkReal x2278=((12500000.0)*px);
IkReal x2279=((5453.0)*sj9);
IkReal x2280=((5453.0)*x2277);
IkReal x2281=((5453.0)*x2273);
IkReal x2282=((5000000.0)*cj12*r01);
IkReal x2283=((5000000.0)*r00*sj12);
CheckValue<IkReal> x2284=IKPowWithIntegerCheck(IKsign(((5453.0)+(((-1.0)*x2280))+(((-1.0)*x2281))+((x2276*x2277))+((x2281*(cj8*cj8))))),-1);
if(!x2284.valid){
continue;
}
CheckValue<IkReal> x2285 = IKatan2WithCheck(IkReal(((((-1.0)*sj9*x2283))+(((-1.0)*sj9*x2282))+((x2275*x2280))+((x2274*x2280))+(((-5453.0)*x2274))+(((-5453.0)*x2275))+(((-1.0)*sj9*x2278))+((x2274*x2276))+((x2275*x2276)))),IkReal((((x2277*x2283))+((x2277*x2282))+((x2277*x2278))+((x2274*x2279))+((x2275*x2279)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2285.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2284.value)))+(x2285.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x2286=IKcos(j7);
IkReal x2287=IKsin(j7);
IkReal x2288=((1.0)*sj12);
IkReal x2289=((0.4)*sj12);
IkReal x2290=((0.42)*sj8);
IkReal x2291=(cj12*r01);
IkReal x2292=(cj8*cj9);
IkReal x2293=(cj12*r11);
IkReal x2294=((0.00043624)*x2286);
IkReal x2295=((0.00043624)*x2287);
evalcond[0]=(((sj9*x2286))+(((-1.0)*r10*x2288))+(((-1.0)*x2293))+((x2287*x2292)));
evalcond[1]=((((-1.0)*x2291))+(((-1.0)*sj9*x2287))+(((-1.0)*r00*x2288))+((x2286*x2292)));
evalcond[2]=((((-1.0)*px))+(((-0.4)*x2291))+(((-1.0)*r00*x2289))+((x2286*x2290))+(((-1.0)*x2294))+((x2292*x2294))+(((-1.0)*sj9*x2295)));
evalcond[3]=((((-1.0)*r10*x2289))+((x2287*x2290))+(((-1.0)*py))+(((-0.4)*x2293))+((sj9*x2294))+(((-1.0)*x2295))+((x2292*x2295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x2296=(cj7*sj8);
IkReal x2297=((1.0)*cj8);
IkReal x2298=(((r10*sj12))+((cj12*r11)));
j11eval[0]=x2298;
j11eval[1]=IKsign(x2298);
j11eval[2]=((IKabs((((cj12*r20*x2296))+(((-1.0)*r21*sj12*x2296))+(((-1.0)*cj12*r00*x2297))+((cj8*r01*sj12)))))+(IKabs((((r22*x2296))+(((-1.0)*r02*x2297))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x2299=((1.0)*cj12);
IkReal x2300=(sj7*sj8);
IkReal x2301=((1.0)*sj12);
IkReal x2302=((((-1.0)*r00*x2301))+(((-1.0)*r01*x2299)));
j11eval[0]=x2302;
j11eval[1]=((IKabs((((cj12*r20*x2300))+(((-1.0)*r21*x2300*x2301))+(((-1.0)*cj8*r10*x2299))+((cj8*r11*sj12)))))+(IKabs((((r22*x2300))+(((-1.0)*cj8*r12))))));
j11eval[2]=IKsign(x2302);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x2303=(sj12*sj8);
IkReal x2304=(cj7*sj8);
IkReal x2305=((1.0)*sj7*sj8);
IkReal x2306=((((-1.0)*cj12*r21))+(((-1.0)*r20*sj12)));
j11eval[0]=x2306;
j11eval[1]=((IKabs((((r12*x2304))+(((-1.0)*r02*x2305)))))+(IKabs((((cj12*r10*x2304))+(((-1.0)*cj7*r11*x2303))+((r01*sj7*x2303))+(((-1.0)*cj12*r00*x2305))))));
j11eval[2]=IKsign(x2306);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2307=((-1.0)*r20);
IkReal x2309 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2309)==0){
continue;
}
IkReal x2308=pow(x2309,-0.5);
CheckValue<IkReal> x2310 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2307),IKFAST_ATAN2_MAGTHRESH);
if(!x2310.valid){
continue;
}
IkReal gconst24=((-1.0)*(x2310.value));
IkReal gconst25=(r21*x2308);
IkReal gconst26=(x2307*x2308);
CheckValue<IkReal> x2311 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2311.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j12+(x2311.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2312=(cj7*sj8);
IkReal x2313=((1.0)*cj8);
CheckValue<IkReal> x2314 = IKatan2WithCheck(IkReal((((cj8*gconst25*r01))+((gconst26*r20*x2312))+(((-1.0)*gconst26*r00*x2313))+(((-1.0)*gconst25*r21*x2312)))),IkReal((((r22*x2312))+(((-1.0)*r02*x2313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2314.valid){
continue;
}
CheckValue<IkReal> x2315=IKPowWithIntegerCheck(IKsign((((gconst25*r10))+((gconst26*r11)))),-1);
if(!x2315.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2314.value)+(((1.5707963267949)*(x2315.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2316=IKcos(j11);
IkReal x2317=IKsin(j11);
IkReal x2318=(cj8*sj9);
IkReal x2319=(gconst26*x2317);
IkReal x2320=(gconst25*x2316);
IkReal x2321=((1.0)*gconst26*x2316);
IkReal x2322=((1.0)*gconst25*x2317);
evalcond[0]=(cj8+((r21*x2320))+((r22*x2317))+(((-1.0)*r20*x2321)));
evalcond[1]=((((-1.0)*r00*x2321))+((r01*x2320))+((cj7*sj8))+((r02*x2317)));
evalcond[2]=(((r11*x2320))+((r12*x2317))+(((-1.0)*r10*x2321))+((sj7*sj8)));
evalcond[3]=((((-1.0)*sj8*sj9))+((r22*x2316))+((r20*x2319))+(((-1.0)*r21*x2322)));
evalcond[4]=(((cj9*sj7))+((r00*x2319))+(((-1.0)*r01*x2322))+((cj7*x2318))+((r02*x2316)));
evalcond[5]=(((sj7*x2318))+((r10*x2319))+(((-1.0)*cj7*cj9))+((r12*x2316))+(((-1.0)*r11*x2322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2323=((-1.0)*r21);
IkReal x2325 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2325)==0){
continue;
}
IkReal x2324=pow(x2325,-0.5);
CheckValue<IkReal> x2326 = IKatan2WithCheck(IkReal(x2323),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2326.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x2326.value))));
IkReal gconst28=(x2323*x2324);
IkReal gconst29=((1.0)*r20*x2324);
CheckValue<IkReal> x2327 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2327.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12+(x2327.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2328=((1.0)*cj8);
IkReal x2329=(cj7*sj8);
CheckValue<IkReal> x2330=IKPowWithIntegerCheck(IKsign((((gconst28*r10))+((gconst29*r11)))),-1);
if(!x2330.valid){
continue;
}
CheckValue<IkReal> x2331 = IKatan2WithCheck(IkReal(((((-1.0)*gconst29*r00*x2328))+(((-1.0)*gconst28*r21*x2329))+((gconst29*r20*x2329))+((cj8*gconst28*r01)))),IkReal((((r22*x2329))+(((-1.0)*r02*x2328)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2331.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2330.value)))+(x2331.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2332=IKcos(j11);
IkReal x2333=IKsin(j11);
IkReal x2334=(cj8*sj9);
IkReal x2335=(gconst29*x2333);
IkReal x2336=(gconst28*x2332);
IkReal x2337=((1.0)*gconst29*x2332);
IkReal x2338=((1.0)*gconst28*x2333);
evalcond[0]=(((r21*x2336))+cj8+((r22*x2333))+(((-1.0)*r20*x2337)));
evalcond[1]=(((r02*x2333))+((r01*x2336))+(((-1.0)*r00*x2337))+((cj7*sj8)));
evalcond[2]=((((-1.0)*r10*x2337))+((r12*x2333))+((r11*x2336))+((sj7*sj8)));
evalcond[3]=((((-1.0)*sj8*sj9))+((r22*x2332))+(((-1.0)*r21*x2338))+((r20*x2335)));
evalcond[4]=(((r02*x2332))+((cj9*sj7))+(((-1.0)*r01*x2338))+((r00*x2335))+((cj7*x2334)));
evalcond[5]=((((-1.0)*cj7*cj9))+((sj7*x2334))+((r12*x2332))+(((-1.0)*r11*x2338))+((r10*x2335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=1.0;
j8=0;
IkReal x2339=(((r10*sj12))+((cj12*r11)));
j11eval[0]=x2339;
j11eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj12*r00))+((r01*sj12))))));
j11eval[2]=IKsign(x2339);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=1.0;
j8=0;
IkReal x2340=((1.0)*cj12);
IkReal x2341=((((-1.0)*r01*x2340))+(((-1.0)*r00*sj12)));
j11eval[0]=x2341;
j11eval[1]=IKsign(x2341);
j11eval[2]=((IKabs(r12))+(IKabs((((r11*sj12))+(((-1.0)*r10*x2340))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=1.0;
j8=0;
IkReal x2342=cj12*cj12;
IkReal x2343=r21*r21;
IkReal x2344=(r21*sj12);
IkReal x2345=(cj12*r20);
IkReal x2346=((((-1.0)*x2343))+(((-1.0)*x2342*(r20*r20)))+(((2.0)*x2344*x2345))+(((-1.0)*(r22*r22)))+((x2342*x2343)));
j11eval[0]=x2346;
j11eval[1]=IKsign(x2346);
j11eval[2]=((IKabs((x2344+(((-1.0)*x2345)))))+(IKabs(r22)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[2];
IkReal x2347=((-1.0)*px);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=1.0;
j8=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2347);
rxp1_1=(px*r21);
rxp1_2=(r11*x2347);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[1]=((((-1.0)*cj12*r20))+((r21*sj12)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x2348=((-1.0)*px);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=1.0;
j8=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2348);
rxp1_1=(px*r21);
rxp1_2=(r11*x2348);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[1]=r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2349=((1.0)*sj7);
CheckValue<IkReal> x2350=IKPowWithIntegerCheck(((((-1.0)*r11*sj12))+((cj12*r10))),-1);
if(!x2350.valid){
continue;
}
CheckValue<IkReal> x2351=IKPowWithIntegerCheck(r02,-1);
if(!x2351.valid){
continue;
}
if( IKabs(((x2350.value)*(((((-1.0)*sj9*x2349))+((cj7*cj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2351.value)*(((((-1.0)*cj9*x2349))+(((-1.0)*cj7*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2350.value)*(((((-1.0)*sj9*x2349))+((cj7*cj9))))))+IKsqr(((x2351.value)*(((((-1.0)*cj9*x2349))+(((-1.0)*cj7*sj9))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x2350.value)*(((((-1.0)*sj9*x2349))+((cj7*cj9))))), ((x2351.value)*(((((-1.0)*cj9*x2349))+(((-1.0)*cj7*sj9))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2352=IKsin(j11);
IkReal x2353=IKcos(j11);
IkReal x2354=(cj12*x2352);
IkReal x2355=(sj12*x2353);
IkReal x2356=((1.0)*cj12*x2353);
IkReal x2357=((1.0)*sj12*x2352);
evalcond[0]=(r02*x2352);
evalcond[1]=(((cj9*sj7))+((cj7*sj9))+((r02*x2353)));
evalcond[2]=((((-1.0)*r21*x2357))+((r20*x2354)));
evalcond[3]=(((r11*x2355))+(((-1.0)*r10*x2356)));
evalcond[4]=((1.0)+(((-1.0)*r20*x2356))+((r21*x2355)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r10*x2354))+(((-1.0)*r11*x2357))+((sj7*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2358=IKPowWithIntegerCheck(((((-1.0)*r11*sj12))+((cj12*r10))),-1);
if(!x2358.valid){
continue;
}
CheckValue<IkReal> x2359=IKPowWithIntegerCheck(((((-1.0)*cj12*r20))+((r21*sj12))),-1);
if(!x2359.valid){
continue;
}
if( IKabs(((x2358.value)*((((cj7*cj9))+(((-1.0)*sj7*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x2359.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2358.value)*((((cj7*cj9))+(((-1.0)*sj7*sj9))))))+IKsqr(((-1.0)*(x2359.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x2358.value)*((((cj7*cj9))+(((-1.0)*sj7*sj9))))), ((-1.0)*(x2359.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2360=IKsin(j11);
IkReal x2361=IKcos(j11);
IkReal x2362=(cj12*x2360);
IkReal x2363=(sj12*x2361);
IkReal x2364=((1.0)*cj12*x2361);
IkReal x2365=((1.0)*sj12*x2360);
evalcond[0]=(r02*x2360);
evalcond[1]=(((r02*x2361))+((cj9*sj7))+((cj7*sj9)));
evalcond[2]=(((r20*x2362))+(((-1.0)*r21*x2365)));
evalcond[3]=(((r11*x2363))+(((-1.0)*r10*x2364)));
evalcond[4]=((1.0)+(((-1.0)*r20*x2364))+((r21*x2363)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r10*x2362))+((sj7*sj9))+(((-1.0)*r11*x2365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[2];
IkReal x2366=((-1.0)*py);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=1.0;
j8=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2366);
rxp0_2=(py*r00);
rxp1_0=(r21*x2366);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j11eval[0]=((((-1.0)*r01*sj12))+((cj12*r00)));
j11eval[1]=r12;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x2367=((-1.0)*py);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=1.0;
j8=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2367);
rxp0_2=(py*r00);
rxp1_0=(r21*x2367);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j11eval[0]=((((-1.0)*r01*sj12))+((cj12*r00)));
j11eval[1]=((((-1.0)*cj12*r20))+((r21*sj12)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2368=IKPowWithIntegerCheck(((((-1.0)*r01*sj12))+((cj12*r00))),-1);
if(!x2368.valid){
continue;
}
CheckValue<IkReal> x2369=IKPowWithIntegerCheck(((((-1.0)*cj12*r20))+((r21*sj12))),-1);
if(!x2369.valid){
continue;
}
if( IKabs(((x2368.value)*(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x2369.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2368.value)*(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*sj9))))))+IKsqr(((-1.0)*(x2369.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x2368.value)*(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*sj9))))), ((-1.0)*(x2369.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2370=IKsin(j11);
IkReal x2371=IKcos(j11);
IkReal x2372=(cj12*x2370);
IkReal x2373=(sj12*x2371);
IkReal x2374=((1.0)*cj12*x2371);
IkReal x2375=((1.0)*sj12*x2370);
evalcond[0]=(r12*x2370);
evalcond[1]=((((-1.0)*cj7*cj9))+((r12*x2371))+((sj7*sj9)));
evalcond[2]=(((r20*x2372))+(((-1.0)*r21*x2375)));
evalcond[3]=((((-1.0)*r00*x2374))+((r01*x2373)));
evalcond[4]=((1.0)+(((-1.0)*r20*x2374))+((r21*x2373)));
evalcond[5]=(((cj9*sj7))+(((-1.0)*r01*x2375))+((cj7*sj9))+((r00*x2372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2376=((1.0)*sj7);
CheckValue<IkReal> x2377=IKPowWithIntegerCheck(((((-1.0)*r01*sj12))+((cj12*r00))),-1);
if(!x2377.valid){
continue;
}
CheckValue<IkReal> x2378=IKPowWithIntegerCheck(r12,-1);
if(!x2378.valid){
continue;
}
if( IKabs(((x2377.value)*(((((-1.0)*cj7*sj9))+(((-1.0)*cj9*x2376)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2378.value)*(((((-1.0)*sj9*x2376))+((cj7*cj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2377.value)*(((((-1.0)*cj7*sj9))+(((-1.0)*cj9*x2376))))))+IKsqr(((x2378.value)*(((((-1.0)*sj9*x2376))+((cj7*cj9))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x2377.value)*(((((-1.0)*cj7*sj9))+(((-1.0)*cj9*x2376))))), ((x2378.value)*(((((-1.0)*sj9*x2376))+((cj7*cj9))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2379=IKsin(j11);
IkReal x2380=IKcos(j11);
IkReal x2381=(cj12*x2379);
IkReal x2382=(sj12*x2380);
IkReal x2383=((1.0)*cj12*x2380);
IkReal x2384=((1.0)*sj12*x2379);
evalcond[0]=(r12*x2379);
evalcond[1]=((((-1.0)*cj7*cj9))+((sj7*sj9))+((r12*x2380)));
evalcond[2]=((((-1.0)*r21*x2384))+((r20*x2381)));
evalcond[3]=((((-1.0)*r00*x2383))+((r01*x2382)));
evalcond[4]=((1.0)+(((-1.0)*r20*x2383))+((r21*x2382)));
evalcond[5]=((((-1.0)*r01*x2384))+((r00*x2381))+((cj9*sj7))+((cj7*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2385=cj12*cj12;
IkReal x2386=r21*r21;
IkReal x2387=(r21*sj12);
IkReal x2388=(cj12*r20);
CheckValue<IkReal> x2389 = IKatan2WithCheck(IkReal(r22),IkReal((x2387+(((-1.0)*x2388)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2389.valid){
continue;
}
CheckValue<IkReal> x2390=IKPowWithIntegerCheck(IKsign((((x2385*x2386))+(((-1.0)*x2385*(r20*r20)))+(((-1.0)*x2386))+(((-1.0)*(r22*r22)))+(((2.0)*x2387*x2388)))),-1);
if(!x2390.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2389.value)+(((1.5707963267949)*(x2390.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2391=IKsin(j11);
IkReal x2392=IKcos(j11);
IkReal x2393=(cj12*r20);
IkReal x2394=(r01*sj12);
IkReal x2395=(cj12*r10);
IkReal x2396=(r11*sj12);
IkReal x2397=(cj12*r00);
IkReal x2398=(r21*sj12);
IkReal x2399=((1.0)*x2392);
IkReal x2400=((1.0)*x2391);
evalcond[0]=(((x2391*x2393))+((r22*x2392))+(((-1.0)*x2398*x2400)));
evalcond[1]=(((x2392*x2394))+((r02*x2391))+(((-1.0)*x2397*x2399)));
evalcond[2]=(((r12*x2391))+((x2392*x2396))+(((-1.0)*x2395*x2399)));
evalcond[3]=((1.0)+((x2392*x2398))+((r22*x2391))+(((-1.0)*x2393*x2399)));
evalcond[4]=((((-1.0)*x2394*x2400))+((cj9*sj7))+((r02*x2392))+((x2391*x2397))+((cj7*sj9)));
evalcond[5]=(((r12*x2392))+(((-1.0)*cj7*cj9))+((x2391*x2395))+(((-1.0)*x2396*x2400))+((sj7*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2401=((1.0)*cj12);
CheckValue<IkReal> x2402=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2401))+(((-1.0)*r00*sj12)))),-1);
if(!x2402.valid){
continue;
}
CheckValue<IkReal> x2403 = IKatan2WithCheck(IkReal((((r11*sj12))+(((-1.0)*r10*x2401)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2403.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2402.value)))+(x2403.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2404=IKsin(j11);
IkReal x2405=IKcos(j11);
IkReal x2406=(cj12*r20);
IkReal x2407=(r01*sj12);
IkReal x2408=(cj12*r10);
IkReal x2409=(r11*sj12);
IkReal x2410=(cj12*r00);
IkReal x2411=(r21*sj12);
IkReal x2412=((1.0)*x2405);
IkReal x2413=((1.0)*x2404);
evalcond[0]=((((-1.0)*x2411*x2413))+((r22*x2405))+((x2404*x2406)));
evalcond[1]=(((r02*x2404))+((x2405*x2407))+(((-1.0)*x2410*x2412)));
evalcond[2]=((((-1.0)*x2408*x2412))+((r12*x2404))+((x2405*x2409)));
evalcond[3]=((1.0)+(((-1.0)*x2406*x2412))+((x2405*x2411))+((r22*x2404)));
evalcond[4]=((((-1.0)*x2407*x2413))+((r02*x2405))+((cj9*sj7))+((x2404*x2410))+((cj7*sj9)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r12*x2405))+((x2404*x2408))+((sj7*sj9))+(((-1.0)*x2409*x2413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2414 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r00))+((r01*sj12)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2414.valid){
continue;
}
CheckValue<IkReal> x2415=IKPowWithIntegerCheck(IKsign((((r10*sj12))+((cj12*r11)))),-1);
if(!x2415.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2414.value)+(((1.5707963267949)*(x2415.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2416=IKsin(j11);
IkReal x2417=IKcos(j11);
IkReal x2418=(cj12*r20);
IkReal x2419=(r01*sj12);
IkReal x2420=(cj12*r10);
IkReal x2421=(r11*sj12);
IkReal x2422=(cj12*r00);
IkReal x2423=(r21*sj12);
IkReal x2424=((1.0)*x2417);
IkReal x2425=((1.0)*x2416);
evalcond[0]=(((r22*x2417))+(((-1.0)*x2423*x2425))+((x2416*x2418)));
evalcond[1]=((((-1.0)*x2422*x2424))+((x2417*x2419))+((r02*x2416)));
evalcond[2]=(((x2417*x2421))+(((-1.0)*x2420*x2424))+((r12*x2416)));
evalcond[3]=((1.0)+((r22*x2416))+((x2417*x2423))+(((-1.0)*x2418*x2424)));
evalcond[4]=(((x2416*x2422))+((cj9*sj7))+((r02*x2417))+((cj7*sj9))+(((-1.0)*x2419*x2425)));
evalcond[5]=((((-1.0)*cj7*cj9))+((x2416*x2420))+(((-1.0)*x2421*x2425))+((sj7*sj9))+((r12*x2417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x2426=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x2426;
j11eval[1]=((IKabs(r12))+(IKabs((((r11*sj12))+(((-1.0)*cj12*r10))))));
j11eval[2]=IKsign(x2426);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x2427=((1.0)*cj12);
IkReal x2428=((((-1.0)*r11*x2427))+(((-1.0)*r10*sj12)));
j11eval[0]=x2428;
j11eval[1]=IKsign(x2428);
j11eval[2]=((IKabs(r02))+(IKabs((((r01*sj12))+(((-1.0)*r00*x2427))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x2429=cj12*cj12;
IkReal x2430=r21*r21;
IkReal x2431=(r21*sj12);
IkReal x2432=(cj12*r20);
IkReal x2433=(x2430+(r22*r22)+(((-1.0)*x2429*x2430))+((x2429*(r20*r20)))+(((-2.0)*x2431*x2432)));
j11eval[0]=x2433;
j11eval[1]=IKsign(x2433);
j11eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x2432))+x2431))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[2];
IkReal x2434=((-1.0)*py);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2434);
rxp0_2=(py*r00);
rxp1_0=(r21*x2434);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j11eval[0]=((((-1.0)*r01*sj12))+((cj12*r00)));
j11eval[1]=((((-1.0)*cj12*r20))+((r21*sj12)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x2435=((-1.0)*py);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2435);
rxp0_2=(py*r00);
rxp1_0=(r21*x2435);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j11eval[0]=((((-1.0)*r01*sj12))+((cj12*r00)));
j11eval[1]=r12;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2436=IKPowWithIntegerCheck(((((-1.0)*r01*sj12))+((cj12*r00))),-1);
if(!x2436.valid){
continue;
}
CheckValue<IkReal> x2437=IKPowWithIntegerCheck(r12,-1);
if(!x2437.valid){
continue;
}
if( IKabs(((x2436.value)*(((((-1.0)*cj9*sj7))+((cj7*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2437.value)*((((cj7*cj9))+((sj7*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2436.value)*(((((-1.0)*cj9*sj7))+((cj7*sj9))))))+IKsqr(((x2437.value)*((((cj7*cj9))+((sj7*sj9))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x2436.value)*(((((-1.0)*cj9*sj7))+((cj7*sj9))))), ((x2437.value)*((((cj7*cj9))+((sj7*sj9))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2438=IKsin(j11);
IkReal x2439=IKcos(j11);
IkReal x2440=((1.0)*sj9);
IkReal x2441=(cj12*x2438);
IkReal x2442=(sj12*x2439);
IkReal x2443=((1.0)*cj12*x2439);
IkReal x2444=((1.0)*sj12*x2438);
evalcond[0]=(r12*x2438);
evalcond[1]=((((-1.0)*r21*x2444))+((r20*x2441)));
evalcond[2]=((((-1.0)*cj7*cj9))+((r12*x2439))+(((-1.0)*sj7*x2440)));
evalcond[3]=(((r01*x2442))+(((-1.0)*r00*x2443)));
evalcond[4]=((-1.0)+(((-1.0)*r20*x2443))+((r21*x2442)));
evalcond[5]=(((cj9*sj7))+((r00*x2441))+(((-1.0)*cj7*x2440))+(((-1.0)*r01*x2444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2445=IKPowWithIntegerCheck(((((-1.0)*r01*sj12))+((cj12*r00))),-1);
if(!x2445.valid){
continue;
}
CheckValue<IkReal> x2446=IKPowWithIntegerCheck(((((-1.0)*cj12*r20))+((r21*sj12))),-1);
if(!x2446.valid){
continue;
}
if( IKabs(((x2445.value)*(((((-1.0)*cj9*sj7))+((cj7*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x2446.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2445.value)*(((((-1.0)*cj9*sj7))+((cj7*sj9))))))+IKsqr(x2446.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x2445.value)*(((((-1.0)*cj9*sj7))+((cj7*sj9))))), x2446.value);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2447=IKsin(j11);
IkReal x2448=IKcos(j11);
IkReal x2449=((1.0)*sj9);
IkReal x2450=(cj12*x2447);
IkReal x2451=(sj12*x2448);
IkReal x2452=((1.0)*cj12*x2448);
IkReal x2453=((1.0)*sj12*x2447);
evalcond[0]=(r12*x2447);
evalcond[1]=((((-1.0)*r21*x2453))+((r20*x2450)));
evalcond[2]=((((-1.0)*cj7*cj9))+((r12*x2448))+(((-1.0)*sj7*x2449)));
evalcond[3]=(((r01*x2451))+(((-1.0)*r00*x2452)));
evalcond[4]=((-1.0)+(((-1.0)*r20*x2452))+((r21*x2451)));
evalcond[5]=(((cj9*sj7))+((r00*x2450))+(((-1.0)*cj7*x2449))+(((-1.0)*r01*x2453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[2];
IkReal x2454=((-1.0)*px);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2454);
rxp1_1=(px*r21);
rxp1_2=(r11*x2454);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[1]=((((-1.0)*cj12*r20))+((r21*sj12)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x2455=((-1.0)*px);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2455);
rxp1_1=(px*r21);
rxp1_2=(r11*x2455);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[1]=r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2456=IKPowWithIntegerCheck(((((-1.0)*r11*sj12))+((cj12*r10))),-1);
if(!x2456.valid){
continue;
}
CheckValue<IkReal> x2457=IKPowWithIntegerCheck(r02,-1);
if(!x2457.valid){
continue;
}
if( IKabs(((x2456.value)*((((cj7*cj9))+((sj7*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2457.value)*(((((-1.0)*cj9*sj7))+((cj7*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2456.value)*((((cj7*cj9))+((sj7*sj9))))))+IKsqr(((x2457.value)*(((((-1.0)*cj9*sj7))+((cj7*sj9))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x2456.value)*((((cj7*cj9))+((sj7*sj9))))), ((x2457.value)*(((((-1.0)*cj9*sj7))+((cj7*sj9))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2458=IKsin(j11);
IkReal x2459=IKcos(j11);
IkReal x2460=((1.0)*cj7);
IkReal x2461=(r11*sj12);
IkReal x2462=(r21*sj12);
IkReal x2463=(cj12*x2458);
IkReal x2464=((1.0)*x2458);
IkReal x2465=((1.0)*cj12*x2459);
evalcond[0]=(r02*x2458);
evalcond[1]=(((r02*x2459))+(((-1.0)*sj9*x2460))+((cj9*sj7)));
evalcond[2]=(((r20*x2463))+(((-1.0)*x2462*x2464)));
evalcond[3]=(((x2459*x2461))+(((-1.0)*r10*x2465)));
evalcond[4]=((-1.0)+((x2459*x2462))+(((-1.0)*r20*x2465)));
evalcond[5]=((((-1.0)*cj9*x2460))+(((-1.0)*sj7*sj9))+(((-1.0)*x2461*x2464))+((r10*x2463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2466=IKPowWithIntegerCheck(((((-1.0)*r11*sj12))+((cj12*r10))),-1);
if(!x2466.valid){
continue;
}
CheckValue<IkReal> x2467=IKPowWithIntegerCheck(((((-1.0)*cj12*r20))+((r21*sj12))),-1);
if(!x2467.valid){
continue;
}
if( IKabs(((x2466.value)*((((cj7*cj9))+((sj7*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x2467.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2466.value)*((((cj7*cj9))+((sj7*sj9))))))+IKsqr(x2467.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x2466.value)*((((cj7*cj9))+((sj7*sj9))))), x2467.value);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2468=IKsin(j11);
IkReal x2469=IKcos(j11);
IkReal x2470=((1.0)*cj7);
IkReal x2471=(r11*sj12);
IkReal x2472=(r21*sj12);
IkReal x2473=(cj12*x2468);
IkReal x2474=((1.0)*x2468);
IkReal x2475=((1.0)*cj12*x2469);
evalcond[0]=(r02*x2468);
evalcond[1]=(((cj9*sj7))+((r02*x2469))+(((-1.0)*sj9*x2470)));
evalcond[2]=((((-1.0)*x2472*x2474))+((r20*x2473)));
evalcond[3]=((((-1.0)*r10*x2475))+((x2469*x2471)));
evalcond[4]=((-1.0)+(((-1.0)*r20*x2475))+((x2469*x2472)));
evalcond[5]=(((r10*x2473))+(((-1.0)*x2471*x2474))+(((-1.0)*cj9*x2470))+(((-1.0)*sj7*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2476=cj12*cj12;
IkReal x2477=r21*r21;
IkReal x2478=(r21*sj12);
IkReal x2479=(cj12*r20);
CheckValue<IkReal> x2480=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2478*x2479))+x2477+(r22*r22)+((x2476*(r20*r20)))+(((-1.0)*x2476*x2477)))),-1);
if(!x2480.valid){
continue;
}
CheckValue<IkReal> x2481 = IKatan2WithCheck(IkReal(r22),IkReal((x2478+(((-1.0)*x2479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2481.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2480.value)))+(x2481.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2482=IKsin(j11);
IkReal x2483=IKcos(j11);
IkReal x2484=(cj12*r20);
IkReal x2485=(r01*sj12);
IkReal x2486=(cj12*r10);
IkReal x2487=((1.0)*sj9);
IkReal x2488=(r11*sj12);
IkReal x2489=(cj12*r00);
IkReal x2490=(r21*sj12);
IkReal x2491=((1.0)*x2483);
IkReal x2492=((1.0)*x2482);
evalcond[0]=(((x2482*x2484))+(((-1.0)*x2490*x2492))+((r22*x2483)));
evalcond[1]=(((r02*x2482))+((x2483*x2485))+(((-1.0)*x2489*x2491)));
evalcond[2]=(((x2483*x2488))+(((-1.0)*x2486*x2491))+((r12*x2482)));
evalcond[3]=((-1.0)+((r22*x2482))+((x2483*x2490))+(((-1.0)*x2484*x2491)));
evalcond[4]=(((x2482*x2489))+((r02*x2483))+((cj9*sj7))+(((-1.0)*x2485*x2492))+(((-1.0)*cj7*x2487)));
evalcond[5]=(((x2482*x2486))+(((-1.0)*cj7*cj9))+(((-1.0)*x2488*x2492))+((r12*x2483))+(((-1.0)*sj7*x2487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2493=((1.0)*cj12);
CheckValue<IkReal> x2494 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x2493))+((r01*sj12)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2494.valid){
continue;
}
CheckValue<IkReal> x2495=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2493))+(((-1.0)*r10*sj12)))),-1);
if(!x2495.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2494.value)+(((1.5707963267949)*(x2495.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2496=IKsin(j11);
IkReal x2497=IKcos(j11);
IkReal x2498=(cj12*r20);
IkReal x2499=(r01*sj12);
IkReal x2500=(cj12*r10);
IkReal x2501=((1.0)*sj9);
IkReal x2502=(r11*sj12);
IkReal x2503=(cj12*r00);
IkReal x2504=(r21*sj12);
IkReal x2505=((1.0)*x2497);
IkReal x2506=((1.0)*x2496);
evalcond[0]=(((x2496*x2498))+((r22*x2497))+(((-1.0)*x2504*x2506)));
evalcond[1]=(((x2497*x2499))+((r02*x2496))+(((-1.0)*x2503*x2505)));
evalcond[2]=(((x2497*x2502))+(((-1.0)*x2500*x2505))+((r12*x2496)));
evalcond[3]=((-1.0)+(((-1.0)*x2498*x2505))+((x2497*x2504))+((r22*x2496)));
evalcond[4]=(((r02*x2497))+((x2496*x2503))+(((-1.0)*cj7*x2501))+((cj9*sj7))+(((-1.0)*x2499*x2506)));
evalcond[5]=((((-1.0)*cj7*cj9))+((x2496*x2500))+(((-1.0)*sj7*x2501))+(((-1.0)*x2502*x2506))+((r12*x2497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2507 = IKatan2WithCheck(IkReal((((r11*sj12))+(((-1.0)*cj12*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2507.valid){
continue;
}
CheckValue<IkReal> x2508=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x2508.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2507.value)+(((1.5707963267949)*(x2508.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2509=IKsin(j11);
IkReal x2510=IKcos(j11);
IkReal x2511=(cj12*r20);
IkReal x2512=(r01*sj12);
IkReal x2513=(cj12*r10);
IkReal x2514=((1.0)*sj9);
IkReal x2515=(r11*sj12);
IkReal x2516=(cj12*r00);
IkReal x2517=(r21*sj12);
IkReal x2518=((1.0)*x2510);
IkReal x2519=((1.0)*x2509);
evalcond[0]=((((-1.0)*x2517*x2519))+((r22*x2510))+((x2509*x2511)));
evalcond[1]=(((r02*x2509))+((x2510*x2512))+(((-1.0)*x2516*x2518)));
evalcond[2]=(((r12*x2509))+((x2510*x2515))+(((-1.0)*x2513*x2518)));
evalcond[3]=((-1.0)+((r22*x2509))+((x2510*x2517))+(((-1.0)*x2511*x2518)));
evalcond[4]=(((r02*x2510))+((cj9*sj7))+(((-1.0)*cj7*x2514))+(((-1.0)*x2512*x2519))+((x2509*x2516)));
evalcond[5]=((((-1.0)*sj7*x2514))+(((-1.0)*cj7*cj9))+(((-1.0)*x2515*x2519))+((x2509*x2513))+((r12*x2510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2520=((-1.0)*r00);
IkReal x2522 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2522)==0){
continue;
}
IkReal x2521=pow(x2522,-0.5);
CheckValue<IkReal> x2523 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2520),IKFAST_ATAN2_MAGTHRESH);
if(!x2523.valid){
continue;
}
IkReal gconst30=((-1.0)*(x2523.value));
IkReal gconst31=(r01*x2521);
IkReal gconst32=(x2520*x2521);
CheckValue<IkReal> x2524 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2524.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j12+(x2524.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2525=((1.0)*cj8);
IkReal x2526=(cj7*sj8);
CheckValue<IkReal> x2527=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x2527.valid){
continue;
}
CheckValue<IkReal> x2528 = IKatan2WithCheck(IkReal(((((-1.0)*gconst32*r00*x2525))+(((-1.0)*gconst31*r21*x2526))+((cj8*gconst31*r01))+((gconst32*r20*x2526)))),IkReal((((r22*x2526))+(((-1.0)*r02*x2525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2528.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2527.value)))+(x2528.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2529=IKcos(j11);
IkReal x2530=IKsin(j11);
IkReal x2531=(cj8*sj9);
IkReal x2532=(gconst32*r00);
IkReal x2533=(gconst31*r01);
IkReal x2534=((1.0)*x2529);
IkReal x2535=((1.0)*x2530);
IkReal x2536=(gconst32*x2530);
IkReal x2537=(gconst31*x2529);
evalcond[0]=(cj8+((r21*x2537))+(((-1.0)*gconst32*r20*x2534))+((r22*x2530)));
evalcond[1]=(((r02*x2530))+((cj7*sj8))+(((-1.0)*x2532*x2534))+((x2529*x2533)));
evalcond[2]=((((-1.0)*gconst32*r10*x2534))+((r12*x2530))+((sj7*sj8))+((r11*x2537)));
evalcond[3]=(((r22*x2529))+(((-1.0)*sj8*sj9))+((r20*x2536))+(((-1.0)*gconst31*r21*x2535)));
evalcond[4]=(((r02*x2529))+(((-1.0)*x2533*x2535))+((x2530*x2532))+((cj9*sj7))+((cj7*x2531)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r12*x2529))+((r10*x2536))+(((-1.0)*gconst31*r11*x2535))+((sj7*x2531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2538=((-1.0)*r01);
IkReal x2540 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2540)==0){
continue;
}
IkReal x2539=pow(x2540,-0.5);
CheckValue<IkReal> x2541 = IKatan2WithCheck(IkReal(x2538),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2541.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x2541.value))));
IkReal gconst34=(x2538*x2539);
IkReal gconst35=((1.0)*r00*x2539);
CheckValue<IkReal> x2542 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2542.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12+(x2542.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2543=((1.0)*cj8);
IkReal x2544=(cj7*sj8);
CheckValue<IkReal> x2545 = IKatan2WithCheck(IkReal((((cj8*gconst34*r01))+((gconst35*r20*x2544))+(((-1.0)*gconst34*r21*x2544))+(((-1.0)*gconst35*r00*x2543)))),IkReal(((((-1.0)*r02*x2543))+((r22*x2544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2545.valid){
continue;
}
CheckValue<IkReal> x2546=IKPowWithIntegerCheck(IKsign((((gconst35*r11))+((gconst34*r10)))),-1);
if(!x2546.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2545.value)+(((1.5707963267949)*(x2546.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2547=IKcos(j11);
IkReal x2548=IKsin(j11);
IkReal x2549=(cj8*sj9);
IkReal x2550=(gconst34*x2547);
IkReal x2551=(gconst35*x2548);
IkReal x2552=((1.0)*gconst34*x2548);
IkReal x2553=((1.0)*gconst35*x2547);
evalcond[0]=(cj8+(((-1.0)*r20*x2553))+((r21*x2550))+((r22*x2548)));
evalcond[1]=(((r01*x2550))+(((-1.0)*r00*x2553))+((cj7*sj8))+((r02*x2548)));
evalcond[2]=(((r12*x2548))+((r11*x2550))+((sj7*sj8))+(((-1.0)*r10*x2553)));
evalcond[3]=((((-1.0)*sj8*sj9))+(((-1.0)*r21*x2552))+((r20*x2551))+((r22*x2547)));
evalcond[4]=(((cj9*sj7))+(((-1.0)*r01*x2552))+((r00*x2551))+((cj7*x2549))+((r02*x2547)));
evalcond[5]=((((-1.0)*cj7*cj9))+(((-1.0)*r11*x2552))+((sj7*x2549))+((r12*x2547))+((r10*x2551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2555 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2555)==0){
continue;
}
IkReal x2554=pow(x2555,-0.5);
CheckValue<IkReal> x2556 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2556.valid){
continue;
}
IkReal gconst36=((-1.0)*(x2556.value));
IkReal gconst37=((-1.0)*r11*x2554);
IkReal gconst38=(r10*x2554);
CheckValue<IkReal> x2557 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2557.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2557.value)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2558=(sj7*sj8);
IkReal x2559=((1.0)*gconst37);
IkReal x2560=((1.0)*cj8);
CheckValue<IkReal> x2561 = IKatan2WithCheck(IkReal((((gconst38*r20*x2558))+(((-1.0)*r21*x2558*x2559))+(((-1.0)*gconst38*r10*x2560))+((cj8*gconst37*r11)))),IkReal((((r22*x2558))+(((-1.0)*r12*x2560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2561.valid){
continue;
}
CheckValue<IkReal> x2562=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst38*r01))+(((-1.0)*r00*x2559)))),-1);
if(!x2562.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2561.value)+(((1.5707963267949)*(x2562.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2563=IKcos(j11);
IkReal x2564=IKsin(j11);
IkReal x2565=(cj8*sj9);
IkReal x2566=(gconst38*r00);
IkReal x2567=(gconst38*r10);
IkReal x2568=(gconst37*r11);
IkReal x2569=(gconst38*r20);
IkReal x2570=((1.0)*x2563);
IkReal x2571=((1.0)*x2564);
IkReal x2572=(gconst37*x2563);
evalcond[0]=((((-1.0)*x2569*x2570))+((r22*x2564))+((r21*x2572))+cj8);
evalcond[1]=((((-1.0)*x2566*x2570))+((r01*x2572))+((cj7*sj8))+((r02*x2564)));
evalcond[2]=(((x2563*x2568))+((r12*x2564))+(((-1.0)*x2567*x2570))+((sj7*sj8)));
evalcond[3]=(((r22*x2563))+(((-1.0)*sj8*sj9))+(((-1.0)*gconst37*r21*x2571))+((x2564*x2569)));
evalcond[4]=(((cj9*sj7))+(((-1.0)*gconst37*r01*x2571))+((cj7*x2565))+((x2564*x2566))+((r02*x2563)));
evalcond[5]=((((-1.0)*cj7*cj9))+(((-1.0)*x2568*x2571))+((r12*x2563))+((sj7*x2565))+((x2564*x2567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2574 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2574)==0){
continue;
}
IkReal x2573=pow(x2574,-0.5);
CheckValue<IkReal> x2575 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2575.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x2575.value))));
IkReal gconst40=((1.0)*r11*x2573);
IkReal gconst41=((-1.0)*r10*x2573);
CheckValue<IkReal> x2576 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2576.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2576.value)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
CheckValue<IkReal> x2579 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2579.valid){
continue;
}
IkReal x2577=((1.0)*(x2579.value));
IkReal x2578=x2573;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj12=gconst40;
cj12=gconst41;
j12=((3.14159265)+(((-1.0)*x2577)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x2577)));
IkReal gconst40=((1.0)*r11*x2578);
IkReal gconst41=((-1.0)*r10*x2578);
IkReal x2580=r12*r12;
IkReal x2581=(cj8*r02);
IkReal x2582=(cj7*r22*sj8);
CheckValue<IkReal> x2586=IKPowWithIntegerCheck(((-1.0)+x2580),-1);
if(!x2586.valid){
continue;
}
IkReal x2583=x2586.value;
if((((1.0)+(((-1.0)*x2580)))) < -0.00001)
continue;
IkReal x2584=IKsqrt(((1.0)+(((-1.0)*x2580))));
IkReal x2585=(r12*x2583*x2584);
j11eval[0]=0;
j11eval[1]=((IKabs(((((-1.0)*x2582*x2585))+((x2581*x2585)))))+(IKabs((x2582+(((-1.0)*x2581))))));
j11eval[2]=0;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2587=((1.0)*gconst40);
IkReal x2588=((1.0)*cj8);
IkReal x2589=(sj7*sj8);
CheckValue<IkReal> x2590=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2587))+(((-1.0)*gconst41*r01)))),-1);
if(!x2590.valid){
continue;
}
CheckValue<IkReal> x2591 = IKatan2WithCheck(IkReal((((cj8*gconst40*r11))+(((-1.0)*r21*x2587*x2589))+(((-1.0)*gconst41*r10*x2588))+((gconst41*r20*x2589)))),IkReal((((r22*x2589))+(((-1.0)*r12*x2588)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2591.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2590.value)))+(x2591.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2592=IKcos(j11);
IkReal x2593=IKsin(j11);
IkReal x2594=(cj8*sj9);
IkReal x2595=(gconst40*x2592);
IkReal x2596=(gconst41*x2593);
IkReal x2597=((1.0)*gconst40*x2593);
IkReal x2598=((1.0)*gconst41*x2592);
evalcond[0]=(((r22*x2593))+(((-1.0)*r20*x2598))+cj8+((r21*x2595)));
evalcond[1]=((((-1.0)*r00*x2598))+((r01*x2595))+((cj7*sj8))+((r02*x2593)));
evalcond[2]=(((r12*x2593))+((r11*x2595))+((sj7*sj8))+(((-1.0)*r10*x2598)));
evalcond[3]=(((r22*x2592))+(((-1.0)*sj8*sj9))+(((-1.0)*r21*x2597))+((r20*x2596)));
evalcond[4]=(((r00*x2596))+(((-1.0)*r01*x2597))+((cj9*sj7))+((cj7*x2594))+((r02*x2592)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r10*x2596))+((r12*x2592))+((sj7*x2594))+(((-1.0)*r11*x2597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2599=((1.0)*cj8);
IkReal x2600=(cj7*sj8);
CheckValue<IkReal> x2601 = IKatan2WithCheck(IkReal((((cj8*gconst40*r01))+(((-1.0)*gconst41*r00*x2599))+((gconst41*r20*x2600))+(((-1.0)*gconst40*r21*x2600)))),IkReal(((((-1.0)*r02*x2599))+((r22*x2600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2601.valid){
continue;
}
CheckValue<IkReal> x2602=IKPowWithIntegerCheck(IKsign((((gconst40*r10))+((gconst41*r11)))),-1);
if(!x2602.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2601.value)+(((1.5707963267949)*(x2602.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2603=IKcos(j11);
IkReal x2604=IKsin(j11);
IkReal x2605=(cj8*sj9);
IkReal x2606=(gconst40*x2603);
IkReal x2607=(gconst41*x2604);
IkReal x2608=((1.0)*gconst40*x2604);
IkReal x2609=((1.0)*gconst41*x2603);
evalcond[0]=(cj8+((r21*x2606))+(((-1.0)*r20*x2609))+((r22*x2604)));
evalcond[1]=(((r02*x2604))+((cj7*sj8))+((r01*x2606))+(((-1.0)*r00*x2609)));
evalcond[2]=((((-1.0)*r10*x2609))+((r12*x2604))+((sj7*sj8))+((r11*x2606)));
evalcond[3]=((((-1.0)*sj8*sj9))+((r20*x2607))+(((-1.0)*r21*x2608))+((r22*x2603)));
evalcond[4]=(((cj9*sj7))+((r02*x2603))+((cj7*x2605))+(((-1.0)*r01*x2608))+((r00*x2607)));
evalcond[5]=((((-1.0)*cj7*cj9))+(((-1.0)*r11*x2608))+((sj7*x2605))+((r10*x2607))+((r12*x2603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x2610=((-1.0)*py);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2610);
rxp0_2=(py*r00);
rxp1_0=(r21*x2610);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x2611=((((-1.0)*r21*sj12))+((cj12*r20)));
j11eval[0]=x2611;
j11eval[1]=((IKabs(cj8))+(IKabs((sj8*sj9))));
j11eval[2]=IKsign(x2611);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x2612=((-1.0)*py);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2612);
rxp0_2=(py*r00);
rxp1_0=(r21*x2612);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j11eval[0]=r12;
j11eval[1]=IKsign(r12);
j11eval[2]=((IKabs((sj7*sj8)))+(IKabs((((cj7*cj9))+(((-1.0)*cj8*sj7*sj9))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x2613=((-1.0)*py);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2613);
rxp0_2=(py*r00);
rxp1_0=(r21*x2613);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j11eval[0]=r12;
j11eval[1]=((((-1.0)*cj12*r20))+((r21*sj12)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2614=IKPowWithIntegerCheck(r12,-1);
if(!x2614.valid){
continue;
}
CheckValue<IkReal> x2615=IKPowWithIntegerCheck(((((-1.0)*cj12*r20))+((r21*sj12))),-1);
if(!x2615.valid){
continue;
}
if( IKabs(((-1.0)*sj7*sj8*(x2614.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj8*(x2615.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj7*sj8*(x2614.value)))+IKsqr(((-1.0)*cj8*(x2615.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*sj7*sj8*(x2614.value)), ((-1.0)*cj8*(x2615.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2616=IKcos(j11);
IkReal x2617=IKsin(j11);
IkReal x2618=(cj12*r00);
IkReal x2619=(cj8*sj9);
IkReal x2620=(r21*sj12);
IkReal x2621=(r01*sj12);
IkReal x2622=(cj12*r20);
IkReal x2623=((1.0)*x2616);
IkReal x2624=((1.0)*x2617);
evalcond[0]=(((sj7*sj8))+((r12*x2617)));
evalcond[1]=((((-1.0)*cj7*cj9))+((sj7*x2619))+((r12*x2616)));
evalcond[2]=((((-1.0)*x2622*x2623))+cj8+((x2616*x2620)));
evalcond[3]=((((-1.0)*x2618*x2623))+((x2616*x2621))+((cj7*sj8)));
evalcond[4]=((((-1.0)*sj8*sj9))+((x2617*x2622))+(((-1.0)*x2620*x2624)));
evalcond[5]=(((cj9*sj7))+((x2617*x2618))+((cj7*x2619))+(((-1.0)*x2621*x2624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2625 = IKatan2WithCheck(IkReal(((-1.0)*sj7*sj8)),IkReal((((cj7*cj9))+(((-1.0)*cj8*sj7*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2625.valid){
continue;
}
CheckValue<IkReal> x2626=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x2626.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2625.value)+(((1.5707963267949)*(x2626.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2627=IKcos(j11);
IkReal x2628=IKsin(j11);
IkReal x2629=(cj12*r00);
IkReal x2630=(cj8*sj9);
IkReal x2631=(r21*sj12);
IkReal x2632=(r01*sj12);
IkReal x2633=(cj12*r20);
IkReal x2634=((1.0)*x2627);
IkReal x2635=((1.0)*x2628);
evalcond[0]=(((r12*x2628))+((sj7*sj8)));
evalcond[1]=(((sj7*x2630))+(((-1.0)*cj7*cj9))+((r12*x2627)));
evalcond[2]=(cj8+(((-1.0)*x2633*x2634))+((x2627*x2631)));
evalcond[3]=((((-1.0)*x2629*x2634))+((cj7*sj8))+((x2627*x2632)));
evalcond[4]=((((-1.0)*sj8*sj9))+((x2628*x2633))+(((-1.0)*x2631*x2635)));
evalcond[5]=(((x2628*x2629))+((cj7*x2630))+((cj9*sj7))+(((-1.0)*x2632*x2635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2636 = IKatan2WithCheck(IkReal((sj8*sj9)),IkReal(cj8),IKFAST_ATAN2_MAGTHRESH);
if(!x2636.valid){
continue;
}
CheckValue<IkReal> x2637=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj12))+((cj12*r20)))),-1);
if(!x2637.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2636.value)+(((1.5707963267949)*(x2637.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2638=IKcos(j11);
IkReal x2639=IKsin(j11);
IkReal x2640=(cj12*r00);
IkReal x2641=(cj8*sj9);
IkReal x2642=(r21*sj12);
IkReal x2643=(r01*sj12);
IkReal x2644=(cj12*r20);
IkReal x2645=((1.0)*x2638);
IkReal x2646=((1.0)*x2639);
evalcond[0]=(((r12*x2639))+((sj7*sj8)));
evalcond[1]=((((-1.0)*cj7*cj9))+((r12*x2638))+((sj7*x2641)));
evalcond[2]=(cj8+(((-1.0)*x2644*x2645))+((x2638*x2642)));
evalcond[3]=(((x2638*x2643))+(((-1.0)*x2640*x2645))+((cj7*sj8)));
evalcond[4]=((((-1.0)*sj8*sj9))+((x2639*x2644))+(((-1.0)*x2642*x2646)));
evalcond[5]=(((x2639*x2640))+((cj9*sj7))+((cj7*x2641))+(((-1.0)*x2643*x2646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x2647=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x2647;
j11eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj12*r20))+((r21*sj12))))));
j11eval[2]=IKsign(x2647);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x2648=(((r20*sj12))+((cj12*r21)));
j11eval[0]=x2648;
j11eval[1]=IKsign(x2648);
j11eval[2]=((IKabs((cj9*r12)))+(IKabs(((((-1.0)*cj12*cj9*r10))+((cj9*r11*sj12))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x2649=r11*r11;
IkReal x2650=cj12*cj12;
IkReal x2651=(r11*sj12);
IkReal x2652=(cj12*r10);
IkReal x2653=(((x2649*x2650))+(((-1.0)*x2650*(r10*r10)))+(((2.0)*x2651*x2652))+(((-1.0)*(r12*r12)))+(((-1.0)*x2649)));
j11eval[0]=x2653;
j11eval[1]=((IKabs(((((-1.0)*x2652))+x2651)))+(IKabs(r12)));
j11eval[2]=IKsign(x2653);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x2654=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x2654;
j11eval[1]=((IKabs(r12))+(IKabs((((r11*sj12))+(((-1.0)*cj12*r10))))));
j11eval[2]=IKsign(x2654);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x2655=((1.0)*cj12);
IkReal x2656=((((-1.0)*r11*x2655))+(((-1.0)*r10*sj12)));
j11eval[0]=x2656;
j11eval[1]=IKsign(x2656);
j11eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2655))+((r01*sj12))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x2657=cj12*cj12;
IkReal x2658=(r01*r11);
IkReal x2659=(r01*sj12);
IkReal x2660=((1.0)*r00);
IkReal x2661=(((x2657*x2658))+(((-1.0)*r02*r12))+(((-1.0)*r10*x2657*x2660))+((cj12*r00*r11*sj12))+((cj12*r10*x2659))+(((-1.0)*x2658)));
j11eval[0]=x2661;
j11eval[1]=IKsign(x2661);
j11eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj12*x2660))+x2659))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2662=cj12*cj12;
IkReal x2663=(r01*r11);
IkReal x2664=(cj12*sj12);
IkReal x2665=((1.0)*r00);
CheckValue<IkReal> x2666=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2663))+((x2662*x2663))+(((-1.0)*r02*r12))+(((-1.0)*r10*x2662*x2665))+((r01*r10*x2664))+((r00*r11*x2664)))),-1);
if(!x2666.valid){
continue;
}
CheckValue<IkReal> x2667 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj12))+(((-1.0)*cj12*x2665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2667.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2666.value)))+(x2667.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2668=IKsin(j11);
IkReal x2669=IKcos(j11);
IkReal x2670=(cj12*r00);
IkReal x2671=(r21*sj12);
IkReal x2672=(cj12*r20);
IkReal x2673=(cj12*r10);
IkReal x2674=((1.0)*x2668);
IkReal x2675=((1.0)*x2669);
IkReal x2676=(sj12*x2669);
evalcond[0]=(((x2668*x2670))+((r02*x2669))+(((-1.0)*r01*sj12*x2674)));
evalcond[1]=(((r12*x2669))+((x2668*x2673))+(((-1.0)*r11*sj12*x2674)));
evalcond[2]=(((r22*x2668))+(((-1.0)*x2672*x2675))+((x2669*x2671)));
evalcond[3]=((((-1.0)*x2670*x2675))+((r02*x2668))+((r01*x2676)));
evalcond[4]=((-1.0)+((x2668*x2672))+((r22*x2669))+(((-1.0)*x2671*x2674)));
evalcond[5]=((1.0)+((r12*x2668))+(((-1.0)*x2673*x2675))+((r11*x2676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2677=((1.0)*cj12);
CheckValue<IkReal> x2678=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2677))+(((-1.0)*r10*sj12)))),-1);
if(!x2678.valid){
continue;
}
CheckValue<IkReal> x2679 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x2677))+((r01*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2679.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2678.value)))+(x2679.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2680=IKsin(j11);
IkReal x2681=IKcos(j11);
IkReal x2682=(cj12*r00);
IkReal x2683=(r21*sj12);
IkReal x2684=(cj12*r20);
IkReal x2685=(cj12*r10);
IkReal x2686=((1.0)*x2680);
IkReal x2687=((1.0)*x2681);
IkReal x2688=(sj12*x2681);
evalcond[0]=(((r02*x2681))+(((-1.0)*r01*sj12*x2686))+((x2680*x2682)));
evalcond[1]=((((-1.0)*r11*sj12*x2686))+((r12*x2681))+((x2680*x2685)));
evalcond[2]=((((-1.0)*x2684*x2687))+((r22*x2680))+((x2681*x2683)));
evalcond[3]=(((r02*x2680))+((r01*x2688))+(((-1.0)*x2682*x2687)));
evalcond[4]=((-1.0)+(((-1.0)*x2683*x2686))+((r22*x2681))+((x2680*x2684)));
evalcond[5]=((1.0)+(((-1.0)*x2685*x2687))+((r11*x2688))+((r12*x2680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2689 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj12))+(((-1.0)*cj12*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2689.valid){
continue;
}
CheckValue<IkReal> x2690=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x2690.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2689.value)+(((1.5707963267949)*(x2690.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2691=IKsin(j11);
IkReal x2692=IKcos(j11);
IkReal x2693=(cj12*r00);
IkReal x2694=(r21*sj12);
IkReal x2695=(cj12*r20);
IkReal x2696=(cj12*r10);
IkReal x2697=((1.0)*x2691);
IkReal x2698=((1.0)*x2692);
IkReal x2699=(sj12*x2692);
evalcond[0]=(((x2691*x2693))+(((-1.0)*r01*sj12*x2697))+((r02*x2692)));
evalcond[1]=(((x2691*x2696))+((r12*x2692))+(((-1.0)*r11*sj12*x2697)));
evalcond[2]=(((r22*x2691))+(((-1.0)*x2695*x2698))+((x2692*x2694)));
evalcond[3]=(((r01*x2699))+(((-1.0)*x2693*x2698))+((r02*x2691)));
evalcond[4]=((-1.0)+((x2691*x2695))+((r22*x2692))+(((-1.0)*x2694*x2697)));
evalcond[5]=((1.0)+((r12*x2691))+(((-1.0)*x2696*x2698))+((r11*x2699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x2700=(((r10*sj12))+((cj12*r11)));
j11eval[0]=x2700;
j11eval[1]=IKsign(x2700);
j11eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj12*r00))+((r01*sj12))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x2701=((1.0)*cj12);
IkReal x2702=((((-1.0)*r01*x2701))+(((-1.0)*r00*sj12)));
j11eval[0]=x2702;
j11eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2701))+((r11*sj12))))));
j11eval[2]=IKsign(x2702);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x2703=cj12*cj12;
IkReal x2704=(r01*r11);
IkReal x2705=(r01*sj12);
IkReal x2706=((1.0)*r00);
IkReal x2707=((((-1.0)*r02*r12))+(((-1.0)*r10*x2703*x2706))+((x2703*x2704))+((cj12*r00*r11*sj12))+(((-1.0)*x2704))+((cj12*r10*x2705)));
j11eval[0]=x2707;
j11eval[1]=IKsign(x2707);
j11eval[2]=((IKabs(r02))+(IKabs((x2705+(((-1.0)*cj12*x2706))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2708=cj12*cj12;
IkReal x2709=(r01*r11);
IkReal x2710=(cj12*sj12);
IkReal x2711=((1.0)*r00);
CheckValue<IkReal> x2712=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((r00*r11*x2710))+((x2708*x2709))+((r01*r10*x2710))+(((-1.0)*x2709))+(((-1.0)*r10*x2708*x2711)))),-1);
if(!x2712.valid){
continue;
}
CheckValue<IkReal> x2713 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj12))+(((-1.0)*cj12*x2711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2713.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2712.value)))+(x2713.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2714=IKsin(j11);
IkReal x2715=IKcos(j11);
IkReal x2716=(cj12*r00);
IkReal x2717=(r21*sj12);
IkReal x2718=(cj12*r20);
IkReal x2719=(cj12*r10);
IkReal x2720=((1.0)*x2714);
IkReal x2721=((1.0)*x2715);
IkReal x2722=(sj12*x2715);
evalcond[0]=(((r02*x2715))+(((-1.0)*r01*sj12*x2720))+((x2714*x2716)));
evalcond[1]=(((r12*x2715))+((x2714*x2719))+(((-1.0)*r11*sj12*x2720)));
evalcond[2]=((((-1.0)*x2718*x2721))+((r22*x2714))+((x2715*x2717)));
evalcond[3]=(((r02*x2714))+((r01*x2722))+(((-1.0)*x2716*x2721)));
evalcond[4]=((1.0)+((r22*x2715))+(((-1.0)*x2717*x2720))+((x2714*x2718)));
evalcond[5]=((1.0)+((r12*x2714))+(((-1.0)*x2719*x2721))+((r11*x2722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2723=((1.0)*cj12);
CheckValue<IkReal> x2724=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2723))+(((-1.0)*r00*sj12)))),-1);
if(!x2724.valid){
continue;
}
CheckValue<IkReal> x2725 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj12))+(((-1.0)*r10*x2723)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2725.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2724.value)))+(x2725.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2726=IKsin(j11);
IkReal x2727=IKcos(j11);
IkReal x2728=(cj12*r00);
IkReal x2729=(r21*sj12);
IkReal x2730=(cj12*r20);
IkReal x2731=(cj12*r10);
IkReal x2732=((1.0)*x2726);
IkReal x2733=((1.0)*x2727);
IkReal x2734=(sj12*x2727);
evalcond[0]=(((r02*x2727))+((x2726*x2728))+(((-1.0)*r01*sj12*x2732)));
evalcond[1]=(((x2726*x2731))+(((-1.0)*r11*sj12*x2732))+((r12*x2727)));
evalcond[2]=((((-1.0)*x2730*x2733))+((r22*x2726))+((x2727*x2729)));
evalcond[3]=(((r02*x2726))+(((-1.0)*x2728*x2733))+((r01*x2734)));
evalcond[4]=((1.0)+((r22*x2727))+((x2726*x2730))+(((-1.0)*x2729*x2732)));
evalcond[5]=((1.0)+(((-1.0)*x2731*x2733))+((r12*x2726))+((r11*x2734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2735 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj12*r00))+((r01*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2735.valid){
continue;
}
CheckValue<IkReal> x2736=IKPowWithIntegerCheck(IKsign((((r10*sj12))+((cj12*r11)))),-1);
if(!x2736.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2735.value)+(((1.5707963267949)*(x2736.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2737=IKsin(j11);
IkReal x2738=IKcos(j11);
IkReal x2739=(cj12*r00);
IkReal x2740=(r21*sj12);
IkReal x2741=(cj12*r20);
IkReal x2742=(cj12*r10);
IkReal x2743=((1.0)*x2737);
IkReal x2744=((1.0)*x2738);
IkReal x2745=(sj12*x2738);
evalcond[0]=((((-1.0)*r01*sj12*x2743))+((r02*x2738))+((x2737*x2739)));
evalcond[1]=((((-1.0)*r11*sj12*x2743))+((x2737*x2742))+((r12*x2738)));
evalcond[2]=(((r22*x2737))+((x2738*x2740))+(((-1.0)*x2741*x2744)));
evalcond[3]=(((r02*x2737))+(((-1.0)*x2739*x2744))+((r01*x2745)));
evalcond[4]=((1.0)+((r22*x2738))+(((-1.0)*x2740*x2743))+((x2737*x2741)));
evalcond[5]=((1.0)+((r11*x2745))+((r12*x2737))+(((-1.0)*x2742*x2744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
IkReal x2746=((-1.0)*px);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2746);
rxp1_1=(px*r21);
rxp1_2=(r11*x2746);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
IkReal x2747=((-1.0)*px);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2747);
rxp1_1=(px*r21);
rxp1_2=(r11*x2747);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=(((r11*sj12))+(((-1.0)*cj12*r10)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x2748=IKPowWithIntegerCheck((((r11*sj12))+(((-1.0)*cj12*r10))),-1);
if(!x2748.valid){
continue;
}
cj11array[0]=((-1.0)*(x2748.value));
if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j11valid[0] = j11valid[1] = true;
    j11array[0] = IKacos(cj11array[0]);
    sj11array[0] = IKsin(j11array[0]);
    cj11array[1] = cj11array[0];
    j11array[1] = -j11array[0];
    sj11array[1] = -sj11array[0];
}
else if( isnan(cj11array[0]) )
{
    // probably any value will work
    j11valid[0] = true;
    cj11array[0] = 1; sj11array[0] = 0; j11array[0] = 0;
}
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x2749=IKsin(j11);
IkReal x2750=IKcos(j11);
IkReal x2751=(cj12*r20);
IkReal x2752=(r21*sj12);
IkReal x2753=((1.0)*x2749);
evalcond[0]=(r02*x2749);
evalcond[1]=(cj9+((r02*x2750)));
evalcond[2]=(((x2749*x2751))+(((-1.0)*x2752*x2753)));
evalcond[3]=((((-1.0)*r11*sj12*x2753))+((cj12*r10*x2749)));
evalcond[4]=(((x2750*x2752))+(((-1.0)*x2750*x2751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x2754=IKPowWithIntegerCheck(r02,-1);
if(!x2754.valid){
continue;
}
cj11array[0]=((-1.0)*cj9*(x2754.value));
if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j11valid[0] = j11valid[1] = true;
    j11array[0] = IKacos(cj11array[0]);
    sj11array[0] = IKsin(j11array[0]);
    cj11array[1] = cj11array[0];
    j11array[1] = -j11array[0];
    sj11array[1] = -sj11array[0];
}
else if( isnan(cj11array[0]) )
{
    // probably any value will work
    j11valid[0] = true;
    cj11array[0] = 1; sj11array[0] = 0; j11array[0] = 0;
}
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x2755=IKsin(j11);
IkReal x2756=IKcos(j11);
IkReal x2757=(r11*sj12);
IkReal x2758=(r21*sj12);
IkReal x2759=(cj12*x2755);
IkReal x2760=((1.0)*x2755);
IkReal x2761=((1.0)*cj12*x2756);
evalcond[0]=(r02*x2755);
evalcond[1]=((((-1.0)*x2758*x2760))+((r20*x2759)));
evalcond[2]=(((r10*x2759))+(((-1.0)*x2757*x2760)));
evalcond[3]=(((x2756*x2758))+(((-1.0)*r20*x2761)));
evalcond[4]=((1.0)+(((-1.0)*r10*x2761))+((x2756*x2757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2762=r11*r11;
IkReal x2763=cj12*cj12;
IkReal x2764=(r11*sj12);
IkReal x2765=(cj12*r10);
CheckValue<IkReal> x2766 = IKatan2WithCheck(IkReal(r12),IkReal((x2764+(((-1.0)*x2765)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2766.valid){
continue;
}
CheckValue<IkReal> x2767=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2762))+((x2762*x2763))+(((2.0)*x2764*x2765))+(((-1.0)*x2763*(r10*r10)))+(((-1.0)*(r12*r12))))),-1);
if(!x2767.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2766.value)+(((1.5707963267949)*(x2767.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2768=IKsin(j11);
IkReal x2769=IKcos(j11);
IkReal x2770=(cj12*r00);
IkReal x2771=(r21*sj12);
IkReal x2772=(cj12*r20);
IkReal x2773=(cj12*r10);
IkReal x2774=((1.0)*x2768);
IkReal x2775=((1.0)*x2769);
IkReal x2776=(sj12*x2769);
evalcond[0]=((((-1.0)*r11*sj12*x2774))+((r12*x2769))+((x2768*x2773)));
evalcond[1]=(((x2769*x2771))+(((-1.0)*x2772*x2775))+((r22*x2768)));
evalcond[2]=(((r01*x2776))+(((-1.0)*x2770*x2775))+((r02*x2768)));
evalcond[3]=(cj9+(((-1.0)*r01*sj12*x2774))+((x2768*x2770))+((r02*x2769)));
evalcond[4]=((1.0)+((r12*x2768))+((r11*x2776))+(((-1.0)*x2773*x2775)));
evalcond[5]=((((-1.0)*sj9))+((x2768*x2772))+(((-1.0)*x2771*x2774))+((r22*x2769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2777=IKPowWithIntegerCheck(IKsign((((r20*sj12))+((cj12*r21)))),-1);
if(!x2777.valid){
continue;
}
CheckValue<IkReal> x2778 = IKatan2WithCheck(IkReal((cj9*r12)),IkReal(((((-1.0)*cj12*cj9*r10))+((cj9*r11*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2778.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2777.value)))+(x2778.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2779=IKsin(j11);
IkReal x2780=IKcos(j11);
IkReal x2781=(cj12*r00);
IkReal x2782=(r21*sj12);
IkReal x2783=(cj12*r20);
IkReal x2784=(cj12*r10);
IkReal x2785=((1.0)*x2779);
IkReal x2786=((1.0)*x2780);
IkReal x2787=(sj12*x2780);
evalcond[0]=(((x2779*x2784))+((r12*x2780))+(((-1.0)*r11*sj12*x2785)));
evalcond[1]=(((x2780*x2782))+((r22*x2779))+(((-1.0)*x2783*x2786)));
evalcond[2]=((((-1.0)*x2781*x2786))+((r01*x2787))+((r02*x2779)));
evalcond[3]=(((x2779*x2781))+cj9+((r02*x2780))+(((-1.0)*r01*sj12*x2785)));
evalcond[4]=((1.0)+(((-1.0)*x2784*x2786))+((r11*x2787))+((r12*x2779)));
evalcond[5]=(((x2779*x2783))+(((-1.0)*sj9))+(((-1.0)*x2782*x2785))+((r22*x2780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2788 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r20))+((r21*sj12)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2788.valid){
continue;
}
CheckValue<IkReal> x2789=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x2789.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2788.value)+(((1.5707963267949)*(x2789.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2790=IKsin(j11);
IkReal x2791=IKcos(j11);
IkReal x2792=(cj12*r00);
IkReal x2793=(r21*sj12);
IkReal x2794=(cj12*r20);
IkReal x2795=(cj12*r10);
IkReal x2796=((1.0)*x2790);
IkReal x2797=((1.0)*x2791);
IkReal x2798=(sj12*x2791);
evalcond[0]=(((r12*x2791))+((x2790*x2795))+(((-1.0)*r11*sj12*x2796)));
evalcond[1]=(((x2791*x2793))+((r22*x2790))+(((-1.0)*x2794*x2797)));
evalcond[2]=(((r02*x2790))+((r01*x2798))+(((-1.0)*x2792*x2797)));
evalcond[3]=(cj9+((r02*x2791))+((x2790*x2792))+(((-1.0)*r01*sj12*x2796)));
evalcond[4]=((1.0)+(((-1.0)*x2795*x2797))+((r12*x2790))+((r11*x2798)));
evalcond[5]=((((-1.0)*sj9))+((x2790*x2794))+((r22*x2791))+(((-1.0)*x2793*x2796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x2799=(((r20*sj12))+((cj12*r21)));
j11eval[0]=x2799;
j11eval[1]=IKsign(x2799);
j11eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj12*r00))+((r01*sj12))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x2800=((1.0)*cj12);
IkReal x2801=((((-1.0)*r01*x2800))+(((-1.0)*r00*sj12)));
j11eval[0]=x2801;
j11eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2800))+((r21*sj12))))));
j11eval[2]=IKsign(x2801);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x2802=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x2802;
j11eval[1]=IKsign(x2802);
j11eval[2]=((IKabs(((((-1.0)*cj12*r10*sj9))+((r11*sj12*sj9)))))+(IKabs((r12*sj9))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal x2803=(((r10*sj12))+((cj12*r11)));
j11eval[0]=x2803;
j11eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj12*r20))+((r21*sj12))))));
j11eval[2]=IKsign(x2803);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal x2804=((1.0)*cj12);
IkReal x2805=((((-1.0)*r21*x2804))+(((-1.0)*r20*sj12)));
j11eval[0]=x2805;
j11eval[1]=((IKabs(r12))+(IKabs((((r11*sj12))+(((-1.0)*r10*x2804))))));
j11eval[2]=IKsign(x2805);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal x2806=cj12*cj12;
IkReal x2807=r11*r11;
IkReal x2808=(cj12*r10);
IkReal x2809=(r11*sj12);
IkReal x2810=((r12*r12)+(((-2.0)*x2808*x2809))+(((-1.0)*x2806*x2807))+((x2806*(r10*r10)))+x2807);
j11eval[0]=x2810;
j11eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2808))+x2809))));
j11eval[2]=IKsign(x2810);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2811=cj12*cj12;
IkReal x2812=r11*r11;
IkReal x2813=(r11*sj12);
IkReal x2814=(cj12*r10);
CheckValue<IkReal> x2815 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x2814))+x2813)),IKFAST_ATAN2_MAGTHRESH);
if(!x2815.valid){
continue;
}
CheckValue<IkReal> x2816=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2811*x2812))+(r12*r12)+((x2811*(r10*r10)))+x2812+(((-2.0)*x2813*x2814)))),-1);
if(!x2816.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2815.value)+(((1.5707963267949)*(x2816.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2817=IKsin(j11);
IkReal x2818=IKcos(j11);
IkReal x2819=(cj12*r00);
IkReal x2820=(cj12*r20);
IkReal x2821=(cj12*r10);
IkReal x2822=(sj12*x2818);
IkReal x2823=((1.0)*x2818);
IkReal x2824=((1.0)*sj12*x2817);
evalcond[0]=(((x2817*x2820))+((r22*x2818))+(((-1.0)*r21*x2824)));
evalcond[1]=(((x2817*x2821))+(((-1.0)*r11*x2824))+((r12*x2818)));
evalcond[2]=((((-1.0)*x2820*x2823))+((r22*x2817))+((r21*x2822)));
evalcond[3]=(((r01*x2822))+((r02*x2817))+(((-1.0)*x2819*x2823)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x2824))+((r02*x2818))+((x2817*x2819)));
evalcond[5]=((-1.0)+(((-1.0)*x2821*x2823))+((r12*x2817))+((r11*x2822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2825=((1.0)*cj12);
CheckValue<IkReal> x2826 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2825))+((r11*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2826.valid){
continue;
}
CheckValue<IkReal> x2827=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2825))+(((-1.0)*r20*sj12)))),-1);
if(!x2827.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2826.value)+(((1.5707963267949)*(x2827.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2828=IKsin(j11);
IkReal x2829=IKcos(j11);
IkReal x2830=(cj12*r00);
IkReal x2831=(cj12*r20);
IkReal x2832=(cj12*r10);
IkReal x2833=(sj12*x2829);
IkReal x2834=((1.0)*x2829);
IkReal x2835=((1.0)*sj12*x2828);
evalcond[0]=(((x2828*x2831))+(((-1.0)*r21*x2835))+((r22*x2829)));
evalcond[1]=(((x2828*x2832))+(((-1.0)*r11*x2835))+((r12*x2829)));
evalcond[2]=(((r22*x2828))+((r21*x2833))+(((-1.0)*x2831*x2834)));
evalcond[3]=(((r02*x2828))+((r01*x2833))+(((-1.0)*x2830*x2834)));
evalcond[4]=((-1.0)+((r02*x2829))+(((-1.0)*r01*x2835))+((x2828*x2830)));
evalcond[5]=((-1.0)+(((-1.0)*x2832*x2834))+((r11*x2833))+((r12*x2828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2836 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj12*r20))+((r21*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2836.valid){
continue;
}
CheckValue<IkReal> x2837=IKPowWithIntegerCheck(IKsign((((r10*sj12))+((cj12*r11)))),-1);
if(!x2837.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2836.value)+(((1.5707963267949)*(x2837.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2838=IKsin(j11);
IkReal x2839=IKcos(j11);
IkReal x2840=(cj12*r00);
IkReal x2841=(cj12*r20);
IkReal x2842=(cj12*r10);
IkReal x2843=(sj12*x2839);
IkReal x2844=((1.0)*x2839);
IkReal x2845=((1.0)*sj12*x2838);
evalcond[0]=((((-1.0)*r21*x2845))+((x2838*x2841))+((r22*x2839)));
evalcond[1]=(((r12*x2839))+(((-1.0)*r11*x2845))+((x2838*x2842)));
evalcond[2]=(((r21*x2843))+(((-1.0)*x2841*x2844))+((r22*x2838)));
evalcond[3]=((((-1.0)*x2840*x2844))+((r02*x2838))+((r01*x2843)));
evalcond[4]=((-1.0)+((r02*x2839))+(((-1.0)*r01*x2845))+((x2838*x2840)));
evalcond[5]=((-1.0)+((r12*x2838))+(((-1.0)*x2842*x2844))+((r11*x2843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x2846=(((r20*sj12))+((cj12*r21)));
j11eval[0]=x2846;
j11eval[1]=IKsign(x2846);
j11eval[2]=((IKabs(r12))+(IKabs((((r11*sj12))+(((-1.0)*cj12*r10))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x2847=((1.0)*cj12);
IkReal x2848=((((-1.0)*r11*x2847))+(((-1.0)*r10*sj12)));
j11eval[0]=x2848;
j11eval[1]=IKsign(x2848);
j11eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2847))+((r21*sj12))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x2849=cj12*cj12;
IkReal x2850=r11*r11;
IkReal x2851=(cj12*r10);
IkReal x2852=(r11*sj12);
IkReal x2853=((r12*r12)+(((-2.0)*x2851*x2852))+x2850+(((-1.0)*x2849*x2850))+((x2849*(r10*r10))));
j11eval[0]=x2853;
j11eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2851))+x2852))));
j11eval[2]=IKsign(x2853);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2854=cj12*cj12;
IkReal x2855=r11*r11;
IkReal x2856=(r11*sj12);
IkReal x2857=(cj12*r10);
CheckValue<IkReal> x2858 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x2857))+x2856)),IKFAST_ATAN2_MAGTHRESH);
if(!x2858.valid){
continue;
}
CheckValue<IkReal> x2859=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2854*x2855))+(r12*r12)+((x2854*(r10*r10)))+(((-2.0)*x2856*x2857))+x2855)),-1);
if(!x2859.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2858.value)+(((1.5707963267949)*(x2859.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2860=IKsin(j11);
IkReal x2861=IKcos(j11);
IkReal x2862=(cj12*r00);
IkReal x2863=(cj12*r20);
IkReal x2864=(cj12*r10);
IkReal x2865=(sj12*x2861);
IkReal x2866=((1.0)*x2861);
IkReal x2867=((1.0)*sj12*x2860);
evalcond[0]=(((r22*x2861))+(((-1.0)*r21*x2867))+((x2860*x2863)));
evalcond[1]=(((r12*x2861))+((x2860*x2864))+(((-1.0)*r11*x2867)));
evalcond[2]=(((r22*x2860))+((r21*x2865))+(((-1.0)*x2863*x2866)));
evalcond[3]=((((-1.0)*x2862*x2866))+((r02*x2860))+((r01*x2865)));
evalcond[4]=((1.0)+((r02*x2861))+(((-1.0)*r01*x2867))+((x2860*x2862)));
evalcond[5]=((-1.0)+(((-1.0)*x2864*x2866))+((r12*x2860))+((r11*x2865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2868=((1.0)*cj12);
CheckValue<IkReal> x2869 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj12))+(((-1.0)*r20*x2868)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2869.valid){
continue;
}
CheckValue<IkReal> x2870=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj12))+(((-1.0)*r11*x2868)))),-1);
if(!x2870.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2869.value)+(((1.5707963267949)*(x2870.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2871=IKsin(j11);
IkReal x2872=IKcos(j11);
IkReal x2873=(cj12*r00);
IkReal x2874=(cj12*r20);
IkReal x2875=(cj12*r10);
IkReal x2876=(sj12*x2872);
IkReal x2877=((1.0)*x2872);
IkReal x2878=((1.0)*sj12*x2871);
evalcond[0]=(((r22*x2872))+((x2871*x2874))+(((-1.0)*r21*x2878)));
evalcond[1]=(((x2871*x2875))+((r12*x2872))+(((-1.0)*r11*x2878)));
evalcond[2]=(((r22*x2871))+((r21*x2876))+(((-1.0)*x2874*x2877)));
evalcond[3]=(((r01*x2876))+((r02*x2871))+(((-1.0)*x2873*x2877)));
evalcond[4]=((1.0)+((r02*x2872))+((x2871*x2873))+(((-1.0)*r01*x2878)));
evalcond[5]=((-1.0)+((r11*x2876))+((r12*x2871))+(((-1.0)*x2875*x2877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2879 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj12))+(((-1.0)*cj12*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2879.valid){
continue;
}
CheckValue<IkReal> x2880=IKPowWithIntegerCheck(IKsign((((r20*sj12))+((cj12*r21)))),-1);
if(!x2880.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2879.value)+(((1.5707963267949)*(x2880.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2881=IKsin(j11);
IkReal x2882=IKcos(j11);
IkReal x2883=(cj12*r00);
IkReal x2884=(cj12*r20);
IkReal x2885=(cj12*r10);
IkReal x2886=(sj12*x2882);
IkReal x2887=((1.0)*x2882);
IkReal x2888=((1.0)*sj12*x2881);
evalcond[0]=(((r22*x2882))+((x2881*x2884))+(((-1.0)*r21*x2888)));
evalcond[1]=((((-1.0)*r11*x2888))+((x2881*x2885))+((r12*x2882)));
evalcond[2]=(((r22*x2881))+((r21*x2886))+(((-1.0)*x2884*x2887)));
evalcond[3]=((((-1.0)*x2883*x2887))+((r01*x2886))+((r02*x2881)));
evalcond[4]=((1.0)+(((-1.0)*r01*x2888))+((x2881*x2883))+((r02*x2882)));
evalcond[5]=((-1.0)+((r11*x2886))+(((-1.0)*x2885*x2887))+((r12*x2881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
IkReal x2889=((-1.0)*pz);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2889);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2889);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j11eval[0]=r22;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
IkReal x2890=((-1.0)*pz);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2890);
rxp1_0=(pz*r11);
rxp1_1=(r01*x2890);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j11eval[0]=(((r11*sj12))+(((-1.0)*cj12*r10)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x2891=IKPowWithIntegerCheck((((r11*sj12))+(((-1.0)*cj12*r10))),-1);
if(!x2891.valid){
continue;
}
cj11array[0]=x2891.value;
if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j11valid[0] = j11valid[1] = true;
    j11array[0] = IKacos(cj11array[0]);
    sj11array[0] = IKsin(j11array[0]);
    cj11array[1] = cj11array[0];
    j11array[1] = -j11array[0];
    sj11array[1] = -sj11array[0];
}
else if( isnan(cj11array[0]) )
{
    // probably any value will work
    j11valid[0] = true;
    cj11array[0] = 1; sj11array[0] = 0; j11array[0] = 0;
}
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x2892=IKsin(j11);
IkReal x2893=IKcos(j11);
IkReal x2894=(cj12*r00);
IkReal x2895=(r01*sj12);
IkReal x2896=((1.0)*x2892);
evalcond[0]=(r22*x2892);
evalcond[1]=((((-1.0)*sj9))+((r22*x2893)));
evalcond[2]=((((-1.0)*x2895*x2896))+((x2892*x2894)));
evalcond[3]=((((-1.0)*r11*sj12*x2896))+((cj12*r10*x2892)));
evalcond[4]=((((-1.0)*x2893*x2894))+((x2893*x2895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x2897=IKPowWithIntegerCheck(r22,-1);
if(!x2897.valid){
continue;
}
cj11array[0]=(sj9*(x2897.value));
if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j11valid[0] = j11valid[1] = true;
    j11array[0] = IKacos(cj11array[0]);
    sj11array[0] = IKsin(j11array[0]);
    cj11array[1] = cj11array[0];
    j11array[1] = -j11array[0];
    sj11array[1] = -sj11array[0];
}
else if( isnan(cj11array[0]) )
{
    // probably any value will work
    j11valid[0] = true;
    cj11array[0] = 1; sj11array[0] = 0; j11array[0] = 0;
}
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x2898=IKsin(j11);
IkReal x2899=IKcos(j11);
IkReal x2900=(cj12*r00);
IkReal x2901=(cj12*r10);
IkReal x2902=((1.0)*x2899);
IkReal x2903=(sj12*x2899);
IkReal x2904=((1.0)*sj12*x2898);
evalcond[0]=(r22*x2898);
evalcond[1]=((((-1.0)*r01*x2904))+((x2898*x2900)));
evalcond[2]=(((x2898*x2901))+(((-1.0)*r11*x2904)));
evalcond[3]=((((-1.0)*x2900*x2902))+((r01*x2903)));
evalcond[4]=((-1.0)+(((-1.0)*x2901*x2902))+((r11*x2903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2905 = IKatan2WithCheck(IkReal((r12*sj9)),IkReal(((((-1.0)*cj12*r10*sj9))+((r11*sj12*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2905.valid){
continue;
}
CheckValue<IkReal> x2906=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x2906.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2905.value)+(((1.5707963267949)*(x2906.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2907=IKsin(j11);
IkReal x2908=IKcos(j11);
IkReal x2909=(cj12*r00);
IkReal x2910=(r21*sj12);
IkReal x2911=(cj12*r20);
IkReal x2912=(cj12*r10);
IkReal x2913=((1.0)*x2907);
IkReal x2914=((1.0)*x2908);
IkReal x2915=(sj12*x2908);
evalcond[0]=(((x2907*x2912))+((r12*x2908))+(((-1.0)*r11*sj12*x2913)));
evalcond[1]=(((r22*x2907))+(((-1.0)*x2911*x2914))+((x2908*x2910)));
evalcond[2]=(((r02*x2907))+((r01*x2915))+(((-1.0)*x2909*x2914)));
evalcond[3]=((-1.0)+((r11*x2915))+(((-1.0)*x2912*x2914))+((r12*x2907)));
evalcond[4]=((((-1.0)*sj9))+((r22*x2908))+((x2907*x2911))+(((-1.0)*x2910*x2913)));
evalcond[5]=(((r02*x2908))+((x2907*x2909))+(((-1.0)*r01*sj12*x2913))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2916=((1.0)*cj12);
CheckValue<IkReal> x2917=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj12))+(((-1.0)*r01*x2916)))),-1);
if(!x2917.valid){
continue;
}
CheckValue<IkReal> x2918 = IKatan2WithCheck(IkReal((((r21*sj12))+(((-1.0)*r20*x2916)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2918.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2917.value)))+(x2918.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2919=IKsin(j11);
IkReal x2920=IKcos(j11);
IkReal x2921=(cj12*r00);
IkReal x2922=(r21*sj12);
IkReal x2923=(cj12*r20);
IkReal x2924=(cj12*r10);
IkReal x2925=((1.0)*x2919);
IkReal x2926=((1.0)*x2920);
IkReal x2927=(sj12*x2920);
evalcond[0]=(((x2919*x2924))+(((-1.0)*r11*sj12*x2925))+((r12*x2920)));
evalcond[1]=((((-1.0)*x2923*x2926))+((x2920*x2922))+((r22*x2919)));
evalcond[2]=((((-1.0)*x2921*x2926))+((r01*x2927))+((r02*x2919)));
evalcond[3]=((-1.0)+((r12*x2919))+(((-1.0)*x2924*x2926))+((r11*x2927)));
evalcond[4]=(((r22*x2920))+(((-1.0)*sj9))+((x2919*x2923))+(((-1.0)*x2922*x2925)));
evalcond[5]=((((-1.0)*r01*sj12*x2925))+((x2919*x2921))+((r02*x2920))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2928 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r00))+((r01*sj12)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2928.valid){
continue;
}
CheckValue<IkReal> x2929=IKPowWithIntegerCheck(IKsign((((r20*sj12))+((cj12*r21)))),-1);
if(!x2929.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2928.value)+(((1.5707963267949)*(x2929.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2930=IKsin(j11);
IkReal x2931=IKcos(j11);
IkReal x2932=(cj12*r00);
IkReal x2933=(r21*sj12);
IkReal x2934=(cj12*r20);
IkReal x2935=(cj12*r10);
IkReal x2936=((1.0)*x2930);
IkReal x2937=((1.0)*x2931);
IkReal x2938=(sj12*x2931);
evalcond[0]=((((-1.0)*r11*sj12*x2936))+((r12*x2931))+((x2930*x2935)));
evalcond[1]=(((r22*x2930))+(((-1.0)*x2934*x2937))+((x2931*x2933)));
evalcond[2]=(((r02*x2930))+((r01*x2938))+(((-1.0)*x2932*x2937)));
evalcond[3]=((-1.0)+(((-1.0)*x2935*x2937))+((r12*x2930))+((r11*x2938)));
evalcond[4]=((((-1.0)*x2933*x2936))+(((-1.0)*sj9))+((r22*x2931))+((x2930*x2934)));
evalcond[5]=(((r02*x2931))+(((-1.0)*r01*sj12*x2936))+((x2930*x2932))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j7), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x2939=(((r20*sj12))+((cj12*r21)));
j11eval[0]=x2939;
j11eval[1]=IKsign(x2939);
j11eval[2]=((IKabs((cj9*r12)))+(IKabs(((((-1.0)*cj12*cj9*r10))+((cj9*r11*sj12))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x2940=((1.0)*cj12);
IkReal x2941=((((-1.0)*r01*x2940))+(((-1.0)*r00*sj12)));
j11eval[0]=x2941;
j11eval[1]=IKsign(x2941);
j11eval[2]=((IKabs(((((-1.0)*r10*sj9*x2940))+((r11*sj12*sj9)))))+(IKabs((r12*sj9))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x2942=cj12*cj12;
IkReal x2943=r11*r11;
IkReal x2944=(cj12*r10);
IkReal x2945=(r11*sj12);
IkReal x2946=((r12*r12)+(((-2.0)*x2944*x2945))+((x2942*(r10*r10)))+(((-1.0)*x2942*x2943))+x2943);
j11eval[0]=x2946;
j11eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2944))+x2945))));
j11eval[2]=IKsign(x2946);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal x2947=(((r20*sj12))+((cj12*r21)));
j11eval[0]=x2947;
j11eval[1]=IKsign(x2947);
j11eval[2]=((IKabs(r12))+(IKabs((((r11*sj12))+(((-1.0)*cj12*r10))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal x2948=((1.0)*cj12);
IkReal x2949=((((-1.0)*r11*x2948))+(((-1.0)*r10*sj12)));
j11eval[0]=x2949;
j11eval[1]=IKsign(x2949);
j11eval[2]=((IKabs(((((-1.0)*r20*x2948))+((r21*sj12)))))+(IKabs(r22)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal x2950=cj12*cj12;
IkReal x2951=r11*r11;
IkReal x2952=(cj12*r10);
IkReal x2953=(r11*sj12);
IkReal x2954=((r12*r12)+(((-2.0)*x2952*x2953))+((x2950*(r10*r10)))+(((-1.0)*x2950*x2951))+x2951);
j11eval[0]=x2954;
j11eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2952))+x2953))));
j11eval[2]=IKsign(x2954);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2955=cj12*cj12;
IkReal x2956=r11*r11;
IkReal x2957=(r11*sj12);
IkReal x2958=(cj12*r10);
CheckValue<IkReal> x2959 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x2958))+x2957)),IKFAST_ATAN2_MAGTHRESH);
if(!x2959.valid){
continue;
}
CheckValue<IkReal> x2960=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x2955*(r10*r10)))+(((-2.0)*x2957*x2958))+x2956+(((-1.0)*x2955*x2956)))),-1);
if(!x2960.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2959.value)+(((1.5707963267949)*(x2960.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2961=IKsin(j11);
IkReal x2962=IKcos(j11);
IkReal x2963=(cj12*r00);
IkReal x2964=(cj12*r20);
IkReal x2965=(cj12*r10);
IkReal x2966=(sj12*x2962);
IkReal x2967=((1.0)*x2962);
IkReal x2968=((1.0)*sj12*x2961);
evalcond[0]=(((r22*x2962))+((x2961*x2964))+(((-1.0)*r21*x2968)));
evalcond[1]=((((-1.0)*r11*x2968))+((x2961*x2965))+((r12*x2962)));
evalcond[2]=(((r21*x2966))+((r22*x2961))+(((-1.0)*x2964*x2967)));
evalcond[3]=((((-1.0)*x2963*x2967))+((r02*x2961))+((r01*x2966)));
evalcond[4]=((1.0)+((r02*x2962))+((x2961*x2963))+(((-1.0)*r01*x2968)));
evalcond[5]=((-1.0)+(((-1.0)*x2965*x2967))+((r11*x2966))+((r12*x2961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2969=((1.0)*cj12);
CheckValue<IkReal> x2970 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2969))+((r21*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2970.valid){
continue;
}
CheckValue<IkReal> x2971=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2969))+(((-1.0)*r10*sj12)))),-1);
if(!x2971.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2970.value)+(((1.5707963267949)*(x2971.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2972=IKsin(j11);
IkReal x2973=IKcos(j11);
IkReal x2974=(cj12*r00);
IkReal x2975=(cj12*r20);
IkReal x2976=(cj12*r10);
IkReal x2977=(sj12*x2973);
IkReal x2978=((1.0)*x2973);
IkReal x2979=((1.0)*sj12*x2972);
evalcond[0]=((((-1.0)*r21*x2979))+((r22*x2973))+((x2972*x2975)));
evalcond[1]=((((-1.0)*r11*x2979))+((r12*x2973))+((x2972*x2976)));
evalcond[2]=((((-1.0)*x2975*x2978))+((r22*x2972))+((r21*x2977)));
evalcond[3]=(((r02*x2972))+((r01*x2977))+(((-1.0)*x2974*x2978)));
evalcond[4]=((1.0)+((r02*x2973))+(((-1.0)*r01*x2979))+((x2972*x2974)));
evalcond[5]=((-1.0)+(((-1.0)*x2976*x2978))+((r12*x2972))+((r11*x2977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x2980 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj12))+(((-1.0)*cj12*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2980.valid){
continue;
}
CheckValue<IkReal> x2981=IKPowWithIntegerCheck(IKsign((((r20*sj12))+((cj12*r21)))),-1);
if(!x2981.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x2980.value)+(((1.5707963267949)*(x2981.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x2982=IKsin(j11);
IkReal x2983=IKcos(j11);
IkReal x2984=(cj12*r00);
IkReal x2985=(cj12*r20);
IkReal x2986=(cj12*r10);
IkReal x2987=(sj12*x2983);
IkReal x2988=((1.0)*x2983);
IkReal x2989=((1.0)*sj12*x2982);
evalcond[0]=((((-1.0)*r21*x2989))+((x2982*x2985))+((r22*x2983)));
evalcond[1]=((((-1.0)*r11*x2989))+((r12*x2983))+((x2982*x2986)));
evalcond[2]=((((-1.0)*x2985*x2988))+((r22*x2982))+((r21*x2987)));
evalcond[3]=((((-1.0)*x2984*x2988))+((r01*x2987))+((r02*x2982)));
evalcond[4]=((1.0)+(((-1.0)*r01*x2989))+((x2982*x2984))+((r02*x2983)));
evalcond[5]=((-1.0)+((r11*x2987))+((r12*x2982))+(((-1.0)*x2986*x2988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x2990=(((r10*sj12))+((cj12*r11)));
j11eval[0]=x2990;
j11eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj12*r20))+((r21*sj12))))));
j11eval[2]=IKsign(x2990);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x2991=((1.0)*cj12);
IkReal x2992=((((-1.0)*r20*sj12))+(((-1.0)*r21*x2991)));
j11eval[0]=x2992;
j11eval[1]=((IKabs(r12))+(IKabs((((r11*sj12))+(((-1.0)*r10*x2991))))));
j11eval[2]=IKsign(x2992);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x2993=cj12*cj12;
IkReal x2994=r11*r11;
IkReal x2995=(cj12*r10);
IkReal x2996=(r11*sj12);
IkReal x2997=((r12*r12)+(((-1.0)*x2993*x2994))+(((-2.0)*x2995*x2996))+((x2993*(r10*r10)))+x2994);
j11eval[0]=x2997;
j11eval[1]=((IKabs(((((-1.0)*x2995))+x2996)))+(IKabs(r12)));
j11eval[2]=IKsign(x2997);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x2998=cj12*cj12;
IkReal x2999=r11*r11;
IkReal x3000=(r11*sj12);
IkReal x3001=(cj12*r10);
CheckValue<IkReal> x3002=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x3000*x3001))+(((-1.0)*x2998*x2999))+((x2998*(r10*r10)))+x2999)),-1);
if(!x3002.valid){
continue;
}
CheckValue<IkReal> x3003 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x3001))+x3000)),IKFAST_ATAN2_MAGTHRESH);
if(!x3003.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3002.value)))+(x3003.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3004=IKsin(j11);
IkReal x3005=IKcos(j11);
IkReal x3006=(cj12*r00);
IkReal x3007=(cj12*r20);
IkReal x3008=(cj12*r10);
IkReal x3009=(sj12*x3005);
IkReal x3010=((1.0)*x3005);
IkReal x3011=((1.0)*sj12*x3004);
evalcond[0]=(((r22*x3005))+((x3004*x3007))+(((-1.0)*r21*x3011)));
evalcond[1]=(((r12*x3005))+(((-1.0)*r11*x3011))+((x3004*x3008)));
evalcond[2]=(((r22*x3004))+(((-1.0)*x3007*x3010))+((r21*x3009)));
evalcond[3]=(((r01*x3009))+(((-1.0)*x3006*x3010))+((r02*x3004)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x3011))+((x3004*x3006))+((r02*x3005)));
evalcond[5]=((-1.0)+((r12*x3004))+((r11*x3009))+(((-1.0)*x3008*x3010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3012=((1.0)*cj12);
CheckValue<IkReal> x3013=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj12))+(((-1.0)*r21*x3012)))),-1);
if(!x3013.valid){
continue;
}
CheckValue<IkReal> x3014 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x3012))+((r11*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3014.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3013.value)))+(x3014.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3015=IKsin(j11);
IkReal x3016=IKcos(j11);
IkReal x3017=(cj12*r00);
IkReal x3018=(cj12*r20);
IkReal x3019=(cj12*r10);
IkReal x3020=(sj12*x3016);
IkReal x3021=((1.0)*x3016);
IkReal x3022=((1.0)*sj12*x3015);
evalcond[0]=(((x3015*x3018))+((r22*x3016))+(((-1.0)*r21*x3022)));
evalcond[1]=(((x3015*x3019))+(((-1.0)*r11*x3022))+((r12*x3016)));
evalcond[2]=((((-1.0)*x3018*x3021))+((r22*x3015))+((r21*x3020)));
evalcond[3]=(((r01*x3020))+(((-1.0)*x3017*x3021))+((r02*x3015)));
evalcond[4]=((-1.0)+((x3015*x3017))+(((-1.0)*r01*x3022))+((r02*x3016)));
evalcond[5]=((-1.0)+((r11*x3020))+(((-1.0)*x3019*x3021))+((r12*x3015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x3023 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj12*r20))+((r21*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3023.valid){
continue;
}
CheckValue<IkReal> x3024=IKPowWithIntegerCheck(IKsign((((r10*sj12))+((cj12*r11)))),-1);
if(!x3024.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x3023.value)+(((1.5707963267949)*(x3024.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3025=IKsin(j11);
IkReal x3026=IKcos(j11);
IkReal x3027=(cj12*r00);
IkReal x3028=(cj12*r20);
IkReal x3029=(cj12*r10);
IkReal x3030=(sj12*x3026);
IkReal x3031=((1.0)*x3026);
IkReal x3032=((1.0)*sj12*x3025);
evalcond[0]=((((-1.0)*r21*x3032))+((r22*x3026))+((x3025*x3028)));
evalcond[1]=(((r12*x3026))+(((-1.0)*r11*x3032))+((x3025*x3029)));
evalcond[2]=((((-1.0)*x3028*x3031))+((r21*x3030))+((r22*x3025)));
evalcond[3]=(((r02*x3025))+((r01*x3030))+(((-1.0)*x3027*x3031)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x3032))+((r02*x3026))+((x3025*x3027)));
evalcond[5]=((-1.0)+((r12*x3025))+(((-1.0)*x3029*x3031))+((r11*x3030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x3033=(((r10*sj12))+((cj12*r11)));
j11eval[0]=x3033;
j11eval[1]=IKsign(x3033);
j11eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj12*r00))+((r01*sj12))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x3034=((1.0)*cj12);
IkReal x3035=((((-1.0)*r01*x3034))+(((-1.0)*r00*sj12)));
j11eval[0]=x3035;
j11eval[1]=((IKabs((((r11*sj12))+(((-1.0)*r10*x3034)))))+(IKabs(r12)));
j11eval[2]=IKsign(x3035);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x3036=cj12*cj12;
IkReal x3037=r11*r11;
IkReal x3038=(cj12*r10);
IkReal x3039=(r11*sj12);
IkReal x3040=((r12*r12)+x3037+((x3036*(r10*r10)))+(((-2.0)*x3038*x3039))+(((-1.0)*x3036*x3037)));
j11eval[0]=x3040;
j11eval[1]=((IKabs(r12))+(IKabs((x3039+(((-1.0)*x3038))))));
j11eval[2]=IKsign(x3040);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3041=cj12*cj12;
IkReal x3042=r11*r11;
IkReal x3043=(r11*sj12);
IkReal x3044=(cj12*r10);
CheckValue<IkReal> x3045 = IKatan2WithCheck(IkReal(r12),IkReal((x3043+(((-1.0)*x3044)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3045.valid){
continue;
}
CheckValue<IkReal> x3046=IKPowWithIntegerCheck(IKsign(((r12*r12)+x3042+(((-2.0)*x3043*x3044))+((x3041*(r10*r10)))+(((-1.0)*x3041*x3042)))),-1);
if(!x3046.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x3045.value)+(((1.5707963267949)*(x3046.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3047=IKsin(j11);
IkReal x3048=IKcos(j11);
IkReal x3049=(cj12*r00);
IkReal x3050=(r21*sj12);
IkReal x3051=(cj12*r20);
IkReal x3052=(cj12*r10);
IkReal x3053=((1.0)*x3047);
IkReal x3054=((1.0)*x3048);
IkReal x3055=(sj12*x3048);
evalcond[0]=(((x3047*x3049))+(((-1.0)*r01*sj12*x3053))+((r02*x3048)));
evalcond[1]=(((x3047*x3052))+((r12*x3048))+(((-1.0)*r11*sj12*x3053)));
evalcond[2]=(((x3048*x3050))+((r22*x3047))+(((-1.0)*x3051*x3054)));
evalcond[3]=(((r01*x3055))+((r02*x3047))+(((-1.0)*x3049*x3054)));
evalcond[4]=((1.0)+((r22*x3048))+(((-1.0)*x3050*x3053))+((x3047*x3051)));
evalcond[5]=((-1.0)+(((-1.0)*x3052*x3054))+((r11*x3055))+((r12*x3047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3056=((1.0)*cj12);
CheckValue<IkReal> x3057=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3056))+(((-1.0)*r00*sj12)))),-1);
if(!x3057.valid){
continue;
}
CheckValue<IkReal> x3058 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj12))+(((-1.0)*r10*x3056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3058.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3057.value)))+(x3058.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3059=IKsin(j11);
IkReal x3060=IKcos(j11);
IkReal x3061=(cj12*r00);
IkReal x3062=(r21*sj12);
IkReal x3063=(cj12*r20);
IkReal x3064=(cj12*r10);
IkReal x3065=((1.0)*x3059);
IkReal x3066=((1.0)*x3060);
IkReal x3067=(sj12*x3060);
evalcond[0]=((((-1.0)*r01*sj12*x3065))+((x3059*x3061))+((r02*x3060)));
evalcond[1]=((((-1.0)*r11*sj12*x3065))+((x3059*x3064))+((r12*x3060)));
evalcond[2]=((((-1.0)*x3063*x3066))+((r22*x3059))+((x3060*x3062)));
evalcond[3]=(((r02*x3059))+((r01*x3067))+(((-1.0)*x3061*x3066)));
evalcond[4]=((1.0)+((r22*x3060))+(((-1.0)*x3062*x3065))+((x3059*x3063)));
evalcond[5]=((-1.0)+((r12*x3059))+((r11*x3067))+(((-1.0)*x3064*x3066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x3068 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj12*r00))+((r01*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3068.valid){
continue;
}
CheckValue<IkReal> x3069=IKPowWithIntegerCheck(IKsign((((r10*sj12))+((cj12*r11)))),-1);
if(!x3069.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x3068.value)+(((1.5707963267949)*(x3069.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3070=IKsin(j11);
IkReal x3071=IKcos(j11);
IkReal x3072=(cj12*r00);
IkReal x3073=(r21*sj12);
IkReal x3074=(cj12*r20);
IkReal x3075=(cj12*r10);
IkReal x3076=((1.0)*x3070);
IkReal x3077=((1.0)*x3071);
IkReal x3078=(sj12*x3071);
evalcond[0]=((((-1.0)*r01*sj12*x3076))+((x3070*x3072))+((r02*x3071)));
evalcond[1]=((((-1.0)*r11*sj12*x3076))+((r12*x3071))+((x3070*x3075)));
evalcond[2]=((((-1.0)*x3074*x3077))+((r22*x3070))+((x3071*x3073)));
evalcond[3]=(((r01*x3078))+(((-1.0)*x3072*x3077))+((r02*x3070)));
evalcond[4]=((1.0)+(((-1.0)*x3073*x3076))+((r22*x3071))+((x3070*x3074)));
evalcond[5]=((-1.0)+((r12*x3070))+((r11*x3078))+(((-1.0)*x3075*x3077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x3079=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x3079;
j11eval[1]=((IKabs(r12))+(IKabs((((r11*sj12))+(((-1.0)*cj12*r10))))));
j11eval[2]=IKsign(x3079);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x3080=((1.0)*cj12);
IkReal x3081=((((-1.0)*r10*sj12))+(((-1.0)*r11*x3080)));
j11eval[0]=x3081;
j11eval[1]=IKsign(x3081);
j11eval[2]=((IKabs((((r01*sj12))+(((-1.0)*r00*x3080)))))+(IKabs(r02)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x3082=cj12*cj12;
IkReal x3083=r11*r11;
IkReal x3084=(cj12*r10);
IkReal x3085=(r11*sj12);
IkReal x3086=((r12*r12)+x3083+((x3082*(r10*r10)))+(((-1.0)*x3082*x3083))+(((-2.0)*x3084*x3085)));
j11eval[0]=x3086;
j11eval[1]=((IKabs(r12))+(IKabs((x3085+(((-1.0)*x3084))))));
j11eval[2]=IKsign(x3086);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3087=cj12*cj12;
IkReal x3088=r11*r11;
IkReal x3089=(r11*sj12);
IkReal x3090=(cj12*r10);
CheckValue<IkReal> x3091 = IKatan2WithCheck(IkReal(r12),IkReal((x3089+(((-1.0)*x3090)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3091.valid){
continue;
}
CheckValue<IkReal> x3092=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x3087*x3088))+x3088+(((-2.0)*x3089*x3090))+((x3087*(r10*r10))))),-1);
if(!x3092.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x3091.value)+(((1.5707963267949)*(x3092.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3093=IKsin(j11);
IkReal x3094=IKcos(j11);
IkReal x3095=(cj12*r00);
IkReal x3096=(r21*sj12);
IkReal x3097=(cj12*r20);
IkReal x3098=(cj12*r10);
IkReal x3099=((1.0)*x3093);
IkReal x3100=((1.0)*x3094);
IkReal x3101=(sj12*x3094);
evalcond[0]=((((-1.0)*r01*sj12*x3099))+((r02*x3094))+((x3093*x3095)));
evalcond[1]=((((-1.0)*r11*sj12*x3099))+((x3093*x3098))+((r12*x3094)));
evalcond[2]=((((-1.0)*x3097*x3100))+((x3094*x3096))+((r22*x3093)));
evalcond[3]=(((r02*x3093))+(((-1.0)*x3095*x3100))+((r01*x3101)));
evalcond[4]=((-1.0)+(((-1.0)*x3096*x3099))+((x3093*x3097))+((r22*x3094)));
evalcond[5]=((-1.0)+((r11*x3101))+(((-1.0)*x3098*x3100))+((r12*x3093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3102=((1.0)*cj12);
CheckValue<IkReal> x3103=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3102))+(((-1.0)*r10*sj12)))),-1);
if(!x3103.valid){
continue;
}
CheckValue<IkReal> x3104 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x3102))+((r01*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3104.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3103.value)))+(x3104.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3105=IKsin(j11);
IkReal x3106=IKcos(j11);
IkReal x3107=(cj12*r00);
IkReal x3108=(r21*sj12);
IkReal x3109=(cj12*r20);
IkReal x3110=(cj12*r10);
IkReal x3111=((1.0)*x3105);
IkReal x3112=((1.0)*x3106);
IkReal x3113=(sj12*x3106);
evalcond[0]=(((r02*x3106))+(((-1.0)*r01*sj12*x3111))+((x3105*x3107)));
evalcond[1]=((((-1.0)*r11*sj12*x3111))+((x3105*x3110))+((r12*x3106)));
evalcond[2]=((((-1.0)*x3109*x3112))+((r22*x3105))+((x3106*x3108)));
evalcond[3]=(((r02*x3105))+((r01*x3113))+(((-1.0)*x3107*x3112)));
evalcond[4]=((-1.0)+((r22*x3106))+(((-1.0)*x3108*x3111))+((x3105*x3109)));
evalcond[5]=((-1.0)+(((-1.0)*x3110*x3112))+((r12*x3105))+((r11*x3113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x3114 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj12))+(((-1.0)*cj12*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3114.valid){
continue;
}
CheckValue<IkReal> x3115=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x3115.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x3114.value)+(((1.5707963267949)*(x3115.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3116=IKsin(j11);
IkReal x3117=IKcos(j11);
IkReal x3118=(cj12*r00);
IkReal x3119=(r21*sj12);
IkReal x3120=(cj12*r20);
IkReal x3121=(cj12*r10);
IkReal x3122=((1.0)*x3116);
IkReal x3123=((1.0)*x3117);
IkReal x3124=(sj12*x3117);
evalcond[0]=(((r02*x3117))+(((-1.0)*r01*sj12*x3122))+((x3116*x3118)));
evalcond[1]=(((x3116*x3121))+((r12*x3117))+(((-1.0)*r11*sj12*x3122)));
evalcond[2]=(((r22*x3116))+(((-1.0)*x3120*x3123))+((x3117*x3119)));
evalcond[3]=(((r01*x3124))+((r02*x3116))+(((-1.0)*x3118*x3123)));
evalcond[4]=((-1.0)+((x3116*x3120))+((r22*x3117))+(((-1.0)*x3119*x3122)));
evalcond[5]=((-1.0)+((r12*x3116))+(((-1.0)*x3121*x3123))+((r11*x3124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
IkReal x3125=((-1.0)*pz);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3125);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3125);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j11eval[0]=r22;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
IkReal x3126=((-1.0)*pz);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3126);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3126);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j11eval[0]=(((r11*sj12))+(((-1.0)*cj12*r10)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x3127=IKPowWithIntegerCheck((((r11*sj12))+(((-1.0)*cj12*r10))),-1);
if(!x3127.valid){
continue;
}
cj11array[0]=x3127.value;
if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j11valid[0] = j11valid[1] = true;
    j11array[0] = IKacos(cj11array[0]);
    sj11array[0] = IKsin(j11array[0]);
    cj11array[1] = cj11array[0];
    j11array[1] = -j11array[0];
    sj11array[1] = -sj11array[0];
}
else if( isnan(cj11array[0]) )
{
    // probably any value will work
    j11valid[0] = true;
    cj11array[0] = 1; sj11array[0] = 0; j11array[0] = 0;
}
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x3128=IKsin(j11);
IkReal x3129=IKcos(j11);
IkReal x3130=(cj12*r00);
IkReal x3131=(r01*sj12);
IkReal x3132=((1.0)*x3128);
evalcond[0]=(r22*x3128);
evalcond[1]=(sj9+((r22*x3129)));
evalcond[2]=((((-1.0)*x3131*x3132))+((x3128*x3130)));
evalcond[3]=(((cj12*r10*x3128))+(((-1.0)*r11*sj12*x3132)));
evalcond[4]=((((-1.0)*x3129*x3130))+((x3129*x3131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x3133=IKPowWithIntegerCheck(r22,-1);
if(!x3133.valid){
continue;
}
cj11array[0]=((-1.0)*sj9*(x3133.value));
if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j11valid[0] = j11valid[1] = true;
    j11array[0] = IKacos(cj11array[0]);
    sj11array[0] = IKsin(j11array[0]);
    cj11array[1] = cj11array[0];
    j11array[1] = -j11array[0];
    sj11array[1] = -sj11array[0];
}
else if( isnan(cj11array[0]) )
{
    // probably any value will work
    j11valid[0] = true;
    cj11array[0] = 1; sj11array[0] = 0; j11array[0] = 0;
}
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x3134=IKsin(j11);
IkReal x3135=IKcos(j11);
IkReal x3136=(cj12*r00);
IkReal x3137=(cj12*r10);
IkReal x3138=((1.0)*x3135);
IkReal x3139=(sj12*x3135);
IkReal x3140=((1.0)*sj12*x3134);
evalcond[0]=(r22*x3134);
evalcond[1]=(((x3134*x3136))+(((-1.0)*r01*x3140)));
evalcond[2]=((((-1.0)*r11*x3140))+((x3134*x3137)));
evalcond[3]=(((r01*x3139))+(((-1.0)*x3136*x3138)));
evalcond[4]=((-1.0)+(((-1.0)*x3137*x3138))+((r11*x3139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3141=cj12*cj12;
IkReal x3142=r11*r11;
IkReal x3143=(r11*sj12);
IkReal x3144=(cj12*r10);
CheckValue<IkReal> x3145 = IKatan2WithCheck(IkReal(r12),IkReal((x3143+(((-1.0)*x3144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3145.valid){
continue;
}
CheckValue<IkReal> x3146=IKPowWithIntegerCheck(IKsign((x3142+(r12*r12)+(((-1.0)*x3141*x3142))+((x3141*(r10*r10)))+(((-2.0)*x3143*x3144)))),-1);
if(!x3146.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x3145.value)+(((1.5707963267949)*(x3146.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3147=IKsin(j11);
IkReal x3148=IKcos(j11);
IkReal x3149=(cj12*r00);
IkReal x3150=(r21*sj12);
IkReal x3151=(cj12*r20);
IkReal x3152=(cj12*r10);
IkReal x3153=((1.0)*x3147);
IkReal x3154=((1.0)*x3148);
IkReal x3155=(sj12*x3148);
evalcond[0]=(((r12*x3148))+((x3147*x3152))+(((-1.0)*r11*sj12*x3153)));
evalcond[1]=(((r22*x3147))+((x3148*x3150))+(((-1.0)*x3151*x3154)));
evalcond[2]=(((r02*x3147))+(((-1.0)*x3149*x3154))+((r01*x3155)));
evalcond[3]=(sj9+((x3147*x3151))+(((-1.0)*x3150*x3153))+((r22*x3148)));
evalcond[4]=(((x3147*x3149))+cj9+((r02*x3148))+(((-1.0)*r01*sj12*x3153)));
evalcond[5]=((-1.0)+((r12*x3147))+((r11*x3155))+(((-1.0)*x3152*x3154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3156=((1.0)*cj12);
CheckValue<IkReal> x3157=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj12))+(((-1.0)*r01*x3156)))),-1);
if(!x3157.valid){
continue;
}
CheckValue<IkReal> x3158 = IKatan2WithCheck(IkReal((r12*sj9)),IkReal((((r11*sj12*sj9))+(((-1.0)*r10*sj9*x3156)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3158.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3157.value)))+(x3158.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3159=IKsin(j11);
IkReal x3160=IKcos(j11);
IkReal x3161=(cj12*r00);
IkReal x3162=(r21*sj12);
IkReal x3163=(cj12*r20);
IkReal x3164=(cj12*r10);
IkReal x3165=((1.0)*x3159);
IkReal x3166=((1.0)*x3160);
IkReal x3167=(sj12*x3160);
evalcond[0]=(((r12*x3160))+(((-1.0)*r11*sj12*x3165))+((x3159*x3164)));
evalcond[1]=(((r22*x3159))+(((-1.0)*x3163*x3166))+((x3160*x3162)));
evalcond[2]=((((-1.0)*x3161*x3166))+((r02*x3159))+((r01*x3167)));
evalcond[3]=((((-1.0)*x3162*x3165))+((r22*x3160))+sj9+((x3159*x3163)));
evalcond[4]=(((r02*x3160))+cj9+(((-1.0)*r01*sj12*x3165))+((x3159*x3161)));
evalcond[5]=((-1.0)+((r11*x3167))+(((-1.0)*x3164*x3166))+((r12*x3159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x3168=IKPowWithIntegerCheck(IKsign((((r20*sj12))+((cj12*r21)))),-1);
if(!x3168.valid){
continue;
}
CheckValue<IkReal> x3169 = IKatan2WithCheck(IkReal((cj9*r12)),IkReal(((((-1.0)*cj12*cj9*r10))+((cj9*r11*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3169.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3168.value)))+(x3169.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3170=IKsin(j11);
IkReal x3171=IKcos(j11);
IkReal x3172=(cj12*r00);
IkReal x3173=(r21*sj12);
IkReal x3174=(cj12*r20);
IkReal x3175=(cj12*r10);
IkReal x3176=((1.0)*x3170);
IkReal x3177=((1.0)*x3171);
IkReal x3178=(sj12*x3171);
evalcond[0]=((((-1.0)*r11*sj12*x3176))+((x3170*x3175))+((r12*x3171)));
evalcond[1]=((((-1.0)*x3174*x3177))+((r22*x3170))+((x3171*x3173)));
evalcond[2]=(((r02*x3170))+(((-1.0)*x3172*x3177))+((r01*x3178)));
evalcond[3]=(sj9+((r22*x3171))+((x3170*x3174))+(((-1.0)*x3173*x3176)));
evalcond[4]=(cj9+((x3170*x3172))+((r02*x3171))+(((-1.0)*r01*sj12*x3176)));
evalcond[5]=((-1.0)+((r11*x3178))+((r12*x3170))+(((-1.0)*x3175*x3177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j7), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x3179=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x3179;
j11eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj12*r20))+((r21*sj12))))));
j11eval[2]=IKsign(x3179);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x3180=((1.0)*cj12);
IkReal x3181=((((-1.0)*r00*sj12))+(((-1.0)*r01*x3180)));
j11eval[0]=x3181;
j11eval[1]=IKsign(x3181);
j11eval[2]=((IKabs((r12*sj9)))+(IKabs((((r11*sj12*sj9))+(((-1.0)*r10*sj9*x3180))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x3182=r11*r11;
IkReal x3183=cj12*cj12;
IkReal x3184=(r11*sj12);
IkReal x3185=(cj12*r10);
IkReal x3186=((((-1.0)*x3183*(r10*r10)))+((x3182*x3183))+(((-1.0)*(r12*r12)))+(((2.0)*x3184*x3185))+(((-1.0)*x3182)));
j11eval[0]=x3186;
j11eval[1]=((IKabs(r12))+(IKabs((x3184+(((-1.0)*x3185))))));
j11eval[2]=IKsign(x3186);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal x3187=(((r10*sj12))+((cj12*r11)));
j11eval[0]=x3187;
j11eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj12*r20))+((r21*sj12))))));
j11eval[2]=IKsign(x3187);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal x3188=((1.0)*cj12);
IkReal x3189=((((-1.0)*r21*x3188))+(((-1.0)*r20*sj12)));
j11eval[0]=x3189;
j11eval[1]=((IKabs(r12))+(IKabs((((r11*sj12))+(((-1.0)*r10*x3188))))));
j11eval[2]=IKsign(x3189);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal x3190=cj12*cj12;
IkReal x3191=(r21*sj12);
IkReal x3192=(r11*r21);
IkReal x3193=(cj12*r20);
IkReal x3194=(((cj12*r10*x3191))+(((-1.0)*r12*r22))+((r11*sj12*x3193))+(((-1.0)*r10*r20*x3190))+((x3190*x3192))+(((-1.0)*x3192)));
j11eval[0]=x3194;
j11eval[1]=((IKabs(r22))+(IKabs((x3191+(((-1.0)*x3193))))));
j11eval[2]=IKsign(x3194);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3195=cj12*cj12;
IkReal x3196=(r21*sj12);
IkReal x3197=(cj12*r20);
IkReal x3198=(r11*r21);
CheckValue<IkReal> x3199=IKPowWithIntegerCheck(IKsign((((cj12*r10*x3196))+(((-1.0)*r12*r22))+((r11*sj12*x3197))+((x3195*x3198))+(((-1.0)*r10*r20*x3195))+(((-1.0)*x3198)))),-1);
if(!x3199.valid){
continue;
}
CheckValue<IkReal> x3200 = IKatan2WithCheck(IkReal(r22),IkReal((x3196+(((-1.0)*x3197)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3200.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3199.value)))+(x3200.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3201=IKsin(j11);
IkReal x3202=IKcos(j11);
IkReal x3203=(cj12*r00);
IkReal x3204=(cj12*r20);
IkReal x3205=(cj12*r10);
IkReal x3206=(sj12*x3202);
IkReal x3207=((1.0)*x3202);
IkReal x3208=((1.0)*sj12*x3201);
evalcond[0]=(((r22*x3202))+((x3201*x3204))+(((-1.0)*r21*x3208)));
evalcond[1]=(((x3201*x3205))+(((-1.0)*r11*x3208))+((r12*x3202)));
evalcond[2]=(((r22*x3201))+(((-1.0)*x3204*x3207))+((r21*x3206)));
evalcond[3]=(((r01*x3206))+(((-1.0)*x3203*x3207))+((r02*x3201)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x3208))+((x3201*x3203))+((r02*x3202)));
evalcond[5]=((1.0)+((r11*x3206))+((r12*x3201))+(((-1.0)*x3205*x3207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3209=((1.0)*cj12);
CheckValue<IkReal> x3210 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj12))+(((-1.0)*r10*x3209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3210.valid){
continue;
}
CheckValue<IkReal> x3211=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj12))+(((-1.0)*r21*x3209)))),-1);
if(!x3211.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x3210.value)+(((1.5707963267949)*(x3211.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3212=IKsin(j11);
IkReal x3213=IKcos(j11);
IkReal x3214=(cj12*r00);
IkReal x3215=(cj12*r20);
IkReal x3216=(cj12*r10);
IkReal x3217=(sj12*x3213);
IkReal x3218=((1.0)*x3213);
IkReal x3219=((1.0)*sj12*x3212);
evalcond[0]=(((x3212*x3215))+((r22*x3213))+(((-1.0)*r21*x3219)));
evalcond[1]=(((x3212*x3216))+((r12*x3213))+(((-1.0)*r11*x3219)));
evalcond[2]=((((-1.0)*x3215*x3218))+((r22*x3212))+((r21*x3217)));
evalcond[3]=(((r01*x3217))+(((-1.0)*x3214*x3218))+((r02*x3212)));
evalcond[4]=((-1.0)+((x3212*x3214))+(((-1.0)*r01*x3219))+((r02*x3213)));
evalcond[5]=((1.0)+((r12*x3212))+(((-1.0)*x3216*x3218))+((r11*x3217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x3220 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj12*r20))+((r21*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3220.valid){
continue;
}
CheckValue<IkReal> x3221=IKPowWithIntegerCheck(IKsign((((r10*sj12))+((cj12*r11)))),-1);
if(!x3221.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x3220.value)+(((1.5707963267949)*(x3221.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3222=IKsin(j11);
IkReal x3223=IKcos(j11);
IkReal x3224=(cj12*r00);
IkReal x3225=(cj12*r20);
IkReal x3226=(cj12*r10);
IkReal x3227=(sj12*x3223);
IkReal x3228=((1.0)*x3223);
IkReal x3229=((1.0)*sj12*x3222);
evalcond[0]=(((x3222*x3225))+((r22*x3223))+(((-1.0)*r21*x3229)));
evalcond[1]=(((r12*x3223))+((x3222*x3226))+(((-1.0)*r11*x3229)));
evalcond[2]=((((-1.0)*x3225*x3228))+((r21*x3227))+((r22*x3222)));
evalcond[3]=(((r02*x3222))+(((-1.0)*x3224*x3228))+((r01*x3227)));
evalcond[4]=((-1.0)+((x3222*x3224))+((r02*x3223))+(((-1.0)*r01*x3229)));
evalcond[5]=((1.0)+((r12*x3222))+((r11*x3227))+(((-1.0)*x3226*x3228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x3230=(((r20*sj12))+((cj12*r21)));
j11eval[0]=x3230;
j11eval[1]=IKsign(x3230);
j11eval[2]=((IKabs(r12))+(IKabs((((r11*sj12))+(((-1.0)*cj12*r10))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x3231=((1.0)*cj12);
IkReal x3232=((((-1.0)*r11*x3231))+(((-1.0)*r10*sj12)));
j11eval[0]=x3232;
j11eval[1]=IKsign(x3232);
j11eval[2]=((IKabs((((r21*sj12))+(((-1.0)*r20*x3231)))))+(IKabs(r22)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x3233=cj12*cj12;
IkReal x3234=(r21*sj12);
IkReal x3235=(r11*r21);
IkReal x3236=(cj12*r20);
IkReal x3237=((((-1.0)*r12*r22))+(((-1.0)*r10*r20*x3233))+(((-1.0)*x3235))+((cj12*r10*x3234))+((x3233*x3235))+((r11*sj12*x3236)));
j11eval[0]=x3237;
j11eval[1]=((IKabs(r22))+(IKabs((x3234+(((-1.0)*x3236))))));
j11eval[2]=IKsign(x3237);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3238=cj12*cj12;
IkReal x3239=(r21*sj12);
IkReal x3240=(cj12*r20);
IkReal x3241=(r11*r21);
CheckValue<IkReal> x3242=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3241))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x3238))+((r11*sj12*x3240))+((x3238*x3241))+((cj12*r10*x3239)))),-1);
if(!x3242.valid){
continue;
}
CheckValue<IkReal> x3243 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x3240))+x3239)),IKFAST_ATAN2_MAGTHRESH);
if(!x3243.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3242.value)))+(x3243.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3244=IKsin(j11);
IkReal x3245=IKcos(j11);
IkReal x3246=(cj12*r00);
IkReal x3247=(cj12*r20);
IkReal x3248=(cj12*r10);
IkReal x3249=(sj12*x3245);
IkReal x3250=((1.0)*x3245);
IkReal x3251=((1.0)*sj12*x3244);
evalcond[0]=(((r22*x3245))+(((-1.0)*r21*x3251))+((x3244*x3247)));
evalcond[1]=(((r12*x3245))+((x3244*x3248))+(((-1.0)*r11*x3251)));
evalcond[2]=(((r22*x3244))+((r21*x3249))+(((-1.0)*x3247*x3250)));
evalcond[3]=(((r01*x3249))+(((-1.0)*x3246*x3250))+((r02*x3244)));
evalcond[4]=((1.0)+((r02*x3245))+((x3244*x3246))+(((-1.0)*r01*x3251)));
evalcond[5]=((1.0)+(((-1.0)*x3248*x3250))+((r12*x3244))+((r11*x3249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3252=((1.0)*cj12);
CheckValue<IkReal> x3253=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj12))+(((-1.0)*r11*x3252)))),-1);
if(!x3253.valid){
continue;
}
CheckValue<IkReal> x3254 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj12))+(((-1.0)*r20*x3252)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3254.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3253.value)))+(x3254.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3255=IKsin(j11);
IkReal x3256=IKcos(j11);
IkReal x3257=(cj12*r00);
IkReal x3258=(cj12*r20);
IkReal x3259=(cj12*r10);
IkReal x3260=(sj12*x3256);
IkReal x3261=((1.0)*x3256);
IkReal x3262=((1.0)*sj12*x3255);
evalcond[0]=((((-1.0)*r21*x3262))+((r22*x3256))+((x3255*x3258)));
evalcond[1]=(((r12*x3256))+(((-1.0)*r11*x3262))+((x3255*x3259)));
evalcond[2]=(((r21*x3260))+((r22*x3255))+(((-1.0)*x3258*x3261)));
evalcond[3]=((((-1.0)*x3257*x3261))+((r01*x3260))+((r02*x3255)));
evalcond[4]=((1.0)+((r02*x3256))+(((-1.0)*r01*x3262))+((x3255*x3257)));
evalcond[5]=((1.0)+((r12*x3255))+((r11*x3260))+(((-1.0)*x3259*x3261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x3263 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj12))+(((-1.0)*cj12*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3263.valid){
continue;
}
CheckValue<IkReal> x3264=IKPowWithIntegerCheck(IKsign((((r20*sj12))+((cj12*r21)))),-1);
if(!x3264.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x3263.value)+(((1.5707963267949)*(x3264.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3265=IKsin(j11);
IkReal x3266=IKcos(j11);
IkReal x3267=(cj12*r00);
IkReal x3268=(cj12*r20);
IkReal x3269=(cj12*r10);
IkReal x3270=(sj12*x3266);
IkReal x3271=((1.0)*x3266);
IkReal x3272=((1.0)*sj12*x3265);
evalcond[0]=(((x3265*x3268))+(((-1.0)*r21*x3272))+((r22*x3266)));
evalcond[1]=(((x3265*x3269))+(((-1.0)*r11*x3272))+((r12*x3266)));
evalcond[2]=((((-1.0)*x3268*x3271))+((r21*x3270))+((r22*x3265)));
evalcond[3]=(((r01*x3270))+((r02*x3265))+(((-1.0)*x3267*x3271)));
evalcond[4]=((1.0)+((x3265*x3267))+(((-1.0)*r01*x3272))+((r02*x3266)));
evalcond[5]=((1.0)+((r11*x3270))+(((-1.0)*x3269*x3271))+((r12*x3265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
IkReal x3273=((-1.0)*px);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3273);
rxp1_1=(px*r21);
rxp1_2=(r11*x3273);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
IkReal x3274=((-1.0)*px);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3274);
rxp1_1=(px*r21);
rxp1_2=(r11*x3274);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=(((r11*sj12))+(((-1.0)*cj12*r10)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x3275=IKPowWithIntegerCheck((((r11*sj12))+(((-1.0)*cj12*r10))),-1);
if(!x3275.valid){
continue;
}
cj11array[0]=((-1.0)*(x3275.value));
if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j11valid[0] = j11valid[1] = true;
    j11array[0] = IKacos(cj11array[0]);
    sj11array[0] = IKsin(j11array[0]);
    cj11array[1] = cj11array[0];
    j11array[1] = -j11array[0];
    sj11array[1] = -sj11array[0];
}
else if( isnan(cj11array[0]) )
{
    // probably any value will work
    j11valid[0] = true;
    cj11array[0] = 1; sj11array[0] = 0; j11array[0] = 0;
}
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x3276=IKsin(j11);
IkReal x3277=IKcos(j11);
IkReal x3278=(r21*sj12);
IkReal x3279=(cj12*x3276);
IkReal x3280=((1.0)*x3276);
evalcond[0]=(r02*x3276);
evalcond[1]=(((r02*x3277))+(((-1.0)*cj9)));
evalcond[2]=(((r20*x3279))+(((-1.0)*x3278*x3280)));
evalcond[3]=((((-1.0)*r11*sj12*x3280))+((r10*x3279)));
evalcond[4]=((((-1.0)*cj12*r20*x3277))+((x3277*x3278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x3281=IKPowWithIntegerCheck(r02,-1);
if(!x3281.valid){
continue;
}
cj11array[0]=(cj9*(x3281.value));
if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j11valid[0] = j11valid[1] = true;
    j11array[0] = IKacos(cj11array[0]);
    sj11array[0] = IKsin(j11array[0]);
    cj11array[1] = cj11array[0];
    j11array[1] = -j11array[0];
    sj11array[1] = -sj11array[0];
}
else if( isnan(cj11array[0]) )
{
    // probably any value will work
    j11valid[0] = true;
    cj11array[0] = 1; sj11array[0] = 0; j11array[0] = 0;
}
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x3282=IKsin(j11);
IkReal x3283=IKcos(j11);
IkReal x3284=(r11*sj12);
IkReal x3285=(r21*sj12);
IkReal x3286=(cj12*x3282);
IkReal x3287=((1.0)*x3282);
IkReal x3288=((1.0)*cj12*x3283);
evalcond[0]=(r02*x3282);
evalcond[1]=(((r20*x3286))+(((-1.0)*x3285*x3287)));
evalcond[2]=(((r10*x3286))+(((-1.0)*x3284*x3287)));
evalcond[3]=((((-1.0)*r20*x3288))+((x3283*x3285)));
evalcond[4]=((1.0)+(((-1.0)*r10*x3288))+((x3283*x3284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3289=r11*r11;
IkReal x3290=cj12*cj12;
IkReal x3291=(r11*sj12);
IkReal x3292=(cj12*r10);
CheckValue<IkReal> x3293 = IKatan2WithCheck(IkReal(r12),IkReal((x3291+(((-1.0)*x3292)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3293.valid){
continue;
}
CheckValue<IkReal> x3294=IKPowWithIntegerCheck(IKsign((((x3289*x3290))+(((-1.0)*x3290*(r10*r10)))+(((2.0)*x3291*x3292))+(((-1.0)*(r12*r12)))+(((-1.0)*x3289)))),-1);
if(!x3294.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x3293.value)+(((1.5707963267949)*(x3294.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3295=IKsin(j11);
IkReal x3296=IKcos(j11);
IkReal x3297=(cj12*r00);
IkReal x3298=(r21*sj12);
IkReal x3299=(cj12*r20);
IkReal x3300=(cj12*r10);
IkReal x3301=((1.0)*x3295);
IkReal x3302=((1.0)*x3296);
IkReal x3303=(sj12*x3296);
evalcond[0]=((((-1.0)*r11*sj12*x3301))+((x3295*x3300))+((r12*x3296)));
evalcond[1]=(((x3296*x3298))+((r22*x3295))+(((-1.0)*x3299*x3302)));
evalcond[2]=(((r02*x3295))+(((-1.0)*x3297*x3302))+((r01*x3303)));
evalcond[3]=(sj9+(((-1.0)*x3298*x3301))+((x3295*x3299))+((r22*x3296)));
evalcond[4]=((1.0)+((r11*x3303))+((r12*x3295))+(((-1.0)*x3300*x3302)));
evalcond[5]=(((r02*x3296))+((x3295*x3297))+(((-1.0)*r01*sj12*x3301))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3304=((1.0)*cj12);
CheckValue<IkReal> x3305=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj12))+(((-1.0)*r01*x3304)))),-1);
if(!x3305.valid){
continue;
}
CheckValue<IkReal> x3306 = IKatan2WithCheck(IkReal((r12*sj9)),IkReal(((((-1.0)*r10*sj9*x3304))+((r11*sj12*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3306.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3305.value)))+(x3306.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3307=IKsin(j11);
IkReal x3308=IKcos(j11);
IkReal x3309=(cj12*r00);
IkReal x3310=(r21*sj12);
IkReal x3311=(cj12*r20);
IkReal x3312=(cj12*r10);
IkReal x3313=((1.0)*x3307);
IkReal x3314=((1.0)*x3308);
IkReal x3315=(sj12*x3308);
evalcond[0]=((((-1.0)*r11*sj12*x3313))+((r12*x3308))+((x3307*x3312)));
evalcond[1]=(((r22*x3307))+(((-1.0)*x3311*x3314))+((x3308*x3310)));
evalcond[2]=(((r02*x3307))+(((-1.0)*x3309*x3314))+((r01*x3315)));
evalcond[3]=(sj9+((r22*x3308))+(((-1.0)*x3310*x3313))+((x3307*x3311)));
evalcond[4]=((1.0)+((r11*x3315))+(((-1.0)*x3312*x3314))+((r12*x3307)));
evalcond[5]=(((r02*x3308))+(((-1.0)*r01*sj12*x3313))+((x3307*x3309))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x3316 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r20))+((r21*sj12)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3316.valid){
continue;
}
CheckValue<IkReal> x3317=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x3317.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x3316.value)+(((1.5707963267949)*(x3317.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3318=IKsin(j11);
IkReal x3319=IKcos(j11);
IkReal x3320=(cj12*r00);
IkReal x3321=(r21*sj12);
IkReal x3322=(cj12*r20);
IkReal x3323=(cj12*r10);
IkReal x3324=((1.0)*x3318);
IkReal x3325=((1.0)*x3319);
IkReal x3326=(sj12*x3319);
evalcond[0]=(((r12*x3319))+((x3318*x3323))+(((-1.0)*r11*sj12*x3324)));
evalcond[1]=((((-1.0)*x3322*x3325))+((r22*x3318))+((x3319*x3321)));
evalcond[2]=(((r01*x3326))+((r02*x3318))+(((-1.0)*x3320*x3325)));
evalcond[3]=(sj9+(((-1.0)*x3321*x3324))+((r22*x3319))+((x3318*x3322)));
evalcond[4]=((1.0)+((r11*x3326))+((r12*x3318))+(((-1.0)*x3323*x3325)));
evalcond[5]=(((r02*x3319))+(((-1.0)*r01*sj12*x3324))+((x3318*x3320))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3327=(sj12*sj8);
IkReal x3328=(cj7*sj8);
IkReal x3329=((1.0)*sj7*sj8);
CheckValue<IkReal> x3330 = IKatan2WithCheck(IkReal((((r01*sj7*x3327))+(((-1.0)*cj7*r11*x3327))+((cj12*r10*x3328))+(((-1.0)*cj12*r00*x3329)))),IkReal((((r12*x3328))+(((-1.0)*r02*x3329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3330.valid){
continue;
}
CheckValue<IkReal> x3331=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj12*r21))+(((-1.0)*r20*sj12)))),-1);
if(!x3331.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x3330.value)+(((1.5707963267949)*(x3331.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3332=IKcos(j11);
IkReal x3333=IKsin(j11);
IkReal x3334=(cj8*sj9);
IkReal x3335=(cj12*r20);
IkReal x3336=(r01*sj12);
IkReal x3337=(cj12*r10);
IkReal x3338=(r11*sj12);
IkReal x3339=(cj12*r00);
IkReal x3340=(r21*sj12);
IkReal x3341=((1.0)*x3332);
IkReal x3342=((1.0)*x3333);
evalcond[0]=(cj8+((x3332*x3340))+((r22*x3333))+(((-1.0)*x3335*x3341)));
evalcond[1]=(((x3332*x3336))+((r02*x3333))+((cj7*sj8))+(((-1.0)*x3339*x3341)));
evalcond[2]=(((x3332*x3338))+(((-1.0)*x3337*x3341))+((r12*x3333))+((sj7*sj8)));
evalcond[3]=((((-1.0)*sj8*sj9))+(((-1.0)*x3340*x3342))+((x3333*x3335))+((r22*x3332)));
evalcond[4]=(((x3333*x3339))+((cj7*x3334))+((r02*x3332))+((cj9*sj7))+(((-1.0)*x3336*x3342)));
evalcond[5]=((((-1.0)*cj7*cj9))+((x3333*x3337))+((sj7*x3334))+((r12*x3332))+(((-1.0)*x3338*x3342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3343=((1.0)*cj12);
IkReal x3344=(sj7*sj8);
IkReal x3345=((1.0)*sj12);
CheckValue<IkReal> x3346 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3344*x3345))+(((-1.0)*cj8*r10*x3343))+((cj8*r11*sj12))+((cj12*r20*x3344)))),IkReal((((r22*x3344))+(((-1.0)*cj8*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3346.valid){
continue;
}
CheckValue<IkReal> x3347=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3343))+(((-1.0)*r00*x3345)))),-1);
if(!x3347.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x3346.value)+(((1.5707963267949)*(x3347.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3348=IKcos(j11);
IkReal x3349=IKsin(j11);
IkReal x3350=(cj8*sj9);
IkReal x3351=(cj12*r20);
IkReal x3352=(r01*sj12);
IkReal x3353=(cj12*r10);
IkReal x3354=(r11*sj12);
IkReal x3355=(cj12*r00);
IkReal x3356=(r21*sj12);
IkReal x3357=((1.0)*x3348);
IkReal x3358=((1.0)*x3349);
evalcond[0]=(cj8+((r22*x3349))+(((-1.0)*x3351*x3357))+((x3348*x3356)));
evalcond[1]=(((r02*x3349))+(((-1.0)*x3355*x3357))+((cj7*sj8))+((x3348*x3352)));
evalcond[2]=((((-1.0)*x3353*x3357))+((sj7*sj8))+((x3348*x3354))+((r12*x3349)));
evalcond[3]=((((-1.0)*sj8*sj9))+((r22*x3348))+(((-1.0)*x3356*x3358))+((x3349*x3351)));
evalcond[4]=(((cj7*x3350))+(((-1.0)*x3352*x3358))+((r02*x3348))+((cj9*sj7))+((x3349*x3355)));
evalcond[5]=((((-1.0)*cj7*cj9))+(((-1.0)*x3354*x3358))+((sj7*x3350))+((r12*x3348))+((x3349*x3353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3359=(cj7*sj8);
IkReal x3360=((1.0)*cj8);
CheckValue<IkReal> x3361 = IKatan2WithCheck(IkReal((((cj12*r20*x3359))+(((-1.0)*r21*sj12*x3359))+((cj8*r01*sj12))+(((-1.0)*cj12*r00*x3360)))),IkReal(((((-1.0)*r02*x3360))+((r22*x3359)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3361.valid){
continue;
}
CheckValue<IkReal> x3362=IKPowWithIntegerCheck(IKsign((((r10*sj12))+((cj12*r11)))),-1);
if(!x3362.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x3361.value)+(((1.5707963267949)*(x3362.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3363=IKcos(j11);
IkReal x3364=IKsin(j11);
IkReal x3365=(cj8*sj9);
IkReal x3366=(cj12*r20);
IkReal x3367=(r01*sj12);
IkReal x3368=(cj12*r10);
IkReal x3369=(r11*sj12);
IkReal x3370=(cj12*r00);
IkReal x3371=(r21*sj12);
IkReal x3372=((1.0)*x3363);
IkReal x3373=((1.0)*x3364);
evalcond[0]=((((-1.0)*x3366*x3372))+((x3363*x3371))+cj8+((r22*x3364)));
evalcond[1]=(((x3363*x3367))+((r02*x3364))+(((-1.0)*x3370*x3372))+((cj7*sj8)));
evalcond[2]=(((x3363*x3369))+((r12*x3364))+((sj7*sj8))+(((-1.0)*x3368*x3372)));
evalcond[3]=((((-1.0)*sj8*sj9))+((r22*x3363))+(((-1.0)*x3371*x3373))+((x3364*x3366)));
evalcond[4]=(((r02*x3363))+(((-1.0)*x3367*x3373))+((x3364*x3370))+((cj7*x3365))+((cj9*sj7)));
evalcond[5]=((((-1.0)*cj7*cj9))+((sj7*x3365))+((r12*x3363))+(((-1.0)*x3369*x3373))+((x3364*x3368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3374=cj12*cj12;
IkReal x3375=r21*r21;
IkReal x3376=(cj12*r20);
IkReal x3377=((1.0)*cj8);
IkReal x3378=(sj8*sj9);
IkReal x3379=(r21*sj12);
CheckValue<IkReal> x3380 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3377))+((x3376*x3378))+(((-1.0)*x3378*x3379)))),IkReal((((r22*x3378))+((cj8*x3376))+(((-1.0)*x3377*x3379)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3380.valid){
continue;
}
CheckValue<IkReal> x3381=IKPowWithIntegerCheck(IKsign(((r22*r22)+x3375+(((-2.0)*x3376*x3379))+((x3374*(r20*r20)))+(((-1.0)*x3374*x3375)))),-1);
if(!x3381.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x3380.value)+(((1.5707963267949)*(x3381.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x3382=IKcos(j11);
IkReal x3383=IKsin(j11);
IkReal x3384=(r21*sj12);
IkReal x3385=(cj12*r20);
evalcond[0]=(((x3382*x3384))+cj8+((r22*x3383))+(((-1.0)*x3382*x3385)));
evalcond[1]=((((-1.0)*sj8*sj9))+((r22*x3382))+(((-1.0)*x3383*x3384))+((x3383*x3385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x3386=((1.0)*sj11);
IkReal x3387=(cj11*cj12);
IkReal x3388=((1.0)*cj11*sj12);
j7eval[0]=sj8;
j7eval[1]=IKsign(sj8);
j7eval[2]=((IKabs((((r10*x3387))+(((-1.0)*r12*x3386))+(((-1.0)*r11*x3388)))))+(IKabs(((((-1.0)*r02*x3386))+(((-1.0)*r01*x3388))+((r00*x3387))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j7eval[0]=sj8;
j7eval[1]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j7eval[0]=cj8;
j7eval[1]=cj9;
j7eval[2]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=1.0;
cj8=0;
j8=1.5707963267949;
j7eval[0]=sj9;
j7eval[1]=((IKabs((((r10*sj12))+((cj12*r11)))))+(IKabs(((((-1.0)*cj12*r01))+(((-1.0)*r00*sj12))))));
j7eval[2]=IKsign(sj9);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=1.0;
cj8=0;
j8=1.5707963267949;
j7eval[0]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=1.0;
cj8=0;
j8=1.5707963267949;
j7eval[0]=cj9;
j7eval[1]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((((-1.0)*cj12*r01))+(((-1.0)*r00*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj12))+((cj12*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj12*r01))+(((-1.0)*r00*sj12))))+IKsqr((((r10*sj12))+((cj12*r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj12*r01))+(((-1.0)*r00*sj12))), (((r10*sj12))+((cj12*r11))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x3389=IKcos(j7);
IkReal x3390=IKsin(j7);
IkReal x3391=(cj12*r01);
IkReal x3392=(cj11*sj12);
IkReal x3393=(cj12*r11);
IkReal x3394=((1.0)*sj12);
IkReal x3395=((0.4)*sj12);
IkReal x3396=((1.0)*cj11*cj12);
evalcond[0]=(x3389+(((-1.0)*x3393))+(((-1.0)*r10*x3394)));
evalcond[1]=((((-1.0)*x3391))+(((-1.0)*x3390))+(((-1.0)*r00*x3394)));
evalcond[2]=(((r02*sj11))+((r01*x3392))+x3389+(((-1.0)*r00*x3396)));
evalcond[3]=(((r12*sj11))+x3390+((r11*x3392))+(((-1.0)*r10*x3396)));
evalcond[4]=((((-0.4)*x3391))+(((-0.00043624)*x3390))+(((-1.0)*px))+(((0.41956376)*x3389))+(((-1.0)*r00*x3395)));
evalcond[5]=((((-0.4)*x3393))+(((0.00043624)*x3389))+(((0.41956376)*x3390))+(((-1.0)*py))+(((-1.0)*r10*x3395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs((((r00*sj12))+((cj12*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj12))+((cj12*r01))))+IKsqr(((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((r00*sj12))+((cj12*r01))), ((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x3397=IKcos(j7);
IkReal x3398=IKsin(j7);
IkReal x3399=(cj11*sj12);
IkReal x3400=((1.0)*cj12);
IkReal x3401=((0.4)*cj12);
IkReal x3402=((1.0)*sj12);
IkReal x3403=((0.4)*sj12);
evalcond[0]=((((-1.0)*r00*x3402))+(((-1.0)*r01*x3400))+x3398);
evalcond[1]=((((-1.0)*x3397))+(((-1.0)*r11*x3400))+(((-1.0)*r10*x3402)));
evalcond[2]=((((-1.0)*cj11*r00*x3400))+((r02*sj11))+((r01*x3399))+x3397);
evalcond[3]=(((r12*sj11))+x3398+((r11*x3399))+(((-1.0)*cj11*r10*x3400)));
evalcond[4]=((((-1.0)*r00*x3403))+(((-1.0)*r01*x3401))+(((0.41956376)*x3397))+(((0.00043624)*x3398))+(((-1.0)*px)));
evalcond[5]=((((-0.00043624)*x3397))+(((-1.0)*r11*x3401))+(((0.41956376)*x3398))+(((-1.0)*py))+(((-1.0)*r10*x3403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((2.38342796813528)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.38342796813528)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.38342796813528)*py))+IKsqr(((2.38342796813528)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((2.38342796813528)*py), ((2.38342796813528)*px));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x3404=IKsin(j7);
IkReal x3405=IKcos(j7);
IkReal x3406=(r11*sj12);
IkReal x3407=((1.0)*sj11);
IkReal x3408=(cj12*sj11);
IkReal x3409=(r01*sj12);
IkReal x3410=((1.0)*cj11*cj12);
evalcond[0]=((((0.41956376)*x3405))+(((-1.0)*px)));
evalcond[1]=((((0.41956376)*x3404))+(((-1.0)*py)));
evalcond[2]=((((-1.0)*x3407*x3409))+x3404+((cj11*r02))+((r00*x3408)));
evalcond[3]=(((r02*sj11))+((cj11*x3409))+x3405+(((-1.0)*r00*x3410)));
evalcond[4]=(((r12*sj11))+((cj11*x3406))+x3404+(((-1.0)*r10*x3410)));
evalcond[5]=((((-1.0)*x3405))+((cj11*r12))+(((-1.0)*x3406*x3407))+((r10*x3408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((2.38342796813528)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.38342796813528)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.38342796813528)*py))+IKsqr(((2.38342796813528)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((2.38342796813528)*py), ((2.38342796813528)*px));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x3411=IKcos(j7);
IkReal x3412=IKsin(j7);
IkReal x3413=(r11*sj12);
IkReal x3414=((1.0)*sj11);
IkReal x3415=(cj12*sj11);
IkReal x3416=(r01*sj12);
IkReal x3417=((1.0)*cj11*cj12);
evalcond[0]=((((0.41956376)*x3411))+(((-1.0)*px)));
evalcond[1]=((((0.41956376)*x3412))+(((-1.0)*py)));
evalcond[2]=(x3411+((cj11*r12))+((r10*x3415))+(((-1.0)*x3413*x3414)));
evalcond[3]=(((r02*sj11))+x3411+((cj11*x3416))+(((-1.0)*r00*x3417)));
evalcond[4]=(((r12*sj11))+x3412+((cj11*x3413))+(((-1.0)*r10*x3417)));
evalcond[5]=((((-1.0)*x3412))+(((-1.0)*x3414*x3416))+((cj11*r02))+((r00*x3415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x3418=IKPowWithIntegerCheck(cj9,-1);
if(!x3418.valid){
continue;
}
CheckValue<IkReal> x3419=IKPowWithIntegerCheck(sj9,-1);
if(!x3419.valid){
continue;
}
if( IKabs(((x3418.value)*(((((-1.0)*cj11*r02))+((r01*sj11*sj12))+(((-1.0)*cj12*r00*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3419.value)*((((r10*sj12))+((cj12*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3418.value)*(((((-1.0)*cj11*r02))+((r01*sj11*sj12))+(((-1.0)*cj12*r00*sj11))))))+IKsqr(((x3419.value)*((((r10*sj12))+((cj12*r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x3418.value)*(((((-1.0)*cj11*r02))+((r01*sj11*sj12))+(((-1.0)*cj12*r00*sj11))))), ((x3419.value)*((((r10*sj12))+((cj12*r11))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x3420=IKcos(j7);
IkReal x3421=IKsin(j7);
IkReal x3422=((1.0)*sj12);
IkReal x3423=(cj11*sj12);
IkReal x3424=((0.4)*sj12);
IkReal x3425=(cj12*sj11);
IkReal x3426=(cj12*r01);
IkReal x3427=(cj12*r11);
IkReal x3428=((1.0)*cj11*cj12);
IkReal x3429=(sj9*x3420);
IkReal x3430=(sj9*x3421);
evalcond[0]=((((-1.0)*r10*x3422))+x3429+(((-1.0)*x3427)));
evalcond[1]=((((-1.0)*r00*x3422))+(((-1.0)*x3430))+(((-1.0)*x3426)));
evalcond[2]=(((r02*sj11))+x3420+(((-1.0)*r00*x3428))+((r01*x3423)));
evalcond[3]=((((-1.0)*r10*x3428))+((r12*sj11))+x3421+((r11*x3423)));
evalcond[4]=(((r00*x3425))+((cj11*r02))+((cj9*x3421))+(((-1.0)*r01*sj11*x3422)));
evalcond[5]=((((-1.0)*r11*sj11*x3422))+((r10*x3425))+((cj11*r12))+(((-1.0)*cj9*x3420)));
evalcond[6]=((((-0.00043624)*x3430))+(((0.41956376)*x3420))+(((-1.0)*px))+(((-1.0)*r00*x3424))+(((-0.4)*x3426)));
evalcond[7]=((((0.41956376)*x3421))+(((0.00043624)*x3429))+(((-1.0)*r10*x3424))+(((-1.0)*py))+(((-0.4)*x3427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x3431=IKPowWithIntegerCheck(sj9,-1);
if(!x3431.valid){
continue;
}
if( IKabs(((((-1.0)*cj11*r11*sj12))+((cj11*cj12*r10))+(((-1.0)*r12*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3431.value)*((((r10*sj12))+((cj12*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj11*r11*sj12))+((cj11*cj12*r10))+(((-1.0)*r12*sj11))))+IKsqr(((x3431.value)*((((r10*sj12))+((cj12*r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj11*r11*sj12))+((cj11*cj12*r10))+(((-1.0)*r12*sj11))), ((x3431.value)*((((r10*sj12))+((cj12*r11))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x3432=IKcos(j7);
IkReal x3433=IKsin(j7);
IkReal x3434=((1.0)*sj12);
IkReal x3435=(cj11*sj12);
IkReal x3436=((0.4)*sj12);
IkReal x3437=(cj12*sj11);
IkReal x3438=(cj12*r01);
IkReal x3439=(cj12*r11);
IkReal x3440=((1.0)*cj11*cj12);
IkReal x3441=(sj9*x3432);
IkReal x3442=(sj9*x3433);
evalcond[0]=((((-1.0)*r10*x3434))+x3441+(((-1.0)*x3439)));
evalcond[1]=((((-1.0)*r00*x3434))+(((-1.0)*x3442))+(((-1.0)*x3438)));
evalcond[2]=(((r01*x3435))+((r02*sj11))+x3432+(((-1.0)*r00*x3440)));
evalcond[3]=(((r12*sj11))+x3433+(((-1.0)*r10*x3440))+((r11*x3435)));
evalcond[4]=(((cj11*r02))+((cj9*x3433))+(((-1.0)*r01*sj11*x3434))+((r00*x3437)));
evalcond[5]=((((-1.0)*r11*sj11*x3434))+((r10*x3437))+((cj11*r12))+(((-1.0)*cj9*x3432)));
evalcond[6]=((((-0.00043624)*x3442))+(((-1.0)*r00*x3436))+(((-1.0)*px))+(((-0.4)*x3438))+(((0.41956376)*x3432)));
evalcond[7]=((((-1.0)*r10*x3436))+(((0.00043624)*x3441))+(((-1.0)*py))+(((-0.4)*x3439))+(((0.41956376)*x3433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x3443 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r01))+(((-1.0)*r00*sj12)))),IkReal((((r10*sj12))+((cj12*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3443.valid){
continue;
}
CheckValue<IkReal> x3444=IKPowWithIntegerCheck(IKsign(sj9),-1);
if(!x3444.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x3443.value)+(((1.5707963267949)*(x3444.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x3445=IKcos(j7);
IkReal x3446=IKsin(j7);
IkReal x3447=((1.0)*sj12);
IkReal x3448=(cj11*sj12);
IkReal x3449=((0.4)*sj12);
IkReal x3450=(cj12*sj11);
IkReal x3451=(cj12*r01);
IkReal x3452=(cj12*r11);
IkReal x3453=((1.0)*cj11*cj12);
IkReal x3454=(sj9*x3445);
IkReal x3455=(sj9*x3446);
evalcond[0]=(x3454+(((-1.0)*x3452))+(((-1.0)*r10*x3447)));
evalcond[1]=((((-1.0)*x3455))+(((-1.0)*x3451))+(((-1.0)*r00*x3447)));
evalcond[2]=(((r02*sj11))+x3445+((r01*x3448))+(((-1.0)*r00*x3453)));
evalcond[3]=(((r11*x3448))+((r12*sj11))+x3446+(((-1.0)*r10*x3453)));
evalcond[4]=((((-1.0)*r01*sj11*x3447))+((cj9*x3446))+((cj11*r02))+((r00*x3450)));
evalcond[5]=(((cj11*r12))+(((-1.0)*cj9*x3445))+(((-1.0)*r11*sj11*x3447))+((r10*x3450)));
evalcond[6]=((((-0.00043624)*x3455))+(((0.41956376)*x3445))+(((-1.0)*px))+(((-0.4)*x3451))+(((-1.0)*r00*x3449)));
evalcond[7]=((((0.41956376)*x3446))+(((-1.0)*py))+(((-1.0)*r10*x3449))+(((0.00043624)*x3454))+(((-0.4)*x3452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
j7eval[0]=sj9;
j7eval[1]=((IKabs((((r10*sj12))+((cj12*r11)))))+(IKabs(((((-1.0)*cj12*r01))+(((-1.0)*r00*sj12))))));
j7eval[2]=IKsign(sj9);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
j7eval[0]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
j7eval[0]=cj9;
j7eval[1]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((((-1.0)*cj12*r01))+(((-1.0)*r00*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj12))+((cj12*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj12*r01))+(((-1.0)*r00*sj12))))+IKsqr((((r10*sj12))+((cj12*r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj12*r01))+(((-1.0)*r00*sj12))), (((r10*sj12))+((cj12*r11))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x3456=IKcos(j7);
IkReal x3457=IKsin(j7);
IkReal x3458=(cj11*sj12);
IkReal x3459=((1.0)*r00);
IkReal x3460=(r10*sj12);
IkReal x3461=(cj11*cj12);
IkReal x3462=(cj12*r01);
IkReal x3463=(cj12*r11);
IkReal x3464=((1.0)*x3457);
evalcond[0]=(x3456+(((-1.0)*x3463))+(((-1.0)*x3460)));
evalcond[1]=((((-1.0)*sj12*x3459))+(((-1.0)*x3462))+(((-1.0)*x3464)));
evalcond[2]=(((r02*sj11))+(((-1.0)*x3456))+(((-1.0)*x3459*x3461))+((r01*x3458)));
evalcond[3]=((((-1.0)*r10*x3461))+((r12*sj11))+(((-1.0)*x3464))+((r11*x3458)));
evalcond[4]=((((-0.42043624)*x3456))+(((-0.00043624)*x3457))+(((-0.4)*x3462))+(((-1.0)*px))+(((-0.4)*r00*sj12)));
evalcond[5]=((((-0.42043624)*x3457))+(((-0.4)*x3460))+(((-0.4)*x3463))+(((-1.0)*py))+(((0.00043624)*x3456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs((((r00*sj12))+((cj12*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj12))+((cj12*r01))))+IKsqr(((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((r00*sj12))+((cj12*r01))), ((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x3465=IKsin(j7);
IkReal x3466=IKcos(j7);
IkReal x3467=(cj11*sj12);
IkReal x3468=((1.0)*r00);
IkReal x3469=(r10*sj12);
IkReal x3470=(cj11*cj12);
IkReal x3471=(cj12*r01);
IkReal x3472=(cj12*r11);
IkReal x3473=((1.0)*x3466);
evalcond[0]=((((-1.0)*sj12*x3468))+x3465+(((-1.0)*x3471)));
evalcond[1]=((((-1.0)*x3472))+(((-1.0)*x3469))+(((-1.0)*x3473)));
evalcond[2]=(((r02*sj11))+((r01*x3467))+(((-1.0)*x3468*x3470))+(((-1.0)*x3473)));
evalcond[3]=((((-1.0)*r10*x3470))+((r12*sj11))+((r11*x3467))+(((-1.0)*x3465)));
evalcond[4]=((((-1.0)*px))+(((-0.4)*x3471))+(((-0.4)*r00*sj12))+(((-0.42043624)*x3466))+(((0.00043624)*x3465)));
evalcond[5]=((((-0.00043624)*x3466))+(((-0.4)*x3469))+(((-1.0)*py))+(((-0.4)*x3472))+(((-0.42043624)*x3465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-2.37848193105333)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.37848193105333)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.37848193105333)*py))+IKsqr(((-2.37848193105333)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-2.37848193105333)*py), ((-2.37848193105333)*px));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x3474=IKsin(j7);
IkReal x3475=IKcos(j7);
IkReal x3476=(r11*sj12);
IkReal x3477=((1.0)*sj11);
IkReal x3478=(cj12*sj11);
IkReal x3479=(r01*sj12);
IkReal x3480=((1.0)*x3475);
IkReal x3481=((1.0)*cj11*cj12);
evalcond[0]=((((-1.0)*px))+(((-0.42043624)*x3475)));
evalcond[1]=((((-1.0)*py))+(((-0.42043624)*x3474)));
evalcond[2]=(((r00*x3478))+x3474+((cj11*r02))+(((-1.0)*x3477*x3479)));
evalcond[3]=(((cj11*r12))+((r10*x3478))+(((-1.0)*x3476*x3477))+(((-1.0)*x3480)));
evalcond[4]=((((-1.0)*r00*x3481))+((r02*sj11))+((cj11*x3479))+(((-1.0)*x3480)));
evalcond[5]=(((r12*sj11))+(((-1.0)*r10*x3481))+((cj11*x3476))+(((-1.0)*x3474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-2.37848193105333)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.37848193105333)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.37848193105333)*py))+IKsqr(((-2.37848193105333)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-2.37848193105333)*py), ((-2.37848193105333)*px));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x3482=IKcos(j7);
IkReal x3483=IKsin(j7);
IkReal x3484=(r11*sj12);
IkReal x3485=((1.0)*sj11);
IkReal x3486=(cj12*sj11);
IkReal x3487=(r01*sj12);
IkReal x3488=((1.0)*x3483);
IkReal x3489=((1.0)*cj11*cj12);
evalcond[0]=((((-1.0)*px))+(((-0.42043624)*x3482)));
evalcond[1]=((((-1.0)*py))+(((-0.42043624)*x3483)));
evalcond[2]=(x3482+((cj11*r12))+((r10*x3486))+(((-1.0)*x3484*x3485)));
evalcond[3]=((((-1.0)*x3485*x3487))+((r00*x3486))+((cj11*r02))+(((-1.0)*x3488)));
evalcond[4]=((((-1.0)*r00*x3489))+((r02*sj11))+(((-1.0)*x3482))+((cj11*x3487)));
evalcond[5]=(((r12*sj11))+(((-1.0)*r10*x3489))+((cj11*x3484))+(((-1.0)*x3488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x3490=IKPowWithIntegerCheck(cj9,-1);
if(!x3490.valid){
continue;
}
CheckValue<IkReal> x3491=IKPowWithIntegerCheck(sj9,-1);
if(!x3491.valid){
continue;
}
if( IKabs(((x3490.value)*(((((-1.0)*cj11*r02))+((r01*sj11*sj12))+(((-1.0)*cj12*r00*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3491.value)*((((r10*sj12))+((cj12*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3490.value)*(((((-1.0)*cj11*r02))+((r01*sj11*sj12))+(((-1.0)*cj12*r00*sj11))))))+IKsqr(((x3491.value)*((((r10*sj12))+((cj12*r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x3490.value)*(((((-1.0)*cj11*r02))+((r01*sj11*sj12))+(((-1.0)*cj12*r00*sj11))))), ((x3491.value)*((((r10*sj12))+((cj12*r11))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x3492=IKsin(j7);
IkReal x3493=IKcos(j7);
IkReal x3494=((1.0)*r11);
IkReal x3495=(sj11*sj12);
IkReal x3496=(cj11*sj12);
IkReal x3497=((1.0)*r00);
IkReal x3498=(r10*sj12);
IkReal x3499=(cj11*cj12);
IkReal x3500=(cj12*sj11);
IkReal x3501=(cj12*r01);
IkReal x3502=(sj9*x3493);
IkReal x3503=((1.0)*x3493);
IkReal x3504=(sj9*x3492);
evalcond[0]=(x3502+(((-1.0)*cj12*x3494))+(((-1.0)*x3498)));
evalcond[1]=((((-1.0)*sj12*x3497))+(((-1.0)*x3504))+(((-1.0)*x3501)));
evalcond[2]=(((r00*x3500))+(((-1.0)*r01*x3495))+((cj11*r02))+((cj9*x3492)));
evalcond[3]=(((r02*sj11))+((r01*x3496))+(((-1.0)*x3497*x3499))+(((-1.0)*x3503)));
evalcond[4]=(((r12*sj11))+(((-1.0)*r10*x3499))+((r11*x3496))+(((-1.0)*x3492)));
evalcond[5]=(((r10*x3500))+(((-1.0)*x3494*x3495))+((cj11*r12))+(((-1.0)*cj9*x3503)));
evalcond[6]=((((-0.4)*x3501))+(((-0.42043624)*x3493))+(((-1.0)*px))+(((-0.4)*r00*sj12))+(((-0.00043624)*x3504)));
evalcond[7]=((((0.00043624)*x3502))+(((-0.4)*cj12*r11))+(((-0.4)*x3498))+(((-0.42043624)*x3492))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x3505=IKPowWithIntegerCheck(sj9,-1);
if(!x3505.valid){
continue;
}
if( IKabs(((((-1.0)*cj11*cj12*r10))+((r12*sj11))+((cj11*r11*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3505.value)*((((r10*sj12))+((cj12*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj11*cj12*r10))+((r12*sj11))+((cj11*r11*sj12))))+IKsqr(((x3505.value)*((((r10*sj12))+((cj12*r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj11*cj12*r10))+((r12*sj11))+((cj11*r11*sj12))), ((x3505.value)*((((r10*sj12))+((cj12*r11))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x3506=IKsin(j7);
IkReal x3507=IKcos(j7);
IkReal x3508=((1.0)*r11);
IkReal x3509=(sj11*sj12);
IkReal x3510=(cj11*sj12);
IkReal x3511=((1.0)*r00);
IkReal x3512=(r10*sj12);
IkReal x3513=(cj11*cj12);
IkReal x3514=(cj12*sj11);
IkReal x3515=(cj12*r01);
IkReal x3516=(sj9*x3507);
IkReal x3517=((1.0)*x3507);
IkReal x3518=(sj9*x3506);
evalcond[0]=((((-1.0)*cj12*x3508))+x3516+(((-1.0)*x3512)));
evalcond[1]=((((-1.0)*sj12*x3511))+(((-1.0)*x3518))+(((-1.0)*x3515)));
evalcond[2]=(((r00*x3514))+((cj9*x3506))+((cj11*r02))+(((-1.0)*r01*x3509)));
evalcond[3]=(((r02*sj11))+(((-1.0)*x3511*x3513))+(((-1.0)*x3517))+((r01*x3510)));
evalcond[4]=(((r12*sj11))+((r11*x3510))+(((-1.0)*x3506))+(((-1.0)*r10*x3513)));
evalcond[5]=((((-1.0)*cj9*x3517))+((r10*x3514))+(((-1.0)*x3508*x3509))+((cj11*r12)));
evalcond[6]=((((-0.4)*x3515))+(((-1.0)*px))+(((-0.00043624)*x3518))+(((-0.4)*r00*sj12))+(((-0.42043624)*x3507)));
evalcond[7]=((((-0.4)*cj12*r11))+(((-0.4)*x3512))+(((0.00043624)*x3516))+(((-1.0)*py))+(((-0.42043624)*x3506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x3519 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r01))+(((-1.0)*r00*sj12)))),IkReal((((r10*sj12))+((cj12*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3519.valid){
continue;
}
CheckValue<IkReal> x3520=IKPowWithIntegerCheck(IKsign(sj9),-1);
if(!x3520.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x3519.value)+(((1.5707963267949)*(x3520.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x3521=IKsin(j7);
IkReal x3522=IKcos(j7);
IkReal x3523=((1.0)*r11);
IkReal x3524=(sj11*sj12);
IkReal x3525=(cj11*sj12);
IkReal x3526=((1.0)*r00);
IkReal x3527=(r10*sj12);
IkReal x3528=(cj11*cj12);
IkReal x3529=(cj12*sj11);
IkReal x3530=(cj12*r01);
IkReal x3531=(sj9*x3522);
IkReal x3532=((1.0)*x3522);
IkReal x3533=(sj9*x3521);
evalcond[0]=((((-1.0)*x3527))+x3531+(((-1.0)*cj12*x3523)));
evalcond[1]=((((-1.0)*x3530))+(((-1.0)*x3533))+(((-1.0)*sj12*x3526)));
evalcond[2]=(((r00*x3529))+((cj9*x3521))+(((-1.0)*r01*x3524))+((cj11*r02)));
evalcond[3]=(((r02*sj11))+(((-1.0)*x3526*x3528))+((r01*x3525))+(((-1.0)*x3532)));
evalcond[4]=((((-1.0)*x3521))+((r12*sj11))+((r11*x3525))+(((-1.0)*r10*x3528)));
evalcond[5]=(((r10*x3529))+(((-1.0)*cj9*x3532))+((cj11*r12))+(((-1.0)*x3523*x3524)));
evalcond[6]=((((-1.0)*px))+(((-0.4)*x3530))+(((-0.4)*r00*sj12))+(((-0.42043624)*x3522))+(((-0.00043624)*x3533)));
evalcond[7]=((((-0.4)*cj12*r11))+(((-0.4)*x3527))+(((-1.0)*py))+(((0.00043624)*x3531))+(((-0.42043624)*x3521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((((-1.0)*cj12*r01))+(((-1.0)*r00*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj12))+((cj12*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj12*r01))+(((-1.0)*r00*sj12))))+IKsqr((((r10*sj12))+((cj12*r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj12*r01))+(((-1.0)*r00*sj12))), (((r10*sj12))+((cj12*r11))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x3534=IKcos(j7);
IkReal x3535=IKsin(j7);
IkReal x3536=((1.0)*sj12);
IkReal x3537=(cj11*sj12);
IkReal x3538=((0.4)*sj12);
IkReal x3539=(cj12*sj11);
IkReal x3540=(cj12*r01);
IkReal x3541=(cj12*r11);
IkReal x3542=((0.00043624)*x3534);
IkReal x3543=((0.00043624)*x3535);
IkReal x3544=((1.0)*cj11*cj12);
IkReal x3545=(sj8*x3534);
IkReal x3546=(sj8*x3535);
evalcond[0]=(x3534+(((-1.0)*r10*x3536))+(((-1.0)*x3541)));
evalcond[1]=((((-1.0)*r00*x3536))+(((-1.0)*x3540))+(((-1.0)*x3535)));
evalcond[2]=(((cj8*x3534))+(((-1.0)*r01*sj11*x3536))+((cj11*r02))+((r00*x3539)));
evalcond[3]=(((cj8*x3535))+((cj11*r12))+(((-1.0)*r11*sj11*x3536))+((r10*x3539)));
evalcond[4]=(((r02*sj11))+(((-1.0)*r00*x3544))+x3545+((r01*x3537)));
evalcond[5]=(((r11*x3537))+((r12*sj11))+(((-1.0)*r10*x3544))+x3546);
evalcond[6]=((((-1.0)*px))+(((-1.0)*r00*x3538))+(((0.42)*x3545))+(((-0.4)*x3540))+(((-1.0)*x3543))+(((-1.0)*x3542)));
evalcond[7]=(x3542+(((-1.0)*r10*x3538))+(((-1.0)*py))+(((0.42)*x3546))+(((-0.4)*x3541))+(((-1.0)*x3543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs((((r00*sj12))+((cj12*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj12))+((cj12*r01))))+IKsqr(((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((r00*sj12))+((cj12*r01))), ((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x3547=IKcos(j7);
IkReal x3548=IKsin(j7);
IkReal x3549=((1.0)*sj12);
IkReal x3550=(cj11*sj12);
IkReal x3551=((0.4)*sj12);
IkReal x3552=(cj12*sj11);
IkReal x3553=(cj12*r01);
IkReal x3554=((1.0)*cj8);
IkReal x3555=(cj12*r11);
IkReal x3556=((0.00043624)*x3547);
IkReal x3557=((0.00043624)*x3548);
IkReal x3558=((1.0)*cj11*cj12);
IkReal x3559=(sj8*x3547);
IkReal x3560=(sj8*x3548);
evalcond[0]=((((-1.0)*r00*x3549))+x3548+(((-1.0)*x3553)));
evalcond[1]=((((-1.0)*r10*x3549))+(((-1.0)*x3547))+(((-1.0)*x3555)));
evalcond[2]=(((r02*sj11))+((r01*x3550))+x3559+(((-1.0)*r00*x3558)));
evalcond[3]=(((r12*sj11))+(((-1.0)*r10*x3558))+x3560+((r11*x3550)));
evalcond[4]=((((-1.0)*r01*sj11*x3549))+((r00*x3552))+((cj11*r02))+(((-1.0)*x3547*x3554)));
evalcond[5]=(((cj11*r12))+(((-1.0)*x3548*x3554))+(((-1.0)*r11*sj11*x3549))+((r10*x3552)));
evalcond[6]=(x3557+(((-1.0)*r00*x3551))+(((-1.0)*px))+(((0.42)*x3559))+(((-0.4)*x3553))+(((-1.0)*x3556)));
evalcond[7]=((((-1.0)*r10*x3551))+(((-1.0)*py))+(((-0.4)*x3555))+(((-1.0)*x3556))+(((-1.0)*x3557))+(((0.42)*x3560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x3561=(r00*sj12);
IkReal x3562=((1.0)*sj9);
IkReal x3563=(cj12*cj9);
IkReal x3564=(r10*sj12);
if( IKabs(((((-1.0)*cj12*r01*x3562))+((cj9*x3564))+(((-1.0)*x3561*x3562))+((r11*x3563)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj9*x3561))+((r01*x3563))+((cj12*r11*sj9))+((sj9*x3564)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj12*r01*x3562))+((cj9*x3564))+(((-1.0)*x3561*x3562))+((r11*x3563))))+IKsqr((((cj9*x3561))+((r01*x3563))+((cj12*r11*sj9))+((sj9*x3564))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj12*r01*x3562))+((cj9*x3564))+(((-1.0)*x3561*x3562))+((r11*x3563))), (((cj9*x3561))+((r01*x3563))+((cj12*r11*sj9))+((sj9*x3564))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x3565=IKcos(j7);
IkReal x3566=IKsin(j7);
IkReal x3567=((1.0)*sj12);
IkReal x3568=((0.4)*sj12);
IkReal x3569=(cj12*r01);
IkReal x3570=(cj12*r11);
IkReal x3571=(cj12*sj11);
IkReal x3572=(sj9*x3565);
IkReal x3573=(cj9*x3566);
IkReal x3574=(cj9*x3565);
IkReal x3575=((0.00043624)*x3565);
IkReal x3576=((0.00043624)*x3566);
IkReal x3577=(sj9*x3566);
IkReal x3578=(x3573+x3572);
evalcond[0]=(x3578+(((-1.0)*r10*x3567))+(((-1.0)*x3570)));
evalcond[1]=(x3574+(((-1.0)*r00*x3567))+(((-1.0)*x3569))+(((-1.0)*x3577)));
evalcond[2]=(((r00*x3571))+x3578+((cj11*r02))+(((-1.0)*r01*sj11*x3567)));
evalcond[3]=(((r10*x3571))+x3577+((cj11*r12))+(((-1.0)*r11*sj11*x3567))+(((-1.0)*x3574)));
evalcond[4]=((((0.00043624)*x3574))+(((-1.0)*sj9*x3576))+(((-1.0)*x3575))+(((-1.0)*px))+(((-0.4)*x3569))+(((-1.0)*r00*x3568)));
evalcond[5]=((((0.00043624)*x3573))+(((0.00043624)*x3572))+(((-0.4)*x3570))+(((-1.0)*x3576))+(((-1.0)*r10*x3568))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x3579=(r10*sj12);
IkReal x3580=(cj12*sj9);
IkReal x3581=((1.0)*r00*sj12);
IkReal x3582=((1.0)*cj12*cj9);
if( IKabs(((((-1.0)*r01*x3580))+(((-1.0)*cj9*x3579))+(((-1.0)*r11*x3582))+(((-1.0)*sj9*x3581)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj9*x3579))+((r11*x3580))+(((-1.0)*cj9*x3581))+(((-1.0)*r01*x3582)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x3580))+(((-1.0)*cj9*x3579))+(((-1.0)*r11*x3582))+(((-1.0)*sj9*x3581))))+IKsqr((((sj9*x3579))+((r11*x3580))+(((-1.0)*cj9*x3581))+(((-1.0)*r01*x3582))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*r01*x3580))+(((-1.0)*cj9*x3579))+(((-1.0)*r11*x3582))+(((-1.0)*sj9*x3581))), (((sj9*x3579))+((r11*x3580))+(((-1.0)*cj9*x3581))+(((-1.0)*r01*x3582))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x3583=IKcos(j7);
IkReal x3584=IKsin(j7);
IkReal x3585=((1.0)*sj12);
IkReal x3586=((0.4)*sj12);
IkReal x3587=(cj12*r01);
IkReal x3588=((1.0)*cj9);
IkReal x3589=(cj12*r11);
IkReal x3590=(cj12*sj11);
IkReal x3591=((0.00043624)*x3583);
IkReal x3592=((0.00043624)*x3584);
IkReal x3593=(sj9*x3583);
IkReal x3594=(x3583*x3588);
IkReal x3595=((1.0)*sj9*x3584);
IkReal x3596=(x3595+x3594);
evalcond[0]=(x3593+(((-1.0)*x3584*x3588))+(((-1.0)*x3589))+(((-1.0)*r10*x3585)));
evalcond[1]=((((-1.0)*r00*x3585))+(((-1.0)*x3596))+(((-1.0)*x3587)));
evalcond[2]=(((cj9*x3584))+((cj11*r02))+((r00*x3590))+(((-1.0)*r01*sj11*x3585))+(((-1.0)*x3593)));
evalcond[3]=((((-1.0)*r11*sj11*x3585))+((r10*x3590))+((cj11*r12))+(((-1.0)*x3596)));
evalcond[4]=((((-1.0)*r00*x3586))+(((-1.0)*cj9*x3591))+(((-1.0)*sj9*x3592))+(((-0.4)*x3587))+(((-1.0)*px))+(((-1.0)*x3591)));
evalcond[5]=((((-1.0)*cj9*x3592))+(((-0.4)*x3589))+(((-1.0)*py))+((sj9*x3591))+(((-1.0)*x3592))+(((-1.0)*r10*x3586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj9=0;
cj9=1.0;
j9=0;
j7eval[0]=cj8;
j7eval[1]=((IKabs((((r10*sj12))+((cj12*r11)))))+(IKabs((((r00*sj12))+((cj12*r01))))));
j7eval[2]=IKsign(cj8);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj9=0;
cj9=1.0;
j9=0;
j7eval[0]=cj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj9=0;
cj9=1.0;
j9=0;
j7eval[0]=cj8;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-2.5)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.5)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.5)*py))+IKsqr(((-2.5)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-2.5)*py), ((-2.5)*px));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x3597=IKsin(j7);
IkReal x3598=IKcos(j7);
IkReal x3599=(cj12*sj11);
IkReal x3600=((1.0)*sj11*sj12);
evalcond[0]=(x3597+(((2.5)*py)));
evalcond[1]=(x3598+(((2.5)*px)));
evalcond[2]=((((-1.0)*r01*x3600))+x3597+((cj11*r02))+((r00*x3599)));
evalcond[3]=((((-1.0)*r11*x3600))+((r10*x3599))+((cj11*r12))+(((-1.0)*x3598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x3601=((1.0)*cj12);
IkReal x3602=((1.0)*sj12);
if( IKabs(((((-1.0)*r10*x3602))+(((-1.0)*r11*x3601)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x3601))+(((-1.0)*r00*x3602)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x3602))+(((-1.0)*r11*x3601))))+IKsqr(((((-1.0)*r01*x3601))+(((-1.0)*r00*x3602))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*r10*x3602))+(((-1.0)*r11*x3601))), ((((-1.0)*r01*x3601))+(((-1.0)*r00*x3602))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x3603=IKsin(j7);
IkReal x3604=IKcos(j7);
IkReal x3605=((1.0)*r11);
IkReal x3606=(sj11*sj12);
IkReal x3607=(r10*sj12);
IkReal x3608=(cj12*sj11);
IkReal x3609=(cj12*r01);
IkReal x3610=(r00*sj12);
IkReal x3611=((1.0)*x3604);
evalcond[0]=((((-1.0)*cj12*x3605))+(((-1.0)*x3607))+(((-1.0)*x3603)));
evalcond[1]=((((-1.0)*x3610))+(((-1.0)*x3609))+(((-1.0)*x3611)));
evalcond[2]=(x3603+((cj11*r02))+((r00*x3608))+(((-1.0)*r01*x3606)));
evalcond[3]=((((-0.4)*x3610))+(((-0.4)*x3609))+(((-1.0)*px))+(((-0.00087248)*x3604)));
evalcond[4]=((((-0.4)*cj12*r11))+(((-0.4)*x3607))+(((-1.0)*py))+(((-0.00087248)*x3603)));
evalcond[5]=(((cj11*r12))+((r10*x3608))+(((-1.0)*x3611))+(((-1.0)*x3605*x3606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x3612=IKPowWithIntegerCheck(cj8,-1);
if(!x3612.valid){
continue;
}
CheckValue<IkReal> x3613=IKPowWithIntegerCheck(sj8,-1);
if(!x3613.valid){
continue;
}
if( IKabs(((x3612.value)*((((r10*sj12))+((cj12*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3613.value)*((((cj11*cj12*r00))+(((-1.0)*cj11*r01*sj12))+(((-1.0)*r02*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3612.value)*((((r10*sj12))+((cj12*r11))))))+IKsqr(((x3613.value)*((((cj11*cj12*r00))+(((-1.0)*cj11*r01*sj12))+(((-1.0)*r02*sj11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x3612.value)*((((r10*sj12))+((cj12*r11))))), ((x3613.value)*((((cj11*cj12*r00))+(((-1.0)*cj11*r01*sj12))+(((-1.0)*r02*sj11))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x3614=IKsin(j7);
IkReal x3615=IKcos(j7);
IkReal x3616=((1.0)*sj12);
IkReal x3617=(cj11*sj12);
IkReal x3618=((0.4)*sj12);
IkReal x3619=(cj12*sj11);
IkReal x3620=(cj12*r01);
IkReal x3621=(cj12*r11);
IkReal x3622=(cj8*x3614);
IkReal x3623=(cj8*x3615);
IkReal x3624=((1.0)*cj11*cj12);
IkReal x3625=(sj8*x3615);
IkReal x3626=(sj8*x3614);
evalcond[0]=((((-1.0)*r10*x3616))+x3622+(((-1.0)*x3621)));
evalcond[1]=((((-1.0)*r00*x3616))+x3623+(((-1.0)*x3620)));
evalcond[2]=(x3614+((cj11*r02))+((r00*x3619))+(((-1.0)*r01*sj11*x3616)));
evalcond[3]=((((-1.0)*x3615))+(((-1.0)*r11*sj11*x3616))+((cj11*r12))+((r10*x3619)));
evalcond[4]=(((r02*sj11))+x3625+((r01*x3617))+(((-1.0)*r00*x3624)));
evalcond[5]=(((r11*x3617))+((r12*sj11))+x3626+(((-1.0)*r10*x3624)));
evalcond[6]=((((-1.0)*r00*x3618))+(((0.42)*x3625))+(((0.00043624)*x3623))+(((-1.0)*px))+(((-0.4)*x3620))+(((-0.00043624)*x3615)));
evalcond[7]=((((0.42)*x3626))+(((0.00043624)*x3622))+(((-1.0)*r10*x3618))+(((-1.0)*py))+(((-0.4)*x3621))+(((-0.00043624)*x3614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x3627=IKPowWithIntegerCheck(cj8,-1);
if(!x3627.valid){
continue;
}
if( IKabs(((x3627.value)*((((r10*sj12))+((cj12*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*r12))+(((-1.0)*r11*sj11*sj12))+((cj12*r10*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3627.value)*((((r10*sj12))+((cj12*r11))))))+IKsqr((((cj11*r12))+(((-1.0)*r11*sj11*sj12))+((cj12*r10*sj11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x3627.value)*((((r10*sj12))+((cj12*r11))))), (((cj11*r12))+(((-1.0)*r11*sj11*sj12))+((cj12*r10*sj11))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x3628=IKsin(j7);
IkReal x3629=IKcos(j7);
IkReal x3630=((1.0)*sj12);
IkReal x3631=(cj11*sj12);
IkReal x3632=((0.4)*sj12);
IkReal x3633=(cj12*sj11);
IkReal x3634=(cj12*r01);
IkReal x3635=(cj12*r11);
IkReal x3636=(cj8*x3628);
IkReal x3637=(cj8*x3629);
IkReal x3638=((1.0)*cj11*cj12);
IkReal x3639=(sj8*x3629);
IkReal x3640=(sj8*x3628);
evalcond[0]=((((-1.0)*r10*x3630))+x3636+(((-1.0)*x3635)));
evalcond[1]=((((-1.0)*r00*x3630))+x3637+(((-1.0)*x3634)));
evalcond[2]=(x3628+((cj11*r02))+(((-1.0)*r01*sj11*x3630))+((r00*x3633)));
evalcond[3]=((((-1.0)*r11*sj11*x3630))+((cj11*r12))+((r10*x3633))+(((-1.0)*x3629)));
evalcond[4]=(((r02*sj11))+(((-1.0)*r00*x3638))+x3639+((r01*x3631)));
evalcond[5]=(((r11*x3631))+((r12*sj11))+(((-1.0)*r10*x3638))+x3640);
evalcond[6]=((((-0.4)*x3634))+(((-1.0)*r00*x3632))+(((-0.00043624)*x3629))+(((-1.0)*px))+(((0.00043624)*x3637))+(((0.42)*x3639)));
evalcond[7]=((((-0.4)*x3635))+(((-0.00043624)*x3628))+(((-1.0)*r10*x3632))+(((0.42)*x3640))+(((-1.0)*py))+(((0.00043624)*x3636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x3641=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x3641.valid){
continue;
}
CheckValue<IkReal> x3642 = IKatan2WithCheck(IkReal((((r10*sj12))+((cj12*r11)))),IkReal((((r00*sj12))+((cj12*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3642.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3641.value)))+(x3642.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x3643=IKsin(j7);
IkReal x3644=IKcos(j7);
IkReal x3645=((1.0)*sj12);
IkReal x3646=(cj11*sj12);
IkReal x3647=((0.4)*sj12);
IkReal x3648=(cj12*sj11);
IkReal x3649=(cj12*r01);
IkReal x3650=(cj12*r11);
IkReal x3651=(cj8*x3643);
IkReal x3652=(cj8*x3644);
IkReal x3653=((1.0)*cj11*cj12);
IkReal x3654=(sj8*x3644);
IkReal x3655=(sj8*x3643);
evalcond[0]=(x3651+(((-1.0)*x3650))+(((-1.0)*r10*x3645)));
evalcond[1]=(x3652+(((-1.0)*x3649))+(((-1.0)*r00*x3645)));
evalcond[2]=(((r00*x3648))+(((-1.0)*r01*sj11*x3645))+x3643+((cj11*r02)));
evalcond[3]=((((-1.0)*r11*sj11*x3645))+((cj11*r12))+(((-1.0)*x3644))+((r10*x3648)));
evalcond[4]=(((r02*sj11))+((r01*x3646))+x3654+(((-1.0)*r00*x3653)));
evalcond[5]=(((r11*x3646))+((r12*sj11))+(((-1.0)*r10*x3653))+x3655);
evalcond[6]=((((-0.00043624)*x3644))+(((0.00043624)*x3652))+(((0.42)*x3654))+(((-0.4)*x3649))+(((-1.0)*px))+(((-1.0)*r00*x3647)));
evalcond[7]=((((-0.00043624)*x3643))+(((0.00043624)*x3651))+(((0.42)*x3655))+(((-1.0)*py))+(((-1.0)*r10*x3647))+(((-0.4)*x3650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x3656=((1.0)*cj12);
IkReal x3657=((1.0)*sj12);
j7eval[0]=cj8;
j7eval[1]=IKsign(cj8);
j7eval[2]=((IKabs(((((-1.0)*r10*x3657))+(((-1.0)*r11*x3656)))))+(IKabs(((((-1.0)*r01*x3656))+(((-1.0)*r00*x3657))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7eval[0]=cj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7eval[0]=cj8;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x3658=((1.0)*sj12);
CheckValue<IkReal> x3659=IKPowWithIntegerCheck(cj8,-1);
if(!x3659.valid){
continue;
}
CheckValue<IkReal> x3660=IKPowWithIntegerCheck(sj8,-1);
if(!x3660.valid){
continue;
}
if( IKabs(((x3659.value)*(((((-1.0)*r10*x3658))+(((-1.0)*cj12*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3660.value)*((((cj11*cj12*r00))+(((-1.0)*cj11*r01*x3658))+(((-1.0)*r02*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3659.value)*(((((-1.0)*r10*x3658))+(((-1.0)*cj12*r11))))))+IKsqr(((x3660.value)*((((cj11*cj12*r00))+(((-1.0)*cj11*r01*x3658))+(((-1.0)*r02*sj11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x3659.value)*(((((-1.0)*r10*x3658))+(((-1.0)*cj12*r11))))), ((x3660.value)*((((cj11*cj12*r00))+(((-1.0)*cj11*r01*x3658))+(((-1.0)*r02*sj11))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x3661=IKcos(j7);
IkReal x3662=IKsin(j7);
IkReal x3663=((1.0)*r11);
IkReal x3664=(sj11*sj12);
IkReal x3665=((0.00043624)*cj8);
IkReal x3666=(cj11*sj12);
IkReal x3667=((1.0)*r00);
IkReal x3668=(r10*sj12);
IkReal x3669=(cj11*cj12);
IkReal x3670=(cj12*sj11);
IkReal x3671=(cj12*r01);
IkReal x3672=((1.0)*cj8);
IkReal x3673=(sj8*x3661);
IkReal x3674=(sj8*x3662);
evalcond[0]=((((-1.0)*cj12*x3663))+(((-1.0)*x3668))+(((-1.0)*x3662*x3672)));
evalcond[1]=((((-1.0)*sj12*x3667))+(((-1.0)*x3661*x3672))+(((-1.0)*x3671)));
evalcond[2]=((((-1.0)*x3663*x3664))+((cj11*r12))+x3661+((r10*x3670)));
evalcond[3]=(((r00*x3670))+(((-1.0)*x3662))+(((-1.0)*r01*x3664))+((cj11*r02)));
evalcond[4]=(((r02*sj11))+(((-1.0)*x3667*x3669))+((r01*x3666))+x3673);
evalcond[5]=((((-1.0)*r10*x3669))+((r12*sj11))+((r11*x3666))+x3674);
evalcond[6]=((((-0.00043624)*x3661))+(((-1.0)*x3661*x3665))+(((-1.0)*px))+(((-0.4)*x3671))+(((-0.4)*r00*sj12))+(((0.42)*x3673)));
evalcond[7]=((((-1.0)*x3662*x3665))+(((-0.00043624)*x3662))+(((-0.4)*cj12*r11))+(((-0.4)*x3668))+(((-1.0)*py))+(((0.42)*x3674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x3675=((1.0)*r01);
CheckValue<IkReal> x3676=IKPowWithIntegerCheck(cj8,-1);
if(!x3676.valid){
continue;
}
if( IKabs(((((-1.0)*sj11*sj12*x3675))+((cj12*r00*sj11))+((cj11*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3676.value)*(((((-1.0)*cj12*x3675))+(((-1.0)*r00*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj11*sj12*x3675))+((cj12*r00*sj11))+((cj11*r02))))+IKsqr(((x3676.value)*(((((-1.0)*cj12*x3675))+(((-1.0)*r00*sj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*sj11*sj12*x3675))+((cj12*r00*sj11))+((cj11*r02))), ((x3676.value)*(((((-1.0)*cj12*x3675))+(((-1.0)*r00*sj12))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x3677=IKcos(j7);
IkReal x3678=IKsin(j7);
IkReal x3679=((1.0)*r11);
IkReal x3680=(sj11*sj12);
IkReal x3681=((0.00043624)*cj8);
IkReal x3682=(cj11*sj12);
IkReal x3683=((1.0)*r00);
IkReal x3684=(r10*sj12);
IkReal x3685=(cj11*cj12);
IkReal x3686=(cj12*sj11);
IkReal x3687=(cj12*r01);
IkReal x3688=((1.0)*cj8);
IkReal x3689=(sj8*x3677);
IkReal x3690=(sj8*x3678);
evalcond[0]=((((-1.0)*cj12*x3679))+(((-1.0)*x3684))+(((-1.0)*x3678*x3688)));
evalcond[1]=((((-1.0)*x3677*x3688))+(((-1.0)*sj12*x3683))+(((-1.0)*x3687)));
evalcond[2]=(((r10*x3686))+((cj11*r12))+x3677+(((-1.0)*x3679*x3680)));
evalcond[3]=(((r00*x3686))+(((-1.0)*r01*x3680))+((cj11*r02))+(((-1.0)*x3678)));
evalcond[4]=(((r02*sj11))+((r01*x3682))+(((-1.0)*x3683*x3685))+x3689);
evalcond[5]=((((-1.0)*r10*x3685))+((r12*sj11))+x3690+((r11*x3682)));
evalcond[6]=((((0.42)*x3689))+(((-0.00043624)*x3677))+(((-1.0)*x3677*x3681))+(((-1.0)*px))+(((-0.4)*r00*sj12))+(((-0.4)*x3687)));
evalcond[7]=((((-0.4)*cj12*r11))+(((-0.00043624)*x3678))+(((0.42)*x3690))+(((-1.0)*py))+(((-0.4)*x3684))+(((-1.0)*x3678*x3681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x3691=((1.0)*cj12);
IkReal x3692=((1.0)*sj12);
CheckValue<IkReal> x3693=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x3693.valid){
continue;
}
CheckValue<IkReal> x3694 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x3691))+(((-1.0)*r10*x3692)))),IkReal(((((-1.0)*r01*x3691))+(((-1.0)*r00*x3692)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3694.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3693.value)))+(x3694.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x3695=IKcos(j7);
IkReal x3696=IKsin(j7);
IkReal x3697=((1.0)*r11);
IkReal x3698=(sj11*sj12);
IkReal x3699=((0.00043624)*cj8);
IkReal x3700=(cj11*sj12);
IkReal x3701=((1.0)*r00);
IkReal x3702=(r10*sj12);
IkReal x3703=(cj11*cj12);
IkReal x3704=(cj12*sj11);
IkReal x3705=(cj12*r01);
IkReal x3706=((1.0)*cj8);
IkReal x3707=(sj8*x3695);
IkReal x3708=(sj8*x3696);
evalcond[0]=((((-1.0)*cj12*x3697))+(((-1.0)*x3696*x3706))+(((-1.0)*x3702)));
evalcond[1]=((((-1.0)*sj12*x3701))+(((-1.0)*x3695*x3706))+(((-1.0)*x3705)));
evalcond[2]=(((cj11*r12))+x3695+(((-1.0)*x3697*x3698))+((r10*x3704)));
evalcond[3]=((((-1.0)*r01*x3698))+((r00*x3704))+((cj11*r02))+(((-1.0)*x3696)));
evalcond[4]=(((r02*sj11))+((r01*x3700))+(((-1.0)*x3701*x3703))+x3707);
evalcond[5]=(((r12*sj11))+((r11*x3700))+x3708+(((-1.0)*r10*x3703)));
evalcond[6]=((((-0.4)*x3705))+(((0.42)*x3707))+(((-1.0)*px))+(((-0.00043624)*x3695))+(((-0.4)*r00*sj12))+(((-1.0)*x3695*x3699)));
evalcond[7]=((((-0.4)*cj12*r11))+(((-0.4)*x3702))+(((0.42)*x3708))+(((-1.0)*py))+(((-0.00043624)*x3696))+(((-1.0)*x3696*x3699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x3713=IKPowWithIntegerCheck(sj8,-1);
if(!x3713.valid){
continue;
}
IkReal x3709=x3713.value;
IkReal x3710=(r02*sj11);
IkReal x3711=(cj11*r01*sj12);
IkReal x3712=(cj11*cj12*r00);
CheckValue<IkReal> x3714=IKPowWithIntegerCheck(cj8,-1);
if(!x3714.valid){
continue;
}
CheckValue<IkReal> x3715=IKPowWithIntegerCheck(cj9,-1);
if(!x3715.valid){
continue;
}
if( IKabs((x3709*(x3714.value)*(x3715.value)*((((r10*sj12*sj8))+(((-1.0)*sj9*x3712))+((sj9*x3710))+((sj9*x3711))+((cj12*r11*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3709*((x3712+(((-1.0)*x3711))+(((-1.0)*x3710)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3709*(x3714.value)*(x3715.value)*((((r10*sj12*sj8))+(((-1.0)*sj9*x3712))+((sj9*x3710))+((sj9*x3711))+((cj12*r11*sj8))))))+IKsqr((x3709*((x3712+(((-1.0)*x3711))+(((-1.0)*x3710))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x3709*(x3714.value)*(x3715.value)*((((r10*sj12*sj8))+(((-1.0)*sj9*x3712))+((sj9*x3710))+((sj9*x3711))+((cj12*r11*sj8))))), (x3709*((x3712+(((-1.0)*x3711))+(((-1.0)*x3710))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x3716=IKcos(j7);
IkReal x3717=IKsin(j7);
IkReal x3718=((1.0)*sj12);
IkReal x3719=(cj11*sj12);
IkReal x3720=((0.4)*sj12);
IkReal x3721=(cj12*sj11);
IkReal x3722=(cj12*r01);
IkReal x3723=(cj12*r11);
IkReal x3724=((1.0)*cj11*cj12);
IkReal x3725=(sj9*x3716);
IkReal x3726=(sj8*x3716);
IkReal x3727=(sj8*x3717);
IkReal x3728=(cj9*x3716);
IkReal x3729=((0.00043624)*x3717);
IkReal x3730=(cj8*x3717);
evalcond[0]=(((r02*sj11))+(((-1.0)*r00*x3724))+((r01*x3719))+x3726);
evalcond[1]=(((r11*x3719))+((r12*sj11))+x3727+(((-1.0)*r10*x3724)));
evalcond[2]=((((-1.0)*r10*x3718))+x3725+(((-1.0)*x3723))+((cj9*x3730)));
evalcond[3]=((((-1.0)*r00*x3718))+(((-1.0)*sj9*x3717))+((cj8*x3728))+(((-1.0)*x3722)));
evalcond[4]=(((cj9*x3717))+((r00*x3721))+(((-1.0)*r01*sj11*x3718))+((cj11*r02))+((cj8*x3725)));
evalcond[5]=((((-1.0)*r11*sj11*x3718))+((cj11*r12))+((r10*x3721))+(((-1.0)*x3728))+((sj9*x3730)));
evalcond[6]=((((-1.0)*r00*x3720))+(((-0.4)*x3722))+(((0.00043624)*cj8*x3728))+(((-1.0)*px))+(((0.42)*x3726))+(((-1.0)*sj9*x3729))+(((-0.00043624)*x3716)));
evalcond[7]=((((-1.0)*x3729))+(((0.00043624)*x3725))+(((-0.4)*x3723))+(((-1.0)*py))+(((0.42)*x3727))+((cj8*cj9*x3729))+(((-1.0)*r10*x3720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x3736=IKPowWithIntegerCheck(sj8,-1);
if(!x3736.valid){
continue;
}
IkReal x3731=x3736.value;
IkReal x3732=(cj12*r10);
IkReal x3733=(r11*sj12);
IkReal x3734=(r12*sj11);
IkReal x3735=(cj11*cj8*cj9);
CheckValue<IkReal> x3737=IKPowWithIntegerCheck(sj9,-1);
if(!x3737.valid){
continue;
}
if( IKabs((x3731*((((cj11*x3732))+(((-1.0)*cj11*x3733))+(((-1.0)*x3734)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x3731*(x3737.value)*((((x3733*x3735))+((r10*sj12*sj8))+((cj12*r11*sj8))+(((-1.0)*x3732*x3735))+((cj8*cj9*x3734)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x3731*((((cj11*x3732))+(((-1.0)*cj11*x3733))+(((-1.0)*x3734))))))+IKsqr((x3731*(x3737.value)*((((x3733*x3735))+((r10*sj12*sj8))+((cj12*r11*sj8))+(((-1.0)*x3732*x3735))+((cj8*cj9*x3734))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x3731*((((cj11*x3732))+(((-1.0)*cj11*x3733))+(((-1.0)*x3734))))), (x3731*(x3737.value)*((((x3733*x3735))+((r10*sj12*sj8))+((cj12*r11*sj8))+(((-1.0)*x3732*x3735))+((cj8*cj9*x3734))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x3738=IKcos(j7);
IkReal x3739=IKsin(j7);
IkReal x3740=((1.0)*sj12);
IkReal x3741=(cj11*sj12);
IkReal x3742=((0.4)*sj12);
IkReal x3743=(cj12*sj11);
IkReal x3744=(cj12*r01);
IkReal x3745=(cj12*r11);
IkReal x3746=((1.0)*cj11*cj12);
IkReal x3747=(sj9*x3738);
IkReal x3748=(sj8*x3738);
IkReal x3749=(sj8*x3739);
IkReal x3750=(cj9*x3738);
IkReal x3751=((0.00043624)*x3739);
IkReal x3752=(cj8*x3739);
evalcond[0]=(((r02*sj11))+((r01*x3741))+(((-1.0)*r00*x3746))+x3748);
evalcond[1]=(((r12*sj11))+((r11*x3741))+x3749+(((-1.0)*r10*x3746)));
evalcond[2]=(x3747+(((-1.0)*x3745))+(((-1.0)*r10*x3740))+((cj9*x3752)));
evalcond[3]=((((-1.0)*r00*x3740))+(((-1.0)*x3744))+((cj8*x3750))+(((-1.0)*sj9*x3739)));
evalcond[4]=((((-1.0)*r01*sj11*x3740))+((r00*x3743))+((cj11*r02))+((cj9*x3739))+((cj8*x3747)));
evalcond[5]=((((-1.0)*r11*sj11*x3740))+((cj11*r12))+((r10*x3743))+(((-1.0)*x3750))+((sj9*x3752)));
evalcond[6]=((((-1.0)*r00*x3742))+(((-0.00043624)*x3738))+(((0.00043624)*cj8*x3750))+(((-1.0)*sj9*x3751))+(((-0.4)*x3744))+(((0.42)*x3748))+(((-1.0)*px)));
evalcond[7]=((((0.00043624)*x3747))+(((-1.0)*x3751))+(((-0.4)*x3745))+(((0.42)*x3749))+(((-1.0)*py))+(((-1.0)*r10*x3742))+((cj8*cj9*x3751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x3753=((1.0)*sj11);
IkReal x3754=(cj11*cj12);
IkReal x3755=((1.0)*cj11*sj12);
CheckValue<IkReal> x3756=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x3756.valid){
continue;
}
CheckValue<IkReal> x3757 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3753))+(((-1.0)*r11*x3755))+((r10*x3754)))),IkReal((((r00*x3754))+(((-1.0)*r01*x3755))+(((-1.0)*r02*x3753)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3757.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3756.value)))+(x3757.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x3758=IKcos(j7);
IkReal x3759=IKsin(j7);
IkReal x3760=((1.0)*sj12);
IkReal x3761=(cj11*sj12);
IkReal x3762=((0.4)*sj12);
IkReal x3763=(cj12*sj11);
IkReal x3764=(cj12*r01);
IkReal x3765=(cj12*r11);
IkReal x3766=((1.0)*cj11*cj12);
IkReal x3767=(sj9*x3758);
IkReal x3768=(sj8*x3758);
IkReal x3769=(sj8*x3759);
IkReal x3770=(cj9*x3758);
IkReal x3771=((0.00043624)*x3759);
IkReal x3772=(cj8*x3759);
evalcond[0]=(((r02*sj11))+x3768+(((-1.0)*r00*x3766))+((r01*x3761)));
evalcond[1]=((((-1.0)*r10*x3766))+((r12*sj11))+x3769+((r11*x3761)));
evalcond[2]=((((-1.0)*r10*x3760))+(((-1.0)*x3765))+((cj9*x3772))+x3767);
evalcond[3]=((((-1.0)*x3764))+((cj8*x3770))+(((-1.0)*r00*x3760))+(((-1.0)*sj9*x3759)));
evalcond[4]=((((-1.0)*r01*sj11*x3760))+((cj8*x3767))+((cj11*r02))+((cj9*x3759))+((r00*x3763)));
evalcond[5]=(((sj9*x3772))+((r10*x3763))+(((-1.0)*x3770))+((cj11*r12))+(((-1.0)*r11*sj11*x3760)));
evalcond[6]=((((0.00043624)*cj8*x3770))+(((-0.00043624)*x3758))+(((-1.0)*px))+(((-0.4)*x3764))+(((-1.0)*r00*x3762))+(((-1.0)*sj9*x3771))+(((0.42)*x3768)));
evalcond[7]=((((-1.0)*r10*x3762))+(((0.00043624)*x3767))+((cj8*cj9*x3771))+(((-1.0)*py))+(((-0.4)*x3765))+(((-1.0)*x3771))+(((0.42)*x3769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x3773=cj9*cj9;
IkReal x3774=(cj8*cj9);
IkReal x3775=(r10*sj12);
IkReal x3776=(r00*sj12);
IkReal x3777=((1.0)*sj9);
IkReal x3778=(cj12*r11);
IkReal x3779=(cj12*r01);
CheckValue<IkReal> x3780 = IKatan2WithCheck(IkReal(((((-1.0)*x3777*x3779))+(((-1.0)*x3776*x3777))+((x3774*x3778))+((x3774*x3775)))),IkReal((((sj9*x3775))+((sj9*x3778))+((x3774*x3779))+((x3774*x3776)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3780.valid){
continue;
}
CheckValue<IkReal> x3781=IKPowWithIntegerCheck(IKsign(((1.0)+((x3773*(cj8*cj8)))+(((-1.0)*x3773)))),-1);
if(!x3781.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x3780.value)+(((1.5707963267949)*(x3781.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x3782=IKcos(j7);
IkReal x3783=IKsin(j7);
IkReal x3784=((1.0)*sj12);
IkReal x3785=((0.4)*sj12);
IkReal x3786=((0.42)*sj8);
IkReal x3787=(cj12*r01);
IkReal x3788=(cj8*cj9);
IkReal x3789=(cj12*r11);
IkReal x3790=((0.00043624)*x3782);
IkReal x3791=((0.00043624)*x3783);
evalcond[0]=(((sj9*x3782))+(((-1.0)*x3789))+(((-1.0)*r10*x3784))+((x3783*x3788)));
evalcond[1]=((((-1.0)*r00*x3784))+((x3782*x3788))+(((-1.0)*sj9*x3783))+(((-1.0)*x3787)));
evalcond[2]=((((-1.0)*x3790))+(((-1.0)*r00*x3785))+((x3788*x3790))+((x3782*x3786))+(((-1.0)*px))+(((-0.4)*x3787))+(((-1.0)*sj9*x3791)));
evalcond[3]=((((-1.0)*x3791))+((sj9*x3790))+((x3788*x3791))+(((-1.0)*py))+(((-0.4)*x3789))+(((-1.0)*r10*x3785))+((x3783*x3786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x3792=(cj7*sj8);
IkReal x3793=((1.0)*cj8);
IkReal x3794=(((r10*sj12))+((cj12*r11)));
j11eval[0]=x3794;
j11eval[1]=IKsign(x3794);
j11eval[2]=((IKabs((((r22*x3792))+(((-1.0)*r02*x3793)))))+(IKabs(((((-1.0)*cj12*r00*x3793))+(((-1.0)*r21*sj12*x3792))+((cj12*r20*x3792))+((cj8*r01*sj12))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x3795=((1.0)*cj12);
IkReal x3796=(sj7*sj8);
IkReal x3797=((1.0)*sj12);
IkReal x3798=((((-1.0)*r00*x3797))+(((-1.0)*r01*x3795)));
j11eval[0]=x3798;
j11eval[1]=((IKabs(((((-1.0)*r21*x3796*x3797))+((cj12*r20*x3796))+((cj8*r11*sj12))+(((-1.0)*cj8*r10*x3795)))))+(IKabs((((r22*x3796))+(((-1.0)*cj8*r12))))));
j11eval[2]=IKsign(x3798);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x3799=(sj12*sj8);
IkReal x3800=(cj7*sj8);
IkReal x3801=((1.0)*sj7*sj8);
IkReal x3802=((((-1.0)*cj12*r21))+(((-1.0)*r20*sj12)));
j11eval[0]=x3802;
j11eval[1]=((IKabs((((r12*x3800))+(((-1.0)*r02*x3801)))))+(IKabs(((((-1.0)*cj7*r11*x3799))+(((-1.0)*cj12*r00*x3801))+((cj12*r10*x3800))+((r01*sj7*x3799))))));
j11eval[2]=IKsign(x3802);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3803=((-1.0)*r20);
IkReal x3805 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3805)==0){
continue;
}
IkReal x3804=pow(x3805,-0.5);
CheckValue<IkReal> x3806 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3803),IKFAST_ATAN2_MAGTHRESH);
if(!x3806.valid){
continue;
}
IkReal gconst24=((-1.0)*(x3806.value));
IkReal gconst25=(r21*x3804);
IkReal gconst26=(x3803*x3804);
CheckValue<IkReal> x3807 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3807.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j12+(x3807.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3808=(cj7*sj8);
IkReal x3809=((1.0)*cj8);
CheckValue<IkReal> x3810 = IKatan2WithCheck(IkReal((((gconst26*r20*x3808))+((cj8*gconst25*r01))+(((-1.0)*gconst25*r21*x3808))+(((-1.0)*gconst26*r00*x3809)))),IkReal((((r22*x3808))+(((-1.0)*r02*x3809)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3810.valid){
continue;
}
CheckValue<IkReal> x3811=IKPowWithIntegerCheck(IKsign((((gconst25*r10))+((gconst26*r11)))),-1);
if(!x3811.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x3810.value)+(((1.5707963267949)*(x3811.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3812=IKcos(j11);
IkReal x3813=IKsin(j11);
IkReal x3814=(cj8*sj9);
IkReal x3815=(gconst26*x3813);
IkReal x3816=(gconst25*x3812);
IkReal x3817=((1.0)*gconst26*x3812);
IkReal x3818=((1.0)*gconst25*x3813);
evalcond[0]=(((r21*x3816))+cj8+((r22*x3813))+(((-1.0)*r20*x3817)));
evalcond[1]=((((-1.0)*r00*x3817))+((r02*x3813))+((cj7*sj8))+((r01*x3816)));
evalcond[2]=(((r12*x3813))+((r11*x3816))+(((-1.0)*r10*x3817))+((sj7*sj8)));
evalcond[3]=((((-1.0)*sj8*sj9))+((r22*x3812))+(((-1.0)*r21*x3818))+((r20*x3815)));
evalcond[4]=((((-1.0)*r01*x3818))+((cj9*sj7))+((r02*x3812))+((cj7*x3814))+((r00*x3815)));
evalcond[5]=(((r12*x3812))+(((-1.0)*cj7*cj9))+((r10*x3815))+((sj7*x3814))+(((-1.0)*r11*x3818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3819=((-1.0)*r21);
IkReal x3821 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3821)==0){
continue;
}
IkReal x3820=pow(x3821,-0.5);
CheckValue<IkReal> x3822 = IKatan2WithCheck(IkReal(x3819),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3822.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x3822.value))));
IkReal gconst28=(x3819*x3820);
IkReal gconst29=((1.0)*r20*x3820);
CheckValue<IkReal> x3823 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3823.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12+(x3823.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3824=((1.0)*cj8);
IkReal x3825=(cj7*sj8);
CheckValue<IkReal> x3826=IKPowWithIntegerCheck(IKsign((((gconst28*r10))+((gconst29*r11)))),-1);
if(!x3826.valid){
continue;
}
CheckValue<IkReal> x3827 = IKatan2WithCheck(IkReal((((gconst29*r20*x3825))+(((-1.0)*gconst28*r21*x3825))+((cj8*gconst28*r01))+(((-1.0)*gconst29*r00*x3824)))),IkReal(((((-1.0)*r02*x3824))+((r22*x3825)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3827.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3826.value)))+(x3827.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3828=IKcos(j11);
IkReal x3829=IKsin(j11);
IkReal x3830=(cj8*sj9);
IkReal x3831=(gconst29*x3829);
IkReal x3832=(gconst28*x3828);
IkReal x3833=((1.0)*gconst29*x3828);
IkReal x3834=((1.0)*gconst28*x3829);
evalcond[0]=(cj8+(((-1.0)*r20*x3833))+((r22*x3829))+((r21*x3832)));
evalcond[1]=(((r01*x3832))+((r02*x3829))+(((-1.0)*r00*x3833))+((cj7*sj8)));
evalcond[2]=(((r12*x3829))+(((-1.0)*r10*x3833))+((r11*x3832))+((sj7*sj8)));
evalcond[3]=((((-1.0)*sj8*sj9))+(((-1.0)*r21*x3834))+((r20*x3831))+((r22*x3828)));
evalcond[4]=(((cj7*x3830))+((r00*x3831))+((cj9*sj7))+((r02*x3828))+(((-1.0)*r01*x3834)));
evalcond[5]=(((r12*x3828))+(((-1.0)*cj7*cj9))+((sj7*x3830))+(((-1.0)*r11*x3834))+((r10*x3831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=1.0;
j8=0;
IkReal x3835=(((r10*sj12))+((cj12*r11)));
j11eval[0]=x3835;
j11eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj12*r00))+((r01*sj12))))));
j11eval[2]=IKsign(x3835);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=1.0;
j8=0;
IkReal x3836=((1.0)*cj12);
IkReal x3837=((((-1.0)*r00*sj12))+(((-1.0)*r01*x3836)));
j11eval[0]=x3837;
j11eval[1]=IKsign(x3837);
j11eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3836))+((r11*sj12))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=1.0;
j8=0;
IkReal x3838=cj12*cj12;
IkReal x3839=r21*r21;
IkReal x3840=(r21*sj12);
IkReal x3841=(cj12*r20);
IkReal x3842=((((-1.0)*x3839))+(((-1.0)*(r22*r22)))+(((2.0)*x3840*x3841))+(((-1.0)*x3838*(r20*r20)))+((x3838*x3839)));
j11eval[0]=x3842;
j11eval[1]=IKsign(x3842);
j11eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x3841))+x3840))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[2];
IkReal x3843=((-1.0)*px);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=1.0;
j8=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3843);
rxp1_1=(px*r21);
rxp1_2=(r11*x3843);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[1]=((((-1.0)*cj12*r20))+((r21*sj12)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x3844=((-1.0)*px);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=1.0;
j8=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3844);
rxp1_1=(px*r21);
rxp1_2=(r11*x3844);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[1]=r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3845=((1.0)*sj7);
CheckValue<IkReal> x3846=IKPowWithIntegerCheck(((((-1.0)*r11*sj12))+((cj12*r10))),-1);
if(!x3846.valid){
continue;
}
CheckValue<IkReal> x3847=IKPowWithIntegerCheck(r02,-1);
if(!x3847.valid){
continue;
}
if( IKabs(((x3846.value)*(((((-1.0)*sj9*x3845))+((cj7*cj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3847.value)*(((((-1.0)*cj7*sj9))+(((-1.0)*cj9*x3845)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3846.value)*(((((-1.0)*sj9*x3845))+((cj7*cj9))))))+IKsqr(((x3847.value)*(((((-1.0)*cj7*sj9))+(((-1.0)*cj9*x3845))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x3846.value)*(((((-1.0)*sj9*x3845))+((cj7*cj9))))), ((x3847.value)*(((((-1.0)*cj7*sj9))+(((-1.0)*cj9*x3845))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3848=IKsin(j11);
IkReal x3849=IKcos(j11);
IkReal x3850=(cj12*x3848);
IkReal x3851=(sj12*x3849);
IkReal x3852=((1.0)*cj12*x3849);
IkReal x3853=((1.0)*sj12*x3848);
evalcond[0]=(r02*x3848);
evalcond[1]=(((cj9*sj7))+((cj7*sj9))+((r02*x3849)));
evalcond[2]=((((-1.0)*r21*x3853))+((r20*x3850)));
evalcond[3]=(((r11*x3851))+(((-1.0)*r10*x3852)));
evalcond[4]=((1.0)+((r21*x3851))+(((-1.0)*r20*x3852)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r10*x3850))+(((-1.0)*r11*x3853))+((sj7*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x3854=IKPowWithIntegerCheck(((((-1.0)*r11*sj12))+((cj12*r10))),-1);
if(!x3854.valid){
continue;
}
CheckValue<IkReal> x3855=IKPowWithIntegerCheck(((((-1.0)*cj12*r20))+((r21*sj12))),-1);
if(!x3855.valid){
continue;
}
if( IKabs(((x3854.value)*((((cj7*cj9))+(((-1.0)*sj7*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x3855.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3854.value)*((((cj7*cj9))+(((-1.0)*sj7*sj9))))))+IKsqr(((-1.0)*(x3855.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x3854.value)*((((cj7*cj9))+(((-1.0)*sj7*sj9))))), ((-1.0)*(x3855.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3856=IKsin(j11);
IkReal x3857=IKcos(j11);
IkReal x3858=(cj12*x3856);
IkReal x3859=(sj12*x3857);
IkReal x3860=((1.0)*cj12*x3857);
IkReal x3861=((1.0)*sj12*x3856);
evalcond[0]=(r02*x3856);
evalcond[1]=(((r02*x3857))+((cj9*sj7))+((cj7*sj9)));
evalcond[2]=((((-1.0)*r21*x3861))+((r20*x3858)));
evalcond[3]=(((r11*x3859))+(((-1.0)*r10*x3860)));
evalcond[4]=((1.0)+(((-1.0)*r20*x3860))+((r21*x3859)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r10*x3858))+(((-1.0)*r11*x3861))+((sj7*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[2];
IkReal x3862=((-1.0)*py);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=1.0;
j8=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3862);
rxp0_2=(py*r00);
rxp1_0=(r21*x3862);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j11eval[0]=((((-1.0)*r01*sj12))+((cj12*r00)));
j11eval[1]=r12;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x3863=((-1.0)*py);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=1.0;
j8=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3863);
rxp0_2=(py*r00);
rxp1_0=(r21*x3863);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j11eval[0]=((((-1.0)*r01*sj12))+((cj12*r00)));
j11eval[1]=((((-1.0)*cj12*r20))+((r21*sj12)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x3864=IKPowWithIntegerCheck(((((-1.0)*r01*sj12))+((cj12*r00))),-1);
if(!x3864.valid){
continue;
}
CheckValue<IkReal> x3865=IKPowWithIntegerCheck(((((-1.0)*cj12*r20))+((r21*sj12))),-1);
if(!x3865.valid){
continue;
}
if( IKabs(((x3864.value)*(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x3865.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3864.value)*(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*sj9))))))+IKsqr(((-1.0)*(x3865.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x3864.value)*(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*sj9))))), ((-1.0)*(x3865.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3866=IKsin(j11);
IkReal x3867=IKcos(j11);
IkReal x3868=(cj12*x3866);
IkReal x3869=(sj12*x3867);
IkReal x3870=((1.0)*cj12*x3867);
IkReal x3871=((1.0)*sj12*x3866);
evalcond[0]=(r12*x3866);
evalcond[1]=((((-1.0)*cj7*cj9))+((sj7*sj9))+((r12*x3867)));
evalcond[2]=(((r20*x3868))+(((-1.0)*r21*x3871)));
evalcond[3]=(((r01*x3869))+(((-1.0)*r00*x3870)));
evalcond[4]=((1.0)+((r21*x3869))+(((-1.0)*r20*x3870)));
evalcond[5]=(((cj9*sj7))+((r00*x3868))+((cj7*sj9))+(((-1.0)*r01*x3871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3872=((1.0)*sj7);
CheckValue<IkReal> x3873=IKPowWithIntegerCheck(((((-1.0)*r01*sj12))+((cj12*r00))),-1);
if(!x3873.valid){
continue;
}
CheckValue<IkReal> x3874=IKPowWithIntegerCheck(r12,-1);
if(!x3874.valid){
continue;
}
if( IKabs(((x3873.value)*(((((-1.0)*cj9*x3872))+(((-1.0)*cj7*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3874.value)*(((((-1.0)*sj9*x3872))+((cj7*cj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3873.value)*(((((-1.0)*cj9*x3872))+(((-1.0)*cj7*sj9))))))+IKsqr(((x3874.value)*(((((-1.0)*sj9*x3872))+((cj7*cj9))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x3873.value)*(((((-1.0)*cj9*x3872))+(((-1.0)*cj7*sj9))))), ((x3874.value)*(((((-1.0)*sj9*x3872))+((cj7*cj9))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3875=IKsin(j11);
IkReal x3876=IKcos(j11);
IkReal x3877=(cj12*x3875);
IkReal x3878=(sj12*x3876);
IkReal x3879=((1.0)*cj12*x3876);
IkReal x3880=((1.0)*sj12*x3875);
evalcond[0]=(r12*x3875);
evalcond[1]=((((-1.0)*cj7*cj9))+((sj7*sj9))+((r12*x3876)));
evalcond[2]=(((r20*x3877))+(((-1.0)*r21*x3880)));
evalcond[3]=(((r01*x3878))+(((-1.0)*r00*x3879)));
evalcond[4]=((1.0)+((r21*x3878))+(((-1.0)*r20*x3879)));
evalcond[5]=(((r00*x3877))+((cj9*sj7))+(((-1.0)*r01*x3880))+((cj7*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3881=cj12*cj12;
IkReal x3882=r21*r21;
IkReal x3883=(r21*sj12);
IkReal x3884=(cj12*r20);
CheckValue<IkReal> x3885=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3882))+(((2.0)*x3883*x3884))+((x3881*x3882))+(((-1.0)*(r22*r22)))+(((-1.0)*x3881*(r20*r20))))),-1);
if(!x3885.valid){
continue;
}
CheckValue<IkReal> x3886 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x3884))+x3883)),IKFAST_ATAN2_MAGTHRESH);
if(!x3886.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3885.value)))+(x3886.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3887=IKsin(j11);
IkReal x3888=IKcos(j11);
IkReal x3889=(cj12*r20);
IkReal x3890=(r01*sj12);
IkReal x3891=(cj12*r10);
IkReal x3892=(r11*sj12);
IkReal x3893=(cj12*r00);
IkReal x3894=(r21*sj12);
IkReal x3895=((1.0)*x3888);
IkReal x3896=((1.0)*x3887);
evalcond[0]=(((x3887*x3889))+((r22*x3888))+(((-1.0)*x3894*x3896)));
evalcond[1]=(((x3888*x3890))+((r02*x3887))+(((-1.0)*x3893*x3895)));
evalcond[2]=(((x3888*x3892))+((r12*x3887))+(((-1.0)*x3891*x3895)));
evalcond[3]=((1.0)+(((-1.0)*x3889*x3895))+((x3888*x3894))+((r22*x3887)));
evalcond[4]=(((cj9*sj7))+((r02*x3888))+((x3887*x3893))+((cj7*sj9))+(((-1.0)*x3890*x3896)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r12*x3888))+(((-1.0)*x3892*x3896))+((x3887*x3891))+((sj7*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3897=((1.0)*cj12);
CheckValue<IkReal> x3898=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj12))+(((-1.0)*r01*x3897)))),-1);
if(!x3898.valid){
continue;
}
CheckValue<IkReal> x3899 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3897))+((r11*sj12)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3899.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3898.value)))+(x3899.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3900=IKsin(j11);
IkReal x3901=IKcos(j11);
IkReal x3902=(cj12*r20);
IkReal x3903=(r01*sj12);
IkReal x3904=(cj12*r10);
IkReal x3905=(r11*sj12);
IkReal x3906=(cj12*r00);
IkReal x3907=(r21*sj12);
IkReal x3908=((1.0)*x3901);
IkReal x3909=((1.0)*x3900);
evalcond[0]=(((x3900*x3902))+((r22*x3901))+(((-1.0)*x3907*x3909)));
evalcond[1]=(((x3901*x3903))+(((-1.0)*x3906*x3908))+((r02*x3900)));
evalcond[2]=(((x3901*x3905))+(((-1.0)*x3904*x3908))+((r12*x3900)));
evalcond[3]=((1.0)+((x3901*x3907))+((r22*x3900))+(((-1.0)*x3902*x3908)));
evalcond[4]=(((x3900*x3906))+(((-1.0)*x3903*x3909))+((cj9*sj7))+((cj7*sj9))+((r02*x3901)));
evalcond[5]=(((x3900*x3904))+(((-1.0)*cj7*cj9))+(((-1.0)*x3905*x3909))+((r12*x3901))+((sj7*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x3910 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r00))+((r01*sj12)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3910.valid){
continue;
}
CheckValue<IkReal> x3911=IKPowWithIntegerCheck(IKsign((((r10*sj12))+((cj12*r11)))),-1);
if(!x3911.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x3910.value)+(((1.5707963267949)*(x3911.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3912=IKsin(j11);
IkReal x3913=IKcos(j11);
IkReal x3914=(cj12*r20);
IkReal x3915=(r01*sj12);
IkReal x3916=(cj12*r10);
IkReal x3917=(r11*sj12);
IkReal x3918=(cj12*r00);
IkReal x3919=(r21*sj12);
IkReal x3920=((1.0)*x3913);
IkReal x3921=((1.0)*x3912);
evalcond[0]=((((-1.0)*x3919*x3921))+((x3912*x3914))+((r22*x3913)));
evalcond[1]=(((x3913*x3915))+(((-1.0)*x3918*x3920))+((r02*x3912)));
evalcond[2]=(((x3913*x3917))+(((-1.0)*x3916*x3920))+((r12*x3912)));
evalcond[3]=((1.0)+(((-1.0)*x3914*x3920))+((x3913*x3919))+((r22*x3912)));
evalcond[4]=((((-1.0)*x3915*x3921))+((cj9*sj7))+((cj7*sj9))+((x3912*x3918))+((r02*x3913)));
evalcond[5]=((((-1.0)*cj7*cj9))+(((-1.0)*x3917*x3921))+((r12*x3913))+((x3912*x3916))+((sj7*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x3922=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x3922;
j11eval[1]=((IKabs(r12))+(IKabs((((r11*sj12))+(((-1.0)*cj12*r10))))));
j11eval[2]=IKsign(x3922);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x3923=((1.0)*cj12);
IkReal x3924=((((-1.0)*r11*x3923))+(((-1.0)*r10*sj12)));
j11eval[0]=x3924;
j11eval[1]=IKsign(x3924);
j11eval[2]=((IKabs(r02))+(IKabs((((r01*sj12))+(((-1.0)*r00*x3923))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x3925=cj12*cj12;
IkReal x3926=r21*r21;
IkReal x3927=(r21*sj12);
IkReal x3928=(cj12*r20);
IkReal x3929=((r22*r22)+((x3925*(r20*r20)))+x3926+(((-2.0)*x3927*x3928))+(((-1.0)*x3925*x3926)));
j11eval[0]=x3929;
j11eval[1]=IKsign(x3929);
j11eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x3928))+x3927))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[2];
IkReal x3930=((-1.0)*py);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3930);
rxp0_2=(py*r00);
rxp1_0=(r21*x3930);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j11eval[0]=((((-1.0)*r01*sj12))+((cj12*r00)));
j11eval[1]=((((-1.0)*cj12*r20))+((r21*sj12)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x3931=((-1.0)*py);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3931);
rxp0_2=(py*r00);
rxp1_0=(r21*x3931);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j11eval[0]=((((-1.0)*r01*sj12))+((cj12*r00)));
j11eval[1]=r12;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x3932=IKPowWithIntegerCheck(((((-1.0)*r01*sj12))+((cj12*r00))),-1);
if(!x3932.valid){
continue;
}
CheckValue<IkReal> x3933=IKPowWithIntegerCheck(r12,-1);
if(!x3933.valid){
continue;
}
if( IKabs(((x3932.value)*(((((-1.0)*cj9*sj7))+((cj7*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3933.value)*((((cj7*cj9))+((sj7*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3932.value)*(((((-1.0)*cj9*sj7))+((cj7*sj9))))))+IKsqr(((x3933.value)*((((cj7*cj9))+((sj7*sj9))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x3932.value)*(((((-1.0)*cj9*sj7))+((cj7*sj9))))), ((x3933.value)*((((cj7*cj9))+((sj7*sj9))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3934=IKsin(j11);
IkReal x3935=IKcos(j11);
IkReal x3936=((1.0)*sj9);
IkReal x3937=(cj12*x3934);
IkReal x3938=(sj12*x3935);
IkReal x3939=((1.0)*cj12*x3935);
IkReal x3940=((1.0)*sj12*x3934);
evalcond[0]=(r12*x3934);
evalcond[1]=(((r20*x3937))+(((-1.0)*r21*x3940)));
evalcond[2]=((((-1.0)*cj7*cj9))+(((-1.0)*sj7*x3936))+((r12*x3935)));
evalcond[3]=(((r01*x3938))+(((-1.0)*r00*x3939)));
evalcond[4]=((-1.0)+((r21*x3938))+(((-1.0)*r20*x3939)));
evalcond[5]=((((-1.0)*cj7*x3936))+((r00*x3937))+(((-1.0)*r01*x3940))+((cj9*sj7)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x3941=IKPowWithIntegerCheck(((((-1.0)*r01*sj12))+((cj12*r00))),-1);
if(!x3941.valid){
continue;
}
CheckValue<IkReal> x3942=IKPowWithIntegerCheck(((((-1.0)*cj12*r20))+((r21*sj12))),-1);
if(!x3942.valid){
continue;
}
if( IKabs(((x3941.value)*(((((-1.0)*cj9*sj7))+((cj7*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x3942.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3941.value)*(((((-1.0)*cj9*sj7))+((cj7*sj9))))))+IKsqr(x3942.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x3941.value)*(((((-1.0)*cj9*sj7))+((cj7*sj9))))), x3942.value);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3943=IKsin(j11);
IkReal x3944=IKcos(j11);
IkReal x3945=((1.0)*sj9);
IkReal x3946=(cj12*x3943);
IkReal x3947=(sj12*x3944);
IkReal x3948=((1.0)*cj12*x3944);
IkReal x3949=((1.0)*sj12*x3943);
evalcond[0]=(r12*x3943);
evalcond[1]=(((r20*x3946))+(((-1.0)*r21*x3949)));
evalcond[2]=((((-1.0)*cj7*cj9))+(((-1.0)*sj7*x3945))+((r12*x3944)));
evalcond[3]=(((r01*x3947))+(((-1.0)*r00*x3948)));
evalcond[4]=((-1.0)+(((-1.0)*r20*x3948))+((r21*x3947)));
evalcond[5]=(((r00*x3946))+(((-1.0)*r01*x3949))+((cj9*sj7))+(((-1.0)*cj7*x3945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[2];
IkReal x3950=((-1.0)*px);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3950);
rxp1_1=(px*r21);
rxp1_2=(r11*x3950);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[1]=((((-1.0)*cj12*r20))+((r21*sj12)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x3951=((-1.0)*px);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3951);
rxp1_1=(px*r21);
rxp1_2=(r11*x3951);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[1]=r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x3952=IKPowWithIntegerCheck(((((-1.0)*r11*sj12))+((cj12*r10))),-1);
if(!x3952.valid){
continue;
}
CheckValue<IkReal> x3953=IKPowWithIntegerCheck(r02,-1);
if(!x3953.valid){
continue;
}
if( IKabs(((x3952.value)*((((cj7*cj9))+((sj7*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3953.value)*(((((-1.0)*cj9*sj7))+((cj7*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3952.value)*((((cj7*cj9))+((sj7*sj9))))))+IKsqr(((x3953.value)*(((((-1.0)*cj9*sj7))+((cj7*sj9))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x3952.value)*((((cj7*cj9))+((sj7*sj9))))), ((x3953.value)*(((((-1.0)*cj9*sj7))+((cj7*sj9))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3954=IKsin(j11);
IkReal x3955=IKcos(j11);
IkReal x3956=((1.0)*cj7);
IkReal x3957=(r11*sj12);
IkReal x3958=(r21*sj12);
IkReal x3959=(cj12*x3954);
IkReal x3960=((1.0)*x3954);
IkReal x3961=((1.0)*cj12*x3955);
evalcond[0]=(r02*x3954);
evalcond[1]=((((-1.0)*sj9*x3956))+((cj9*sj7))+((r02*x3955)));
evalcond[2]=(((r20*x3959))+(((-1.0)*x3958*x3960)));
evalcond[3]=((((-1.0)*r10*x3961))+((x3955*x3957)));
evalcond[4]=((-1.0)+(((-1.0)*r20*x3961))+((x3955*x3958)));
evalcond[5]=((((-1.0)*cj9*x3956))+(((-1.0)*x3957*x3960))+((r10*x3959))+(((-1.0)*sj7*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x3962=IKPowWithIntegerCheck(((((-1.0)*r11*sj12))+((cj12*r10))),-1);
if(!x3962.valid){
continue;
}
CheckValue<IkReal> x3963=IKPowWithIntegerCheck(((((-1.0)*cj12*r20))+((r21*sj12))),-1);
if(!x3963.valid){
continue;
}
if( IKabs(((x3962.value)*((((cj7*cj9))+((sj7*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x3963.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3962.value)*((((cj7*cj9))+((sj7*sj9))))))+IKsqr(x3963.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x3962.value)*((((cj7*cj9))+((sj7*sj9))))), x3963.value);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3964=IKsin(j11);
IkReal x3965=IKcos(j11);
IkReal x3966=((1.0)*cj7);
IkReal x3967=(r11*sj12);
IkReal x3968=(r21*sj12);
IkReal x3969=(cj12*x3964);
IkReal x3970=((1.0)*x3964);
IkReal x3971=((1.0)*cj12*x3965);
evalcond[0]=(r02*x3964);
evalcond[1]=(((r02*x3965))+((cj9*sj7))+(((-1.0)*sj9*x3966)));
evalcond[2]=((((-1.0)*x3968*x3970))+((r20*x3969)));
evalcond[3]=(((x3965*x3967))+(((-1.0)*r10*x3971)));
evalcond[4]=((-1.0)+((x3965*x3968))+(((-1.0)*r20*x3971)));
evalcond[5]=((((-1.0)*cj9*x3966))+((r10*x3969))+(((-1.0)*x3967*x3970))+(((-1.0)*sj7*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3972=cj12*cj12;
IkReal x3973=r21*r21;
IkReal x3974=(r21*sj12);
IkReal x3975=(cj12*r20);
CheckValue<IkReal> x3976 = IKatan2WithCheck(IkReal(r22),IkReal((x3974+(((-1.0)*x3975)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3976.valid){
continue;
}
CheckValue<IkReal> x3977=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-1.0)*x3972*x3973))+((x3972*(r20*r20)))+x3973+(((-2.0)*x3974*x3975)))),-1);
if(!x3977.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x3976.value)+(((1.5707963267949)*(x3977.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3978=IKsin(j11);
IkReal x3979=IKcos(j11);
IkReal x3980=(cj12*r20);
IkReal x3981=(r01*sj12);
IkReal x3982=(cj12*r10);
IkReal x3983=((1.0)*sj9);
IkReal x3984=(r11*sj12);
IkReal x3985=(cj12*r00);
IkReal x3986=(r21*sj12);
IkReal x3987=((1.0)*x3979);
IkReal x3988=((1.0)*x3978);
evalcond[0]=((((-1.0)*x3986*x3988))+((r22*x3979))+((x3978*x3980)));
evalcond[1]=(((r02*x3978))+(((-1.0)*x3985*x3987))+((x3979*x3981)));
evalcond[2]=((((-1.0)*x3982*x3987))+((r12*x3978))+((x3979*x3984)));
evalcond[3]=((-1.0)+((r22*x3978))+((x3979*x3986))+(((-1.0)*x3980*x3987)));
evalcond[4]=(((r02*x3979))+(((-1.0)*x3981*x3988))+(((-1.0)*cj7*x3983))+((cj9*sj7))+((x3978*x3985)));
evalcond[5]=((((-1.0)*cj7*cj9))+(((-1.0)*x3984*x3988))+(((-1.0)*sj7*x3983))+((r12*x3979))+((x3978*x3982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x3989=((1.0)*cj12);
CheckValue<IkReal> x3990 = IKatan2WithCheck(IkReal((((r01*sj12))+(((-1.0)*r00*x3989)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3990.valid){
continue;
}
CheckValue<IkReal> x3991=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3989))+(((-1.0)*r10*sj12)))),-1);
if(!x3991.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x3990.value)+(((1.5707963267949)*(x3991.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x3992=IKsin(j11);
IkReal x3993=IKcos(j11);
IkReal x3994=(cj12*r20);
IkReal x3995=(r01*sj12);
IkReal x3996=(cj12*r10);
IkReal x3997=((1.0)*sj9);
IkReal x3998=(r11*sj12);
IkReal x3999=(cj12*r00);
IkReal x4000=(r21*sj12);
IkReal x4001=((1.0)*x3993);
IkReal x4002=((1.0)*x3992);
evalcond[0]=((((-1.0)*x4000*x4002))+((r22*x3993))+((x3992*x3994)));
evalcond[1]=((((-1.0)*x3999*x4001))+((r02*x3992))+((x3993*x3995)));
evalcond[2]=(((r12*x3992))+(((-1.0)*x3996*x4001))+((x3993*x3998)));
evalcond[3]=((-1.0)+(((-1.0)*x3994*x4001))+((r22*x3992))+((x3993*x4000)));
evalcond[4]=(((cj9*sj7))+(((-1.0)*x3995*x4002))+((r02*x3993))+(((-1.0)*cj7*x3997))+((x3992*x3999)));
evalcond[5]=((((-1.0)*x3998*x4002))+(((-1.0)*cj7*cj9))+(((-1.0)*sj7*x3997))+((r12*x3993))+((x3992*x3996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x4003 = IKatan2WithCheck(IkReal((((r11*sj12))+(((-1.0)*cj12*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4003.valid){
continue;
}
CheckValue<IkReal> x4004=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x4004.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4003.value)+(((1.5707963267949)*(x4004.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4005=IKsin(j11);
IkReal x4006=IKcos(j11);
IkReal x4007=(cj12*r20);
IkReal x4008=(r01*sj12);
IkReal x4009=(cj12*r10);
IkReal x4010=((1.0)*sj9);
IkReal x4011=(r11*sj12);
IkReal x4012=(cj12*r00);
IkReal x4013=(r21*sj12);
IkReal x4014=((1.0)*x4006);
IkReal x4015=((1.0)*x4005);
evalcond[0]=((((-1.0)*x4013*x4015))+((x4005*x4007))+((r22*x4006)));
evalcond[1]=((((-1.0)*x4012*x4014))+((r02*x4005))+((x4006*x4008)));
evalcond[2]=(((r12*x4005))+(((-1.0)*x4009*x4014))+((x4006*x4011)));
evalcond[3]=((-1.0)+((r22*x4005))+(((-1.0)*x4007*x4014))+((x4006*x4013)));
evalcond[4]=(((x4005*x4012))+(((-1.0)*cj7*x4010))+((cj9*sj7))+((r02*x4006))+(((-1.0)*x4008*x4015)));
evalcond[5]=(((r12*x4006))+(((-1.0)*cj7*cj9))+(((-1.0)*x4011*x4015))+((x4005*x4009))+(((-1.0)*sj7*x4010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4016=((-1.0)*r00);
IkReal x4018 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4018)==0){
continue;
}
IkReal x4017=pow(x4018,-0.5);
CheckValue<IkReal> x4019 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4016),IKFAST_ATAN2_MAGTHRESH);
if(!x4019.valid){
continue;
}
IkReal gconst30=((-1.0)*(x4019.value));
IkReal gconst31=(r01*x4017);
IkReal gconst32=(x4016*x4017);
CheckValue<IkReal> x4020 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4020.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j12+(x4020.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4021=((1.0)*cj8);
IkReal x4022=(cj7*sj8);
CheckValue<IkReal> x4023=IKPowWithIntegerCheck(IKsign((((gconst32*r11))+((gconst31*r10)))),-1);
if(!x4023.valid){
continue;
}
CheckValue<IkReal> x4024 = IKatan2WithCheck(IkReal(((((-1.0)*gconst31*r21*x4022))+((cj8*gconst31*r01))+((gconst32*r20*x4022))+(((-1.0)*gconst32*r00*x4021)))),IkReal(((((-1.0)*r02*x4021))+((r22*x4022)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4024.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4023.value)))+(x4024.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4025=IKcos(j11);
IkReal x4026=IKsin(j11);
IkReal x4027=(cj8*sj9);
IkReal x4028=(gconst32*r00);
IkReal x4029=(gconst31*r01);
IkReal x4030=((1.0)*x4025);
IkReal x4031=((1.0)*x4026);
IkReal x4032=(gconst32*x4026);
IkReal x4033=(gconst31*x4025);
evalcond[0]=(((r21*x4033))+cj8+(((-1.0)*gconst32*r20*x4030))+((r22*x4026)));
evalcond[1]=(((x4025*x4029))+(((-1.0)*x4028*x4030))+((cj7*sj8))+((r02*x4026)));
evalcond[2]=((((-1.0)*gconst32*r10*x4030))+((r12*x4026))+((sj7*sj8))+((r11*x4033)));
evalcond[3]=((((-1.0)*sj8*sj9))+((r20*x4032))+(((-1.0)*gconst31*r21*x4031))+((r22*x4025)));
evalcond[4]=(((cj7*x4027))+((cj9*sj7))+(((-1.0)*x4029*x4031))+((x4026*x4028))+((r02*x4025)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r10*x4032))+((r12*x4025))+(((-1.0)*gconst31*r11*x4031))+((sj7*x4027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4034=((-1.0)*r01);
IkReal x4036 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4036)==0){
continue;
}
IkReal x4035=pow(x4036,-0.5);
CheckValue<IkReal> x4037 = IKatan2WithCheck(IkReal(x4034),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4037.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x4037.value))));
IkReal gconst34=(x4034*x4035);
IkReal gconst35=((1.0)*r00*x4035);
CheckValue<IkReal> x4038 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4038.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12+(x4038.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4039=((1.0)*cj8);
IkReal x4040=(cj7*sj8);
CheckValue<IkReal> x4041 = IKatan2WithCheck(IkReal(((((-1.0)*gconst35*r00*x4039))+(((-1.0)*gconst34*r21*x4040))+((cj8*gconst34*r01))+((gconst35*r20*x4040)))),IkReal((((r22*x4040))+(((-1.0)*r02*x4039)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4041.valid){
continue;
}
CheckValue<IkReal> x4042=IKPowWithIntegerCheck(IKsign((((gconst35*r11))+((gconst34*r10)))),-1);
if(!x4042.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4041.value)+(((1.5707963267949)*(x4042.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4043=IKcos(j11);
IkReal x4044=IKsin(j11);
IkReal x4045=(cj8*sj9);
IkReal x4046=(gconst34*x4043);
IkReal x4047=(gconst35*x4044);
IkReal x4048=((1.0)*gconst34*x4044);
IkReal x4049=((1.0)*gconst35*x4043);
evalcond[0]=(((r22*x4044))+(((-1.0)*r20*x4049))+cj8+((r21*x4046)));
evalcond[1]=(((r02*x4044))+(((-1.0)*r00*x4049))+((r01*x4046))+((cj7*sj8)));
evalcond[2]=((((-1.0)*r10*x4049))+((r12*x4044))+((r11*x4046))+((sj7*sj8)));
evalcond[3]=(((r22*x4043))+(((-1.0)*sj8*sj9))+(((-1.0)*r21*x4048))+((r20*x4047)));
evalcond[4]=(((r02*x4043))+((cj9*sj7))+(((-1.0)*r01*x4048))+((cj7*x4045))+((r00*x4047)));
evalcond[5]=((((-1.0)*cj7*cj9))+(((-1.0)*r11*x4048))+((r12*x4043))+((sj7*x4045))+((r10*x4047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4051 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4051)==0){
continue;
}
IkReal x4050=pow(x4051,-0.5);
CheckValue<IkReal> x4052 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4052.valid){
continue;
}
IkReal gconst36=((-1.0)*(x4052.value));
IkReal gconst37=((-1.0)*r11*x4050);
IkReal gconst38=(r10*x4050);
CheckValue<IkReal> x4053 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4053.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4053.value)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4054=(sj7*sj8);
IkReal x4055=((1.0)*gconst37);
IkReal x4056=((1.0)*cj8);
CheckValue<IkReal> x4057 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4054*x4055))+((gconst38*r20*x4054))+((cj8*gconst37*r11))+(((-1.0)*gconst38*r10*x4056)))),IkReal(((((-1.0)*r12*x4056))+((r22*x4054)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4057.valid){
continue;
}
CheckValue<IkReal> x4058=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst38*r01))+(((-1.0)*r00*x4055)))),-1);
if(!x4058.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4057.value)+(((1.5707963267949)*(x4058.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4059=IKcos(j11);
IkReal x4060=IKsin(j11);
IkReal x4061=(cj8*sj9);
IkReal x4062=(gconst38*r00);
IkReal x4063=(gconst38*r10);
IkReal x4064=(gconst37*r11);
IkReal x4065=(gconst38*r20);
IkReal x4066=((1.0)*x4059);
IkReal x4067=((1.0)*x4060);
IkReal x4068=(gconst37*x4059);
evalcond[0]=((((-1.0)*x4065*x4066))+cj8+((r21*x4068))+((r22*x4060)));
evalcond[1]=(((r02*x4060))+(((-1.0)*x4062*x4066))+((cj7*sj8))+((r01*x4068)));
evalcond[2]=(((x4059*x4064))+(((-1.0)*x4063*x4066))+((r12*x4060))+((sj7*sj8)));
evalcond[3]=((((-1.0)*sj8*sj9))+((x4060*x4065))+(((-1.0)*gconst37*r21*x4067))+((r22*x4059)));
evalcond[4]=(((x4060*x4062))+((r02*x4059))+(((-1.0)*gconst37*r01*x4067))+((cj9*sj7))+((cj7*x4061)));
evalcond[5]=((((-1.0)*cj7*cj9))+((x4060*x4063))+(((-1.0)*x4064*x4067))+((sj7*x4061))+((r12*x4059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4070 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4070)==0){
continue;
}
IkReal x4069=pow(x4070,-0.5);
CheckValue<IkReal> x4071 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4071.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x4071.value))));
IkReal gconst40=((1.0)*r11*x4069);
IkReal gconst41=((-1.0)*r10*x4069);
CheckValue<IkReal> x4072 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4072.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4072.value)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
CheckValue<IkReal> x4075 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4075.valid){
continue;
}
IkReal x4073=((1.0)*(x4075.value));
IkReal x4074=x4069;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj12=gconst40;
cj12=gconst41;
j12=((3.14159265)+(((-1.0)*x4073)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x4073)));
IkReal gconst40=((1.0)*r11*x4074);
IkReal gconst41=((-1.0)*r10*x4074);
IkReal x4076=r12*r12;
IkReal x4077=(cj8*r02);
IkReal x4078=(cj7*r22*sj8);
CheckValue<IkReal> x4082=IKPowWithIntegerCheck(((-1.0)+x4076),-1);
if(!x4082.valid){
continue;
}
IkReal x4079=x4082.value;
if((((1.0)+(((-1.0)*x4076)))) < -0.00001)
continue;
IkReal x4080=IKsqrt(((1.0)+(((-1.0)*x4076))));
IkReal x4081=(r12*x4079*x4080);
j11eval[0]=0;
j11eval[1]=((IKabs(((((-1.0)*x4077))+x4078)))+(IKabs(((((-1.0)*x4078*x4081))+((x4077*x4081))))));
j11eval[2]=0;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4083=((1.0)*gconst40);
IkReal x4084=((1.0)*cj8);
IkReal x4085=(sj7*sj8);
CheckValue<IkReal> x4086 = IKatan2WithCheck(IkReal((((cj8*gconst40*r11))+(((-1.0)*r21*x4083*x4085))+(((-1.0)*gconst41*r10*x4084))+((gconst41*r20*x4085)))),IkReal(((((-1.0)*r12*x4084))+((r22*x4085)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4086.valid){
continue;
}
CheckValue<IkReal> x4087=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst41*r01))+(((-1.0)*r00*x4083)))),-1);
if(!x4087.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4086.value)+(((1.5707963267949)*(x4087.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4088=IKcos(j11);
IkReal x4089=IKsin(j11);
IkReal x4090=(cj8*sj9);
IkReal x4091=(gconst40*x4088);
IkReal x4092=(gconst41*x4089);
IkReal x4093=((1.0)*gconst40*x4089);
IkReal x4094=((1.0)*gconst41*x4088);
evalcond[0]=(cj8+(((-1.0)*r20*x4094))+((r21*x4091))+((r22*x4089)));
evalcond[1]=(((r01*x4091))+(((-1.0)*r00*x4094))+((r02*x4089))+((cj7*sj8)));
evalcond[2]=((((-1.0)*r10*x4094))+((r11*x4091))+((r12*x4089))+((sj7*sj8)));
evalcond[3]=(((r20*x4092))+(((-1.0)*sj8*sj9))+(((-1.0)*r21*x4093))+((r22*x4088)));
evalcond[4]=(((cj7*x4090))+((r00*x4092))+((cj9*sj7))+(((-1.0)*r01*x4093))+((r02*x4088)));
evalcond[5]=((((-1.0)*r11*x4093))+(((-1.0)*cj7*cj9))+((sj7*x4090))+((r10*x4092))+((r12*x4088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4095=((1.0)*cj8);
IkReal x4096=(cj7*sj8);
CheckValue<IkReal> x4097=IKPowWithIntegerCheck(IKsign((((gconst40*r10))+((gconst41*r11)))),-1);
if(!x4097.valid){
continue;
}
CheckValue<IkReal> x4098 = IKatan2WithCheck(IkReal((((cj8*gconst40*r01))+((gconst41*r20*x4096))+(((-1.0)*gconst40*r21*x4096))+(((-1.0)*gconst41*r00*x4095)))),IkReal((((r22*x4096))+(((-1.0)*r02*x4095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4098.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4097.value)))+(x4098.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4099=IKcos(j11);
IkReal x4100=IKsin(j11);
IkReal x4101=(cj8*sj9);
IkReal x4102=(gconst40*x4099);
IkReal x4103=(gconst41*x4100);
IkReal x4104=((1.0)*gconst40*x4100);
IkReal x4105=((1.0)*gconst41*x4099);
evalcond[0]=(((r22*x4100))+cj8+((r21*x4102))+(((-1.0)*r20*x4105)));
evalcond[1]=(((cj7*sj8))+((r02*x4100))+(((-1.0)*r00*x4105))+((r01*x4102)));
evalcond[2]=((((-1.0)*r10*x4105))+((r12*x4100))+((r11*x4102))+((sj7*sj8)));
evalcond[3]=((((-1.0)*sj8*sj9))+((r22*x4099))+((r20*x4103))+(((-1.0)*r21*x4104)));
evalcond[4]=(((cj9*sj7))+((cj7*x4101))+((r02*x4099))+((r00*x4103))+(((-1.0)*r01*x4104)));
evalcond[5]=((((-1.0)*cj7*cj9))+(((-1.0)*r11*x4104))+((sj7*x4101))+((r12*x4099))+((r10*x4103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x4106=((-1.0)*py);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4106);
rxp0_2=(py*r00);
rxp1_0=(r21*x4106);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x4107=((((-1.0)*r21*sj12))+((cj12*r20)));
j11eval[0]=x4107;
j11eval[1]=((IKabs(cj8))+(IKabs((sj8*sj9))));
j11eval[2]=IKsign(x4107);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x4108=((-1.0)*py);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4108);
rxp0_2=(py*r00);
rxp1_0=(r21*x4108);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j11eval[0]=r12;
j11eval[1]=IKsign(r12);
j11eval[2]=((IKabs((sj7*sj8)))+(IKabs((((cj7*cj9))+(((-1.0)*cj8*sj7*sj9))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x4109=((-1.0)*py);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4109);
rxp0_2=(py*r00);
rxp1_0=(r21*x4109);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j11eval[0]=r12;
j11eval[1]=((((-1.0)*cj12*r20))+((r21*sj12)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x4110=IKPowWithIntegerCheck(r12,-1);
if(!x4110.valid){
continue;
}
CheckValue<IkReal> x4111=IKPowWithIntegerCheck(((((-1.0)*cj12*r20))+((r21*sj12))),-1);
if(!x4111.valid){
continue;
}
if( IKabs(((-1.0)*sj7*sj8*(x4110.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj8*(x4111.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj7*sj8*(x4110.value)))+IKsqr(((-1.0)*cj8*(x4111.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*sj7*sj8*(x4110.value)), ((-1.0)*cj8*(x4111.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4112=IKcos(j11);
IkReal x4113=IKsin(j11);
IkReal x4114=(cj12*r00);
IkReal x4115=(cj8*sj9);
IkReal x4116=(r21*sj12);
IkReal x4117=(r01*sj12);
IkReal x4118=(cj12*r20);
IkReal x4119=((1.0)*x4112);
IkReal x4120=((1.0)*x4113);
evalcond[0]=(((r12*x4113))+((sj7*sj8)));
evalcond[1]=(((r12*x4112))+(((-1.0)*cj7*cj9))+((sj7*x4115)));
evalcond[2]=(((x4112*x4116))+cj8+(((-1.0)*x4118*x4119)));
evalcond[3]=(((x4112*x4117))+(((-1.0)*x4114*x4119))+((cj7*sj8)));
evalcond[4]=((((-1.0)*sj8*sj9))+(((-1.0)*x4116*x4120))+((x4113*x4118)));
evalcond[5]=(((cj7*x4115))+((cj9*sj7))+((x4113*x4114))+(((-1.0)*x4117*x4120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x4121 = IKatan2WithCheck(IkReal(((-1.0)*sj7*sj8)),IkReal((((cj7*cj9))+(((-1.0)*cj8*sj7*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4121.valid){
continue;
}
CheckValue<IkReal> x4122=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x4122.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4121.value)+(((1.5707963267949)*(x4122.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4123=IKcos(j11);
IkReal x4124=IKsin(j11);
IkReal x4125=(cj12*r00);
IkReal x4126=(cj8*sj9);
IkReal x4127=(r21*sj12);
IkReal x4128=(r01*sj12);
IkReal x4129=(cj12*r20);
IkReal x4130=((1.0)*x4123);
IkReal x4131=((1.0)*x4124);
evalcond[0]=(((r12*x4124))+((sj7*sj8)));
evalcond[1]=(((r12*x4123))+(((-1.0)*cj7*cj9))+((sj7*x4126)));
evalcond[2]=(cj8+(((-1.0)*x4129*x4130))+((x4123*x4127)));
evalcond[3]=((((-1.0)*x4125*x4130))+((x4123*x4128))+((cj7*sj8)));
evalcond[4]=((((-1.0)*sj8*sj9))+(((-1.0)*x4127*x4131))+((x4124*x4129)));
evalcond[5]=(((cj7*x4126))+((cj9*sj7))+(((-1.0)*x4128*x4131))+((x4124*x4125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x4132 = IKatan2WithCheck(IkReal((sj8*sj9)),IkReal(cj8),IKFAST_ATAN2_MAGTHRESH);
if(!x4132.valid){
continue;
}
CheckValue<IkReal> x4133=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj12))+((cj12*r20)))),-1);
if(!x4133.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4132.value)+(((1.5707963267949)*(x4133.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4134=IKcos(j11);
IkReal x4135=IKsin(j11);
IkReal x4136=(cj12*r00);
IkReal x4137=(cj8*sj9);
IkReal x4138=(r21*sj12);
IkReal x4139=(r01*sj12);
IkReal x4140=(cj12*r20);
IkReal x4141=((1.0)*x4134);
IkReal x4142=((1.0)*x4135);
evalcond[0]=(((r12*x4135))+((sj7*sj8)));
evalcond[1]=((((-1.0)*cj7*cj9))+((sj7*x4137))+((r12*x4134)));
evalcond[2]=(cj8+(((-1.0)*x4140*x4141))+((x4134*x4138)));
evalcond[3]=(((x4134*x4139))+(((-1.0)*x4136*x4141))+((cj7*sj8)));
evalcond[4]=((((-1.0)*sj8*sj9))+(((-1.0)*x4138*x4142))+((x4135*x4140)));
evalcond[5]=(((cj9*sj7))+(((-1.0)*x4139*x4142))+((x4135*x4136))+((cj7*x4137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x4143=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x4143;
j11eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj12*r20))+((r21*sj12))))));
j11eval[2]=IKsign(x4143);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x4144=(((r20*sj12))+((cj12*r21)));
j11eval[0]=x4144;
j11eval[1]=IKsign(x4144);
j11eval[2]=((IKabs((cj9*r12)))+(IKabs(((((-1.0)*cj12*cj9*r10))+((cj9*r11*sj12))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x4145=r11*r11;
IkReal x4146=cj12*cj12;
IkReal x4147=(r11*sj12);
IkReal x4148=(cj12*r10);
IkReal x4149=(((x4145*x4146))+(((2.0)*x4147*x4148))+(((-1.0)*x4145))+(((-1.0)*(r12*r12)))+(((-1.0)*x4146*(r10*r10))));
j11eval[0]=x4149;
j11eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x4148))+x4147))));
j11eval[2]=IKsign(x4149);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x4150=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x4150;
j11eval[1]=((IKabs(r12))+(IKabs((((r11*sj12))+(((-1.0)*cj12*r10))))));
j11eval[2]=IKsign(x4150);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x4151=((1.0)*cj12);
IkReal x4152=((((-1.0)*r11*x4151))+(((-1.0)*r10*sj12)));
j11eval[0]=x4152;
j11eval[1]=IKsign(x4152);
j11eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x4151))+((r01*sj12))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x4153=cj12*cj12;
IkReal x4154=(r01*r11);
IkReal x4155=(r01*sj12);
IkReal x4156=((1.0)*r00);
IkReal x4157=(((x4153*x4154))+(((-1.0)*r02*r12))+(((-1.0)*x4154))+(((-1.0)*r10*x4153*x4156))+((cj12*r00*r11*sj12))+((cj12*r10*x4155)));
j11eval[0]=x4157;
j11eval[1]=IKsign(x4157);
j11eval[2]=((IKabs(r02))+(IKabs((x4155+(((-1.0)*cj12*x4156))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4158=cj12*cj12;
IkReal x4159=(r01*r11);
IkReal x4160=(cj12*sj12);
IkReal x4161=((1.0)*r00);
CheckValue<IkReal> x4162=IKPowWithIntegerCheck(IKsign((((r00*r11*x4160))+(((-1.0)*r02*r12))+(((-1.0)*x4159))+(((-1.0)*r10*x4158*x4161))+((r01*r10*x4160))+((x4158*x4159)))),-1);
if(!x4162.valid){
continue;
}
CheckValue<IkReal> x4163 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj12*x4161))+((r01*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4163.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4162.value)))+(x4163.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4164=IKsin(j11);
IkReal x4165=IKcos(j11);
IkReal x4166=(cj12*r00);
IkReal x4167=(r21*sj12);
IkReal x4168=(cj12*r20);
IkReal x4169=(cj12*r10);
IkReal x4170=((1.0)*x4164);
IkReal x4171=((1.0)*x4165);
IkReal x4172=(sj12*x4165);
evalcond[0]=((((-1.0)*r01*sj12*x4170))+((r02*x4165))+((x4164*x4166)));
evalcond[1]=((((-1.0)*r11*sj12*x4170))+((r12*x4165))+((x4164*x4169)));
evalcond[2]=(((r22*x4164))+((x4165*x4167))+(((-1.0)*x4168*x4171)));
evalcond[3]=((((-1.0)*x4166*x4171))+((r02*x4164))+((r01*x4172)));
evalcond[4]=((-1.0)+((r22*x4165))+(((-1.0)*x4167*x4170))+((x4164*x4168)));
evalcond[5]=((1.0)+((r11*x4172))+(((-1.0)*x4169*x4171))+((r12*x4164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4173=((1.0)*cj12);
CheckValue<IkReal> x4174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj12))+(((-1.0)*r11*x4173)))),-1);
if(!x4174.valid){
continue;
}
CheckValue<IkReal> x4175 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x4173))+((r01*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4175.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4174.value)))+(x4175.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4176=IKsin(j11);
IkReal x4177=IKcos(j11);
IkReal x4178=(cj12*r00);
IkReal x4179=(r21*sj12);
IkReal x4180=(cj12*r20);
IkReal x4181=(cj12*r10);
IkReal x4182=((1.0)*x4176);
IkReal x4183=((1.0)*x4177);
IkReal x4184=(sj12*x4177);
evalcond[0]=((((-1.0)*r01*sj12*x4182))+((x4176*x4178))+((r02*x4177)));
evalcond[1]=(((r12*x4177))+(((-1.0)*r11*sj12*x4182))+((x4176*x4181)));
evalcond[2]=((((-1.0)*x4180*x4183))+((r22*x4176))+((x4177*x4179)));
evalcond[3]=(((r01*x4184))+(((-1.0)*x4178*x4183))+((r02*x4176)));
evalcond[4]=((-1.0)+((r22*x4177))+(((-1.0)*x4179*x4182))+((x4176*x4180)));
evalcond[5]=((1.0)+(((-1.0)*x4181*x4183))+((r12*x4176))+((r11*x4184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x4185 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj12))+(((-1.0)*cj12*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4185.valid){
continue;
}
CheckValue<IkReal> x4186=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x4186.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4185.value)+(((1.5707963267949)*(x4186.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4187=IKsin(j11);
IkReal x4188=IKcos(j11);
IkReal x4189=(cj12*r00);
IkReal x4190=(r21*sj12);
IkReal x4191=(cj12*r20);
IkReal x4192=(cj12*r10);
IkReal x4193=((1.0)*x4187);
IkReal x4194=((1.0)*x4188);
IkReal x4195=(sj12*x4188);
evalcond[0]=(((r02*x4188))+((x4187*x4189))+(((-1.0)*r01*sj12*x4193)));
evalcond[1]=(((r12*x4188))+(((-1.0)*r11*sj12*x4193))+((x4187*x4192)));
evalcond[2]=(((r22*x4187))+((x4188*x4190))+(((-1.0)*x4191*x4194)));
evalcond[3]=(((r02*x4187))+((r01*x4195))+(((-1.0)*x4189*x4194)));
evalcond[4]=((-1.0)+((x4187*x4191))+((r22*x4188))+(((-1.0)*x4190*x4193)));
evalcond[5]=((1.0)+((r12*x4187))+((r11*x4195))+(((-1.0)*x4192*x4194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x4196=(((r10*sj12))+((cj12*r11)));
j11eval[0]=x4196;
j11eval[1]=IKsign(x4196);
j11eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj12*r00))+((r01*sj12))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x4197=((1.0)*cj12);
IkReal x4198=((((-1.0)*r01*x4197))+(((-1.0)*r00*sj12)));
j11eval[0]=x4198;
j11eval[1]=((IKabs(r12))+(IKabs((((r11*sj12))+(((-1.0)*r10*x4197))))));
j11eval[2]=IKsign(x4198);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x4199=cj12*cj12;
IkReal x4200=(r01*r11);
IkReal x4201=(r01*sj12);
IkReal x4202=((1.0)*r00);
IkReal x4203=(((x4199*x4200))+(((-1.0)*r02*r12))+(((-1.0)*r10*x4199*x4202))+(((-1.0)*x4200))+((cj12*r00*r11*sj12))+((cj12*r10*x4201)));
j11eval[0]=x4203;
j11eval[1]=IKsign(x4203);
j11eval[2]=((IKabs(((((-1.0)*cj12*x4202))+x4201)))+(IKabs(r02)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4204=cj12*cj12;
IkReal x4205=(r01*r11);
IkReal x4206=(cj12*sj12);
IkReal x4207=((1.0)*r00);
CheckValue<IkReal> x4208=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4204*x4207))+((r00*r11*x4206))+((x4204*x4205))+(((-1.0)*r02*r12))+((r01*r10*x4206))+(((-1.0)*x4205)))),-1);
if(!x4208.valid){
continue;
}
CheckValue<IkReal> x4209 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj12*x4207))+((r01*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4209.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4208.value)))+(x4209.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4210=IKsin(j11);
IkReal x4211=IKcos(j11);
IkReal x4212=(cj12*r00);
IkReal x4213=(r21*sj12);
IkReal x4214=(cj12*r20);
IkReal x4215=(cj12*r10);
IkReal x4216=((1.0)*x4210);
IkReal x4217=((1.0)*x4211);
IkReal x4218=(sj12*x4211);
evalcond[0]=(((r02*x4211))+((x4210*x4212))+(((-1.0)*r01*sj12*x4216)));
evalcond[1]=(((r12*x4211))+((x4210*x4215))+(((-1.0)*r11*sj12*x4216)));
evalcond[2]=(((r22*x4210))+(((-1.0)*x4214*x4217))+((x4211*x4213)));
evalcond[3]=(((r02*x4210))+(((-1.0)*x4212*x4217))+((r01*x4218)));
evalcond[4]=((1.0)+((r22*x4211))+(((-1.0)*x4213*x4216))+((x4210*x4214)));
evalcond[5]=((1.0)+((r12*x4210))+((r11*x4218))+(((-1.0)*x4215*x4217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4219=((1.0)*cj12);
CheckValue<IkReal> x4220=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4219))+(((-1.0)*r00*sj12)))),-1);
if(!x4220.valid){
continue;
}
CheckValue<IkReal> x4221 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj12))+(((-1.0)*r10*x4219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4221.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4220.value)))+(x4221.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4222=IKsin(j11);
IkReal x4223=IKcos(j11);
IkReal x4224=(cj12*r00);
IkReal x4225=(r21*sj12);
IkReal x4226=(cj12*r20);
IkReal x4227=(cj12*r10);
IkReal x4228=((1.0)*x4222);
IkReal x4229=((1.0)*x4223);
IkReal x4230=(sj12*x4223);
evalcond[0]=(((r02*x4223))+((x4222*x4224))+(((-1.0)*r01*sj12*x4228)));
evalcond[1]=((((-1.0)*r11*sj12*x4228))+((x4222*x4227))+((r12*x4223)));
evalcond[2]=((((-1.0)*x4226*x4229))+((r22*x4222))+((x4223*x4225)));
evalcond[3]=((((-1.0)*x4224*x4229))+((r01*x4230))+((r02*x4222)));
evalcond[4]=((1.0)+((r22*x4223))+((x4222*x4226))+(((-1.0)*x4225*x4228)));
evalcond[5]=((1.0)+(((-1.0)*x4227*x4229))+((r11*x4230))+((r12*x4222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x4231 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj12*r00))+((r01*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4231.valid){
continue;
}
CheckValue<IkReal> x4232=IKPowWithIntegerCheck(IKsign((((r10*sj12))+((cj12*r11)))),-1);
if(!x4232.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4231.value)+(((1.5707963267949)*(x4232.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4233=IKsin(j11);
IkReal x4234=IKcos(j11);
IkReal x4235=(cj12*r00);
IkReal x4236=(r21*sj12);
IkReal x4237=(cj12*r20);
IkReal x4238=(cj12*r10);
IkReal x4239=((1.0)*x4233);
IkReal x4240=((1.0)*x4234);
IkReal x4241=(sj12*x4234);
evalcond[0]=(((r02*x4234))+((x4233*x4235))+(((-1.0)*r01*sj12*x4239)));
evalcond[1]=(((r12*x4234))+(((-1.0)*r11*sj12*x4239))+((x4233*x4238)));
evalcond[2]=(((r22*x4233))+(((-1.0)*x4237*x4240))+((x4234*x4236)));
evalcond[3]=(((r01*x4241))+(((-1.0)*x4235*x4240))+((r02*x4233)));
evalcond[4]=((1.0)+((r22*x4234))+(((-1.0)*x4236*x4239))+((x4233*x4237)));
evalcond[5]=((1.0)+((r12*x4233))+(((-1.0)*x4238*x4240))+((r11*x4241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
IkReal x4242=((-1.0)*px);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4242);
rxp1_1=(px*r21);
rxp1_2=(r11*x4242);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
IkReal x4243=((-1.0)*px);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4243);
rxp1_1=(px*r21);
rxp1_2=(r11*x4243);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=(((r11*sj12))+(((-1.0)*cj12*r10)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x4244=IKPowWithIntegerCheck((((r11*sj12))+(((-1.0)*cj12*r10))),-1);
if(!x4244.valid){
continue;
}
cj11array[0]=((-1.0)*(x4244.value));
if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j11valid[0] = j11valid[1] = true;
    j11array[0] = IKacos(cj11array[0]);
    sj11array[0] = IKsin(j11array[0]);
    cj11array[1] = cj11array[0];
    j11array[1] = -j11array[0];
    sj11array[1] = -sj11array[0];
}
else if( isnan(cj11array[0]) )
{
    // probably any value will work
    j11valid[0] = true;
    cj11array[0] = 1; sj11array[0] = 0; j11array[0] = 0;
}
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x4245=IKsin(j11);
IkReal x4246=IKcos(j11);
IkReal x4247=(cj12*r20);
IkReal x4248=(r21*sj12);
IkReal x4249=((1.0)*x4245);
evalcond[0]=(r02*x4245);
evalcond[1]=(cj9+((r02*x4246)));
evalcond[2]=((((-1.0)*x4248*x4249))+((x4245*x4247)));
evalcond[3]=(((cj12*r10*x4245))+(((-1.0)*r11*sj12*x4249)));
evalcond[4]=(((x4246*x4248))+(((-1.0)*x4246*x4247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x4250=IKPowWithIntegerCheck(r02,-1);
if(!x4250.valid){
continue;
}
cj11array[0]=((-1.0)*cj9*(x4250.value));
if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j11valid[0] = j11valid[1] = true;
    j11array[0] = IKacos(cj11array[0]);
    sj11array[0] = IKsin(j11array[0]);
    cj11array[1] = cj11array[0];
    j11array[1] = -j11array[0];
    sj11array[1] = -sj11array[0];
}
else if( isnan(cj11array[0]) )
{
    // probably any value will work
    j11valid[0] = true;
    cj11array[0] = 1; sj11array[0] = 0; j11array[0] = 0;
}
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x4251=IKsin(j11);
IkReal x4252=IKcos(j11);
IkReal x4253=(r11*sj12);
IkReal x4254=(r21*sj12);
IkReal x4255=(cj12*x4251);
IkReal x4256=((1.0)*x4251);
IkReal x4257=((1.0)*cj12*x4252);
evalcond[0]=(r02*x4251);
evalcond[1]=((((-1.0)*x4254*x4256))+((r20*x4255)));
evalcond[2]=((((-1.0)*x4253*x4256))+((r10*x4255)));
evalcond[3]=(((x4252*x4254))+(((-1.0)*r20*x4257)));
evalcond[4]=((1.0)+((x4252*x4253))+(((-1.0)*r10*x4257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4258=r11*r11;
IkReal x4259=cj12*cj12;
IkReal x4260=(r11*sj12);
IkReal x4261=(cj12*r10);
CheckValue<IkReal> x4262=IKPowWithIntegerCheck(IKsign(((((2.0)*x4260*x4261))+(((-1.0)*x4259*(r10*r10)))+((x4258*x4259))+(((-1.0)*(r12*r12)))+(((-1.0)*x4258)))),-1);
if(!x4262.valid){
continue;
}
CheckValue<IkReal> x4263 = IKatan2WithCheck(IkReal(r12),IkReal((x4260+(((-1.0)*x4261)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4263.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4262.value)))+(x4263.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4264=IKsin(j11);
IkReal x4265=IKcos(j11);
IkReal x4266=(cj12*r00);
IkReal x4267=(r21*sj12);
IkReal x4268=(cj12*r20);
IkReal x4269=(cj12*r10);
IkReal x4270=((1.0)*x4264);
IkReal x4271=((1.0)*x4265);
IkReal x4272=(sj12*x4265);
evalcond[0]=(((r12*x4265))+((x4264*x4269))+(((-1.0)*r11*sj12*x4270)));
evalcond[1]=(((x4265*x4267))+(((-1.0)*x4268*x4271))+((r22*x4264)));
evalcond[2]=(((r02*x4264))+(((-1.0)*x4266*x4271))+((r01*x4272)));
evalcond[3]=((((-1.0)*r01*sj12*x4270))+cj9+((r02*x4265))+((x4264*x4266)));
evalcond[4]=((1.0)+((r11*x4272))+((r12*x4264))+(((-1.0)*x4269*x4271)));
evalcond[5]=((((-1.0)*sj9))+((x4264*x4268))+(((-1.0)*x4267*x4270))+((r22*x4265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x4273=IKPowWithIntegerCheck(IKsign((((r20*sj12))+((cj12*r21)))),-1);
if(!x4273.valid){
continue;
}
CheckValue<IkReal> x4274 = IKatan2WithCheck(IkReal((cj9*r12)),IkReal(((((-1.0)*cj12*cj9*r10))+((cj9*r11*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4274.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4273.value)))+(x4274.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4275=IKsin(j11);
IkReal x4276=IKcos(j11);
IkReal x4277=(cj12*r00);
IkReal x4278=(r21*sj12);
IkReal x4279=(cj12*r20);
IkReal x4280=(cj12*r10);
IkReal x4281=((1.0)*x4275);
IkReal x4282=((1.0)*x4276);
IkReal x4283=(sj12*x4276);
evalcond[0]=(((r12*x4276))+((x4275*x4280))+(((-1.0)*r11*sj12*x4281)));
evalcond[1]=((((-1.0)*x4279*x4282))+((x4276*x4278))+((r22*x4275)));
evalcond[2]=(((r02*x4275))+(((-1.0)*x4277*x4282))+((r01*x4283)));
evalcond[3]=((((-1.0)*r01*sj12*x4281))+((r02*x4276))+cj9+((x4275*x4277)));
evalcond[4]=((1.0)+((r11*x4283))+(((-1.0)*x4280*x4282))+((r12*x4275)));
evalcond[5]=((((-1.0)*sj9))+(((-1.0)*x4278*x4281))+((x4275*x4279))+((r22*x4276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x4284 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r20))+((r21*sj12)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4284.valid){
continue;
}
CheckValue<IkReal> x4285=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x4285.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4284.value)+(((1.5707963267949)*(x4285.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4286=IKsin(j11);
IkReal x4287=IKcos(j11);
IkReal x4288=(cj12*r00);
IkReal x4289=(r21*sj12);
IkReal x4290=(cj12*r20);
IkReal x4291=(cj12*r10);
IkReal x4292=((1.0)*x4286);
IkReal x4293=((1.0)*x4287);
IkReal x4294=(sj12*x4287);
evalcond[0]=(((r12*x4287))+(((-1.0)*r11*sj12*x4292))+((x4286*x4291)));
evalcond[1]=(((r22*x4286))+(((-1.0)*x4290*x4293))+((x4287*x4289)));
evalcond[2]=((((-1.0)*x4288*x4293))+((r01*x4294))+((r02*x4286)));
evalcond[3]=(cj9+((r02*x4287))+((x4286*x4288))+(((-1.0)*r01*sj12*x4292)));
evalcond[4]=((1.0)+((r12*x4286))+(((-1.0)*x4291*x4293))+((r11*x4294)));
evalcond[5]=(((r22*x4287))+(((-1.0)*sj9))+(((-1.0)*x4289*x4292))+((x4286*x4290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x4295=(((r20*sj12))+((cj12*r21)));
j11eval[0]=x4295;
j11eval[1]=IKsign(x4295);
j11eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj12*r00))+((r01*sj12))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x4296=((1.0)*cj12);
IkReal x4297=((((-1.0)*r01*x4296))+(((-1.0)*r00*sj12)));
j11eval[0]=x4297;
j11eval[1]=((IKabs(r22))+(IKabs((((r21*sj12))+(((-1.0)*r20*x4296))))));
j11eval[2]=IKsign(x4297);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x4298=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x4298;
j11eval[1]=IKsign(x4298);
j11eval[2]=((IKabs(((((-1.0)*cj12*r10*sj9))+((r11*sj12*sj9)))))+(IKabs((r12*sj9))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal x4299=(((r10*sj12))+((cj12*r11)));
j11eval[0]=x4299;
j11eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj12*r20))+((r21*sj12))))));
j11eval[2]=IKsign(x4299);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal x4300=((1.0)*cj12);
IkReal x4301=((((-1.0)*r20*sj12))+(((-1.0)*r21*x4300)));
j11eval[0]=x4301;
j11eval[1]=((IKabs(r12))+(IKabs((((r11*sj12))+(((-1.0)*r10*x4300))))));
j11eval[2]=IKsign(x4301);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal x4302=cj12*cj12;
IkReal x4303=r11*r11;
IkReal x4304=(cj12*r10);
IkReal x4305=(r11*sj12);
IkReal x4306=((r12*r12)+(((-2.0)*x4304*x4305))+x4303+((x4302*(r10*r10)))+(((-1.0)*x4302*x4303)));
j11eval[0]=x4306;
j11eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x4304))+x4305))));
j11eval[2]=IKsign(x4306);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4307=cj12*cj12;
IkReal x4308=r11*r11;
IkReal x4309=(r11*sj12);
IkReal x4310=(cj12*r10);
CheckValue<IkReal> x4311=IKPowWithIntegerCheck(IKsign((((x4307*(r10*r10)))+(r12*r12)+(((-1.0)*x4307*x4308))+(((-2.0)*x4309*x4310))+x4308)),-1);
if(!x4311.valid){
continue;
}
CheckValue<IkReal> x4312 = IKatan2WithCheck(IkReal(r12),IkReal((x4309+(((-1.0)*x4310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4312.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4311.value)))+(x4312.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4313=IKsin(j11);
IkReal x4314=IKcos(j11);
IkReal x4315=(cj12*r00);
IkReal x4316=(cj12*r20);
IkReal x4317=(cj12*r10);
IkReal x4318=(sj12*x4314);
IkReal x4319=((1.0)*x4314);
IkReal x4320=((1.0)*sj12*x4313);
evalcond[0]=((((-1.0)*r21*x4320))+((r22*x4314))+((x4313*x4316)));
evalcond[1]=(((r12*x4314))+(((-1.0)*r11*x4320))+((x4313*x4317)));
evalcond[2]=(((r21*x4318))+(((-1.0)*x4316*x4319))+((r22*x4313)));
evalcond[3]=((((-1.0)*x4315*x4319))+((r01*x4318))+((r02*x4313)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x4320))+((r02*x4314))+((x4313*x4315)));
evalcond[5]=((-1.0)+(((-1.0)*x4317*x4319))+((r11*x4318))+((r12*x4313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4321=((1.0)*cj12);
CheckValue<IkReal> x4322=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4321))+(((-1.0)*r20*sj12)))),-1);
if(!x4322.valid){
continue;
}
CheckValue<IkReal> x4323 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4321))+((r11*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4323.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4322.value)))+(x4323.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4324=IKsin(j11);
IkReal x4325=IKcos(j11);
IkReal x4326=(cj12*r00);
IkReal x4327=(cj12*r20);
IkReal x4328=(cj12*r10);
IkReal x4329=(sj12*x4325);
IkReal x4330=((1.0)*x4325);
IkReal x4331=((1.0)*sj12*x4324);
evalcond[0]=((((-1.0)*r21*x4331))+((x4324*x4327))+((r22*x4325)));
evalcond[1]=(((x4324*x4328))+((r12*x4325))+(((-1.0)*r11*x4331)));
evalcond[2]=(((r21*x4329))+(((-1.0)*x4327*x4330))+((r22*x4324)));
evalcond[3]=((((-1.0)*x4326*x4330))+((r02*x4324))+((r01*x4329)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x4331))+((x4324*x4326))+((r02*x4325)));
evalcond[5]=((-1.0)+((r12*x4324))+((r11*x4329))+(((-1.0)*x4328*x4330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x4332 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj12*r20))+((r21*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4332.valid){
continue;
}
CheckValue<IkReal> x4333=IKPowWithIntegerCheck(IKsign((((r10*sj12))+((cj12*r11)))),-1);
if(!x4333.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4332.value)+(((1.5707963267949)*(x4333.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4334=IKsin(j11);
IkReal x4335=IKcos(j11);
IkReal x4336=(cj12*r00);
IkReal x4337=(cj12*r20);
IkReal x4338=(cj12*r10);
IkReal x4339=(sj12*x4335);
IkReal x4340=((1.0)*x4335);
IkReal x4341=((1.0)*sj12*x4334);
evalcond[0]=(((x4334*x4337))+((r22*x4335))+(((-1.0)*r21*x4341)));
evalcond[1]=(((x4334*x4338))+(((-1.0)*r11*x4341))+((r12*x4335)));
evalcond[2]=(((r21*x4339))+((r22*x4334))+(((-1.0)*x4337*x4340)));
evalcond[3]=(((r01*x4339))+((r02*x4334))+(((-1.0)*x4336*x4340)));
evalcond[4]=((-1.0)+((x4334*x4336))+((r02*x4335))+(((-1.0)*r01*x4341)));
evalcond[5]=((-1.0)+((r12*x4334))+((r11*x4339))+(((-1.0)*x4338*x4340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x4342=(((r20*sj12))+((cj12*r21)));
j11eval[0]=x4342;
j11eval[1]=IKsign(x4342);
j11eval[2]=((IKabs(r12))+(IKabs((((r11*sj12))+(((-1.0)*cj12*r10))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x4343=((1.0)*cj12);
IkReal x4344=((((-1.0)*r11*x4343))+(((-1.0)*r10*sj12)));
j11eval[0]=x4344;
j11eval[1]=IKsign(x4344);
j11eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x4343))+((r21*sj12))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x4345=cj12*cj12;
IkReal x4346=r11*r11;
IkReal x4347=(cj12*r10);
IkReal x4348=(r11*sj12);
IkReal x4349=((r12*r12)+(((-1.0)*x4345*x4346))+(((-2.0)*x4347*x4348))+((x4345*(r10*r10)))+x4346);
j11eval[0]=x4349;
j11eval[1]=((IKabs(r12))+(IKabs((x4348+(((-1.0)*x4347))))));
j11eval[2]=IKsign(x4349);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4350=cj12*cj12;
IkReal x4351=r11*r11;
IkReal x4352=(r11*sj12);
IkReal x4353=(cj12*r10);
CheckValue<IkReal> x4354=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4352*x4353))+(r12*r12)+x4351+((x4350*(r10*r10)))+(((-1.0)*x4350*x4351)))),-1);
if(!x4354.valid){
continue;
}
CheckValue<IkReal> x4355 = IKatan2WithCheck(IkReal(r12),IkReal((x4352+(((-1.0)*x4353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4355.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4354.value)))+(x4355.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4356=IKsin(j11);
IkReal x4357=IKcos(j11);
IkReal x4358=(cj12*r00);
IkReal x4359=(cj12*r20);
IkReal x4360=(cj12*r10);
IkReal x4361=(sj12*x4357);
IkReal x4362=((1.0)*x4357);
IkReal x4363=((1.0)*sj12*x4356);
evalcond[0]=(((r22*x4357))+(((-1.0)*r21*x4363))+((x4356*x4359)));
evalcond[1]=(((x4356*x4360))+(((-1.0)*r11*x4363))+((r12*x4357)));
evalcond[2]=(((r21*x4361))+((r22*x4356))+(((-1.0)*x4359*x4362)));
evalcond[3]=((((-1.0)*x4358*x4362))+((r01*x4361))+((r02*x4356)));
evalcond[4]=((1.0)+((r02*x4357))+((x4356*x4358))+(((-1.0)*r01*x4363)));
evalcond[5]=((-1.0)+(((-1.0)*x4360*x4362))+((r11*x4361))+((r12*x4356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4364=((1.0)*cj12);
CheckValue<IkReal> x4365 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4364))+((r21*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4365.valid){
continue;
}
CheckValue<IkReal> x4366=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4364))+(((-1.0)*r10*sj12)))),-1);
if(!x4366.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4365.value)+(((1.5707963267949)*(x4366.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4367=IKsin(j11);
IkReal x4368=IKcos(j11);
IkReal x4369=(cj12*r00);
IkReal x4370=(cj12*r20);
IkReal x4371=(cj12*r10);
IkReal x4372=(sj12*x4368);
IkReal x4373=((1.0)*x4368);
IkReal x4374=((1.0)*sj12*x4367);
evalcond[0]=((((-1.0)*r21*x4374))+((x4367*x4370))+((r22*x4368)));
evalcond[1]=(((r12*x4368))+((x4367*x4371))+(((-1.0)*r11*x4374)));
evalcond[2]=((((-1.0)*x4370*x4373))+((r22*x4367))+((r21*x4372)));
evalcond[3]=(((r01*x4372))+(((-1.0)*x4369*x4373))+((r02*x4367)));
evalcond[4]=((1.0)+((x4367*x4369))+(((-1.0)*r01*x4374))+((r02*x4368)));
evalcond[5]=((-1.0)+(((-1.0)*x4371*x4373))+((r11*x4372))+((r12*x4367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x4375 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj12))+(((-1.0)*cj12*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4375.valid){
continue;
}
CheckValue<IkReal> x4376=IKPowWithIntegerCheck(IKsign((((r20*sj12))+((cj12*r21)))),-1);
if(!x4376.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4375.value)+(((1.5707963267949)*(x4376.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4377=IKsin(j11);
IkReal x4378=IKcos(j11);
IkReal x4379=(cj12*r00);
IkReal x4380=(cj12*r20);
IkReal x4381=(cj12*r10);
IkReal x4382=(sj12*x4378);
IkReal x4383=((1.0)*x4378);
IkReal x4384=((1.0)*sj12*x4377);
evalcond[0]=(((r22*x4378))+((x4377*x4380))+(((-1.0)*r21*x4384)));
evalcond[1]=((((-1.0)*r11*x4384))+((r12*x4378))+((x4377*x4381)));
evalcond[2]=(((r22*x4377))+(((-1.0)*x4380*x4383))+((r21*x4382)));
evalcond[3]=(((r02*x4377))+(((-1.0)*x4379*x4383))+((r01*x4382)));
evalcond[4]=((1.0)+((r02*x4378))+((x4377*x4379))+(((-1.0)*r01*x4384)));
evalcond[5]=((-1.0)+(((-1.0)*x4381*x4383))+((r12*x4377))+((r11*x4382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
IkReal x4385=((-1.0)*pz);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4385);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4385);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j11eval[0]=r22;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
IkReal x4386=((-1.0)*pz);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4386);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4386);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j11eval[0]=(((r11*sj12))+(((-1.0)*cj12*r10)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x4387=IKPowWithIntegerCheck((((r11*sj12))+(((-1.0)*cj12*r10))),-1);
if(!x4387.valid){
continue;
}
cj11array[0]=x4387.value;
if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j11valid[0] = j11valid[1] = true;
    j11array[0] = IKacos(cj11array[0]);
    sj11array[0] = IKsin(j11array[0]);
    cj11array[1] = cj11array[0];
    j11array[1] = -j11array[0];
    sj11array[1] = -sj11array[0];
}
else if( isnan(cj11array[0]) )
{
    // probably any value will work
    j11valid[0] = true;
    cj11array[0] = 1; sj11array[0] = 0; j11array[0] = 0;
}
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x4388=IKsin(j11);
IkReal x4389=IKcos(j11);
IkReal x4390=(cj12*r00);
IkReal x4391=(r01*sj12);
IkReal x4392=((1.0)*x4388);
evalcond[0]=(r22*x4388);
evalcond[1]=((((-1.0)*sj9))+((r22*x4389)));
evalcond[2]=(((x4388*x4390))+(((-1.0)*x4391*x4392)));
evalcond[3]=((((-1.0)*r11*sj12*x4392))+((cj12*r10*x4388)));
evalcond[4]=(((x4389*x4391))+(((-1.0)*x4389*x4390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x4393=IKPowWithIntegerCheck(r22,-1);
if(!x4393.valid){
continue;
}
cj11array[0]=(sj9*(x4393.value));
if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j11valid[0] = j11valid[1] = true;
    j11array[0] = IKacos(cj11array[0]);
    sj11array[0] = IKsin(j11array[0]);
    cj11array[1] = cj11array[0];
    j11array[1] = -j11array[0];
    sj11array[1] = -sj11array[0];
}
else if( isnan(cj11array[0]) )
{
    // probably any value will work
    j11valid[0] = true;
    cj11array[0] = 1; sj11array[0] = 0; j11array[0] = 0;
}
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x4394=IKsin(j11);
IkReal x4395=IKcos(j11);
IkReal x4396=(cj12*r00);
IkReal x4397=(cj12*r10);
IkReal x4398=((1.0)*x4395);
IkReal x4399=(sj12*x4395);
IkReal x4400=((1.0)*sj12*x4394);
evalcond[0]=(r22*x4394);
evalcond[1]=((((-1.0)*r01*x4400))+((x4394*x4396)));
evalcond[2]=((((-1.0)*r11*x4400))+((x4394*x4397)));
evalcond[3]=(((r01*x4399))+(((-1.0)*x4396*x4398)));
evalcond[4]=((-1.0)+((r11*x4399))+(((-1.0)*x4397*x4398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x4401 = IKatan2WithCheck(IkReal((r12*sj9)),IkReal(((((-1.0)*cj12*r10*sj9))+((r11*sj12*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4401.valid){
continue;
}
CheckValue<IkReal> x4402=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x4402.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4401.value)+(((1.5707963267949)*(x4402.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4403=IKsin(j11);
IkReal x4404=IKcos(j11);
IkReal x4405=(cj12*r00);
IkReal x4406=(r21*sj12);
IkReal x4407=(cj12*r20);
IkReal x4408=(cj12*r10);
IkReal x4409=((1.0)*x4403);
IkReal x4410=((1.0)*x4404);
IkReal x4411=(sj12*x4404);
evalcond[0]=(((x4403*x4408))+((r12*x4404))+(((-1.0)*r11*sj12*x4409)));
evalcond[1]=(((r22*x4403))+(((-1.0)*x4407*x4410))+((x4404*x4406)));
evalcond[2]=(((r01*x4411))+(((-1.0)*x4405*x4410))+((r02*x4403)));
evalcond[3]=((-1.0)+((r11*x4411))+(((-1.0)*x4408*x4410))+((r12*x4403)));
evalcond[4]=(((r22*x4404))+(((-1.0)*sj9))+((x4403*x4407))+(((-1.0)*x4406*x4409)));
evalcond[5]=(((x4403*x4405))+((r02*x4404))+(((-1.0)*r01*sj12*x4409))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4412=((1.0)*cj12);
CheckValue<IkReal> x4413 = IKatan2WithCheck(IkReal((((r21*sj12))+(((-1.0)*r20*x4412)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4413.valid){
continue;
}
CheckValue<IkReal> x4414=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4412))+(((-1.0)*r00*sj12)))),-1);
if(!x4414.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4413.value)+(((1.5707963267949)*(x4414.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4415=IKsin(j11);
IkReal x4416=IKcos(j11);
IkReal x4417=(cj12*r00);
IkReal x4418=(r21*sj12);
IkReal x4419=(cj12*r20);
IkReal x4420=(cj12*r10);
IkReal x4421=((1.0)*x4415);
IkReal x4422=((1.0)*x4416);
IkReal x4423=(sj12*x4416);
evalcond[0]=(((r12*x4416))+(((-1.0)*r11*sj12*x4421))+((x4415*x4420)));
evalcond[1]=(((r22*x4415))+((x4416*x4418))+(((-1.0)*x4419*x4422)));
evalcond[2]=((((-1.0)*x4417*x4422))+((r01*x4423))+((r02*x4415)));
evalcond[3]=((-1.0)+(((-1.0)*x4420*x4422))+((r12*x4415))+((r11*x4423)));
evalcond[4]=((((-1.0)*sj9))+((r22*x4416))+((x4415*x4419))+(((-1.0)*x4418*x4421)));
evalcond[5]=((((-1.0)*r01*sj12*x4421))+((x4415*x4417))+((r02*x4416))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x4424 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r00))+((r01*sj12)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4424.valid){
continue;
}
CheckValue<IkReal> x4425=IKPowWithIntegerCheck(IKsign((((r20*sj12))+((cj12*r21)))),-1);
if(!x4425.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4424.value)+(((1.5707963267949)*(x4425.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4426=IKsin(j11);
IkReal x4427=IKcos(j11);
IkReal x4428=(cj12*r00);
IkReal x4429=(r21*sj12);
IkReal x4430=(cj12*r20);
IkReal x4431=(cj12*r10);
IkReal x4432=((1.0)*x4426);
IkReal x4433=((1.0)*x4427);
IkReal x4434=(sj12*x4427);
evalcond[0]=(((x4426*x4431))+(((-1.0)*r11*sj12*x4432))+((r12*x4427)));
evalcond[1]=((((-1.0)*x4430*x4433))+((x4427*x4429))+((r22*x4426)));
evalcond[2]=((((-1.0)*x4428*x4433))+((r02*x4426))+((r01*x4434)));
evalcond[3]=((-1.0)+(((-1.0)*x4431*x4433))+((r11*x4434))+((r12*x4426)));
evalcond[4]=((((-1.0)*sj9))+(((-1.0)*x4429*x4432))+((r22*x4427))+((x4426*x4430)));
evalcond[5]=((((-1.0)*r01*sj12*x4432))+((r02*x4427))+((x4426*x4428))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j7), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x4435=(((r20*sj12))+((cj12*r21)));
j11eval[0]=x4435;
j11eval[1]=IKsign(x4435);
j11eval[2]=((IKabs((cj9*r12)))+(IKabs(((((-1.0)*cj12*cj9*r10))+((cj9*r11*sj12))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x4436=((1.0)*cj12);
IkReal x4437=((((-1.0)*r01*x4436))+(((-1.0)*r00*sj12)));
j11eval[0]=x4437;
j11eval[1]=IKsign(x4437);
j11eval[2]=((IKabs(((((-1.0)*r10*sj9*x4436))+((r11*sj12*sj9)))))+(IKabs((r12*sj9))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x4438=cj12*cj12;
IkReal x4439=r11*r11;
IkReal x4440=(cj12*r10);
IkReal x4441=(r11*sj12);
IkReal x4442=((r12*r12)+x4439+(((-2.0)*x4440*x4441))+(((-1.0)*x4438*x4439))+((x4438*(r10*r10))));
j11eval[0]=x4442;
j11eval[1]=((IKabs(r12))+(IKabs((x4441+(((-1.0)*x4440))))));
j11eval[2]=IKsign(x4442);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal x4443=(((r20*sj12))+((cj12*r21)));
j11eval[0]=x4443;
j11eval[1]=IKsign(x4443);
j11eval[2]=((IKabs(r12))+(IKabs((((r11*sj12))+(((-1.0)*cj12*r10))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal x4444=((1.0)*cj12);
IkReal x4445=((((-1.0)*r11*x4444))+(((-1.0)*r10*sj12)));
j11eval[0]=x4445;
j11eval[1]=IKsign(x4445);
j11eval[2]=((IKabs(r22))+(IKabs((((r21*sj12))+(((-1.0)*r20*x4444))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal x4446=cj12*cj12;
IkReal x4447=r11*r11;
IkReal x4448=(cj12*r10);
IkReal x4449=(r11*sj12);
IkReal x4450=((r12*r12)+((x4446*(r10*r10)))+x4447+(((-1.0)*x4446*x4447))+(((-2.0)*x4448*x4449)));
j11eval[0]=x4450;
j11eval[1]=((IKabs(r12))+(IKabs((x4449+(((-1.0)*x4448))))));
j11eval[2]=IKsign(x4450);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4451=cj12*cj12;
IkReal x4452=r11*r11;
IkReal x4453=(r11*sj12);
IkReal x4454=(cj12*r10);
CheckValue<IkReal> x4455 = IKatan2WithCheck(IkReal(r12),IkReal((x4453+(((-1.0)*x4454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4455.valid){
continue;
}
CheckValue<IkReal> x4456=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x4451*(r10*r10)))+(((-1.0)*x4451*x4452))+x4452+(((-2.0)*x4453*x4454)))),-1);
if(!x4456.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4455.value)+(((1.5707963267949)*(x4456.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4457=IKsin(j11);
IkReal x4458=IKcos(j11);
IkReal x4459=(cj12*r00);
IkReal x4460=(cj12*r20);
IkReal x4461=(cj12*r10);
IkReal x4462=(sj12*x4458);
IkReal x4463=((1.0)*x4458);
IkReal x4464=((1.0)*sj12*x4457);
evalcond[0]=((((-1.0)*r21*x4464))+((x4457*x4460))+((r22*x4458)));
evalcond[1]=(((r12*x4458))+(((-1.0)*r11*x4464))+((x4457*x4461)));
evalcond[2]=((((-1.0)*x4460*x4463))+((r21*x4462))+((r22*x4457)));
evalcond[3]=(((r01*x4462))+(((-1.0)*x4459*x4463))+((r02*x4457)));
evalcond[4]=((1.0)+(((-1.0)*r01*x4464))+((x4457*x4459))+((r02*x4458)));
evalcond[5]=((-1.0)+((r11*x4462))+((r12*x4457))+(((-1.0)*x4461*x4463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4465=((1.0)*cj12);
CheckValue<IkReal> x4466 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj12))+(((-1.0)*r20*x4465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4466.valid){
continue;
}
CheckValue<IkReal> x4467=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4465))+(((-1.0)*r10*sj12)))),-1);
if(!x4467.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4466.value)+(((1.5707963267949)*(x4467.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4468=IKsin(j11);
IkReal x4469=IKcos(j11);
IkReal x4470=(cj12*r00);
IkReal x4471=(cj12*r20);
IkReal x4472=(cj12*r10);
IkReal x4473=(sj12*x4469);
IkReal x4474=((1.0)*x4469);
IkReal x4475=((1.0)*sj12*x4468);
evalcond[0]=(((r22*x4469))+(((-1.0)*r21*x4475))+((x4468*x4471)));
evalcond[1]=((((-1.0)*r11*x4475))+((r12*x4469))+((x4468*x4472)));
evalcond[2]=(((r22*x4468))+((r21*x4473))+(((-1.0)*x4471*x4474)));
evalcond[3]=((((-1.0)*x4470*x4474))+((r01*x4473))+((r02*x4468)));
evalcond[4]=((1.0)+(((-1.0)*r01*x4475))+((x4468*x4470))+((r02*x4469)));
evalcond[5]=((-1.0)+(((-1.0)*x4472*x4474))+((r12*x4468))+((r11*x4473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x4476 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj12))+(((-1.0)*cj12*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4476.valid){
continue;
}
CheckValue<IkReal> x4477=IKPowWithIntegerCheck(IKsign((((r20*sj12))+((cj12*r21)))),-1);
if(!x4477.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4476.value)+(((1.5707963267949)*(x4477.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4478=IKsin(j11);
IkReal x4479=IKcos(j11);
IkReal x4480=(cj12*r00);
IkReal x4481=(cj12*r20);
IkReal x4482=(cj12*r10);
IkReal x4483=(sj12*x4479);
IkReal x4484=((1.0)*x4479);
IkReal x4485=((1.0)*sj12*x4478);
evalcond[0]=((((-1.0)*r21*x4485))+((x4478*x4481))+((r22*x4479)));
evalcond[1]=((((-1.0)*r11*x4485))+((x4478*x4482))+((r12*x4479)));
evalcond[2]=((((-1.0)*x4481*x4484))+((r21*x4483))+((r22*x4478)));
evalcond[3]=((((-1.0)*x4480*x4484))+((r02*x4478))+((r01*x4483)));
evalcond[4]=((1.0)+((x4478*x4480))+((r02*x4479))+(((-1.0)*r01*x4485)));
evalcond[5]=((-1.0)+((r11*x4483))+((r12*x4478))+(((-1.0)*x4482*x4484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x4486=(((r10*sj12))+((cj12*r11)));
j11eval[0]=x4486;
j11eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj12*r20))+((r21*sj12))))));
j11eval[2]=IKsign(x4486);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x4487=((1.0)*cj12);
IkReal x4488=((((-1.0)*r21*x4487))+(((-1.0)*r20*sj12)));
j11eval[0]=x4488;
j11eval[1]=((IKabs(r12))+(IKabs((((r11*sj12))+(((-1.0)*r10*x4487))))));
j11eval[2]=IKsign(x4488);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x4489=cj12*cj12;
IkReal x4490=r11*r11;
IkReal x4491=(cj12*r10);
IkReal x4492=(r11*sj12);
IkReal x4493=((r12*r12)+(((-1.0)*x4489*x4490))+x4490+(((-2.0)*x4491*x4492))+((x4489*(r10*r10))));
j11eval[0]=x4493;
j11eval[1]=((IKabs(((((-1.0)*x4491))+x4492)))+(IKabs(r12)));
j11eval[2]=IKsign(x4493);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4494=cj12*cj12;
IkReal x4495=r11*r11;
IkReal x4496=(r11*sj12);
IkReal x4497=(cj12*r10);
CheckValue<IkReal> x4498 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x4497))+x4496)),IKFAST_ATAN2_MAGTHRESH);
if(!x4498.valid){
continue;
}
CheckValue<IkReal> x4499=IKPowWithIntegerCheck(IKsign(((r12*r12)+x4495+(((-1.0)*x4494*x4495))+((x4494*(r10*r10)))+(((-2.0)*x4496*x4497)))),-1);
if(!x4499.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4498.value)+(((1.5707963267949)*(x4499.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4500=IKsin(j11);
IkReal x4501=IKcos(j11);
IkReal x4502=(cj12*r00);
IkReal x4503=(cj12*r20);
IkReal x4504=(cj12*r10);
IkReal x4505=(sj12*x4501);
IkReal x4506=((1.0)*x4501);
IkReal x4507=((1.0)*sj12*x4500);
evalcond[0]=(((r22*x4501))+((x4500*x4503))+(((-1.0)*r21*x4507)));
evalcond[1]=(((r12*x4501))+((x4500*x4504))+(((-1.0)*r11*x4507)));
evalcond[2]=(((r22*x4500))+((r21*x4505))+(((-1.0)*x4503*x4506)));
evalcond[3]=(((r02*x4500))+((r01*x4505))+(((-1.0)*x4502*x4506)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x4507))+((x4500*x4502))+((r02*x4501)));
evalcond[5]=((-1.0)+((r12*x4500))+((r11*x4505))+(((-1.0)*x4504*x4506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4508=((1.0)*cj12);
CheckValue<IkReal> x4509=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj12))+(((-1.0)*r21*x4508)))),-1);
if(!x4509.valid){
continue;
}
CheckValue<IkReal> x4510 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj12))+(((-1.0)*r10*x4508)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4510.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4509.value)))+(x4510.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4511=IKsin(j11);
IkReal x4512=IKcos(j11);
IkReal x4513=(cj12*r00);
IkReal x4514=(cj12*r20);
IkReal x4515=(cj12*r10);
IkReal x4516=(sj12*x4512);
IkReal x4517=((1.0)*x4512);
IkReal x4518=((1.0)*sj12*x4511);
evalcond[0]=(((x4511*x4514))+(((-1.0)*r21*x4518))+((r22*x4512)));
evalcond[1]=(((x4511*x4515))+(((-1.0)*r11*x4518))+((r12*x4512)));
evalcond[2]=(((r21*x4516))+(((-1.0)*x4514*x4517))+((r22*x4511)));
evalcond[3]=(((r02*x4511))+(((-1.0)*x4513*x4517))+((r01*x4516)));
evalcond[4]=((-1.0)+((r02*x4512))+((x4511*x4513))+(((-1.0)*r01*x4518)));
evalcond[5]=((-1.0)+(((-1.0)*x4515*x4517))+((r11*x4516))+((r12*x4511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x4519 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj12*r20))+((r21*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4519.valid){
continue;
}
CheckValue<IkReal> x4520=IKPowWithIntegerCheck(IKsign((((r10*sj12))+((cj12*r11)))),-1);
if(!x4520.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4519.value)+(((1.5707963267949)*(x4520.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4521=IKsin(j11);
IkReal x4522=IKcos(j11);
IkReal x4523=(cj12*r00);
IkReal x4524=(cj12*r20);
IkReal x4525=(cj12*r10);
IkReal x4526=(sj12*x4522);
IkReal x4527=((1.0)*x4522);
IkReal x4528=((1.0)*sj12*x4521);
evalcond[0]=((((-1.0)*r21*x4528))+((x4521*x4524))+((r22*x4522)));
evalcond[1]=(((r12*x4522))+((x4521*x4525))+(((-1.0)*r11*x4528)));
evalcond[2]=(((r21*x4526))+((r22*x4521))+(((-1.0)*x4524*x4527)));
evalcond[3]=(((r01*x4526))+((r02*x4521))+(((-1.0)*x4523*x4527)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x4528))+((x4521*x4523))+((r02*x4522)));
evalcond[5]=((-1.0)+((r11*x4526))+((r12*x4521))+(((-1.0)*x4525*x4527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x4529=(((r10*sj12))+((cj12*r11)));
j11eval[0]=x4529;
j11eval[1]=IKsign(x4529);
j11eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj12*r00))+((r01*sj12))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x4530=((1.0)*cj12);
IkReal x4531=((((-1.0)*r01*x4530))+(((-1.0)*r00*sj12)));
j11eval[0]=x4531;
j11eval[1]=((IKabs(r12))+(IKabs((((r11*sj12))+(((-1.0)*r10*x4530))))));
j11eval[2]=IKsign(x4531);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x4532=cj12*cj12;
IkReal x4533=r11*r11;
IkReal x4534=(cj12*r10);
IkReal x4535=(r11*sj12);
IkReal x4536=((r12*r12)+x4533+(((-2.0)*x4534*x4535))+((x4532*(r10*r10)))+(((-1.0)*x4532*x4533)));
j11eval[0]=x4536;
j11eval[1]=((IKabs(((((-1.0)*x4534))+x4535)))+(IKabs(r12)));
j11eval[2]=IKsign(x4536);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4537=cj12*cj12;
IkReal x4538=r11*r11;
IkReal x4539=(r11*sj12);
IkReal x4540=(cj12*r10);
CheckValue<IkReal> x4541=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x4537*(r10*r10)))+x4538+(((-2.0)*x4539*x4540))+(((-1.0)*x4537*x4538)))),-1);
if(!x4541.valid){
continue;
}
CheckValue<IkReal> x4542 = IKatan2WithCheck(IkReal(r12),IkReal((x4539+(((-1.0)*x4540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4542.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4541.value)))+(x4542.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4543=IKsin(j11);
IkReal x4544=IKcos(j11);
IkReal x4545=(cj12*r00);
IkReal x4546=(r21*sj12);
IkReal x4547=(cj12*r20);
IkReal x4548=(cj12*r10);
IkReal x4549=((1.0)*x4543);
IkReal x4550=((1.0)*x4544);
IkReal x4551=(sj12*x4544);
evalcond[0]=(((r02*x4544))+(((-1.0)*r01*sj12*x4549))+((x4543*x4545)));
evalcond[1]=(((r12*x4544))+(((-1.0)*r11*sj12*x4549))+((x4543*x4548)));
evalcond[2]=(((r22*x4543))+(((-1.0)*x4547*x4550))+((x4544*x4546)));
evalcond[3]=(((r01*x4551))+((r02*x4543))+(((-1.0)*x4545*x4550)));
evalcond[4]=((1.0)+((r22*x4544))+(((-1.0)*x4546*x4549))+((x4543*x4547)));
evalcond[5]=((-1.0)+((r11*x4551))+(((-1.0)*x4548*x4550))+((r12*x4543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4552=((1.0)*cj12);
CheckValue<IkReal> x4553=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4552))+(((-1.0)*r00*sj12)))),-1);
if(!x4553.valid){
continue;
}
CheckValue<IkReal> x4554 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj12))+(((-1.0)*r10*x4552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4554.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4553.value)))+(x4554.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4555=IKsin(j11);
IkReal x4556=IKcos(j11);
IkReal x4557=(cj12*r00);
IkReal x4558=(r21*sj12);
IkReal x4559=(cj12*r20);
IkReal x4560=(cj12*r10);
IkReal x4561=((1.0)*x4555);
IkReal x4562=((1.0)*x4556);
IkReal x4563=(sj12*x4556);
evalcond[0]=((((-1.0)*r01*sj12*x4561))+((x4555*x4557))+((r02*x4556)));
evalcond[1]=(((r12*x4556))+(((-1.0)*r11*sj12*x4561))+((x4555*x4560)));
evalcond[2]=(((x4556*x4558))+((r22*x4555))+(((-1.0)*x4559*x4562)));
evalcond[3]=(((r02*x4555))+((r01*x4563))+(((-1.0)*x4557*x4562)));
evalcond[4]=((1.0)+((x4555*x4559))+((r22*x4556))+(((-1.0)*x4558*x4561)));
evalcond[5]=((-1.0)+((r11*x4563))+((r12*x4555))+(((-1.0)*x4560*x4562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x4564 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj12*r00))+((r01*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4564.valid){
continue;
}
CheckValue<IkReal> x4565=IKPowWithIntegerCheck(IKsign((((r10*sj12))+((cj12*r11)))),-1);
if(!x4565.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4564.value)+(((1.5707963267949)*(x4565.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4566=IKsin(j11);
IkReal x4567=IKcos(j11);
IkReal x4568=(cj12*r00);
IkReal x4569=(r21*sj12);
IkReal x4570=(cj12*r20);
IkReal x4571=(cj12*r10);
IkReal x4572=((1.0)*x4566);
IkReal x4573=((1.0)*x4567);
IkReal x4574=(sj12*x4567);
evalcond[0]=(((x4566*x4568))+((r02*x4567))+(((-1.0)*r01*sj12*x4572)));
evalcond[1]=((((-1.0)*r11*sj12*x4572))+((r12*x4567))+((x4566*x4571)));
evalcond[2]=(((x4567*x4569))+((r22*x4566))+(((-1.0)*x4570*x4573)));
evalcond[3]=(((r02*x4566))+(((-1.0)*x4568*x4573))+((r01*x4574)));
evalcond[4]=((1.0)+(((-1.0)*x4569*x4572))+((r22*x4567))+((x4566*x4570)));
evalcond[5]=((-1.0)+(((-1.0)*x4571*x4573))+((r12*x4566))+((r11*x4574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x4575=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x4575;
j11eval[1]=((IKabs(r12))+(IKabs((((r11*sj12))+(((-1.0)*cj12*r10))))));
j11eval[2]=IKsign(x4575);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x4576=((1.0)*cj12);
IkReal x4577=((((-1.0)*r11*x4576))+(((-1.0)*r10*sj12)));
j11eval[0]=x4577;
j11eval[1]=IKsign(x4577);
j11eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x4576))+((r01*sj12))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x4578=cj12*cj12;
IkReal x4579=r11*r11;
IkReal x4580=(cj12*r10);
IkReal x4581=(r11*sj12);
IkReal x4582=((r12*r12)+x4579+((x4578*(r10*r10)))+(((-2.0)*x4580*x4581))+(((-1.0)*x4578*x4579)));
j11eval[0]=x4582;
j11eval[1]=((IKabs((x4581+(((-1.0)*x4580)))))+(IKabs(r12)));
j11eval[2]=IKsign(x4582);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4583=cj12*cj12;
IkReal x4584=r11*r11;
IkReal x4585=(r11*sj12);
IkReal x4586=(cj12*r10);
CheckValue<IkReal> x4587 = IKatan2WithCheck(IkReal(r12),IkReal((x4585+(((-1.0)*x4586)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4587.valid){
continue;
}
CheckValue<IkReal> x4588=IKPowWithIntegerCheck(IKsign((((x4583*(r10*r10)))+(r12*r12)+x4584+(((-1.0)*x4583*x4584))+(((-2.0)*x4585*x4586)))),-1);
if(!x4588.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4587.value)+(((1.5707963267949)*(x4588.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4589=IKsin(j11);
IkReal x4590=IKcos(j11);
IkReal x4591=(cj12*r00);
IkReal x4592=(r21*sj12);
IkReal x4593=(cj12*r20);
IkReal x4594=(cj12*r10);
IkReal x4595=((1.0)*x4589);
IkReal x4596=((1.0)*x4590);
IkReal x4597=(sj12*x4590);
evalcond[0]=(((r02*x4590))+(((-1.0)*r01*sj12*x4595))+((x4589*x4591)));
evalcond[1]=(((x4589*x4594))+(((-1.0)*r11*sj12*x4595))+((r12*x4590)));
evalcond[2]=(((x4590*x4592))+((r22*x4589))+(((-1.0)*x4593*x4596)));
evalcond[3]=(((r02*x4589))+(((-1.0)*x4591*x4596))+((r01*x4597)));
evalcond[4]=((-1.0)+((r22*x4590))+(((-1.0)*x4592*x4595))+((x4589*x4593)));
evalcond[5]=((-1.0)+(((-1.0)*x4594*x4596))+((r11*x4597))+((r12*x4589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4598=((1.0)*cj12);
CheckValue<IkReal> x4599=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4598))+(((-1.0)*r10*sj12)))),-1);
if(!x4599.valid){
continue;
}
CheckValue<IkReal> x4600 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x4598))+((r01*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4600.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4599.value)))+(x4600.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4601=IKsin(j11);
IkReal x4602=IKcos(j11);
IkReal x4603=(cj12*r00);
IkReal x4604=(r21*sj12);
IkReal x4605=(cj12*r20);
IkReal x4606=(cj12*r10);
IkReal x4607=((1.0)*x4601);
IkReal x4608=((1.0)*x4602);
IkReal x4609=(sj12*x4602);
evalcond[0]=((((-1.0)*r01*sj12*x4607))+((x4601*x4603))+((r02*x4602)));
evalcond[1]=(((x4601*x4606))+(((-1.0)*r11*sj12*x4607))+((r12*x4602)));
evalcond[2]=(((r22*x4601))+((x4602*x4604))+(((-1.0)*x4605*x4608)));
evalcond[3]=((((-1.0)*x4603*x4608))+((r01*x4609))+((r02*x4601)));
evalcond[4]=((-1.0)+((x4601*x4605))+((r22*x4602))+(((-1.0)*x4604*x4607)));
evalcond[5]=((-1.0)+((r11*x4609))+(((-1.0)*x4606*x4608))+((r12*x4601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x4610 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj12))+(((-1.0)*cj12*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4610.valid){
continue;
}
CheckValue<IkReal> x4611=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x4611.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4610.value)+(((1.5707963267949)*(x4611.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4612=IKsin(j11);
IkReal x4613=IKcos(j11);
IkReal x4614=(cj12*r00);
IkReal x4615=(r21*sj12);
IkReal x4616=(cj12*r20);
IkReal x4617=(cj12*r10);
IkReal x4618=((1.0)*x4612);
IkReal x4619=((1.0)*x4613);
IkReal x4620=(sj12*x4613);
evalcond[0]=((((-1.0)*r01*sj12*x4618))+((r02*x4613))+((x4612*x4614)));
evalcond[1]=(((r12*x4613))+(((-1.0)*r11*sj12*x4618))+((x4612*x4617)));
evalcond[2]=(((r22*x4612))+((x4613*x4615))+(((-1.0)*x4616*x4619)));
evalcond[3]=(((r02*x4612))+(((-1.0)*x4614*x4619))+((r01*x4620)));
evalcond[4]=((-1.0)+((r22*x4613))+(((-1.0)*x4615*x4618))+((x4612*x4616)));
evalcond[5]=((-1.0)+((r11*x4620))+((r12*x4612))+(((-1.0)*x4617*x4619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
IkReal x4621=((-1.0)*pz);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4621);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4621);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j11eval[0]=r22;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
IkReal x4622=((-1.0)*pz);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4622);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4622);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j11eval[0]=(((r11*sj12))+(((-1.0)*cj12*r10)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x4623=IKPowWithIntegerCheck((((r11*sj12))+(((-1.0)*cj12*r10))),-1);
if(!x4623.valid){
continue;
}
cj11array[0]=x4623.value;
if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j11valid[0] = j11valid[1] = true;
    j11array[0] = IKacos(cj11array[0]);
    sj11array[0] = IKsin(j11array[0]);
    cj11array[1] = cj11array[0];
    j11array[1] = -j11array[0];
    sj11array[1] = -sj11array[0];
}
else if( isnan(cj11array[0]) )
{
    // probably any value will work
    j11valid[0] = true;
    cj11array[0] = 1; sj11array[0] = 0; j11array[0] = 0;
}
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x4624=IKsin(j11);
IkReal x4625=IKcos(j11);
IkReal x4626=(cj12*r00);
IkReal x4627=(r01*sj12);
IkReal x4628=((1.0)*x4624);
evalcond[0]=(r22*x4624);
evalcond[1]=(sj9+((r22*x4625)));
evalcond[2]=(((x4624*x4626))+(((-1.0)*x4627*x4628)));
evalcond[3]=(((cj12*r10*x4624))+(((-1.0)*r11*sj12*x4628)));
evalcond[4]=((((-1.0)*x4625*x4626))+((x4625*x4627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x4629=IKPowWithIntegerCheck(r22,-1);
if(!x4629.valid){
continue;
}
cj11array[0]=((-1.0)*sj9*(x4629.value));
if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j11valid[0] = j11valid[1] = true;
    j11array[0] = IKacos(cj11array[0]);
    sj11array[0] = IKsin(j11array[0]);
    cj11array[1] = cj11array[0];
    j11array[1] = -j11array[0];
    sj11array[1] = -sj11array[0];
}
else if( isnan(cj11array[0]) )
{
    // probably any value will work
    j11valid[0] = true;
    cj11array[0] = 1; sj11array[0] = 0; j11array[0] = 0;
}
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x4630=IKsin(j11);
IkReal x4631=IKcos(j11);
IkReal x4632=(cj12*r00);
IkReal x4633=(cj12*r10);
IkReal x4634=((1.0)*x4631);
IkReal x4635=(sj12*x4631);
IkReal x4636=((1.0)*sj12*x4630);
evalcond[0]=(r22*x4630);
evalcond[1]=(((x4630*x4632))+(((-1.0)*r01*x4636)));
evalcond[2]=(((x4630*x4633))+(((-1.0)*r11*x4636)));
evalcond[3]=(((r01*x4635))+(((-1.0)*x4632*x4634)));
evalcond[4]=((-1.0)+((r11*x4635))+(((-1.0)*x4633*x4634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4637=cj12*cj12;
IkReal x4638=r11*r11;
IkReal x4639=(r11*sj12);
IkReal x4640=(cj12*r10);
CheckValue<IkReal> x4641 = IKatan2WithCheck(IkReal(r12),IkReal((x4639+(((-1.0)*x4640)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4641.valid){
continue;
}
CheckValue<IkReal> x4642=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x4637*(r10*r10)))+(((-1.0)*x4637*x4638))+x4638+(((-2.0)*x4639*x4640)))),-1);
if(!x4642.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4641.value)+(((1.5707963267949)*(x4642.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4643=IKsin(j11);
IkReal x4644=IKcos(j11);
IkReal x4645=(cj12*r00);
IkReal x4646=(r21*sj12);
IkReal x4647=(cj12*r20);
IkReal x4648=(cj12*r10);
IkReal x4649=((1.0)*x4643);
IkReal x4650=((1.0)*x4644);
IkReal x4651=(sj12*x4644);
evalcond[0]=(((r12*x4644))+(((-1.0)*r11*sj12*x4649))+((x4643*x4648)));
evalcond[1]=((((-1.0)*x4647*x4650))+((r22*x4643))+((x4644*x4646)));
evalcond[2]=(((r02*x4643))+(((-1.0)*x4645*x4650))+((r01*x4651)));
evalcond[3]=(sj9+((r22*x4644))+((x4643*x4647))+(((-1.0)*x4646*x4649)));
evalcond[4]=(((r02*x4644))+cj9+(((-1.0)*r01*sj12*x4649))+((x4643*x4645)));
evalcond[5]=((-1.0)+((r11*x4651))+((r12*x4643))+(((-1.0)*x4648*x4650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4652=((1.0)*cj12);
CheckValue<IkReal> x4653=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4652))+(((-1.0)*r00*sj12)))),-1);
if(!x4653.valid){
continue;
}
CheckValue<IkReal> x4654 = IKatan2WithCheck(IkReal((r12*sj9)),IkReal(((((-1.0)*r10*sj9*x4652))+((r11*sj12*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4654.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4653.value)))+(x4654.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4655=IKsin(j11);
IkReal x4656=IKcos(j11);
IkReal x4657=(cj12*r00);
IkReal x4658=(r21*sj12);
IkReal x4659=(cj12*r20);
IkReal x4660=(cj12*r10);
IkReal x4661=((1.0)*x4655);
IkReal x4662=((1.0)*x4656);
IkReal x4663=(sj12*x4656);
evalcond[0]=(((r12*x4656))+(((-1.0)*r11*sj12*x4661))+((x4655*x4660)));
evalcond[1]=((((-1.0)*x4659*x4662))+((x4656*x4658))+((r22*x4655)));
evalcond[2]=(((r01*x4663))+((r02*x4655))+(((-1.0)*x4657*x4662)));
evalcond[3]=((((-1.0)*x4658*x4661))+sj9+((r22*x4656))+((x4655*x4659)));
evalcond[4]=((((-1.0)*r01*sj12*x4661))+cj9+((r02*x4656))+((x4655*x4657)));
evalcond[5]=((-1.0)+((r12*x4655))+(((-1.0)*x4660*x4662))+((r11*x4663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x4664=IKPowWithIntegerCheck(IKsign((((r20*sj12))+((cj12*r21)))),-1);
if(!x4664.valid){
continue;
}
CheckValue<IkReal> x4665 = IKatan2WithCheck(IkReal((cj9*r12)),IkReal(((((-1.0)*cj12*cj9*r10))+((cj9*r11*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4665.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4664.value)))+(x4665.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4666=IKsin(j11);
IkReal x4667=IKcos(j11);
IkReal x4668=(cj12*r00);
IkReal x4669=(r21*sj12);
IkReal x4670=(cj12*r20);
IkReal x4671=(cj12*r10);
IkReal x4672=((1.0)*x4666);
IkReal x4673=((1.0)*x4667);
IkReal x4674=(sj12*x4667);
evalcond[0]=(((r12*x4667))+(((-1.0)*r11*sj12*x4672))+((x4666*x4671)));
evalcond[1]=(((r22*x4666))+((x4667*x4669))+(((-1.0)*x4670*x4673)));
evalcond[2]=(((r02*x4666))+((r01*x4674))+(((-1.0)*x4668*x4673)));
evalcond[3]=(sj9+((r22*x4667))+(((-1.0)*x4669*x4672))+((x4666*x4670)));
evalcond[4]=((((-1.0)*r01*sj12*x4672))+((r02*x4667))+cj9+((x4666*x4668)));
evalcond[5]=((-1.0)+((r12*x4666))+((r11*x4674))+(((-1.0)*x4671*x4673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j7), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x4675=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x4675;
j11eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj12*r20))+((r21*sj12))))));
j11eval[2]=IKsign(x4675);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x4676=((1.0)*cj12);
IkReal x4677=((((-1.0)*r00*sj12))+(((-1.0)*r01*x4676)));
j11eval[0]=x4677;
j11eval[1]=IKsign(x4677);
j11eval[2]=((IKabs((r12*sj9)))+(IKabs(((((-1.0)*r10*sj9*x4676))+((r11*sj12*sj9))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x4678=r11*r11;
IkReal x4679=cj12*cj12;
IkReal x4680=(r11*sj12);
IkReal x4681=(cj12*r10);
IkReal x4682=((((-1.0)*x4679*(r10*r10)))+(((-1.0)*x4678))+(((2.0)*x4680*x4681))+(((-1.0)*(r12*r12)))+((x4678*x4679)));
j11eval[0]=x4682;
j11eval[1]=((IKabs(r12))+(IKabs((x4680+(((-1.0)*x4681))))));
j11eval[2]=IKsign(x4682);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal x4683=(((r10*sj12))+((cj12*r11)));
j11eval[0]=x4683;
j11eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj12*r20))+((r21*sj12))))));
j11eval[2]=IKsign(x4683);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal x4684=((1.0)*cj12);
IkReal x4685=((((-1.0)*r20*sj12))+(((-1.0)*r21*x4684)));
j11eval[0]=x4685;
j11eval[1]=((IKabs(r12))+(IKabs((((r11*sj12))+(((-1.0)*r10*x4684))))));
j11eval[2]=IKsign(x4685);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=1.0;
j9=0;
IkReal x4686=cj12*cj12;
IkReal x4687=(r21*sj12);
IkReal x4688=(r11*r21);
IkReal x4689=(cj12*r20);
IkReal x4690=(((r11*sj12*x4689))+(((-1.0)*r12*r22))+((cj12*r10*x4687))+(((-1.0)*x4688))+(((-1.0)*r10*r20*x4686))+((x4686*x4688)));
j11eval[0]=x4690;
j11eval[1]=((IKabs(r22))+(IKabs((x4687+(((-1.0)*x4689))))));
j11eval[2]=IKsign(x4690);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4691=cj12*cj12;
IkReal x4692=(r21*sj12);
IkReal x4693=(cj12*r20);
IkReal x4694=(r11*r21);
CheckValue<IkReal> x4695=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((r11*sj12*x4693))+((cj12*r10*x4692))+((x4691*x4694))+(((-1.0)*x4694))+(((-1.0)*r10*r20*x4691)))),-1);
if(!x4695.valid){
continue;
}
CheckValue<IkReal> x4696 = IKatan2WithCheck(IkReal(r22),IkReal((x4692+(((-1.0)*x4693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4696.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4695.value)))+(x4696.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4697=IKsin(j11);
IkReal x4698=IKcos(j11);
IkReal x4699=(cj12*r00);
IkReal x4700=(cj12*r20);
IkReal x4701=(cj12*r10);
IkReal x4702=(sj12*x4698);
IkReal x4703=((1.0)*x4698);
IkReal x4704=((1.0)*sj12*x4697);
evalcond[0]=(((x4697*x4700))+((r22*x4698))+(((-1.0)*r21*x4704)));
evalcond[1]=(((x4697*x4701))+(((-1.0)*r11*x4704))+((r12*x4698)));
evalcond[2]=((((-1.0)*x4700*x4703))+((r21*x4702))+((r22*x4697)));
evalcond[3]=(((r02*x4697))+((r01*x4702))+(((-1.0)*x4699*x4703)));
evalcond[4]=((-1.0)+((x4697*x4699))+((r02*x4698))+(((-1.0)*r01*x4704)));
evalcond[5]=((1.0)+((r12*x4697))+((r11*x4702))+(((-1.0)*x4701*x4703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4705=((1.0)*cj12);
CheckValue<IkReal> x4706 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj12))+(((-1.0)*r10*x4705)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4706.valid){
continue;
}
CheckValue<IkReal> x4707=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4705))+(((-1.0)*r20*sj12)))),-1);
if(!x4707.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4706.value)+(((1.5707963267949)*(x4707.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4708=IKsin(j11);
IkReal x4709=IKcos(j11);
IkReal x4710=(cj12*r00);
IkReal x4711=(cj12*r20);
IkReal x4712=(cj12*r10);
IkReal x4713=(sj12*x4709);
IkReal x4714=((1.0)*x4709);
IkReal x4715=((1.0)*sj12*x4708);
evalcond[0]=((((-1.0)*r21*x4715))+((x4708*x4711))+((r22*x4709)));
evalcond[1]=((((-1.0)*r11*x4715))+((x4708*x4712))+((r12*x4709)));
evalcond[2]=(((r21*x4713))+(((-1.0)*x4711*x4714))+((r22*x4708)));
evalcond[3]=((((-1.0)*x4710*x4714))+((r01*x4713))+((r02*x4708)));
evalcond[4]=((-1.0)+((x4708*x4710))+((r02*x4709))+(((-1.0)*r01*x4715)));
evalcond[5]=((1.0)+(((-1.0)*x4712*x4714))+((r11*x4713))+((r12*x4708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x4716 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj12*r20))+((r21*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4716.valid){
continue;
}
CheckValue<IkReal> x4717=IKPowWithIntegerCheck(IKsign((((r10*sj12))+((cj12*r11)))),-1);
if(!x4717.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4716.value)+(((1.5707963267949)*(x4717.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4718=IKsin(j11);
IkReal x4719=IKcos(j11);
IkReal x4720=(cj12*r00);
IkReal x4721=(cj12*r20);
IkReal x4722=(cj12*r10);
IkReal x4723=(sj12*x4719);
IkReal x4724=((1.0)*x4719);
IkReal x4725=((1.0)*sj12*x4718);
evalcond[0]=(((r22*x4719))+(((-1.0)*r21*x4725))+((x4718*x4721)));
evalcond[1]=((((-1.0)*r11*x4725))+((r12*x4719))+((x4718*x4722)));
evalcond[2]=(((r22*x4718))+((r21*x4723))+(((-1.0)*x4721*x4724)));
evalcond[3]=(((r01*x4723))+(((-1.0)*x4720*x4724))+((r02*x4718)));
evalcond[4]=((-1.0)+((x4718*x4720))+((r02*x4719))+(((-1.0)*r01*x4725)));
evalcond[5]=((1.0)+((r11*x4723))+(((-1.0)*x4722*x4724))+((r12*x4718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x4726=(((r20*sj12))+((cj12*r21)));
j11eval[0]=x4726;
j11eval[1]=IKsign(x4726);
j11eval[2]=((IKabs(r12))+(IKabs((((r11*sj12))+(((-1.0)*cj12*r10))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x4727=((1.0)*cj12);
IkReal x4728=((((-1.0)*r11*x4727))+(((-1.0)*r10*sj12)));
j11eval[0]=x4728;
j11eval[1]=IKsign(x4728);
j11eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x4727))+((r21*sj12))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
IkReal x4729=cj12*cj12;
IkReal x4730=(r21*sj12);
IkReal x4731=(r11*r21);
IkReal x4732=(cj12*r20);
IkReal x4733=((((-1.0)*x4731))+((r11*sj12*x4732))+(((-1.0)*r12*r22))+((x4729*x4731))+((cj12*r10*x4730))+(((-1.0)*r10*r20*x4729)));
j11eval[0]=x4733;
j11eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*x4732))+x4730))));
j11eval[2]=IKsign(x4733);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4734=cj12*cj12;
IkReal x4735=(r21*sj12);
IkReal x4736=(cj12*r20);
IkReal x4737=(r11*r21);
CheckValue<IkReal> x4738=IKPowWithIntegerCheck(IKsign((((x4734*x4737))+(((-1.0)*x4737))+((r11*sj12*x4736))+(((-1.0)*r12*r22))+((cj12*r10*x4735))+(((-1.0)*r10*r20*x4734)))),-1);
if(!x4738.valid){
continue;
}
CheckValue<IkReal> x4739 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x4736))+x4735)),IKFAST_ATAN2_MAGTHRESH);
if(!x4739.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4738.value)))+(x4739.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4740=IKsin(j11);
IkReal x4741=IKcos(j11);
IkReal x4742=(cj12*r00);
IkReal x4743=(cj12*r20);
IkReal x4744=(cj12*r10);
IkReal x4745=(sj12*x4741);
IkReal x4746=((1.0)*x4741);
IkReal x4747=((1.0)*sj12*x4740);
evalcond[0]=(((x4740*x4743))+(((-1.0)*r21*x4747))+((r22*x4741)));
evalcond[1]=((((-1.0)*r11*x4747))+((x4740*x4744))+((r12*x4741)));
evalcond[2]=(((r22*x4740))+((r21*x4745))+(((-1.0)*x4743*x4746)));
evalcond[3]=(((r01*x4745))+((r02*x4740))+(((-1.0)*x4742*x4746)));
evalcond[4]=((1.0)+((x4740*x4742))+(((-1.0)*r01*x4747))+((r02*x4741)));
evalcond[5]=((1.0)+((r11*x4745))+((r12*x4740))+(((-1.0)*x4744*x4746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4748=((1.0)*cj12);
CheckValue<IkReal> x4749=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4748))+(((-1.0)*r10*sj12)))),-1);
if(!x4749.valid){
continue;
}
CheckValue<IkReal> x4750 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4748))+((r21*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4750.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4749.value)))+(x4750.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4751=IKsin(j11);
IkReal x4752=IKcos(j11);
IkReal x4753=(cj12*r00);
IkReal x4754=(cj12*r20);
IkReal x4755=(cj12*r10);
IkReal x4756=(sj12*x4752);
IkReal x4757=((1.0)*x4752);
IkReal x4758=((1.0)*sj12*x4751);
evalcond[0]=((((-1.0)*r21*x4758))+((x4751*x4754))+((r22*x4752)));
evalcond[1]=(((r12*x4752))+(((-1.0)*r11*x4758))+((x4751*x4755)));
evalcond[2]=((((-1.0)*x4754*x4757))+((r21*x4756))+((r22*x4751)));
evalcond[3]=(((r01*x4756))+(((-1.0)*x4753*x4757))+((r02*x4751)));
evalcond[4]=((1.0)+(((-1.0)*r01*x4758))+((x4751*x4753))+((r02*x4752)));
evalcond[5]=((1.0)+((r12*x4751))+(((-1.0)*x4755*x4757))+((r11*x4756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x4759 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj12))+(((-1.0)*cj12*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4759.valid){
continue;
}
CheckValue<IkReal> x4760=IKPowWithIntegerCheck(IKsign((((r20*sj12))+((cj12*r21)))),-1);
if(!x4760.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4759.value)+(((1.5707963267949)*(x4760.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4761=IKsin(j11);
IkReal x4762=IKcos(j11);
IkReal x4763=(cj12*r00);
IkReal x4764=(cj12*r20);
IkReal x4765=(cj12*r10);
IkReal x4766=(sj12*x4762);
IkReal x4767=((1.0)*x4762);
IkReal x4768=((1.0)*sj12*x4761);
evalcond[0]=(((r22*x4762))+(((-1.0)*r21*x4768))+((x4761*x4764)));
evalcond[1]=((((-1.0)*r11*x4768))+((x4761*x4765))+((r12*x4762)));
evalcond[2]=(((r22*x4761))+((r21*x4766))+(((-1.0)*x4764*x4767)));
evalcond[3]=(((r02*x4761))+(((-1.0)*x4763*x4767))+((r01*x4766)));
evalcond[4]=((1.0)+((r02*x4762))+((x4761*x4763))+(((-1.0)*r01*x4768)));
evalcond[5]=((1.0)+(((-1.0)*x4765*x4767))+((r12*x4761))+((r11*x4766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[1];
IkReal x4769=((-1.0)*px);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4769);
rxp1_1=(px*r21);
rxp1_2=(r11*x4769);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
IkReal x4770=((-1.0)*px);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4770);
rxp1_1=(px*r21);
rxp1_2=(r11*x4770);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=(((r11*sj12))+(((-1.0)*cj12*r10)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x4771=IKPowWithIntegerCheck((((r11*sj12))+(((-1.0)*cj12*r10))),-1);
if(!x4771.valid){
continue;
}
cj11array[0]=((-1.0)*(x4771.value));
if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j11valid[0] = j11valid[1] = true;
    j11array[0] = IKacos(cj11array[0]);
    sj11array[0] = IKsin(j11array[0]);
    cj11array[1] = cj11array[0];
    j11array[1] = -j11array[0];
    sj11array[1] = -sj11array[0];
}
else if( isnan(cj11array[0]) )
{
    // probably any value will work
    j11valid[0] = true;
    cj11array[0] = 1; sj11array[0] = 0; j11array[0] = 0;
}
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x4772=IKsin(j11);
IkReal x4773=IKcos(j11);
IkReal x4774=(r21*sj12);
IkReal x4775=(cj12*x4772);
IkReal x4776=((1.0)*x4772);
evalcond[0]=(r02*x4772);
evalcond[1]=(((r02*x4773))+(((-1.0)*cj9)));
evalcond[2]=(((r20*x4775))+(((-1.0)*x4774*x4776)));
evalcond[3]=((((-1.0)*r11*sj12*x4776))+((r10*x4775)));
evalcond[4]=(((x4773*x4774))+(((-1.0)*cj12*r20*x4773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x4777=IKPowWithIntegerCheck(r02,-1);
if(!x4777.valid){
continue;
}
cj11array[0]=(cj9*(x4777.value));
if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j11valid[0] = j11valid[1] = true;
    j11array[0] = IKacos(cj11array[0]);
    sj11array[0] = IKsin(j11array[0]);
    cj11array[1] = cj11array[0];
    j11array[1] = -j11array[0];
    sj11array[1] = -sj11array[0];
}
else if( isnan(cj11array[0]) )
{
    // probably any value will work
    j11valid[0] = true;
    cj11array[0] = 1; sj11array[0] = 0; j11array[0] = 0;
}
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[5];
IkReal x4778=IKsin(j11);
IkReal x4779=IKcos(j11);
IkReal x4780=(r11*sj12);
IkReal x4781=(r21*sj12);
IkReal x4782=(cj12*x4778);
IkReal x4783=((1.0)*x4778);
IkReal x4784=((1.0)*cj12*x4779);
evalcond[0]=(r02*x4778);
evalcond[1]=((((-1.0)*x4781*x4783))+((r20*x4782)));
evalcond[2]=(((r10*x4782))+(((-1.0)*x4780*x4783)));
evalcond[3]=((((-1.0)*r20*x4784))+((x4779*x4781)));
evalcond[4]=((1.0)+((x4779*x4780))+(((-1.0)*r10*x4784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4785=r11*r11;
IkReal x4786=cj12*cj12;
IkReal x4787=(r11*sj12);
IkReal x4788=(cj12*r10);
CheckValue<IkReal> x4789=IKPowWithIntegerCheck(IKsign((((x4785*x4786))+(((-1.0)*(r12*r12)))+(((-1.0)*x4786*(r10*r10)))+(((-1.0)*x4785))+(((2.0)*x4787*x4788)))),-1);
if(!x4789.valid){
continue;
}
CheckValue<IkReal> x4790 = IKatan2WithCheck(IkReal(r12),IkReal((x4787+(((-1.0)*x4788)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4790.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4789.value)))+(x4790.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4791=IKsin(j11);
IkReal x4792=IKcos(j11);
IkReal x4793=(cj12*r00);
IkReal x4794=(r21*sj12);
IkReal x4795=(cj12*r20);
IkReal x4796=(cj12*r10);
IkReal x4797=((1.0)*x4791);
IkReal x4798=((1.0)*x4792);
IkReal x4799=(sj12*x4792);
evalcond[0]=(((x4791*x4796))+((r12*x4792))+(((-1.0)*r11*sj12*x4797)));
evalcond[1]=(((x4792*x4794))+(((-1.0)*x4795*x4798))+((r22*x4791)));
evalcond[2]=(((r01*x4799))+((r02*x4791))+(((-1.0)*x4793*x4798)));
evalcond[3]=(sj9+(((-1.0)*x4794*x4797))+((x4791*x4795))+((r22*x4792)));
evalcond[4]=((1.0)+(((-1.0)*x4796*x4798))+((r11*x4799))+((r12*x4791)));
evalcond[5]=(((x4791*x4793))+((r02*x4792))+(((-1.0)*r01*sj12*x4797))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4800=((1.0)*cj12);
CheckValue<IkReal> x4801 = IKatan2WithCheck(IkReal((r12*sj9)),IkReal((((r11*sj12*sj9))+(((-1.0)*r10*sj9*x4800)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4801.valid){
continue;
}
CheckValue<IkReal> x4802=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4800))+(((-1.0)*r00*sj12)))),-1);
if(!x4802.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4801.value)+(((1.5707963267949)*(x4802.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4803=IKsin(j11);
IkReal x4804=IKcos(j11);
IkReal x4805=(cj12*r00);
IkReal x4806=(r21*sj12);
IkReal x4807=(cj12*r20);
IkReal x4808=(cj12*r10);
IkReal x4809=((1.0)*x4803);
IkReal x4810=((1.0)*x4804);
IkReal x4811=(sj12*x4804);
evalcond[0]=((((-1.0)*r11*sj12*x4809))+((r12*x4804))+((x4803*x4808)));
evalcond[1]=((((-1.0)*x4807*x4810))+((x4804*x4806))+((r22*x4803)));
evalcond[2]=(((r02*x4803))+(((-1.0)*x4805*x4810))+((r01*x4811)));
evalcond[3]=(sj9+((r22*x4804))+((x4803*x4807))+(((-1.0)*x4806*x4809)));
evalcond[4]=((1.0)+(((-1.0)*x4808*x4810))+((r11*x4811))+((r12*x4803)));
evalcond[5]=(((r02*x4804))+(((-1.0)*r01*sj12*x4809))+((x4803*x4805))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x4812 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r20))+((r21*sj12)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4812.valid){
continue;
}
CheckValue<IkReal> x4813=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x4813.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4812.value)+(((1.5707963267949)*(x4813.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4814=IKsin(j11);
IkReal x4815=IKcos(j11);
IkReal x4816=(cj12*r00);
IkReal x4817=(r21*sj12);
IkReal x4818=(cj12*r20);
IkReal x4819=(cj12*r10);
IkReal x4820=((1.0)*x4814);
IkReal x4821=((1.0)*x4815);
IkReal x4822=(sj12*x4815);
evalcond[0]=((((-1.0)*r11*sj12*x4820))+((r12*x4815))+((x4814*x4819)));
evalcond[1]=(((x4815*x4817))+(((-1.0)*x4818*x4821))+((r22*x4814)));
evalcond[2]=((((-1.0)*x4816*x4821))+((r02*x4814))+((r01*x4822)));
evalcond[3]=(sj9+(((-1.0)*x4817*x4820))+((x4814*x4818))+((r22*x4815)));
evalcond[4]=((1.0)+((r11*x4822))+(((-1.0)*x4819*x4821))+((r12*x4814)));
evalcond[5]=(((r02*x4815))+(((-1.0)*r01*sj12*x4820))+((x4814*x4816))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4823=(sj12*sj8);
IkReal x4824=(cj7*sj8);
IkReal x4825=((1.0)*sj7*sj8);
CheckValue<IkReal> x4826 = IKatan2WithCheck(IkReal((((cj12*r10*x4824))+((r01*sj7*x4823))+(((-1.0)*cj7*r11*x4823))+(((-1.0)*cj12*r00*x4825)))),IkReal(((((-1.0)*r02*x4825))+((r12*x4824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4826.valid){
continue;
}
CheckValue<IkReal> x4827=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj12*r21))+(((-1.0)*r20*sj12)))),-1);
if(!x4827.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4826.value)+(((1.5707963267949)*(x4827.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4828=IKcos(j11);
IkReal x4829=IKsin(j11);
IkReal x4830=(cj8*sj9);
IkReal x4831=(cj12*r20);
IkReal x4832=(r01*sj12);
IkReal x4833=(cj12*r10);
IkReal x4834=(r11*sj12);
IkReal x4835=(cj12*r00);
IkReal x4836=(r21*sj12);
IkReal x4837=((1.0)*x4828);
IkReal x4838=((1.0)*x4829);
evalcond[0]=(((r22*x4829))+(((-1.0)*x4831*x4837))+cj8+((x4828*x4836)));
evalcond[1]=((((-1.0)*x4835*x4837))+((r02*x4829))+((cj7*sj8))+((x4828*x4832)));
evalcond[2]=((((-1.0)*x4833*x4837))+((r12*x4829))+((sj7*sj8))+((x4828*x4834)));
evalcond[3]=(((r22*x4828))+(((-1.0)*sj8*sj9))+((x4829*x4831))+(((-1.0)*x4836*x4838)));
evalcond[4]=((((-1.0)*x4832*x4838))+((cj7*x4830))+((r02*x4828))+((cj9*sj7))+((x4829*x4835)));
evalcond[5]=((((-1.0)*cj7*cj9))+(((-1.0)*x4834*x4838))+((r12*x4828))+((x4829*x4833))+((sj7*x4830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4839=((1.0)*cj12);
IkReal x4840=(sj7*sj8);
IkReal x4841=((1.0)*sj12);
CheckValue<IkReal> x4842 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4840*x4841))+((cj8*r11*sj12))+(((-1.0)*cj8*r10*x4839))+((cj12*r20*x4840)))),IkReal((((r22*x4840))+(((-1.0)*cj8*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4842.valid){
continue;
}
CheckValue<IkReal> x4843=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4841))+(((-1.0)*r01*x4839)))),-1);
if(!x4843.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4842.value)+(((1.5707963267949)*(x4843.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4844=IKcos(j11);
IkReal x4845=IKsin(j11);
IkReal x4846=(cj8*sj9);
IkReal x4847=(cj12*r20);
IkReal x4848=(r01*sj12);
IkReal x4849=(cj12*r10);
IkReal x4850=(r11*sj12);
IkReal x4851=(cj12*r00);
IkReal x4852=(r21*sj12);
IkReal x4853=((1.0)*x4844);
IkReal x4854=((1.0)*x4845);
evalcond[0]=((((-1.0)*x4847*x4853))+cj8+((r22*x4845))+((x4844*x4852)));
evalcond[1]=(((r02*x4845))+((x4844*x4848))+(((-1.0)*x4851*x4853))+((cj7*sj8)));
evalcond[2]=(((r12*x4845))+((sj7*sj8))+(((-1.0)*x4849*x4853))+((x4844*x4850)));
evalcond[3]=((((-1.0)*sj8*sj9))+((x4845*x4847))+((r22*x4844))+(((-1.0)*x4852*x4854)));
evalcond[4]=(((r02*x4844))+((cj9*sj7))+((cj7*x4846))+((x4845*x4851))+(((-1.0)*x4848*x4854)));
evalcond[5]=((((-1.0)*cj7*cj9))+((x4845*x4849))+((r12*x4844))+(((-1.0)*x4850*x4854))+((sj7*x4846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4855=(cj7*sj8);
IkReal x4856=((1.0)*cj8);
CheckValue<IkReal> x4857 = IKatan2WithCheck(IkReal((((cj12*r20*x4855))+(((-1.0)*cj12*r00*x4856))+((cj8*r01*sj12))+(((-1.0)*r21*sj12*x4855)))),IkReal((((r22*x4855))+(((-1.0)*r02*x4856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4857.valid){
continue;
}
CheckValue<IkReal> x4858=IKPowWithIntegerCheck(IKsign((((r10*sj12))+((cj12*r11)))),-1);
if(!x4858.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4857.value)+(((1.5707963267949)*(x4858.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4859=IKcos(j11);
IkReal x4860=IKsin(j11);
IkReal x4861=(cj8*sj9);
IkReal x4862=(cj12*r20);
IkReal x4863=(r01*sj12);
IkReal x4864=(cj12*r10);
IkReal x4865=(r11*sj12);
IkReal x4866=(cj12*r00);
IkReal x4867=(r21*sj12);
IkReal x4868=((1.0)*x4859);
IkReal x4869=((1.0)*x4860);
evalcond[0]=(((x4859*x4867))+(((-1.0)*x4862*x4868))+cj8+((r22*x4860)));
evalcond[1]=(((x4859*x4863))+(((-1.0)*x4866*x4868))+((r02*x4860))+((cj7*sj8)));
evalcond[2]=(((x4859*x4865))+((r12*x4860))+(((-1.0)*x4864*x4868))+((sj7*sj8)));
evalcond[3]=((((-1.0)*sj8*sj9))+((r22*x4859))+((x4860*x4862))+(((-1.0)*x4867*x4869)));
evalcond[4]=(((cj7*x4861))+(((-1.0)*x4863*x4869))+((cj9*sj7))+((x4860*x4866))+((r02*x4859)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r12*x4859))+((x4860*x4864))+((sj7*x4861))+(((-1.0)*x4865*x4869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x4870=cj12*cj12;
IkReal x4871=r21*r21;
IkReal x4872=(cj12*r20);
IkReal x4873=(r21*sj12);
IkReal x4874=(sj8*sj9);
IkReal x4875=((((-1.0)*x4870*x4871))+(r22*r22)+(((-2.0)*x4872*x4873))+((x4870*(r20*r20)))+x4871);
j11eval[0]=x4875;
j11eval[1]=IKsign(x4875);
j11eval[2]=((IKabs((((cj8*r22))+((x4872*x4874))+(((-1.0)*x4873*x4874)))))+(IKabs((((cj8*x4873))+((r22*x4874))+(((-1.0)*cj8*x4872))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x4876=cj9*cj9;
IkReal x4877=((1.0)*sj9);
IkReal x4878=(cj12*r11);
IkReal x4879=(r10*sj12);
IkReal x4880=(cj12*r01);
IkReal x4881=(r00*sj12);
IkReal x4882=((1.0)*cj8*cj9);
IkReal x4883=((1.0)+((x4876*(cj8*cj8)))+(((-1.0)*x4876)));
j7eval[0]=x4883;
j7eval[1]=IKsign(x4883);
j7eval[2]=((IKabs(((((-1.0)*x4880*x4882))+(((-1.0)*x4881*x4882))+(((-1.0)*x4877*x4878))+(((-1.0)*x4877*x4879)))))+(IKabs((((sj9*x4881))+((sj9*x4880))+(((-1.0)*x4879*x4882))+(((-1.0)*x4878*x4882))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x4884=cj9*cj9;
IkReal x4885=cj8*cj8;
IkReal x4886=(cj8*cj9);
IkReal x4887=(sj8*x4886);
IkReal x4888=(x4884*x4885);
j7eval[0]=((1.0)+(((-1.0)*x4884))+(((-1.0)*x4886))+(((962.772785622593)*x4887))+x4888);
j7eval[1]=IKsign(((5453.0)+(((5250000.0)*x4887))+(((-5453.0)*x4886))+(((-5453.0)*x4884))+(((5453.0)*x4888))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j9), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((2.5)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.5)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.5)*py))+IKsqr(((2.5)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((2.5)*py), ((2.5)*px));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
evalcond[0]=((((-2.5)*py))+(IKsin(j7)));
evalcond[1]=((((-2.5)*px))+(IKcos(j7)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=0;
sj8=0;
cj8=1.0;
j9=0;
sj9=0;
cj9=1.0;
IkReal x4889=((1.0)*cj12);
IkReal x4890=((((-1.0)*r11*x4889))+(((-1.0)*r10*sj12)));
j11eval[0]=x4890;
j11eval[1]=IKsign(x4890);
j11eval[2]=((IKabs((((r21*sj12*sj7))+(((-1.0)*r20*sj7*x4889)))))+(IKabs((r22*sj7))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=0;
sj8=0;
cj8=1.0;
j9=0;
sj9=0;
cj9=1.0;
IkReal x4891=cj12*cj12;
IkReal x4892=r21*r21;
IkReal x4893=(r21*sj12);
IkReal x4894=(cj12*r20);
IkReal x4895=((((-2.0)*x4893*x4894))+(r22*r22)+(((-1.0)*x4891*x4892))+((x4891*(r20*r20)))+x4892);
j11eval[0]=x4895;
j11eval[1]=IKsign(x4895);
j11eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x4894))+x4893))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=0;
sj8=0;
cj8=1.0;
j9=0;
sj9=0;
cj9=1.0;
IkReal x4896=r01*r01;
IkReal x4897=cj12*cj12;
IkReal x4898=(r01*sj12);
IkReal x4899=(cj12*r00);
IkReal x4900=((((-1.0)*(r02*r02)))+(((2.0)*x4898*x4899))+(((-1.0)*x4896))+((x4896*x4897))+(((-1.0)*x4897*(r00*r00))));
j11eval[0]=x4900;
j11eval[1]=((IKabs((r02*sj7)))+(IKabs(((((-1.0)*sj7*x4898))+((sj7*x4899))))));
j11eval[2]=IKsign(x4900);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4901=r01*r01;
IkReal x4902=cj12*cj12;
IkReal x4903=(r01*sj12);
IkReal x4904=(cj12*r00);
CheckValue<IkReal> x4905=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4901))+(((-1.0)*(r02*r02)))+((x4901*x4902))+(((2.0)*x4903*x4904))+(((-1.0)*x4902*(r00*r00))))),-1);
if(!x4905.valid){
continue;
}
CheckValue<IkReal> x4906 = IKatan2WithCheck(IkReal(((((-1.0)*sj7*x4903))+((sj7*x4904)))),IkReal((r02*sj7)),IKFAST_ATAN2_MAGTHRESH);
if(!x4906.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4905.value)))+(x4906.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4907=IKsin(j11);
IkReal x4908=IKcos(j11);
IkReal x4909=(cj12*x4907);
IkReal x4910=(cj12*x4908);
IkReal x4911=((1.0)*x4907);
IkReal x4912=((1.0)*sj12*x4908);
evalcond[0]=((((-1.0)*r21*sj12*x4911))+((r20*x4909))+((r22*x4908)));
evalcond[1]=(sj7+((r02*x4908))+(((-1.0)*r01*sj12*x4911))+((r00*x4909)));
evalcond[2]=((((-1.0)*r02*x4911))+((r00*x4910))+(((-1.0)*r01*x4912)));
evalcond[3]=((((-1.0)*r11*x4912))+((r10*x4910))+(((-1.0)*r12*x4911)));
evalcond[4]=((1.0)+((r20*x4910))+(((-1.0)*r22*x4911))+(((-1.0)*r21*x4912)));
evalcond[5]=((((-1.0)*r11*sj12*x4911))+((r10*x4909))+((r12*x4908))+(((-1.0)*cj7)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4913=cj12*cj12;
IkReal x4914=r21*r21;
IkReal x4915=(r21*sj12);
IkReal x4916=(cj12*r20);
CheckValue<IkReal> x4917=IKPowWithIntegerCheck(IKsign((x4914+(((-2.0)*x4915*x4916))+(r22*r22)+(((-1.0)*x4913*x4914))+((x4913*(r20*r20))))),-1);
if(!x4917.valid){
continue;
}
CheckValue<IkReal> x4918 = IKatan2WithCheck(IkReal(r22),IkReal((x4915+(((-1.0)*x4916)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4918.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4917.value)))+(x4918.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4919=IKsin(j11);
IkReal x4920=IKcos(j11);
IkReal x4921=(cj12*x4919);
IkReal x4922=(cj12*x4920);
IkReal x4923=((1.0)*x4919);
IkReal x4924=((1.0)*sj12*x4920);
evalcond[0]=(((r20*x4921))+(((-1.0)*r21*sj12*x4923))+((r22*x4920)));
evalcond[1]=(sj7+(((-1.0)*r01*sj12*x4923))+((r00*x4921))+((r02*x4920)));
evalcond[2]=((((-1.0)*r02*x4923))+(((-1.0)*r01*x4924))+((r00*x4922)));
evalcond[3]=(((r10*x4922))+(((-1.0)*r11*x4924))+(((-1.0)*r12*x4923)));
evalcond[4]=((1.0)+((r20*x4922))+(((-1.0)*r21*x4924))+(((-1.0)*r22*x4923)));
evalcond[5]=(((r10*x4921))+(((-1.0)*r11*sj12*x4923))+(((-1.0)*cj7))+((r12*x4920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4925=((1.0)*cj12);
CheckValue<IkReal> x4926 = IKatan2WithCheck(IkReal((r22*sj7)),IkReal((((r21*sj12*sj7))+(((-1.0)*r20*sj7*x4925)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4926.valid){
continue;
}
CheckValue<IkReal> x4927=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4925))+(((-1.0)*r10*sj12)))),-1);
if(!x4927.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4926.value)+(((1.5707963267949)*(x4927.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4928=IKsin(j11);
IkReal x4929=IKcos(j11);
IkReal x4930=(cj12*x4928);
IkReal x4931=(cj12*x4929);
IkReal x4932=((1.0)*x4928);
IkReal x4933=((1.0)*sj12*x4929);
evalcond[0]=((((-1.0)*r21*sj12*x4932))+((r20*x4930))+((r22*x4929)));
evalcond[1]=(sj7+(((-1.0)*r01*sj12*x4932))+((r00*x4930))+((r02*x4929)));
evalcond[2]=((((-1.0)*r02*x4932))+(((-1.0)*r01*x4933))+((r00*x4931)));
evalcond[3]=(((r10*x4931))+(((-1.0)*r12*x4932))+(((-1.0)*r11*x4933)));
evalcond[4]=((1.0)+((r20*x4931))+(((-1.0)*r21*x4933))+(((-1.0)*r22*x4932)));
evalcond[5]=(((r10*x4930))+(((-1.0)*r11*sj12*x4932))+(((-1.0)*cj7))+((r12*x4929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j9), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((2.38342796813528)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.38342796813528)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.38342796813528)*py))+IKsqr(((2.38342796813528)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((2.38342796813528)*py), ((2.38342796813528)*px));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
evalcond[0]=((((0.41956376)*(IKcos(j7))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.41956376)*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j9=0;
sj9=0;
cj9=1.0;
IkReal x4934=((1.0)*cj12);
IkReal x4935=((((-1.0)*r11*x4934))+(((-1.0)*r10*sj12)));
j11eval[0]=x4935;
j11eval[1]=IKsign(x4935);
j11eval[2]=((IKabs((r22*sj7)))+(IKabs((((r21*sj12*sj7))+(((-1.0)*r20*sj7*x4934))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j9=0;
sj9=0;
cj9=1.0;
IkReal x4936=cj12*cj12;
IkReal x4937=(r21*sj12);
IkReal x4938=(r01*r21);
IkReal x4939=((1.0)*cj12*r20);
IkReal x4940=(x4938+(((-1.0)*cj12*r00*x4937))+((r00*r20*x4936))+(((-1.0)*r01*sj12*x4939))+(((-1.0)*x4936*x4938))+((r02*r22)));
j11eval[0]=x4940;
j11eval[1]=((IKabs((cj7*r22)))+(IKabs((((cj7*x4937))+(((-1.0)*cj7*x4939))))));
j11eval[2]=IKsign(x4940);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j9=0;
sj9=0;
cj9=1.0;
IkReal x4941=cj12*cj12;
IkReal x4942=((1.0)*r21);
IkReal x4943=(cj12*sj12);
IkReal x4944=((1.0)*r20);
IkReal x4945=(((r10*r20*x4941))+((r11*r21))+(((-1.0)*r11*x4943*x4944))+(((-1.0)*r10*x4942*x4943))+((r12*r22))+(((-1.0)*r11*x4941*x4942)));
j11eval[0]=x4945;
j11eval[1]=((IKabs((r22*sj7)))+(IKabs((((r21*sj12*sj7))+(((-1.0)*cj12*sj7*x4944))))));
j11eval[2]=IKsign(x4945);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4946=cj12*cj12;
IkReal x4947=((1.0)*r21);
IkReal x4948=(cj12*sj12);
IkReal x4949=((1.0)*r20);
CheckValue<IkReal> x4950 = IKatan2WithCheck(IkReal((r22*sj7)),IkReal((((r21*sj12*sj7))+(((-1.0)*cj12*sj7*x4949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4950.valid){
continue;
}
CheckValue<IkReal> x4951=IKPowWithIntegerCheck(IKsign((((r10*r20*x4946))+((r11*r21))+(((-1.0)*r11*x4948*x4949))+((r12*r22))+(((-1.0)*r11*x4946*x4947))+(((-1.0)*r10*x4947*x4948)))),-1);
if(!x4951.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4950.value)+(((1.5707963267949)*(x4951.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4952=IKsin(j11);
IkReal x4953=IKcos(j11);
IkReal x4954=(cj12*x4952);
IkReal x4955=((1.0)*x4952);
IkReal x4956=(cj12*x4953);
IkReal x4957=((1.0)*sj12*x4953);
evalcond[0]=(((r22*x4953))+(((-1.0)*r21*sj12*x4955))+((r20*x4954)));
evalcond[1]=(sj7+((r02*x4953))+(((-1.0)*r01*sj12*x4955))+((r00*x4954)));
evalcond[2]=((((-1.0)*r21*x4957))+(((-1.0)*r22*x4955))+((r20*x4956)));
evalcond[3]=(cj7+(((-1.0)*r02*x4955))+(((-1.0)*r01*x4957))+((r00*x4956)));
evalcond[4]=(sj7+((r10*x4956))+(((-1.0)*r11*x4957))+(((-1.0)*r12*x4955)));
evalcond[5]=((((-1.0)*r11*sj12*x4955))+((r12*x4953))+((r10*x4954))+(((-1.0)*cj7)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4958=cj12*cj12;
IkReal x4959=(r21*sj12);
IkReal x4960=(r01*r21);
IkReal x4961=((1.0)*cj12*r20);
CheckValue<IkReal> x4962 = IKatan2WithCheck(IkReal((cj7*r22)),IkReal((((cj7*x4959))+(((-1.0)*cj7*x4961)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4962.valid){
continue;
}
CheckValue<IkReal> x4963=IKPowWithIntegerCheck(IKsign((x4960+(((-1.0)*r01*sj12*x4961))+(((-1.0)*x4958*x4960))+((r02*r22))+((r00*r20*x4958))+(((-1.0)*cj12*r00*x4959)))),-1);
if(!x4963.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4962.value)+(((1.5707963267949)*(x4963.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4964=IKsin(j11);
IkReal x4965=IKcos(j11);
IkReal x4966=(cj12*x4964);
IkReal x4967=((1.0)*x4964);
IkReal x4968=(cj12*x4965);
IkReal x4969=((1.0)*sj12*x4965);
evalcond[0]=(((r22*x4965))+(((-1.0)*r21*sj12*x4967))+((r20*x4966)));
evalcond[1]=(sj7+((r02*x4965))+(((-1.0)*r01*sj12*x4967))+((r00*x4966)));
evalcond[2]=((((-1.0)*r21*x4969))+(((-1.0)*r22*x4967))+((r20*x4968)));
evalcond[3]=(cj7+(((-1.0)*r02*x4967))+(((-1.0)*r01*x4969))+((r00*x4968)));
evalcond[4]=(sj7+((r10*x4968))+(((-1.0)*r11*x4969))+(((-1.0)*r12*x4967)));
evalcond[5]=((((-1.0)*r11*sj12*x4967))+((r12*x4965))+((r10*x4966))+(((-1.0)*cj7)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4970=((1.0)*cj12);
CheckValue<IkReal> x4971 = IKatan2WithCheck(IkReal((r22*sj7)),IkReal((((r21*sj12*sj7))+(((-1.0)*r20*sj7*x4970)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4971.valid){
continue;
}
CheckValue<IkReal> x4972=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4970))+(((-1.0)*r10*sj12)))),-1);
if(!x4972.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4971.value)+(((1.5707963267949)*(x4972.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4973=IKsin(j11);
IkReal x4974=IKcos(j11);
IkReal x4975=(cj12*x4973);
IkReal x4976=((1.0)*x4973);
IkReal x4977=(cj12*x4974);
IkReal x4978=((1.0)*sj12*x4974);
evalcond[0]=(((r22*x4974))+(((-1.0)*r21*sj12*x4976))+((r20*x4975)));
evalcond[1]=(sj7+((r02*x4974))+(((-1.0)*r01*sj12*x4976))+((r00*x4975)));
evalcond[2]=((((-1.0)*r21*x4978))+(((-1.0)*r22*x4976))+((r20*x4977)));
evalcond[3]=(cj7+(((-1.0)*r02*x4976))+(((-1.0)*r01*x4978))+((r00*x4977)));
evalcond[4]=(sj7+((r10*x4977))+(((-1.0)*r12*x4976))+(((-1.0)*r11*x4978)));
evalcond[5]=((((-1.0)*r11*sj12*x4976))+((r10*x4975))+((r12*x4974))+(((-1.0)*cj7)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j9, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((2.38342796813528)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.38342796813528)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.38342796813528)*py))+IKsqr(((2.38342796813528)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((2.38342796813528)*py), ((2.38342796813528)*px));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
evalcond[0]=((((0.41956376)*(IKcos(j7))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.41956376)*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j9=3.14159265358979;
sj9=0;
cj9=-1.0;
IkReal x4979=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x4979;
j11eval[1]=((IKabs(((((-1.0)*cj12*cj7*r20))+((cj7*r21*sj12)))))+(IKabs((cj7*r22))));
j11eval[2]=IKsign(x4979);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j9=3.14159265358979;
sj9=0;
cj9=-1.0;
IkReal x4980=cj12*cj12;
IkReal x4981=(r21*sj12);
IkReal x4982=(r01*r21);
IkReal x4983=((1.0)*cj12*r20);
IkReal x4984=(x4982+((r00*r20*x4980))+(((-1.0)*r01*sj12*x4983))+(((-1.0)*cj12*r00*x4981))+((r02*r22))+(((-1.0)*x4980*x4982)));
j11eval[0]=x4984;
j11eval[1]=((IKabs((((cj7*x4981))+(((-1.0)*cj7*x4983)))))+(IKabs((cj7*r22))));
j11eval[2]=IKsign(x4984);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j9=3.14159265358979;
sj9=0;
cj9=-1.0;
IkReal x4985=cj12*cj12;
IkReal x4986=((1.0)*r21);
IkReal x4987=(cj12*sj12);
IkReal x4988=((1.0)*r20);
IkReal x4989=((((-1.0)*r11*x4985*x4986))+((r11*r21))+(((-1.0)*r11*x4987*x4988))+((r12*r22))+((r10*r20*x4985))+(((-1.0)*r10*x4986*x4987)));
j11eval[0]=x4989;
j11eval[1]=((IKabs((r22*sj7)))+(IKabs((((r21*sj12*sj7))+(((-1.0)*cj12*sj7*x4988))))));
j11eval[2]=IKsign(x4989);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x4990=cj12*cj12;
IkReal x4991=((1.0)*r21);
IkReal x4992=(cj12*sj12);
IkReal x4993=((1.0)*r20);
CheckValue<IkReal> x4994 = IKatan2WithCheck(IkReal((r22*sj7)),IkReal((((r21*sj12*sj7))+(((-1.0)*cj12*sj7*x4993)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4994.valid){
continue;
}
CheckValue<IkReal> x4995=IKPowWithIntegerCheck(IKsign((((r11*r21))+(((-1.0)*r10*x4991*x4992))+((r12*r22))+(((-1.0)*r11*x4992*x4993))+((r10*r20*x4990))+(((-1.0)*r11*x4990*x4991)))),-1);
if(!x4995.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x4994.value)+(((1.5707963267949)*(x4995.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x4996=IKsin(j11);
IkReal x4997=IKcos(j11);
IkReal x4998=(cj12*x4996);
IkReal x4999=((1.0)*x4996);
IkReal x5000=(cj12*x4997);
IkReal x5001=((1.0)*sj12*x4997);
evalcond[0]=((((-1.0)*r21*sj12*x4999))+((r22*x4997))+((r20*x4998)));
evalcond[1]=(cj7+((r10*x4998))+(((-1.0)*r11*sj12*x4999))+((r12*x4997)));
evalcond[2]=((((-1.0)*r22*x4999))+((r20*x5000))+(((-1.0)*r21*x5001)));
evalcond[3]=(cj7+(((-1.0)*r02*x4999))+((r00*x5000))+(((-1.0)*r01*x5001)));
evalcond[4]=(sj7+(((-1.0)*r12*x4999))+((r10*x5000))+(((-1.0)*r11*x5001)));
evalcond[5]=((((-1.0)*r01*sj12*x4999))+(((-1.0)*sj7))+((r02*x4997))+((r00*x4998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5002=cj12*cj12;
IkReal x5003=(r21*sj12);
IkReal x5004=(r01*r21);
IkReal x5005=((1.0)*cj12*r20);
CheckValue<IkReal> x5006 = IKatan2WithCheck(IkReal((cj7*r22)),IkReal(((((-1.0)*cj7*x5005))+((cj7*x5003)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5006.valid){
continue;
}
CheckValue<IkReal> x5007=IKPowWithIntegerCheck(IKsign((((r00*r20*x5002))+(((-1.0)*cj12*r00*x5003))+(((-1.0)*r01*sj12*x5005))+x5004+((r02*r22))+(((-1.0)*x5002*x5004)))),-1);
if(!x5007.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5006.value)+(((1.5707963267949)*(x5007.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5008=IKsin(j11);
IkReal x5009=IKcos(j11);
IkReal x5010=(cj12*x5008);
IkReal x5011=((1.0)*x5008);
IkReal x5012=(cj12*x5009);
IkReal x5013=((1.0)*sj12*x5009);
evalcond[0]=(((r20*x5010))+((r22*x5009))+(((-1.0)*r21*sj12*x5011)));
evalcond[1]=(((r12*x5009))+cj7+((r10*x5010))+(((-1.0)*r11*sj12*x5011)));
evalcond[2]=(((r20*x5012))+(((-1.0)*r21*x5013))+(((-1.0)*r22*x5011)));
evalcond[3]=(cj7+(((-1.0)*r02*x5011))+(((-1.0)*r01*x5013))+((r00*x5012)));
evalcond[4]=(sj7+(((-1.0)*r11*x5013))+(((-1.0)*r12*x5011))+((r10*x5012)));
evalcond[5]=((((-1.0)*sj7))+((r02*x5009))+(((-1.0)*r01*sj12*x5011))+((r00*x5010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x5014 = IKatan2WithCheck(IkReal((cj7*r22)),IkReal(((((-1.0)*cj12*cj7*r20))+((cj7*r21*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5014.valid){
continue;
}
CheckValue<IkReal> x5015=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x5015.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5014.value)+(((1.5707963267949)*(x5015.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5016=IKsin(j11);
IkReal x5017=IKcos(j11);
IkReal x5018=(cj12*x5016);
IkReal x5019=((1.0)*x5016);
IkReal x5020=(cj12*x5017);
IkReal x5021=((1.0)*sj12*x5017);
evalcond[0]=(((r20*x5018))+((r22*x5017))+(((-1.0)*r21*sj12*x5019)));
evalcond[1]=(cj7+((r10*x5018))+((r12*x5017))+(((-1.0)*r11*sj12*x5019)));
evalcond[2]=(((r20*x5020))+(((-1.0)*r21*x5021))+(((-1.0)*r22*x5019)));
evalcond[3]=((((-1.0)*r01*x5021))+cj7+(((-1.0)*r02*x5019))+((r00*x5020)));
evalcond[4]=(sj7+(((-1.0)*r11*x5021))+((r10*x5020))+(((-1.0)*r12*x5019)));
evalcond[5]=((((-1.0)*sj7))+((r02*x5017))+(((-1.0)*r01*sj12*x5019))+((r00*x5018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j9, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j8, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((2.5)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.5)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.5)*py))+IKsqr(((2.5)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((2.5)*py), ((2.5)*px));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
evalcond[0]=((((-2.5)*py))+(IKsin(j7)));
evalcond[1]=((((-2.5)*px))+(IKcos(j7)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
j9=3.14159265358979;
sj9=0;
cj9=-1.0;
IkReal x5022=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x5022;
j11eval[1]=((IKabs(((((-1.0)*cj12*cj7*r20))+((cj7*r21*sj12)))))+(IKabs((cj7*r22))));
j11eval[2]=IKsign(x5022);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
j9=3.14159265358979;
sj9=0;
cj9=-1.0;
IkReal x5023=cj12*cj12;
IkReal x5024=r21*r21;
IkReal x5025=(r21*sj12);
IkReal x5026=(cj12*r20);
IkReal x5027=((((2.0)*x5025*x5026))+((x5023*x5024))+(((-1.0)*x5024))+(((-1.0)*(r22*r22)))+(((-1.0)*x5023*(r20*r20))));
j11eval[0]=x5027;
j11eval[1]=IKsign(x5027);
j11eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x5026))+x5025))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=3.14159265358979;
sj8=0;
cj8=-1.0;
j9=3.14159265358979;
sj9=0;
cj9=-1.0;
IkReal x5028=cj12*cj12;
IkReal x5029=(r01*r11);
IkReal x5030=(r01*sj12);
IkReal x5031=(cj12*r00);
IkReal x5032=((((-1.0)*r02*r12))+((x5028*x5029))+(((-1.0)*x5029))+((cj12*r10*x5030))+((r11*sj12*x5031))+(((-1.0)*r00*r10*x5028)));
j11eval[0]=x5032;
j11eval[1]=((IKabs((cj7*r02)))+(IKabs(((((-1.0)*cj7*x5030))+((cj7*x5031))))));
j11eval[2]=IKsign(x5032);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5033=cj12*cj12;
IkReal x5034=((1.0)*r01);
IkReal x5035=(cj12*sj12);
CheckValue<IkReal> x5036=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((r00*r11*x5035))+(((-1.0)*r11*x5034))+((r01*r10*x5035))+(((-1.0)*r00*r10*x5033))+((r01*r11*x5033)))),-1);
if(!x5036.valid){
continue;
}
CheckValue<IkReal> x5037 = IKatan2WithCheck(IkReal(((((-1.0)*cj7*sj12*x5034))+((cj12*cj7*r00)))),IkReal((cj7*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5037.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5036.value)))+(x5037.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5038=IKsin(j11);
IkReal x5039=IKcos(j11);
IkReal x5040=(cj12*x5038);
IkReal x5041=((1.0)*x5038);
IkReal x5042=(cj12*x5039);
IkReal x5043=((1.0)*sj12*x5039);
evalcond[0]=(((r20*x5040))+(((-1.0)*r21*sj12*x5041))+((r22*x5039)));
evalcond[1]=(((r12*x5039))+cj7+((r10*x5040))+(((-1.0)*r11*sj12*x5041)));
evalcond[2]=((((-1.0)*r02*x5041))+((r00*x5042))+(((-1.0)*r01*x5043)));
evalcond[3]=(((r10*x5042))+(((-1.0)*r12*x5041))+(((-1.0)*r11*x5043)));
evalcond[4]=((-1.0)+(((-1.0)*r21*x5043))+((r20*x5042))+(((-1.0)*r22*x5041)));
evalcond[5]=((((-1.0)*sj7))+((r02*x5039))+(((-1.0)*r01*sj12*x5041))+((r00*x5040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5044=cj12*cj12;
IkReal x5045=r21*r21;
IkReal x5046=(r21*sj12);
IkReal x5047=(cj12*r20);
CheckValue<IkReal> x5048=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5045))+(((-1.0)*(r22*r22)))+(((2.0)*x5046*x5047))+((x5044*x5045))+(((-1.0)*x5044*(r20*r20))))),-1);
if(!x5048.valid){
continue;
}
CheckValue<IkReal> x5049 = IKatan2WithCheck(IkReal(r22),IkReal((x5046+(((-1.0)*x5047)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5049.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5048.value)))+(x5049.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5050=IKsin(j11);
IkReal x5051=IKcos(j11);
IkReal x5052=(cj12*x5050);
IkReal x5053=((1.0)*x5050);
IkReal x5054=(cj12*x5051);
IkReal x5055=((1.0)*sj12*x5051);
evalcond[0]=(((r20*x5052))+((r22*x5051))+(((-1.0)*r21*sj12*x5053)));
evalcond[1]=(cj7+((r10*x5052))+((r12*x5051))+(((-1.0)*r11*sj12*x5053)));
evalcond[2]=((((-1.0)*r01*x5055))+((r00*x5054))+(((-1.0)*r02*x5053)));
evalcond[3]=(((r10*x5054))+(((-1.0)*r12*x5053))+(((-1.0)*r11*x5055)));
evalcond[4]=((-1.0)+((r20*x5054))+(((-1.0)*r22*x5053))+(((-1.0)*r21*x5055)));
evalcond[5]=((((-1.0)*sj7))+((r00*x5052))+(((-1.0)*r01*sj12*x5053))+((r02*x5051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x5056 = IKatan2WithCheck(IkReal((cj7*r22)),IkReal(((((-1.0)*cj12*cj7*r20))+((cj7*r21*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5056.valid){
continue;
}
CheckValue<IkReal> x5057=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x5057.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5056.value)+(((1.5707963267949)*(x5057.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5058=IKsin(j11);
IkReal x5059=IKcos(j11);
IkReal x5060=(cj12*x5058);
IkReal x5061=((1.0)*x5058);
IkReal x5062=(cj12*x5059);
IkReal x5063=((1.0)*sj12*x5059);
evalcond[0]=(((r20*x5060))+((r22*x5059))+(((-1.0)*r21*sj12*x5061)));
evalcond[1]=(cj7+((r12*x5059))+((r10*x5060))+(((-1.0)*r11*sj12*x5061)));
evalcond[2]=((((-1.0)*r02*x5061))+((r00*x5062))+(((-1.0)*r01*x5063)));
evalcond[3]=((((-1.0)*r12*x5061))+(((-1.0)*r11*x5063))+((r10*x5062)));
evalcond[4]=((-1.0)+((r20*x5062))+(((-1.0)*r21*x5063))+(((-1.0)*r22*x5061)));
evalcond[5]=((((-1.0)*sj7))+(((-1.0)*r01*sj12*x5061))+((r00*x5060))+((r02*x5059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j9), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-2.37848193105333)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.37848193105333)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.37848193105333)*py))+IKsqr(((-2.37848193105333)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-2.37848193105333)*py), ((-2.37848193105333)*px));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
evalcond[0]=((((-0.42043624)*(IKcos(j7))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.42043624)*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j9=0;
sj9=0;
cj9=1.0;
IkReal x5064=((1.0)*cj12);
IkReal x5065=((((-1.0)*r11*x5064))+(((-1.0)*r10*sj12)));
j11eval[0]=x5065;
j11eval[1]=IKsign(x5065);
j11eval[2]=((IKabs((r22*sj7)))+(IKabs((((r21*sj12*sj7))+(((-1.0)*r20*sj7*x5064))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j9=0;
sj9=0;
cj9=1.0;
IkReal x5066=((1.0)*cj12);
IkReal x5067=((((-1.0)*r00*sj12))+(((-1.0)*r01*x5066)));
j11eval[0]=x5067;
j11eval[1]=((IKabs(((((-1.0)*cj7*r20*x5066))+((cj7*r21*sj12)))))+(IKabs((cj7*r22))));
j11eval[2]=IKsign(x5067);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j9=0;
sj9=0;
cj9=1.0;
IkReal x5068=cj12*cj12;
IkReal x5069=(r01*r21);
IkReal x5070=(cj12*sj12);
IkReal x5071=((((-1.0)*r00*r20*x5068))+(((-1.0)*r02*r22))+((r00*r21*x5070))+(((-1.0)*x5069))+((r01*r20*x5070))+((x5068*x5069)));
j11eval[0]=x5071;
j11eval[1]=IKsign(x5071);
j11eval[2]=((IKabs((((cj12*r20*sj7))+(((-1.0)*r21*sj12*sj7)))))+(IKabs((r22*sj7))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5072=cj12*cj12;
IkReal x5073=((1.0)*r21);
IkReal x5074=(cj12*sj12);
CheckValue<IkReal> x5075=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x5072))+((r00*r21*x5074))+((r01*r21*x5072))+(((-1.0)*r01*x5073))+((r01*r20*x5074)))),-1);
if(!x5075.valid){
continue;
}
CheckValue<IkReal> x5076 = IKatan2WithCheck(IkReal(((((-1.0)*sj12*sj7*x5073))+((cj12*r20*sj7)))),IkReal((r22*sj7)),IKFAST_ATAN2_MAGTHRESH);
if(!x5076.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5075.value)))+(x5076.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5077=IKsin(j11);
IkReal x5078=IKcos(j11);
IkReal x5079=((1.0)*cj7);
IkReal x5080=(cj12*x5077);
IkReal x5081=((1.0)*x5077);
IkReal x5082=(cj12*x5078);
IkReal x5083=((1.0)*sj12*x5078);
evalcond[0]=((((-1.0)*r21*sj12*x5081))+((r20*x5080))+((r22*x5078)));
evalcond[1]=(sj7+(((-1.0)*r01*sj12*x5081))+((r00*x5080))+((r02*x5078)));
evalcond[2]=(((r20*x5082))+(((-1.0)*r21*x5083))+(((-1.0)*r22*x5081)));
evalcond[3]=((((-1.0)*x5079))+(((-1.0)*r11*sj12*x5081))+((r10*x5080))+((r12*x5078)));
evalcond[4]=((((-1.0)*x5079))+(((-1.0)*r01*x5083))+((r00*x5082))+(((-1.0)*r02*x5081)));
evalcond[5]=((((-1.0)*r11*x5083))+(((-1.0)*r12*x5081))+(((-1.0)*sj7))+((r10*x5082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5084=((1.0)*cj12);
CheckValue<IkReal> x5085=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5084))+(((-1.0)*r00*sj12)))),-1);
if(!x5085.valid){
continue;
}
CheckValue<IkReal> x5086 = IKatan2WithCheck(IkReal((cj7*r22)),IkReal(((((-1.0)*cj7*r20*x5084))+((cj7*r21*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5086.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5085.value)))+(x5086.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5087=IKsin(j11);
IkReal x5088=IKcos(j11);
IkReal x5089=((1.0)*cj7);
IkReal x5090=(cj12*x5087);
IkReal x5091=((1.0)*x5087);
IkReal x5092=(cj12*x5088);
IkReal x5093=((1.0)*sj12*x5088);
evalcond[0]=((((-1.0)*r21*sj12*x5091))+((r22*x5088))+((r20*x5090)));
evalcond[1]=(sj7+(((-1.0)*r01*sj12*x5091))+((r00*x5090))+((r02*x5088)));
evalcond[2]=((((-1.0)*r22*x5091))+((r20*x5092))+(((-1.0)*r21*x5093)));
evalcond[3]=(((r10*x5090))+(((-1.0)*r11*sj12*x5091))+((r12*x5088))+(((-1.0)*x5089)));
evalcond[4]=(((r00*x5092))+(((-1.0)*r01*x5093))+(((-1.0)*x5089))+(((-1.0)*r02*x5091)));
evalcond[5]=((((-1.0)*sj7))+(((-1.0)*r11*x5093))+((r10*x5092))+(((-1.0)*r12*x5091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5094=((1.0)*cj12);
CheckValue<IkReal> x5095 = IKatan2WithCheck(IkReal((r22*sj7)),IkReal((((r21*sj12*sj7))+(((-1.0)*r20*sj7*x5094)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5095.valid){
continue;
}
CheckValue<IkReal> x5096=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5094))+(((-1.0)*r10*sj12)))),-1);
if(!x5096.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5095.value)+(((1.5707963267949)*(x5096.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5097=IKsin(j11);
IkReal x5098=IKcos(j11);
IkReal x5099=((1.0)*cj7);
IkReal x5100=(cj12*x5097);
IkReal x5101=((1.0)*x5097);
IkReal x5102=(cj12*x5098);
IkReal x5103=((1.0)*sj12*x5098);
evalcond[0]=((((-1.0)*r21*sj12*x5101))+((r20*x5100))+((r22*x5098)));
evalcond[1]=(((r00*x5100))+sj7+(((-1.0)*r01*sj12*x5101))+((r02*x5098)));
evalcond[2]=((((-1.0)*r21*x5103))+((r20*x5102))+(((-1.0)*r22*x5101)));
evalcond[3]=((((-1.0)*r11*sj12*x5101))+((r12*x5098))+(((-1.0)*x5099))+((r10*x5100)));
evalcond[4]=(((r00*x5102))+(((-1.0)*r02*x5101))+(((-1.0)*x5099))+(((-1.0)*r01*x5103)));
evalcond[5]=((((-1.0)*sj7))+(((-1.0)*r12*x5101))+(((-1.0)*r11*x5103))+((r10*x5102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j9, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-2.37848193105333)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.37848193105333)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.37848193105333)*py))+IKsqr(((-2.37848193105333)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-2.37848193105333)*py), ((-2.37848193105333)*px));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
evalcond[0]=((((-0.42043624)*(IKcos(j7))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.42043624)*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j9=3.14159265358979;
sj9=0;
cj9=-1.0;
IkReal x5104=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x5104;
j11eval[1]=((IKabs(((((-1.0)*cj12*cj7*r20))+((cj7*r21*sj12)))))+(IKabs((cj7*r22))));
j11eval[2]=IKsign(x5104);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j9=3.14159265358979;
sj9=0;
cj9=-1.0;
IkReal x5105=(((r10*sj12))+((cj12*r11)));
j11eval[0]=x5105;
j11eval[1]=((IKabs((((r21*sj12*sj7))+(((-1.0)*cj12*r20*sj7)))))+(IKabs((r22*sj7))));
j11eval[2]=IKsign(x5105);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j9=3.14159265358979;
sj9=0;
cj9=-1.0;
IkReal x5106=cj12*cj12;
IkReal x5107=(r11*r21);
IkReal x5108=(cj12*r20);
IkReal x5109=(r21*sj12);
IkReal x5110=((((-1.0)*r10*r20*x5106))+((x5106*x5107))+(((-1.0)*r12*r22))+(((-1.0)*x5107))+((cj12*r10*x5109))+((r11*sj12*x5108)));
j11eval[0]=x5110;
j11eval[1]=((IKabs((cj7*r22)))+(IKabs((((cj7*x5108))+(((-1.0)*cj7*x5109))))));
j11eval[2]=IKsign(x5110);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5111=cj12*cj12;
IkReal x5112=(cj12*r20);
IkReal x5113=(r11*r21);
IkReal x5114=(r21*sj12);
CheckValue<IkReal> x5115=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x5111))+(((-1.0)*r12*r22))+(((-1.0)*x5113))+((x5111*x5113))+((cj12*r10*x5114))+((r11*sj12*x5112)))),-1);
if(!x5115.valid){
continue;
}
CheckValue<IkReal> x5116 = IKatan2WithCheck(IkReal((((cj7*x5112))+(((-1.0)*cj7*x5114)))),IkReal((cj7*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5116.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5115.value)))+(x5116.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5117=IKsin(j11);
IkReal x5118=IKcos(j11);
IkReal x5119=((1.0)*sj7);
IkReal x5120=(cj12*x5117);
IkReal x5121=((1.0)*x5117);
IkReal x5122=(cj12*x5118);
IkReal x5123=((1.0)*sj12*x5118);
evalcond[0]=(((r22*x5118))+(((-1.0)*r21*sj12*x5121))+((r20*x5120)));
evalcond[1]=(cj7+((r10*x5120))+((r12*x5118))+(((-1.0)*r11*sj12*x5121)));
evalcond[2]=((((-1.0)*r21*x5123))+((r20*x5122))+(((-1.0)*r22*x5121)));
evalcond[3]=(((r02*x5118))+((r00*x5120))+(((-1.0)*r01*sj12*x5121))+(((-1.0)*x5119)));
evalcond[4]=(((r00*x5122))+(((-1.0)*r01*x5123))+(((-1.0)*r02*x5121))+(((-1.0)*cj7)));
evalcond[5]=(((r10*x5122))+(((-1.0)*r12*x5121))+(((-1.0)*r11*x5123))+(((-1.0)*x5119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x5124 = IKatan2WithCheck(IkReal((r22*sj7)),IkReal((((r21*sj12*sj7))+(((-1.0)*cj12*r20*sj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5124.valid){
continue;
}
CheckValue<IkReal> x5125=IKPowWithIntegerCheck(IKsign((((r10*sj12))+((cj12*r11)))),-1);
if(!x5125.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5124.value)+(((1.5707963267949)*(x5125.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5126=IKsin(j11);
IkReal x5127=IKcos(j11);
IkReal x5128=((1.0)*sj7);
IkReal x5129=(cj12*x5126);
IkReal x5130=((1.0)*x5126);
IkReal x5131=(cj12*x5127);
IkReal x5132=((1.0)*sj12*x5127);
evalcond[0]=(((r22*x5127))+(((-1.0)*r21*sj12*x5130))+((r20*x5129)));
evalcond[1]=(cj7+((r10*x5129))+((r12*x5127))+(((-1.0)*r11*sj12*x5130)));
evalcond[2]=((((-1.0)*r21*x5132))+((r20*x5131))+(((-1.0)*r22*x5130)));
evalcond[3]=(((r00*x5129))+(((-1.0)*r01*sj12*x5130))+(((-1.0)*x5128))+((r02*x5127)));
evalcond[4]=((((-1.0)*r01*x5132))+((r00*x5131))+(((-1.0)*r02*x5130))+(((-1.0)*cj7)));
evalcond[5]=(((r10*x5131))+(((-1.0)*r11*x5132))+(((-1.0)*x5128))+(((-1.0)*r12*x5130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x5133 = IKatan2WithCheck(IkReal((cj7*r22)),IkReal(((((-1.0)*cj12*cj7*r20))+((cj7*r21*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5133.valid){
continue;
}
CheckValue<IkReal> x5134=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x5134.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5133.value)+(((1.5707963267949)*(x5134.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5135=IKsin(j11);
IkReal x5136=IKcos(j11);
IkReal x5137=((1.0)*sj7);
IkReal x5138=(cj12*x5135);
IkReal x5139=((1.0)*x5135);
IkReal x5140=(cj12*x5136);
IkReal x5141=((1.0)*sj12*x5136);
evalcond[0]=(((r22*x5136))+((r20*x5138))+(((-1.0)*r21*sj12*x5139)));
evalcond[1]=(cj7+((r12*x5136))+((r10*x5138))+(((-1.0)*r11*sj12*x5139)));
evalcond[2]=((((-1.0)*r21*x5141))+((r20*x5140))+(((-1.0)*r22*x5139)));
evalcond[3]=(((r00*x5138))+(((-1.0)*r01*sj12*x5139))+(((-1.0)*x5137))+((r02*x5136)));
evalcond[4]=(((r00*x5140))+(((-1.0)*r01*x5141))+(((-1.0)*r02*x5139))+(((-1.0)*cj7)));
evalcond[5]=(((r10*x5140))+(((-1.0)*r11*x5141))+(((-1.0)*x5137))+(((-1.0)*r12*x5139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7, j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x5142=cj9*cj9;
IkReal x5143=(r10*sj12);
IkReal x5144=(cj12*r11);
IkReal x5145=((5250000.0)*sj8);
IkReal x5146=(cj8*cj9);
IkReal x5147=((12500000.0)*px);
IkReal x5148=((5453.0)*sj9);
IkReal x5149=((5453.0)*x5146);
IkReal x5150=((5453.0)*x5142);
IkReal x5151=((5000000.0)*r00*sj12);
IkReal x5152=((5000000.0)*cj12*r01);
CheckValue<IkReal> x5153=IKPowWithIntegerCheck(IKsign(((5453.0)+((x5150*(cj8*cj8)))+(((-1.0)*x5149))+((x5145*x5146))+(((-1.0)*x5150)))),-1);
if(!x5153.valid){
continue;
}
CheckValue<IkReal> x5154 = IKatan2WithCheck(IkReal(((((-1.0)*sj9*x5147))+(((-1.0)*x5143*x5145))+(((-1.0)*x5143*x5149))+(((5453.0)*x5144))+(((5453.0)*x5143))+(((-1.0)*sj9*x5151))+(((-1.0)*sj9*x5152))+(((-1.0)*x5144*x5149))+(((-1.0)*x5144*x5145)))),IkReal((((x5146*x5151))+((x5146*x5152))+(((-1.0)*x5143*x5148))+((x5146*x5147))+(((-1.0)*x5144*x5148)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5154.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5153.value)))+(x5154.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x5155=IKcos(j7);
IkReal x5156=IKsin(j7);
IkReal x5157=(r10*sj12);
IkReal x5158=((0.42)*sj8);
IkReal x5159=(cj12*r01);
IkReal x5160=(cj8*cj9);
IkReal x5161=(cj12*r11);
IkReal x5162=(r00*sj12);
IkReal x5163=((0.00043624)*x5155);
IkReal x5164=((0.00043624)*x5156);
evalcond[0]=(((x5156*x5160))+((sj9*x5155))+x5157+x5161);
evalcond[1]=(x5159+x5162+((x5155*x5160))+(((-1.0)*sj9*x5156)));
evalcond[2]=((((-1.0)*sj9*x5164))+((x5160*x5163))+((x5155*x5158))+(((-1.0)*x5163))+(((-1.0)*px))+(((-0.4)*x5162))+(((-0.4)*x5159)));
evalcond[3]=(((x5160*x5164))+((sj9*x5163))+(((-1.0)*x5164))+(((-1.0)*py))+(((-0.4)*x5161))+(((-0.4)*x5157))+((x5156*x5158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5165=((1.0)*cj8);
IkReal x5166=(sj7*sj8);
IkReal x5167=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x5167;
j11eval[1]=((IKabs(((((-1.0)*r21*sj12*x5166))+((cj12*r20*x5166))+((cj8*r11*sj12))+(((-1.0)*cj12*r10*x5165)))))+(IKabs(((((-1.0)*r12*x5165))+((r22*x5166))))));
j11eval[2]=IKsign(x5167);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5168=(cj7*sj8);
IkReal x5169=((1.0)*sj12);
IkReal x5170=((1.0)*cj12);
IkReal x5171=((((-1.0)*r11*x5170))+(((-1.0)*r10*x5169)));
j11eval[0]=x5171;
j11eval[1]=IKsign(x5171);
j11eval[2]=((IKabs(((((-1.0)*cj8*r02))+((r22*x5168)))))+(IKabs((((cj12*r20*x5168))+(((-1.0)*cj8*r00*x5170))+(((-1.0)*r21*x5168*x5169))+((cj8*r01*sj12))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5172=cj12*cj12;
IkReal x5173=r21*r21;
IkReal x5174=(cj12*r20);
IkReal x5175=(r21*sj12);
IkReal x5176=(sj8*sj9);
IkReal x5177=((r22*r22)+x5173+((x5172*(r20*r20)))+(((-2.0)*x5174*x5175))+(((-1.0)*x5172*x5173)));
j11eval[0]=x5177;
j11eval[1]=IKsign(x5177);
j11eval[2]=((IKabs(((((-1.0)*cj8*x5174))+((r22*x5176))+((cj8*x5175)))))+(IKabs(((((-1.0)*x5175*x5176))+((cj8*r22))+((x5174*x5176))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5178=((-1.0)*r10);
IkReal x5180 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5180)==0){
continue;
}
IkReal x5179=pow(x5180,-0.5);
CheckValue<IkReal> x5181 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5178),IKFAST_ATAN2_MAGTHRESH);
if(!x5181.valid){
continue;
}
IkReal gconst42=((-1.0)*(x5181.value));
IkReal gconst43=(r11*x5179);
IkReal gconst44=(x5178*x5179);
CheckValue<IkReal> x5182 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5182.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j12+(x5182.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5183=((1.0)*cj8);
IkReal x5184=(sj7*sj8);
CheckValue<IkReal> x5185=IKPowWithIntegerCheck(IKsign((((gconst43*r00))+((gconst44*r01)))),-1);
if(!x5185.valid){
continue;
}
CheckValue<IkReal> x5186 = IKatan2WithCheck(IkReal(((((-1.0)*gconst43*r21*x5184))+((gconst44*r20*x5184))+(((-1.0)*gconst44*r10*x5183))+((cj8*gconst43*r11)))),IkReal((((r22*x5184))+(((-1.0)*r12*x5183)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5186.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5185.value)))+(x5186.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5187=IKcos(j11);
IkReal x5188=IKsin(j11);
IkReal x5189=(cj8*sj9);
IkReal x5190=(gconst44*x5188);
IkReal x5191=(gconst44*x5187);
IkReal x5192=((1.0)*x5188);
IkReal x5193=(gconst43*x5192);
IkReal x5194=((1.0)*gconst43*x5187);
evalcond[0]=(cj8+(((-1.0)*r21*x5194))+(((-1.0)*r22*x5192))+((r20*x5191)));
evalcond[1]=(((r22*x5187))+(((-1.0)*sj8*sj9))+(((-1.0)*r21*x5193))+((r20*x5190)));
evalcond[2]=((((-1.0)*r01*x5194))+(((-1.0)*r02*x5192))+((r00*x5191))+((cj7*sj8)));
evalcond[3]=((((-1.0)*r12*x5192))+(((-1.0)*r11*x5194))+((r10*x5191))+((sj7*sj8)));
evalcond[4]=((((-1.0)*r01*x5193))+((cj7*x5189))+((cj9*sj7))+((r00*x5190))+((r02*x5187)));
evalcond[5]=((((-1.0)*cj7*cj9))+(((-1.0)*r11*x5193))+((r10*x5190))+((sj7*x5189))+((r12*x5187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5195=((-1.0)*r11);
IkReal x5197 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5197)==0){
continue;
}
IkReal x5196=pow(x5197,-0.5);
CheckValue<IkReal> x5198 = IKatan2WithCheck(IkReal(x5195),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5198.valid){
continue;
}
IkReal gconst45=((3.14159265358979)+(((-1.0)*(x5198.value))));
IkReal gconst46=(x5195*x5196);
IkReal gconst47=((1.0)*r10*x5196);
CheckValue<IkReal> x5199 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5199.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12+(x5199.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5200=(sj7*sj8);
IkReal x5201=((1.0)*cj8);
CheckValue<IkReal> x5202=IKPowWithIntegerCheck(IKsign((((gconst47*r01))+((gconst46*r00)))),-1);
if(!x5202.valid){
continue;
}
CheckValue<IkReal> x5203 = IKatan2WithCheck(IkReal((((cj8*gconst46*r11))+(((-1.0)*gconst46*r21*x5200))+((gconst47*r20*x5200))+(((-1.0)*gconst47*r10*x5201)))),IkReal((((r22*x5200))+(((-1.0)*r12*x5201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5203.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5202.value)))+(x5203.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5204=IKcos(j11);
IkReal x5205=IKsin(j11);
IkReal x5206=(cj8*sj9);
IkReal x5207=(gconst46*r01);
IkReal x5208=(gconst46*r21);
IkReal x5209=(gconst46*r11);
IkReal x5210=(gconst47*x5205);
IkReal x5211=((1.0)*x5205);
IkReal x5212=((1.0)*x5204);
IkReal x5213=(gconst47*x5204);
evalcond[0]=(cj8+((r20*x5213))+(((-1.0)*r22*x5211))+(((-1.0)*x5208*x5212)));
evalcond[1]=((((-1.0)*sj8*sj9))+((r20*x5210))+((r22*x5204))+(((-1.0)*x5208*x5211)));
evalcond[2]=(((cj7*sj8))+(((-1.0)*x5207*x5212))+(((-1.0)*r02*x5211))+((r00*x5213)));
evalcond[3]=((((-1.0)*x5209*x5212))+((sj7*sj8))+((r10*x5213))+(((-1.0)*r12*x5211)));
evalcond[4]=(((cj9*sj7))+((r02*x5204))+((cj7*x5206))+(((-1.0)*x5207*x5211))+((r00*x5210)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r12*x5204))+(((-1.0)*x5209*x5211))+((r10*x5210))+((sj7*x5206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5215 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5215)==0){
continue;
}
IkReal x5214=pow(x5215,-0.5);
CheckValue<IkReal> x5216 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5216.valid){
continue;
}
IkReal gconst48=((-1.0)*(x5216.value));
IkReal gconst49=((-1.0)*r01*x5214);
IkReal gconst50=(r00*x5214);
CheckValue<IkReal> x5217 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5217.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5217.value)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5218=(cj7*sj8);
IkReal x5219=((1.0)*gconst49);
IkReal x5220=((1.0)*gconst50);
CheckValue<IkReal> x5221 = IKatan2WithCheck(IkReal((((gconst50*r20*x5218))+((cj8*gconst49*r01))+(((-1.0)*r21*x5218*x5219))+(((-1.0)*cj8*r00*x5220)))),IkReal((((r22*x5218))+(((-1.0)*cj8*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5221.valid){
continue;
}
CheckValue<IkReal> x5222=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5219))+(((-1.0)*r11*x5220)))),-1);
if(!x5222.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5221.value)+(((1.5707963267949)*(x5222.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5223=IKcos(j11);
IkReal x5224=IKsin(j11);
IkReal x5225=(cj8*sj9);
IkReal x5226=(gconst50*r00);
IkReal x5227=((1.0)*x5224);
IkReal x5228=(gconst50*x5223);
IkReal x5229=(gconst50*x5224);
IkReal x5230=((1.0)*gconst49*x5223);
evalcond[0]=((((-1.0)*r21*x5230))+cj8+(((-1.0)*r22*x5227))+((r20*x5228)));
evalcond[1]=((((-1.0)*sj8*sj9))+((r22*x5223))+((r20*x5229))+(((-1.0)*gconst49*r21*x5227)));
evalcond[2]=(((x5223*x5226))+(((-1.0)*r01*x5230))+(((-1.0)*r02*x5227))+((cj7*sj8)));
evalcond[3]=((((-1.0)*r11*x5230))+(((-1.0)*r12*x5227))+((r10*x5228))+((sj7*sj8)));
evalcond[4]=(((r02*x5223))+(((-1.0)*gconst49*r01*x5227))+((cj9*sj7))+((cj7*x5225))+((x5224*x5226)));
evalcond[5]=((((-1.0)*cj7*cj9))+((sj7*x5225))+((r10*x5229))+((r12*x5223))+(((-1.0)*gconst49*r11*x5227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5232 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5232)==0){
continue;
}
IkReal x5231=pow(x5232,-0.5);
CheckValue<IkReal> x5233 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5233.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x5233.value))));
IkReal gconst52=((1.0)*r01*x5231);
IkReal gconst53=((-1.0)*r00*x5231);
CheckValue<IkReal> x5234 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5234.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5234.value)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
CheckValue<IkReal> x5237 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5237.valid){
continue;
}
IkReal x5235=((1.0)*(x5237.value));
IkReal x5236=x5231;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj12=gconst52;
cj12=gconst53;
j12=((3.14159265)+(((-1.0)*x5235)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x5235)));
IkReal gconst52=((1.0)*r01*x5236);
IkReal gconst53=((-1.0)*r00*x5236);
IkReal x5238=r02*r02;
IkReal x5239=(cj8*r12);
IkReal x5240=(r22*sj7*sj8);
CheckValue<IkReal> x5244=IKPowWithIntegerCheck(((-1.0)+x5238),-1);
if(!x5244.valid){
continue;
}
IkReal x5241=x5244.value;
if((((1.0)+(((-1.0)*x5238)))) < -0.00001)
continue;
IkReal x5242=IKsqrt(((1.0)+(((-1.0)*x5238))));
IkReal x5243=(r02*x5241*x5242);
j11eval[0]=0;
j11eval[1]=((IKabs(((((-1.0)*x5239))+x5240)))+(IKabs((((x5239*x5243))+(((-1.0)*x5240*x5243))))));
j11eval[2]=0;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5245=(cj7*sj8);
IkReal x5246=((1.0)*gconst52);
IkReal x5247=((1.0)*gconst53);
CheckValue<IkReal> x5248=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5246))+(((-1.0)*r11*x5247)))),-1);
if(!x5248.valid){
continue;
}
CheckValue<IkReal> x5249 = IKatan2WithCheck(IkReal(((((-1.0)*cj8*r00*x5247))+((cj8*gconst52*r01))+(((-1.0)*r21*x5245*x5246))+((gconst53*r20*x5245)))),IkReal(((((-1.0)*cj8*r02))+((r22*x5245)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5249.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5248.value)))+(x5249.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5250=IKcos(j11);
IkReal x5251=IKsin(j11);
IkReal x5252=((1.0)*gconst52);
IkReal x5253=(gconst53*r00);
IkReal x5254=(cj8*sj9);
IkReal x5255=((1.0)*x5251);
IkReal x5256=(gconst53*x5250);
IkReal x5257=(gconst53*x5251);
evalcond[0]=(cj8+(((-1.0)*r21*x5250*x5252))+((r20*x5256))+(((-1.0)*r22*x5255)));
evalcond[1]=(((r22*x5250))+(((-1.0)*sj8*sj9))+(((-1.0)*r21*x5251*x5252))+((r20*x5257)));
evalcond[2]=((((-1.0)*r02*x5255))+((x5250*x5253))+(((-1.0)*r01*x5250*x5252))+((cj7*sj8)));
evalcond[3]=(((r10*x5256))+(((-1.0)*r12*x5255))+(((-1.0)*r11*x5250*x5252))+((sj7*sj8)));
evalcond[4]=(((cj7*x5254))+((cj9*sj7))+((x5251*x5253))+(((-1.0)*r01*x5251*x5252))+((r02*x5250)));
evalcond[5]=(((r10*x5257))+(((-1.0)*cj7*cj9))+((r12*x5250))+(((-1.0)*r11*x5251*x5252))+((sj7*x5254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5258=((1.0)*cj8);
IkReal x5259=(sj7*sj8);
CheckValue<IkReal> x5260=IKPowWithIntegerCheck(IKsign((((gconst53*r01))+((gconst52*r00)))),-1);
if(!x5260.valid){
continue;
}
CheckValue<IkReal> x5261 = IKatan2WithCheck(IkReal((((cj8*gconst52*r11))+(((-1.0)*gconst53*r10*x5258))+((gconst53*r20*x5259))+(((-1.0)*gconst52*r21*x5259)))),IkReal((((r22*x5259))+(((-1.0)*r12*x5258)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5261.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5260.value)))+(x5261.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5262=IKcos(j11);
IkReal x5263=IKsin(j11);
IkReal x5264=((1.0)*gconst52);
IkReal x5265=(gconst53*r00);
IkReal x5266=(cj8*sj9);
IkReal x5267=((1.0)*x5263);
IkReal x5268=(gconst53*x5262);
IkReal x5269=(gconst53*x5263);
evalcond[0]=(cj8+(((-1.0)*r21*x5262*x5264))+((r20*x5268))+(((-1.0)*r22*x5267)));
evalcond[1]=((((-1.0)*sj8*sj9))+((r20*x5269))+(((-1.0)*r21*x5263*x5264))+((r22*x5262)));
evalcond[2]=(((x5262*x5265))+(((-1.0)*r02*x5267))+((cj7*sj8))+(((-1.0)*r01*x5262*x5264)));
evalcond[3]=((((-1.0)*r12*x5267))+(((-1.0)*r11*x5262*x5264))+((sj7*sj8))+((r10*x5268)));
evalcond[4]=(((r02*x5262))+((cj7*x5266))+((cj9*sj7))+((x5263*x5265))+(((-1.0)*r01*x5263*x5264)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r12*x5262))+(((-1.0)*r11*x5263*x5264))+((sj7*x5266))+((r10*x5269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x5270=((-1.0)*px);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5270);
rxp1_1=(px*r21);
rxp1_2=(r11*x5270);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=r02;
j11eval[1]=IKsign(r02);
j11eval[2]=((IKabs(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9)))))+(IKabs((cj7*sj8))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x5271=((-1.0)*px);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5271);
rxp1_1=(px*r21);
rxp1_2=(r11*x5271);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=r02;
j11eval[1]=((((-1.0)*r21*sj12))+((cj12*r20)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x5272=((-1.0)*px);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5272);
rxp1_1=(px*r21);
rxp1_2=(r11*x5272);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=r02;
j11eval[1]=((((-1.0)*r11*sj12))+((cj12*r10)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x5273=IKPowWithIntegerCheck(r02,-1);
if(!x5273.valid){
continue;
}
CheckValue<IkReal> x5274=IKPowWithIntegerCheck(((((-1.0)*r11*sj12))+((cj12*r10))),-1);
if(!x5274.valid){
continue;
}
if( IKabs((cj7*sj8*(x5273.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj7*sj8*(x5274.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj7*sj8*(x5273.value)))+IKsqr(((-1.0)*sj7*sj8*(x5274.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((cj7*sj8*(x5273.value)), ((-1.0)*sj7*sj8*(x5274.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5275=IKcos(j11);
IkReal x5276=IKsin(j11);
IkReal x5277=(cj8*sj9);
IkReal x5278=(cj12*x5276);
IkReal x5279=(cj12*x5275);
IkReal x5280=((1.0)*x5276);
IkReal x5281=((1.0)*sj12*x5275);
evalcond[0]=((((-1.0)*r02*x5280))+((cj7*sj8)));
evalcond[1]=(((r02*x5275))+((cj7*x5277))+((cj9*sj7)));
evalcond[2]=(cj8+(((-1.0)*r21*x5281))+((r20*x5279)));
evalcond[3]=(((r10*x5279))+(((-1.0)*r11*x5281))+((sj7*sj8)));
evalcond[4]=((((-1.0)*sj8*sj9))+(((-1.0)*r21*sj12*x5280))+((r20*x5278)));
evalcond[5]=((((-1.0)*r11*sj12*x5280))+(((-1.0)*cj7*cj9))+((sj7*x5277))+((r10*x5278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x5282=IKPowWithIntegerCheck(r02,-1);
if(!x5282.valid){
continue;
}
CheckValue<IkReal> x5283=IKPowWithIntegerCheck(((((-1.0)*r21*sj12))+((cj12*r20))),-1);
if(!x5283.valid){
continue;
}
if( IKabs((cj7*sj8*(x5282.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj8*(x5283.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj7*sj8*(x5282.value)))+IKsqr(((-1.0)*cj8*(x5283.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((cj7*sj8*(x5282.value)), ((-1.0)*cj8*(x5283.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5284=IKcos(j11);
IkReal x5285=IKsin(j11);
IkReal x5286=(cj8*sj9);
IkReal x5287=(cj12*x5285);
IkReal x5288=(cj12*x5284);
IkReal x5289=((1.0)*x5285);
IkReal x5290=((1.0)*sj12*x5284);
evalcond[0]=((((-1.0)*r02*x5289))+((cj7*sj8)));
evalcond[1]=(((r02*x5284))+((cj7*x5286))+((cj9*sj7)));
evalcond[2]=(cj8+((r20*x5288))+(((-1.0)*r21*x5290)));
evalcond[3]=(((r10*x5288))+(((-1.0)*r11*x5290))+((sj7*sj8)));
evalcond[4]=((((-1.0)*sj8*sj9))+(((-1.0)*r21*sj12*x5289))+((r20*x5287)));
evalcond[5]=((((-1.0)*r11*sj12*x5289))+(((-1.0)*cj7*cj9))+((sj7*x5286))+((r10*x5287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x5291=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x5291.valid){
continue;
}
CheckValue<IkReal> x5292 = IKatan2WithCheck(IkReal((cj7*sj8)),IkReal(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5292.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5291.value)))+(x5292.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5293=IKcos(j11);
IkReal x5294=IKsin(j11);
IkReal x5295=(cj8*sj9);
IkReal x5296=(cj12*x5294);
IkReal x5297=(cj12*x5293);
IkReal x5298=((1.0)*x5294);
IkReal x5299=((1.0)*sj12*x5293);
evalcond[0]=((((-1.0)*r02*x5298))+((cj7*sj8)));
evalcond[1]=(((r02*x5293))+((cj7*x5295))+((cj9*sj7)));
evalcond[2]=(cj8+(((-1.0)*r21*x5299))+((r20*x5297)));
evalcond[3]=(((r10*x5297))+(((-1.0)*r11*x5299))+((sj7*sj8)));
evalcond[4]=((((-1.0)*r21*sj12*x5298))+(((-1.0)*sj8*sj9))+((r20*x5296)));
evalcond[5]=((((-1.0)*cj7*cj9))+(((-1.0)*r11*sj12*x5298))+((sj7*x5295))+((r10*x5296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x5300=((1.0)*sj12);
IkReal x5301=((((-1.0)*r10*x5300))+(((-1.0)*cj12*r11)));
j11eval[0]=x5301;
j11eval[1]=IKsign(x5301);
j11eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x5300))+((cj12*r20))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x5302=(((r20*sj12))+((cj12*r21)));
j11eval[0]=x5302;
j11eval[1]=IKsign(x5302);
j11eval[2]=((IKabs((cj9*r02)))+(IKabs((((cj9*r01*sj12))+(((-1.0)*cj12*cj9*r00))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x5303=((1.0)*cj12);
IkReal x5304=((((-1.0)*r11*x5303))+(((-1.0)*r10*sj12)));
j11eval[0]=x5304;
j11eval[1]=IKsign(x5304);
j11eval[2]=((IKabs((((r01*sj12*sj9))+(((-1.0)*r00*sj9*x5303)))))+(IKabs((r02*sj9))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5305=((1.0)*cj12);
CheckValue<IkReal> x5306=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5305))+(((-1.0)*r10*sj12)))),-1);
if(!x5306.valid){
continue;
}
CheckValue<IkReal> x5307 = IKatan2WithCheck(IkReal((r02*sj9)),IkReal((((r01*sj12*sj9))+(((-1.0)*r00*sj9*x5305)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5307.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5306.value)))+(x5307.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5308=IKsin(j11);
IkReal x5309=IKcos(j11);
IkReal x5310=(cj12*x5308);
IkReal x5311=((1.0)*x5308);
IkReal x5312=(cj12*x5309);
IkReal x5313=((1.0)*sj12*x5309);
evalcond[0]=(((r00*x5310))+((r02*x5309))+(((-1.0)*r01*sj12*x5311)));
evalcond[1]=(((r20*x5312))+(((-1.0)*r21*x5313))+(((-1.0)*r22*x5311)));
evalcond[2]=((((-1.0)*r12*x5311))+(((-1.0)*r11*x5313))+((r10*x5312)));
evalcond[3]=((1.0)+((r00*x5312))+(((-1.0)*r01*x5313))+(((-1.0)*r02*x5311)));
evalcond[4]=((((-1.0)*sj9))+(((-1.0)*r21*sj12*x5311))+((r22*x5309))+((r20*x5310)));
evalcond[5]=((((-1.0)*r11*sj12*x5311))+((r12*x5309))+((r10*x5310))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x5314=IKPowWithIntegerCheck(IKsign((((r20*sj12))+((cj12*r21)))),-1);
if(!x5314.valid){
continue;
}
CheckValue<IkReal> x5315 = IKatan2WithCheck(IkReal((cj9*r02)),IkReal((((cj9*r01*sj12))+(((-1.0)*cj12*cj9*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5315.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5314.value)))+(x5315.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5316=IKsin(j11);
IkReal x5317=IKcos(j11);
IkReal x5318=(cj12*x5316);
IkReal x5319=((1.0)*x5316);
IkReal x5320=(cj12*x5317);
IkReal x5321=((1.0)*sj12*x5317);
evalcond[0]=(((r00*x5318))+((r02*x5317))+(((-1.0)*r01*sj12*x5319)));
evalcond[1]=((((-1.0)*r21*x5321))+((r20*x5320))+(((-1.0)*r22*x5319)));
evalcond[2]=((((-1.0)*r12*x5319))+((r10*x5320))+(((-1.0)*r11*x5321)));
evalcond[3]=((1.0)+((r00*x5320))+(((-1.0)*r02*x5319))+(((-1.0)*r01*x5321)));
evalcond[4]=((((-1.0)*sj9))+((r22*x5317))+(((-1.0)*r21*sj12*x5319))+((r20*x5318)));
evalcond[5]=((((-1.0)*r11*sj12*x5319))+((r12*x5317))+((r10*x5318))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5322=((1.0)*sj12);
CheckValue<IkReal> x5323=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5322))+(((-1.0)*cj12*r11)))),-1);
if(!x5323.valid){
continue;
}
CheckValue<IkReal> x5324 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5322))+((cj12*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x5324.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5323.value)))+(x5324.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5325=IKsin(j11);
IkReal x5326=IKcos(j11);
IkReal x5327=(cj12*x5325);
IkReal x5328=((1.0)*x5325);
IkReal x5329=(cj12*x5326);
IkReal x5330=((1.0)*sj12*x5326);
evalcond[0]=((((-1.0)*r01*sj12*x5328))+((r00*x5327))+((r02*x5326)));
evalcond[1]=((((-1.0)*r21*x5330))+((r20*x5329))+(((-1.0)*r22*x5328)));
evalcond[2]=(((r10*x5329))+(((-1.0)*r12*x5328))+(((-1.0)*r11*x5330)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5328))+((r00*x5329))+(((-1.0)*r01*x5330)));
evalcond[4]=((((-1.0)*sj9))+((r20*x5327))+((r22*x5326))+(((-1.0)*r21*sj12*x5328)));
evalcond[5]=(((r12*x5326))+((r10*x5327))+(((-1.0)*r11*sj12*x5328))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x5331=((1.0)*cj12);
IkReal x5332=((((-1.0)*r21*x5331))+(((-1.0)*r20*sj12)));
j11eval[0]=x5332;
j11eval[1]=((IKabs((cj9*r02)))+(IKabs((((cj9*r01*sj12))+(((-1.0)*cj9*r00*x5331))))));
j11eval[2]=IKsign(x5332);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x5333=r01*r01;
IkReal x5334=cj12*cj12;
IkReal x5335=(r01*sj12);
IkReal x5336=(cj12*r00);
IkReal x5337=((((-1.0)*x5334*(r00*r00)))+(((-1.0)*x5333))+(((-1.0)*(r02*r02)))+(((2.0)*x5335*x5336))+((x5333*x5334)));
j11eval[0]=x5337;
j11eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x5336))+x5335))));
j11eval[2]=IKsign(x5337);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x5338=cj12*cj12;
IkReal x5339=(r11*r21);
IkReal x5340=(cj12*r20);
IkReal x5341=(r21*sj12);
IkReal x5342=((((-1.0)*x5339))+(((-1.0)*r10*r20*x5338))+(((-1.0)*r12*r22))+((r11*sj12*x5340))+((cj12*r10*x5341))+((x5338*x5339)));
j11eval[0]=x5342;
j11eval[1]=IKsign(x5342);
j11eval[2]=((IKabs((cj9*r22)))+(IKabs(((((-1.0)*cj9*x5341))+((cj9*x5340))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5343=cj12*cj12;
IkReal x5344=(cj12*r20);
IkReal x5345=(r11*r21);
IkReal x5346=(r21*sj12);
CheckValue<IkReal> x5347 = IKatan2WithCheck(IkReal(((((-1.0)*cj9*x5346))+((cj9*x5344)))),IkReal((cj9*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5347.valid){
continue;
}
CheckValue<IkReal> x5348=IKPowWithIntegerCheck(IKsign((((x5343*x5345))+(((-1.0)*r12*r22))+((r11*sj12*x5344))+((cj12*r10*x5346))+(((-1.0)*x5345))+(((-1.0)*r10*r20*x5343)))),-1);
if(!x5348.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5347.value)+(((1.5707963267949)*(x5348.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5349=IKsin(j11);
IkReal x5350=IKcos(j11);
IkReal x5351=(cj12*x5349);
IkReal x5352=((1.0)*x5349);
IkReal x5353=(cj12*x5350);
IkReal x5354=((1.0)*sj12*x5350);
evalcond[0]=((((-1.0)*r01*sj12*x5352))+((r00*x5351))+((r02*x5350)));
evalcond[1]=(((r10*x5351))+cj9+((r12*x5350))+(((-1.0)*r11*sj12*x5352)));
evalcond[2]=(((r20*x5353))+(((-1.0)*r21*x5354))+(((-1.0)*r22*x5352)));
evalcond[3]=(((r10*x5353))+(((-1.0)*r12*x5352))+(((-1.0)*r11*x5354)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x5352))+(((-1.0)*r01*x5354))+((r00*x5353)));
evalcond[5]=(((r20*x5351))+(((-1.0)*sj9))+((r22*x5350))+(((-1.0)*r21*sj12*x5352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5355=r01*r01;
IkReal x5356=cj12*cj12;
IkReal x5357=(r01*sj12);
IkReal x5358=(cj12*r00);
CheckValue<IkReal> x5359=IKPowWithIntegerCheck(IKsign(((((2.0)*x5357*x5358))+(((-1.0)*(r02*r02)))+((x5355*x5356))+(((-1.0)*x5355))+(((-1.0)*x5356*(r00*r00))))),-1);
if(!x5359.valid){
continue;
}
CheckValue<IkReal> x5360 = IKatan2WithCheck(IkReal(r02),IkReal((x5357+(((-1.0)*x5358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5360.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5359.value)))+(x5360.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5361=IKsin(j11);
IkReal x5362=IKcos(j11);
IkReal x5363=(cj12*x5361);
IkReal x5364=((1.0)*x5361);
IkReal x5365=(cj12*x5362);
IkReal x5366=((1.0)*sj12*x5362);
evalcond[0]=(((r02*x5362))+(((-1.0)*r01*sj12*x5364))+((r00*x5363)));
evalcond[1]=(((r12*x5362))+cj9+(((-1.0)*r11*sj12*x5364))+((r10*x5363)));
evalcond[2]=((((-1.0)*r22*x5364))+(((-1.0)*r21*x5366))+((r20*x5365)));
evalcond[3]=(((r10*x5365))+(((-1.0)*r11*x5366))+(((-1.0)*r12*x5364)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x5364))+(((-1.0)*r01*x5366))+((r00*x5365)));
evalcond[5]=(((r22*x5362))+(((-1.0)*sj9))+(((-1.0)*r21*sj12*x5364))+((r20*x5363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5367=((1.0)*cj12);
CheckValue<IkReal> x5368 = IKatan2WithCheck(IkReal((cj9*r02)),IkReal((((cj9*r01*sj12))+(((-1.0)*cj9*r00*x5367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5368.valid){
continue;
}
CheckValue<IkReal> x5369=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5367))+(((-1.0)*r20*sj12)))),-1);
if(!x5369.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5368.value)+(((1.5707963267949)*(x5369.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5370=IKsin(j11);
IkReal x5371=IKcos(j11);
IkReal x5372=(cj12*x5370);
IkReal x5373=((1.0)*x5370);
IkReal x5374=(cj12*x5371);
IkReal x5375=((1.0)*sj12*x5371);
evalcond[0]=(((r02*x5371))+(((-1.0)*r01*sj12*x5373))+((r00*x5372)));
evalcond[1]=((((-1.0)*r11*sj12*x5373))+cj9+((r12*x5371))+((r10*x5372)));
evalcond[2]=((((-1.0)*r22*x5373))+(((-1.0)*r21*x5375))+((r20*x5374)));
evalcond[3]=((((-1.0)*r12*x5373))+(((-1.0)*r11*x5375))+((r10*x5374)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x5375))+(((-1.0)*r02*x5373))+((r00*x5374)));
evalcond[5]=((((-1.0)*sj9))+(((-1.0)*r21*sj12*x5373))+((r22*x5371))+((r20*x5372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x5376=(((r10*sj12))+((cj12*r11)));
j11eval[0]=x5376;
j11eval[1]=((IKabs((((r01*sj12*sj9))+(((-1.0)*cj12*r00*sj9)))))+(IKabs((r02*sj9))));
j11eval[2]=IKsign(x5376);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x5377=r01*r01;
IkReal x5378=cj12*cj12;
IkReal x5379=(r01*sj12);
IkReal x5380=(cj12*r00);
IkReal x5381=((((2.0)*x5379*x5380))+(((-1.0)*(r02*r02)))+(((-1.0)*x5377))+(((-1.0)*x5378*(r00*r00)))+((x5377*x5378)));
j11eval[0]=x5381;
j11eval[1]=((IKabs(r02))+(IKabs((x5379+(((-1.0)*x5380))))));
j11eval[2]=IKsign(x5381);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x5382=cj12*cj12;
IkReal x5383=r21*r21;
IkReal x5384=(cj12*r20);
IkReal x5385=(r21*sj12);
IkReal x5386=(((x5382*x5383))+(((-1.0)*x5382*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*x5384*x5385))+(((-1.0)*x5383)));
j11eval[0]=x5386;
j11eval[1]=IKsign(x5386);
j11eval[2]=((IKabs(((((-1.0)*sj9*x5385))+((sj9*x5384)))))+(IKabs((r22*sj9))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5387=cj12*cj12;
IkReal x5388=r21*r21;
IkReal x5389=(cj12*r20);
IkReal x5390=(r21*sj12);
CheckValue<IkReal> x5391 = IKatan2WithCheck(IkReal((((sj9*x5389))+(((-1.0)*sj9*x5390)))),IkReal((r22*sj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x5391.valid){
continue;
}
CheckValue<IkReal> x5392=IKPowWithIntegerCheck(IKsign((((x5387*x5388))+(((-1.0)*(r22*r22)))+(((2.0)*x5389*x5390))+(((-1.0)*x5388))+(((-1.0)*x5387*(r20*r20))))),-1);
if(!x5392.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5391.value)+(((1.5707963267949)*(x5392.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5393=IKsin(j11);
IkReal x5394=IKcos(j11);
IkReal x5395=(cj12*x5393);
IkReal x5396=((1.0)*x5393);
IkReal x5397=(cj12*x5394);
IkReal x5398=((1.0)*sj12*x5394);
evalcond[0]=(((r02*x5394))+((r00*x5395))+(((-1.0)*r01*sj12*x5396)));
evalcond[1]=(((r22*x5394))+sj9+((r20*x5395))+(((-1.0)*r21*sj12*x5396)));
evalcond[2]=(((r20*x5397))+(((-1.0)*r21*x5398))+(((-1.0)*r22*x5396)));
evalcond[3]=(((r10*x5397))+(((-1.0)*r11*x5398))+(((-1.0)*r12*x5396)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x5396))+((r00*x5397))+(((-1.0)*r01*x5398)));
evalcond[5]=(((r10*x5395))+(((-1.0)*r11*sj12*x5396))+((r12*x5394))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5399=r01*r01;
IkReal x5400=cj12*cj12;
IkReal x5401=(r01*sj12);
IkReal x5402=(cj12*r00);
CheckValue<IkReal> x5403 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x5402))+x5401)),IKFAST_ATAN2_MAGTHRESH);
if(!x5403.valid){
continue;
}
CheckValue<IkReal> x5404=IKPowWithIntegerCheck(IKsign(((((2.0)*x5401*x5402))+(((-1.0)*x5400*(r00*r00)))+(((-1.0)*(r02*r02)))+((x5399*x5400))+(((-1.0)*x5399)))),-1);
if(!x5404.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5403.value)+(((1.5707963267949)*(x5404.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5405=IKsin(j11);
IkReal x5406=IKcos(j11);
IkReal x5407=(cj12*x5405);
IkReal x5408=((1.0)*x5405);
IkReal x5409=(cj12*x5406);
IkReal x5410=((1.0)*sj12*x5406);
evalcond[0]=(((r02*x5406))+(((-1.0)*r01*sj12*x5408))+((r00*x5407)));
evalcond[1]=(sj9+((r22*x5406))+((r20*x5407))+(((-1.0)*r21*sj12*x5408)));
evalcond[2]=((((-1.0)*r21*x5410))+((r20*x5409))+(((-1.0)*r22*x5408)));
evalcond[3]=(((r10*x5409))+(((-1.0)*r12*x5408))+(((-1.0)*r11*x5410)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x5408))+((r00*x5409))+(((-1.0)*r01*x5410)));
evalcond[5]=(((r12*x5406))+((r10*x5407))+(((-1.0)*r11*sj12*x5408))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x5411 = IKatan2WithCheck(IkReal((r02*sj9)),IkReal((((r01*sj12*sj9))+(((-1.0)*cj12*r00*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5411.valid){
continue;
}
CheckValue<IkReal> x5412=IKPowWithIntegerCheck(IKsign((((r10*sj12))+((cj12*r11)))),-1);
if(!x5412.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5411.value)+(((1.5707963267949)*(x5412.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5413=IKsin(j11);
IkReal x5414=IKcos(j11);
IkReal x5415=(cj12*x5413);
IkReal x5416=((1.0)*x5413);
IkReal x5417=(cj12*x5414);
IkReal x5418=((1.0)*sj12*x5414);
evalcond[0]=((((-1.0)*r01*sj12*x5416))+((r02*x5414))+((r00*x5415)));
evalcond[1]=(sj9+((r22*x5414))+(((-1.0)*r21*sj12*x5416))+((r20*x5415)));
evalcond[2]=((((-1.0)*r21*x5418))+((r20*x5417))+(((-1.0)*r22*x5416)));
evalcond[3]=(((r10*x5417))+(((-1.0)*r11*x5418))+(((-1.0)*r12*x5416)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x5416))+((r00*x5417))+(((-1.0)*r01*x5418)));
evalcond[5]=(((r10*x5415))+(((-1.0)*r11*sj12*x5416))+((r12*x5414))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x5419=(((r10*sj12))+((cj12*r11)));
j11eval[0]=x5419;
j11eval[1]=((IKabs((((r01*sj12*sj9))+(((-1.0)*cj12*r00*sj9)))))+(IKabs((r02*sj9))));
j11eval[2]=IKsign(x5419);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x5420=((1.0)*cj12);
IkReal x5421=((((-1.0)*r20*sj12))+(((-1.0)*r21*x5420)));
j11eval[0]=x5421;
j11eval[1]=((IKabs((cj9*r02)))+(IKabs((((cj9*r01*sj12))+(((-1.0)*cj9*r00*x5420))))));
j11eval[2]=IKsign(x5421);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x5422=((1.0)*sj9);
IkReal x5423=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x5423;
j11eval[1]=((IKabs((((cj9*r22))+(((-1.0)*r12*x5422)))))+(IKabs((((cj12*r10*sj9))+(((-1.0)*cj12*cj9*r20))+(((-1.0)*r11*sj12*x5422))+((cj9*r21*sj12))))));
j11eval[2]=IKsign(x5423);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5424=((1.0)*sj9);
CheckValue<IkReal> x5425 = IKatan2WithCheck(IkReal((((cj9*r22))+(((-1.0)*r12*x5424)))),IkReal((((cj12*r10*sj9))+(((-1.0)*cj12*cj9*r20))+(((-1.0)*r11*sj12*x5424))+((cj9*r21*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5425.valid){
continue;
}
CheckValue<IkReal> x5426=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x5426.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5425.value)+(((1.5707963267949)*(x5426.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5427=IKsin(j11);
IkReal x5428=IKcos(j11);
IkReal x5429=(cj12*x5427);
IkReal x5430=((1.0)*x5427);
IkReal x5431=(cj12*x5428);
IkReal x5432=((1.0)*sj12*x5428);
evalcond[0]=(((r00*x5429))+(((-1.0)*r01*sj12*x5430))+((r02*x5428)));
evalcond[1]=(sj9+((r22*x5428))+(((-1.0)*r21*sj12*x5430))+((r20*x5429)));
evalcond[2]=(((r12*x5428))+((r10*x5429))+cj9+(((-1.0)*r11*sj12*x5430)));
evalcond[3]=((((-1.0)*r21*x5432))+((r20*x5431))+(((-1.0)*r22*x5430)));
evalcond[4]=(((r10*x5431))+(((-1.0)*r11*x5432))+(((-1.0)*r12*x5430)));
evalcond[5]=((1.0)+(((-1.0)*r01*x5432))+(((-1.0)*r02*x5430))+((r00*x5431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5433=((1.0)*cj12);
CheckValue<IkReal> x5434 = IKatan2WithCheck(IkReal((cj9*r02)),IkReal((((cj9*r01*sj12))+(((-1.0)*cj9*r00*x5433)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5434.valid){
continue;
}
CheckValue<IkReal> x5435=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5433))+(((-1.0)*r20*sj12)))),-1);
if(!x5435.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5434.value)+(((1.5707963267949)*(x5435.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5436=IKsin(j11);
IkReal x5437=IKcos(j11);
IkReal x5438=(cj12*x5436);
IkReal x5439=((1.0)*x5436);
IkReal x5440=(cj12*x5437);
IkReal x5441=((1.0)*sj12*x5437);
evalcond[0]=(((r02*x5437))+(((-1.0)*r01*sj12*x5439))+((r00*x5438)));
evalcond[1]=(sj9+((r22*x5437))+((r20*x5438))+(((-1.0)*r21*sj12*x5439)));
evalcond[2]=(cj9+((r10*x5438))+(((-1.0)*r11*sj12*x5439))+((r12*x5437)));
evalcond[3]=(((r20*x5440))+(((-1.0)*r22*x5439))+(((-1.0)*r21*x5441)));
evalcond[4]=(((r10*x5440))+(((-1.0)*r11*x5441))+(((-1.0)*r12*x5439)));
evalcond[5]=((1.0)+(((-1.0)*r02*x5439))+((r00*x5440))+(((-1.0)*r01*x5441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x5442 = IKatan2WithCheck(IkReal((r02*sj9)),IkReal((((r01*sj12*sj9))+(((-1.0)*cj12*r00*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5442.valid){
continue;
}
CheckValue<IkReal> x5443=IKPowWithIntegerCheck(IKsign((((r10*sj12))+((cj12*r11)))),-1);
if(!x5443.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5442.value)+(((1.5707963267949)*(x5443.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5444=IKsin(j11);
IkReal x5445=IKcos(j11);
IkReal x5446=(cj12*x5444);
IkReal x5447=((1.0)*x5444);
IkReal x5448=(cj12*x5445);
IkReal x5449=((1.0)*sj12*x5445);
evalcond[0]=((((-1.0)*r01*sj12*x5447))+((r00*x5446))+((r02*x5445)));
evalcond[1]=(sj9+((r20*x5446))+(((-1.0)*r21*sj12*x5447))+((r22*x5445)));
evalcond[2]=(cj9+((r10*x5446))+((r12*x5445))+(((-1.0)*r11*sj12*x5447)));
evalcond[3]=(((r20*x5448))+(((-1.0)*r22*x5447))+(((-1.0)*r21*x5449)));
evalcond[4]=(((r10*x5448))+(((-1.0)*r11*x5449))+(((-1.0)*r12*x5447)));
evalcond[5]=((1.0)+((r00*x5448))+(((-1.0)*r01*x5449))+(((-1.0)*r02*x5447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5450=cj12*cj12;
IkReal x5451=r21*r21;
IkReal x5452=(cj12*r20);
IkReal x5453=(r21*sj12);
IkReal x5454=(sj8*sj9);
CheckValue<IkReal> x5455=IKPowWithIntegerCheck(IKsign((x5451+(r22*r22)+(((-2.0)*x5452*x5453))+(((-1.0)*x5450*x5451))+((x5450*(r20*r20))))),-1);
if(!x5455.valid){
continue;
}
CheckValue<IkReal> x5456 = IKatan2WithCheck(IkReal((((cj8*r22))+(((-1.0)*x5453*x5454))+((x5452*x5454)))),IkReal((((r22*x5454))+(((-1.0)*cj8*x5452))+((cj8*x5453)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5456.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5455.value)))+(x5456.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5457=IKcos(j11);
IkReal x5458=IKsin(j11);
IkReal x5459=(cj8*sj9);
IkReal x5460=(cj12*r20);
IkReal x5461=(cj12*x5457);
IkReal x5462=((1.0)*x5458);
IkReal x5463=(cj12*x5458);
IkReal x5464=((1.0)*sj12*x5457);
evalcond[0]=(cj8+(((-1.0)*r21*x5464))+((x5457*x5460))+(((-1.0)*r22*x5462)));
evalcond[1]=((((-1.0)*sj8*sj9))+((x5458*x5460))+(((-1.0)*r21*sj12*x5462))+((r22*x5457)));
evalcond[2]=((((-1.0)*r01*x5464))+(((-1.0)*r02*x5462))+((cj7*sj8))+((r00*x5461)));
evalcond[3]=((((-1.0)*r12*x5462))+(((-1.0)*r11*x5464))+((sj7*sj8))+((r10*x5461)));
evalcond[4]=(((cj7*x5459))+((cj9*sj7))+((r02*x5457))+(((-1.0)*r01*sj12*x5462))+((r00*x5463)));
evalcond[5]=(((r12*x5457))+(((-1.0)*cj7*cj9))+(((-1.0)*r11*sj12*x5462))+((sj7*x5459))+((r10*x5463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5465=(cj7*sj8);
IkReal x5466=((1.0)*sj12);
IkReal x5467=((1.0)*cj12);
CheckValue<IkReal> x5468=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5466))+(((-1.0)*r11*x5467)))),-1);
if(!x5468.valid){
continue;
}
CheckValue<IkReal> x5469 = IKatan2WithCheck(IkReal((((cj12*r20*x5465))+(((-1.0)*r21*x5465*x5466))+(((-1.0)*cj8*r00*x5467))+((cj8*r01*sj12)))),IkReal((((r22*x5465))+(((-1.0)*cj8*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5469.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5468.value)))+(x5469.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5470=IKcos(j11);
IkReal x5471=IKsin(j11);
IkReal x5472=(cj8*sj9);
IkReal x5473=(cj12*r20);
IkReal x5474=(cj12*x5470);
IkReal x5475=((1.0)*x5471);
IkReal x5476=(cj12*x5471);
IkReal x5477=((1.0)*sj12*x5470);
evalcond[0]=(cj8+((x5470*x5473))+(((-1.0)*r22*x5475))+(((-1.0)*r21*x5477)));
evalcond[1]=((((-1.0)*sj8*sj9))+((x5471*x5473))+(((-1.0)*r21*sj12*x5475))+((r22*x5470)));
evalcond[2]=((((-1.0)*r01*x5477))+((r00*x5474))+(((-1.0)*r02*x5475))+((cj7*sj8)));
evalcond[3]=(((r10*x5474))+(((-1.0)*r11*x5477))+(((-1.0)*r12*x5475))+((sj7*sj8)));
evalcond[4]=((((-1.0)*r01*sj12*x5475))+((cj9*sj7))+((r00*x5476))+((cj7*x5472))+((r02*x5470)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r10*x5476))+((sj7*x5472))+((r12*x5470))+(((-1.0)*r11*sj12*x5475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5478=((1.0)*cj8);
IkReal x5479=(sj7*sj8);
CheckValue<IkReal> x5480 = IKatan2WithCheck(IkReal((((cj12*r20*x5479))+(((-1.0)*r21*sj12*x5479))+(((-1.0)*cj12*r10*x5478))+((cj8*r11*sj12)))),IkReal(((((-1.0)*r12*x5478))+((r22*x5479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5480.valid){
continue;
}
CheckValue<IkReal> x5481=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x5481.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5480.value)+(((1.5707963267949)*(x5481.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5482=IKcos(j11);
IkReal x5483=IKsin(j11);
IkReal x5484=(cj8*sj9);
IkReal x5485=(cj12*r20);
IkReal x5486=(cj12*x5482);
IkReal x5487=((1.0)*x5483);
IkReal x5488=(cj12*x5483);
IkReal x5489=((1.0)*sj12*x5482);
evalcond[0]=((((-1.0)*r21*x5489))+cj8+((x5482*x5485))+(((-1.0)*r22*x5487)));
evalcond[1]=((((-1.0)*sj8*sj9))+((x5483*x5485))+(((-1.0)*r21*sj12*x5487))+((r22*x5482)));
evalcond[2]=(((r00*x5486))+(((-1.0)*r01*x5489))+((cj7*sj8))+(((-1.0)*r02*x5487)));
evalcond[3]=((((-1.0)*r12*x5487))+(((-1.0)*r11*x5489))+((r10*x5486))+((sj7*sj8)));
evalcond[4]=(((cj7*x5484))+((r00*x5488))+((cj9*sj7))+(((-1.0)*r01*sj12*x5487))+((r02*x5482)));
evalcond[5]=((((-1.0)*cj7*cj9))+(((-1.0)*r11*sj12*x5487))+((r12*x5482))+((sj7*x5484))+((r10*x5488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x5490=cj9*cj9;
IkReal x5491=((1.0)*sj9);
IkReal x5492=(cj12*r11);
IkReal x5493=(r10*sj12);
IkReal x5494=(r00*sj12);
IkReal x5495=(cj12*r01);
IkReal x5496=((1.0)*cj8*cj9);
CheckValue<IkReal> x5497 = IKatan2WithCheck(IkReal((((sj9*x5495))+((sj9*x5494))+(((-1.0)*x5493*x5496))+(((-1.0)*x5492*x5496)))),IkReal(((((-1.0)*x5495*x5496))+(((-1.0)*x5494*x5496))+(((-1.0)*x5491*x5492))+(((-1.0)*x5491*x5493)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5497.valid){
continue;
}
CheckValue<IkReal> x5498=IKPowWithIntegerCheck(IKsign(((1.0)+((x5490*(cj8*cj8)))+(((-1.0)*x5490)))),-1);
if(!x5498.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x5497.value)+(((1.5707963267949)*(x5498.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x5499=IKcos(j7);
IkReal x5500=IKsin(j7);
IkReal x5501=(r10*sj12);
IkReal x5502=((0.42)*sj8);
IkReal x5503=(cj12*r01);
IkReal x5504=(cj8*cj9);
IkReal x5505=(cj12*r11);
IkReal x5506=(r00*sj12);
IkReal x5507=((0.00043624)*x5499);
IkReal x5508=((0.00043624)*x5500);
evalcond[0]=(x5505+x5501+((sj9*x5499))+((x5500*x5504)));
evalcond[1]=(x5506+x5503+(((-1.0)*sj9*x5500))+((x5499*x5504)));
evalcond[2]=((((-1.0)*sj9*x5508))+(((-1.0)*px))+((x5499*x5502))+(((-1.0)*x5507))+(((-0.4)*x5503))+(((-0.4)*x5506))+((x5504*x5507)));
evalcond[3]=(((sj9*x5507))+(((-1.0)*py))+((x5500*x5502))+(((-1.0)*x5508))+(((-0.4)*x5501))+(((-0.4)*x5505))+((x5504*x5508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5509=((1.0)*cj8);
IkReal x5510=(sj7*sj8);
IkReal x5511=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x5511;
j11eval[1]=((IKabs(((((-1.0)*r12*x5509))+((r22*x5510)))))+(IKabs((((cj12*r20*x5510))+(((-1.0)*r21*sj12*x5510))+(((-1.0)*cj12*r10*x5509))+((cj8*r11*sj12))))));
j11eval[2]=IKsign(x5511);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5512=(cj7*sj8);
IkReal x5513=((1.0)*sj12);
IkReal x5514=((1.0)*cj12);
IkReal x5515=((((-1.0)*r10*x5513))+(((-1.0)*r11*x5514)));
j11eval[0]=x5515;
j11eval[1]=IKsign(x5515);
j11eval[2]=((IKabs(((((-1.0)*cj8*r00*x5514))+((cj12*r20*x5512))+(((-1.0)*r21*x5512*x5513))+((cj8*r01*sj12)))))+(IKabs((((r22*x5512))+(((-1.0)*cj8*r02))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5516=cj12*cj12;
IkReal x5517=r21*r21;
IkReal x5518=(cj12*r20);
IkReal x5519=(r21*sj12);
IkReal x5520=(sj8*sj9);
IkReal x5521=(x5517+(r22*r22)+(((-2.0)*x5518*x5519))+((x5516*(r20*r20)))+(((-1.0)*x5516*x5517)));
j11eval[0]=x5521;
j11eval[1]=IKsign(x5521);
j11eval[2]=((IKabs((((cj8*r22))+((x5518*x5520))+(((-1.0)*x5519*x5520)))))+(IKabs(((((-1.0)*cj8*x5518))+((r22*x5520))+((cj8*x5519))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5522=((-1.0)*r10);
IkReal x5524 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5524)==0){
continue;
}
IkReal x5523=pow(x5524,-0.5);
CheckValue<IkReal> x5525 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5522),IKFAST_ATAN2_MAGTHRESH);
if(!x5525.valid){
continue;
}
IkReal gconst42=((-1.0)*(x5525.value));
IkReal gconst43=(r11*x5523);
IkReal gconst44=(x5522*x5523);
CheckValue<IkReal> x5526 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5526.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j12+(x5526.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5527=((1.0)*cj8);
IkReal x5528=(sj7*sj8);
CheckValue<IkReal> x5529 = IKatan2WithCheck(IkReal((((gconst44*r20*x5528))+(((-1.0)*gconst43*r21*x5528))+((cj8*gconst43*r11))+(((-1.0)*gconst44*r10*x5527)))),IkReal((((r22*x5528))+(((-1.0)*r12*x5527)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5529.valid){
continue;
}
CheckValue<IkReal> x5530=IKPowWithIntegerCheck(IKsign((((gconst43*r00))+((gconst44*r01)))),-1);
if(!x5530.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5529.value)+(((1.5707963267949)*(x5530.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5531=IKcos(j11);
IkReal x5532=IKsin(j11);
IkReal x5533=(cj8*sj9);
IkReal x5534=(gconst44*x5532);
IkReal x5535=(gconst44*x5531);
IkReal x5536=((1.0)*x5532);
IkReal x5537=(gconst43*x5536);
IkReal x5538=((1.0)*gconst43*x5531);
evalcond[0]=((((-1.0)*r22*x5536))+cj8+(((-1.0)*r21*x5538))+((r20*x5535)));
evalcond[1]=((((-1.0)*sj8*sj9))+((r22*x5531))+(((-1.0)*r21*x5537))+((r20*x5534)));
evalcond[2]=((((-1.0)*r02*x5536))+((r00*x5535))+((cj7*sj8))+(((-1.0)*r01*x5538)));
evalcond[3]=(((sj7*sj8))+((r10*x5535))+(((-1.0)*r11*x5538))+(((-1.0)*r12*x5536)));
evalcond[4]=(((cj9*sj7))+((r00*x5534))+((cj7*x5533))+(((-1.0)*r01*x5537))+((r02*x5531)));
evalcond[5]=((((-1.0)*cj7*cj9))+((sj7*x5533))+((r10*x5534))+((r12*x5531))+(((-1.0)*r11*x5537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5539=((-1.0)*r11);
IkReal x5541 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5541)==0){
continue;
}
IkReal x5540=pow(x5541,-0.5);
CheckValue<IkReal> x5542 = IKatan2WithCheck(IkReal(x5539),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5542.valid){
continue;
}
IkReal gconst45=((3.14159265358979)+(((-1.0)*(x5542.value))));
IkReal gconst46=(x5539*x5540);
IkReal gconst47=((1.0)*r10*x5540);
CheckValue<IkReal> x5543 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5543.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12+(x5543.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5544=(sj7*sj8);
IkReal x5545=((1.0)*cj8);
CheckValue<IkReal> x5546 = IKatan2WithCheck(IkReal(((((-1.0)*gconst47*r10*x5545))+((cj8*gconst46*r11))+(((-1.0)*gconst46*r21*x5544))+((gconst47*r20*x5544)))),IkReal(((((-1.0)*r12*x5545))+((r22*x5544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5546.valid){
continue;
}
CheckValue<IkReal> x5547=IKPowWithIntegerCheck(IKsign((((gconst47*r01))+((gconst46*r00)))),-1);
if(!x5547.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5546.value)+(((1.5707963267949)*(x5547.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5548=IKcos(j11);
IkReal x5549=IKsin(j11);
IkReal x5550=(cj8*sj9);
IkReal x5551=(gconst46*r01);
IkReal x5552=(gconst46*r21);
IkReal x5553=(gconst46*r11);
IkReal x5554=(gconst47*x5549);
IkReal x5555=((1.0)*x5549);
IkReal x5556=((1.0)*x5548);
IkReal x5557=(gconst47*x5548);
evalcond[0]=(cj8+(((-1.0)*x5552*x5556))+((r20*x5557))+(((-1.0)*r22*x5555)));
evalcond[1]=((((-1.0)*sj8*sj9))+(((-1.0)*x5552*x5555))+((r20*x5554))+((r22*x5548)));
evalcond[2]=(((r00*x5557))+(((-1.0)*x5551*x5556))+(((-1.0)*r02*x5555))+((cj7*sj8)));
evalcond[3]=((((-1.0)*x5553*x5556))+(((-1.0)*r12*x5555))+((r10*x5557))+((sj7*sj8)));
evalcond[4]=(((r00*x5554))+(((-1.0)*x5551*x5555))+((cj7*x5550))+((cj9*sj7))+((r02*x5548)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r12*x5548))+(((-1.0)*x5553*x5555))+((r10*x5554))+((sj7*x5550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5559 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5559)==0){
continue;
}
IkReal x5558=pow(x5559,-0.5);
CheckValue<IkReal> x5560 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5560.valid){
continue;
}
IkReal gconst48=((-1.0)*(x5560.value));
IkReal gconst49=((-1.0)*r01*x5558);
IkReal gconst50=(r00*x5558);
CheckValue<IkReal> x5561 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5561.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5561.value)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5562=(cj7*sj8);
IkReal x5563=((1.0)*gconst49);
IkReal x5564=((1.0)*gconst50);
CheckValue<IkReal> x5565=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5564))+(((-1.0)*r10*x5563)))),-1);
if(!x5565.valid){
continue;
}
CheckValue<IkReal> x5566 = IKatan2WithCheck(IkReal(((((-1.0)*cj8*r00*x5564))+((cj8*gconst49*r01))+((gconst50*r20*x5562))+(((-1.0)*r21*x5562*x5563)))),IkReal((((r22*x5562))+(((-1.0)*cj8*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5566.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5565.value)))+(x5566.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5567=IKcos(j11);
IkReal x5568=IKsin(j11);
IkReal x5569=(cj8*sj9);
IkReal x5570=(gconst50*r00);
IkReal x5571=((1.0)*x5568);
IkReal x5572=(gconst50*x5567);
IkReal x5573=(gconst50*x5568);
IkReal x5574=((1.0)*gconst49*x5567);
evalcond[0]=(cj8+(((-1.0)*r21*x5574))+(((-1.0)*r22*x5571))+((r20*x5572)));
evalcond[1]=((((-1.0)*sj8*sj9))+(((-1.0)*gconst49*r21*x5571))+((r22*x5567))+((r20*x5573)));
evalcond[2]=((((-1.0)*r01*x5574))+(((-1.0)*r02*x5571))+((x5567*x5570))+((cj7*sj8)));
evalcond[3]=((((-1.0)*r11*x5574))+((r10*x5572))+(((-1.0)*r12*x5571))+((sj7*sj8)));
evalcond[4]=(((cj7*x5569))+((r02*x5567))+((cj9*sj7))+(((-1.0)*gconst49*r01*x5571))+((x5568*x5570)));
evalcond[5]=((((-1.0)*cj7*cj9))+((sj7*x5569))+((r10*x5573))+(((-1.0)*gconst49*r11*x5571))+((r12*x5567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5576 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5576)==0){
continue;
}
IkReal x5575=pow(x5576,-0.5);
CheckValue<IkReal> x5577 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5577.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x5577.value))));
IkReal gconst52=((1.0)*r01*x5575);
IkReal gconst53=((-1.0)*r00*x5575);
CheckValue<IkReal> x5578 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5578.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5578.value)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
CheckValue<IkReal> x5581 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5581.valid){
continue;
}
IkReal x5579=((1.0)*(x5581.value));
IkReal x5580=x5575;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj12=gconst52;
cj12=gconst53;
j12=((3.14159265)+(((-1.0)*x5579)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x5579)));
IkReal gconst52=((1.0)*r01*x5580);
IkReal gconst53=((-1.0)*r00*x5580);
IkReal x5582=r02*r02;
IkReal x5583=(cj8*r12);
IkReal x5584=(r22*sj7*sj8);
CheckValue<IkReal> x5588=IKPowWithIntegerCheck(((-1.0)+x5582),-1);
if(!x5588.valid){
continue;
}
IkReal x5585=x5588.value;
if((((1.0)+(((-1.0)*x5582)))) < -0.00001)
continue;
IkReal x5586=IKsqrt(((1.0)+(((-1.0)*x5582))));
IkReal x5587=(r02*x5585*x5586);
j11eval[0]=0;
j11eval[1]=((IKabs((x5584+(((-1.0)*x5583)))))+(IKabs(((((-1.0)*x5584*x5587))+((x5583*x5587))))));
j11eval[2]=0;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5589=(cj7*sj8);
IkReal x5590=((1.0)*gconst52);
IkReal x5591=((1.0)*gconst53);
CheckValue<IkReal> x5592=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5591))+(((-1.0)*r10*x5590)))),-1);
if(!x5592.valid){
continue;
}
CheckValue<IkReal> x5593 = IKatan2WithCheck(IkReal(((((-1.0)*cj8*r00*x5591))+((gconst53*r20*x5589))+((cj8*gconst52*r01))+(((-1.0)*r21*x5589*x5590)))),IkReal(((((-1.0)*cj8*r02))+((r22*x5589)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5593.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5592.value)))+(x5593.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5594=IKcos(j11);
IkReal x5595=IKsin(j11);
IkReal x5596=((1.0)*gconst52);
IkReal x5597=(gconst53*r00);
IkReal x5598=(cj8*sj9);
IkReal x5599=((1.0)*x5595);
IkReal x5600=(gconst53*x5594);
IkReal x5601=(gconst53*x5595);
evalcond[0]=(cj8+((r20*x5600))+(((-1.0)*r21*x5594*x5596))+(((-1.0)*r22*x5599)));
evalcond[1]=((((-1.0)*sj8*sj9))+((r20*x5601))+((r22*x5594))+(((-1.0)*r21*x5595*x5596)));
evalcond[2]=((((-1.0)*r02*x5599))+((cj7*sj8))+(((-1.0)*r01*x5594*x5596))+((x5594*x5597)));
evalcond[3]=((((-1.0)*r12*x5599))+((sj7*sj8))+(((-1.0)*r11*x5594*x5596))+((r10*x5600)));
evalcond[4]=(((x5595*x5597))+((cj7*x5598))+(((-1.0)*r01*x5595*x5596))+((cj9*sj7))+((r02*x5594)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r12*x5594))+(((-1.0)*r11*x5595*x5596))+((sj7*x5598))+((r10*x5601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5602=((1.0)*cj8);
IkReal x5603=(sj7*sj8);
CheckValue<IkReal> x5604=IKPowWithIntegerCheck(IKsign((((gconst53*r01))+((gconst52*r00)))),-1);
if(!x5604.valid){
continue;
}
CheckValue<IkReal> x5605 = IKatan2WithCheck(IkReal((((cj8*gconst52*r11))+(((-1.0)*gconst52*r21*x5603))+(((-1.0)*gconst53*r10*x5602))+((gconst53*r20*x5603)))),IkReal(((((-1.0)*r12*x5602))+((r22*x5603)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5605.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5604.value)))+(x5605.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5606=IKcos(j11);
IkReal x5607=IKsin(j11);
IkReal x5608=((1.0)*gconst52);
IkReal x5609=(gconst53*r00);
IkReal x5610=(cj8*sj9);
IkReal x5611=((1.0)*x5607);
IkReal x5612=(gconst53*x5606);
IkReal x5613=(gconst53*x5607);
evalcond[0]=(cj8+(((-1.0)*r22*x5611))+((r20*x5612))+(((-1.0)*r21*x5606*x5608)));
evalcond[1]=((((-1.0)*sj8*sj9))+((r20*x5613))+(((-1.0)*r21*x5607*x5608))+((r22*x5606)));
evalcond[2]=((((-1.0)*r01*x5606*x5608))+(((-1.0)*r02*x5611))+((cj7*sj8))+((x5606*x5609)));
evalcond[3]=((((-1.0)*r12*x5611))+(((-1.0)*r11*x5606*x5608))+((sj7*sj8))+((r10*x5612)));
evalcond[4]=(((cj7*x5610))+((r02*x5606))+((x5607*x5609))+(((-1.0)*r01*x5607*x5608))+((cj9*sj7)));
evalcond[5]=((((-1.0)*cj7*cj9))+((sj7*x5610))+((r12*x5606))+(((-1.0)*r11*x5607*x5608))+((r10*x5613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x5614=((-1.0)*px);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5614);
rxp1_1=(px*r21);
rxp1_2=(r11*x5614);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=r02;
j11eval[1]=IKsign(r02);
j11eval[2]=((IKabs(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9)))))+(IKabs((cj7*sj8))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x5615=((-1.0)*px);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5615);
rxp1_1=(px*r21);
rxp1_2=(r11*x5615);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=r02;
j11eval[1]=((((-1.0)*r21*sj12))+((cj12*r20)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x5616=((-1.0)*px);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5616);
rxp1_1=(px*r21);
rxp1_2=(r11*x5616);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=r02;
j11eval[1]=((((-1.0)*r11*sj12))+((cj12*r10)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x5617=IKPowWithIntegerCheck(r02,-1);
if(!x5617.valid){
continue;
}
CheckValue<IkReal> x5618=IKPowWithIntegerCheck(((((-1.0)*r11*sj12))+((cj12*r10))),-1);
if(!x5618.valid){
continue;
}
if( IKabs((cj7*sj8*(x5617.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj7*sj8*(x5618.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj7*sj8*(x5617.value)))+IKsqr(((-1.0)*sj7*sj8*(x5618.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((cj7*sj8*(x5617.value)), ((-1.0)*sj7*sj8*(x5618.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5619=IKcos(j11);
IkReal x5620=IKsin(j11);
IkReal x5621=(cj8*sj9);
IkReal x5622=(cj12*x5620);
IkReal x5623=(cj12*x5619);
IkReal x5624=((1.0)*x5620);
IkReal x5625=((1.0)*sj12*x5619);
evalcond[0]=((((-1.0)*r02*x5624))+((cj7*sj8)));
evalcond[1]=(((r02*x5619))+((cj7*x5621))+((cj9*sj7)));
evalcond[2]=(cj8+((r20*x5623))+(((-1.0)*r21*x5625)));
evalcond[3]=((((-1.0)*r11*x5625))+((sj7*sj8))+((r10*x5623)));
evalcond[4]=((((-1.0)*sj8*sj9))+((r20*x5622))+(((-1.0)*r21*sj12*x5624)));
evalcond[5]=((((-1.0)*cj7*cj9))+((sj7*x5621))+(((-1.0)*r11*sj12*x5624))+((r10*x5622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x5626=IKPowWithIntegerCheck(r02,-1);
if(!x5626.valid){
continue;
}
CheckValue<IkReal> x5627=IKPowWithIntegerCheck(((((-1.0)*r21*sj12))+((cj12*r20))),-1);
if(!x5627.valid){
continue;
}
if( IKabs((cj7*sj8*(x5626.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj8*(x5627.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj7*sj8*(x5626.value)))+IKsqr(((-1.0)*cj8*(x5627.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((cj7*sj8*(x5626.value)), ((-1.0)*cj8*(x5627.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5628=IKcos(j11);
IkReal x5629=IKsin(j11);
IkReal x5630=(cj8*sj9);
IkReal x5631=(cj12*x5629);
IkReal x5632=(cj12*x5628);
IkReal x5633=((1.0)*x5629);
IkReal x5634=((1.0)*sj12*x5628);
evalcond[0]=((((-1.0)*r02*x5633))+((cj7*sj8)));
evalcond[1]=(((r02*x5628))+((cj9*sj7))+((cj7*x5630)));
evalcond[2]=(cj8+(((-1.0)*r21*x5634))+((r20*x5632)));
evalcond[3]=((((-1.0)*r11*x5634))+((r10*x5632))+((sj7*sj8)));
evalcond[4]=((((-1.0)*sj8*sj9))+(((-1.0)*r21*sj12*x5633))+((r20*x5631)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r10*x5631))+((sj7*x5630))+(((-1.0)*r11*sj12*x5633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x5635=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x5635.valid){
continue;
}
CheckValue<IkReal> x5636 = IKatan2WithCheck(IkReal((cj7*sj8)),IkReal(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5636.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5635.value)))+(x5636.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5637=IKcos(j11);
IkReal x5638=IKsin(j11);
IkReal x5639=(cj8*sj9);
IkReal x5640=(cj12*x5638);
IkReal x5641=(cj12*x5637);
IkReal x5642=((1.0)*x5638);
IkReal x5643=((1.0)*sj12*x5637);
evalcond[0]=((((-1.0)*r02*x5642))+((cj7*sj8)));
evalcond[1]=(((cj9*sj7))+((cj7*x5639))+((r02*x5637)));
evalcond[2]=(cj8+(((-1.0)*r21*x5643))+((r20*x5641)));
evalcond[3]=((((-1.0)*r11*x5643))+((sj7*sj8))+((r10*x5641)));
evalcond[4]=((((-1.0)*sj8*sj9))+(((-1.0)*r21*sj12*x5642))+((r20*x5640)));
evalcond[5]=((((-1.0)*cj7*cj9))+((sj7*x5639))+(((-1.0)*r11*sj12*x5642))+((r10*x5640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x5644=((1.0)*sj12);
IkReal x5645=((((-1.0)*r10*x5644))+(((-1.0)*cj12*r11)));
j11eval[0]=x5645;
j11eval[1]=IKsign(x5645);
j11eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x5644))+((cj12*r20))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x5646=(((r20*sj12))+((cj12*r21)));
j11eval[0]=x5646;
j11eval[1]=IKsign(x5646);
j11eval[2]=((IKabs((cj9*r02)))+(IKabs((((cj9*r01*sj12))+(((-1.0)*cj12*cj9*r00))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x5647=((1.0)*cj12);
IkReal x5648=((((-1.0)*r11*x5647))+(((-1.0)*r10*sj12)));
j11eval[0]=x5648;
j11eval[1]=IKsign(x5648);
j11eval[2]=((IKabs((((r01*sj12*sj9))+(((-1.0)*r00*sj9*x5647)))))+(IKabs((r02*sj9))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5649=((1.0)*cj12);
CheckValue<IkReal> x5650 = IKatan2WithCheck(IkReal((r02*sj9)),IkReal((((r01*sj12*sj9))+(((-1.0)*r00*sj9*x5649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5650.valid){
continue;
}
CheckValue<IkReal> x5651=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5649))+(((-1.0)*r10*sj12)))),-1);
if(!x5651.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5650.value)+(((1.5707963267949)*(x5651.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5652=IKsin(j11);
IkReal x5653=IKcos(j11);
IkReal x5654=(cj12*x5652);
IkReal x5655=((1.0)*x5652);
IkReal x5656=(cj12*x5653);
IkReal x5657=((1.0)*sj12*x5653);
evalcond[0]=(((r00*x5654))+(((-1.0)*r01*sj12*x5655))+((r02*x5653)));
evalcond[1]=(((r20*x5656))+(((-1.0)*r22*x5655))+(((-1.0)*r21*x5657)));
evalcond[2]=((((-1.0)*r12*x5655))+(((-1.0)*r11*x5657))+((r10*x5656)));
evalcond[3]=((1.0)+((r00*x5656))+(((-1.0)*r02*x5655))+(((-1.0)*r01*x5657)));
evalcond[4]=((((-1.0)*r21*sj12*x5655))+((r20*x5654))+(((-1.0)*sj9))+((r22*x5653)));
evalcond[5]=(((r12*x5653))+(((-1.0)*r11*sj12*x5655))+((r10*x5654))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x5658=IKPowWithIntegerCheck(IKsign((((r20*sj12))+((cj12*r21)))),-1);
if(!x5658.valid){
continue;
}
CheckValue<IkReal> x5659 = IKatan2WithCheck(IkReal((cj9*r02)),IkReal((((cj9*r01*sj12))+(((-1.0)*cj12*cj9*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5659.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5658.value)))+(x5659.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5660=IKsin(j11);
IkReal x5661=IKcos(j11);
IkReal x5662=(cj12*x5660);
IkReal x5663=((1.0)*x5660);
IkReal x5664=(cj12*x5661);
IkReal x5665=((1.0)*sj12*x5661);
evalcond[0]=(((r00*x5662))+((r02*x5661))+(((-1.0)*r01*sj12*x5663)));
evalcond[1]=((((-1.0)*r21*x5665))+(((-1.0)*r22*x5663))+((r20*x5664)));
evalcond[2]=((((-1.0)*r11*x5665))+(((-1.0)*r12*x5663))+((r10*x5664)));
evalcond[3]=((1.0)+(((-1.0)*r01*x5665))+((r00*x5664))+(((-1.0)*r02*x5663)));
evalcond[4]=(((r22*x5661))+(((-1.0)*sj9))+((r20*x5662))+(((-1.0)*r21*sj12*x5663)));
evalcond[5]=((((-1.0)*r11*sj12*x5663))+((r12*x5661))+((r10*x5662))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5666=((1.0)*sj12);
CheckValue<IkReal> x5667=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5666))+(((-1.0)*cj12*r11)))),-1);
if(!x5667.valid){
continue;
}
CheckValue<IkReal> x5668 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5666))+((cj12*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x5668.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5667.value)))+(x5668.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5669=IKsin(j11);
IkReal x5670=IKcos(j11);
IkReal x5671=(cj12*x5669);
IkReal x5672=((1.0)*x5669);
IkReal x5673=(cj12*x5670);
IkReal x5674=((1.0)*sj12*x5670);
evalcond[0]=(((r02*x5670))+(((-1.0)*r01*sj12*x5672))+((r00*x5671)));
evalcond[1]=((((-1.0)*r22*x5672))+((r20*x5673))+(((-1.0)*r21*x5674)));
evalcond[2]=(((r10*x5673))+(((-1.0)*r12*x5672))+(((-1.0)*r11*x5674)));
evalcond[3]=((1.0)+(((-1.0)*r01*x5674))+((r00*x5673))+(((-1.0)*r02*x5672)));
evalcond[4]=((((-1.0)*sj9))+((r20*x5671))+((r22*x5670))+(((-1.0)*r21*sj12*x5672)));
evalcond[5]=(((r10*x5671))+(((-1.0)*r11*sj12*x5672))+((r12*x5670))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j8), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x5675=((1.0)*cj12);
IkReal x5676=((((-1.0)*r20*sj12))+(((-1.0)*r21*x5675)));
j11eval[0]=x5676;
j11eval[1]=((IKabs((cj9*r02)))+(IKabs((((cj9*r01*sj12))+(((-1.0)*cj9*r00*x5675))))));
j11eval[2]=IKsign(x5676);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x5677=r01*r01;
IkReal x5678=cj12*cj12;
IkReal x5679=(r01*sj12);
IkReal x5680=(cj12*r00);
IkReal x5681=((((-1.0)*x5677))+(((-1.0)*(r02*r02)))+(((-1.0)*x5678*(r00*r00)))+((x5677*x5678))+(((2.0)*x5679*x5680)));
j11eval[0]=x5681;
j11eval[1]=((IKabs(r02))+(IKabs((x5679+(((-1.0)*x5680))))));
j11eval[2]=IKsign(x5681);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=1.5707963267949;
sj8=1.0;
cj8=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x5682=cj12*cj12;
IkReal x5683=(r11*r21);
IkReal x5684=(cj12*r20);
IkReal x5685=(r21*sj12);
IkReal x5686=((((-1.0)*r12*r22))+(((-1.0)*r10*r20*x5682))+(((-1.0)*x5683))+((r11*sj12*x5684))+((x5682*x5683))+((cj12*r10*x5685)));
j11eval[0]=x5686;
j11eval[1]=IKsign(x5686);
j11eval[2]=((IKabs((((cj9*x5684))+(((-1.0)*cj9*x5685)))))+(IKabs((cj9*r22))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5687=cj12*cj12;
IkReal x5688=(cj12*r20);
IkReal x5689=(r11*r21);
IkReal x5690=(r21*sj12);
CheckValue<IkReal> x5691 = IKatan2WithCheck(IkReal((((cj9*x5688))+(((-1.0)*cj9*x5690)))),IkReal((cj9*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5691.valid){
continue;
}
CheckValue<IkReal> x5692=IKPowWithIntegerCheck(IKsign((((x5687*x5689))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x5687))+(((-1.0)*x5689))+((r11*sj12*x5688))+((cj12*r10*x5690)))),-1);
if(!x5692.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5691.value)+(((1.5707963267949)*(x5692.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5693=IKsin(j11);
IkReal x5694=IKcos(j11);
IkReal x5695=(cj12*x5693);
IkReal x5696=((1.0)*x5693);
IkReal x5697=(cj12*x5694);
IkReal x5698=((1.0)*sj12*x5694);
evalcond[0]=(((r02*x5694))+((r00*x5695))+(((-1.0)*r01*sj12*x5696)));
evalcond[1]=((((-1.0)*r11*sj12*x5696))+cj9+((r10*x5695))+((r12*x5694)));
evalcond[2]=((((-1.0)*r22*x5696))+((r20*x5697))+(((-1.0)*r21*x5698)));
evalcond[3]=(((r10*x5697))+(((-1.0)*r12*x5696))+(((-1.0)*r11*x5698)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x5696))+((r00*x5697))+(((-1.0)*r01*x5698)));
evalcond[5]=((((-1.0)*sj9))+((r22*x5694))+(((-1.0)*r21*sj12*x5696))+((r20*x5695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5699=r01*r01;
IkReal x5700=cj12*cj12;
IkReal x5701=(r01*sj12);
IkReal x5702=(cj12*r00);
CheckValue<IkReal> x5703=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x5701*x5702))+(((-1.0)*x5699))+(((-1.0)*x5700*(r00*r00)))+((x5699*x5700)))),-1);
if(!x5703.valid){
continue;
}
CheckValue<IkReal> x5704 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x5702))+x5701)),IKFAST_ATAN2_MAGTHRESH);
if(!x5704.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5703.value)))+(x5704.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5705=IKsin(j11);
IkReal x5706=IKcos(j11);
IkReal x5707=(cj12*x5705);
IkReal x5708=((1.0)*x5705);
IkReal x5709=(cj12*x5706);
IkReal x5710=((1.0)*sj12*x5706);
evalcond[0]=(((r02*x5706))+(((-1.0)*r01*sj12*x5708))+((r00*x5707)));
evalcond[1]=(cj9+((r10*x5707))+((r12*x5706))+(((-1.0)*r11*sj12*x5708)));
evalcond[2]=(((r20*x5709))+(((-1.0)*r22*x5708))+(((-1.0)*r21*x5710)));
evalcond[3]=((((-1.0)*r12*x5708))+((r10*x5709))+(((-1.0)*r11*x5710)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x5710))+(((-1.0)*r02*x5708))+((r00*x5709)));
evalcond[5]=(((r20*x5707))+(((-1.0)*sj9))+(((-1.0)*r21*sj12*x5708))+((r22*x5706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5711=((1.0)*cj12);
CheckValue<IkReal> x5712=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj12))+(((-1.0)*r21*x5711)))),-1);
if(!x5712.valid){
continue;
}
CheckValue<IkReal> x5713 = IKatan2WithCheck(IkReal((cj9*r02)),IkReal((((cj9*r01*sj12))+(((-1.0)*cj9*r00*x5711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5713.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5712.value)))+(x5713.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5714=IKsin(j11);
IkReal x5715=IKcos(j11);
IkReal x5716=(cj12*x5714);
IkReal x5717=((1.0)*x5714);
IkReal x5718=(cj12*x5715);
IkReal x5719=((1.0)*sj12*x5715);
evalcond[0]=(((r02*x5715))+(((-1.0)*r01*sj12*x5717))+((r00*x5716)));
evalcond[1]=(cj9+(((-1.0)*r11*sj12*x5717))+((r10*x5716))+((r12*x5715)));
evalcond[2]=((((-1.0)*r22*x5717))+(((-1.0)*r21*x5719))+((r20*x5718)));
evalcond[3]=(((r10*x5718))+(((-1.0)*r12*x5717))+(((-1.0)*r11*x5719)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x5719))+((r00*x5718))+(((-1.0)*r02*x5717)));
evalcond[5]=((((-1.0)*sj9))+((r22*x5715))+(((-1.0)*r21*sj12*x5717))+((r20*x5716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j7), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x5720=(((r10*sj12))+((cj12*r11)));
j11eval[0]=x5720;
j11eval[1]=((IKabs((((r01*sj12*sj9))+(((-1.0)*cj12*r00*sj9)))))+(IKabs((r02*sj9))));
j11eval[2]=IKsign(x5720);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x5721=r01*r01;
IkReal x5722=cj12*cj12;
IkReal x5723=(r01*sj12);
IkReal x5724=(cj12*r00);
IkReal x5725=(((x5721*x5722))+(((-1.0)*(r02*r02)))+(((-1.0)*x5722*(r00*r00)))+(((2.0)*x5723*x5724))+(((-1.0)*x5721)));
j11eval[0]=x5725;
j11eval[1]=((IKabs(((((-1.0)*x5724))+x5723)))+(IKabs(r02)));
j11eval[2]=IKsign(x5725);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=0;
sj7=0;
cj7=1.0;
IkReal x5726=cj12*cj12;
IkReal x5727=r21*r21;
IkReal x5728=(cj12*r20);
IkReal x5729=(r21*sj12);
IkReal x5730=(((x5726*x5727))+(((2.0)*x5728*x5729))+(((-1.0)*(r22*r22)))+(((-1.0)*x5727))+(((-1.0)*x5726*(r20*r20))));
j11eval[0]=x5730;
j11eval[1]=IKsign(x5730);
j11eval[2]=((IKabs((((sj9*x5728))+(((-1.0)*sj9*x5729)))))+(IKabs((r22*sj9))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5731=cj12*cj12;
IkReal x5732=r21*r21;
IkReal x5733=(cj12*r20);
IkReal x5734=(r21*sj12);
CheckValue<IkReal> x5735 = IKatan2WithCheck(IkReal((((sj9*x5733))+(((-1.0)*sj9*x5734)))),IkReal((r22*sj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x5735.valid){
continue;
}
CheckValue<IkReal> x5736=IKPowWithIntegerCheck(IKsign(((((2.0)*x5733*x5734))+((x5731*x5732))+(((-1.0)*(r22*r22)))+(((-1.0)*x5731*(r20*r20)))+(((-1.0)*x5732)))),-1);
if(!x5736.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5735.value)+(((1.5707963267949)*(x5736.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5737=IKsin(j11);
IkReal x5738=IKcos(j11);
IkReal x5739=(cj12*x5737);
IkReal x5740=((1.0)*x5737);
IkReal x5741=(cj12*x5738);
IkReal x5742=((1.0)*sj12*x5738);
evalcond[0]=((((-1.0)*r01*sj12*x5740))+((r00*x5739))+((r02*x5738)));
evalcond[1]=(sj9+((r20*x5739))+(((-1.0)*r21*sj12*x5740))+((r22*x5738)));
evalcond[2]=((((-1.0)*r21*x5742))+(((-1.0)*r22*x5740))+((r20*x5741)));
evalcond[3]=((((-1.0)*r11*x5742))+(((-1.0)*r12*x5740))+((r10*x5741)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x5742))+(((-1.0)*r02*x5740))+((r00*x5741)));
evalcond[5]=(((r12*x5738))+(((-1.0)*r11*sj12*x5740))+((r10*x5739))+(((-1.0)*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5743=r01*r01;
IkReal x5744=cj12*cj12;
IkReal x5745=(r01*sj12);
IkReal x5746=(cj12*r00);
CheckValue<IkReal> x5747 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x5746))+x5745)),IKFAST_ATAN2_MAGTHRESH);
if(!x5747.valid){
continue;
}
CheckValue<IkReal> x5748=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x5743*x5744))+(((2.0)*x5745*x5746))+(((-1.0)*x5743))+(((-1.0)*x5744*(r00*r00))))),-1);
if(!x5748.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5747.value)+(((1.5707963267949)*(x5748.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5749=IKsin(j11);
IkReal x5750=IKcos(j11);
IkReal x5751=(cj12*x5749);
IkReal x5752=((1.0)*x5749);
IkReal x5753=(cj12*x5750);
IkReal x5754=((1.0)*sj12*x5750);
evalcond[0]=((((-1.0)*r01*sj12*x5752))+((r00*x5751))+((r02*x5750)));
evalcond[1]=(sj9+((r20*x5751))+((r22*x5750))+(((-1.0)*r21*sj12*x5752)));
evalcond[2]=((((-1.0)*r21*x5754))+(((-1.0)*r22*x5752))+((r20*x5753)));
evalcond[3]=((((-1.0)*r12*x5752))+(((-1.0)*r11*x5754))+((r10*x5753)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x5754))+((r00*x5753))+(((-1.0)*r02*x5752)));
evalcond[5]=((((-1.0)*r11*sj12*x5752))+(((-1.0)*cj9))+((r12*x5750))+((r10*x5751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x5755 = IKatan2WithCheck(IkReal((r02*sj9)),IkReal((((r01*sj12*sj9))+(((-1.0)*cj12*r00*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5755.valid){
continue;
}
CheckValue<IkReal> x5756=IKPowWithIntegerCheck(IKsign((((r10*sj12))+((cj12*r11)))),-1);
if(!x5756.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5755.value)+(((1.5707963267949)*(x5756.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5757=IKsin(j11);
IkReal x5758=IKcos(j11);
IkReal x5759=(cj12*x5757);
IkReal x5760=((1.0)*x5757);
IkReal x5761=(cj12*x5758);
IkReal x5762=((1.0)*sj12*x5758);
evalcond[0]=((((-1.0)*r01*sj12*x5760))+((r00*x5759))+((r02*x5758)));
evalcond[1]=((((-1.0)*r21*sj12*x5760))+sj9+((r20*x5759))+((r22*x5758)));
evalcond[2]=((((-1.0)*r21*x5762))+(((-1.0)*r22*x5760))+((r20*x5761)));
evalcond[3]=((((-1.0)*r12*x5760))+(((-1.0)*r11*x5762))+((r10*x5761)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x5762))+((r00*x5761))+(((-1.0)*r02*x5760)));
evalcond[5]=((((-1.0)*r11*sj12*x5760))+(((-1.0)*cj9))+((r12*x5758))+((r10*x5759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j7, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j8), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x5763=(((r10*sj12))+((cj12*r11)));
j11eval[0]=x5763;
j11eval[1]=((IKabs((((r01*sj12*sj9))+(((-1.0)*cj12*r00*sj9)))))+(IKabs((r02*sj9))));
j11eval[2]=IKsign(x5763);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x5764=((1.0)*cj12);
IkReal x5765=((((-1.0)*r21*x5764))+(((-1.0)*r20*sj12)));
j11eval[0]=x5765;
j11eval[1]=((IKabs((cj9*r02)))+(IKabs((((cj9*r01*sj12))+(((-1.0)*cj9*r00*x5764))))));
j11eval[2]=IKsign(x5765);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j8=-1.5707963267949;
sj8=-1.0;
cj8=0;
j7=3.14159265358979;
sj7=0;
cj7=-1.0;
IkReal x5766=((1.0)*sj9);
IkReal x5767=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x5767;
j11eval[1]=((IKabs(((((-1.0)*r12*x5766))+((cj9*r22)))))+(IKabs((((cj12*r10*sj9))+(((-1.0)*cj12*cj9*r20))+((cj9*r21*sj12))+(((-1.0)*r11*sj12*x5766))))));
j11eval[2]=IKsign(x5767);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5768=((1.0)*sj9);
CheckValue<IkReal> x5769=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x5769.valid){
continue;
}
CheckValue<IkReal> x5770 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5768))+((cj9*r22)))),IkReal((((cj12*r10*sj9))+(((-1.0)*cj12*cj9*r20))+((cj9*r21*sj12))+(((-1.0)*r11*sj12*x5768)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5770.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5769.value)))+(x5770.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5771=IKsin(j11);
IkReal x5772=IKcos(j11);
IkReal x5773=(cj12*x5771);
IkReal x5774=((1.0)*x5771);
IkReal x5775=(cj12*x5772);
IkReal x5776=((1.0)*sj12*x5772);
evalcond[0]=((((-1.0)*r01*sj12*x5774))+((r00*x5773))+((r02*x5772)));
evalcond[1]=((((-1.0)*r21*sj12*x5774))+sj9+((r22*x5772))+((r20*x5773)));
evalcond[2]=(cj9+(((-1.0)*r11*sj12*x5774))+((r10*x5773))+((r12*x5772)));
evalcond[3]=((((-1.0)*r21*x5776))+(((-1.0)*r22*x5774))+((r20*x5775)));
evalcond[4]=((((-1.0)*r11*x5776))+(((-1.0)*r12*x5774))+((r10*x5775)));
evalcond[5]=((1.0)+((r00*x5775))+(((-1.0)*r02*x5774))+(((-1.0)*r01*x5776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5777=((1.0)*cj12);
CheckValue<IkReal> x5778=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5777))+(((-1.0)*r20*sj12)))),-1);
if(!x5778.valid){
continue;
}
CheckValue<IkReal> x5779 = IKatan2WithCheck(IkReal((cj9*r02)),IkReal((((cj9*r01*sj12))+(((-1.0)*cj9*r00*x5777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5779.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5778.value)))+(x5779.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5780=IKsin(j11);
IkReal x5781=IKcos(j11);
IkReal x5782=(cj12*x5780);
IkReal x5783=((1.0)*x5780);
IkReal x5784=(cj12*x5781);
IkReal x5785=((1.0)*sj12*x5781);
evalcond[0]=((((-1.0)*r01*sj12*x5783))+((r00*x5782))+((r02*x5781)));
evalcond[1]=(sj9+((r20*x5782))+((r22*x5781))+(((-1.0)*r21*sj12*x5783)));
evalcond[2]=(cj9+((r12*x5781))+(((-1.0)*r11*sj12*x5783))+((r10*x5782)));
evalcond[3]=((((-1.0)*r21*x5785))+((r20*x5784))+(((-1.0)*r22*x5783)));
evalcond[4]=((((-1.0)*r12*x5783))+(((-1.0)*r11*x5785))+((r10*x5784)));
evalcond[5]=((1.0)+((r00*x5784))+(((-1.0)*r01*x5785))+(((-1.0)*r02*x5783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x5786 = IKatan2WithCheck(IkReal((r02*sj9)),IkReal((((r01*sj12*sj9))+(((-1.0)*cj12*r00*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5786.valid){
continue;
}
CheckValue<IkReal> x5787=IKPowWithIntegerCheck(IKsign((((r10*sj12))+((cj12*r11)))),-1);
if(!x5787.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5786.value)+(((1.5707963267949)*(x5787.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5788=IKsin(j11);
IkReal x5789=IKcos(j11);
IkReal x5790=(cj12*x5788);
IkReal x5791=((1.0)*x5788);
IkReal x5792=(cj12*x5789);
IkReal x5793=((1.0)*sj12*x5789);
evalcond[0]=((((-1.0)*r01*sj12*x5791))+((r00*x5790))+((r02*x5789)));
evalcond[1]=(sj9+((r20*x5790))+((r22*x5789))+(((-1.0)*r21*sj12*x5791)));
evalcond[2]=(((r10*x5790))+cj9+((r12*x5789))+(((-1.0)*r11*sj12*x5791)));
evalcond[3]=(((r20*x5792))+(((-1.0)*r21*x5793))+(((-1.0)*r22*x5791)));
evalcond[4]=(((r10*x5792))+(((-1.0)*r11*x5793))+(((-1.0)*r12*x5791)));
evalcond[5]=((1.0)+(((-1.0)*r01*x5793))+((r00*x5792))+(((-1.0)*r02*x5791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5794=cj12*cj12;
IkReal x5795=r21*r21;
IkReal x5796=(cj12*r20);
IkReal x5797=(r21*sj12);
IkReal x5798=(sj8*sj9);
CheckValue<IkReal> x5799=IKPowWithIntegerCheck(IKsign(((r22*r22)+((x5794*(r20*r20)))+(((-2.0)*x5796*x5797))+(((-1.0)*x5794*x5795))+x5795)),-1);
if(!x5799.valid){
continue;
}
CheckValue<IkReal> x5800 = IKatan2WithCheck(IkReal(((((-1.0)*x5797*x5798))+((cj8*r22))+((x5796*x5798)))),IkReal((((cj8*x5797))+(((-1.0)*cj8*x5796))+((r22*x5798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5800.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5799.value)))+(x5800.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5801=IKcos(j11);
IkReal x5802=IKsin(j11);
IkReal x5803=(cj8*sj9);
IkReal x5804=(cj12*r20);
IkReal x5805=(cj12*x5801);
IkReal x5806=((1.0)*x5802);
IkReal x5807=(cj12*x5802);
IkReal x5808=((1.0)*sj12*x5801);
evalcond[0]=((((-1.0)*r22*x5806))+cj8+((x5801*x5804))+(((-1.0)*r21*x5808)));
evalcond[1]=((((-1.0)*sj8*sj9))+(((-1.0)*r21*sj12*x5806))+((r22*x5801))+((x5802*x5804)));
evalcond[2]=(((r00*x5805))+(((-1.0)*r01*x5808))+((cj7*sj8))+(((-1.0)*r02*x5806)));
evalcond[3]=((((-1.0)*r11*x5808))+(((-1.0)*r12*x5806))+((r10*x5805))+((sj7*sj8)));
evalcond[4]=(((cj7*x5803))+((r00*x5807))+((cj9*sj7))+((r02*x5801))+(((-1.0)*r01*sj12*x5806)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r12*x5801))+((sj7*x5803))+((r10*x5807))+(((-1.0)*r11*sj12*x5806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5809=(cj7*sj8);
IkReal x5810=((1.0)*sj12);
IkReal x5811=((1.0)*cj12);
CheckValue<IkReal> x5812=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5811))+(((-1.0)*r10*x5810)))),-1);
if(!x5812.valid){
continue;
}
CheckValue<IkReal> x5813 = IKatan2WithCheck(IkReal(((((-1.0)*cj8*r00*x5811))+(((-1.0)*r21*x5809*x5810))+((cj12*r20*x5809))+((cj8*r01*sj12)))),IkReal((((r22*x5809))+(((-1.0)*cj8*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5813.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5812.value)))+(x5813.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5814=IKcos(j11);
IkReal x5815=IKsin(j11);
IkReal x5816=(cj8*sj9);
IkReal x5817=(cj12*r20);
IkReal x5818=(cj12*x5814);
IkReal x5819=((1.0)*x5815);
IkReal x5820=(cj12*x5815);
IkReal x5821=((1.0)*sj12*x5814);
evalcond[0]=(((x5814*x5817))+cj8+(((-1.0)*r21*x5821))+(((-1.0)*r22*x5819)));
evalcond[1]=(((x5815*x5817))+(((-1.0)*sj8*sj9))+((r22*x5814))+(((-1.0)*r21*sj12*x5819)));
evalcond[2]=((((-1.0)*r01*x5821))+(((-1.0)*r02*x5819))+((cj7*sj8))+((r00*x5818)));
evalcond[3]=((((-1.0)*r12*x5819))+((sj7*sj8))+(((-1.0)*r11*x5821))+((r10*x5818)));
evalcond[4]=((((-1.0)*r01*sj12*x5819))+((r02*x5814))+((cj9*sj7))+((r00*x5820))+((cj7*x5816)));
evalcond[5]=((((-1.0)*r11*sj12*x5819))+(((-1.0)*cj7*cj9))+((sj7*x5816))+((r12*x5814))+((r10*x5820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5822=((1.0)*cj8);
IkReal x5823=(sj7*sj8);
CheckValue<IkReal> x5824 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r10*x5822))+((cj8*r11*sj12))+(((-1.0)*r21*sj12*x5823))+((cj12*r20*x5823)))),IkReal((((r22*x5823))+(((-1.0)*r12*x5822)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5824.valid){
continue;
}
CheckValue<IkReal> x5825=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x5825.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5824.value)+(((1.5707963267949)*(x5825.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x5826=IKcos(j11);
IkReal x5827=IKsin(j11);
IkReal x5828=(cj8*sj9);
IkReal x5829=(cj12*r20);
IkReal x5830=(cj12*x5826);
IkReal x5831=((1.0)*x5827);
IkReal x5832=(cj12*x5827);
IkReal x5833=((1.0)*sj12*x5826);
evalcond[0]=((((-1.0)*r22*x5831))+(((-1.0)*r21*x5833))+cj8+((x5826*x5829)));
evalcond[1]=((((-1.0)*sj8*sj9))+(((-1.0)*r21*sj12*x5831))+((x5827*x5829))+((r22*x5826)));
evalcond[2]=((((-1.0)*r02*x5831))+(((-1.0)*r01*x5833))+((r00*x5830))+((cj7*sj8)));
evalcond[3]=((((-1.0)*r12*x5831))+((sj7*sj8))+((r10*x5830))+(((-1.0)*r11*x5833)));
evalcond[4]=(((r02*x5826))+(((-1.0)*r01*sj12*x5831))+((r00*x5832))+((cj9*sj7))+((cj7*x5828)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r12*x5826))+(((-1.0)*r11*sj12*x5831))+((sj7*x5828))+((r10*x5832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x5834=cj12*cj12;
IkReal x5835=r21*r21;
IkReal x5836=(cj12*r20);
IkReal x5837=(r21*sj12);
IkReal x5838=(sj8*sj9);
CheckValue<IkReal> x5839 = IKatan2WithCheck(IkReal((((cj8*r22))+((x5836*x5838))+(((-1.0)*x5837*x5838)))),IkReal((((cj8*x5837))+((r22*x5838))+(((-1.0)*cj8*x5836)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5839.valid){
continue;
}
CheckValue<IkReal> x5840=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5834*x5835))+(r22*r22)+((x5834*(r20*r20)))+(((-2.0)*x5836*x5837))+x5835)),-1);
if(!x5840.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x5839.value)+(((1.5707963267949)*(x5840.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x5841=IKcos(j11);
IkReal x5842=IKsin(j11);
IkReal x5843=(cj12*r20);
IkReal x5844=((1.0)*r21*sj12);
evalcond[0]=(cj8+((x5841*x5843))+(((-1.0)*r22*x5842))+(((-1.0)*x5841*x5844)));
evalcond[1]=((((-1.0)*sj8*sj9))+((x5842*x5843))+(((-1.0)*x5842*x5844))+((r22*x5841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5845=cj9*cj9;
IkReal x5846=((1.0)*sj9);
IkReal x5847=(cj12*r11);
IkReal x5848=(r10*sj12);
IkReal x5849=(cj12*r01);
IkReal x5850=(r00*sj12);
IkReal x5851=((1.0)*cj8*cj9);
IkReal x5852=((1.0)+((x5845*(cj8*cj8)))+(((-1.0)*x5845)));
j7eval[0]=x5852;
j7eval[1]=IKsign(x5852);
j7eval[2]=((IKabs(((((-1.0)*x5849*x5851))+(((-1.0)*x5846*x5848))+(((-1.0)*x5846*x5847))+(((-1.0)*x5850*x5851)))))+(IKabs(((((-1.0)*x5847*x5851))+((sj9*x5850))+(((-1.0)*x5848*x5851))+((sj9*x5849))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j7eval[0]=sj8;
j7eval[1]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j7eval[0]=cj8;
j7eval[1]=cj9;
j7eval[2]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj8=1.0;
cj8=0;
j8=1.5707963267949;
j7eval[0]=sj9;
j7eval[1]=((IKabs((((r00*sj12))+((cj12*r01)))))+(IKabs(((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11))))));
j7eval[2]=IKsign(sj9);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj8=1.0;
cj8=0;
j8=1.5707963267949;
j7eval[0]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj8=1.0;
cj8=0;
j8=1.5707963267949;
j7eval[0]=cj9;
j7eval[1]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x5853=((1.0)*cj12);
CheckValue<IkReal> x5854=IKPowWithIntegerCheck(cj9,-1);
if(!x5854.valid){
continue;
}
CheckValue<IkReal> x5855=IKPowWithIntegerCheck(sj9,-1);
if(!x5855.valid){
continue;
}
if( IKabs(((x5854.value)*(((((-1.0)*cj11*r02))+((r01*sj11*sj12))+(((-1.0)*r00*sj11*x5853)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5855.value)*(((((-1.0)*r11*x5853))+(((-1.0)*r10*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5854.value)*(((((-1.0)*cj11*r02))+((r01*sj11*sj12))+(((-1.0)*r00*sj11*x5853))))))+IKsqr(((x5855.value)*(((((-1.0)*r11*x5853))+(((-1.0)*r10*sj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x5854.value)*(((((-1.0)*cj11*r02))+((r01*sj11*sj12))+(((-1.0)*r00*sj11*x5853))))), ((x5855.value)*(((((-1.0)*r11*x5853))+(((-1.0)*r10*sj12))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x5856=IKcos(j7);
IkReal x5857=IKsin(j7);
IkReal x5858=((1.0)*sj11);
IkReal x5859=(r11*sj12);
IkReal x5860=(cj11*cj12);
IkReal x5861=((0.4)*sj12);
IkReal x5862=(cj12*sj11);
IkReal x5863=(cj12*r01);
IkReal x5864=(cj12*r11);
IkReal x5865=((1.0)*cj11);
IkReal x5866=(r01*sj12);
IkReal x5867=(sj9*x5856);
IkReal x5868=(sj9*x5857);
evalcond[0]=(((r10*sj12))+x5864+x5867);
evalcond[1]=((((-1.0)*x5868))+((r00*sj12))+x5863);
evalcond[2]=((((-1.0)*r02*x5858))+(((-1.0)*x5865*x5866))+((r00*x5860))+x5856);
evalcond[3]=((((-1.0)*r12*x5858))+(((-1.0)*x5859*x5865))+((r10*x5860))+x5857);
evalcond[4]=((((-1.0)*x5858*x5866))+((cj9*x5857))+((cj11*r02))+((r00*x5862)));
evalcond[5]=((((-1.0)*x5858*x5859))+((cj11*r12))+(((-1.0)*cj9*x5856))+((r10*x5862)));
evalcond[6]=((((0.41956376)*x5856))+(((-0.4)*x5863))+(((-1.0)*px))+(((-1.0)*r00*x5861))+(((-0.00043624)*x5868)));
evalcond[7]=((((0.00043624)*x5867))+(((-1.0)*r10*x5861))+(((0.41956376)*x5857))+(((-0.4)*x5864))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x5869=IKPowWithIntegerCheck(sj9,-1);
if(!x5869.valid){
continue;
}
if( IKabs(((x5869.value)*((((r00*sj12))+((cj12*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj11))+((cj11*r01*sj12))+(((-1.0)*cj11*cj12*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5869.value)*((((r00*sj12))+((cj12*r01))))))+IKsqr((((r02*sj11))+((cj11*r01*sj12))+(((-1.0)*cj11*cj12*r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x5869.value)*((((r00*sj12))+((cj12*r01))))), (((r02*sj11))+((cj11*r01*sj12))+(((-1.0)*cj11*cj12*r00))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x5870=IKcos(j7);
IkReal x5871=IKsin(j7);
IkReal x5872=((1.0)*sj11);
IkReal x5873=(r11*sj12);
IkReal x5874=(cj11*cj12);
IkReal x5875=((0.4)*sj12);
IkReal x5876=(cj12*sj11);
IkReal x5877=(cj12*r01);
IkReal x5878=(cj12*r11);
IkReal x5879=((1.0)*cj11);
IkReal x5880=(r01*sj12);
IkReal x5881=(sj9*x5870);
IkReal x5882=(sj9*x5871);
evalcond[0]=(((r10*sj12))+x5878+x5881);
evalcond[1]=((((-1.0)*x5882))+((r00*sj12))+x5877);
evalcond[2]=((((-1.0)*x5879*x5880))+(((-1.0)*r02*x5872))+((r00*x5874))+x5870);
evalcond[3]=((((-1.0)*r12*x5872))+(((-1.0)*x5873*x5879))+((r10*x5874))+x5871);
evalcond[4]=(((cj9*x5871))+((cj11*r02))+(((-1.0)*x5872*x5880))+((r00*x5876)));
evalcond[5]=((((-1.0)*x5872*x5873))+((cj11*r12))+(((-1.0)*cj9*x5870))+((r10*x5876)));
evalcond[6]=((((-1.0)*px))+(((-0.4)*x5877))+(((-1.0)*r00*x5875))+(((0.41956376)*x5870))+(((-0.00043624)*x5882)));
evalcond[7]=((((-1.0)*py))+(((-0.4)*x5878))+(((0.00043624)*x5881))+(((0.41956376)*x5871))+(((-1.0)*r10*x5875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x5883 = IKatan2WithCheck(IkReal((((r00*sj12))+((cj12*r01)))),IkReal(((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5883.valid){
continue;
}
CheckValue<IkReal> x5884=IKPowWithIntegerCheck(IKsign(sj9),-1);
if(!x5884.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x5883.value)+(((1.5707963267949)*(x5884.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x5885=IKcos(j7);
IkReal x5886=IKsin(j7);
IkReal x5887=((1.0)*sj11);
IkReal x5888=(r11*sj12);
IkReal x5889=(cj11*cj12);
IkReal x5890=((0.4)*sj12);
IkReal x5891=(cj12*sj11);
IkReal x5892=(cj12*r01);
IkReal x5893=(cj12*r11);
IkReal x5894=((1.0)*cj11);
IkReal x5895=(r01*sj12);
IkReal x5896=(sj9*x5885);
IkReal x5897=(sj9*x5886);
evalcond[0]=(((r10*sj12))+x5893+x5896);
evalcond[1]=((((-1.0)*x5897))+((r00*sj12))+x5892);
evalcond[2]=(((r00*x5889))+(((-1.0)*x5894*x5895))+(((-1.0)*r02*x5887))+x5885);
evalcond[3]=(((r10*x5889))+(((-1.0)*r12*x5887))+(((-1.0)*x5888*x5894))+x5886);
evalcond[4]=(((cj9*x5886))+((cj11*r02))+((r00*x5891))+(((-1.0)*x5887*x5895)));
evalcond[5]=((((-1.0)*x5887*x5888))+((cj11*r12))+((r10*x5891))+(((-1.0)*cj9*x5885)));
evalcond[6]=((((-0.4)*x5892))+(((0.41956376)*x5885))+(((-1.0)*px))+(((-1.0)*r00*x5890))+(((-0.00043624)*x5897)));
evalcond[7]=((((-0.4)*x5893))+(((-1.0)*r10*x5890))+(((0.00043624)*x5896))+(((0.41956376)*x5886))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
j7eval[0]=sj9;
j7eval[1]=((IKabs((((r00*sj12))+((cj12*r01)))))+(IKabs(((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11))))));
j7eval[2]=IKsign(sj9);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
j7eval[0]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
j7eval[0]=sj9;
j7eval[1]=cj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x5898=IKPowWithIntegerCheck(sj9,-1);
if(!x5898.valid){
continue;
}
CheckValue<IkReal> x5899=IKPowWithIntegerCheck(cj9,-1);
if(!x5899.valid){
continue;
}
if( IKabs(((x5898.value)*((((r00*sj12))+((cj12*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5899.value)*((((cj11*r12))+(((-1.0)*r11*sj11*sj12))+((cj12*r10*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5898.value)*((((r00*sj12))+((cj12*r01))))))+IKsqr(((x5899.value)*((((cj11*r12))+(((-1.0)*r11*sj11*sj12))+((cj12*r10*sj11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x5898.value)*((((r00*sj12))+((cj12*r01))))), ((x5899.value)*((((cj11*r12))+(((-1.0)*r11*sj11*sj12))+((cj12*r10*sj11))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x5900=IKsin(j7);
IkReal x5901=IKcos(j7);
IkReal x5902=(cj11*cj12);
IkReal x5903=((0.4)*sj12);
IkReal x5904=(cj12*sj11);
IkReal x5905=(cj12*r01);
IkReal x5906=(cj12*r11);
IkReal x5907=((1.0)*sj11);
IkReal x5908=(r01*sj12);
IkReal x5909=((1.0)*r11*sj12);
IkReal x5910=(sj9*x5901);
IkReal x5911=((1.0)*x5901);
IkReal x5912=(sj9*x5900);
evalcond[0]=(((r10*sj12))+x5906+x5910);
evalcond[1]=(((r00*sj12))+x5905+(((-1.0)*x5912)));
evalcond[2]=(((r00*x5904))+(((-1.0)*x5907*x5908))+((cj11*r02))+((cj9*x5900)));
evalcond[3]=(((cj11*r12))+(((-1.0)*cj9*x5911))+((r10*x5904))+(((-1.0)*r11*sj12*x5907)));
evalcond[4]=(((r00*x5902))+(((-1.0)*r02*x5907))+(((-1.0)*cj11*x5908))+(((-1.0)*x5911)));
evalcond[5]=((((-1.0)*cj11*x5909))+(((-1.0)*r12*x5907))+((r10*x5902))+(((-1.0)*x5900)));
evalcond[6]=((((-0.42043624)*x5901))+(((-1.0)*r00*x5903))+(((-0.4)*x5905))+(((-1.0)*px))+(((-0.00043624)*x5912)));
evalcond[7]=((((-0.42043624)*x5900))+(((-0.4)*x5906))+(((-1.0)*py))+(((0.00043624)*x5910))+(((-1.0)*r10*x5903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x5913=((1.0)*r11);
CheckValue<IkReal> x5914=IKPowWithIntegerCheck(sj9,-1);
if(!x5914.valid){
continue;
}
if( IKabs(((((-1.0)*cj11*sj12*x5913))+((cj11*cj12*r10))+(((-1.0)*r12*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5914.value)*(((((-1.0)*cj12*x5913))+(((-1.0)*r10*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj11*sj12*x5913))+((cj11*cj12*r10))+(((-1.0)*r12*sj11))))+IKsqr(((x5914.value)*(((((-1.0)*cj12*x5913))+(((-1.0)*r10*sj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj11*sj12*x5913))+((cj11*cj12*r10))+(((-1.0)*r12*sj11))), ((x5914.value)*(((((-1.0)*cj12*x5913))+(((-1.0)*r10*sj12))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x5915=IKsin(j7);
IkReal x5916=IKcos(j7);
IkReal x5917=(cj11*cj12);
IkReal x5918=((0.4)*sj12);
IkReal x5919=(cj12*sj11);
IkReal x5920=(cj12*r01);
IkReal x5921=(cj12*r11);
IkReal x5922=((1.0)*sj11);
IkReal x5923=(r01*sj12);
IkReal x5924=((1.0)*r11*sj12);
IkReal x5925=(sj9*x5916);
IkReal x5926=((1.0)*x5916);
IkReal x5927=(sj9*x5915);
evalcond[0]=(((r10*sj12))+x5925+x5921);
evalcond[1]=((((-1.0)*x5927))+((r00*sj12))+x5920);
evalcond[2]=(((r00*x5919))+((cj11*r02))+((cj9*x5915))+(((-1.0)*x5922*x5923)));
evalcond[3]=((((-1.0)*cj9*x5926))+((cj11*r12))+((r10*x5919))+(((-1.0)*r11*sj12*x5922)));
evalcond[4]=(((r00*x5917))+(((-1.0)*r02*x5922))+(((-1.0)*cj11*x5923))+(((-1.0)*x5926)));
evalcond[5]=((((-1.0)*cj11*x5924))+((r10*x5917))+(((-1.0)*r12*x5922))+(((-1.0)*x5915)));
evalcond[6]=((((-0.42043624)*x5916))+(((-1.0)*r00*x5918))+(((-0.00043624)*x5927))+(((-1.0)*px))+(((-0.4)*x5920)));
evalcond[7]=((((-0.42043624)*x5915))+(((0.00043624)*x5925))+(((-1.0)*py))+(((-0.4)*x5921))+(((-1.0)*r10*x5918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x5928 = IKatan2WithCheck(IkReal((((r00*sj12))+((cj12*r01)))),IkReal(((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5928.valid){
continue;
}
CheckValue<IkReal> x5929=IKPowWithIntegerCheck(IKsign(sj9),-1);
if(!x5929.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x5928.value)+(((1.5707963267949)*(x5929.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x5930=IKsin(j7);
IkReal x5931=IKcos(j7);
IkReal x5932=(cj11*cj12);
IkReal x5933=((0.4)*sj12);
IkReal x5934=(cj12*sj11);
IkReal x5935=(cj12*r01);
IkReal x5936=(cj12*r11);
IkReal x5937=((1.0)*sj11);
IkReal x5938=(r01*sj12);
IkReal x5939=((1.0)*r11*sj12);
IkReal x5940=(sj9*x5931);
IkReal x5941=((1.0)*x5931);
IkReal x5942=(sj9*x5930);
evalcond[0]=(((r10*sj12))+x5940+x5936);
evalcond[1]=((((-1.0)*x5942))+((r00*sj12))+x5935);
evalcond[2]=(((cj11*r02))+(((-1.0)*x5937*x5938))+((r00*x5934))+((cj9*x5930)));
evalcond[3]=(((r10*x5934))+((cj11*r12))+(((-1.0)*r11*sj12*x5937))+(((-1.0)*cj9*x5941)));
evalcond[4]=((((-1.0)*x5941))+(((-1.0)*r02*x5937))+(((-1.0)*cj11*x5938))+((r00*x5932)));
evalcond[5]=(((r10*x5932))+(((-1.0)*x5930))+(((-1.0)*cj11*x5939))+(((-1.0)*r12*x5937)));
evalcond[6]=((((-1.0)*r00*x5933))+(((-0.00043624)*x5942))+(((-1.0)*px))+(((-0.42043624)*x5931))+(((-0.4)*x5935)));
evalcond[7]=((((-1.0)*py))+(((0.00043624)*x5940))+(((-1.0)*r10*x5933))+(((-0.42043624)*x5930))+(((-0.4)*x5936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs((((r00*sj12))+((cj12*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj12))+((cj12*r01))))+IKsqr(((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((r00*sj12))+((cj12*r01))), ((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x5943=IKcos(j7);
IkReal x5944=IKsin(j7);
IkReal x5945=(cj11*cj12);
IkReal x5946=((0.4)*sj12);
IkReal x5947=(cj12*sj11);
IkReal x5948=(cj12*r01);
IkReal x5949=(cj12*r11);
IkReal x5950=((1.0)*sj11);
IkReal x5951=(r01*sj12);
IkReal x5952=((0.00043624)*x5943);
IkReal x5953=((0.00043624)*x5944);
IkReal x5954=((1.0)*r11*sj12);
IkReal x5955=(sj8*x5943);
IkReal x5956=(sj8*x5944);
evalcond[0]=(((r10*sj12))+x5943+x5949);
evalcond[1]=((((-1.0)*x5944))+((r00*sj12))+x5948);
evalcond[2]=(((r00*x5947))+((cj11*r02))+(((-1.0)*x5950*x5951))+((cj8*x5943)));
evalcond[3]=(((cj11*r12))+(((-1.0)*r11*sj12*x5950))+((r10*x5947))+((cj8*x5944)));
evalcond[4]=((((-1.0)*r02*x5950))+((r00*x5945))+x5955+(((-1.0)*cj11*x5951)));
evalcond[5]=((((-1.0)*cj11*x5954))+((r10*x5945))+(((-1.0)*r12*x5950))+x5956);
evalcond[6]=((((-1.0)*px))+(((0.42)*x5955))+(((-1.0)*x5952))+(((-1.0)*x5953))+(((-1.0)*r00*x5946))+(((-0.4)*x5948)));
evalcond[7]=((((-1.0)*py))+(((0.42)*x5956))+(((-1.0)*r10*x5946))+(((-1.0)*x5953))+x5952+(((-0.4)*x5949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((((-1.0)*cj12*r01))+(((-1.0)*r00*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj12))+((cj12*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj12*r01))+(((-1.0)*r00*sj12))))+IKsqr((((r10*sj12))+((cj12*r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*cj12*r01))+(((-1.0)*r00*sj12))), (((r10*sj12))+((cj12*r11))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x5957=IKcos(j7);
IkReal x5958=IKsin(j7);
IkReal x5959=(cj11*cj12);
IkReal x5960=(r10*sj12);
IkReal x5961=(cj12*sj11);
IkReal x5962=(cj12*r01);
IkReal x5963=(cj12*r11);
IkReal x5964=((1.0)*cj8);
IkReal x5965=(r00*sj12);
IkReal x5966=((1.0)*sj11);
IkReal x5967=(r01*sj12);
IkReal x5968=((0.00043624)*x5957);
IkReal x5969=((0.00043624)*x5958);
IkReal x5970=((1.0)*r11*sj12);
IkReal x5971=(sj8*x5957);
IkReal x5972=(sj8*x5958);
evalcond[0]=(x5958+x5962+x5965);
evalcond[1]=((((-1.0)*x5957))+x5960+x5963);
evalcond[2]=(((r00*x5961))+(((-1.0)*x5957*x5964))+((cj11*r02))+(((-1.0)*x5966*x5967)));
evalcond[3]=((((-1.0)*r11*sj12*x5966))+((cj11*r12))+(((-1.0)*x5958*x5964))+((r10*x5961)));
evalcond[4]=((((-1.0)*cj11*x5967))+x5971+((r00*x5959))+(((-1.0)*r02*x5966)));
evalcond[5]=(((r10*x5959))+(((-1.0)*r12*x5966))+(((-1.0)*cj11*x5970))+x5972);
evalcond[6]=((((-1.0)*x5968))+(((-1.0)*px))+x5969+(((-0.4)*x5962))+(((-0.4)*x5965))+(((0.42)*x5971)));
evalcond[7]=((((-1.0)*x5969))+(((-1.0)*x5968))+(((-1.0)*py))+(((-0.4)*x5960))+(((-0.4)*x5963))+(((0.42)*x5972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x5973=((1.0)*cj9);
IkReal x5974=(r00*sj12);
IkReal x5975=(cj12*r11);
IkReal x5976=((1.0)*sj9);
IkReal x5977=(r10*sj12);
IkReal x5978=(cj12*r01);
if( IKabs((((sj9*x5974))+((sj9*x5978))+(((-1.0)*x5973*x5977))+(((-1.0)*x5973*x5975)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5975*x5976))+(((-1.0)*x5976*x5977))+(((-1.0)*x5973*x5978))+(((-1.0)*x5973*x5974)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj9*x5974))+((sj9*x5978))+(((-1.0)*x5973*x5977))+(((-1.0)*x5973*x5975))))+IKsqr(((((-1.0)*x5975*x5976))+(((-1.0)*x5976*x5977))+(((-1.0)*x5973*x5978))+(((-1.0)*x5973*x5974))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((sj9*x5974))+((sj9*x5978))+(((-1.0)*x5973*x5977))+(((-1.0)*x5973*x5975))), ((((-1.0)*x5975*x5976))+(((-1.0)*x5976*x5977))+(((-1.0)*x5973*x5978))+(((-1.0)*x5973*x5974))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x5979=IKcos(j7);
IkReal x5980=IKsin(j7);
IkReal x5981=((0.4)*sj12);
IkReal x5982=(cj12*r01);
IkReal x5983=(cj12*r11);
IkReal x5984=(cj12*sj11);
IkReal x5985=(sj9*x5979);
IkReal x5986=(cj9*x5980);
IkReal x5987=((1.0)*sj11*sj12);
IkReal x5988=(cj9*x5979);
IkReal x5989=((0.00043624)*x5979);
IkReal x5990=((0.00043624)*x5980);
IkReal x5991=(sj9*x5980);
IkReal x5992=(x5986+x5985);
evalcond[0]=(((r10*sj12))+x5983+x5992);
evalcond[1]=((((-1.0)*x5991))+((r00*sj12))+x5988+x5982);
evalcond[2]=(((cj11*r02))+((r00*x5984))+x5992+(((-1.0)*r01*x5987)));
evalcond[3]=((((-1.0)*r11*x5987))+((r10*x5984))+(((-1.0)*x5988))+((cj11*r12))+x5991);
evalcond[4]=((((-1.0)*x5989))+(((-1.0)*px))+(((-0.4)*x5982))+(((-1.0)*r00*x5981))+(((-1.0)*sj9*x5990))+(((0.00043624)*x5988)));
evalcond[5]=((((-1.0)*r10*x5981))+(((-1.0)*py))+(((-0.4)*x5983))+(((0.00043624)*x5985))+(((0.00043624)*x5986))+(((-1.0)*x5990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x5993=((1.0)*sj9);
IkReal x5994=(cj12*r11);
IkReal x5995=(r00*sj12);
IkReal x5996=(r10*sj12);
IkReal x5997=(cj12*r01);
if( IKabs((((cj9*x5994))+((cj9*x5996))+((sj9*x5995))+((sj9*x5997)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj9*x5995))+((cj9*x5997))+(((-1.0)*x5993*x5996))+(((-1.0)*x5993*x5994)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj9*x5994))+((cj9*x5996))+((sj9*x5995))+((sj9*x5997))))+IKsqr((((cj9*x5995))+((cj9*x5997))+(((-1.0)*x5993*x5996))+(((-1.0)*x5993*x5994))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((cj9*x5994))+((cj9*x5996))+((sj9*x5995))+((sj9*x5997))), (((cj9*x5995))+((cj9*x5997))+(((-1.0)*x5993*x5996))+(((-1.0)*x5993*x5994))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x5998=IKcos(j7);
IkReal x5999=IKsin(j7);
IkReal x6000=((0.4)*sj12);
IkReal x6001=(cj12*r01);
IkReal x6002=((1.0)*cj9);
IkReal x6003=(cj12*r11);
IkReal x6004=(cj12*sj11);
IkReal x6005=((1.0)*sj11*sj12);
IkReal x6006=((0.00043624)*x5998);
IkReal x6007=((0.00043624)*x5999);
IkReal x6008=(sj9*x5998);
IkReal x6009=(x5998*x6002);
IkReal x6010=((1.0)*sj9*x5999);
IkReal x6011=(x6009+x6010);
evalcond[0]=(x6003+x6008+(((-1.0)*x5999*x6002))+((r10*sj12)));
evalcond[1]=(x6001+((r00*sj12))+(((-1.0)*x6011)));
evalcond[2]=(((cj9*x5999))+(((-1.0)*r01*x6005))+((cj11*r02))+((r00*x6004))+(((-1.0)*x6008)));
evalcond[3]=((((-1.0)*r11*x6005))+((cj11*r12))+((r10*x6004))+(((-1.0)*x6011)));
evalcond[4]=((((-1.0)*x6006))+(((-1.0)*cj9*x6006))+(((-1.0)*px))+(((-1.0)*r00*x6000))+(((-1.0)*sj9*x6007))+(((-0.4)*x6001)));
evalcond[5]=(((sj9*x6006))+(((-1.0)*x6007))+(((-1.0)*cj9*x6007))+(((-1.0)*py))+(((-1.0)*r10*x6000))+(((-0.4)*x6003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj9=0;
cj9=1.0;
j9=0;
IkReal x6012=((1.0)*cj12);
IkReal x6013=((1.0)*sj12);
j7eval[0]=cj8;
j7eval[1]=IKsign(cj8);
j7eval[2]=((IKabs(((((-1.0)*r11*x6012))+(((-1.0)*r10*x6013)))))+(IKabs(((((-1.0)*r00*x6013))+(((-1.0)*r01*x6012))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj9=0;
cj9=1.0;
j9=0;
j7eval[0]=cj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj9=0;
cj9=1.0;
j9=0;
j7eval[0]=cj8;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x6014=((1.0)*cj12);
CheckValue<IkReal> x6015=IKPowWithIntegerCheck(cj8,-1);
if(!x6015.valid){
continue;
}
CheckValue<IkReal> x6016=IKPowWithIntegerCheck(sj8,-1);
if(!x6016.valid){
continue;
}
if( IKabs(((x6015.value)*(((((-1.0)*r11*x6014))+(((-1.0)*r10*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6016.value)*((((r02*sj11))+((cj11*r01*sj12))+(((-1.0)*cj11*r00*x6014)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6015.value)*(((((-1.0)*r11*x6014))+(((-1.0)*r10*sj12))))))+IKsqr(((x6016.value)*((((r02*sj11))+((cj11*r01*sj12))+(((-1.0)*cj11*r00*x6014))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x6015.value)*(((((-1.0)*r11*x6014))+(((-1.0)*r10*sj12))))), ((x6016.value)*((((r02*sj11))+((cj11*r01*sj12))+(((-1.0)*cj11*r00*x6014))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x6017=IKsin(j7);
IkReal x6018=IKcos(j7);
IkReal x6019=(cj11*cj12);
IkReal x6020=(r10*sj12);
IkReal x6021=(cj12*sj11);
IkReal x6022=(cj12*r01);
IkReal x6023=(cj12*r11);
IkReal x6024=(r00*sj12);
IkReal x6025=((1.0)*sj11);
IkReal x6026=(r01*sj12);
IkReal x6027=((1.0)*r11*sj12);
IkReal x6028=(cj8*x6017);
IkReal x6029=(cj8*x6018);
IkReal x6030=(sj8*x6018);
IkReal x6031=(sj8*x6017);
evalcond[0]=(x6028+x6020+x6023);
evalcond[1]=(x6029+x6022+x6024);
evalcond[2]=((((-1.0)*x6025*x6026))+x6017+((r00*x6021))+((cj11*r02)));
evalcond[3]=((((-1.0)*x6018))+((cj11*r12))+(((-1.0)*r11*sj12*x6025))+((r10*x6021)));
evalcond[4]=(x6030+(((-1.0)*cj11*x6026))+(((-1.0)*r02*x6025))+((r00*x6019)));
evalcond[5]=(x6031+((r10*x6019))+(((-1.0)*cj11*x6027))+(((-1.0)*r12*x6025)));
evalcond[6]=((((-0.4)*x6024))+(((-0.4)*x6022))+(((-0.00043624)*x6018))+(((0.42)*x6030))+(((-1.0)*px))+(((0.00043624)*x6029)));
evalcond[7]=((((-0.4)*x6023))+(((-0.4)*x6020))+(((-0.00043624)*x6017))+(((0.42)*x6031))+(((-1.0)*py))+(((0.00043624)*x6028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x6032=((1.0)*r11);
CheckValue<IkReal> x6033=IKPowWithIntegerCheck(cj8,-1);
if(!x6033.valid){
continue;
}
if( IKabs(((x6033.value)*(((((-1.0)*cj12*x6032))+(((-1.0)*r10*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj11*sj12*x6032))+((cj11*r12))+((cj12*r10*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6033.value)*(((((-1.0)*cj12*x6032))+(((-1.0)*r10*sj12))))))+IKsqr(((((-1.0)*sj11*sj12*x6032))+((cj11*r12))+((cj12*r10*sj11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x6033.value)*(((((-1.0)*cj12*x6032))+(((-1.0)*r10*sj12))))), ((((-1.0)*sj11*sj12*x6032))+((cj11*r12))+((cj12*r10*sj11))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x6034=IKsin(j7);
IkReal x6035=IKcos(j7);
IkReal x6036=(cj11*cj12);
IkReal x6037=(r10*sj12);
IkReal x6038=(cj12*sj11);
IkReal x6039=(cj12*r01);
IkReal x6040=(cj12*r11);
IkReal x6041=(r00*sj12);
IkReal x6042=((1.0)*sj11);
IkReal x6043=(r01*sj12);
IkReal x6044=((1.0)*r11*sj12);
IkReal x6045=(cj8*x6034);
IkReal x6046=(cj8*x6035);
IkReal x6047=(sj8*x6035);
IkReal x6048=(sj8*x6034);
evalcond[0]=(x6037+x6040+x6045);
evalcond[1]=(x6039+x6041+x6046);
evalcond[2]=(x6034+(((-1.0)*x6042*x6043))+((cj11*r02))+((r00*x6038)));
evalcond[3]=(((cj11*r12))+((r10*x6038))+(((-1.0)*r11*sj12*x6042))+(((-1.0)*x6035)));
evalcond[4]=(x6047+(((-1.0)*r02*x6042))+(((-1.0)*cj11*x6043))+((r00*x6036)));
evalcond[5]=((((-1.0)*cj11*x6044))+x6048+((r10*x6036))+(((-1.0)*r12*x6042)));
evalcond[6]=((((0.00043624)*x6046))+(((0.42)*x6047))+(((-0.00043624)*x6035))+(((-1.0)*px))+(((-0.4)*x6041))+(((-0.4)*x6039)));
evalcond[7]=((((0.00043624)*x6045))+(((0.42)*x6048))+(((-0.00043624)*x6034))+(((-1.0)*py))+(((-0.4)*x6040))+(((-0.4)*x6037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x6049=((1.0)*cj12);
IkReal x6050=((1.0)*sj12);
CheckValue<IkReal> x6051 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x6050))+(((-1.0)*r11*x6049)))),IkReal(((((-1.0)*r01*x6049))+(((-1.0)*r00*x6050)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6051.valid){
continue;
}
CheckValue<IkReal> x6052=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x6052.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x6051.value)+(((1.5707963267949)*(x6052.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x6053=IKsin(j7);
IkReal x6054=IKcos(j7);
IkReal x6055=(cj11*cj12);
IkReal x6056=(r10*sj12);
IkReal x6057=(cj12*sj11);
IkReal x6058=(cj12*r01);
IkReal x6059=(cj12*r11);
IkReal x6060=(r00*sj12);
IkReal x6061=((1.0)*sj11);
IkReal x6062=(r01*sj12);
IkReal x6063=((1.0)*r11*sj12);
IkReal x6064=(cj8*x6053);
IkReal x6065=(cj8*x6054);
IkReal x6066=(sj8*x6054);
IkReal x6067=(sj8*x6053);
evalcond[0]=(x6059+x6056+x6064);
evalcond[1]=(x6058+x6065+x6060);
evalcond[2]=(((r00*x6057))+x6053+(((-1.0)*x6061*x6062))+((cj11*r02)));
evalcond[3]=((((-1.0)*x6054))+((cj11*r12))+(((-1.0)*r11*sj12*x6061))+((r10*x6057)));
evalcond[4]=(((r00*x6055))+x6066+(((-1.0)*cj11*x6062))+(((-1.0)*r02*x6061)));
evalcond[5]=(x6067+(((-1.0)*cj11*x6063))+((r10*x6055))+(((-1.0)*r12*x6061)));
evalcond[6]=((((-0.4)*x6060))+(((0.42)*x6066))+(((-0.4)*x6058))+(((-1.0)*px))+(((-0.00043624)*x6054))+(((0.00043624)*x6065)));
evalcond[7]=((((0.42)*x6067))+(((-0.4)*x6056))+(((-0.4)*x6059))+(((-1.0)*py))+(((-0.00043624)*x6053))+(((0.00043624)*x6064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7eval[0]=cj8;
j7eval[1]=((IKabs((((r10*sj12))+((cj12*r11)))))+(IKabs((((r00*sj12))+((cj12*r01))))));
j7eval[2]=IKsign(cj8);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7eval[0]=cj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7eval[0]=cj8;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x6068=IKPowWithIntegerCheck(cj8,-1);
if(!x6068.valid){
continue;
}
CheckValue<IkReal> x6069=IKPowWithIntegerCheck(sj8,-1);
if(!x6069.valid){
continue;
}
if( IKabs(((x6068.value)*((((r10*sj12))+((cj12*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6069.value)*((((r02*sj11))+((cj11*r01*sj12))+(((-1.0)*cj11*cj12*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6068.value)*((((r10*sj12))+((cj12*r11))))))+IKsqr(((x6069.value)*((((r02*sj11))+((cj11*r01*sj12))+(((-1.0)*cj11*cj12*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x6068.value)*((((r10*sj12))+((cj12*r11))))), ((x6069.value)*((((r02*sj11))+((cj11*r01*sj12))+(((-1.0)*cj11*cj12*r00))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x6070=IKcos(j7);
IkReal x6071=IKsin(j7);
IkReal x6072=((0.00043624)*cj8);
IkReal x6073=(cj11*cj12);
IkReal x6074=((0.4)*sj12);
IkReal x6075=(cj12*sj11);
IkReal x6076=(cj12*r01);
IkReal x6077=(cj12*r11);
IkReal x6078=((1.0)*cj8);
IkReal x6079=((1.0)*sj11);
IkReal x6080=(r01*sj12);
IkReal x6081=((1.0)*r11*sj12);
IkReal x6082=(sj8*x6070);
IkReal x6083=(sj8*x6071);
evalcond[0]=(x6077+((r10*sj12))+(((-1.0)*x6071*x6078)));
evalcond[1]=(x6076+((r00*sj12))+(((-1.0)*x6070*x6078)));
evalcond[2]=(x6070+((cj11*r12))+((r10*x6075))+(((-1.0)*r11*sj12*x6079)));
evalcond[3]=((((-1.0)*x6071))+((cj11*r02))+(((-1.0)*x6079*x6080))+((r00*x6075)));
evalcond[4]=(x6082+(((-1.0)*r02*x6079))+(((-1.0)*cj11*x6080))+((r00*x6073)));
evalcond[5]=(x6083+(((-1.0)*r12*x6079))+((r10*x6073))+(((-1.0)*cj11*x6081)));
evalcond[6]=((((0.42)*x6082))+(((-0.00043624)*x6070))+(((-1.0)*r00*x6074))+(((-0.4)*x6076))+(((-1.0)*px))+(((-1.0)*x6070*x6072)));
evalcond[7]=((((0.42)*x6083))+(((-0.00043624)*x6071))+(((-1.0)*r10*x6074))+(((-0.4)*x6077))+(((-1.0)*py))+(((-1.0)*x6071*x6072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x6084=IKPowWithIntegerCheck(cj8,-1);
if(!x6084.valid){
continue;
}
if( IKabs((((cj12*r00*sj11))+(((-1.0)*r01*sj11*sj12))+((cj11*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6084.value)*((((r00*sj12))+((cj12*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj12*r00*sj11))+(((-1.0)*r01*sj11*sj12))+((cj11*r02))))+IKsqr(((x6084.value)*((((r00*sj12))+((cj12*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((cj12*r00*sj11))+(((-1.0)*r01*sj11*sj12))+((cj11*r02))), ((x6084.value)*((((r00*sj12))+((cj12*r01))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x6085=IKcos(j7);
IkReal x6086=IKsin(j7);
IkReal x6087=((0.00043624)*cj8);
IkReal x6088=(cj11*cj12);
IkReal x6089=((0.4)*sj12);
IkReal x6090=(cj12*sj11);
IkReal x6091=(cj12*r01);
IkReal x6092=(cj12*r11);
IkReal x6093=((1.0)*cj8);
IkReal x6094=((1.0)*sj11);
IkReal x6095=(r01*sj12);
IkReal x6096=((1.0)*r11*sj12);
IkReal x6097=(sj8*x6085);
IkReal x6098=(sj8*x6086);
evalcond[0]=(x6092+((r10*sj12))+(((-1.0)*x6086*x6093)));
evalcond[1]=(x6091+((r00*sj12))+(((-1.0)*x6085*x6093)));
evalcond[2]=(((r10*x6090))+x6085+((cj11*r12))+(((-1.0)*r11*sj12*x6094)));
evalcond[3]=(((r00*x6090))+(((-1.0)*x6086))+((cj11*r02))+(((-1.0)*x6094*x6095)));
evalcond[4]=(x6097+((r00*x6088))+(((-1.0)*cj11*x6095))+(((-1.0)*r02*x6094)));
evalcond[5]=(((r10*x6088))+x6098+(((-1.0)*cj11*x6096))+(((-1.0)*r12*x6094)));
evalcond[6]=((((-1.0)*x6085*x6087))+(((-1.0)*r00*x6089))+(((-0.4)*x6091))+(((0.42)*x6097))+(((-1.0)*px))+(((-0.00043624)*x6085)));
evalcond[7]=((((-0.4)*x6092))+(((0.42)*x6098))+(((-1.0)*py))+(((-1.0)*x6086*x6087))+(((-0.00043624)*x6086))+(((-1.0)*r10*x6089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x6099=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x6099.valid){
continue;
}
CheckValue<IkReal> x6100 = IKatan2WithCheck(IkReal((((r10*sj12))+((cj12*r11)))),IkReal((((r00*sj12))+((cj12*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6100.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6099.value)))+(x6100.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x6101=IKcos(j7);
IkReal x6102=IKsin(j7);
IkReal x6103=((0.00043624)*cj8);
IkReal x6104=(cj11*cj12);
IkReal x6105=((0.4)*sj12);
IkReal x6106=(cj12*sj11);
IkReal x6107=(cj12*r01);
IkReal x6108=(cj12*r11);
IkReal x6109=((1.0)*cj8);
IkReal x6110=((1.0)*sj11);
IkReal x6111=(r01*sj12);
IkReal x6112=((1.0)*r11*sj12);
IkReal x6113=(sj8*x6101);
IkReal x6114=(sj8*x6102);
evalcond[0]=((((-1.0)*x6102*x6109))+x6108+((r10*sj12)));
evalcond[1]=(x6107+(((-1.0)*x6101*x6109))+((r00*sj12)));
evalcond[2]=(x6101+((r10*x6106))+((cj11*r12))+(((-1.0)*r11*sj12*x6110)));
evalcond[3]=(((cj11*r02))+(((-1.0)*x6102))+((r00*x6106))+(((-1.0)*x6110*x6111)));
evalcond[4]=((((-1.0)*cj11*x6111))+x6113+(((-1.0)*r02*x6110))+((r00*x6104)));
evalcond[5]=((((-1.0)*r12*x6110))+x6114+((r10*x6104))+(((-1.0)*cj11*x6112)));
evalcond[6]=((((-1.0)*r00*x6105))+(((-1.0)*x6101*x6103))+(((-1.0)*px))+(((-0.4)*x6107))+(((-0.00043624)*x6101))+(((0.42)*x6113)));
evalcond[7]=((((-1.0)*x6102*x6103))+(((-1.0)*py))+(((-1.0)*r10*x6105))+(((-0.4)*x6108))+(((-0.00043624)*x6102))+(((0.42)*x6114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x6121=IKPowWithIntegerCheck(sj8,-1);
if(!x6121.valid){
continue;
}
IkReal x6115=x6121.value;
IkReal x6116=((1.0)*sj9);
IkReal x6117=(r02*sj11);
IkReal x6118=((1.0)*sj8);
IkReal x6119=(cj11*r01*sj12);
IkReal x6120=(cj11*cj12*r00);
CheckValue<IkReal> x6122=IKPowWithIntegerCheck(cj8,-1);
if(!x6122.valid){
continue;
}
CheckValue<IkReal> x6123=IKPowWithIntegerCheck(cj9,-1);
if(!x6123.valid){
continue;
}
if( IKabs((x6115*(x6122.value)*(x6123.value)*(((((-1.0)*r10*sj12*x6118))+(((-1.0)*x6116*x6119))+(((-1.0)*x6116*x6117))+((sj9*x6120))+(((-1.0)*cj12*r11*x6118)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x6115*((x6119+x6117+(((-1.0)*x6120)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x6115*(x6122.value)*(x6123.value)*(((((-1.0)*r10*sj12*x6118))+(((-1.0)*x6116*x6119))+(((-1.0)*x6116*x6117))+((sj9*x6120))+(((-1.0)*cj12*r11*x6118))))))+IKsqr((x6115*((x6119+x6117+(((-1.0)*x6120))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x6115*(x6122.value)*(x6123.value)*(((((-1.0)*r10*sj12*x6118))+(((-1.0)*x6116*x6119))+(((-1.0)*x6116*x6117))+((sj9*x6120))+(((-1.0)*cj12*r11*x6118))))), (x6115*((x6119+x6117+(((-1.0)*x6120))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x6124=IKcos(j7);
IkReal x6125=IKsin(j7);
IkReal x6126=((1.0)*sj11);
IkReal x6127=(r11*sj12);
IkReal x6128=(cj11*cj12);
IkReal x6129=((0.4)*sj12);
IkReal x6130=(cj12*sj11);
IkReal x6131=(cj12*r01);
IkReal x6132=(cj12*r11);
IkReal x6133=((1.0)*cj11);
IkReal x6134=(r01*sj12);
IkReal x6135=(sj9*x6124);
IkReal x6136=(sj8*x6124);
IkReal x6137=(sj8*x6125);
IkReal x6138=(cj9*x6124);
IkReal x6139=((0.00043624)*x6125);
IkReal x6140=(cj8*x6125);
evalcond[0]=(x6132+x6135+((cj9*x6140))+((r10*sj12)));
evalcond[1]=((((-1.0)*r02*x6126))+x6136+(((-1.0)*x6133*x6134))+((r00*x6128)));
evalcond[2]=(x6137+(((-1.0)*r12*x6126))+((r10*x6128))+(((-1.0)*x6127*x6133)));
evalcond[3]=(x6131+((r00*sj12))+(((-1.0)*sj9*x6125))+((cj8*x6138)));
evalcond[4]=((((-1.0)*x6126*x6134))+((cj11*r02))+((cj8*x6135))+((cj9*x6125))+((r00*x6130)));
evalcond[5]=(((sj9*x6140))+(((-1.0)*x6126*x6127))+((r10*x6130))+((cj11*r12))+(((-1.0)*x6138)));
evalcond[6]=((((0.00043624)*cj8*x6138))+(((0.42)*x6136))+(((-1.0)*px))+(((-1.0)*r00*x6129))+(((-1.0)*sj9*x6139))+(((-0.00043624)*x6124))+(((-0.4)*x6131)));
evalcond[7]=(((cj8*cj9*x6139))+(((0.42)*x6137))+(((-1.0)*py))+(((-1.0)*x6139))+(((0.00043624)*x6135))+(((-1.0)*r10*x6129))+(((-0.4)*x6132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x6146=IKPowWithIntegerCheck(sj8,-1);
if(!x6146.valid){
continue;
}
IkReal x6141=x6146.value;
IkReal x6142=(cj8*cj9);
IkReal x6143=(r02*sj11);
IkReal x6144=(cj11*r01*sj12);
IkReal x6145=((1.0)*cj11*cj12*r00);
CheckValue<IkReal> x6147=IKPowWithIntegerCheck(sj9,-1);
if(!x6147.valid){
continue;
}
if( IKabs((x6141*(x6147.value)*((((r00*sj12*sj8))+(((-1.0)*x6142*x6145))+((x6142*x6143))+((x6142*x6144))+((cj12*r01*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x6141*(((((-1.0)*x6145))+x6143+x6144)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x6141*(x6147.value)*((((r00*sj12*sj8))+(((-1.0)*x6142*x6145))+((x6142*x6143))+((x6142*x6144))+((cj12*r01*sj8))))))+IKsqr((x6141*(((((-1.0)*x6145))+x6143+x6144))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x6141*(x6147.value)*((((r00*sj12*sj8))+(((-1.0)*x6142*x6145))+((x6142*x6143))+((x6142*x6144))+((cj12*r01*sj8))))), (x6141*(((((-1.0)*x6145))+x6143+x6144))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x6148=IKcos(j7);
IkReal x6149=IKsin(j7);
IkReal x6150=((1.0)*sj11);
IkReal x6151=(r11*sj12);
IkReal x6152=(cj11*cj12);
IkReal x6153=((0.4)*sj12);
IkReal x6154=(cj12*sj11);
IkReal x6155=(cj12*r01);
IkReal x6156=(cj12*r11);
IkReal x6157=((1.0)*cj11);
IkReal x6158=(r01*sj12);
IkReal x6159=(sj9*x6148);
IkReal x6160=(sj8*x6148);
IkReal x6161=(sj8*x6149);
IkReal x6162=(cj9*x6148);
IkReal x6163=((0.00043624)*x6149);
IkReal x6164=(cj8*x6149);
evalcond[0]=(x6156+x6159+((cj9*x6164))+((r10*sj12)));
evalcond[1]=(((r00*x6152))+(((-1.0)*r02*x6150))+x6160+(((-1.0)*x6157*x6158)));
evalcond[2]=((((-1.0)*x6151*x6157))+x6161+(((-1.0)*r12*x6150))+((r10*x6152)));
evalcond[3]=(x6155+(((-1.0)*sj9*x6149))+((r00*sj12))+((cj8*x6162)));
evalcond[4]=(((r00*x6154))+(((-1.0)*x6150*x6158))+((cj9*x6149))+((cj11*r02))+((cj8*x6159)));
evalcond[5]=((((-1.0)*x6150*x6151))+((cj11*r12))+(((-1.0)*x6162))+((r10*x6154))+((sj9*x6164)));
evalcond[6]=((((-0.00043624)*x6148))+(((-1.0)*px))+(((-1.0)*r00*x6153))+(((-0.4)*x6155))+(((0.42)*x6160))+(((0.00043624)*cj8*x6162))+(((-1.0)*sj9*x6163)));
evalcond[7]=((((-1.0)*x6163))+(((-1.0)*py))+(((-1.0)*r10*x6153))+(((-0.4)*x6156))+((cj8*cj9*x6163))+(((0.42)*x6161))+(((0.00043624)*x6159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x6165=cj9*cj9;
IkReal x6166=((1.0)*sj9);
IkReal x6167=(cj12*r11);
IkReal x6168=(r10*sj12);
IkReal x6169=(r00*sj12);
IkReal x6170=(cj12*r01);
IkReal x6171=((1.0)*cj8*cj9);
CheckValue<IkReal> x6172=IKPowWithIntegerCheck(IKsign(((1.0)+((x6165*(cj8*cj8)))+(((-1.0)*x6165)))),-1);
if(!x6172.valid){
continue;
}
CheckValue<IkReal> x6173 = IKatan2WithCheck(IkReal(((((-1.0)*x6168*x6171))+(((-1.0)*x6167*x6171))+((sj9*x6169))+((sj9*x6170)))),IkReal(((((-1.0)*x6166*x6168))+(((-1.0)*x6166*x6167))+(((-1.0)*x6170*x6171))+(((-1.0)*x6169*x6171)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6173.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6172.value)))+(x6173.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x6174=IKcos(j7);
IkReal x6175=IKsin(j7);
IkReal x6176=((1.0)*sj11);
IkReal x6177=(r11*sj12);
IkReal x6178=(cj11*cj12);
IkReal x6179=((0.4)*sj12);
IkReal x6180=(cj12*sj11);
IkReal x6181=(cj12*r01);
IkReal x6182=(cj12*r11);
IkReal x6183=((1.0)*cj11);
IkReal x6184=(r01*sj12);
IkReal x6185=(sj9*x6174);
IkReal x6186=(sj8*x6174);
IkReal x6187=(sj8*x6175);
IkReal x6188=(cj9*x6174);
IkReal x6189=((0.00043624)*x6175);
IkReal x6190=(cj8*x6175);
evalcond[0]=(x6185+x6182+((cj9*x6190))+((r10*sj12)));
evalcond[1]=(x6186+((r00*x6178))+(((-1.0)*x6183*x6184))+(((-1.0)*r02*x6176)));
evalcond[2]=(((r10*x6178))+x6187+(((-1.0)*r12*x6176))+(((-1.0)*x6177*x6183)));
evalcond[3]=((((-1.0)*sj9*x6175))+x6181+((r00*sj12))+((cj8*x6188)));
evalcond[4]=(((r00*x6180))+((cj9*x6175))+((cj11*r02))+(((-1.0)*x6176*x6184))+((cj8*x6185)));
evalcond[5]=((((-1.0)*x6188))+(((-1.0)*x6176*x6177))+((cj11*r12))+((r10*x6180))+((sj9*x6190)));
evalcond[6]=((((-0.00043624)*x6174))+(((0.42)*x6186))+(((-0.4)*x6181))+(((-1.0)*sj9*x6189))+(((-1.0)*px))+(((-1.0)*r00*x6179))+(((0.00043624)*cj8*x6188)));
evalcond[7]=((((0.42)*x6187))+((cj8*cj9*x6189))+(((-0.4)*x6182))+(((-1.0)*py))+(((0.00043624)*x6185))+(((-1.0)*x6189))+(((-1.0)*r10*x6179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=0;
cj10=1.0;
j10=0;
IkReal x6191=((1.0)*cj12);
IkReal x6192=((1.0)*sj12);
j7eval[0]=sj8;
j7eval[1]=IKsign(sj8);
j7eval[2]=((IKabs(((((-1.0)*r00*x6192))+(((-1.0)*r01*x6191)))))+(IKabs(((((-1.0)*r10*x6192))+(((-1.0)*r11*x6191))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
IkReal x6193=cj12*cj12;
IkReal x6194=r21*r21;
IkReal x6195=(cj9*sj8);
IkReal x6196=(r21*sj12);
IkReal x6197=(sj8*sj9);
IkReal x6198=(cj12*r20);
IkReal x6199=((r22*r22)+x6194+(((-1.0)*x6193*x6194))+((x6193*(r20*r20)))+(((-2.0)*x6196*x6198)));
j11eval[0]=x6199;
j11eval[1]=IKsign(x6199);
j11eval[2]=((IKabs((((x6195*x6196))+(((-1.0)*x6195*x6198))+((r22*x6197)))))+(IKabs(((((-1.0)*x6196*x6197))+((r22*x6195))+((x6197*x6198))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=0;
cj10=1.0;
j10=0;
j7eval[0]=((962.772785622593)+(((-1.0)*sj8))+(((-962.772785622593)*(cj8*cj8)))+((cj8*cj9*sj8)));
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=1.0;
j8=0;
IkReal x6200=((68162500000.0)*sj9);
IkReal x6201=((68162500000.0)*px);
IkReal x6202=((68162500000.0)*py);
j7eval[0]=((1.0)+(((-1.0)*cj9)));
j7eval[1]=IKsign(((59470418.0)+(((-59470418.0)*cj9))));
j7eval[2]=((IKabs((((cj9*x6202))+(((-1.0)*x6202))+(((-1.0)*px*x6200)))))+(IKabs((((py*x6200))+((cj9*x6201))+(((-1.0)*x6201))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=1.0;
j8=0;
j11eval[0]=((IKabs(((((-1.0)*r21*sj12))+((cj12*r20)))))+(IKabs(r22)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=1.0;
j8=0;
j11eval[0]=((IKabs(r22))+(IKabs(((((-1.0)*cj12*r20))+((r21*sj12))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x6204 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r20))+((r21*sj12)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x6204.valid){
continue;
}
IkReal x6203=x6204.value;
j11array[0]=((-1.0)*x6203);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x6203)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[1];
IkReal x6205=IKsin(j11);
evalcond[0]=((((-1.0)*r21*sj12*x6205))+((r22*(IKcos(j11))))+((cj12*r20*x6205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=1.0;
j8=0;
IkReal x6206=((68162500000.0)*sj9);
IkReal x6207=((68162500000.0)*px);
IkReal x6208=((68162500000.0)*py);
j7eval[0]=((1.0)+(((-1.0)*cj9)));
j7eval[1]=IKsign(((59470418.0)+(((-59470418.0)*cj9))));
j7eval[2]=((IKabs((((cj9*x6208))+(((-1.0)*x6208))+(((-1.0)*px*x6206)))))+(IKabs((((py*x6206))+((cj9*x6207))+(((-1.0)*x6207))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=1.0;
j8=0;
j7eval[0]=((-1.0)+cj9);
j7eval[1]=IKsign(((-5453.0)+(((5453.0)*cj9))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=1.0;
j8=0;
j7eval[0]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x6209=((5453.0)*cj9);
IkReal x6210=(cj11*r02);
IkReal x6211=(r01*sj11*sj12);
IkReal x6212=(cj12*r00*sj11);
CheckValue<IkReal> x6213=IKPowWithIntegerCheck(sj9,-1);
if(!x6213.valid){
continue;
}
if( IKabs((x6211+(((-1.0)*x6210))+(((-1.0)*x6212))+(((-2292.31615624427)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.000183385292499542)*(x6213.value)*(((((-1.0)*x6209*x6211))+((x6209*x6210))+((x6209*x6212))+(((5453.0)*x6211))+(((-5453.0)*x6210))+(((-5453.0)*x6212))+(((12500000.0)*cj9*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x6211+(((-1.0)*x6210))+(((-1.0)*x6212))+(((-2292.31615624427)*py))))+IKsqr(((0.000183385292499542)*(x6213.value)*(((((-1.0)*x6209*x6211))+((x6209*x6210))+((x6209*x6212))+(((5453.0)*x6211))+(((-5453.0)*x6210))+(((-5453.0)*x6212))+(((12500000.0)*cj9*py))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x6211+(((-1.0)*x6210))+(((-1.0)*x6212))+(((-2292.31615624427)*py))), ((0.000183385292499542)*(x6213.value)*(((((-1.0)*x6209*x6211))+((x6209*x6210))+((x6209*x6212))+(((5453.0)*x6211))+(((-5453.0)*x6210))+(((-5453.0)*x6212))+(((12500000.0)*cj9*py))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x6214=IKcos(j7);
IkReal x6215=IKsin(j7);
IkReal x6216=(r11*sj12);
IkReal x6217=((1.0)*sj11);
IkReal x6218=(r01*sj12);
IkReal x6219=(cj12*sj11);
IkReal x6220=(sj9*x6214);
IkReal x6221=(cj9*x6215);
IkReal x6222=(cj9*x6214);
IkReal x6223=((1.0)*cj11*cj12);
IkReal x6224=((0.00043624)*x6214);
IkReal x6225=((0.00043624)*x6215);
IkReal x6226=(sj9*x6215);
IkReal x6227=(x6220+x6221);
evalcond[0]=((((-1.0)*sj9*x6225))+(((-1.0)*x6224))+(((-1.0)*px))+(((0.00043624)*x6222)));
evalcond[1]=((((-1.0)*x6225))+(((-1.0)*py))+(((0.00043624)*x6221))+(((0.00043624)*x6220)));
evalcond[2]=(x6227+((r00*x6219))+((cj11*r02))+(((-1.0)*x6217*x6218)));
evalcond[3]=(x6227+((r12*sj11))+((cj11*x6216))+(((-1.0)*r10*x6223)));
evalcond[4]=(x6226+((r10*x6219))+((cj11*r12))+(((-1.0)*x6222))+(((-1.0)*x6216*x6217)));
evalcond[5]=(((r02*sj11))+x6222+(((-1.0)*r00*x6223))+(((-1.0)*x6226))+((cj11*x6218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x6228=((12500000.0)*px);
IkReal x6229=((5453.0)*sj11);
IkReal x6230=(cj12*r00);
IkReal x6231=(r01*sj12);
IkReal x6232=((5453.0)*cj11*r02);
CheckValue<IkReal> x6233 = IKatan2WithCheck(IkReal((((cj9*x6229*x6230))+(((-1.0)*x6232))+(((-1.0)*cj9*x6229*x6231))+((x6229*x6231))+((cj9*x6232))+((sj9*x6228))+(((-1.0)*x6229*x6230)))),IkReal(((((-1.0)*sj9*x6229*x6231))+(((-1.0)*cj9*x6228))+((sj9*x6232))+((sj9*x6229*x6230)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6233.valid){
continue;
}
CheckValue<IkReal> x6234=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((5453.0)*cj9)))),-1);
if(!x6234.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x6233.value)+(((1.5707963267949)*(x6234.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x6235=IKcos(j7);
IkReal x6236=IKsin(j7);
IkReal x6237=(r11*sj12);
IkReal x6238=((1.0)*sj11);
IkReal x6239=(r01*sj12);
IkReal x6240=(cj12*sj11);
IkReal x6241=(sj9*x6235);
IkReal x6242=(cj9*x6236);
IkReal x6243=(cj9*x6235);
IkReal x6244=((1.0)*cj11*cj12);
IkReal x6245=((0.00043624)*x6235);
IkReal x6246=((0.00043624)*x6236);
IkReal x6247=(sj9*x6236);
IkReal x6248=(x6241+x6242);
evalcond[0]=((((-1.0)*x6245))+(((0.00043624)*x6243))+(((-1.0)*sj9*x6246))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*x6246))+(((0.00043624)*x6241))+(((0.00043624)*x6242))+(((-1.0)*py)));
evalcond[2]=(x6248+((cj11*r02))+(((-1.0)*x6238*x6239))+((r00*x6240)));
evalcond[3]=(x6248+((r12*sj11))+(((-1.0)*r10*x6244))+((cj11*x6237)));
evalcond[4]=(x6247+(((-1.0)*x6243))+((r10*x6240))+((cj11*r12))+(((-1.0)*x6237*x6238)));
evalcond[5]=(((r02*sj11))+x6243+(((-1.0)*x6247))+(((-1.0)*r00*x6244))+((cj11*x6239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x6249=((68162500000.0)*py);
IkReal x6250=((68162500000.0)*px);
CheckValue<IkReal> x6251=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((-59470418.0)*cj9)))),-1);
if(!x6251.valid){
continue;
}
CheckValue<IkReal> x6252 = IKatan2WithCheck(IkReal(((((-1.0)*sj9*x6250))+((cj9*x6249))+(((-1.0)*x6249)))),IkReal((((cj9*x6250))+(((-1.0)*x6250))+((sj9*x6249)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6252.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6251.value)))+(x6252.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x6253=IKcos(j7);
IkReal x6254=IKsin(j7);
IkReal x6255=(r11*sj12);
IkReal x6256=((1.0)*sj11);
IkReal x6257=(r01*sj12);
IkReal x6258=(cj12*sj11);
IkReal x6259=(sj9*x6253);
IkReal x6260=(cj9*x6254);
IkReal x6261=(cj9*x6253);
IkReal x6262=((1.0)*cj11*cj12);
IkReal x6263=((0.00043624)*x6253);
IkReal x6264=((0.00043624)*x6254);
IkReal x6265=(sj9*x6254);
IkReal x6266=(x6259+x6260);
evalcond[0]=((((-1.0)*px))+(((-1.0)*x6263))+(((0.00043624)*x6261))+(((-1.0)*sj9*x6264)));
evalcond[1]=((((-1.0)*py))+(((-1.0)*x6264))+(((0.00043624)*x6260))+(((0.00043624)*x6259)));
evalcond[2]=(((r00*x6258))+x6266+((cj11*r02))+(((-1.0)*x6256*x6257)));
evalcond[3]=(x6266+((r12*sj11))+((cj11*x6255))+(((-1.0)*r10*x6262)));
evalcond[4]=(x6265+(((-1.0)*x6261))+((r10*x6258))+((cj11*r12))+(((-1.0)*x6255*x6256)));
evalcond[5]=(((r02*sj11))+x6261+(((-1.0)*x6265))+((cj11*x6257))+(((-1.0)*r00*x6262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x6268 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*sj12))+((cj12*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6268.valid){
continue;
}
IkReal x6267=x6268.value;
j11array[0]=((-1.0)*x6267);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x6267)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[1];
IkReal x6269=IKcos(j11);
evalcond[0]=(((r22*(IKsin(j11))))+((r21*sj12*x6269))+(((-1.0)*cj12*r20*x6269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=1.0;
j8=0;
IkReal x6270=((68162500000.0)*sj9);
IkReal x6271=((68162500000.0)*px);
IkReal x6272=((68162500000.0)*py);
j7eval[0]=((1.0)+(((-1.0)*cj9)));
j7eval[1]=IKsign(((59470418.0)+(((-59470418.0)*cj9))));
j7eval[2]=((IKabs((((cj9*x6272))+(((-1.0)*x6272))+(((-1.0)*px*x6270)))))+(IKabs((((py*x6270))+((cj9*x6271))+(((-1.0)*x6271))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=1.0;
j8=0;
j7eval[0]=((-1.0)+cj9);
j7eval[1]=IKsign(((-5453.0)+(((5453.0)*cj9))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=1.0;
j8=0;
j7eval[0]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x6273=((5453.0)*cj9);
IkReal x6274=(cj11*r02);
IkReal x6275=(r01*sj11*sj12);
IkReal x6276=(cj12*r00*sj11);
CheckValue<IkReal> x6277=IKPowWithIntegerCheck(sj9,-1);
if(!x6277.valid){
continue;
}
if( IKabs((x6275+(((-1.0)*x6276))+(((-1.0)*x6274))+(((-2292.31615624427)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.000183385292499542)*(x6277.value)*(((((-1.0)*x6273*x6275))+((x6273*x6274))+((x6273*x6276))+(((-5453.0)*x6276))+(((-5453.0)*x6274))+(((12500000.0)*cj9*py))+(((5453.0)*x6275)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x6275+(((-1.0)*x6276))+(((-1.0)*x6274))+(((-2292.31615624427)*py))))+IKsqr(((0.000183385292499542)*(x6277.value)*(((((-1.0)*x6273*x6275))+((x6273*x6274))+((x6273*x6276))+(((-5453.0)*x6276))+(((-5453.0)*x6274))+(((12500000.0)*cj9*py))+(((5453.0)*x6275))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x6275+(((-1.0)*x6276))+(((-1.0)*x6274))+(((-2292.31615624427)*py))), ((0.000183385292499542)*(x6277.value)*(((((-1.0)*x6273*x6275))+((x6273*x6274))+((x6273*x6276))+(((-5453.0)*x6276))+(((-5453.0)*x6274))+(((12500000.0)*cj9*py))+(((5453.0)*x6275))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x6278=IKcos(j7);
IkReal x6279=IKsin(j7);
IkReal x6280=(r11*sj12);
IkReal x6281=((1.0)*sj11);
IkReal x6282=(r01*sj12);
IkReal x6283=(cj12*sj11);
IkReal x6284=(sj9*x6278);
IkReal x6285=(cj9*x6279);
IkReal x6286=(cj9*x6278);
IkReal x6287=((1.0)*cj11*cj12);
IkReal x6288=((0.00043624)*x6278);
IkReal x6289=((0.00043624)*x6279);
IkReal x6290=(sj9*x6279);
IkReal x6291=(x6284+x6285);
evalcond[0]=((((0.00043624)*x6286))+(((-1.0)*px))+(((-1.0)*x6288))+(((-1.0)*sj9*x6289)));
evalcond[1]=((((0.00043624)*x6285))+(((0.00043624)*x6284))+(((-1.0)*py))+(((-1.0)*x6289)));
evalcond[2]=(x6291+((cj11*r02))+(((-1.0)*x6281*x6282))+((r00*x6283)));
evalcond[3]=(x6291+((r12*sj11))+(((-1.0)*r10*x6287))+((cj11*x6280)));
evalcond[4]=(x6290+((cj11*r12))+((r10*x6283))+(((-1.0)*x6280*x6281))+(((-1.0)*x6286)));
evalcond[5]=(((r02*sj11))+(((-1.0)*x6290))+x6286+((cj11*x6282))+(((-1.0)*r00*x6287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x6292=((12500000.0)*px);
IkReal x6293=((5453.0)*sj11);
IkReal x6294=(cj12*r00);
IkReal x6295=(r01*sj12);
IkReal x6296=((5453.0)*cj11*r02);
CheckValue<IkReal> x6297=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((5453.0)*cj9)))),-1);
if(!x6297.valid){
continue;
}
CheckValue<IkReal> x6298 = IKatan2WithCheck(IkReal((((cj9*x6296))+((sj9*x6292))+((cj9*x6293*x6294))+(((-1.0)*x6296))+(((-1.0)*x6293*x6294))+(((-1.0)*cj9*x6293*x6295))+((x6293*x6295)))),IkReal((((sj9*x6296))+(((-1.0)*cj9*x6292))+(((-1.0)*sj9*x6293*x6295))+((sj9*x6293*x6294)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6298.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6297.value)))+(x6298.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x6299=IKcos(j7);
IkReal x6300=IKsin(j7);
IkReal x6301=(r11*sj12);
IkReal x6302=((1.0)*sj11);
IkReal x6303=(r01*sj12);
IkReal x6304=(cj12*sj11);
IkReal x6305=(sj9*x6299);
IkReal x6306=(cj9*x6300);
IkReal x6307=(cj9*x6299);
IkReal x6308=((1.0)*cj11*cj12);
IkReal x6309=((0.00043624)*x6299);
IkReal x6310=((0.00043624)*x6300);
IkReal x6311=(sj9*x6300);
IkReal x6312=(x6305+x6306);
evalcond[0]=((((-1.0)*x6309))+(((-1.0)*px))+(((0.00043624)*x6307))+(((-1.0)*sj9*x6310)));
evalcond[1]=((((-1.0)*x6310))+(((-1.0)*py))+(((0.00043624)*x6305))+(((0.00043624)*x6306)));
evalcond[2]=((((-1.0)*x6302*x6303))+x6312+((r00*x6304))+((cj11*r02)));
evalcond[3]=(((cj11*x6301))+x6312+((r12*sj11))+(((-1.0)*r10*x6308)));
evalcond[4]=(x6311+((cj11*r12))+(((-1.0)*x6307))+((r10*x6304))+(((-1.0)*x6301*x6302)));
evalcond[5]=(((r02*sj11))+((cj11*x6303))+x6307+(((-1.0)*r00*x6308))+(((-1.0)*x6311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x6313=((68162500000.0)*py);
IkReal x6314=((68162500000.0)*px);
CheckValue<IkReal> x6315=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((-59470418.0)*cj9)))),-1);
if(!x6315.valid){
continue;
}
CheckValue<IkReal> x6316 = IKatan2WithCheck(IkReal(((((-1.0)*x6313))+(((-1.0)*sj9*x6314))+((cj9*x6313)))),IkReal(((((-1.0)*x6314))+((sj9*x6313))+((cj9*x6314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6316.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6315.value)))+(x6316.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x6317=IKcos(j7);
IkReal x6318=IKsin(j7);
IkReal x6319=(r11*sj12);
IkReal x6320=((1.0)*sj11);
IkReal x6321=(r01*sj12);
IkReal x6322=(cj12*sj11);
IkReal x6323=(sj9*x6317);
IkReal x6324=(cj9*x6318);
IkReal x6325=(cj9*x6317);
IkReal x6326=((1.0)*cj11*cj12);
IkReal x6327=((0.00043624)*x6317);
IkReal x6328=((0.00043624)*x6318);
IkReal x6329=(sj9*x6318);
IkReal x6330=(x6324+x6323);
evalcond[0]=((((0.00043624)*x6325))+(((-1.0)*sj9*x6328))+(((-1.0)*px))+(((-1.0)*x6327)));
evalcond[1]=((((0.00043624)*x6324))+(((0.00043624)*x6323))+(((-1.0)*py))+(((-1.0)*x6328)));
evalcond[2]=(x6330+(((-1.0)*x6320*x6321))+((cj11*r02))+((r00*x6322)));
evalcond[3]=(x6330+((r12*sj11))+((cj11*x6319))+(((-1.0)*r10*x6326)));
evalcond[4]=((((-1.0)*x6325))+x6329+((r10*x6322))+((cj11*r12))+(((-1.0)*x6319*x6320)));
evalcond[5]=((((-1.0)*r00*x6326))+(((-1.0)*x6329))+((r02*sj11))+x6325+((cj11*x6321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x6331=((68162500000.0)*py);
IkReal x6332=((68162500000.0)*px);
CheckValue<IkReal> x6333=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((-59470418.0)*cj9)))),-1);
if(!x6333.valid){
continue;
}
CheckValue<IkReal> x6334 = IKatan2WithCheck(IkReal(((((-1.0)*sj9*x6332))+((cj9*x6331))+(((-1.0)*x6331)))),IkReal((((cj9*x6332))+((sj9*x6331))+(((-1.0)*x6332)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6334.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6333.value)))+(x6334.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x6335=IKcos(j7);
IkReal x6336=IKsin(j7);
IkReal x6337=((0.00043624)*x6335);
IkReal x6338=((0.00043624)*x6336);
evalcond[0]=((((-1.0)*sj9*x6338))+((cj9*x6337))+(((-1.0)*px))+(((-1.0)*x6337)));
evalcond[1]=(((cj9*x6338))+(((-1.0)*py))+((sj9*x6337))+(((-1.0)*x6338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=1.0;
j8=0;
IkReal x6339=(cj7*sj9);
IkReal x6340=(r21*sj12);
IkReal x6341=((1.0)*cj12);
IkReal x6342=(cj9*sj7);
IkReal x6343=((((-1.0)*r11*x6341))+(((-1.0)*r10*sj12)));
j11eval[0]=x6343;
j11eval[1]=IKsign(x6343);
j11eval[2]=((IKabs((((x6339*x6340))+(((-1.0)*r20*x6341*x6342))+(((-1.0)*r20*x6339*x6341))+((x6340*x6342)))))+(IKabs((((r22*x6339))+((r22*x6342))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=1.0;
j8=0;
IkReal x6344=(cj7*sj9);
IkReal x6345=(r21*sj12);
IkReal x6346=(cj9*sj7);
IkReal x6347=((1.0)*r22);
IkReal x6348=((1.0)*cj12*r20);
IkReal x6349=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x6349;
j11eval[1]=((IKabs(((((-1.0)*x6346*x6347))+(((-1.0)*x6344*x6347)))))+(IKabs((((x6344*x6345))+(((-1.0)*x6346*x6348))+((x6345*x6346))+(((-1.0)*x6344*x6348))))));
j11eval[2]=IKsign(x6349);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=1.0;
j8=0;
IkReal x6350=cj12*cj12;
IkReal x6351=(r11*r21);
IkReal x6352=(cj7*sj9);
IkReal x6353=(r21*sj12);
IkReal x6354=(cj12*r20);
IkReal x6355=(cj9*sj7);
IkReal x6356=((((-1.0)*r10*r20*x6350))+(((-1.0)*r12*r22))+((r11*sj12*x6354))+(((-1.0)*x6351))+((x6350*x6351))+((cj12*r10*x6353)));
j11eval[0]=x6356;
j11eval[1]=IKsign(x6356);
j11eval[2]=((IKabs((((r22*x6355))+((r22*x6352)))))+(IKabs((((x6353*x6355))+(((-1.0)*x6354*x6355))+(((-1.0)*x6352*x6354))+((x6352*x6353))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x6357=cj12*cj12;
IkReal x6358=(cj7*sj9);
IkReal x6359=(r21*sj12);
IkReal x6360=(cj12*r20);
IkReal x6361=(r11*r21);
IkReal x6362=(cj9*sj7);
CheckValue<IkReal> x6363=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x6357))+(((-1.0)*r12*r22))+((r11*sj12*x6360))+(((-1.0)*x6361))+((cj12*r10*x6359))+((x6357*x6361)))),-1);
if(!x6363.valid){
continue;
}
CheckValue<IkReal> x6364 = IKatan2WithCheck(IkReal((((r22*x6358))+((r22*x6362)))),IkReal((((x6359*x6362))+((x6358*x6359))+(((-1.0)*x6360*x6362))+(((-1.0)*x6358*x6360)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6364.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6363.value)))+(x6364.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x6365=IKsin(j11);
IkReal x6366=IKcos(j11);
IkReal x6367=(cj9*sj7);
IkReal x6368=(cj7*sj9);
IkReal x6369=(cj12*r20);
IkReal x6370=(r01*sj12);
IkReal x6371=(cj7*cj9);
IkReal x6372=(sj7*sj9);
IkReal x6373=(r11*sj12);
IkReal x6374=(r21*sj12);
IkReal x6375=((1.0)*x6365);
IkReal x6376=(cj12*x6365);
IkReal x6377=(x6368+x6367);
IkReal x6378=((1.0)*cj12*x6366);
evalcond[0]=(((x6365*x6369))+(((-1.0)*x6374*x6375))+((r22*x6366)));
evalcond[1]=((((-1.0)*x6366*x6369))+((x6366*x6374))+((r22*x6365)));
evalcond[2]=(x6377+((r00*x6376))+(((-1.0)*x6370*x6375))+((r02*x6366)));
evalcond[3]=(x6377+((r12*x6365))+((x6366*x6373))+(((-1.0)*r10*x6378)));
evalcond[4]=(x6372+((r12*x6366))+(((-1.0)*x6373*x6375))+(((-1.0)*x6371))+((r10*x6376)));
evalcond[5]=(x6371+((x6366*x6370))+(((-1.0)*x6372))+((r02*x6365))+(((-1.0)*r00*x6378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x6379=(cj7*sj9);
IkReal x6380=(r21*sj12);
IkReal x6381=(cj9*sj7);
IkReal x6382=((1.0)*r22);
IkReal x6383=((1.0)*cj12*r20);
CheckValue<IkReal> x6384 = IKatan2WithCheck(IkReal(((((-1.0)*x6381*x6383))+((x6380*x6381))+(((-1.0)*x6379*x6383))+((x6379*x6380)))),IkReal(((((-1.0)*x6381*x6382))+(((-1.0)*x6379*x6382)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6384.valid){
continue;
}
CheckValue<IkReal> x6385=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x6385.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x6384.value)+(((1.5707963267949)*(x6385.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x6386=IKsin(j11);
IkReal x6387=IKcos(j11);
IkReal x6388=(cj9*sj7);
IkReal x6389=(cj7*sj9);
IkReal x6390=(cj12*r20);
IkReal x6391=(r01*sj12);
IkReal x6392=(cj7*cj9);
IkReal x6393=(sj7*sj9);
IkReal x6394=(r11*sj12);
IkReal x6395=(r21*sj12);
IkReal x6396=((1.0)*x6386);
IkReal x6397=(cj12*x6386);
IkReal x6398=(x6389+x6388);
IkReal x6399=((1.0)*cj12*x6387);
evalcond[0]=((((-1.0)*x6395*x6396))+((r22*x6387))+((x6386*x6390)));
evalcond[1]=(((x6387*x6395))+((r22*x6386))+(((-1.0)*x6387*x6390)));
evalcond[2]=(x6398+((r02*x6387))+((r00*x6397))+(((-1.0)*x6391*x6396)));
evalcond[3]=(x6398+((x6387*x6394))+(((-1.0)*r10*x6399))+((r12*x6386)));
evalcond[4]=((((-1.0)*x6392))+x6393+((r10*x6397))+(((-1.0)*x6394*x6396))+((r12*x6387)));
evalcond[5]=((((-1.0)*r00*x6399))+(((-1.0)*x6393))+x6392+((x6387*x6391))+((r02*x6386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x6400=(cj7*sj9);
IkReal x6401=(r21*sj12);
IkReal x6402=((1.0)*cj12);
IkReal x6403=(cj9*sj7);
CheckValue<IkReal> x6404 = IKatan2WithCheck(IkReal((((r22*x6403))+((r22*x6400)))),IkReal(((((-1.0)*r20*x6402*x6403))+(((-1.0)*r20*x6400*x6402))+((x6401*x6403))+((x6400*x6401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6404.valid){
continue;
}
CheckValue<IkReal> x6405=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6402))+(((-1.0)*r10*sj12)))),-1);
if(!x6405.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x6404.value)+(((1.5707963267949)*(x6405.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x6406=IKsin(j11);
IkReal x6407=IKcos(j11);
IkReal x6408=(cj9*sj7);
IkReal x6409=(cj7*sj9);
IkReal x6410=(cj12*r20);
IkReal x6411=(r01*sj12);
IkReal x6412=(cj7*cj9);
IkReal x6413=(sj7*sj9);
IkReal x6414=(r11*sj12);
IkReal x6415=(r21*sj12);
IkReal x6416=((1.0)*x6406);
IkReal x6417=(cj12*x6406);
IkReal x6418=(x6408+x6409);
IkReal x6419=((1.0)*cj12*x6407);
evalcond[0]=((((-1.0)*x6415*x6416))+((x6406*x6410))+((r22*x6407)));
evalcond[1]=((((-1.0)*x6407*x6410))+((r22*x6406))+((x6407*x6415)));
evalcond[2]=(((r02*x6407))+((r00*x6417))+x6418+(((-1.0)*x6411*x6416)));
evalcond[3]=((((-1.0)*r10*x6419))+x6418+((r12*x6406))+((x6407*x6414)));
evalcond[4]=((((-1.0)*x6414*x6416))+((r10*x6417))+x6413+(((-1.0)*x6412))+((r12*x6407)));
evalcond[5]=(((r02*x6406))+x6412+(((-1.0)*x6413))+((x6407*x6411))+(((-1.0)*r00*x6419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x6420=((68162500000.0)*cj9);
IkReal x6421=((68162500000.0)*px);
IkReal x6422=((68162500000.0)*py);
j7eval[0]=((1.0)+cj9);
j7eval[1]=IKsign(((59470418.0)+(((59470418.0)*cj9))));
j7eval[2]=((IKabs(((((-1.0)*py*x6420))+(((-1.0)*sj9*x6421))+(((-1.0)*x6422)))))+(IKabs((((sj9*x6422))+(((-1.0)*x6421))+(((-1.0)*px*x6420))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
j11eval[0]=((IKabs(((((-1.0)*r21*sj12))+((cj12*r20)))))+(IKabs(r22)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
j11eval[0]=((IKabs(r22))+(IKabs(((((-1.0)*cj12*r20))+((r21*sj12))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x6424 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r20))+((r21*sj12)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x6424.valid){
continue;
}
IkReal x6423=x6424.value;
j11array[0]=((-1.0)*x6423);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x6423)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[1];
IkReal x6425=IKsin(j11);
evalcond[0]=((((-1.0)*r21*sj12*x6425))+((cj12*r20*x6425))+((r22*(IKcos(j11)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x6426=((68162500000.0)*cj9);
IkReal x6427=((68162500000.0)*px);
IkReal x6428=((68162500000.0)*py);
j7eval[0]=((1.0)+cj9);
j7eval[1]=IKsign(((59470418.0)+(((59470418.0)*cj9))));
j7eval[2]=((IKabs(((((-1.0)*py*x6426))+(((-1.0)*sj9*x6427))+(((-1.0)*x6428)))))+(IKabs((((sj9*x6428))+(((-1.0)*x6427))+(((-1.0)*px*x6426))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
j7eval[0]=((-1.0)+(((-1.0)*cj9)));
j7eval[1]=IKsign(((-5453.0)+(((-5453.0)*cj9))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
j7eval[0]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x6429=((5453.0)*cj9);
IkReal x6430=(cj11*r02);
IkReal x6431=(cj12*r00*sj11);
IkReal x6432=(r01*sj11*sj12);
CheckValue<IkReal> x6433=IKPowWithIntegerCheck(sj9,-1);
if(!x6433.valid){
continue;
}
if( IKabs((x6431+x6430+(((-2292.31615624427)*py))+(((-1.0)*x6432)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.000183385292499542)*(x6433.value)*(((((5453.0)*x6432))+((x6429*x6432))+(((-5453.0)*x6430))+(((-5453.0)*x6431))+(((-1.0)*x6429*x6431))+(((-1.0)*x6429*x6430))+(((12500000.0)*cj9*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x6431+x6430+(((-2292.31615624427)*py))+(((-1.0)*x6432))))+IKsqr(((-0.000183385292499542)*(x6433.value)*(((((5453.0)*x6432))+((x6429*x6432))+(((-5453.0)*x6430))+(((-5453.0)*x6431))+(((-1.0)*x6429*x6431))+(((-1.0)*x6429*x6430))+(((12500000.0)*cj9*py))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x6431+x6430+(((-2292.31615624427)*py))+(((-1.0)*x6432))), ((-0.000183385292499542)*(x6433.value)*(((((5453.0)*x6432))+((x6429*x6432))+(((-5453.0)*x6430))+(((-5453.0)*x6431))+(((-1.0)*x6429*x6431))+(((-1.0)*x6429*x6430))+(((12500000.0)*cj9*py))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x6434=IKcos(j7);
IkReal x6435=IKsin(j7);
IkReal x6436=(r11*sj12);
IkReal x6437=((1.0)*sj11);
IkReal x6438=(r01*sj12);
IkReal x6439=((1.0)*cj9);
IkReal x6440=(cj12*sj11);
IkReal x6441=((1.0)*cj11*cj12);
IkReal x6442=((0.00043624)*x6434);
IkReal x6443=((0.00043624)*x6435);
IkReal x6444=(sj9*x6434);
IkReal x6445=(x6434*x6439);
IkReal x6446=((1.0)*sj9*x6435);
IkReal x6447=(x6446+x6445);
evalcond[0]=((((-1.0)*cj9*x6442))+(((-1.0)*x6442))+(((-1.0)*px))+(((-1.0)*sj9*x6443)));
evalcond[1]=((((-1.0)*cj9*x6443))+(((-1.0)*x6443))+(((-1.0)*py))+((sj9*x6442)));
evalcond[2]=(((r00*x6440))+(((-1.0)*x6444))+((cj9*x6435))+((cj11*r02))+(((-1.0)*x6437*x6438)));
evalcond[3]=((((-1.0)*x6435*x6439))+((r12*sj11))+x6444+(((-1.0)*r10*x6441))+((cj11*x6436)));
evalcond[4]=(((cj11*r12))+(((-1.0)*x6447))+(((-1.0)*x6436*x6437))+((r10*x6440)));
evalcond[5]=(((r02*sj11))+(((-1.0)*x6447))+((cj11*x6438))+(((-1.0)*r00*x6441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x6448=((12500000.0)*px);
IkReal x6449=((5453.0)*sj11);
IkReal x6450=(cj12*r00);
IkReal x6451=(r01*sj12);
IkReal x6452=((5453.0)*cj11*r02);
CheckValue<IkReal> x6453=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((-5453.0)*cj9)))),-1);
if(!x6453.valid){
continue;
}
CheckValue<IkReal> x6454 = IKatan2WithCheck(IkReal(((((-1.0)*cj9*x6449*x6451))+((cj9*x6449*x6450))+(((-1.0)*x6449*x6451))+((x6449*x6450))+x6452+((cj9*x6452))+((sj9*x6448)))),IkReal((((sj9*x6449*x6451))+(((-1.0)*sj9*x6449*x6450))+((cj9*x6448))+(((-1.0)*sj9*x6452)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6454.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6453.value)))+(x6454.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x6455=IKcos(j7);
IkReal x6456=IKsin(j7);
IkReal x6457=(r11*sj12);
IkReal x6458=((1.0)*sj11);
IkReal x6459=(r01*sj12);
IkReal x6460=((1.0)*cj9);
IkReal x6461=(cj12*sj11);
IkReal x6462=((1.0)*cj11*cj12);
IkReal x6463=((0.00043624)*x6455);
IkReal x6464=((0.00043624)*x6456);
IkReal x6465=(sj9*x6455);
IkReal x6466=(x6455*x6460);
IkReal x6467=((1.0)*sj9*x6456);
IkReal x6468=(x6466+x6467);
evalcond[0]=((((-1.0)*cj9*x6463))+(((-1.0)*x6463))+(((-1.0)*px))+(((-1.0)*sj9*x6464)));
evalcond[1]=((((-1.0)*cj9*x6464))+(((-1.0)*x6464))+(((-1.0)*py))+((sj9*x6463)));
evalcond[2]=(((r00*x6461))+((cj11*r02))+(((-1.0)*x6465))+((cj9*x6456))+(((-1.0)*x6458*x6459)));
evalcond[3]=(((r12*sj11))+x6465+(((-1.0)*r10*x6462))+(((-1.0)*x6456*x6460))+((cj11*x6457)));
evalcond[4]=(((r10*x6461))+(((-1.0)*x6468))+((cj11*r12))+(((-1.0)*x6457*x6458)));
evalcond[5]=(((r02*sj11))+(((-1.0)*r00*x6462))+(((-1.0)*x6468))+((cj11*x6459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x6469=((68162500000.0)*cj9);
IkReal x6470=((68162500000.0)*px);
IkReal x6471=((68162500000.0)*py);
CheckValue<IkReal> x6472=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((59470418.0)*cj9)))),-1);
if(!x6472.valid){
continue;
}
CheckValue<IkReal> x6473 = IKatan2WithCheck(IkReal(((((-1.0)*sj9*x6470))+(((-1.0)*py*x6469))+(((-1.0)*x6471)))),IkReal(((((-1.0)*px*x6469))+((sj9*x6471))+(((-1.0)*x6470)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6473.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6472.value)))+(x6473.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x6474=IKcos(j7);
IkReal x6475=IKsin(j7);
IkReal x6476=(r11*sj12);
IkReal x6477=((1.0)*sj11);
IkReal x6478=(r01*sj12);
IkReal x6479=((1.0)*cj9);
IkReal x6480=(cj12*sj11);
IkReal x6481=((1.0)*cj11*cj12);
IkReal x6482=((0.00043624)*x6474);
IkReal x6483=((0.00043624)*x6475);
IkReal x6484=(sj9*x6474);
IkReal x6485=(x6474*x6479);
IkReal x6486=((1.0)*sj9*x6475);
IkReal x6487=(x6486+x6485);
evalcond[0]=((((-1.0)*x6482))+(((-1.0)*cj9*x6482))+(((-1.0)*px))+(((-1.0)*sj9*x6483)));
evalcond[1]=((((-1.0)*x6483))+(((-1.0)*cj9*x6483))+((sj9*x6482))+(((-1.0)*py)));
evalcond[2]=(((r00*x6480))+(((-1.0)*x6484))+((cj9*x6475))+((cj11*r02))+(((-1.0)*x6477*x6478)));
evalcond[3]=(((r12*sj11))+(((-1.0)*r10*x6481))+((cj11*x6476))+x6484+(((-1.0)*x6475*x6479)));
evalcond[4]=((((-1.0)*x6487))+((cj11*r12))+(((-1.0)*x6476*x6477))+((r10*x6480)));
evalcond[5]=(((r02*sj11))+(((-1.0)*x6487))+(((-1.0)*r00*x6481))+((cj11*x6478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x6489 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*sj12))+((cj12*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6489.valid){
continue;
}
IkReal x6488=x6489.value;
j11array[0]=((-1.0)*x6488);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x6488)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[1];
IkReal x6490=IKcos(j11);
evalcond[0]=((((-1.0)*cj12*r20*x6490))+((r22*(IKsin(j11))))+((r21*sj12*x6490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x6491=((68162500000.0)*cj9);
IkReal x6492=((68162500000.0)*px);
IkReal x6493=((68162500000.0)*py);
j7eval[0]=((1.0)+cj9);
j7eval[1]=IKsign(((59470418.0)+(((59470418.0)*cj9))));
j7eval[2]=((IKabs(((((-1.0)*x6493))+(((-1.0)*py*x6491))+(((-1.0)*sj9*x6492)))))+(IKabs(((((-1.0)*x6492))+((sj9*x6493))+(((-1.0)*px*x6491))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
j7eval[0]=((-1.0)+(((-1.0)*cj9)));
j7eval[1]=IKsign(((-5453.0)+(((-5453.0)*cj9))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
j7eval[0]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x6494=((5453.0)*cj9);
IkReal x6495=(cj11*r02);
IkReal x6496=(cj12*r00*sj11);
IkReal x6497=(r01*sj11*sj12);
CheckValue<IkReal> x6498=IKPowWithIntegerCheck(sj9,-1);
if(!x6498.valid){
continue;
}
if( IKabs(((((-1.0)*x6497))+x6495+x6496+(((-2292.31615624427)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.000183385292499542)*(x6498.value)*((((x6494*x6497))+(((5453.0)*x6497))+(((-1.0)*x6494*x6496))+(((-1.0)*x6494*x6495))+(((-5453.0)*x6496))+(((-5453.0)*x6495))+(((12500000.0)*cj9*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6497))+x6495+x6496+(((-2292.31615624427)*py))))+IKsqr(((-0.000183385292499542)*(x6498.value)*((((x6494*x6497))+(((5453.0)*x6497))+(((-1.0)*x6494*x6496))+(((-1.0)*x6494*x6495))+(((-5453.0)*x6496))+(((-5453.0)*x6495))+(((12500000.0)*cj9*py))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*x6497))+x6495+x6496+(((-2292.31615624427)*py))), ((-0.000183385292499542)*(x6498.value)*((((x6494*x6497))+(((5453.0)*x6497))+(((-1.0)*x6494*x6496))+(((-1.0)*x6494*x6495))+(((-5453.0)*x6496))+(((-5453.0)*x6495))+(((12500000.0)*cj9*py))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x6499=IKcos(j7);
IkReal x6500=IKsin(j7);
IkReal x6501=(r11*sj12);
IkReal x6502=((1.0)*sj11);
IkReal x6503=(r01*sj12);
IkReal x6504=((1.0)*cj9);
IkReal x6505=(cj12*sj11);
IkReal x6506=((1.0)*cj11*cj12);
IkReal x6507=((0.00043624)*x6499);
IkReal x6508=((0.00043624)*x6500);
IkReal x6509=(sj9*x6499);
IkReal x6510=(x6499*x6504);
IkReal x6511=((1.0)*sj9*x6500);
IkReal x6512=(x6510+x6511);
evalcond[0]=((((-1.0)*x6507))+(((-1.0)*sj9*x6508))+(((-1.0)*px))+(((-1.0)*cj9*x6507)));
evalcond[1]=((((-1.0)*x6508))+(((-1.0)*py))+((sj9*x6507))+(((-1.0)*cj9*x6508)));
evalcond[2]=(((cj9*x6500))+(((-1.0)*x6509))+((cj11*r02))+((r00*x6505))+(((-1.0)*x6502*x6503)));
evalcond[3]=(((cj11*x6501))+(((-1.0)*r10*x6506))+((r12*sj11))+(((-1.0)*x6500*x6504))+x6509);
evalcond[4]=((((-1.0)*x6501*x6502))+((r10*x6505))+((cj11*r12))+(((-1.0)*x6512)));
evalcond[5]=(((r02*sj11))+((cj11*x6503))+(((-1.0)*r00*x6506))+(((-1.0)*x6512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x6513=((12500000.0)*px);
IkReal x6514=((5453.0)*sj11);
IkReal x6515=(cj12*r00);
IkReal x6516=(r01*sj12);
IkReal x6517=((5453.0)*cj11*r02);
CheckValue<IkReal> x6518 = IKatan2WithCheck(IkReal((((x6514*x6515))+(((-1.0)*cj9*x6514*x6516))+((sj9*x6513))+((cj9*x6514*x6515))+(((-1.0)*x6514*x6516))+x6517+((cj9*x6517)))),IkReal((((sj9*x6514*x6516))+(((-1.0)*sj9*x6514*x6515))+((cj9*x6513))+(((-1.0)*sj9*x6517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6518.valid){
continue;
}
CheckValue<IkReal> x6519=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((-5453.0)*cj9)))),-1);
if(!x6519.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x6518.value)+(((1.5707963267949)*(x6519.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x6520=IKcos(j7);
IkReal x6521=IKsin(j7);
IkReal x6522=(r11*sj12);
IkReal x6523=((1.0)*sj11);
IkReal x6524=(r01*sj12);
IkReal x6525=((1.0)*cj9);
IkReal x6526=(cj12*sj11);
IkReal x6527=((1.0)*cj11*cj12);
IkReal x6528=((0.00043624)*x6520);
IkReal x6529=((0.00043624)*x6521);
IkReal x6530=(sj9*x6520);
IkReal x6531=(x6520*x6525);
IkReal x6532=((1.0)*sj9*x6521);
IkReal x6533=(x6532+x6531);
evalcond[0]=((((-1.0)*cj9*x6528))+(((-1.0)*x6528))+(((-1.0)*px))+(((-1.0)*sj9*x6529)));
evalcond[1]=((((-1.0)*cj9*x6529))+((sj9*x6528))+(((-1.0)*x6529))+(((-1.0)*py)));
evalcond[2]=(((cj9*x6521))+(((-1.0)*x6530))+((cj11*r02))+(((-1.0)*x6523*x6524))+((r00*x6526)));
evalcond[3]=(((r12*sj11))+(((-1.0)*x6521*x6525))+x6530+(((-1.0)*r10*x6527))+((cj11*x6522)));
evalcond[4]=((((-1.0)*x6522*x6523))+(((-1.0)*x6533))+((cj11*r12))+((r10*x6526)));
evalcond[5]=(((r02*sj11))+(((-1.0)*x6533))+(((-1.0)*r00*x6527))+((cj11*x6524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x6534=((68162500000.0)*cj9);
IkReal x6535=((68162500000.0)*px);
IkReal x6536=((68162500000.0)*py);
CheckValue<IkReal> x6537=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((59470418.0)*cj9)))),-1);
if(!x6537.valid){
continue;
}
CheckValue<IkReal> x6538 = IKatan2WithCheck(IkReal(((((-1.0)*x6536))+(((-1.0)*sj9*x6535))+(((-1.0)*py*x6534)))),IkReal(((((-1.0)*x6535))+((sj9*x6536))+(((-1.0)*px*x6534)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6538.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6537.value)))+(x6538.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x6539=IKcos(j7);
IkReal x6540=IKsin(j7);
IkReal x6541=(r11*sj12);
IkReal x6542=((1.0)*sj11);
IkReal x6543=(r01*sj12);
IkReal x6544=((1.0)*cj9);
IkReal x6545=(cj12*sj11);
IkReal x6546=((1.0)*cj11*cj12);
IkReal x6547=((0.00043624)*x6539);
IkReal x6548=((0.00043624)*x6540);
IkReal x6549=(sj9*x6539);
IkReal x6550=(x6539*x6544);
IkReal x6551=((1.0)*sj9*x6540);
IkReal x6552=(x6550+x6551);
evalcond[0]=((((-1.0)*cj9*x6547))+(((-1.0)*x6547))+(((-1.0)*px))+(((-1.0)*sj9*x6548)));
evalcond[1]=((((-1.0)*cj9*x6548))+(((-1.0)*x6548))+((sj9*x6547))+(((-1.0)*py)));
evalcond[2]=((((-1.0)*x6542*x6543))+((cj9*x6540))+((cj11*r02))+(((-1.0)*x6549))+((r00*x6545)));
evalcond[3]=((((-1.0)*x6540*x6544))+((r12*sj11))+x6549+((cj11*x6541))+(((-1.0)*r10*x6546)));
evalcond[4]=((((-1.0)*x6541*x6542))+(((-1.0)*x6552))+((cj11*r12))+((r10*x6545)));
evalcond[5]=((((-1.0)*r00*x6546))+((r02*sj11))+(((-1.0)*x6552))+((cj11*x6543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x6553=((68162500000.0)*cj9);
IkReal x6554=((68162500000.0)*px);
IkReal x6555=((68162500000.0)*py);
CheckValue<IkReal> x6556=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((59470418.0)*cj9)))),-1);
if(!x6556.valid){
continue;
}
CheckValue<IkReal> x6557 = IKatan2WithCheck(IkReal(((((-1.0)*x6555))+(((-1.0)*sj9*x6554))+(((-1.0)*py*x6553)))),IkReal(((((-1.0)*x6554))+((sj9*x6555))+(((-1.0)*px*x6553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6557.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6556.value)))+(x6557.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x6558=IKcos(j7);
IkReal x6559=IKsin(j7);
IkReal x6560=((0.00043624)*x6558);
IkReal x6561=((0.00043624)*x6559);
evalcond[0]=((((-1.0)*cj9*x6560))+(((-1.0)*px))+(((-1.0)*sj9*x6561))+(((-1.0)*x6560)));
evalcond[1]=((((-1.0)*cj9*x6561))+(((-1.0)*py))+(((-1.0)*x6561))+((sj9*x6560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x6562=(cj7*sj9);
IkReal x6563=(r21*sj12);
IkReal x6564=(cj12*r20);
IkReal x6565=(cj9*sj7);
IkReal x6566=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x6566;
j11eval[1]=((IKabs((((r22*x6565))+(((-1.0)*r22*x6562)))))+(IKabs((((x6564*x6565))+((x6562*x6563))+(((-1.0)*x6562*x6564))+(((-1.0)*x6563*x6565))))));
j11eval[2]=IKsign(x6566);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x6567=(cj9*sj7);
IkReal x6568=((1.0)*cj12);
IkReal x6569=(r21*sj12);
IkReal x6570=((1.0)*cj7*sj9);
IkReal x6571=((((-1.0)*r11*x6568))+(((-1.0)*r10*sj12)));
j11eval[0]=x6571;
j11eval[1]=IKsign(x6571);
j11eval[2]=((IKabs((((x6567*x6569))+(((-1.0)*x6569*x6570))+(((-1.0)*r20*x6567*x6568))+((cj12*cj7*r20*sj9)))))+(IKabs((((r22*x6567))+(((-1.0)*r22*x6570))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x6572=cj12*cj12;
IkReal x6573=(r11*r21);
IkReal x6574=(cj7*sj9);
IkReal x6575=(r21*sj12);
IkReal x6576=(cj12*r20);
IkReal x6577=((1.0)*r22);
IkReal x6578=(cj9*sj7);
IkReal x6579=(((cj12*r10*x6575))+((x6572*x6573))+((r11*sj12*x6576))+(((-1.0)*x6573))+(((-1.0)*r10*r20*x6572))+(((-1.0)*r12*x6577)));
j11eval[0]=x6579;
j11eval[1]=IKsign(x6579);
j11eval[2]=((IKabs(((((-1.0)*x6574*x6576))+((x6574*x6575))+(((-1.0)*x6575*x6578))+((x6576*x6578)))))+(IKabs((((r22*x6574))+(((-1.0)*x6577*x6578))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x6580=cj12*cj12;
IkReal x6581=((1.0)*r22);
IkReal x6582=(cj7*sj9);
IkReal x6583=(r21*sj12);
IkReal x6584=(cj12*r20);
IkReal x6585=(r11*r21);
IkReal x6586=(cj9*sj7);
CheckValue<IkReal> x6587 = IKatan2WithCheck(IkReal((((r22*x6582))+(((-1.0)*x6581*x6586)))),IkReal(((((-1.0)*x6583*x6586))+((x6582*x6583))+(((-1.0)*x6582*x6584))+((x6584*x6586)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6587.valid){
continue;
}
CheckValue<IkReal> x6588=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6585))+(((-1.0)*r12*x6581))+((x6580*x6585))+((cj12*r10*x6583))+((r11*sj12*x6584))+(((-1.0)*r10*r20*x6580)))),-1);
if(!x6588.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x6587.value)+(((1.5707963267949)*(x6588.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x6589=IKsin(j11);
IkReal x6590=IKcos(j11);
IkReal x6591=(cj12*r20);
IkReal x6592=(r01*sj12);
IkReal x6593=((1.0)*sj7);
IkReal x6594=(r11*sj12);
IkReal x6595=(cj7*sj9);
IkReal x6596=(r21*sj12);
IkReal x6597=((1.0)*cj7*cj9);
IkReal x6598=(sj9*x6593);
IkReal x6599=((1.0)*x6589);
IkReal x6600=(cj12*x6589);
IkReal x6601=((1.0)*cj12*x6590);
IkReal x6602=(x6597+x6598);
evalcond[0]=(((r22*x6590))+(((-1.0)*x6596*x6599))+((x6589*x6591)));
evalcond[1]=(((r22*x6589))+(((-1.0)*x6590*x6591))+((x6590*x6596)));
evalcond[2]=(((r02*x6590))+((r00*x6600))+((cj9*sj7))+(((-1.0)*x6592*x6599))+(((-1.0)*x6595)));
evalcond[3]=((((-1.0)*r10*x6601))+x6595+((x6590*x6594))+(((-1.0)*cj9*x6593))+((r12*x6589)));
evalcond[4]=(((r12*x6590))+((r10*x6600))+(((-1.0)*x6594*x6599))+(((-1.0)*x6602)));
evalcond[5]=(((r02*x6589))+((x6590*x6592))+(((-1.0)*r00*x6601))+(((-1.0)*x6602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x6603=((1.0)*cj12);
IkReal x6604=(cj9*sj7);
IkReal x6605=(r21*sj12);
IkReal x6606=((1.0)*cj7*sj9);
CheckValue<IkReal> x6607=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6603))+(((-1.0)*r10*sj12)))),-1);
if(!x6607.valid){
continue;
}
CheckValue<IkReal> x6608 = IKatan2WithCheck(IkReal((((r22*x6604))+(((-1.0)*r22*x6606)))),IkReal(((((-1.0)*r20*x6603*x6604))+((x6604*x6605))+((cj12*cj7*r20*sj9))+(((-1.0)*x6605*x6606)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6608.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6607.value)))+(x6608.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x6609=IKsin(j11);
IkReal x6610=IKcos(j11);
IkReal x6611=(cj12*r20);
IkReal x6612=(r01*sj12);
IkReal x6613=((1.0)*sj7);
IkReal x6614=(r11*sj12);
IkReal x6615=(cj7*sj9);
IkReal x6616=(r21*sj12);
IkReal x6617=((1.0)*cj7*cj9);
IkReal x6618=(sj9*x6613);
IkReal x6619=((1.0)*x6609);
IkReal x6620=(cj12*x6609);
IkReal x6621=((1.0)*cj12*x6610);
IkReal x6622=(x6617+x6618);
evalcond[0]=(((x6609*x6611))+(((-1.0)*x6616*x6619))+((r22*x6610)));
evalcond[1]=(((r22*x6609))+(((-1.0)*x6610*x6611))+((x6610*x6616)));
evalcond[2]=(((r02*x6610))+(((-1.0)*x6615))+(((-1.0)*x6612*x6619))+((r00*x6620))+((cj9*sj7)));
evalcond[3]=(x6615+((x6610*x6614))+(((-1.0)*r10*x6621))+(((-1.0)*cj9*x6613))+((r12*x6609)));
evalcond[4]=((((-1.0)*x6622))+((r10*x6620))+(((-1.0)*x6614*x6619))+((r12*x6610)));
evalcond[5]=((((-1.0)*x6622))+((r02*x6609))+((x6610*x6612))+(((-1.0)*r00*x6621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x6623=(cj7*sj9);
IkReal x6624=(r21*sj12);
IkReal x6625=(cj12*r20);
IkReal x6626=(cj9*sj7);
CheckValue<IkReal> x6627 = IKatan2WithCheck(IkReal(((((-1.0)*x6624*x6626))+(((-1.0)*x6623*x6625))+((x6625*x6626))+((x6623*x6624)))),IkReal(((((-1.0)*r22*x6623))+((r22*x6626)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6627.valid){
continue;
}
CheckValue<IkReal> x6628=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x6628.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x6627.value)+(((1.5707963267949)*(x6628.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x6629=IKsin(j11);
IkReal x6630=IKcos(j11);
IkReal x6631=(cj12*r20);
IkReal x6632=(r01*sj12);
IkReal x6633=((1.0)*sj7);
IkReal x6634=(r11*sj12);
IkReal x6635=(cj7*sj9);
IkReal x6636=(r21*sj12);
IkReal x6637=((1.0)*cj7*cj9);
IkReal x6638=(sj9*x6633);
IkReal x6639=((1.0)*x6629);
IkReal x6640=(cj12*x6629);
IkReal x6641=((1.0)*cj12*x6630);
IkReal x6642=(x6638+x6637);
evalcond[0]=((((-1.0)*x6636*x6639))+((r22*x6630))+((x6629*x6631)));
evalcond[1]=(((x6630*x6636))+((r22*x6629))+(((-1.0)*x6630*x6631)));
evalcond[2]=((((-1.0)*x6635))+((r00*x6640))+((cj9*sj7))+(((-1.0)*x6632*x6639))+((r02*x6630)));
evalcond[3]=((((-1.0)*cj9*x6633))+x6635+((r12*x6629))+((x6630*x6634))+(((-1.0)*r10*x6641)));
evalcond[4]=((((-1.0)*x6642))+((r10*x6640))+(((-1.0)*x6634*x6639))+((r12*x6630)));
evalcond[5]=((((-1.0)*x6642))+((r02*x6629))+((x6630*x6632))+(((-1.0)*r00*x6641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7, j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x6643=((5453.0)*sj8);
IkReal x6644=(cj12*r01);
IkReal x6645=((5453.0)*sj9);
IkReal x6646=((5000000.0)*sj8);
IkReal x6647=(r00*sj12);
CheckValue<IkReal> x6648=IKPowWithIntegerCheck(((5250000.0)+(((-1.0)*x6643))+((cj8*cj9*x6643))+(((-5250000.0)*(cj8*cj8)))),-1);
if(!x6648.valid){
continue;
}
CheckValue<IkReal> x6649=IKPowWithIntegerCheck(sj8,-1);
if(!x6649.valid){
continue;
}
if( IKabs(((x6648.value)*((((cj12*r11*x6646))+((r10*sj12*x6646))+(((12500000.0)*py*sj8))+((x6644*x6645))+((x6645*x6647)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6649.value)*(((((-1.0)*x6647))+(((-1.0)*x6644)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6648.value)*((((cj12*r11*x6646))+((r10*sj12*x6646))+(((12500000.0)*py*sj8))+((x6644*x6645))+((x6645*x6647))))))+IKsqr(((x6649.value)*(((((-1.0)*x6647))+(((-1.0)*x6644))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x6648.value)*((((cj12*r11*x6646))+((r10*sj12*x6646))+(((12500000.0)*py*sj8))+((x6644*x6645))+((x6645*x6647))))), ((x6649.value)*(((((-1.0)*x6647))+(((-1.0)*x6644))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x6650=IKcos(j7);
IkReal x6651=IKsin(j7);
IkReal x6652=(r10*sj12);
IkReal x6653=((0.42)*sj8);
IkReal x6654=(cj12*r11);
IkReal x6655=(cj8*cj9);
IkReal x6656=(cj12*r01);
IkReal x6657=(r00*sj12);
IkReal x6658=((0.00043624)*x6650);
IkReal x6659=((0.00043624)*x6651);
evalcond[0]=(x6657+x6656+((sj8*x6650)));
evalcond[1]=(x6654+x6652+((sj8*x6651)));
evalcond[2]=((((-1.0)*sj9*x6659))+(((-1.0)*x6658))+(((-1.0)*px))+((x6655*x6658))+(((-0.4)*x6657))+(((-0.4)*x6656))+((x6650*x6653)));
evalcond[3]=((((-1.0)*x6659))+(((-1.0)*py))+((x6655*x6659))+(((-0.4)*x6654))+(((-0.4)*x6652))+((x6651*x6653))+((sj9*x6658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[2];
sj10=0;
cj10=1.0;
j10=0;
IkReal x6660=((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11)));
j11eval[0]=x6660;
j11eval[1]=IKsign(x6660);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
IkReal x6661=cj12*cj12;
IkReal x6662=r21*r21;
IkReal x6663=(cj9*sj8);
IkReal x6664=(r21*sj12);
IkReal x6665=(sj8*sj9);
IkReal x6666=(cj12*r20);
IkReal x6667=((r22*r22)+x6662+(((-2.0)*x6664*x6666))+(((-1.0)*x6661*x6662))+((x6661*(r20*r20))));
j11eval[0]=x6667;
j11eval[1]=IKsign(x6667);
j11eval[2]=((IKabs(((((-1.0)*x6664*x6665))+((x6665*x6666))+((r22*x6663)))))+(IKabs(((((-1.0)*x6663*x6666))+((x6663*x6664))+((r22*x6665))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
sj10=0;
cj10=1.0;
j10=0;
IkReal x6668=cj12*cj12;
IkReal x6669=(r11*r21);
IkReal x6670=(cj12*sj12);
IkReal x6671=((((-1.0)*r12*r22))+((x6668*x6669))+(((-1.0)*x6669))+((r10*r21*x6670))+(((-1.0)*r10*r20*x6668))+((r11*r20*x6670)));
j11eval[0]=x6671;
j11eval[1]=IKsign(x6671);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=1.0;
j8=0;
IkReal x6672=(cj7*sj9);
IkReal x6673=(r21*sj12);
IkReal x6674=((1.0)*cj12);
IkReal x6675=(cj9*sj7);
IkReal x6676=((((-1.0)*r11*x6674))+(((-1.0)*r10*sj12)));
j11eval[0]=x6676;
j11eval[1]=IKsign(x6676);
j11eval[2]=((IKabs((((r22*x6672))+((r22*x6675)))))+(IKabs((((x6672*x6673))+(((-1.0)*r20*x6674*x6675))+(((-1.0)*r20*x6672*x6674))+((x6673*x6675))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=1.0;
j8=0;
IkReal x6677=(cj7*sj9);
IkReal x6678=(r21*sj12);
IkReal x6679=(cj9*sj7);
IkReal x6680=((1.0)*r22);
IkReal x6681=((1.0)*cj12*r20);
IkReal x6682=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x6682;
j11eval[1]=((IKabs(((((-1.0)*x6679*x6680))+(((-1.0)*x6677*x6680)))))+(IKabs(((((-1.0)*x6679*x6681))+((x6678*x6679))+(((-1.0)*x6677*x6681))+((x6677*x6678))))));
j11eval[2]=IKsign(x6682);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=1.0;
j8=0;
IkReal x6683=cj12*cj12;
IkReal x6684=(r11*r21);
IkReal x6685=(cj7*sj9);
IkReal x6686=(r21*sj12);
IkReal x6687=(cj12*r20);
IkReal x6688=(cj9*sj7);
IkReal x6689=((((-1.0)*r10*r20*x6683))+((x6683*x6684))+(((-1.0)*r12*r22))+((r11*sj12*x6687))+((cj12*r10*x6686))+(((-1.0)*x6684)));
j11eval[0]=x6689;
j11eval[1]=IKsign(x6689);
j11eval[2]=((IKabs(((((-1.0)*x6685*x6687))+((x6686*x6688))+((x6685*x6686))+(((-1.0)*x6687*x6688)))))+(IKabs((((r22*x6688))+((r22*x6685))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x6690=cj12*cj12;
IkReal x6691=(cj7*sj9);
IkReal x6692=(r21*sj12);
IkReal x6693=(cj12*r20);
IkReal x6694=(r11*r21);
IkReal x6695=(cj9*sj7);
CheckValue<IkReal> x6696=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6694))+(((-1.0)*r12*r22))+((x6690*x6694))+((cj12*r10*x6692))+((r11*sj12*x6693))+(((-1.0)*r10*r20*x6690)))),-1);
if(!x6696.valid){
continue;
}
CheckValue<IkReal> x6697 = IKatan2WithCheck(IkReal((((r22*x6691))+((r22*x6695)))),IkReal(((((-1.0)*x6691*x6693))+(((-1.0)*x6693*x6695))+((x6692*x6695))+((x6691*x6692)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6697.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6696.value)))+(x6697.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x6698=IKsin(j11);
IkReal x6699=IKcos(j11);
IkReal x6700=(cj9*sj7);
IkReal x6701=(cj7*sj9);
IkReal x6702=(cj12*r20);
IkReal x6703=(r01*sj12);
IkReal x6704=(cj7*cj9);
IkReal x6705=(sj7*sj9);
IkReal x6706=(r11*sj12);
IkReal x6707=(r21*sj12);
IkReal x6708=((1.0)*x6698);
IkReal x6709=(cj12*x6698);
IkReal x6710=(x6701+x6700);
IkReal x6711=((1.0)*cj12*x6699);
evalcond[0]=(((r22*x6699))+((x6698*x6702))+(((-1.0)*x6707*x6708)));
evalcond[1]=(((r22*x6698))+((x6699*x6707))+(((-1.0)*x6699*x6702)));
evalcond[2]=(((r00*x6709))+x6710+(((-1.0)*x6703*x6708))+((r02*x6699)));
evalcond[3]=(((r12*x6698))+x6710+((x6699*x6706))+(((-1.0)*r10*x6711)));
evalcond[4]=(((r10*x6709))+((r12*x6699))+(((-1.0)*x6706*x6708))+x6705+(((-1.0)*x6704)));
evalcond[5]=(x6704+((x6699*x6703))+(((-1.0)*r00*x6711))+(((-1.0)*x6705))+((r02*x6698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x6712=(cj7*sj9);
IkReal x6713=(r21*sj12);
IkReal x6714=(cj9*sj7);
IkReal x6715=((1.0)*r22);
IkReal x6716=((1.0)*cj12*r20);
CheckValue<IkReal> x6717 = IKatan2WithCheck(IkReal((((x6712*x6713))+(((-1.0)*x6714*x6716))+(((-1.0)*x6712*x6716))+((x6713*x6714)))),IkReal(((((-1.0)*x6714*x6715))+(((-1.0)*x6712*x6715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6717.valid){
continue;
}
CheckValue<IkReal> x6718=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x6718.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x6717.value)+(((1.5707963267949)*(x6718.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x6719=IKsin(j11);
IkReal x6720=IKcos(j11);
IkReal x6721=(cj9*sj7);
IkReal x6722=(cj7*sj9);
IkReal x6723=(cj12*r20);
IkReal x6724=(r01*sj12);
IkReal x6725=(cj7*cj9);
IkReal x6726=(sj7*sj9);
IkReal x6727=(r11*sj12);
IkReal x6728=(r21*sj12);
IkReal x6729=((1.0)*x6719);
IkReal x6730=(cj12*x6719);
IkReal x6731=(x6722+x6721);
IkReal x6732=((1.0)*cj12*x6720);
evalcond[0]=(((r22*x6720))+((x6719*x6723))+(((-1.0)*x6728*x6729)));
evalcond[1]=(((r22*x6719))+(((-1.0)*x6720*x6723))+((x6720*x6728)));
evalcond[2]=((((-1.0)*x6724*x6729))+x6731+((r02*x6720))+((r00*x6730)));
evalcond[3]=((((-1.0)*r10*x6732))+x6731+((x6720*x6727))+((r12*x6719)));
evalcond[4]=(((r12*x6720))+(((-1.0)*x6725))+x6726+((r10*x6730))+(((-1.0)*x6727*x6729)));
evalcond[5]=((((-1.0)*x6726))+(((-1.0)*r00*x6732))+x6725+((r02*x6719))+((x6720*x6724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x6733=(cj7*sj9);
IkReal x6734=(r21*sj12);
IkReal x6735=((1.0)*cj12);
IkReal x6736=(cj9*sj7);
CheckValue<IkReal> x6737 = IKatan2WithCheck(IkReal((((r22*x6736))+((r22*x6733)))),IkReal((((x6734*x6736))+(((-1.0)*r20*x6733*x6735))+(((-1.0)*r20*x6735*x6736))+((x6733*x6734)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6737.valid){
continue;
}
CheckValue<IkReal> x6738=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6735))+(((-1.0)*r10*sj12)))),-1);
if(!x6738.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x6737.value)+(((1.5707963267949)*(x6738.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x6739=IKsin(j11);
IkReal x6740=IKcos(j11);
IkReal x6741=(cj9*sj7);
IkReal x6742=(cj7*sj9);
IkReal x6743=(cj12*r20);
IkReal x6744=(r01*sj12);
IkReal x6745=(cj7*cj9);
IkReal x6746=(sj7*sj9);
IkReal x6747=(r11*sj12);
IkReal x6748=(r21*sj12);
IkReal x6749=((1.0)*x6739);
IkReal x6750=(cj12*x6739);
IkReal x6751=(x6741+x6742);
IkReal x6752=((1.0)*cj12*x6740);
evalcond[0]=(((x6739*x6743))+(((-1.0)*x6748*x6749))+((r22*x6740)));
evalcond[1]=(((r22*x6739))+(((-1.0)*x6740*x6743))+((x6740*x6748)));
evalcond[2]=(((r02*x6740))+(((-1.0)*x6744*x6749))+((r00*x6750))+x6751);
evalcond[3]=(x6751+((r12*x6739))+(((-1.0)*r10*x6752))+((x6740*x6747)));
evalcond[4]=((((-1.0)*x6745))+(((-1.0)*x6747*x6749))+x6746+((r12*x6740))+((r10*x6750)));
evalcond[5]=((((-1.0)*x6746))+x6745+(((-1.0)*r00*x6752))+((r02*x6739))+((x6740*x6744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x6753=(cj7*sj9);
IkReal x6754=(r21*sj12);
IkReal x6755=(cj12*r20);
IkReal x6756=(cj9*sj7);
IkReal x6757=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x6757;
j11eval[1]=((IKabs((((r22*x6756))+(((-1.0)*r22*x6753)))))+(IKabs(((((-1.0)*x6753*x6755))+((x6753*x6754))+(((-1.0)*x6754*x6756))+((x6755*x6756))))));
j11eval[2]=IKsign(x6757);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x6758=(cj9*sj7);
IkReal x6759=((1.0)*cj12);
IkReal x6760=(r21*sj12);
IkReal x6761=((1.0)*cj7*sj9);
IkReal x6762=((((-1.0)*r11*x6759))+(((-1.0)*r10*sj12)));
j11eval[0]=x6762;
j11eval[1]=IKsign(x6762);
j11eval[2]=((IKabs(((((-1.0)*x6760*x6761))+((x6758*x6760))+(((-1.0)*r20*x6758*x6759))+((cj12*cj7*r20*sj9)))))+(IKabs((((r22*x6758))+(((-1.0)*r22*x6761))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x6763=cj12*cj12;
IkReal x6764=(r11*r21);
IkReal x6765=(cj7*sj9);
IkReal x6766=(r21*sj12);
IkReal x6767=(cj12*r20);
IkReal x6768=((1.0)*r22);
IkReal x6769=(cj9*sj7);
IkReal x6770=((((-1.0)*r10*r20*x6763))+(((-1.0)*x6764))+((r11*sj12*x6767))+((cj12*r10*x6766))+(((-1.0)*r12*x6768))+((x6763*x6764)));
j11eval[0]=x6770;
j11eval[1]=IKsign(x6770);
j11eval[2]=((IKabs((((x6767*x6769))+((x6765*x6766))+(((-1.0)*x6765*x6767))+(((-1.0)*x6766*x6769)))))+(IKabs(((((-1.0)*x6768*x6769))+((r22*x6765))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x6771=cj12*cj12;
IkReal x6772=((1.0)*r22);
IkReal x6773=(cj7*sj9);
IkReal x6774=(r21*sj12);
IkReal x6775=(cj12*r20);
IkReal x6776=(r11*r21);
IkReal x6777=(cj9*sj7);
CheckValue<IkReal> x6778=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x6771))+((cj12*r10*x6774))+(((-1.0)*r12*x6772))+((r11*sj12*x6775))+(((-1.0)*x6776))+((x6771*x6776)))),-1);
if(!x6778.valid){
continue;
}
CheckValue<IkReal> x6779 = IKatan2WithCheck(IkReal((((r22*x6773))+(((-1.0)*x6772*x6777)))),IkReal(((((-1.0)*x6773*x6775))+((x6775*x6777))+(((-1.0)*x6774*x6777))+((x6773*x6774)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6779.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6778.value)))+(x6779.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x6780=IKsin(j11);
IkReal x6781=IKcos(j11);
IkReal x6782=(cj12*r20);
IkReal x6783=(r01*sj12);
IkReal x6784=((1.0)*sj7);
IkReal x6785=(r11*sj12);
IkReal x6786=(cj7*sj9);
IkReal x6787=(r21*sj12);
IkReal x6788=((1.0)*cj7*cj9);
IkReal x6789=(sj9*x6784);
IkReal x6790=((1.0)*x6780);
IkReal x6791=(cj12*x6780);
IkReal x6792=((1.0)*cj12*x6781);
IkReal x6793=(x6789+x6788);
evalcond[0]=(((r22*x6781))+(((-1.0)*x6787*x6790))+((x6780*x6782)));
evalcond[1]=((((-1.0)*x6781*x6782))+((x6781*x6787))+((r22*x6780)));
evalcond[2]=(((r00*x6791))+(((-1.0)*x6786))+((cj9*sj7))+(((-1.0)*x6783*x6790))+((r02*x6781)));
evalcond[3]=((((-1.0)*r10*x6792))+((r12*x6780))+((x6781*x6785))+x6786+(((-1.0)*cj9*x6784)));
evalcond[4]=(((r12*x6781))+(((-1.0)*x6793))+(((-1.0)*x6785*x6790))+((r10*x6791)));
evalcond[5]=(((x6781*x6783))+(((-1.0)*r00*x6792))+((r02*x6780))+(((-1.0)*x6793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x6794=((1.0)*cj12);
IkReal x6795=(cj9*sj7);
IkReal x6796=(r21*sj12);
IkReal x6797=((1.0)*cj7*sj9);
CheckValue<IkReal> x6798=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6794))+(((-1.0)*r10*sj12)))),-1);
if(!x6798.valid){
continue;
}
CheckValue<IkReal> x6799 = IKatan2WithCheck(IkReal((((r22*x6795))+(((-1.0)*r22*x6797)))),IkReal(((((-1.0)*r20*x6794*x6795))+((x6795*x6796))+((cj12*cj7*r20*sj9))+(((-1.0)*x6796*x6797)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6799.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6798.value)))+(x6799.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x6800=IKsin(j11);
IkReal x6801=IKcos(j11);
IkReal x6802=(cj12*r20);
IkReal x6803=(r01*sj12);
IkReal x6804=((1.0)*sj7);
IkReal x6805=(r11*sj12);
IkReal x6806=(cj7*sj9);
IkReal x6807=(r21*sj12);
IkReal x6808=((1.0)*cj7*cj9);
IkReal x6809=(sj9*x6804);
IkReal x6810=((1.0)*x6800);
IkReal x6811=(cj12*x6800);
IkReal x6812=((1.0)*cj12*x6801);
IkReal x6813=(x6808+x6809);
evalcond[0]=(((r22*x6801))+((x6800*x6802))+(((-1.0)*x6807*x6810)));
evalcond[1]=((((-1.0)*x6801*x6802))+((x6801*x6807))+((r22*x6800)));
evalcond[2]=(((cj9*sj7))+(((-1.0)*x6806))+(((-1.0)*x6803*x6810))+((r02*x6801))+((r00*x6811)));
evalcond[3]=((((-1.0)*r10*x6812))+((x6801*x6805))+((r12*x6800))+x6806+(((-1.0)*cj9*x6804)));
evalcond[4]=(((r10*x6811))+(((-1.0)*x6805*x6810))+(((-1.0)*x6813))+((r12*x6801)));
evalcond[5]=((((-1.0)*r00*x6812))+((x6801*x6803))+(((-1.0)*x6813))+((r02*x6800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x6814=(cj7*sj9);
IkReal x6815=(r21*sj12);
IkReal x6816=(cj12*r20);
IkReal x6817=(cj9*sj7);
CheckValue<IkReal> x6818 = IKatan2WithCheck(IkReal((((x6814*x6815))+(((-1.0)*x6814*x6816))+((x6816*x6817))+(((-1.0)*x6815*x6817)))),IkReal(((((-1.0)*r22*x6814))+((r22*x6817)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6818.valid){
continue;
}
CheckValue<IkReal> x6819=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x6819.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x6818.value)+(((1.5707963267949)*(x6819.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x6820=IKsin(j11);
IkReal x6821=IKcos(j11);
IkReal x6822=(cj12*r20);
IkReal x6823=(r01*sj12);
IkReal x6824=((1.0)*sj7);
IkReal x6825=(r11*sj12);
IkReal x6826=(cj7*sj9);
IkReal x6827=(r21*sj12);
IkReal x6828=((1.0)*cj7*cj9);
IkReal x6829=(sj9*x6824);
IkReal x6830=((1.0)*x6820);
IkReal x6831=(cj12*x6820);
IkReal x6832=((1.0)*cj12*x6821);
IkReal x6833=(x6828+x6829);
evalcond[0]=(((r22*x6821))+((x6820*x6822))+(((-1.0)*x6827*x6830)));
evalcond[1]=(((r22*x6820))+(((-1.0)*x6821*x6822))+((x6821*x6827)));
evalcond[2]=(((r02*x6821))+((r00*x6831))+((cj9*sj7))+(((-1.0)*x6826))+(((-1.0)*x6823*x6830)));
evalcond[3]=(((r12*x6820))+(((-1.0)*r10*x6832))+x6826+(((-1.0)*cj9*x6824))+((x6821*x6825)));
evalcond[4]=((((-1.0)*x6825*x6830))+((r10*x6831))+((r12*x6821))+(((-1.0)*x6833)));
evalcond[5]=(((r02*x6820))+(((-1.0)*r00*x6832))+((x6821*x6823))+(((-1.0)*x6833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6834=((-1.0)*r10);
IkReal x6836 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6836)==0){
continue;
}
IkReal x6835=pow(x6836,-0.5);
CheckValue<IkReal> x6837 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6834),IKFAST_ATAN2_MAGTHRESH);
if(!x6837.valid){
continue;
}
IkReal gconst54=((-1.0)*(x6837.value));
IkReal gconst55=(r11*x6835);
IkReal gconst56=(x6834*x6835);
CheckValue<IkReal> x6838 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6838.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j12+(x6838.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x6839=(gconst55*r21);
IkReal x6840=(cj9*sj8);
IkReal x6841=(gconst56*r20);
IkReal x6842=(sj8*sj9);
CheckValue<IkReal> x6843 = IKatan2WithCheck(IkReal((((r22*x6840))+((x6841*x6842))+(((-1.0)*x6839*x6842)))),IkReal((((r22*x6842))+(((-1.0)*x6840*x6841))+((x6839*x6840)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6843.valid){
continue;
}
CheckValue<IkReal> x6844=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x6841*x6841)+(x6839*x6839)+(((-2.0)*x6839*x6841)))),-1);
if(!x6844.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x6843.value)+(((1.5707963267949)*(x6844.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x6845=IKsin(j11);
IkReal x6846=IKcos(j11);
IkReal x6847=(cj7*sj9);
IkReal x6848=(cj9*sj7);
IkReal x6849=((1.0)*sj9);
IkReal x6850=((1.0)*cj9);
IkReal x6851=(gconst56*x6845);
IkReal x6852=(gconst55*x6846);
IkReal x6853=((1.0)*gconst56*x6846);
IkReal x6854=((1.0)*gconst55*x6845);
evalcond[0]=(((r22*x6846))+((r20*x6851))+(((-1.0)*sj8*x6849))+(((-1.0)*r21*x6854)));
evalcond[1]=((((-1.0)*sj8*x6850))+((r21*x6852))+((r22*x6845))+(((-1.0)*r20*x6853)));
evalcond[2]=(((r00*x6851))+((cj8*x6847))+(((-1.0)*r01*x6854))+x6848+((r02*x6846)));
evalcond[3]=(((r12*x6845))+(((-1.0)*r10*x6853))+((cj8*x6848))+((r11*x6852))+x6847);
evalcond[4]=(((cj8*sj7*sj9))+((r12*x6846))+((r10*x6851))+(((-1.0)*r11*x6854))+(((-1.0)*cj7*x6850)));
evalcond[5]=((((-1.0)*sj7*x6849))+((r01*x6852))+(((-1.0)*r00*x6853))+((cj7*cj8*cj9))+((r02*x6845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6855=((-1.0)*r11);
IkReal x6857 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6857)==0){
continue;
}
IkReal x6856=pow(x6857,-0.5);
CheckValue<IkReal> x6858 = IKatan2WithCheck(IkReal(x6855),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6858.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x6858.value))));
IkReal gconst58=(x6855*x6856);
IkReal gconst59=((1.0)*r10*x6856);
CheckValue<IkReal> x6859 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6859.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12+(x6859.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x6860=((1.0)*sj8);
IkReal x6861=(gconst58*r21);
IkReal x6862=(gconst59*r20);
IkReal x6863=(sj8*sj9);
IkReal x6864=(cj9*sj8);
CheckValue<IkReal> x6865=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x6862*x6862)+(x6861*x6861)+(((-2.0)*x6861*x6862)))),-1);
if(!x6865.valid){
continue;
}
CheckValue<IkReal> x6866 = IKatan2WithCheck(IkReal((((r22*x6864))+((x6862*x6863))+(((-1.0)*sj9*x6860*x6861)))),IkReal((((r22*x6863))+(((-1.0)*cj9*x6860*x6862))+((x6861*x6864)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6866.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6865.value)))+(x6866.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x6867=IKsin(j11);
IkReal x6868=IKcos(j11);
IkReal x6869=(cj7*sj9);
IkReal x6870=(cj8*cj9);
IkReal x6871=((1.0)*sj9);
IkReal x6872=((1.0)*cj9);
IkReal x6873=(gconst59*x6867);
IkReal x6874=(gconst58*x6868);
IkReal x6875=((1.0)*gconst58*x6867);
IkReal x6876=((1.0)*gconst59*x6868);
evalcond[0]=(((r22*x6868))+(((-1.0)*r21*x6875))+(((-1.0)*sj8*x6871))+((r20*x6873)));
evalcond[1]=(((r22*x6867))+(((-1.0)*r20*x6876))+((r21*x6874))+(((-1.0)*sj8*x6872)));
evalcond[2]=(((r02*x6868))+(((-1.0)*r01*x6875))+((cj9*sj7))+((cj8*x6869))+((r00*x6873)));
evalcond[3]=(((r11*x6874))+((r12*x6867))+((sj7*x6870))+x6869+(((-1.0)*r10*x6876)));
evalcond[4]=(((cj8*sj7*sj9))+((r12*x6868))+(((-1.0)*r11*x6875))+(((-1.0)*cj7*x6872))+((r10*x6873)));
evalcond[5]=(((r02*x6867))+(((-1.0)*r00*x6876))+((cj7*x6870))+(((-1.0)*sj7*x6871))+((r01*x6874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x6877=((-1.0)*py);
sj10=0;
cj10=1.0;
j10=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6877);
rxp0_2=(py*r00);
rxp1_0=(r21*x6877);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j11eval[0]=r12;
j11eval[1]=IKsign(r12);
j11eval[2]=((IKabs((cj7*cj9)))+(IKabs((cj7*sj9))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x6878=((-1.0)*py);
sj10=0;
cj10=1.0;
j10=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6878);
rxp0_2=(py*r00);
rxp1_0=(r21*x6878);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x6879=(cj7*cj8);
IkReal x6880=((((-1.0)*r01*sj12))+((cj12*r00)));
j11eval[0]=x6880;
j11eval[1]=((IKabs((cj9*x6879)))+(IKabs((sj9*x6879))));
j11eval[2]=IKsign(x6880);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x6881=((-1.0)*py);
sj10=0;
cj10=1.0;
j10=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6881);
rxp0_2=(py*r00);
rxp1_0=(r21*x6881);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j11eval[0]=((((-1.0)*r01*sj12))+((cj12*r00)));
j11eval[1]=r12;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x6882=IKPowWithIntegerCheck(((((-1.0)*r01*sj12))+((cj12*r00))),-1);
if(!x6882.valid){
continue;
}
CheckValue<IkReal> x6883=IKPowWithIntegerCheck(r12,-1);
if(!x6883.valid){
continue;
}
if( IKabs(((-1.0)*cj7*cj8*sj9*(x6882.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj7*cj9*(x6883.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj7*cj8*sj9*(x6882.value)))+IKsqr((cj7*cj9*(x6883.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*cj7*cj8*sj9*(x6882.value)), (cj7*cj9*(x6883.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x6884=IKsin(j11);
IkReal x6885=IKcos(j11);
IkReal x6886=(cj7*sj9);
IkReal x6887=(cj7*cj9);
IkReal x6888=(cj12*x6884);
IkReal x6889=(sj12*x6885);
IkReal x6890=((1.0)*cj12*x6885);
IkReal x6891=((1.0)*sj12*x6884);
evalcond[0]=(x6886+((r12*x6884)));
evalcond[1]=((((-1.0)*x6887))+((r12*x6885)));
evalcond[2]=(((r20*x6888))+(((-1.0)*r21*x6891)));
evalcond[3]=((((-1.0)*r20*x6890))+((r21*x6889)));
evalcond[4]=(((cj8*x6886))+(((-1.0)*r01*x6891))+((r00*x6888)));
evalcond[5]=(((cj8*x6887))+((r01*x6889))+(((-1.0)*r00*x6890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x6892=(cj7*cj8);
CheckValue<IkReal> x6893 = IKatan2WithCheck(IkReal(((-1.0)*sj9*x6892)),IkReal((cj9*x6892)),IKFAST_ATAN2_MAGTHRESH);
if(!x6893.valid){
continue;
}
CheckValue<IkReal> x6894=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj12))+((cj12*r00)))),-1);
if(!x6894.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x6893.value)+(((1.5707963267949)*(x6894.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x6895=IKsin(j11);
IkReal x6896=IKcos(j11);
IkReal x6897=(cj7*sj9);
IkReal x6898=(cj7*cj9);
IkReal x6899=(cj12*x6895);
IkReal x6900=(sj12*x6896);
IkReal x6901=((1.0)*cj12*x6896);
IkReal x6902=((1.0)*sj12*x6895);
evalcond[0]=(((r12*x6895))+x6897);
evalcond[1]=((((-1.0)*x6898))+((r12*x6896)));
evalcond[2]=((((-1.0)*r21*x6902))+((r20*x6899)));
evalcond[3]=((((-1.0)*r20*x6901))+((r21*x6900)));
evalcond[4]=(((cj8*x6897))+(((-1.0)*r01*x6902))+((r00*x6899)));
evalcond[5]=(((r01*x6900))+(((-1.0)*r00*x6901))+((cj8*x6898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x6903 = IKatan2WithCheck(IkReal(((-1.0)*cj7*sj9)),IkReal((cj7*cj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x6903.valid){
continue;
}
CheckValue<IkReal> x6904=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x6904.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x6903.value)+(((1.5707963267949)*(x6904.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x6905=IKsin(j11);
IkReal x6906=IKcos(j11);
IkReal x6907=(cj7*sj9);
IkReal x6908=(cj7*cj9);
IkReal x6909=(cj12*x6905);
IkReal x6910=(sj12*x6906);
IkReal x6911=((1.0)*cj12*x6906);
IkReal x6912=((1.0)*sj12*x6905);
evalcond[0]=(((r12*x6905))+x6907);
evalcond[1]=((((-1.0)*x6908))+((r12*x6906)));
evalcond[2]=((((-1.0)*r21*x6912))+((r20*x6909)));
evalcond[3]=(((r21*x6910))+(((-1.0)*r20*x6911)));
evalcond[4]=(((r00*x6909))+((cj8*x6907))+(((-1.0)*r01*x6912)));
evalcond[5]=(((cj8*x6908))+(((-1.0)*r00*x6911))+((r01*x6910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x6913=cj12*cj12;
IkReal x6914=((1.0)*r12);
IkReal x6915=(cj7*sj9);
IkReal x6916=(r21*sj12);
IkReal x6917=(r11*sj12);
IkReal x6918=(cj12*r20);
IkReal x6919=(r11*r21);
IkReal x6920=(sj8*sj9);
IkReal x6921=((1.0)*r10);
IkReal x6922=(cj8*cj9*sj7);
CheckValue<IkReal> x6923=IKPowWithIntegerCheck(IKsign((((cj12*r10*x6916))+((x6913*x6919))+(((-1.0)*r22*x6914))+(((-1.0)*x6919))+(((-1.0)*r20*x6913*x6921))+((x6917*x6918)))),-1);
if(!x6923.valid){
continue;
}
CheckValue<IkReal> x6924 = IKatan2WithCheck(IkReal((((r22*x6915))+((r22*x6922))+((x6917*x6920))+(((-1.0)*cj12*x6920*x6921)))),IkReal((((x6915*x6916))+((x6916*x6922))+(((-1.0)*x6915*x6918))+(((-1.0)*x6914*x6920))+(((-1.0)*x6918*x6922)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6924.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6923.value)))+(x6924.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x6925=IKsin(j11);
IkReal x6926=IKcos(j11);
IkReal x6927=(cj7*sj9);
IkReal x6928=(cj12*r20);
IkReal x6929=(r01*sj12);
IkReal x6930=(cj9*sj7);
IkReal x6931=((1.0)*sj9);
IkReal x6932=(r11*sj12);
IkReal x6933=(r21*sj12);
IkReal x6934=((1.0)*cj9);
IkReal x6935=((1.0)*x6925);
IkReal x6936=(cj12*x6925);
IkReal x6937=((1.0)*cj12*x6926);
evalcond[0]=((((-1.0)*sj8*x6931))+((r22*x6926))+((x6925*x6928))+(((-1.0)*x6933*x6935)));
evalcond[1]=(((x6926*x6933))+(((-1.0)*x6926*x6928))+(((-1.0)*sj8*x6934))+((r22*x6925)));
evalcond[2]=(((cj8*x6927))+((r00*x6936))+((r02*x6926))+x6930+(((-1.0)*x6929*x6935)));
evalcond[3]=((((-1.0)*r10*x6937))+((x6926*x6932))+((r12*x6925))+x6927+((cj8*x6930)));
evalcond[4]=(((cj8*sj7*sj9))+(((-1.0)*x6932*x6935))+((r10*x6936))+(((-1.0)*cj7*x6934))+((r12*x6926)));
evalcond[5]=(((x6926*x6929))+(((-1.0)*sj7*x6931))+(((-1.0)*r00*x6937))+((r02*x6925))+((cj7*cj8*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x6938=cj12*cj12;
IkReal x6939=r21*r21;
IkReal x6940=(cj9*sj8);
IkReal x6941=(r21*sj12);
IkReal x6942=(sj8*sj9);
IkReal x6943=(cj12*r20);
CheckValue<IkReal> x6944 = IKatan2WithCheck(IkReal((((r22*x6940))+((x6942*x6943))+(((-1.0)*x6941*x6942)))),IkReal((((r22*x6942))+((x6940*x6941))+(((-1.0)*x6940*x6943)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6944.valid){
continue;
}
CheckValue<IkReal> x6945=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x6941*x6943))+(((-1.0)*x6938*x6939))+((x6938*(r20*r20)))+x6939)),-1);
if(!x6945.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x6944.value)+(((1.5707963267949)*(x6945.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x6946=IKsin(j11);
IkReal x6947=IKcos(j11);
IkReal x6948=(cj7*sj9);
IkReal x6949=(cj12*r20);
IkReal x6950=(r01*sj12);
IkReal x6951=(cj9*sj7);
IkReal x6952=((1.0)*sj9);
IkReal x6953=(r11*sj12);
IkReal x6954=(r21*sj12);
IkReal x6955=((1.0)*cj9);
IkReal x6956=((1.0)*x6946);
IkReal x6957=(cj12*x6946);
IkReal x6958=((1.0)*cj12*x6947);
evalcond[0]=((((-1.0)*sj8*x6952))+((r22*x6947))+((x6946*x6949))+(((-1.0)*x6954*x6956)));
evalcond[1]=((((-1.0)*sj8*x6955))+((r22*x6946))+(((-1.0)*x6947*x6949))+((x6947*x6954)));
evalcond[2]=((((-1.0)*x6950*x6956))+((cj8*x6948))+((r02*x6947))+x6951+((r00*x6957)));
evalcond[3]=(((cj8*x6951))+((x6947*x6953))+((r12*x6946))+x6948+(((-1.0)*r10*x6958)));
evalcond[4]=(((cj8*sj7*sj9))+((r10*x6957))+(((-1.0)*cj7*x6955))+((r12*x6947))+(((-1.0)*x6953*x6956)));
evalcond[5]=((((-1.0)*sj7*x6952))+((r02*x6946))+((x6947*x6950))+((cj7*cj8*cj9))+(((-1.0)*r00*x6958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x6959=(sj8*sj9);
IkReal x6960=((1.0)*cj12);
IkReal x6961=(cj9*sj7);
IkReal x6962=(r21*sj12);
IkReal x6963=(cj7*cj8*sj9);
CheckValue<IkReal> x6964=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6960))+(((-1.0)*r10*sj12)))),-1);
if(!x6964.valid){
continue;
}
CheckValue<IkReal> x6965 = IKatan2WithCheck(IkReal((((r22*x6961))+((r22*x6963))+((r02*x6959)))),IkReal((((x6962*x6963))+((x6961*x6962))+(((-1.0)*r00*x6959*x6960))+((r01*sj12*x6959))+(((-1.0)*r20*x6960*x6961))+(((-1.0)*r20*x6960*x6963)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6965.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6964.value)))+(x6965.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x6966=IKsin(j11);
IkReal x6967=IKcos(j11);
IkReal x6968=(cj7*sj9);
IkReal x6969=(cj12*r20);
IkReal x6970=(r01*sj12);
IkReal x6971=(cj9*sj7);
IkReal x6972=((1.0)*sj9);
IkReal x6973=(r11*sj12);
IkReal x6974=(r21*sj12);
IkReal x6975=((1.0)*cj9);
IkReal x6976=((1.0)*x6966);
IkReal x6977=(cj12*x6966);
IkReal x6978=((1.0)*cj12*x6967);
evalcond[0]=((((-1.0)*x6974*x6976))+((r22*x6967))+((x6966*x6969))+(((-1.0)*sj8*x6972)));
evalcond[1]=(((x6967*x6974))+((r22*x6966))+(((-1.0)*sj8*x6975))+(((-1.0)*x6967*x6969)));
evalcond[2]=((((-1.0)*x6970*x6976))+((r00*x6977))+((r02*x6967))+x6971+((cj8*x6968)));
evalcond[3]=(((x6967*x6973))+(((-1.0)*r10*x6978))+((cj8*x6971))+x6968+((r12*x6966)));
evalcond[4]=(((cj8*sj7*sj9))+(((-1.0)*cj7*x6975))+(((-1.0)*x6973*x6976))+((r10*x6977))+((r12*x6967)));
evalcond[5]=(((x6967*x6970))+((r02*x6966))+(((-1.0)*sj7*x6972))+((cj7*cj8*cj9))+(((-1.0)*r00*x6978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x6979=cj12*cj12;
IkReal x6980=r21*r21;
IkReal x6981=(cj9*sj8);
IkReal x6982=(r21*sj12);
IkReal x6983=(sj8*sj9);
IkReal x6984=(cj12*r20);
CheckValue<IkReal> x6985=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6982*x6984))+(r22*r22)+x6980+(((-1.0)*x6979*x6980))+((x6979*(r20*r20))))),-1);
if(!x6985.valid){
continue;
}
CheckValue<IkReal> x6986 = IKatan2WithCheck(IkReal((((r22*x6981))+((x6983*x6984))+(((-1.0)*x6982*x6983)))),IkReal((((r22*x6983))+((x6981*x6982))+(((-1.0)*x6981*x6984)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6986.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6985.value)))+(x6986.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x6987=IKsin(j11);
IkReal x6988=IKcos(j11);
IkReal x6989=(r21*sj12);
IkReal x6990=((1.0)*sj8);
IkReal x6991=(cj12*r20);
evalcond[0]=(((r22*x6988))+((x6987*x6991))+(((-1.0)*sj9*x6990))+(((-1.0)*x6987*x6989)));
evalcond[1]=(((r22*x6987))+(((-1.0)*x6988*x6991))+((x6988*x6989))+(((-1.0)*cj9*x6990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
sj10=0;
cj10=1.0;
j10=0;
IkReal x6992=((1.0)*cj12);
IkReal x6993=((1.0)*sj12);
j7eval[0]=sj8;
j7eval[1]=IKsign(sj8);
j7eval[2]=((IKabs(((((-1.0)*r00*x6993))+(((-1.0)*r01*x6992)))))+(IKabs(((((-1.0)*r11*x6992))+(((-1.0)*r10*x6993))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=0;
cj10=1.0;
j10=0;
j7eval[0]=cj9;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj10=0;
cj10=1.0;
j10=0;
j7eval[0]=cj8;
j7eval[1]=cj9;
j7eval[2]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x6994=((1.0)*cj12);
IkReal x6995=((1.0)*sj12);
if( IKabs(((((-1.0)*r11*x6994))+(((-1.0)*r10*x6995)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6995))+(((-1.0)*r01*x6994)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x6994))+(((-1.0)*r10*x6995))))+IKsqr(((((-1.0)*r00*x6995))+(((-1.0)*r01*x6994))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*r11*x6994))+(((-1.0)*r10*x6995))), ((((-1.0)*r00*x6995))+(((-1.0)*r01*x6994))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x6996=IKsin(j7);
IkReal x6997=IKcos(j7);
IkReal x6998=(r11*sj12);
IkReal x6999=((1.0)*sj11);
IkReal x7000=(r01*sj12);
IkReal x7001=((0.4)*sj12);
IkReal x7002=(cj12*sj11);
IkReal x7003=((0.4)*cj12);
IkReal x7004=((1.0)*cj11*cj12);
IkReal x7005=(sj9*x6997);
IkReal x7006=(sj9*x6996);
evalcond[0]=(((r00*sj12))+x6997+((cj12*r01)));
evalcond[1]=(x6996+((r10*sj12))+((cj12*r11)));
evalcond[2]=(((cj9*x6996))+(((-1.0)*x6999*x7000))+((cj11*r02))+((r00*x7002)));
evalcond[3]=(x7005+((r12*sj11))+(((-1.0)*r10*x7004))+((cj11*x6998)));
evalcond[4]=((((-1.0)*x6998*x6999))+(((-1.0)*cj9*x6997))+((cj11*r12))+((r10*x7002)));
evalcond[5]=((((-1.0)*x7006))+((r02*sj11))+((cj11*x7000))+(((-1.0)*r00*x7004)));
evalcond[6]=((((-0.00043624)*x7006))+(((0.41956376)*x6997))+(((-1.0)*r00*x7001))+(((-1.0)*px))+(((-1.0)*r01*x7003)));
evalcond[7]=((((-1.0)*r11*x7003))+(((-1.0)*r10*x7001))+(((0.41956376)*x6996))+(((0.00043624)*x7005))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs((((r10*sj12))+((cj12*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj12))+((cj12*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj12))+((cj12*r11))))+IKsqr((((r00*sj12))+((cj12*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((r10*sj12))+((cj12*r11))), (((r00*sj12))+((cj12*r01))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x7007=IKsin(j7);
IkReal x7008=IKcos(j7);
IkReal x7009=(r11*sj12);
IkReal x7010=((1.0)*sj11);
IkReal x7011=(r01*sj12);
IkReal x7012=((0.4)*sj12);
IkReal x7013=(cj12*sj11);
IkReal x7014=((0.4)*cj12);
IkReal x7015=((1.0)*cj11*cj12);
IkReal x7016=(sj9*x7008);
IkReal x7017=((1.0)*x7008);
IkReal x7018=(sj9*x7007);
evalcond[0]=((((-1.0)*x7017))+((r00*sj12))+((cj12*r01)));
evalcond[1]=((((-1.0)*x7007))+((r10*sj12))+((cj12*r11)));
evalcond[2]=((((-1.0)*x7010*x7011))+((cj11*r02))+((r00*x7013))+((cj9*x7007)));
evalcond[3]=(x7016+((r12*sj11))+((cj11*x7009))+(((-1.0)*r10*x7015)));
evalcond[4]=((((-1.0)*x7009*x7010))+(((-1.0)*cj9*x7017))+((cj11*r12))+((r10*x7013)));
evalcond[5]=((((-1.0)*r00*x7015))+((r02*sj11))+((cj11*x7011))+(((-1.0)*x7018)));
evalcond[6]=((((-1.0)*r00*x7012))+(((-0.42043624)*x7008))+(((-0.00043624)*x7018))+(((-1.0)*px))+(((-1.0)*r01*x7014)));
evalcond[7]=((((-0.42043624)*x7007))+(((-1.0)*py))+(((-1.0)*r11*x7014))+(((-1.0)*r10*x7012))+(((0.00043624)*x7016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x7019=((1.0)*cj12);
IkReal x7020=((1.0)*sj12);
j7eval[0]=sj8;
j7eval[1]=IKsign(sj8);
j7eval[2]=((IKabs(((((-1.0)*r10*x7020))+(((-1.0)*r11*x7019)))))+(IKabs(((((-1.0)*r00*x7020))+(((-1.0)*r01*x7019))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=0;
cj10=1.0;
j10=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7eval[0]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=0;
cj10=1.0;
j10=0;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7eval[0]=cj8;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7021=((1.0)*cj12);
CheckValue<IkReal> x7022=IKPowWithIntegerCheck(cj8,-1);
if(!x7022.valid){
continue;
}
CheckValue<IkReal> x7023=IKPowWithIntegerCheck(sj8,-1);
if(!x7023.valid){
continue;
}
if( IKabs(((x7022.value)*(((((-1.0)*cj11*r12))+((r11*sj11*sj12))+(((-1.0)*r10*sj11*x7021)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7023.value)*(((((-1.0)*r01*x7021))+(((-1.0)*r00*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7022.value)*(((((-1.0)*cj11*r12))+((r11*sj11*sj12))+(((-1.0)*r10*sj11*x7021))))))+IKsqr(((x7023.value)*(((((-1.0)*r01*x7021))+(((-1.0)*r00*sj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x7022.value)*(((((-1.0)*cj11*r12))+((r11*sj11*sj12))+(((-1.0)*r10*sj11*x7021))))), ((x7023.value)*(((((-1.0)*r01*x7021))+(((-1.0)*r00*sj12))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x7024=IKcos(j7);
IkReal x7025=IKsin(j7);
IkReal x7026=(r11*sj12);
IkReal x7027=((1.0)*sj11);
IkReal x7028=(r01*sj12);
IkReal x7029=((0.4)*sj12);
IkReal x7030=(cj12*sj11);
IkReal x7031=((0.4)*cj12);
IkReal x7032=((0.00043624)*x7024);
IkReal x7033=((0.00043624)*x7025);
IkReal x7034=((1.0)*cj11*cj12);
IkReal x7035=(sj8*x7024);
IkReal x7036=(sj8*x7025);
evalcond[0]=(x7035+((r00*sj12))+((cj12*r01)));
evalcond[1]=(x7036+((r10*sj12))+((cj12*r11)));
evalcond[2]=(x7024+((r12*sj11))+((cj11*x7026))+(((-1.0)*r10*x7034)));
evalcond[3]=(((cj8*x7024))+((r00*x7030))+(((-1.0)*x7027*x7028))+((cj11*r02)));
evalcond[4]=(((cj8*x7025))+((r10*x7030))+(((-1.0)*x7026*x7027))+((cj11*r12)));
evalcond[5]=(((r02*sj11))+(((-1.0)*x7025))+(((-1.0)*r00*x7034))+((cj11*x7028)));
evalcond[6]=((((-1.0)*r01*x7031))+(((0.42)*x7035))+(((-1.0)*px))+(((-1.0)*r00*x7029))+(((-1.0)*x7033))+(((-1.0)*x7032)));
evalcond[7]=(x7032+(((-1.0)*r10*x7029))+(((-1.0)*r11*x7031))+(((0.42)*x7036))+(((-1.0)*py))+(((-1.0)*x7033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7037=((1.0)*cj12);
CheckValue<IkReal> x7038=IKPowWithIntegerCheck(sj8,-1);
if(!x7038.valid){
continue;
}
if( IKabs((((r02*sj11))+((cj11*r01*sj12))+(((-1.0)*cj11*r00*x7037)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7038.value)*(((((-1.0)*r01*x7037))+(((-1.0)*r00*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*sj11))+((cj11*r01*sj12))+(((-1.0)*cj11*r00*x7037))))+IKsqr(((x7038.value)*(((((-1.0)*r01*x7037))+(((-1.0)*r00*sj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((r02*sj11))+((cj11*r01*sj12))+(((-1.0)*cj11*r00*x7037))), ((x7038.value)*(((((-1.0)*r01*x7037))+(((-1.0)*r00*sj12))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x7039=IKcos(j7);
IkReal x7040=IKsin(j7);
IkReal x7041=(r11*sj12);
IkReal x7042=((1.0)*sj11);
IkReal x7043=(r01*sj12);
IkReal x7044=((0.4)*sj12);
IkReal x7045=(cj12*sj11);
IkReal x7046=((0.4)*cj12);
IkReal x7047=((0.00043624)*x7039);
IkReal x7048=((0.00043624)*x7040);
IkReal x7049=((1.0)*cj11*cj12);
IkReal x7050=(sj8*x7039);
IkReal x7051=(sj8*x7040);
evalcond[0]=(x7050+((r00*sj12))+((cj12*r01)));
evalcond[1]=(x7051+((r10*sj12))+((cj12*r11)));
evalcond[2]=(((cj11*x7041))+x7039+((r12*sj11))+(((-1.0)*r10*x7049)));
evalcond[3]=(((r00*x7045))+((cj8*x7039))+(((-1.0)*x7042*x7043))+((cj11*r02)));
evalcond[4]=(((cj8*x7040))+((r10*x7045))+((cj11*r12))+(((-1.0)*x7041*x7042)));
evalcond[5]=(((cj11*x7043))+((r02*sj11))+(((-1.0)*x7040))+(((-1.0)*r00*x7049)));
evalcond[6]=((((-1.0)*x7047))+(((-1.0)*x7048))+(((-1.0)*r00*x7044))+(((-1.0)*r01*x7046))+(((-1.0)*px))+(((0.42)*x7050)));
evalcond[7]=((((-1.0)*x7048))+x7047+(((-1.0)*r11*x7046))+(((-1.0)*py))+(((0.42)*x7051))+(((-1.0)*r10*x7044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7052=((1.0)*cj12);
IkReal x7053=((1.0)*sj12);
CheckValue<IkReal> x7054=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x7054.valid){
continue;
}
CheckValue<IkReal> x7055 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x7052))+(((-1.0)*r10*x7053)))),IkReal(((((-1.0)*r01*x7052))+(((-1.0)*r00*x7053)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7055.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7054.value)))+(x7055.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x7056=IKcos(j7);
IkReal x7057=IKsin(j7);
IkReal x7058=(r11*sj12);
IkReal x7059=((1.0)*sj11);
IkReal x7060=(r01*sj12);
IkReal x7061=((0.4)*sj12);
IkReal x7062=(cj12*sj11);
IkReal x7063=((0.4)*cj12);
IkReal x7064=((0.00043624)*x7056);
IkReal x7065=((0.00043624)*x7057);
IkReal x7066=((1.0)*cj11*cj12);
IkReal x7067=(sj8*x7056);
IkReal x7068=(sj8*x7057);
evalcond[0]=(x7067+((r00*sj12))+((cj12*r01)));
evalcond[1]=(x7068+((r10*sj12))+((cj12*r11)));
evalcond[2]=(x7056+((r12*sj11))+((cj11*x7058))+(((-1.0)*r10*x7066)));
evalcond[3]=((((-1.0)*x7059*x7060))+((cj8*x7056))+((cj11*r02))+((r00*x7062)));
evalcond[4]=((((-1.0)*x7058*x7059))+((cj8*x7057))+((cj11*r12))+((r10*x7062)));
evalcond[5]=(((r02*sj11))+(((-1.0)*r00*x7066))+(((-1.0)*x7057))+((cj11*x7060)));
evalcond[6]=((((-1.0)*x7065))+(((-1.0)*x7064))+(((-1.0)*r01*x7063))+(((-1.0)*r00*x7061))+(((0.42)*x7067))+(((-1.0)*px)));
evalcond[7]=(x7064+(((-1.0)*x7065))+(((-1.0)*r11*x7063))+(((0.42)*x7068))+(((-1.0)*py))+(((-1.0)*r10*x7061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x7069=((1.0)*cj12);
IkReal x7070=((1.0)*sj12);
j7eval[0]=sj8;
j7eval[1]=IKsign(sj8);
j7eval[2]=((IKabs(((((-1.0)*r00*x7070))+(((-1.0)*r01*x7069)))))+(IKabs(((((-1.0)*r11*x7069))+(((-1.0)*r10*x7070))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=0;
cj10=1.0;
j10=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7eval[0]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=0;
cj10=1.0;
j10=0;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7eval[0]=cj8;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7071=((1.0)*sj12);
CheckValue<IkReal> x7072=IKPowWithIntegerCheck(cj8,-1);
if(!x7072.valid){
continue;
}
CheckValue<IkReal> x7073=IKPowWithIntegerCheck(sj8,-1);
if(!x7073.valid){
continue;
}
if( IKabs(((x7072.value)*(((((-1.0)*r11*sj11*x7071))+((cj11*r12))+((cj12*r10*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7073.value)*(((((-1.0)*cj12*r01))+(((-1.0)*r00*x7071)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7072.value)*(((((-1.0)*r11*sj11*x7071))+((cj11*r12))+((cj12*r10*sj11))))))+IKsqr(((x7073.value)*(((((-1.0)*cj12*r01))+(((-1.0)*r00*x7071))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x7072.value)*(((((-1.0)*r11*sj11*x7071))+((cj11*r12))+((cj12*r10*sj11))))), ((x7073.value)*(((((-1.0)*cj12*r01))+(((-1.0)*r00*x7071))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x7074=IKsin(j7);
IkReal x7075=IKcos(j7);
IkReal x7076=(r11*sj12);
IkReal x7077=((1.0)*sj11);
IkReal x7078=(r01*sj12);
IkReal x7079=((0.4)*sj12);
IkReal x7080=(cj12*sj11);
IkReal x7081=((0.4)*cj12);
IkReal x7082=((0.00043624)*x7075);
IkReal x7083=((0.00043624)*x7074);
IkReal x7084=((1.0)*cj11*cj12);
IkReal x7085=(sj8*x7075);
IkReal x7086=(sj8*x7074);
IkReal x7087=((1.0)*x7075);
evalcond[0]=(x7085+((r00*sj12))+((cj12*r01)));
evalcond[1]=(x7086+((r10*sj12))+((cj12*r11)));
evalcond[2]=(((r02*sj11))+x7074+(((-1.0)*r00*x7084))+((cj11*x7078)));
evalcond[3]=(((r12*sj11))+(((-1.0)*r10*x7084))+((cj11*x7076))+(((-1.0)*x7087)));
evalcond[4]=((((-1.0)*cj8*x7087))+((r00*x7080))+(((-1.0)*x7077*x7078))+((cj11*r02)));
evalcond[5]=((((-1.0)*cj8*x7074))+(((-1.0)*x7076*x7077))+((cj11*r12))+((r10*x7080)));
evalcond[6]=(x7083+(((-1.0)*r00*x7079))+(((-1.0)*r01*x7081))+(((-1.0)*px))+(((0.42)*x7085))+(((-1.0)*x7082)));
evalcond[7]=((((-1.0)*py))+(((-1.0)*r10*x7079))+(((-1.0)*r11*x7081))+(((0.42)*x7086))+(((-1.0)*x7082))+(((-1.0)*x7083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7088=((1.0)*r10);
CheckValue<IkReal> x7089=IKPowWithIntegerCheck(sj8,-1);
if(!x7089.valid){
continue;
}
if( IKabs(((x7089.value)*(((((-1.0)*sj12*x7088))+(((-1.0)*cj12*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*sj11))+(((-1.0)*cj11*cj12*x7088))+((cj11*r11*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7089.value)*(((((-1.0)*sj12*x7088))+(((-1.0)*cj12*r11))))))+IKsqr((((r12*sj11))+(((-1.0)*cj11*cj12*x7088))+((cj11*r11*sj12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x7089.value)*(((((-1.0)*sj12*x7088))+(((-1.0)*cj12*r11))))), (((r12*sj11))+(((-1.0)*cj11*cj12*x7088))+((cj11*r11*sj12))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x7090=IKsin(j7);
IkReal x7091=IKcos(j7);
IkReal x7092=(r11*sj12);
IkReal x7093=((1.0)*sj11);
IkReal x7094=(r01*sj12);
IkReal x7095=((0.4)*sj12);
IkReal x7096=(cj12*sj11);
IkReal x7097=((0.4)*cj12);
IkReal x7098=((0.00043624)*x7091);
IkReal x7099=((0.00043624)*x7090);
IkReal x7100=((1.0)*cj11*cj12);
IkReal x7101=(sj8*x7091);
IkReal x7102=(sj8*x7090);
IkReal x7103=((1.0)*x7091);
evalcond[0]=(x7101+((r00*sj12))+((cj12*r01)));
evalcond[1]=(x7102+((r10*sj12))+((cj12*r11)));
evalcond[2]=(((r02*sj11))+x7090+((cj11*x7094))+(((-1.0)*r00*x7100)));
evalcond[3]=((((-1.0)*x7103))+((cj11*x7092))+((r12*sj11))+(((-1.0)*r10*x7100)));
evalcond[4]=((((-1.0)*x7093*x7094))+((r00*x7096))+(((-1.0)*cj8*x7103))+((cj11*r02)));
evalcond[5]=((((-1.0)*cj8*x7090))+((cj11*r12))+(((-1.0)*x7092*x7093))+((r10*x7096)));
evalcond[6]=((((-1.0)*x7098))+x7099+(((0.42)*x7101))+(((-1.0)*r00*x7095))+(((-1.0)*r01*x7097))+(((-1.0)*px)));
evalcond[7]=((((-1.0)*x7099))+(((-1.0)*x7098))+(((0.42)*x7102))+(((-1.0)*r10*x7095))+(((-1.0)*py))+(((-1.0)*r11*x7097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7104=((1.0)*cj12);
IkReal x7105=((1.0)*sj12);
CheckValue<IkReal> x7106=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x7106.valid){
continue;
}
CheckValue<IkReal> x7107 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x7104))+(((-1.0)*r10*x7105)))),IkReal(((((-1.0)*r00*x7105))+(((-1.0)*r01*x7104)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7107.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7106.value)))+(x7107.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x7108=IKsin(j7);
IkReal x7109=IKcos(j7);
IkReal x7110=(r11*sj12);
IkReal x7111=((1.0)*sj11);
IkReal x7112=(r01*sj12);
IkReal x7113=((0.4)*sj12);
IkReal x7114=(cj12*sj11);
IkReal x7115=((0.4)*cj12);
IkReal x7116=((0.00043624)*x7109);
IkReal x7117=((0.00043624)*x7108);
IkReal x7118=((1.0)*cj11*cj12);
IkReal x7119=(sj8*x7109);
IkReal x7120=(sj8*x7108);
IkReal x7121=((1.0)*x7109);
evalcond[0]=(x7119+((r00*sj12))+((cj12*r01)));
evalcond[1]=(x7120+((r10*sj12))+((cj12*r11)));
evalcond[2]=(x7108+((r02*sj11))+((cj11*x7112))+(((-1.0)*r00*x7118)));
evalcond[3]=(((r12*sj11))+(((-1.0)*r10*x7118))+(((-1.0)*x7121))+((cj11*x7110)));
evalcond[4]=((((-1.0)*x7111*x7112))+((cj11*r02))+(((-1.0)*cj8*x7121))+((r00*x7114)));
evalcond[5]=((((-1.0)*x7110*x7111))+((cj11*r12))+(((-1.0)*cj8*x7108))+((r10*x7114)));
evalcond[6]=(x7117+(((0.42)*x7119))+(((-1.0)*px))+(((-1.0)*r01*x7115))+(((-1.0)*r00*x7113))+(((-1.0)*x7116)));
evalcond[7]=((((-1.0)*r11*x7115))+(((-1.0)*r10*x7113))+(((-1.0)*py))+(((0.42)*x7120))+(((-1.0)*x7116))+(((-1.0)*x7117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=1.0;
j8=0;
IkReal x7122=((68162500000.0)*sj9);
IkReal x7123=((68162500000.0)*px);
IkReal x7124=((68162500000.0)*py);
j7eval[0]=((1.0)+(((-1.0)*cj9)));
j7eval[1]=IKsign(((59470418.0)+(((-59470418.0)*cj9))));
j7eval[2]=((IKabs(((((-1.0)*x7123))+((py*x7122))+((cj9*x7123)))))+(IKabs(((((-1.0)*x7124))+(((-1.0)*px*x7122))+((cj9*x7124))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=1.0;
j8=0;
j7eval[0]=((-1.0)+cj9);
j7eval[1]=IKsign(((-5453.0)+(((5453.0)*cj9))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=1.0;
j8=0;
j7eval[0]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7125=((5453.0)*cj9);
IkReal x7126=(cj11*r02);
IkReal x7127=(r01*sj11*sj12);
IkReal x7128=(cj12*r00*sj11);
CheckValue<IkReal> x7129=IKPowWithIntegerCheck(sj9,-1);
if(!x7129.valid){
continue;
}
if( IKabs((x7127+(((-1.0)*x7128))+(((-1.0)*x7126))+(((-2292.31615624427)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.000183385292499542)*(x7129.value)*(((((5453.0)*x7127))+(((-5453.0)*x7126))+(((-5453.0)*x7128))+(((12500000.0)*cj9*py))+(((-1.0)*x7125*x7127))+((x7125*x7128))+((x7125*x7126)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x7127+(((-1.0)*x7128))+(((-1.0)*x7126))+(((-2292.31615624427)*py))))+IKsqr(((0.000183385292499542)*(x7129.value)*(((((5453.0)*x7127))+(((-5453.0)*x7126))+(((-5453.0)*x7128))+(((12500000.0)*cj9*py))+(((-1.0)*x7125*x7127))+((x7125*x7128))+((x7125*x7126))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x7127+(((-1.0)*x7128))+(((-1.0)*x7126))+(((-2292.31615624427)*py))), ((0.000183385292499542)*(x7129.value)*(((((5453.0)*x7127))+(((-5453.0)*x7126))+(((-5453.0)*x7128))+(((12500000.0)*cj9*py))+(((-1.0)*x7125*x7127))+((x7125*x7128))+((x7125*x7126))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x7130=IKcos(j7);
IkReal x7131=IKsin(j7);
IkReal x7132=(r11*sj12);
IkReal x7133=((1.0)*sj11);
IkReal x7134=(r01*sj12);
IkReal x7135=(cj12*sj11);
IkReal x7136=(sj9*x7130);
IkReal x7137=(cj9*x7131);
IkReal x7138=(cj9*x7130);
IkReal x7139=((1.0)*cj11*cj12);
IkReal x7140=((0.00043624)*x7130);
IkReal x7141=((0.00043624)*x7131);
IkReal x7142=(sj9*x7131);
IkReal x7143=(x7137+x7136);
evalcond[0]=((((-1.0)*x7140))+(((-1.0)*sj9*x7141))+(((-1.0)*px))+(((0.00043624)*x7138)));
evalcond[1]=((((-1.0)*x7141))+(((-1.0)*py))+(((0.00043624)*x7137))+(((0.00043624)*x7136)));
evalcond[2]=(x7143+((r00*x7135))+((cj11*r02))+(((-1.0)*x7133*x7134)));
evalcond[3]=(x7143+(((-1.0)*r10*x7139))+((r12*sj11))+((cj11*x7132)));
evalcond[4]=(x7142+(((-1.0)*x7132*x7133))+((r10*x7135))+((cj11*r12))+(((-1.0)*x7138)));
evalcond[5]=(x7138+((r02*sj11))+(((-1.0)*r00*x7139))+(((-1.0)*x7142))+((cj11*x7134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7144=((12500000.0)*px);
IkReal x7145=((5453.0)*sj11);
IkReal x7146=(cj12*r00);
IkReal x7147=(r01*sj12);
IkReal x7148=((5453.0)*cj11*r02);
CheckValue<IkReal> x7149=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((5453.0)*cj9)))),-1);
if(!x7149.valid){
continue;
}
CheckValue<IkReal> x7150 = IKatan2WithCheck(IkReal(((((-1.0)*x7148))+((x7145*x7147))+(((-1.0)*x7145*x7146))+(((-1.0)*cj9*x7145*x7147))+((sj9*x7144))+((cj9*x7145*x7146))+((cj9*x7148)))),IkReal((((sj9*x7148))+(((-1.0)*sj9*x7145*x7147))+((sj9*x7145*x7146))+(((-1.0)*cj9*x7144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7150.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7149.value)))+(x7150.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x7151=IKcos(j7);
IkReal x7152=IKsin(j7);
IkReal x7153=(r11*sj12);
IkReal x7154=((1.0)*sj11);
IkReal x7155=(r01*sj12);
IkReal x7156=(cj12*sj11);
IkReal x7157=(sj9*x7151);
IkReal x7158=(cj9*x7152);
IkReal x7159=(cj9*x7151);
IkReal x7160=((1.0)*cj11*cj12);
IkReal x7161=((0.00043624)*x7151);
IkReal x7162=((0.00043624)*x7152);
IkReal x7163=(sj9*x7152);
IkReal x7164=(x7158+x7157);
evalcond[0]=((((0.00043624)*x7159))+(((-1.0)*sj9*x7162))+(((-1.0)*x7161))+(((-1.0)*px)));
evalcond[1]=((((0.00043624)*x7157))+(((0.00043624)*x7158))+(((-1.0)*x7162))+(((-1.0)*py)));
evalcond[2]=(x7164+((r00*x7156))+(((-1.0)*x7154*x7155))+((cj11*r02)));
evalcond[3]=(x7164+((r12*sj11))+((cj11*x7153))+(((-1.0)*r10*x7160)));
evalcond[4]=(x7163+(((-1.0)*x7153*x7154))+((cj11*r12))+(((-1.0)*x7159))+((r10*x7156)));
evalcond[5]=(x7159+((r02*sj11))+((cj11*x7155))+(((-1.0)*r00*x7160))+(((-1.0)*x7163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7165=((68162500000.0)*py);
IkReal x7166=((68162500000.0)*px);
CheckValue<IkReal> x7167 = IKatan2WithCheck(IkReal((((cj9*x7165))+(((-1.0)*sj9*x7166))+(((-1.0)*x7165)))),IkReal((((cj9*x7166))+((sj9*x7165))+(((-1.0)*x7166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7167.valid){
continue;
}
CheckValue<IkReal> x7168=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((-59470418.0)*cj9)))),-1);
if(!x7168.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x7167.value)+(((1.5707963267949)*(x7168.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x7169=IKcos(j7);
IkReal x7170=IKsin(j7);
IkReal x7171=(r11*sj12);
IkReal x7172=((1.0)*sj11);
IkReal x7173=(r01*sj12);
IkReal x7174=(cj12*sj11);
IkReal x7175=(sj9*x7169);
IkReal x7176=(cj9*x7170);
IkReal x7177=(cj9*x7169);
IkReal x7178=((1.0)*cj11*cj12);
IkReal x7179=((0.00043624)*x7169);
IkReal x7180=((0.00043624)*x7170);
IkReal x7181=(sj9*x7170);
IkReal x7182=(x7175+x7176);
evalcond[0]=((((-1.0)*x7179))+(((-1.0)*px))+(((0.00043624)*x7177))+(((-1.0)*sj9*x7180)));
evalcond[1]=((((-1.0)*x7180))+(((-1.0)*py))+(((0.00043624)*x7175))+(((0.00043624)*x7176)));
evalcond[2]=(x7182+((cj11*r02))+(((-1.0)*x7172*x7173))+((r00*x7174)));
evalcond[3]=(x7182+(((-1.0)*r10*x7178))+((r12*sj11))+((cj11*x7171)));
evalcond[4]=(x7181+(((-1.0)*x7177))+(((-1.0)*x7171*x7172))+((r10*x7174))+((cj11*r12)));
evalcond[5]=(x7177+((r02*sj11))+(((-1.0)*r00*x7178))+(((-1.0)*x7181))+((cj11*x7173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x7183=((68162500000.0)*cj9);
IkReal x7184=((68162500000.0)*px);
IkReal x7185=((68162500000.0)*py);
j7eval[0]=((1.0)+cj9);
j7eval[1]=IKsign(((59470418.0)+(((59470418.0)*cj9))));
j7eval[2]=((IKabs(((((-1.0)*x7185))+(((-1.0)*py*x7183))+(((-1.0)*sj9*x7184)))))+(IKabs(((((-1.0)*px*x7183))+(((-1.0)*x7184))+((sj9*x7185))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
j7eval[0]=((-1.0)+(((-1.0)*cj9)));
j7eval[1]=IKsign(((-5453.0)+(((-5453.0)*cj9))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
j7eval[0]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7186=((5453.0)*cj9);
IkReal x7187=(cj11*r02);
IkReal x7188=(cj12*r00*sj11);
IkReal x7189=(r01*sj11*sj12);
CheckValue<IkReal> x7190=IKPowWithIntegerCheck(sj9,-1);
if(!x7190.valid){
continue;
}
if( IKabs((x7188+x7187+(((-2292.31615624427)*py))+(((-1.0)*x7189)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.000183385292499542)*(x7190.value)*((((x7186*x7189))+(((-1.0)*x7186*x7187))+(((-1.0)*x7186*x7188))+(((5453.0)*x7189))+(((-5453.0)*x7187))+(((-5453.0)*x7188))+(((12500000.0)*cj9*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x7188+x7187+(((-2292.31615624427)*py))+(((-1.0)*x7189))))+IKsqr(((-0.000183385292499542)*(x7190.value)*((((x7186*x7189))+(((-1.0)*x7186*x7187))+(((-1.0)*x7186*x7188))+(((5453.0)*x7189))+(((-5453.0)*x7187))+(((-5453.0)*x7188))+(((12500000.0)*cj9*py))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x7188+x7187+(((-2292.31615624427)*py))+(((-1.0)*x7189))), ((-0.000183385292499542)*(x7190.value)*((((x7186*x7189))+(((-1.0)*x7186*x7187))+(((-1.0)*x7186*x7188))+(((5453.0)*x7189))+(((-5453.0)*x7187))+(((-5453.0)*x7188))+(((12500000.0)*cj9*py))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x7191=IKcos(j7);
IkReal x7192=IKsin(j7);
IkReal x7193=(r11*sj12);
IkReal x7194=((1.0)*sj11);
IkReal x7195=(r01*sj12);
IkReal x7196=((1.0)*cj9);
IkReal x7197=(cj12*sj11);
IkReal x7198=((1.0)*cj11*cj12);
IkReal x7199=((0.00043624)*x7191);
IkReal x7200=((0.00043624)*x7192);
IkReal x7201=(sj9*x7191);
IkReal x7202=(x7191*x7196);
IkReal x7203=((1.0)*sj9*x7192);
IkReal x7204=(x7203+x7202);
evalcond[0]=((((-1.0)*x7199))+(((-1.0)*sj9*x7200))+(((-1.0)*px))+(((-1.0)*cj9*x7199)));
evalcond[1]=(((sj9*x7199))+(((-1.0)*cj9*x7200))+(((-1.0)*py))+(((-1.0)*x7200)));
evalcond[2]=(((r00*x7197))+((cj9*x7192))+((cj11*r02))+(((-1.0)*x7194*x7195))+(((-1.0)*x7201)));
evalcond[3]=(x7201+((r12*sj11))+(((-1.0)*r10*x7198))+((cj11*x7193))+(((-1.0)*x7192*x7196)));
evalcond[4]=(((r10*x7197))+((cj11*r12))+(((-1.0)*x7193*x7194))+(((-1.0)*x7204)));
evalcond[5]=(((r02*sj11))+(((-1.0)*r00*x7198))+((cj11*x7195))+(((-1.0)*x7204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7205=((12500000.0)*px);
IkReal x7206=((5453.0)*sj11);
IkReal x7207=(cj12*r00);
IkReal x7208=(r01*sj12);
IkReal x7209=((5453.0)*cj11*r02);
CheckValue<IkReal> x7210=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((-5453.0)*cj9)))),-1);
if(!x7210.valid){
continue;
}
CheckValue<IkReal> x7211 = IKatan2WithCheck(IkReal((x7209+((cj9*x7209))+(((-1.0)*x7206*x7208))+((sj9*x7205))+((cj9*x7206*x7207))+((x7206*x7207))+(((-1.0)*cj9*x7206*x7208)))),IkReal((((sj9*x7206*x7208))+((cj9*x7205))+(((-1.0)*sj9*x7209))+(((-1.0)*sj9*x7206*x7207)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7211.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7210.value)))+(x7211.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x7212=IKcos(j7);
IkReal x7213=IKsin(j7);
IkReal x7214=(r11*sj12);
IkReal x7215=((1.0)*sj11);
IkReal x7216=(r01*sj12);
IkReal x7217=((1.0)*cj9);
IkReal x7218=(cj12*sj11);
IkReal x7219=((1.0)*cj11*cj12);
IkReal x7220=((0.00043624)*x7212);
IkReal x7221=((0.00043624)*x7213);
IkReal x7222=(sj9*x7212);
IkReal x7223=(x7212*x7217);
IkReal x7224=((1.0)*sj9*x7213);
IkReal x7225=(x7223+x7224);
evalcond[0]=((((-1.0)*cj9*x7220))+(((-1.0)*sj9*x7221))+(((-1.0)*px))+(((-1.0)*x7220)));
evalcond[1]=((((-1.0)*cj9*x7221))+(((-1.0)*py))+((sj9*x7220))+(((-1.0)*x7221)));
evalcond[2]=(((cj9*x7213))+((r00*x7218))+(((-1.0)*x7215*x7216))+((cj11*r02))+(((-1.0)*x7222)));
evalcond[3]=((((-1.0)*x7213*x7217))+x7222+((r12*sj11))+((cj11*x7214))+(((-1.0)*r10*x7219)));
evalcond[4]=(((r10*x7218))+((cj11*r12))+(((-1.0)*x7214*x7215))+(((-1.0)*x7225)));
evalcond[5]=(((r02*sj11))+((cj11*x7216))+(((-1.0)*r00*x7219))+(((-1.0)*x7225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7226=((68162500000.0)*cj9);
IkReal x7227=((68162500000.0)*px);
IkReal x7228=((68162500000.0)*py);
CheckValue<IkReal> x7229=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((59470418.0)*cj9)))),-1);
if(!x7229.valid){
continue;
}
CheckValue<IkReal> x7230 = IKatan2WithCheck(IkReal(((((-1.0)*sj9*x7227))+(((-1.0)*x7228))+(((-1.0)*py*x7226)))),IkReal(((((-1.0)*px*x7226))+((sj9*x7228))+(((-1.0)*x7227)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7230.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7229.value)))+(x7230.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x7231=IKcos(j7);
IkReal x7232=IKsin(j7);
IkReal x7233=(r11*sj12);
IkReal x7234=((1.0)*sj11);
IkReal x7235=(r01*sj12);
IkReal x7236=((1.0)*cj9);
IkReal x7237=(cj12*sj11);
IkReal x7238=((1.0)*cj11*cj12);
IkReal x7239=((0.00043624)*x7231);
IkReal x7240=((0.00043624)*x7232);
IkReal x7241=(sj9*x7231);
IkReal x7242=(x7231*x7236);
IkReal x7243=((1.0)*sj9*x7232);
IkReal x7244=(x7243+x7242);
evalcond[0]=((((-1.0)*cj9*x7239))+(((-1.0)*px))+(((-1.0)*sj9*x7240))+(((-1.0)*x7239)));
evalcond[1]=(((sj9*x7239))+(((-1.0)*py))+(((-1.0)*cj9*x7240))+(((-1.0)*x7240)));
evalcond[2]=((((-1.0)*x7241))+((r00*x7237))+((cj9*x7232))+(((-1.0)*x7234*x7235))+((cj11*r02)));
evalcond[3]=((((-1.0)*r10*x7238))+x7241+((cj11*x7233))+((r12*sj11))+(((-1.0)*x7232*x7236)));
evalcond[4]=(((r10*x7237))+((cj11*r12))+(((-1.0)*x7233*x7234))+(((-1.0)*x7244)));
evalcond[5]=(((r02*sj11))+((cj11*x7235))+(((-1.0)*x7244))+(((-1.0)*r00*x7238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x7249=IKPowWithIntegerCheck(sj8,-1);
if(!x7249.valid){
continue;
}
IkReal x7245=x7249.value;
IkReal x7246=(cj12*r01);
IkReal x7247=((1.0)*sj8);
IkReal x7248=(r00*sj12);
CheckValue<IkReal> x7250=IKPowWithIntegerCheck(cj8,-1);
if(!x7250.valid){
continue;
}
CheckValue<IkReal> x7251=IKPowWithIntegerCheck(cj9,-1);
if(!x7251.valid){
continue;
}
if( IKabs((x7245*(x7250.value)*(x7251.value)*((((sj9*x7246))+((sj9*x7248))+(((-1.0)*r12*sj11*x7247))+((cj11*cj12*r10*sj8))+(((-1.0)*cj11*r11*sj12*x7247)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x7245*(((((-1.0)*x7248))+(((-1.0)*x7246)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x7245*(x7250.value)*(x7251.value)*((((sj9*x7246))+((sj9*x7248))+(((-1.0)*r12*sj11*x7247))+((cj11*cj12*r10*sj8))+(((-1.0)*cj11*r11*sj12*x7247))))))+IKsqr((x7245*(((((-1.0)*x7248))+(((-1.0)*x7246))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x7245*(x7250.value)*(x7251.value)*((((sj9*x7246))+((sj9*x7248))+(((-1.0)*r12*sj11*x7247))+((cj11*cj12*r10*sj8))+(((-1.0)*cj11*r11*sj12*x7247))))), (x7245*(((((-1.0)*x7248))+(((-1.0)*x7246))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x7252=IKcos(j7);
IkReal x7253=IKsin(j7);
IkReal x7254=(r11*sj12);
IkReal x7255=((1.0)*sj11);
IkReal x7256=(r01*sj12);
IkReal x7257=((0.4)*sj12);
IkReal x7258=(cj12*r10);
IkReal x7259=((1.0)*cj11);
IkReal x7260=(cj12*r00);
IkReal x7261=(cj12*r01);
IkReal x7262=(cj8*cj9);
IkReal x7263=(cj12*r11);
IkReal x7264=(sj9*x7252);
IkReal x7265=(sj8*x7253);
IkReal x7266=(sj8*x7252);
IkReal x7267=(cj9*x7252);
IkReal x7268=((0.00043624)*x7253);
IkReal x7269=(sj9*x7253);
evalcond[0]=(x7266+x7261+((r00*sj12)));
evalcond[1]=(x7265+x7263+((r10*sj12)));
evalcond[2]=(((sj11*x7260))+((cj9*x7253))+((cj11*r02))+(((-1.0)*x7255*x7256))+((cj8*x7264)));
evalcond[3]=(x7264+((r12*sj11))+((x7253*x7262))+(((-1.0)*x7258*x7259))+((cj11*x7254)));
evalcond[4]=((((-1.0)*x7267))+((sj11*x7258))+((cj11*r12))+(((-1.0)*x7254*x7255))+((cj8*x7269)));
evalcond[5]=(((r02*sj11))+(((-1.0)*x7269))+(((-1.0)*x7259*x7260))+((x7252*x7262))+((cj11*x7256)));
evalcond[6]=((((-0.4)*x7261))+(((-1.0)*sj9*x7268))+(((-0.00043624)*x7252))+(((0.00043624)*x7252*x7262))+(((-1.0)*r00*x7257))+(((-1.0)*px))+(((0.42)*x7266)));
evalcond[7]=((((-0.4)*x7263))+(((-1.0)*r10*x7257))+(((-1.0)*x7268))+(((-1.0)*py))+(((0.00043624)*x7264))+((x7262*x7268))+(((0.42)*x7265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x7275=IKPowWithIntegerCheck(sj8,-1);
if(!x7275.valid){
continue;
}
IkReal x7270=x7275.value;
IkReal x7271=((1.0)*sj8);
IkReal x7272=(cj8*sj9);
IkReal x7273=(cj12*r01);
IkReal x7274=(r00*sj12);
CheckValue<IkReal> x7276=IKPowWithIntegerCheck(cj9,-1);
if(!x7276.valid){
continue;
}
if( IKabs((x7270*(x7276.value)*((((r01*sj11*sj12*sj8))+(((-1.0)*cj12*r00*sj11*x7271))+((x7272*x7274))+((x7272*x7273))+(((-1.0)*cj11*r02*x7271)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x7270*(((((-1.0)*x7274))+(((-1.0)*x7273)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x7270*(x7276.value)*((((r01*sj11*sj12*sj8))+(((-1.0)*cj12*r00*sj11*x7271))+((x7272*x7274))+((x7272*x7273))+(((-1.0)*cj11*r02*x7271))))))+IKsqr((x7270*(((((-1.0)*x7274))+(((-1.0)*x7273))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x7270*(x7276.value)*((((r01*sj11*sj12*sj8))+(((-1.0)*cj12*r00*sj11*x7271))+((x7272*x7274))+((x7272*x7273))+(((-1.0)*cj11*r02*x7271))))), (x7270*(((((-1.0)*x7274))+(((-1.0)*x7273))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x7277=IKcos(j7);
IkReal x7278=IKsin(j7);
IkReal x7279=(r11*sj12);
IkReal x7280=((1.0)*sj11);
IkReal x7281=(r01*sj12);
IkReal x7282=((0.4)*sj12);
IkReal x7283=(cj12*r10);
IkReal x7284=((1.0)*cj11);
IkReal x7285=(cj12*r00);
IkReal x7286=(cj12*r01);
IkReal x7287=(cj8*cj9);
IkReal x7288=(cj12*r11);
IkReal x7289=(sj9*x7277);
IkReal x7290=(sj8*x7278);
IkReal x7291=(sj8*x7277);
IkReal x7292=(cj9*x7277);
IkReal x7293=((0.00043624)*x7278);
IkReal x7294=(sj9*x7278);
evalcond[0]=(x7291+x7286+((r00*sj12)));
evalcond[1]=(x7290+x7288+((r10*sj12)));
evalcond[2]=(((cj9*x7278))+((cj11*r02))+((cj8*x7289))+(((-1.0)*x7280*x7281))+((sj11*x7285)));
evalcond[3]=(x7289+((r12*sj11))+((x7278*x7287))+(((-1.0)*x7283*x7284))+((cj11*x7279)));
evalcond[4]=((((-1.0)*x7292))+((cj11*r12))+((cj8*x7294))+((sj11*x7283))+(((-1.0)*x7279*x7280)));
evalcond[5]=(((r02*sj11))+(((-1.0)*x7284*x7285))+((x7277*x7287))+(((-1.0)*x7294))+((cj11*x7281)));
evalcond[6]=((((-1.0)*sj9*x7293))+(((-1.0)*r00*x7282))+(((-0.00043624)*x7277))+(((0.00043624)*x7277*x7287))+(((-1.0)*px))+(((0.42)*x7291))+(((-0.4)*x7286)));
evalcond[7]=((((-1.0)*x7293))+(((-1.0)*py))+(((0.00043624)*x7289))+(((0.42)*x7290))+((x7287*x7293))+(((-0.4)*x7288))+(((-1.0)*r10*x7282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7295=((1.0)*cj12);
IkReal x7296=((1.0)*sj12);
CheckValue<IkReal> x7297 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x7295))+(((-1.0)*r10*x7296)))),IkReal(((((-1.0)*r01*x7295))+(((-1.0)*r00*x7296)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7297.valid){
continue;
}
CheckValue<IkReal> x7298=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x7298.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x7297.value)+(((1.5707963267949)*(x7298.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x7299=IKcos(j7);
IkReal x7300=IKsin(j7);
IkReal x7301=(r11*sj12);
IkReal x7302=((1.0)*sj11);
IkReal x7303=(r01*sj12);
IkReal x7304=((0.4)*sj12);
IkReal x7305=(cj12*r10);
IkReal x7306=((1.0)*cj11);
IkReal x7307=(cj12*r00);
IkReal x7308=(cj12*r01);
IkReal x7309=(cj8*cj9);
IkReal x7310=(cj12*r11);
IkReal x7311=(sj9*x7299);
IkReal x7312=(sj8*x7300);
IkReal x7313=(sj8*x7299);
IkReal x7314=(cj9*x7299);
IkReal x7315=((0.00043624)*x7300);
IkReal x7316=(sj9*x7300);
evalcond[0]=(x7308+x7313+((r00*sj12)));
evalcond[1]=(x7310+x7312+((r10*sj12)));
evalcond[2]=(((cj8*x7311))+((cj9*x7300))+(((-1.0)*x7302*x7303))+((sj11*x7307))+((cj11*r02)));
evalcond[3]=(x7311+((r12*sj11))+((x7300*x7309))+(((-1.0)*x7305*x7306))+((cj11*x7301)));
evalcond[4]=((((-1.0)*x7314))+((cj8*x7316))+(((-1.0)*x7301*x7302))+((cj11*r12))+((sj11*x7305)));
evalcond[5]=(((r02*sj11))+(((-1.0)*x7316))+((x7299*x7309))+(((-1.0)*x7306*x7307))+((cj11*x7303)));
evalcond[6]=((((-0.4)*x7308))+(((-0.00043624)*x7299))+(((-1.0)*sj9*x7315))+(((-1.0)*px))+(((0.00043624)*x7299*x7309))+(((0.42)*x7313))+(((-1.0)*r00*x7304)));
evalcond[7]=(((x7309*x7315))+(((-0.4)*x7310))+(((-1.0)*py))+(((0.00043624)*x7311))+(((-1.0)*x7315))+(((0.42)*x7312))+(((-1.0)*r10*x7304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7317=((1.0)*cj12);
IkReal x7318=((1.0)*sj12);
CheckValue<IkReal> x7319=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x7319.valid){
continue;
}
CheckValue<IkReal> x7320 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x7317))+(((-1.0)*r10*x7318)))),IkReal(((((-1.0)*r01*x7317))+(((-1.0)*r00*x7318)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7320.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7319.value)))+(x7320.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x7321=IKcos(j7);
IkReal x7322=IKsin(j7);
IkReal x7323=(r10*sj12);
IkReal x7324=((0.42)*sj8);
IkReal x7325=(cj12*r11);
IkReal x7326=(cj8*cj9);
IkReal x7327=(cj12*r01);
IkReal x7328=(r00*sj12);
IkReal x7329=((0.00043624)*x7321);
IkReal x7330=((0.00043624)*x7322);
evalcond[0]=(x7327+x7328+((sj8*x7321)));
evalcond[1]=(x7325+x7323+((sj8*x7322)));
evalcond[2]=(((x7326*x7329))+(((-1.0)*px))+(((-1.0)*sj9*x7330))+(((-0.4)*x7328))+(((-0.4)*x7327))+(((-1.0)*x7329))+((x7321*x7324)));
evalcond[3]=(((sj9*x7329))+(((-1.0)*py))+(((-0.4)*x7325))+(((-0.4)*x7323))+((x7326*x7330))+((x7322*x7324))+(((-1.0)*x7330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[2];
sj10=0;
cj10=1.0;
j10=0;
IkReal x7331=((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11)));
j11eval[0]=x7331;
j11eval[1]=IKsign(x7331);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
IkReal x7332=cj12*cj12;
IkReal x7333=r21*r21;
IkReal x7334=(cj9*sj8);
IkReal x7335=(r21*sj12);
IkReal x7336=(sj8*sj9);
IkReal x7337=(cj12*r20);
IkReal x7338=(x7333+(r22*r22)+((x7332*(r20*r20)))+(((-2.0)*x7335*x7337))+(((-1.0)*x7332*x7333)));
j11eval[0]=x7338;
j11eval[1]=IKsign(x7338);
j11eval[2]=((IKabs((((r22*x7334))+((x7336*x7337))+(((-1.0)*x7335*x7336)))))+(IKabs((((r22*x7336))+((x7334*x7335))+(((-1.0)*x7334*x7337))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
sj10=0;
cj10=1.0;
j10=0;
IkReal x7339=cj12*cj12;
IkReal x7340=(r11*r21);
IkReal x7341=(cj12*sj12);
IkReal x7342=(((x7339*x7340))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x7339))+(((-1.0)*x7340))+((r10*r21*x7341))+((r11*r20*x7341)));
j11eval[0]=x7342;
j11eval[1]=IKsign(x7342);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=1.0;
j8=0;
IkReal x7343=(cj7*sj9);
IkReal x7344=(r21*sj12);
IkReal x7345=((1.0)*cj12);
IkReal x7346=(cj9*sj7);
IkReal x7347=((((-1.0)*r11*x7345))+(((-1.0)*r10*sj12)));
j11eval[0]=x7347;
j11eval[1]=IKsign(x7347);
j11eval[2]=((IKabs((((x7343*x7344))+((x7344*x7346))+(((-1.0)*r20*x7343*x7345))+(((-1.0)*r20*x7345*x7346)))))+(IKabs((((r22*x7346))+((r22*x7343))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=1.0;
j8=0;
IkReal x7348=(cj7*sj9);
IkReal x7349=(r21*sj12);
IkReal x7350=(cj9*sj7);
IkReal x7351=((1.0)*r22);
IkReal x7352=((1.0)*cj12*r20);
IkReal x7353=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x7353;
j11eval[1]=((IKabs(((((-1.0)*x7348*x7352))+(((-1.0)*x7350*x7352))+((x7348*x7349))+((x7349*x7350)))))+(IKabs(((((-1.0)*x7348*x7351))+(((-1.0)*x7350*x7351))))));
j11eval[2]=IKsign(x7353);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=1.0;
j8=0;
IkReal x7354=cj12*cj12;
IkReal x7355=(r11*r21);
IkReal x7356=(cj7*sj9);
IkReal x7357=(r21*sj12);
IkReal x7358=(cj12*r20);
IkReal x7359=(cj9*sj7);
IkReal x7360=((((-1.0)*r10*r20*x7354))+((r11*sj12*x7358))+(((-1.0)*r12*r22))+((cj12*r10*x7357))+(((-1.0)*x7355))+((x7354*x7355)));
j11eval[0]=x7360;
j11eval[1]=IKsign(x7360);
j11eval[2]=((IKabs((((r22*x7356))+((r22*x7359)))))+(IKabs((((x7356*x7357))+(((-1.0)*x7358*x7359))+(((-1.0)*x7356*x7358))+((x7357*x7359))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x7361=cj12*cj12;
IkReal x7362=(cj7*sj9);
IkReal x7363=(r21*sj12);
IkReal x7364=(cj12*r20);
IkReal x7365=(r11*r21);
IkReal x7366=(cj9*sj7);
CheckValue<IkReal> x7367=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((cj12*r10*x7363))+(((-1.0)*r10*r20*x7361))+((r11*sj12*x7364))+((x7361*x7365))+(((-1.0)*x7365)))),-1);
if(!x7367.valid){
continue;
}
CheckValue<IkReal> x7368 = IKatan2WithCheck(IkReal((((r22*x7362))+((r22*x7366)))),IkReal((((x7363*x7366))+(((-1.0)*x7364*x7366))+((x7362*x7363))+(((-1.0)*x7362*x7364)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7368.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7367.value)))+(x7368.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x7369=IKsin(j11);
IkReal x7370=IKcos(j11);
IkReal x7371=(cj9*sj7);
IkReal x7372=(cj7*sj9);
IkReal x7373=(cj12*r20);
IkReal x7374=(r01*sj12);
IkReal x7375=(cj7*cj9);
IkReal x7376=(sj7*sj9);
IkReal x7377=(r11*sj12);
IkReal x7378=(r21*sj12);
IkReal x7379=((1.0)*x7369);
IkReal x7380=(cj12*x7369);
IkReal x7381=(x7372+x7371);
IkReal x7382=((1.0)*cj12*x7370);
evalcond[0]=((((-1.0)*x7378*x7379))+((x7369*x7373))+((r22*x7370)));
evalcond[1]=(((x7370*x7378))+((r22*x7369))+(((-1.0)*x7370*x7373)));
evalcond[2]=(((r02*x7370))+(((-1.0)*x7374*x7379))+x7381+((r00*x7380)));
evalcond[3]=(((r12*x7369))+x7381+((x7370*x7377))+(((-1.0)*r10*x7382)));
evalcond[4]=(x7376+((r12*x7370))+((r10*x7380))+(((-1.0)*x7377*x7379))+(((-1.0)*x7375)));
evalcond[5]=(x7375+((x7370*x7374))+(((-1.0)*x7376))+(((-1.0)*r00*x7382))+((r02*x7369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x7383=(cj7*sj9);
IkReal x7384=(r21*sj12);
IkReal x7385=(cj9*sj7);
IkReal x7386=((1.0)*r22);
IkReal x7387=((1.0)*cj12*r20);
CheckValue<IkReal> x7388 = IKatan2WithCheck(IkReal(((((-1.0)*x7385*x7387))+((x7384*x7385))+(((-1.0)*x7383*x7387))+((x7383*x7384)))),IkReal(((((-1.0)*x7385*x7386))+(((-1.0)*x7383*x7386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7388.valid){
continue;
}
CheckValue<IkReal> x7389=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x7389.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x7388.value)+(((1.5707963267949)*(x7389.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x7390=IKsin(j11);
IkReal x7391=IKcos(j11);
IkReal x7392=(cj9*sj7);
IkReal x7393=(cj7*sj9);
IkReal x7394=(cj12*r20);
IkReal x7395=(r01*sj12);
IkReal x7396=(cj7*cj9);
IkReal x7397=(sj7*sj9);
IkReal x7398=(r11*sj12);
IkReal x7399=(r21*sj12);
IkReal x7400=((1.0)*x7390);
IkReal x7401=(cj12*x7390);
IkReal x7402=(x7393+x7392);
IkReal x7403=((1.0)*cj12*x7391);
evalcond[0]=((((-1.0)*x7399*x7400))+((r22*x7391))+((x7390*x7394)));
evalcond[1]=(((r22*x7390))+((x7391*x7399))+(((-1.0)*x7391*x7394)));
evalcond[2]=(((r02*x7391))+(((-1.0)*x7395*x7400))+((r00*x7401))+x7402);
evalcond[3]=(((r12*x7390))+((x7391*x7398))+(((-1.0)*r10*x7403))+x7402);
evalcond[4]=(x7397+(((-1.0)*x7398*x7400))+((r12*x7391))+(((-1.0)*x7396))+((r10*x7401)));
evalcond[5]=(x7396+(((-1.0)*r00*x7403))+((r02*x7390))+(((-1.0)*x7397))+((x7391*x7395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x7404=(cj7*sj9);
IkReal x7405=(r21*sj12);
IkReal x7406=((1.0)*cj12);
IkReal x7407=(cj9*sj7);
CheckValue<IkReal> x7408 = IKatan2WithCheck(IkReal((((r22*x7404))+((r22*x7407)))),IkReal((((x7404*x7405))+((x7405*x7407))+(((-1.0)*r20*x7404*x7406))+(((-1.0)*r20*x7406*x7407)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7408.valid){
continue;
}
CheckValue<IkReal> x7409=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7406))+(((-1.0)*r10*sj12)))),-1);
if(!x7409.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x7408.value)+(((1.5707963267949)*(x7409.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x7410=IKsin(j11);
IkReal x7411=IKcos(j11);
IkReal x7412=(cj9*sj7);
IkReal x7413=(cj7*sj9);
IkReal x7414=(cj12*r20);
IkReal x7415=(r01*sj12);
IkReal x7416=(cj7*cj9);
IkReal x7417=(sj7*sj9);
IkReal x7418=(r11*sj12);
IkReal x7419=(r21*sj12);
IkReal x7420=((1.0)*x7410);
IkReal x7421=(cj12*x7410);
IkReal x7422=(x7412+x7413);
IkReal x7423=((1.0)*cj12*x7411);
evalcond[0]=(((x7410*x7414))+(((-1.0)*x7419*x7420))+((r22*x7411)));
evalcond[1]=((((-1.0)*x7411*x7414))+((x7411*x7419))+((r22*x7410)));
evalcond[2]=(((r00*x7421))+(((-1.0)*x7415*x7420))+((r02*x7411))+x7422);
evalcond[3]=((((-1.0)*r10*x7423))+((x7411*x7418))+x7422+((r12*x7410)));
evalcond[4]=(((r10*x7421))+(((-1.0)*x7416))+(((-1.0)*x7418*x7420))+x7417+((r12*x7411)));
evalcond[5]=((((-1.0)*r00*x7423))+((r02*x7410))+(((-1.0)*x7417))+((x7411*x7415))+x7416);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x7424=(cj7*sj9);
IkReal x7425=(r21*sj12);
IkReal x7426=(cj12*r20);
IkReal x7427=(cj9*sj7);
IkReal x7428=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x7428;
j11eval[1]=((IKabs((((x7424*x7425))+(((-1.0)*x7424*x7426))+(((-1.0)*x7425*x7427))+((x7426*x7427)))))+(IKabs(((((-1.0)*r22*x7424))+((r22*x7427))))));
j11eval[2]=IKsign(x7428);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x7429=(cj9*sj7);
IkReal x7430=((1.0)*cj12);
IkReal x7431=(r21*sj12);
IkReal x7432=((1.0)*cj7*sj9);
IkReal x7433=((((-1.0)*r11*x7430))+(((-1.0)*r10*sj12)));
j11eval[0]=x7433;
j11eval[1]=IKsign(x7433);
j11eval[2]=((IKabs(((((-1.0)*r22*x7432))+((r22*x7429)))))+(IKabs((((x7429*x7431))+(((-1.0)*r20*x7429*x7430))+((cj12*cj7*r20*sj9))+(((-1.0)*x7431*x7432))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x7434=cj12*cj12;
IkReal x7435=(r11*r21);
IkReal x7436=(cj7*sj9);
IkReal x7437=(r21*sj12);
IkReal x7438=(cj12*r20);
IkReal x7439=((1.0)*r22);
IkReal x7440=(cj9*sj7);
IkReal x7441=((((-1.0)*x7435))+(((-1.0)*r10*r20*x7434))+((cj12*r10*x7437))+(((-1.0)*r12*x7439))+((r11*sj12*x7438))+((x7434*x7435)));
j11eval[0]=x7441;
j11eval[1]=IKsign(x7441);
j11eval[2]=((IKabs(((((-1.0)*x7439*x7440))+((r22*x7436)))))+(IKabs((((x7436*x7437))+((x7438*x7440))+(((-1.0)*x7436*x7438))+(((-1.0)*x7437*x7440))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x7442=cj12*cj12;
IkReal x7443=((1.0)*r22);
IkReal x7444=(cj7*sj9);
IkReal x7445=(r21*sj12);
IkReal x7446=(cj12*r20);
IkReal x7447=(r11*r21);
IkReal x7448=(cj9*sj7);
CheckValue<IkReal> x7449 = IKatan2WithCheck(IkReal((((r22*x7444))+(((-1.0)*x7443*x7448)))),IkReal(((((-1.0)*x7445*x7448))+((x7444*x7445))+((x7446*x7448))+(((-1.0)*x7444*x7446)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7449.valid){
continue;
}
CheckValue<IkReal> x7450=IKPowWithIntegerCheck(IKsign((((x7442*x7447))+(((-1.0)*x7447))+(((-1.0)*r12*x7443))+((cj12*r10*x7445))+(((-1.0)*r10*r20*x7442))+((r11*sj12*x7446)))),-1);
if(!x7450.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x7449.value)+(((1.5707963267949)*(x7450.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x7451=IKsin(j11);
IkReal x7452=IKcos(j11);
IkReal x7453=(cj12*r20);
IkReal x7454=(r01*sj12);
IkReal x7455=((1.0)*sj7);
IkReal x7456=(r11*sj12);
IkReal x7457=(cj7*sj9);
IkReal x7458=(r21*sj12);
IkReal x7459=((1.0)*cj7*cj9);
IkReal x7460=(sj9*x7455);
IkReal x7461=((1.0)*x7451);
IkReal x7462=(cj12*x7451);
IkReal x7463=((1.0)*cj12*x7452);
IkReal x7464=(x7459+x7460);
evalcond[0]=((((-1.0)*x7458*x7461))+((r22*x7452))+((x7451*x7453)));
evalcond[1]=(((r22*x7451))+(((-1.0)*x7452*x7453))+((x7452*x7458)));
evalcond[2]=(((r02*x7452))+(((-1.0)*x7454*x7461))+(((-1.0)*x7457))+((cj9*sj7))+((r00*x7462)));
evalcond[3]=((((-1.0)*cj9*x7455))+((r12*x7451))+(((-1.0)*r10*x7463))+x7457+((x7452*x7456)));
evalcond[4]=(((r10*x7462))+((r12*x7452))+(((-1.0)*x7456*x7461))+(((-1.0)*x7464)));
evalcond[5]=(((r02*x7451))+(((-1.0)*x7464))+((x7452*x7454))+(((-1.0)*r00*x7463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x7465=((1.0)*cj12);
IkReal x7466=(cj9*sj7);
IkReal x7467=(r21*sj12);
IkReal x7468=((1.0)*cj7*sj9);
CheckValue<IkReal> x7469 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7468))+((r22*x7466)))),IkReal(((((-1.0)*x7467*x7468))+((x7466*x7467))+((cj12*cj7*r20*sj9))+(((-1.0)*r20*x7465*x7466)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7469.valid){
continue;
}
CheckValue<IkReal> x7470=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7465))+(((-1.0)*r10*sj12)))),-1);
if(!x7470.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x7469.value)+(((1.5707963267949)*(x7470.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x7471=IKsin(j11);
IkReal x7472=IKcos(j11);
IkReal x7473=(cj12*r20);
IkReal x7474=(r01*sj12);
IkReal x7475=((1.0)*sj7);
IkReal x7476=(r11*sj12);
IkReal x7477=(cj7*sj9);
IkReal x7478=(r21*sj12);
IkReal x7479=((1.0)*cj7*cj9);
IkReal x7480=(sj9*x7475);
IkReal x7481=((1.0)*x7471);
IkReal x7482=(cj12*x7471);
IkReal x7483=((1.0)*cj12*x7472);
IkReal x7484=(x7480+x7479);
evalcond[0]=((((-1.0)*x7478*x7481))+((x7471*x7473))+((r22*x7472)));
evalcond[1]=(((x7472*x7478))+(((-1.0)*x7472*x7473))+((r22*x7471)));
evalcond[2]=(((r02*x7472))+(((-1.0)*x7474*x7481))+((cj9*sj7))+((r00*x7482))+(((-1.0)*x7477)));
evalcond[3]=(((x7472*x7476))+(((-1.0)*cj9*x7475))+(((-1.0)*r10*x7483))+x7477+((r12*x7471)));
evalcond[4]=((((-1.0)*x7476*x7481))+((r10*x7482))+(((-1.0)*x7484))+((r12*x7472)));
evalcond[5]=(((r02*x7471))+((x7472*x7474))+(((-1.0)*r00*x7483))+(((-1.0)*x7484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x7485=(cj7*sj9);
IkReal x7486=(r21*sj12);
IkReal x7487=(cj12*r20);
IkReal x7488=(cj9*sj7);
CheckValue<IkReal> x7489 = IKatan2WithCheck(IkReal(((((-1.0)*x7486*x7488))+((x7487*x7488))+(((-1.0)*x7485*x7487))+((x7485*x7486)))),IkReal((((r22*x7488))+(((-1.0)*r22*x7485)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7489.valid){
continue;
}
CheckValue<IkReal> x7490=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x7490.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x7489.value)+(((1.5707963267949)*(x7490.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x7491=IKsin(j11);
IkReal x7492=IKcos(j11);
IkReal x7493=(cj12*r20);
IkReal x7494=(r01*sj12);
IkReal x7495=((1.0)*sj7);
IkReal x7496=(r11*sj12);
IkReal x7497=(cj7*sj9);
IkReal x7498=(r21*sj12);
IkReal x7499=((1.0)*cj7*cj9);
IkReal x7500=(sj9*x7495);
IkReal x7501=((1.0)*x7491);
IkReal x7502=(cj12*x7491);
IkReal x7503=((1.0)*cj12*x7492);
IkReal x7504=(x7500+x7499);
evalcond[0]=(((r22*x7492))+((x7491*x7493))+(((-1.0)*x7498*x7501)));
evalcond[1]=(((r22*x7491))+(((-1.0)*x7492*x7493))+((x7492*x7498)));
evalcond[2]=(((r00*x7502))+(((-1.0)*x7497))+((cj9*sj7))+((r02*x7492))+(((-1.0)*x7494*x7501)));
evalcond[3]=((((-1.0)*cj9*x7495))+((r12*x7491))+((x7492*x7496))+x7497+(((-1.0)*r10*x7503)));
evalcond[4]=((((-1.0)*x7496*x7501))+((r12*x7492))+((r10*x7502))+(((-1.0)*x7504)));
evalcond[5]=((((-1.0)*r00*x7503))+((x7492*x7494))+((r02*x7491))+(((-1.0)*x7504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7505=((-1.0)*r10);
IkReal x7507 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7507)==0){
continue;
}
IkReal x7506=pow(x7507,-0.5);
CheckValue<IkReal> x7508 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7505),IKFAST_ATAN2_MAGTHRESH);
if(!x7508.valid){
continue;
}
IkReal gconst54=((-1.0)*(x7508.value));
IkReal gconst55=(r11*x7506);
IkReal gconst56=(x7505*x7506);
CheckValue<IkReal> x7509 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7509.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j12+(x7509.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x7510=(gconst55*r21);
IkReal x7511=(cj9*sj8);
IkReal x7512=(gconst56*r20);
IkReal x7513=(sj8*sj9);
CheckValue<IkReal> x7514 = IKatan2WithCheck(IkReal(((((-1.0)*x7510*x7513))+((r22*x7511))+((x7512*x7513)))),IkReal(((((-1.0)*x7511*x7512))+((r22*x7513))+((x7510*x7511)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7514.valid){
continue;
}
CheckValue<IkReal> x7515=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7510*x7510)+(((-2.0)*x7510*x7512))+(x7512*x7512))),-1);
if(!x7515.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x7514.value)+(((1.5707963267949)*(x7515.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x7516=IKsin(j11);
IkReal x7517=IKcos(j11);
IkReal x7518=(cj7*sj9);
IkReal x7519=(cj9*sj7);
IkReal x7520=((1.0)*sj9);
IkReal x7521=((1.0)*cj9);
IkReal x7522=(gconst56*x7516);
IkReal x7523=(gconst55*x7517);
IkReal x7524=((1.0)*gconst56*x7517);
IkReal x7525=((1.0)*gconst55*x7516);
evalcond[0]=(((r20*x7522))+(((-1.0)*sj8*x7520))+(((-1.0)*r21*x7525))+((r22*x7517)));
evalcond[1]=(((r21*x7523))+(((-1.0)*sj8*x7521))+(((-1.0)*r20*x7524))+((r22*x7516)));
evalcond[2]=(((r00*x7522))+(((-1.0)*r01*x7525))+((r02*x7517))+x7519+((cj8*x7518)));
evalcond[3]=((((-1.0)*r10*x7524))+((r11*x7523))+((r12*x7516))+x7518+((cj8*x7519)));
evalcond[4]=(((cj8*sj7*sj9))+((r12*x7517))+((r10*x7522))+(((-1.0)*cj7*x7521))+(((-1.0)*r11*x7525)));
evalcond[5]=(((r01*x7523))+(((-1.0)*r00*x7524))+((r02*x7516))+((cj7*cj8*cj9))+(((-1.0)*sj7*x7520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7526=((-1.0)*r11);
IkReal x7528 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7528)==0){
continue;
}
IkReal x7527=pow(x7528,-0.5);
CheckValue<IkReal> x7529 = IKatan2WithCheck(IkReal(x7526),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7529.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x7529.value))));
IkReal gconst58=(x7526*x7527);
IkReal gconst59=((1.0)*r10*x7527);
CheckValue<IkReal> x7530 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7530.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12+(x7530.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x7531=((1.0)*sj8);
IkReal x7532=(gconst58*r21);
IkReal x7533=(gconst59*r20);
IkReal x7534=(sj8*sj9);
IkReal x7535=(cj9*sj8);
CheckValue<IkReal> x7536 = IKatan2WithCheck(IkReal((((r22*x7535))+((x7533*x7534))+(((-1.0)*sj9*x7531*x7532)))),IkReal((((r22*x7534))+((x7532*x7535))+(((-1.0)*cj9*x7531*x7533)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7536.valid){
continue;
}
CheckValue<IkReal> x7537=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7533*x7533)+(((-2.0)*x7532*x7533))+(x7532*x7532))),-1);
if(!x7537.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x7536.value)+(((1.5707963267949)*(x7537.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x7538=IKsin(j11);
IkReal x7539=IKcos(j11);
IkReal x7540=(cj7*sj9);
IkReal x7541=(cj8*cj9);
IkReal x7542=((1.0)*sj9);
IkReal x7543=((1.0)*cj9);
IkReal x7544=(gconst59*x7538);
IkReal x7545=(gconst58*x7539);
IkReal x7546=((1.0)*gconst58*x7538);
IkReal x7547=((1.0)*gconst59*x7539);
evalcond[0]=(((r20*x7544))+((r22*x7539))+(((-1.0)*sj8*x7542))+(((-1.0)*r21*x7546)));
evalcond[1]=(((r22*x7538))+((r21*x7545))+(((-1.0)*sj8*x7543))+(((-1.0)*r20*x7547)));
evalcond[2]=(((cj9*sj7))+(((-1.0)*r01*x7546))+((r00*x7544))+((r02*x7539))+((cj8*x7540)));
evalcond[3]=(((sj7*x7541))+(((-1.0)*r10*x7547))+((r11*x7545))+x7540+((r12*x7538)));
evalcond[4]=(((r10*x7544))+((cj8*sj7*sj9))+(((-1.0)*cj7*x7543))+(((-1.0)*r11*x7546))+((r12*x7539)));
evalcond[5]=((((-1.0)*sj7*x7542))+((cj7*x7541))+(((-1.0)*r00*x7547))+((r01*x7545))+((r02*x7538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x7548=((-1.0)*py);
sj10=0;
cj10=1.0;
j10=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7548);
rxp0_2=(py*r00);
rxp1_0=(r21*x7548);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j11eval[0]=r12;
j11eval[1]=IKsign(r12);
j11eval[2]=((IKabs((cj7*cj9)))+(IKabs((cj7*sj9))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x7549=((-1.0)*py);
sj10=0;
cj10=1.0;
j10=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7549);
rxp0_2=(py*r00);
rxp1_0=(r21*x7549);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x7550=(cj7*cj8);
IkReal x7551=((((-1.0)*r01*sj12))+((cj12*r00)));
j11eval[0]=x7551;
j11eval[1]=((IKabs((cj9*x7550)))+(IKabs((sj9*x7550))));
j11eval[2]=IKsign(x7551);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x7552=((-1.0)*py);
sj10=0;
cj10=1.0;
j10=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7552);
rxp0_2=(py*r00);
rxp1_0=(r21*x7552);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j11eval[0]=((((-1.0)*r01*sj12))+((cj12*r00)));
j11eval[1]=r12;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x7553=IKPowWithIntegerCheck(((((-1.0)*r01*sj12))+((cj12*r00))),-1);
if(!x7553.valid){
continue;
}
CheckValue<IkReal> x7554=IKPowWithIntegerCheck(r12,-1);
if(!x7554.valid){
continue;
}
if( IKabs(((-1.0)*cj7*cj8*sj9*(x7553.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj7*cj9*(x7554.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj7*cj8*sj9*(x7553.value)))+IKsqr((cj7*cj9*(x7554.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*cj7*cj8*sj9*(x7553.value)), (cj7*cj9*(x7554.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x7555=IKsin(j11);
IkReal x7556=IKcos(j11);
IkReal x7557=(cj7*sj9);
IkReal x7558=(cj7*cj9);
IkReal x7559=(cj12*x7555);
IkReal x7560=(sj12*x7556);
IkReal x7561=((1.0)*cj12*x7556);
IkReal x7562=((1.0)*sj12*x7555);
evalcond[0]=(((r12*x7555))+x7557);
evalcond[1]=((((-1.0)*x7558))+((r12*x7556)));
evalcond[2]=((((-1.0)*r21*x7562))+((r20*x7559)));
evalcond[3]=((((-1.0)*r20*x7561))+((r21*x7560)));
evalcond[4]=((((-1.0)*r01*x7562))+((r00*x7559))+((cj8*x7557)));
evalcond[5]=((((-1.0)*r00*x7561))+((r01*x7560))+((cj8*x7558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x7563=(cj7*cj8);
CheckValue<IkReal> x7564 = IKatan2WithCheck(IkReal(((-1.0)*sj9*x7563)),IkReal((cj9*x7563)),IKFAST_ATAN2_MAGTHRESH);
if(!x7564.valid){
continue;
}
CheckValue<IkReal> x7565=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj12))+((cj12*r00)))),-1);
if(!x7565.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x7564.value)+(((1.5707963267949)*(x7565.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x7566=IKsin(j11);
IkReal x7567=IKcos(j11);
IkReal x7568=(cj7*sj9);
IkReal x7569=(cj7*cj9);
IkReal x7570=(cj12*x7566);
IkReal x7571=(sj12*x7567);
IkReal x7572=((1.0)*cj12*x7567);
IkReal x7573=((1.0)*sj12*x7566);
evalcond[0]=(((r12*x7566))+x7568);
evalcond[1]=((((-1.0)*x7569))+((r12*x7567)));
evalcond[2]=(((r20*x7570))+(((-1.0)*r21*x7573)));
evalcond[3]=((((-1.0)*r20*x7572))+((r21*x7571)));
evalcond[4]=((((-1.0)*r01*x7573))+((r00*x7570))+((cj8*x7568)));
evalcond[5]=(((r01*x7571))+((cj8*x7569))+(((-1.0)*r00*x7572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x7574 = IKatan2WithCheck(IkReal(((-1.0)*cj7*sj9)),IkReal((cj7*cj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x7574.valid){
continue;
}
CheckValue<IkReal> x7575=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x7575.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x7574.value)+(((1.5707963267949)*(x7575.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x7576=IKsin(j11);
IkReal x7577=IKcos(j11);
IkReal x7578=(cj7*sj9);
IkReal x7579=(cj7*cj9);
IkReal x7580=(cj12*x7576);
IkReal x7581=(sj12*x7577);
IkReal x7582=((1.0)*cj12*x7577);
IkReal x7583=((1.0)*sj12*x7576);
evalcond[0]=(((r12*x7576))+x7578);
evalcond[1]=(((r12*x7577))+(((-1.0)*x7579)));
evalcond[2]=((((-1.0)*r21*x7583))+((r20*x7580)));
evalcond[3]=((((-1.0)*r20*x7582))+((r21*x7581)));
evalcond[4]=((((-1.0)*r01*x7583))+((cj8*x7578))+((r00*x7580)));
evalcond[5]=(((cj8*x7579))+((r01*x7581))+(((-1.0)*r00*x7582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x7584=cj12*cj12;
IkReal x7585=((1.0)*r12);
IkReal x7586=(cj7*sj9);
IkReal x7587=(r21*sj12);
IkReal x7588=(r11*sj12);
IkReal x7589=(cj12*r20);
IkReal x7590=(r11*r21);
IkReal x7591=(sj8*sj9);
IkReal x7592=((1.0)*r10);
IkReal x7593=(cj8*cj9*sj7);
CheckValue<IkReal> x7594 = IKatan2WithCheck(IkReal((((x7588*x7591))+(((-1.0)*cj12*x7591*x7592))+((r22*x7586))+((r22*x7593)))),IkReal((((x7586*x7587))+(((-1.0)*x7586*x7589))+(((-1.0)*x7589*x7593))+((x7587*x7593))+(((-1.0)*x7585*x7591)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7594.valid){
continue;
}
CheckValue<IkReal> x7595=IKPowWithIntegerCheck(IKsign((((x7588*x7589))+(((-1.0)*r20*x7584*x7592))+(((-1.0)*x7590))+((x7584*x7590))+(((-1.0)*r22*x7585))+((cj12*r10*x7587)))),-1);
if(!x7595.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x7594.value)+(((1.5707963267949)*(x7595.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x7596=IKsin(j11);
IkReal x7597=IKcos(j11);
IkReal x7598=(cj7*sj9);
IkReal x7599=(cj12*r20);
IkReal x7600=(r01*sj12);
IkReal x7601=(cj9*sj7);
IkReal x7602=((1.0)*sj9);
IkReal x7603=(r11*sj12);
IkReal x7604=(r21*sj12);
IkReal x7605=((1.0)*cj9);
IkReal x7606=((1.0)*x7596);
IkReal x7607=(cj12*x7596);
IkReal x7608=((1.0)*cj12*x7597);
evalcond[0]=((((-1.0)*x7604*x7606))+(((-1.0)*sj8*x7602))+((r22*x7597))+((x7596*x7599)));
evalcond[1]=((((-1.0)*x7597*x7599))+((x7597*x7604))+(((-1.0)*sj8*x7605))+((r22*x7596)));
evalcond[2]=(((r00*x7607))+((cj8*x7598))+((r02*x7597))+(((-1.0)*x7600*x7606))+x7601);
evalcond[3]=((((-1.0)*r10*x7608))+((cj8*x7601))+((x7597*x7603))+((r12*x7596))+x7598);
evalcond[4]=((((-1.0)*cj7*x7605))+((cj8*sj7*sj9))+((r10*x7607))+((r12*x7597))+(((-1.0)*x7603*x7606)));
evalcond[5]=(((x7597*x7600))+(((-1.0)*sj7*x7602))+(((-1.0)*r00*x7608))+((r02*x7596))+((cj7*cj8*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x7609=cj12*cj12;
IkReal x7610=r21*r21;
IkReal x7611=(cj9*sj8);
IkReal x7612=(r21*sj12);
IkReal x7613=(sj8*sj9);
IkReal x7614=(cj12*r20);
CheckValue<IkReal> x7615=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-1.0)*x7609*x7610))+((x7609*(r20*r20)))+(((-2.0)*x7612*x7614))+x7610)),-1);
if(!x7615.valid){
continue;
}
CheckValue<IkReal> x7616 = IKatan2WithCheck(IkReal(((((-1.0)*x7612*x7613))+((x7613*x7614))+((r22*x7611)))),IkReal((((r22*x7613))+((x7611*x7612))+(((-1.0)*x7611*x7614)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7616.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7615.value)))+(x7616.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x7617=IKsin(j11);
IkReal x7618=IKcos(j11);
IkReal x7619=(cj7*sj9);
IkReal x7620=(cj12*r20);
IkReal x7621=(r01*sj12);
IkReal x7622=(cj9*sj7);
IkReal x7623=((1.0)*sj9);
IkReal x7624=(r11*sj12);
IkReal x7625=(r21*sj12);
IkReal x7626=((1.0)*cj9);
IkReal x7627=((1.0)*x7617);
IkReal x7628=(cj12*x7617);
IkReal x7629=((1.0)*cj12*x7618);
evalcond[0]=(((x7617*x7620))+(((-1.0)*x7625*x7627))+(((-1.0)*sj8*x7623))+((r22*x7618)));
evalcond[1]=((((-1.0)*sj8*x7626))+((r22*x7617))+(((-1.0)*x7618*x7620))+((x7618*x7625)));
evalcond[2]=((((-1.0)*x7621*x7627))+((cj8*x7619))+((r00*x7628))+((r02*x7618))+x7622);
evalcond[3]=(((r12*x7617))+((cj8*x7622))+(((-1.0)*r10*x7629))+((x7618*x7624))+x7619);
evalcond[4]=(((r12*x7618))+((cj8*sj7*sj9))+(((-1.0)*x7624*x7627))+(((-1.0)*cj7*x7626))+((r10*x7628)));
evalcond[5]=((((-1.0)*r00*x7629))+((cj7*cj8*cj9))+((r02*x7617))+((x7618*x7621))+(((-1.0)*sj7*x7623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x7630=(sj8*sj9);
IkReal x7631=((1.0)*cj12);
IkReal x7632=(cj9*sj7);
IkReal x7633=(r21*sj12);
IkReal x7634=(cj7*cj8*sj9);
CheckValue<IkReal> x7635 = IKatan2WithCheck(IkReal((((r22*x7634))+((r22*x7632))+((r02*x7630)))),IkReal((((x7633*x7634))+((x7632*x7633))+(((-1.0)*r00*x7630*x7631))+(((-1.0)*r20*x7631*x7632))+(((-1.0)*r20*x7631*x7634))+((r01*sj12*x7630)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7635.valid){
continue;
}
CheckValue<IkReal> x7636=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj12))+(((-1.0)*r11*x7631)))),-1);
if(!x7636.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x7635.value)+(((1.5707963267949)*(x7636.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x7637=IKsin(j11);
IkReal x7638=IKcos(j11);
IkReal x7639=(cj7*sj9);
IkReal x7640=(cj12*r20);
IkReal x7641=(r01*sj12);
IkReal x7642=(cj9*sj7);
IkReal x7643=((1.0)*sj9);
IkReal x7644=(r11*sj12);
IkReal x7645=(r21*sj12);
IkReal x7646=((1.0)*cj9);
IkReal x7647=((1.0)*x7637);
IkReal x7648=(cj12*x7637);
IkReal x7649=((1.0)*cj12*x7638);
evalcond[0]=(((x7637*x7640))+(((-1.0)*sj8*x7643))+((r22*x7638))+(((-1.0)*x7645*x7647)));
evalcond[1]=((((-1.0)*x7638*x7640))+(((-1.0)*sj8*x7646))+((x7638*x7645))+((r22*x7637)));
evalcond[2]=(((cj8*x7639))+((r02*x7638))+((r00*x7648))+(((-1.0)*x7641*x7647))+x7642);
evalcond[3]=(((cj8*x7642))+((r12*x7637))+((x7638*x7644))+x7639+(((-1.0)*r10*x7649)));
evalcond[4]=(((cj8*sj7*sj9))+(((-1.0)*x7644*x7647))+((r12*x7638))+(((-1.0)*cj7*x7646))+((r10*x7648)));
evalcond[5]=((((-1.0)*r00*x7649))+(((-1.0)*sj7*x7643))+((x7638*x7641))+((r02*x7637))+((cj7*cj8*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j7eval[0]=sj8;
j7eval[1]=IKsign(sj8);
j7eval[2]=((IKabs((((r10*sj12))+((cj12*r11)))))+(IKabs((((r00*sj12))+((cj12*r01))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x7650=cj12*cj12;
IkReal x7651=r21*r21;
IkReal x7652=(r22*sj8);
IkReal x7653=((1.0)*cj9);
IkReal x7654=(cj12*r20*sj8);
IkReal x7655=(r21*sj12*sj8);
IkReal x7656=((r22*r22)+(((-2.0)*cj12*r20*r21*sj12))+((x7650*(r20*r20)))+(((-1.0)*x7650*x7651))+x7651);
j11eval[0]=x7656;
j11eval[1]=IKsign(x7656);
j11eval[2]=((IKabs(((((-1.0)*sj9*x7655))+((sj9*x7654))+(((-1.0)*x7652*x7653)))))+(IKabs((((cj9*x7654))+(((-1.0)*x7653*x7655))+((sj9*x7652))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j7eval[0]=((962.772785622593)+(((-1.0)*sj8))+(((-962.772785622593)*(cj8*cj8)))+((cj8*cj9*sj8)));
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=1.0;
j8=0;
IkReal x7657=((68162500000.0)*sj9);
IkReal x7658=((68162500000.0)*px);
IkReal x7659=((68162500000.0)*py);
j7eval[0]=((1.0)+(((-1.0)*cj9)));
j7eval[1]=IKsign(((59470418.0)+(((-59470418.0)*cj9))));
j7eval[2]=((IKabs((((py*x7657))+((cj9*x7658))+(((-1.0)*x7658)))))+(IKabs((((cj9*x7659))+(((-1.0)*x7659))+(((-1.0)*px*x7657))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=1.0;
j8=0;
j11eval[0]=((IKabs(((((-1.0)*r21*sj12))+((cj12*r20)))))+(IKabs(r22)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x7661 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*sj12))+((cj12*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7661.valid){
continue;
}
IkReal x7660=x7661.value;
j11array[0]=((-1.0)*x7660);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x7660)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[1];
IkReal x7662=IKcos(j11);
evalcond[0]=((((-1.0)*r22*(IKsin(j11))))+(((-1.0)*r21*sj12*x7662))+((cj12*r20*x7662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=1.0;
j8=0;
IkReal x7663=((68162500000.0)*sj9);
IkReal x7664=((68162500000.0)*px);
IkReal x7665=((68162500000.0)*py);
j7eval[0]=((1.0)+(((-1.0)*cj9)));
j7eval[1]=IKsign(((59470418.0)+(((-59470418.0)*cj9))));
j7eval[2]=((IKabs(((((-1.0)*px*x7663))+((cj9*x7665))+(((-1.0)*x7665)))))+(IKabs((((cj9*x7664))+(((-1.0)*x7664))+((py*x7663))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=1.0;
j8=0;
j7eval[0]=((-1.0)+cj9);
j7eval[1]=IKsign(((-5453.0)+(((5453.0)*cj9))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=1.0;
j8=0;
j7eval[0]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7666=((5453.0)*cj9);
IkReal x7667=(cj11*r12);
IkReal x7668=(r11*sj11*sj12);
IkReal x7669=(cj12*r10*sj11);
CheckValue<IkReal> x7670=IKPowWithIntegerCheck(sj9,-1);
if(!x7670.valid){
continue;
}
if( IKabs(((0.000183385292499542)*(x7670.value)*((((x7666*x7667))+((x7666*x7669))+(((-12500000.0)*cj9*px))+(((-5453.0)*x7667))+(((-5453.0)*x7669))+(((5453.0)*x7668))+(((-1.0)*x7666*x7668)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2292.31615624427)*px))+(((-1.0)*x7668))+x7669+x7667)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.000183385292499542)*(x7670.value)*((((x7666*x7667))+((x7666*x7669))+(((-12500000.0)*cj9*px))+(((-5453.0)*x7667))+(((-5453.0)*x7669))+(((5453.0)*x7668))+(((-1.0)*x7666*x7668))))))+IKsqr(((((-2292.31615624427)*px))+(((-1.0)*x7668))+x7669+x7667))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((0.000183385292499542)*(x7670.value)*((((x7666*x7667))+((x7666*x7669))+(((-12500000.0)*cj9*px))+(((-5453.0)*x7667))+(((-5453.0)*x7669))+(((5453.0)*x7668))+(((-1.0)*x7666*x7668))))), ((((-2292.31615624427)*px))+(((-1.0)*x7668))+x7669+x7667));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x7671=IKcos(j7);
IkReal x7672=IKsin(j7);
IkReal x7673=((1.0)*sj11);
IkReal x7674=(r11*sj12);
IkReal x7675=(cj11*cj12);
IkReal x7676=(cj12*sj11);
IkReal x7677=((1.0)*cj11);
IkReal x7678=(r01*sj12);
IkReal x7679=(sj9*x7671);
IkReal x7680=(cj9*x7672);
IkReal x7681=(cj9*x7671);
IkReal x7682=((0.00043624)*x7671);
IkReal x7683=((0.00043624)*x7672);
IkReal x7684=(sj9*x7672);
IkReal x7685=(x7680+x7679);
evalcond[0]=((((-1.0)*px))+(((-1.0)*x7682))+(((-1.0)*sj9*x7683))+(((0.00043624)*x7681)));
evalcond[1]=((((-1.0)*py))+(((-1.0)*x7683))+(((0.00043624)*x7679))+(((0.00043624)*x7680)));
evalcond[2]=(((cj11*r02))+(((-1.0)*x7673*x7678))+((r00*x7676))+x7685);
evalcond[3]=(((cj11*r12))+(((-1.0)*x7681))+(((-1.0)*x7673*x7674))+((r10*x7676))+x7684);
evalcond[4]=((((-1.0)*x7674*x7677))+(((-1.0)*r12*x7673))+((r10*x7675))+x7685);
evalcond[5]=((((-1.0)*r02*x7673))+(((-1.0)*x7684))+(((-1.0)*x7677*x7678))+((r00*x7675))+x7681);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7686=((12500000.0)*px);
IkReal x7687=((5453.0)*sj11);
IkReal x7688=(cj12*r00);
IkReal x7689=(r01*sj12);
IkReal x7690=((5453.0)*cj11*r02);
CheckValue<IkReal> x7691=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((5453.0)*cj9)))),-1);
if(!x7691.valid){
continue;
}
CheckValue<IkReal> x7692 = IKatan2WithCheck(IkReal((((x7687*x7689))+(((-1.0)*x7687*x7688))+(((-1.0)*x7690))+((sj9*x7686))+((cj9*x7687*x7688))+((cj9*x7690))+(((-1.0)*cj9*x7687*x7689)))),IkReal((((sj9*x7687*x7688))+(((-1.0)*cj9*x7686))+(((-1.0)*sj9*x7687*x7689))+((sj9*x7690)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7692.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7691.value)))+(x7692.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x7693=IKcos(j7);
IkReal x7694=IKsin(j7);
IkReal x7695=((1.0)*sj11);
IkReal x7696=(r11*sj12);
IkReal x7697=(cj11*cj12);
IkReal x7698=(cj12*sj11);
IkReal x7699=((1.0)*cj11);
IkReal x7700=(r01*sj12);
IkReal x7701=(sj9*x7693);
IkReal x7702=(cj9*x7694);
IkReal x7703=(cj9*x7693);
IkReal x7704=((0.00043624)*x7693);
IkReal x7705=((0.00043624)*x7694);
IkReal x7706=(sj9*x7694);
IkReal x7707=(x7702+x7701);
evalcond[0]=((((-1.0)*x7704))+(((-1.0)*px))+(((0.00043624)*x7703))+(((-1.0)*sj9*x7705)));
evalcond[1]=((((-1.0)*x7705))+(((-1.0)*py))+(((0.00043624)*x7701))+(((0.00043624)*x7702)));
evalcond[2]=(((r00*x7698))+((cj11*r02))+(((-1.0)*x7695*x7700))+x7707);
evalcond[3]=((((-1.0)*x7703))+(((-1.0)*x7695*x7696))+((r10*x7698))+((cj11*r12))+x7706);
evalcond[4]=(((r10*x7697))+(((-1.0)*x7696*x7699))+(((-1.0)*r12*x7695))+x7707);
evalcond[5]=((((-1.0)*r02*x7695))+(((-1.0)*x7706))+((r00*x7697))+(((-1.0)*x7699*x7700))+x7703);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7708=((68162500000.0)*py);
IkReal x7709=((68162500000.0)*px);
CheckValue<IkReal> x7710 = IKatan2WithCheck(IkReal(((((-1.0)*x7708))+((cj9*x7708))+(((-1.0)*sj9*x7709)))),IkReal(((((-1.0)*x7709))+((cj9*x7709))+((sj9*x7708)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7710.valid){
continue;
}
CheckValue<IkReal> x7711=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((-59470418.0)*cj9)))),-1);
if(!x7711.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x7710.value)+(((1.5707963267949)*(x7711.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x7712=IKcos(j7);
IkReal x7713=IKsin(j7);
IkReal x7714=((1.0)*sj11);
IkReal x7715=(r11*sj12);
IkReal x7716=(cj11*cj12);
IkReal x7717=(cj12*sj11);
IkReal x7718=((1.0)*cj11);
IkReal x7719=(r01*sj12);
IkReal x7720=(sj9*x7712);
IkReal x7721=(cj9*x7713);
IkReal x7722=(cj9*x7712);
IkReal x7723=((0.00043624)*x7712);
IkReal x7724=((0.00043624)*x7713);
IkReal x7725=(sj9*x7713);
IkReal x7726=(x7720+x7721);
evalcond[0]=((((0.00043624)*x7722))+(((-1.0)*sj9*x7724))+(((-1.0)*px))+(((-1.0)*x7723)));
evalcond[1]=((((0.00043624)*x7720))+(((0.00043624)*x7721))+(((-1.0)*py))+(((-1.0)*x7724)));
evalcond[2]=(((cj11*r02))+(((-1.0)*x7714*x7719))+x7726+((r00*x7717)));
evalcond[3]=(((cj11*r12))+(((-1.0)*x7714*x7715))+(((-1.0)*x7722))+((r10*x7717))+x7725);
evalcond[4]=((((-1.0)*r12*x7714))+(((-1.0)*x7715*x7718))+((r10*x7716))+x7726);
evalcond[5]=((((-1.0)*x7725))+(((-1.0)*x7718*x7719))+(((-1.0)*r02*x7714))+x7722+((r00*x7716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7727=((68162500000.0)*py);
IkReal x7728=((68162500000.0)*px);
CheckValue<IkReal> x7729=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((-59470418.0)*cj9)))),-1);
if(!x7729.valid){
continue;
}
CheckValue<IkReal> x7730 = IKatan2WithCheck(IkReal((((cj9*x7727))+(((-1.0)*sj9*x7728))+(((-1.0)*x7727)))),IkReal((((cj9*x7728))+((sj9*x7727))+(((-1.0)*x7728)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7730.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7729.value)))+(x7730.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x7731=IKcos(j7);
IkReal x7732=IKsin(j7);
IkReal x7733=((0.00043624)*x7731);
IkReal x7734=((0.00043624)*x7732);
evalcond[0]=((((-1.0)*px))+(((-1.0)*x7733))+((cj9*x7733))+(((-1.0)*sj9*x7734)));
evalcond[1]=(((sj9*x7733))+(((-1.0)*py))+(((-1.0)*x7734))+((cj9*x7734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=1.0;
j8=0;
IkReal x7735=(r21*sj12);
IkReal x7736=(sj7*sj9);
IkReal x7737=(cj12*r20);
IkReal x7738=((1.0)*cj7*cj9);
IkReal x7739=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x7739;
j11eval[1]=((IKabs((((cj7*cj9*x7737))+(((-1.0)*x7735*x7738))+((x7735*x7736))+(((-1.0)*x7736*x7737)))))+(IKabs(((((-1.0)*r22*x7738))+((r22*x7736))))));
j11eval[2]=IKsign(x7739);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=1.0;
j8=0;
IkReal x7740=(cj7*sj9);
IkReal x7741=(r21*sj12);
IkReal x7742=((1.0)*cj12);
IkReal x7743=(cj9*sj7);
IkReal x7744=((((-1.0)*r11*x7742))+(((-1.0)*r10*sj12)));
j11eval[0]=x7744;
j11eval[1]=IKsign(x7744);
j11eval[2]=((IKabs((((r22*x7743))+((r22*x7740)))))+(IKabs((((x7741*x7743))+((x7740*x7741))+(((-1.0)*r20*x7742*x7743))+(((-1.0)*r20*x7740*x7742))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=1.0;
j8=0;
IkReal x7745=cj12*cj12;
IkReal x7746=((1.0)*r21);
IkReal x7747=(cj12*sj12);
IkReal x7748=(cj7*sj9);
IkReal x7749=((1.0)*r20);
IkReal x7750=(r21*sj12);
IkReal x7751=(cj9*sj7);
IkReal x7752=(((r11*r21))+(((-1.0)*r10*x7746*x7747))+(((-1.0)*r11*x7745*x7746))+((r12*r22))+((r10*r20*x7745))+(((-1.0)*r11*x7747*x7749)));
j11eval[0]=x7752;
j11eval[1]=IKsign(x7752);
j11eval[2]=((IKabs(((((-1.0)*cj12*x7748*x7749))+(((-1.0)*cj12*x7749*x7751))+((x7748*x7750))+((x7750*x7751)))))+(IKabs((((r22*x7748))+((r22*x7751))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x7753=cj12*cj12;
IkReal x7754=(r21*sj12);
IkReal x7755=((1.0)*cj12);
IkReal x7756=(cj7*sj9);
IkReal x7757=(r11*r21);
IkReal x7758=(cj9*sj7);
CheckValue<IkReal> x7759 = IKatan2WithCheck(IkReal((((r22*x7756))+((r22*x7758)))),IkReal(((((-1.0)*r20*x7755*x7756))+(((-1.0)*r20*x7755*x7758))+((x7754*x7756))+((x7754*x7758)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7759.valid){
continue;
}
CheckValue<IkReal> x7760=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7753*x7757))+((r12*r22))+((r10*r20*x7753))+(((-1.0)*r10*x7754*x7755))+x7757+(((-1.0)*r11*r20*sj12*x7755)))),-1);
if(!x7760.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x7759.value)+(((1.5707963267949)*(x7760.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x7761=IKsin(j11);
IkReal x7762=IKcos(j11);
IkReal x7763=(cj9*sj7);
IkReal x7764=(cj7*sj9);
IkReal x7765=(cj12*r20);
IkReal x7766=(sj7*sj9);
IkReal x7767=(cj7*cj9);
IkReal x7768=(cj12*x7762);
IkReal x7769=((1.0)*x7761);
IkReal x7770=(cj12*x7761);
IkReal x7771=(x7764+x7763);
IkReal x7772=((1.0)*sj12*x7762);
evalcond[0]=(((r22*x7762))+(((-1.0)*r21*sj12*x7769))+((x7761*x7765)));
evalcond[1]=((((-1.0)*r22*x7769))+((x7762*x7765))+(((-1.0)*r21*x7772)));
evalcond[2]=(((r00*x7770))+(((-1.0)*r01*sj12*x7769))+((r02*x7762))+x7771);
evalcond[3]=((((-1.0)*x7767))+((r12*x7762))+(((-1.0)*r11*sj12*x7769))+x7766+((r10*x7770)));
evalcond[4]=((((-1.0)*r11*x7772))+(((-1.0)*r12*x7769))+((r10*x7768))+x7771);
evalcond[5]=((((-1.0)*r02*x7769))+(((-1.0)*r01*x7772))+(((-1.0)*x7766))+x7767+((r00*x7768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x7773=(cj7*sj9);
IkReal x7774=(r21*sj12);
IkReal x7775=((1.0)*cj12);
IkReal x7776=(cj9*sj7);
CheckValue<IkReal> x7777=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7775))+(((-1.0)*r10*sj12)))),-1);
if(!x7777.valid){
continue;
}
CheckValue<IkReal> x7778 = IKatan2WithCheck(IkReal((((r22*x7776))+((r22*x7773)))),IkReal(((((-1.0)*r20*x7775*x7776))+((x7774*x7776))+((x7773*x7774))+(((-1.0)*r20*x7773*x7775)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7778.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7777.value)))+(x7778.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x7779=IKsin(j11);
IkReal x7780=IKcos(j11);
IkReal x7781=(cj9*sj7);
IkReal x7782=(cj7*sj9);
IkReal x7783=(cj12*r20);
IkReal x7784=(sj7*sj9);
IkReal x7785=(cj7*cj9);
IkReal x7786=(cj12*x7780);
IkReal x7787=((1.0)*x7779);
IkReal x7788=(cj12*x7779);
IkReal x7789=(x7782+x7781);
IkReal x7790=((1.0)*sj12*x7780);
evalcond[0]=(((x7779*x7783))+((r22*x7780))+(((-1.0)*r21*sj12*x7787)));
evalcond[1]=(((x7780*x7783))+(((-1.0)*r21*x7790))+(((-1.0)*r22*x7787)));
evalcond[2]=(((r00*x7788))+(((-1.0)*r01*sj12*x7787))+((r02*x7780))+x7789);
evalcond[3]=(((r10*x7788))+(((-1.0)*r11*sj12*x7787))+((r12*x7780))+x7784+(((-1.0)*x7785)));
evalcond[4]=((((-1.0)*r11*x7790))+((r10*x7786))+(((-1.0)*r12*x7787))+x7789);
evalcond[5]=(((r00*x7786))+(((-1.0)*r02*x7787))+(((-1.0)*r01*x7790))+x7785+(((-1.0)*x7784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x7791=(r21*sj12);
IkReal x7792=(sj7*sj9);
IkReal x7793=(cj12*r20);
IkReal x7794=((1.0)*cj7*cj9);
CheckValue<IkReal> x7795 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7794))+((r22*x7792)))),IkReal((((cj7*cj9*x7793))+(((-1.0)*x7791*x7794))+(((-1.0)*x7792*x7793))+((x7791*x7792)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7795.valid){
continue;
}
CheckValue<IkReal> x7796=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x7796.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x7795.value)+(((1.5707963267949)*(x7796.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x7797=IKsin(j11);
IkReal x7798=IKcos(j11);
IkReal x7799=(cj9*sj7);
IkReal x7800=(cj7*sj9);
IkReal x7801=(cj12*r20);
IkReal x7802=(sj7*sj9);
IkReal x7803=(cj7*cj9);
IkReal x7804=(cj12*x7798);
IkReal x7805=((1.0)*x7797);
IkReal x7806=(cj12*x7797);
IkReal x7807=(x7800+x7799);
IkReal x7808=((1.0)*sj12*x7798);
evalcond[0]=((((-1.0)*r21*sj12*x7805))+((x7797*x7801))+((r22*x7798)));
evalcond[1]=((((-1.0)*r21*x7808))+((x7798*x7801))+(((-1.0)*r22*x7805)));
evalcond[2]=(((r00*x7806))+((r02*x7798))+x7807+(((-1.0)*r01*sj12*x7805)));
evalcond[3]=((((-1.0)*x7803))+(((-1.0)*r11*sj12*x7805))+x7802+((r12*x7798))+((r10*x7806)));
evalcond[4]=((((-1.0)*r12*x7805))+(((-1.0)*r11*x7808))+x7807+((r10*x7804)));
evalcond[5]=(((r00*x7804))+(((-1.0)*x7802))+(((-1.0)*r02*x7805))+x7803+(((-1.0)*r01*x7808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x7809=((68162500000.0)*cj9);
IkReal x7810=((68162500000.0)*px);
IkReal x7811=((68162500000.0)*py);
j7eval[0]=((1.0)+cj9);
j7eval[1]=IKsign(((59470418.0)+(((59470418.0)*cj9))));
j7eval[2]=((IKabs(((((-1.0)*x7811))+(((-1.0)*sj9*x7810))+(((-1.0)*py*x7809)))))+(IKabs((((sj9*x7811))+(((-1.0)*x7810))+(((-1.0)*px*x7809))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
j11eval[0]=((IKabs(((((-1.0)*r21*sj12))+((cj12*r20)))))+(IKabs(r22)));
if( IKabs(j11eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x7813 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*sj12))+((cj12*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7813.valid){
continue;
}
IkReal x7812=x7813.value;
j11array[0]=((-1.0)*x7812);
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+(((-1.0)*x7812)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[1];
IkReal x7814=IKcos(j11);
evalcond[0]=((((-1.0)*r22*(IKsin(j11))))+(((-1.0)*r21*sj12*x7814))+((cj12*r20*x7814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x7815=((68162500000.0)*cj9);
IkReal x7816=((68162500000.0)*px);
IkReal x7817=((68162500000.0)*py);
j7eval[0]=((1.0)+cj9);
j7eval[1]=IKsign(((59470418.0)+(((59470418.0)*cj9))));
j7eval[2]=((IKabs((((sj9*x7817))+(((-1.0)*px*x7815))+(((-1.0)*x7816)))))+(IKabs(((((-1.0)*x7817))+(((-1.0)*sj9*x7816))+(((-1.0)*py*x7815))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
j7eval[0]=((-1.0)+(((-1.0)*cj9)));
j7eval[1]=IKsign(((-5453.0)+(((-5453.0)*cj9))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
j7eval[0]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7818=((5453.0)*cj9);
IkReal x7819=(cj11*r02);
IkReal x7820=(cj12*r00*sj11);
IkReal x7821=(r01*sj11*sj12);
CheckValue<IkReal> x7822=IKPowWithIntegerCheck(sj9,-1);
if(!x7822.valid){
continue;
}
if( IKabs(((((-1.0)*x7821))+x7820+x7819+(((-2292.31615624427)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.000183385292499542)*(x7822.value)*(((((-1.0)*x7818*x7819))+(((12500000.0)*cj9*py))+(((-5453.0)*x7820))+(((5453.0)*x7821))+(((-1.0)*x7818*x7820))+(((-5453.0)*x7819))+((x7818*x7821)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x7821))+x7820+x7819+(((-2292.31615624427)*py))))+IKsqr(((-0.000183385292499542)*(x7822.value)*(((((-1.0)*x7818*x7819))+(((12500000.0)*cj9*py))+(((-5453.0)*x7820))+(((5453.0)*x7821))+(((-1.0)*x7818*x7820))+(((-5453.0)*x7819))+((x7818*x7821))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*x7821))+x7820+x7819+(((-2292.31615624427)*py))), ((-0.000183385292499542)*(x7822.value)*(((((-1.0)*x7818*x7819))+(((12500000.0)*cj9*py))+(((-5453.0)*x7820))+(((5453.0)*x7821))+(((-1.0)*x7818*x7820))+(((-5453.0)*x7819))+((x7818*x7821))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x7823=IKcos(j7);
IkReal x7824=IKsin(j7);
IkReal x7825=((1.0)*sj11);
IkReal x7826=(r11*sj12);
IkReal x7827=(cj11*cj12);
IkReal x7828=((1.0)*cj9);
IkReal x7829=(cj12*sj11);
IkReal x7830=((1.0)*cj11);
IkReal x7831=(r01*sj12);
IkReal x7832=((0.00043624)*x7823);
IkReal x7833=((0.00043624)*x7824);
IkReal x7834=(sj9*x7823);
IkReal x7835=(x7823*x7828);
IkReal x7836=((1.0)*sj9*x7824);
IkReal x7837=(x7835+x7836);
evalcond[0]=((((-1.0)*sj9*x7833))+(((-1.0)*px))+(((-1.0)*cj9*x7832))+(((-1.0)*x7832)));
evalcond[1]=(((sj9*x7832))+(((-1.0)*py))+(((-1.0)*cj9*x7833))+(((-1.0)*x7833)));
evalcond[2]=(((cj9*x7824))+((r00*x7829))+((cj11*r02))+(((-1.0)*x7834))+(((-1.0)*x7825*x7831)));
evalcond[3]=(((r10*x7829))+(((-1.0)*x7825*x7826))+((cj11*r12))+(((-1.0)*x7837)));
evalcond[4]=(((r10*x7827))+(((-1.0)*x7824*x7828))+x7834+(((-1.0)*r12*x7825))+(((-1.0)*x7826*x7830)));
evalcond[5]=((((-1.0)*r02*x7825))+(((-1.0)*x7830*x7831))+((r00*x7827))+(((-1.0)*x7837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7838=((12500000.0)*px);
IkReal x7839=((5453.0)*sj11);
IkReal x7840=(cj12*r00);
IkReal x7841=(r01*sj12);
IkReal x7842=((5453.0)*cj11*r02);
CheckValue<IkReal> x7843 = IKatan2WithCheck(IkReal(((((-1.0)*x7839*x7841))+((sj9*x7838))+((x7839*x7840))+x7842+((cj9*x7839*x7840))+((cj9*x7842))+(((-1.0)*cj9*x7839*x7841)))),IkReal(((((-1.0)*sj9*x7842))+((sj9*x7839*x7841))+(((-1.0)*sj9*x7839*x7840))+((cj9*x7838)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7843.valid){
continue;
}
CheckValue<IkReal> x7844=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((-5453.0)*cj9)))),-1);
if(!x7844.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x7843.value)+(((1.5707963267949)*(x7844.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x7845=IKcos(j7);
IkReal x7846=IKsin(j7);
IkReal x7847=((1.0)*sj11);
IkReal x7848=(r11*sj12);
IkReal x7849=(cj11*cj12);
IkReal x7850=((1.0)*cj9);
IkReal x7851=(cj12*sj11);
IkReal x7852=((1.0)*cj11);
IkReal x7853=(r01*sj12);
IkReal x7854=((0.00043624)*x7845);
IkReal x7855=((0.00043624)*x7846);
IkReal x7856=(sj9*x7845);
IkReal x7857=(x7845*x7850);
IkReal x7858=((1.0)*sj9*x7846);
IkReal x7859=(x7857+x7858);
evalcond[0]=((((-1.0)*sj9*x7855))+(((-1.0)*px))+(((-1.0)*cj9*x7854))+(((-1.0)*x7854)));
evalcond[1]=((((-1.0)*py))+(((-1.0)*cj9*x7855))+((sj9*x7854))+(((-1.0)*x7855)));
evalcond[2]=((((-1.0)*x7847*x7853))+((cj11*r02))+(((-1.0)*x7856))+((r00*x7851))+((cj9*x7846)));
evalcond[3]=(((cj11*r12))+((r10*x7851))+(((-1.0)*x7847*x7848))+(((-1.0)*x7859)));
evalcond[4]=((((-1.0)*x7848*x7852))+((r10*x7849))+(((-1.0)*x7846*x7850))+(((-1.0)*r12*x7847))+x7856);
evalcond[5]=(((r00*x7849))+(((-1.0)*r02*x7847))+(((-1.0)*x7852*x7853))+(((-1.0)*x7859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7860=((68162500000.0)*cj9);
IkReal x7861=((68162500000.0)*px);
IkReal x7862=((68162500000.0)*py);
CheckValue<IkReal> x7863=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((59470418.0)*cj9)))),-1);
if(!x7863.valid){
continue;
}
CheckValue<IkReal> x7864 = IKatan2WithCheck(IkReal(((((-1.0)*x7862))+(((-1.0)*sj9*x7861))+(((-1.0)*py*x7860)))),IkReal((((sj9*x7862))+(((-1.0)*px*x7860))+(((-1.0)*x7861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7864.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7863.value)))+(x7864.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x7865=IKcos(j7);
IkReal x7866=IKsin(j7);
IkReal x7867=((1.0)*sj11);
IkReal x7868=(r11*sj12);
IkReal x7869=(cj11*cj12);
IkReal x7870=((1.0)*cj9);
IkReal x7871=(cj12*sj11);
IkReal x7872=((1.0)*cj11);
IkReal x7873=(r01*sj12);
IkReal x7874=((0.00043624)*x7865);
IkReal x7875=((0.00043624)*x7866);
IkReal x7876=(sj9*x7865);
IkReal x7877=(x7865*x7870);
IkReal x7878=((1.0)*sj9*x7866);
IkReal x7879=(x7877+x7878);
evalcond[0]=((((-1.0)*px))+(((-1.0)*cj9*x7874))+(((-1.0)*x7874))+(((-1.0)*sj9*x7875)));
evalcond[1]=(((sj9*x7874))+(((-1.0)*py))+(((-1.0)*cj9*x7875))+(((-1.0)*x7875)));
evalcond[2]=((((-1.0)*x7867*x7873))+(((-1.0)*x7876))+((r00*x7871))+((cj9*x7866))+((cj11*r02)));
evalcond[3]=(((r10*x7871))+((cj11*r12))+(((-1.0)*x7879))+(((-1.0)*x7867*x7868)));
evalcond[4]=((((-1.0)*x7868*x7872))+x7876+(((-1.0)*r12*x7867))+((r10*x7869))+(((-1.0)*x7866*x7870)));
evalcond[5]=((((-1.0)*x7872*x7873))+((r00*x7869))+(((-1.0)*r02*x7867))+(((-1.0)*x7879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7880=((68162500000.0)*cj9);
IkReal x7881=((68162500000.0)*px);
IkReal x7882=((68162500000.0)*py);
CheckValue<IkReal> x7883 = IKatan2WithCheck(IkReal(((((-1.0)*sj9*x7881))+(((-1.0)*x7882))+(((-1.0)*py*x7880)))),IkReal(((((-1.0)*px*x7880))+(((-1.0)*x7881))+((sj9*x7882)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7883.valid){
continue;
}
CheckValue<IkReal> x7884=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((59470418.0)*cj9)))),-1);
if(!x7884.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x7883.value)+(((1.5707963267949)*(x7884.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x7885=IKcos(j7);
IkReal x7886=IKsin(j7);
IkReal x7887=((0.00043624)*x7885);
IkReal x7888=((0.00043624)*x7886);
evalcond[0]=((((-1.0)*cj9*x7887))+(((-1.0)*sj9*x7888))+(((-1.0)*px))+(((-1.0)*x7887)));
evalcond[1]=((((-1.0)*cj9*x7888))+(((-1.0)*py))+(((-1.0)*x7888))+((sj9*x7887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x7889=(sj7*sj9);
IkReal x7890=((1.0)*r22);
IkReal x7891=(cj7*cj9);
IkReal x7892=(cj12*r20);
IkReal x7893=((1.0)*r21*sj12);
IkReal x7894=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x7894;
j11eval[1]=((IKabs(((((-1.0)*x7891*x7893))+(((-1.0)*x7889*x7893))+((x7891*x7892))+((x7889*x7892)))))+(IKabs(((((-1.0)*x7889*x7890))+(((-1.0)*x7890*x7891))))));
j11eval[2]=IKsign(x7894);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x7895=(cj9*sj7);
IkReal x7896=((1.0)*cj12);
IkReal x7897=(r21*sj12);
IkReal x7898=((1.0)*cj7*sj9);
IkReal x7899=((((-1.0)*r11*x7896))+(((-1.0)*r10*sj12)));
j11eval[0]=x7899;
j11eval[1]=IKsign(x7899);
j11eval[2]=((IKabs((((r22*x7895))+(((-1.0)*r22*x7898)))))+(IKabs(((((-1.0)*x7897*x7898))+((x7895*x7897))+((cj12*cj7*r20*sj9))+(((-1.0)*r20*x7895*x7896))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x7900=cj12*cj12;
IkReal x7901=((1.0)*cj12);
IkReal x7902=(r21*sj12);
IkReal x7903=(cj7*sj9);
IkReal x7904=(r11*r21);
IkReal x7905=(cj9*sj7);
IkReal x7906=(((r10*r20*x7900))+((r12*r22))+x7904+(((-1.0)*r10*x7901*x7902))+(((-1.0)*r11*r20*sj12*x7901))+(((-1.0)*x7900*x7904)));
j11eval[0]=x7906;
j11eval[1]=IKsign(x7906);
j11eval[2]=((IKabs(((((-1.0)*x7902*x7905))+(((-1.0)*r20*x7901*x7903))+((x7902*x7903))+((cj12*r20*x7905)))))+(IKabs((((r22*x7903))+(((-1.0)*r22*x7905))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x7907=cj12*cj12;
IkReal x7908=((1.0)*cj12);
IkReal x7909=(r21*sj12);
IkReal x7910=(cj7*sj9);
IkReal x7911=(r11*r21);
IkReal x7912=(cj9*sj7);
CheckValue<IkReal> x7913=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7907*x7911))+((r10*r20*x7907))+((r12*r22))+x7911+(((-1.0)*r11*r20*sj12*x7908))+(((-1.0)*r10*x7908*x7909)))),-1);
if(!x7913.valid){
continue;
}
CheckValue<IkReal> x7914 = IKatan2WithCheck(IkReal((((r22*x7910))+(((-1.0)*r22*x7912)))),IkReal(((((-1.0)*r20*x7908*x7910))+(((-1.0)*x7909*x7912))+((x7909*x7910))+((cj12*r20*x7912)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7914.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7913.value)))+(x7914.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x7915=IKsin(j11);
IkReal x7916=IKcos(j11);
IkReal x7917=(cj12*r20);
IkReal x7918=((1.0)*sj7);
IkReal x7919=(cj7*sj9);
IkReal x7920=((1.0)*cj7*cj9);
IkReal x7921=(sj9*x7918);
IkReal x7922=(cj12*x7916);
IkReal x7923=((1.0)*x7915);
IkReal x7924=(cj12*x7915);
IkReal x7925=((1.0)*sj12*x7916);
IkReal x7926=(x7920+x7921);
evalcond[0]=(((r22*x7916))+(((-1.0)*r21*sj12*x7923))+((x7915*x7917)));
evalcond[1]=((((-1.0)*r22*x7923))+(((-1.0)*r21*x7925))+((x7916*x7917)));
evalcond[2]=((((-1.0)*x7919))+((cj9*sj7))+((r02*x7916))+((r00*x7924))+(((-1.0)*r01*sj12*x7923)));
evalcond[3]=((((-1.0)*x7926))+((r10*x7924))+((r12*x7916))+(((-1.0)*r11*sj12*x7923)));
evalcond[4]=(((r10*x7922))+x7919+(((-1.0)*r11*x7925))+(((-1.0)*r12*x7923))+(((-1.0)*cj9*x7918)));
evalcond[5]=((((-1.0)*x7926))+(((-1.0)*r02*x7923))+((r00*x7922))+(((-1.0)*r01*x7925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x7927=((1.0)*cj12);
IkReal x7928=(cj9*sj7);
IkReal x7929=(r21*sj12);
IkReal x7930=((1.0)*cj7*sj9);
CheckValue<IkReal> x7931 = IKatan2WithCheck(IkReal((((r22*x7928))+(((-1.0)*r22*x7930)))),IkReal((((x7928*x7929))+(((-1.0)*x7929*x7930))+(((-1.0)*r20*x7927*x7928))+((cj12*cj7*r20*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7931.valid){
continue;
}
CheckValue<IkReal> x7932=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7927))+(((-1.0)*r10*sj12)))),-1);
if(!x7932.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x7931.value)+(((1.5707963267949)*(x7932.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x7933=IKsin(j11);
IkReal x7934=IKcos(j11);
IkReal x7935=(cj12*r20);
IkReal x7936=((1.0)*sj7);
IkReal x7937=(cj7*sj9);
IkReal x7938=((1.0)*cj7*cj9);
IkReal x7939=(sj9*x7936);
IkReal x7940=(cj12*x7934);
IkReal x7941=((1.0)*x7933);
IkReal x7942=(cj12*x7933);
IkReal x7943=((1.0)*sj12*x7934);
IkReal x7944=(x7939+x7938);
evalcond[0]=(((x7933*x7935))+(((-1.0)*r21*sj12*x7941))+((r22*x7934)));
evalcond[1]=((((-1.0)*r22*x7941))+(((-1.0)*r21*x7943))+((x7934*x7935)));
evalcond[2]=((((-1.0)*r01*sj12*x7941))+((cj9*sj7))+((r02*x7934))+(((-1.0)*x7937))+((r00*x7942)));
evalcond[3]=(((r10*x7942))+((r12*x7934))+(((-1.0)*r11*sj12*x7941))+(((-1.0)*x7944)));
evalcond[4]=((((-1.0)*r11*x7943))+(((-1.0)*r12*x7941))+x7937+((r10*x7940))+(((-1.0)*cj9*x7936)));
evalcond[5]=((((-1.0)*r01*x7943))+(((-1.0)*r02*x7941))+((r00*x7940))+(((-1.0)*x7944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x7945=(sj7*sj9);
IkReal x7946=((1.0)*r22);
IkReal x7947=(cj7*cj9);
IkReal x7948=(cj12*r20);
IkReal x7949=((1.0)*r21*sj12);
CheckValue<IkReal> x7950 = IKatan2WithCheck(IkReal(((((-1.0)*x7946*x7947))+(((-1.0)*x7945*x7946)))),IkReal((((x7947*x7948))+((x7945*x7948))+(((-1.0)*x7947*x7949))+(((-1.0)*x7945*x7949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7950.valid){
continue;
}
CheckValue<IkReal> x7951=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x7951.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x7950.value)+(((1.5707963267949)*(x7951.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x7952=IKsin(j11);
IkReal x7953=IKcos(j11);
IkReal x7954=(cj12*r20);
IkReal x7955=((1.0)*sj7);
IkReal x7956=(cj7*sj9);
IkReal x7957=((1.0)*cj7*cj9);
IkReal x7958=(sj9*x7955);
IkReal x7959=(cj12*x7953);
IkReal x7960=((1.0)*x7952);
IkReal x7961=(cj12*x7952);
IkReal x7962=((1.0)*sj12*x7953);
IkReal x7963=(x7957+x7958);
evalcond[0]=(((r22*x7953))+(((-1.0)*r21*sj12*x7960))+((x7952*x7954)));
evalcond[1]=((((-1.0)*r22*x7960))+((x7953*x7954))+(((-1.0)*r21*x7962)));
evalcond[2]=((((-1.0)*r01*sj12*x7960))+((r00*x7961))+(((-1.0)*x7956))+((cj9*sj7))+((r02*x7953)));
evalcond[3]=(((r12*x7953))+(((-1.0)*r11*sj12*x7960))+(((-1.0)*x7963))+((r10*x7961)));
evalcond[4]=((((-1.0)*cj9*x7955))+x7956+(((-1.0)*r12*x7960))+(((-1.0)*r11*x7962))+((r10*x7959)));
evalcond[5]=(((r00*x7959))+(((-1.0)*x7963))+(((-1.0)*r01*x7962))+(((-1.0)*r02*x7960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7, j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x7964=((5453.0)*sj8);
IkReal x7965=((5453.0)*sj9);
IkReal x7966=(cj12*r01);
IkReal x7967=((5000000.0)*sj8);
IkReal x7968=(r00*sj12);
CheckValue<IkReal> x7969=IKPowWithIntegerCheck(((5250000.0)+(((-1.0)*x7964))+(((-5250000.0)*(cj8*cj8)))+((cj8*cj9*x7964))),-1);
if(!x7969.valid){
continue;
}
CheckValue<IkReal> x7970=IKPowWithIntegerCheck(sj8,-1);
if(!x7970.valid){
continue;
}
if( IKabs(((x7969.value)*((((r10*sj12*x7967))+(((12500000.0)*py*sj8))+(((-1.0)*x7965*x7968))+(((-1.0)*x7965*x7966))+((cj12*r11*x7967)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7970.value)*((x7966+x7968)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7969.value)*((((r10*sj12*x7967))+(((12500000.0)*py*sj8))+(((-1.0)*x7965*x7968))+(((-1.0)*x7965*x7966))+((cj12*r11*x7967))))))+IKsqr(((x7970.value)*((x7966+x7968))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x7969.value)*((((r10*sj12*x7967))+(((12500000.0)*py*sj8))+(((-1.0)*x7965*x7968))+(((-1.0)*x7965*x7966))+((cj12*r11*x7967))))), ((x7970.value)*((x7966+x7968))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x7971=IKcos(j7);
IkReal x7972=IKsin(j7);
IkReal x7973=(r10*sj12);
IkReal x7974=((0.42)*sj8);
IkReal x7975=((1.0)*cj12);
IkReal x7976=(cj8*cj9);
IkReal x7977=((0.4)*cj12);
IkReal x7978=(r00*sj12);
IkReal x7979=((0.00043624)*x7971);
IkReal x7980=((0.00043624)*x7972);
evalcond[0]=((((-1.0)*x7978))+(((-1.0)*r01*x7975))+((sj8*x7971)));
evalcond[1]=((((-1.0)*x7973))+(((-1.0)*r11*x7975))+((sj8*x7972)));
evalcond[2]=(((x7971*x7974))+(((-1.0)*x7979))+(((-0.4)*x7978))+(((-1.0)*px))+(((-1.0)*r01*x7977))+((x7976*x7979))+(((-1.0)*sj9*x7980)));
evalcond[3]=(((x7976*x7980))+((sj9*x7979))+(((-0.4)*x7973))+(((-1.0)*py))+((x7972*x7974))+(((-1.0)*r11*x7977))+(((-1.0)*x7980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[2];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x7981=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x7981;
j11eval[1]=IKsign(x7981);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x7982=((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11)));
j11eval[0]=x7982;
j11eval[1]=IKsign(x7982);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x7983=cj12*cj12;
IkReal x7984=r21*r21;
IkReal x7985=(r22*sj8);
IkReal x7986=((1.0)*cj9);
IkReal x7987=(cj12*r20*sj8);
IkReal x7988=(r21*sj12*sj8);
IkReal x7989=((r22*r22)+(((-1.0)*x7983*x7984))+x7984+(((-2.0)*cj12*r20*r21*sj12))+((x7983*(r20*r20))));
j11eval[0]=x7989;
j11eval[1]=IKsign(x7989);
j11eval[2]=((IKabs((((cj9*x7987))+((sj9*x7985))+(((-1.0)*x7986*x7988)))))+(IKabs((((sj9*x7987))+(((-1.0)*x7985*x7986))+(((-1.0)*sj9*x7988))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=1.0;
j8=0;
IkReal x7990=(r21*sj12);
IkReal x7991=(sj7*sj9);
IkReal x7992=(cj12*r20);
IkReal x7993=((1.0)*cj7*cj9);
IkReal x7994=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x7994;
j11eval[1]=((IKabs((((r22*x7991))+(((-1.0)*r22*x7993)))))+(IKabs((((x7990*x7991))+((cj7*cj9*x7992))+(((-1.0)*x7990*x7993))+(((-1.0)*x7991*x7992))))));
j11eval[2]=IKsign(x7994);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=1.0;
j8=0;
IkReal x7995=(cj7*sj9);
IkReal x7996=(r21*sj12);
IkReal x7997=((1.0)*cj12);
IkReal x7998=(cj9*sj7);
IkReal x7999=((((-1.0)*r11*x7997))+(((-1.0)*r10*sj12)));
j11eval[0]=x7999;
j11eval[1]=IKsign(x7999);
j11eval[2]=((IKabs((((r22*x7995))+((r22*x7998)))))+(IKabs((((x7995*x7996))+(((-1.0)*r20*x7995*x7997))+((x7996*x7998))+(((-1.0)*r20*x7997*x7998))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=1.0;
j8=0;
IkReal x8000=cj12*cj12;
IkReal x8001=((1.0)*r21);
IkReal x8002=(cj12*sj12);
IkReal x8003=(cj7*sj9);
IkReal x8004=((1.0)*r20);
IkReal x8005=(r21*sj12);
IkReal x8006=(cj9*sj7);
IkReal x8007=(((r11*r21))+((r10*r20*x8000))+((r12*r22))+(((-1.0)*r10*x8001*x8002))+(((-1.0)*r11*x8000*x8001))+(((-1.0)*r11*x8002*x8004)));
j11eval[0]=x8007;
j11eval[1]=IKsign(x8007);
j11eval[2]=((IKabs((((r22*x8006))+((r22*x8003)))))+(IKabs((((x8005*x8006))+(((-1.0)*cj12*x8004*x8006))+(((-1.0)*cj12*x8003*x8004))+((x8003*x8005))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8008=cj12*cj12;
IkReal x8009=(r21*sj12);
IkReal x8010=((1.0)*cj12);
IkReal x8011=(cj7*sj9);
IkReal x8012=(r11*r21);
IkReal x8013=(cj9*sj7);
CheckValue<IkReal> x8014 = IKatan2WithCheck(IkReal((((r22*x8013))+((r22*x8011)))),IkReal(((((-1.0)*r20*x8010*x8011))+(((-1.0)*r20*x8010*x8013))+((x8009*x8011))+((x8009*x8013)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8014.valid){
continue;
}
CheckValue<IkReal> x8015=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8008*x8012))+((r10*r20*x8008))+((r12*r22))+(((-1.0)*r11*r20*sj12*x8010))+x8012+(((-1.0)*r10*x8009*x8010)))),-1);
if(!x8015.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x8014.value)+(((1.5707963267949)*(x8015.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8016=IKsin(j11);
IkReal x8017=IKcos(j11);
IkReal x8018=(cj9*sj7);
IkReal x8019=(cj7*sj9);
IkReal x8020=(cj12*r20);
IkReal x8021=(sj7*sj9);
IkReal x8022=(cj7*cj9);
IkReal x8023=(cj12*x8017);
IkReal x8024=((1.0)*x8016);
IkReal x8025=(cj12*x8016);
IkReal x8026=(x8019+x8018);
IkReal x8027=((1.0)*sj12*x8017);
evalcond[0]=((((-1.0)*r21*sj12*x8024))+((x8016*x8020))+((r22*x8017)));
evalcond[1]=(((x8017*x8020))+(((-1.0)*r21*x8027))+(((-1.0)*r22*x8024)));
evalcond[2]=(((r02*x8017))+(((-1.0)*r01*sj12*x8024))+((r00*x8025))+x8026);
evalcond[3]=(((r10*x8025))+(((-1.0)*x8022))+((r12*x8017))+(((-1.0)*r11*sj12*x8024))+x8021);
evalcond[4]=(((r10*x8023))+(((-1.0)*r12*x8024))+(((-1.0)*r11*x8027))+x8026);
evalcond[5]=((((-1.0)*x8021))+(((-1.0)*r02*x8024))+((r00*x8023))+x8022+(((-1.0)*r01*x8027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8028=(cj7*sj9);
IkReal x8029=(r21*sj12);
IkReal x8030=((1.0)*cj12);
IkReal x8031=(cj9*sj7);
CheckValue<IkReal> x8032 = IKatan2WithCheck(IkReal((((r22*x8028))+((r22*x8031)))),IkReal((((x8029*x8031))+(((-1.0)*r20*x8028*x8030))+(((-1.0)*r20*x8030*x8031))+((x8028*x8029)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8032.valid){
continue;
}
CheckValue<IkReal> x8033=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8030))+(((-1.0)*r10*sj12)))),-1);
if(!x8033.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x8032.value)+(((1.5707963267949)*(x8033.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8034=IKsin(j11);
IkReal x8035=IKcos(j11);
IkReal x8036=(cj9*sj7);
IkReal x8037=(cj7*sj9);
IkReal x8038=(cj12*r20);
IkReal x8039=(sj7*sj9);
IkReal x8040=(cj7*cj9);
IkReal x8041=(cj12*x8035);
IkReal x8042=((1.0)*x8034);
IkReal x8043=(cj12*x8034);
IkReal x8044=(x8037+x8036);
IkReal x8045=((1.0)*sj12*x8035);
evalcond[0]=(((x8034*x8038))+(((-1.0)*r21*sj12*x8042))+((r22*x8035)));
evalcond[1]=((((-1.0)*r21*x8045))+(((-1.0)*r22*x8042))+((x8035*x8038)));
evalcond[2]=(((r02*x8035))+(((-1.0)*r01*sj12*x8042))+x8044+((r00*x8043)));
evalcond[3]=(((r10*x8043))+(((-1.0)*x8040))+(((-1.0)*r11*sj12*x8042))+((r12*x8035))+x8039);
evalcond[4]=((((-1.0)*r11*x8045))+((r10*x8041))+x8044+(((-1.0)*r12*x8042)));
evalcond[5]=((((-1.0)*x8039))+(((-1.0)*r02*x8042))+x8040+((r00*x8041))+(((-1.0)*r01*x8045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8046=(r21*sj12);
IkReal x8047=(sj7*sj9);
IkReal x8048=(cj12*r20);
IkReal x8049=((1.0)*cj7*cj9);
CheckValue<IkReal> x8050=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x8050.valid){
continue;
}
CheckValue<IkReal> x8051 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x8049))+((r22*x8047)))),IkReal((((cj7*cj9*x8048))+(((-1.0)*x8047*x8048))+((x8046*x8047))+(((-1.0)*x8046*x8049)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8051.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8050.value)))+(x8051.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8052=IKsin(j11);
IkReal x8053=IKcos(j11);
IkReal x8054=(cj9*sj7);
IkReal x8055=(cj7*sj9);
IkReal x8056=(cj12*r20);
IkReal x8057=(sj7*sj9);
IkReal x8058=(cj7*cj9);
IkReal x8059=(cj12*x8053);
IkReal x8060=((1.0)*x8052);
IkReal x8061=(cj12*x8052);
IkReal x8062=(x8055+x8054);
IkReal x8063=((1.0)*sj12*x8053);
evalcond[0]=((((-1.0)*r21*sj12*x8060))+((x8052*x8056))+((r22*x8053)));
evalcond[1]=((((-1.0)*r21*x8063))+((x8053*x8056))+(((-1.0)*r22*x8060)));
evalcond[2]=((((-1.0)*r01*sj12*x8060))+((r00*x8061))+((r02*x8053))+x8062);
evalcond[3]=(((r10*x8061))+(((-1.0)*r11*sj12*x8060))+(((-1.0)*x8058))+((r12*x8053))+x8057);
evalcond[4]=(((r10*x8059))+(((-1.0)*r11*x8063))+(((-1.0)*r12*x8060))+x8062);
evalcond[5]=(((r00*x8059))+(((-1.0)*x8057))+(((-1.0)*r01*x8063))+x8058+(((-1.0)*r02*x8060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x8064=(sj7*sj9);
IkReal x8065=((1.0)*r22);
IkReal x8066=(cj7*cj9);
IkReal x8067=(cj12*r20);
IkReal x8068=((1.0)*r21*sj12);
IkReal x8069=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x8069;
j11eval[1]=((IKabs(((((-1.0)*x8064*x8065))+(((-1.0)*x8065*x8066)))))+(IKabs(((((-1.0)*x8064*x8068))+((x8064*x8067))+((x8066*x8067))+(((-1.0)*x8066*x8068))))));
j11eval[2]=IKsign(x8069);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x8070=(cj9*sj7);
IkReal x8071=((1.0)*cj12);
IkReal x8072=(r21*sj12);
IkReal x8073=((1.0)*cj7*sj9);
IkReal x8074=((((-1.0)*r10*sj12))+(((-1.0)*r11*x8071)));
j11eval[0]=x8074;
j11eval[1]=IKsign(x8074);
j11eval[2]=((IKabs((((r22*x8070))+(((-1.0)*r22*x8073)))))+(IKabs(((((-1.0)*x8072*x8073))+(((-1.0)*r20*x8070*x8071))+((x8070*x8072))+((cj12*cj7*r20*sj9))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x8075=cj12*cj12;
IkReal x8076=((1.0)*cj12);
IkReal x8077=(r21*sj12);
IkReal x8078=(cj7*sj9);
IkReal x8079=(r11*r21);
IkReal x8080=(cj9*sj7);
IkReal x8081=(((r10*r20*x8075))+((r12*r22))+(((-1.0)*r11*r20*sj12*x8076))+x8079+(((-1.0)*r10*x8076*x8077))+(((-1.0)*x8075*x8079)));
j11eval[0]=x8081;
j11eval[1]=IKsign(x8081);
j11eval[2]=((IKabs((((r22*x8078))+(((-1.0)*r22*x8080)))))+(IKabs((((cj12*r20*x8080))+(((-1.0)*x8077*x8080))+(((-1.0)*r20*x8076*x8078))+((x8077*x8078))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8082=cj12*cj12;
IkReal x8083=((1.0)*cj12);
IkReal x8084=(r21*sj12);
IkReal x8085=(cj7*sj9);
IkReal x8086=(r11*r21);
IkReal x8087=(cj9*sj7);
CheckValue<IkReal> x8088=IKPowWithIntegerCheck(IKsign((((r10*r20*x8082))+((r12*r22))+(((-1.0)*r10*x8083*x8084))+x8086+(((-1.0)*r11*r20*sj12*x8083))+(((-1.0)*x8082*x8086)))),-1);
if(!x8088.valid){
continue;
}
CheckValue<IkReal> x8089 = IKatan2WithCheck(IkReal((((r22*x8085))+(((-1.0)*r22*x8087)))),IkReal(((((-1.0)*r20*x8083*x8085))+((cj12*r20*x8087))+((x8084*x8085))+(((-1.0)*x8084*x8087)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8089.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8088.value)))+(x8089.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8090=IKsin(j11);
IkReal x8091=IKcos(j11);
IkReal x8092=(cj12*r20);
IkReal x8093=((1.0)*sj7);
IkReal x8094=(cj7*sj9);
IkReal x8095=((1.0)*cj7*cj9);
IkReal x8096=(sj9*x8093);
IkReal x8097=(cj12*x8091);
IkReal x8098=((1.0)*x8090);
IkReal x8099=(cj12*x8090);
IkReal x8100=((1.0)*sj12*x8091);
IkReal x8101=(x8096+x8095);
evalcond[0]=(((r22*x8091))+((x8090*x8092))+(((-1.0)*r21*sj12*x8098)));
evalcond[1]=(((x8091*x8092))+(((-1.0)*r21*x8100))+(((-1.0)*r22*x8098)));
evalcond[2]=((((-1.0)*x8094))+((cj9*sj7))+(((-1.0)*r01*sj12*x8098))+((r00*x8099))+((r02*x8091)));
evalcond[3]=((((-1.0)*r11*sj12*x8098))+(((-1.0)*x8101))+((r10*x8099))+((r12*x8091)));
evalcond[4]=((((-1.0)*r11*x8100))+((r10*x8097))+(((-1.0)*r12*x8098))+x8094+(((-1.0)*cj9*x8093)));
evalcond[5]=((((-1.0)*r01*x8100))+(((-1.0)*x8101))+(((-1.0)*r02*x8098))+((r00*x8097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8102=((1.0)*cj12);
IkReal x8103=(cj9*sj7);
IkReal x8104=(r21*sj12);
IkReal x8105=((1.0)*cj7*sj9);
CheckValue<IkReal> x8106=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8102))+(((-1.0)*r10*sj12)))),-1);
if(!x8106.valid){
continue;
}
CheckValue<IkReal> x8107 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x8105))+((r22*x8103)))),IkReal(((((-1.0)*x8104*x8105))+((x8103*x8104))+(((-1.0)*r20*x8102*x8103))+((cj12*cj7*r20*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8107.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8106.value)))+(x8107.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8108=IKsin(j11);
IkReal x8109=IKcos(j11);
IkReal x8110=(cj12*r20);
IkReal x8111=((1.0)*sj7);
IkReal x8112=(cj7*sj9);
IkReal x8113=((1.0)*cj7*cj9);
IkReal x8114=(sj9*x8111);
IkReal x8115=(cj12*x8109);
IkReal x8116=((1.0)*x8108);
IkReal x8117=(cj12*x8108);
IkReal x8118=((1.0)*sj12*x8109);
IkReal x8119=(x8113+x8114);
evalcond[0]=(((r22*x8109))+(((-1.0)*r21*sj12*x8116))+((x8108*x8110)));
evalcond[1]=((((-1.0)*r21*x8118))+((x8109*x8110))+(((-1.0)*r22*x8116)));
evalcond[2]=(((r02*x8109))+((cj9*sj7))+((r00*x8117))+(((-1.0)*r01*sj12*x8116))+(((-1.0)*x8112)));
evalcond[3]=((((-1.0)*x8119))+(((-1.0)*r11*sj12*x8116))+((r10*x8117))+((r12*x8109)));
evalcond[4]=((((-1.0)*r11*x8118))+(((-1.0)*r12*x8116))+((r10*x8115))+(((-1.0)*cj9*x8111))+x8112);
evalcond[5]=((((-1.0)*x8119))+(((-1.0)*r02*x8116))+((r00*x8115))+(((-1.0)*r01*x8118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8120=(sj7*sj9);
IkReal x8121=((1.0)*r22);
IkReal x8122=(cj7*cj9);
IkReal x8123=(cj12*r20);
IkReal x8124=((1.0)*r21*sj12);
CheckValue<IkReal> x8125 = IKatan2WithCheck(IkReal(((((-1.0)*x8121*x8122))+(((-1.0)*x8120*x8121)))),IkReal((((x8122*x8123))+(((-1.0)*x8122*x8124))+((x8120*x8123))+(((-1.0)*x8120*x8124)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8125.valid){
continue;
}
CheckValue<IkReal> x8126=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x8126.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x8125.value)+(((1.5707963267949)*(x8126.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8127=IKsin(j11);
IkReal x8128=IKcos(j11);
IkReal x8129=(cj12*r20);
IkReal x8130=((1.0)*sj7);
IkReal x8131=(cj7*sj9);
IkReal x8132=((1.0)*cj7*cj9);
IkReal x8133=(sj9*x8130);
IkReal x8134=(cj12*x8128);
IkReal x8135=((1.0)*x8127);
IkReal x8136=(cj12*x8127);
IkReal x8137=((1.0)*sj12*x8128);
IkReal x8138=(x8132+x8133);
evalcond[0]=((((-1.0)*r21*sj12*x8135))+((r22*x8128))+((x8127*x8129)));
evalcond[1]=((((-1.0)*r22*x8135))+(((-1.0)*r21*x8137))+((x8128*x8129)));
evalcond[2]=(((r00*x8136))+(((-1.0)*r01*sj12*x8135))+((r02*x8128))+((cj9*sj7))+(((-1.0)*x8131)));
evalcond[3]=((((-1.0)*r11*sj12*x8135))+(((-1.0)*x8138))+((r12*x8128))+((r10*x8136)));
evalcond[4]=((((-1.0)*cj9*x8130))+(((-1.0)*r11*x8137))+(((-1.0)*r12*x8135))+x8131+((r10*x8134)));
evalcond[5]=((((-1.0)*r02*x8135))+((r00*x8134))+(((-1.0)*x8138))+(((-1.0)*r01*x8137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8139=((-1.0)*r10);
IkReal x8141 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8141)==0){
continue;
}
IkReal x8140=pow(x8141,-0.5);
CheckValue<IkReal> x8142 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8139),IKFAST_ATAN2_MAGTHRESH);
if(!x8142.valid){
continue;
}
IkReal gconst60=((-1.0)*(x8142.value));
IkReal gconst61=(r11*x8140);
IkReal gconst62=(x8139*x8140);
CheckValue<IkReal> x8143 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8143.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j12+(x8143.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8144=(cj9*sj8);
IkReal x8145=(gconst62*r20);
IkReal x8146=(gconst61*r21);
IkReal x8147=(sj8*sj9);
CheckValue<IkReal> x8148=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x8145*x8146))+(x8145*x8145)+(x8146*x8146))),-1);
if(!x8148.valid){
continue;
}
CheckValue<IkReal> x8149 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x8144))+((x8145*x8147))+(((-1.0)*x8146*x8147)))),IkReal(((((-1.0)*x8144*x8146))+((r22*x8147))+((x8144*x8145)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8149.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8148.value)))+(x8149.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8150=IKsin(j11);
IkReal x8151=IKcos(j11);
IkReal x8152=(cj7*sj9);
IkReal x8153=(cj9*sj7);
IkReal x8154=(gconst61*r11);
IkReal x8155=((1.0)*sj9);
IkReal x8156=(gconst61*r21);
IkReal x8157=(gconst61*r01);
IkReal x8158=((1.0)*cj9);
IkReal x8159=(gconst62*x8150);
IkReal x8160=(gconst62*x8151);
IkReal x8161=((1.0)*x8150);
IkReal x8162=((1.0)*x8151);
evalcond[0]=(((r20*x8159))+(((-1.0)*sj8*x8155))+((r22*x8151))+(((-1.0)*x8156*x8161)));
evalcond[1]=((((-1.0)*sj8*x8158))+(((-1.0)*x8156*x8162))+((r20*x8160))+(((-1.0)*r22*x8161)));
evalcond[2]=((((-1.0)*x8157*x8161))+((r00*x8159))+((cj8*x8152))+x8153+((r02*x8151)));
evalcond[3]=((((-1.0)*x8154*x8161))+((cj8*sj7*sj9))+(((-1.0)*cj7*x8158))+((r10*x8159))+((r12*x8151)));
evalcond[4]=((((-1.0)*x8154*x8162))+((r10*x8160))+(((-1.0)*r12*x8161))+((cj8*x8153))+x8152);
evalcond[5]=((((-1.0)*r02*x8161))+(((-1.0)*x8157*x8162))+((r00*x8160))+(((-1.0)*sj7*x8155))+((cj7*cj8*cj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8163=((-1.0)*r11);
IkReal x8165 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8165)==0){
continue;
}
IkReal x8164=pow(x8165,-0.5);
CheckValue<IkReal> x8166 = IKatan2WithCheck(IkReal(x8163),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8166.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x8166.value))));
IkReal gconst64=(x8163*x8164);
IkReal gconst65=((1.0)*r10*x8164);
CheckValue<IkReal> x8167 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8167.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12+(x8167.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8168=(gconst64*r21);
IkReal x8169=(sj8*sj9);
IkReal x8170=(gconst65*r20);
IkReal x8171=((1.0)*cj9*sj8);
CheckValue<IkReal> x8172 = IKatan2WithCheck(IkReal(((((-1.0)*x8168*x8169))+((x8169*x8170))+(((-1.0)*r22*x8171)))),IkReal((((r22*x8169))+(((-1.0)*x8168*x8171))+((cj9*sj8*x8170)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8172.valid){
continue;
}
CheckValue<IkReal> x8173=IKPowWithIntegerCheck(IKsign(((x8168*x8168)+(r22*r22)+(((-2.0)*x8168*x8170))+(x8170*x8170))),-1);
if(!x8173.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x8172.value)+(((1.5707963267949)*(x8173.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8174=IKsin(j11);
IkReal x8175=IKcos(j11);
IkReal x8176=(cj7*sj9);
IkReal x8177=(gconst65*r10);
IkReal x8178=(cj8*cj9);
IkReal x8179=((1.0)*sj9);
IkReal x8180=((1.0)*cj9);
IkReal x8181=((1.0)*x8174);
IkReal x8182=(gconst65*x8174);
IkReal x8183=(gconst65*x8175);
IkReal x8184=((1.0)*gconst64*x8175);
evalcond[0]=((((-1.0)*sj8*x8179))+((r22*x8175))+(((-1.0)*gconst64*r21*x8181))+((r20*x8182)));
evalcond[1]=((((-1.0)*r22*x8181))+(((-1.0)*sj8*x8180))+(((-1.0)*r21*x8184))+((r20*x8183)));
evalcond[2]=(((r02*x8175))+((r00*x8182))+((cj9*sj7))+(((-1.0)*gconst64*r01*x8181))+((cj8*x8176)));
evalcond[3]=(((x8174*x8177))+((cj8*sj7*sj9))+((r12*x8175))+(((-1.0)*gconst64*r11*x8181))+(((-1.0)*cj7*x8180)));
evalcond[4]=((((-1.0)*r12*x8181))+(((-1.0)*r11*x8184))+x8176+((sj7*x8178))+((x8175*x8177)));
evalcond[5]=((((-1.0)*r02*x8181))+((r00*x8183))+(((-1.0)*r01*x8184))+((cj7*x8178))+(((-1.0)*sj7*x8179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8186 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8186)==0){
continue;
}
IkReal x8185=pow(x8186,-0.5);
CheckValue<IkReal> x8187 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8187.valid){
continue;
}
IkReal gconst66=((-1.0)*(x8187.value));
IkReal gconst67=((-1.0)*r01*x8185);
IkReal gconst68=(r00*x8185);
CheckValue<IkReal> x8188 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8188.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8188.value)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8189=(cj9*sj8);
IkReal x8190=(gconst68*r20);
IkReal x8191=(gconst67*r21);
IkReal x8192=(sj8*sj9);
CheckValue<IkReal> x8193 = IKatan2WithCheck(IkReal((((x8190*x8192))+(((-1.0)*x8191*x8192))+(((-1.0)*r22*x8189)))),IkReal((((r22*x8192))+(((-1.0)*x8189*x8191))+((x8189*x8190)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8193.valid){
continue;
}
CheckValue<IkReal> x8194=IKPowWithIntegerCheck(IKsign(((x8191*x8191)+(r22*r22)+(((-2.0)*x8190*x8191))+(x8190*x8190))),-1);
if(!x8194.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x8193.value)+(((1.5707963267949)*(x8194.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8195=IKsin(j11);
IkReal x8196=IKcos(j11);
IkReal x8197=(cj7*sj9);
IkReal x8198=(cj8*cj9);
IkReal x8199=((1.0)*sj9);
IkReal x8200=(gconst67*r21);
IkReal x8201=((1.0)*cj9);
IkReal x8202=(gconst68*x8195);
IkReal x8203=(gconst68*x8196);
IkReal x8204=((1.0)*x8195);
IkReal x8205=((1.0)*gconst67*x8196);
evalcond[0]=(((r22*x8196))+(((-1.0)*x8200*x8204))+(((-1.0)*sj8*x8199))+((r20*x8202)));
evalcond[1]=((((-1.0)*r22*x8204))+(((-1.0)*sj8*x8201))+(((-1.0)*x8196*x8200))+((r20*x8203)));
evalcond[2]=(((cj8*x8197))+((cj9*sj7))+((r02*x8196))+((r00*x8202))+(((-1.0)*gconst67*r01*x8204)));
evalcond[3]=(((r12*x8196))+((cj8*sj7*sj9))+(((-1.0)*gconst67*r11*x8204))+((r10*x8202))+(((-1.0)*cj7*x8201)));
evalcond[4]=((((-1.0)*r12*x8204))+(((-1.0)*r11*x8205))+((sj7*x8198))+((r10*x8203))+x8197);
evalcond[5]=((((-1.0)*sj7*x8199))+((cj7*x8198))+(((-1.0)*r01*x8205))+(((-1.0)*r02*x8204))+((r00*x8203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8207 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8207)==0){
continue;
}
IkReal x8206=pow(x8207,-0.5);
CheckValue<IkReal> x8208 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8208.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x8208.value))));
IkReal gconst70=((1.0)*r01*x8206);
IkReal gconst71=((-1.0)*r00*x8206);
CheckValue<IkReal> x8209 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8209.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8209.value)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8210=(cj9*sj8);
IkReal x8211=(gconst71*r20);
IkReal x8212=(sj8*sj9);
IkReal x8213=(gconst70*r21);
CheckValue<IkReal> x8214 = IKatan2WithCheck(IkReal(((((-1.0)*x8212*x8213))+((x8211*x8212))+(((-1.0)*r22*x8210)))),IkReal((((r22*x8212))+((x8210*x8211))+(((-1.0)*x8210*x8213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8214.valid){
continue;
}
CheckValue<IkReal> x8215=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8211*x8213))+(x8211*x8211)+(r22*r22)+(x8213*x8213))),-1);
if(!x8215.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x8214.value)+(((1.5707963267949)*(x8215.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8216=IKsin(j11);
IkReal x8217=IKcos(j11);
IkReal x8218=(cj7*sj9);
IkReal x8219=(gconst70*r21);
IkReal x8220=(cj8*cj9);
IkReal x8221=((1.0)*sj9);
IkReal x8222=((1.0)*cj9);
IkReal x8223=((1.0)*x8216);
IkReal x8224=(gconst71*x8217);
IkReal x8225=(gconst71*x8216);
IkReal x8226=((1.0)*gconst70*x8217);
evalcond[0]=((((-1.0)*x8219*x8223))+((r20*x8225))+((r22*x8217))+(((-1.0)*sj8*x8221)));
evalcond[1]=(((r20*x8224))+(((-1.0)*x8217*x8219))+(((-1.0)*r22*x8223))+(((-1.0)*sj8*x8222)));
evalcond[2]=(((cj9*sj7))+((cj8*x8218))+((r00*x8225))+(((-1.0)*gconst70*r01*x8223))+((r02*x8217)));
evalcond[3]=((((-1.0)*cj7*x8222))+((cj8*sj7*sj9))+((r12*x8217))+((r10*x8225))+(((-1.0)*gconst70*r11*x8223)));
evalcond[4]=(((sj7*x8220))+(((-1.0)*r12*x8223))+((r10*x8224))+(((-1.0)*r11*x8226))+x8218);
evalcond[5]=((((-1.0)*sj7*x8221))+((cj7*x8220))+(((-1.0)*r02*x8223))+((r00*x8224))+(((-1.0)*r01*x8226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x8227=((-1.0)*px);
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8227);
rxp1_1=(px*r21);
rxp1_2=(r11*x8227);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=r02;
j11eval[1]=IKsign(r02);
j11eval[2]=((IKabs((cj9*sj7)))+(IKabs((sj7*sj9))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x8228=((-1.0)*px);
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8228);
rxp1_1=(px*r21);
rxp1_2=(r11*x8228);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x8229=(cj8*sj7);
IkReal x8230=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[0]=x8230;
j11eval[1]=((IKabs((sj9*x8229)))+(IKabs((cj9*x8229))));
j11eval[2]=IKsign(x8230);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x8231=((-1.0)*px);
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8231);
rxp1_1=(px*r21);
rxp1_2=(r11*x8231);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[1]=r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8232=((-1.0)*sj7);
CheckValue<IkReal> x8233=IKPowWithIntegerCheck(((((-1.0)*r11*sj12))+((cj12*r10))),-1);
if(!x8233.valid){
continue;
}
CheckValue<IkReal> x8234=IKPowWithIntegerCheck(r02,-1);
if(!x8234.valid){
continue;
}
if( IKabs((cj8*sj9*x8232*(x8233.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj9*x8232*(x8234.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj8*sj9*x8232*(x8233.value)))+IKsqr((cj9*x8232*(x8234.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((cj8*sj9*x8232*(x8233.value)), (cj9*x8232*(x8234.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8235=IKsin(j11);
IkReal x8236=IKcos(j11);
IkReal x8237=(sj7*sj9);
IkReal x8238=(cj9*sj7);
IkReal x8239=(cj12*x8235);
IkReal x8240=(cj12*x8236);
IkReal x8241=((1.0)*x8235);
IkReal x8242=((1.0)*sj12*x8236);
evalcond[0]=(((r02*x8236))+x8238);
evalcond[1]=((((-1.0)*x8237))+(((-1.0)*r02*x8241)));
evalcond[2]=(((r20*x8239))+(((-1.0)*r21*sj12*x8241)));
evalcond[3]=(((r20*x8240))+(((-1.0)*r21*x8242)));
evalcond[4]=((((-1.0)*r11*sj12*x8241))+((cj8*x8237))+((r10*x8239)));
evalcond[5]=(((r10*x8240))+((cj8*x8238))+(((-1.0)*r11*x8242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8243=((-1.0)*cj8*sj7);
CheckValue<IkReal> x8244=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj12))+((cj12*r10)))),-1);
if(!x8244.valid){
continue;
}
CheckValue<IkReal> x8245 = IKatan2WithCheck(IkReal((sj9*x8243)),IkReal((cj9*x8243)),IKFAST_ATAN2_MAGTHRESH);
if(!x8245.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8244.value)))+(x8245.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8246=IKsin(j11);
IkReal x8247=IKcos(j11);
IkReal x8248=(sj7*sj9);
IkReal x8249=(cj9*sj7);
IkReal x8250=(cj12*x8246);
IkReal x8251=(cj12*x8247);
IkReal x8252=((1.0)*x8246);
IkReal x8253=((1.0)*sj12*x8247);
evalcond[0]=(((r02*x8247))+x8249);
evalcond[1]=((((-1.0)*r02*x8252))+(((-1.0)*x8248)));
evalcond[2]=((((-1.0)*r21*sj12*x8252))+((r20*x8250)));
evalcond[3]=((((-1.0)*r21*x8253))+((r20*x8251)));
evalcond[4]=(((r10*x8250))+((cj8*x8248))+(((-1.0)*r11*sj12*x8252)));
evalcond[5]=(((r10*x8251))+(((-1.0)*r11*x8253))+((cj8*x8249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8254=((-1.0)*sj7);
CheckValue<IkReal> x8255=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x8255.valid){
continue;
}
CheckValue<IkReal> x8256 = IKatan2WithCheck(IkReal((sj9*x8254)),IkReal((cj9*x8254)),IKFAST_ATAN2_MAGTHRESH);
if(!x8256.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8255.value)))+(x8256.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8257=IKsin(j11);
IkReal x8258=IKcos(j11);
IkReal x8259=(sj7*sj9);
IkReal x8260=(cj9*sj7);
IkReal x8261=(cj12*x8257);
IkReal x8262=(cj12*x8258);
IkReal x8263=((1.0)*x8257);
IkReal x8264=((1.0)*sj12*x8258);
evalcond[0]=(((r02*x8258))+x8260);
evalcond[1]=((((-1.0)*x8259))+(((-1.0)*r02*x8263)));
evalcond[2]=(((r20*x8261))+(((-1.0)*r21*sj12*x8263)));
evalcond[3]=((((-1.0)*r21*x8264))+((r20*x8262)));
evalcond[4]=(((cj8*x8259))+(((-1.0)*r11*sj12*x8263))+((r10*x8261)));
evalcond[5]=((((-1.0)*r11*x8264))+((r10*x8262))+((cj8*x8260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8265=cj12*cj12;
IkReal x8266=r21*r21;
IkReal x8267=(r22*sj8);
IkReal x8268=((1.0)*cj9);
IkReal x8269=(cj12*r20*sj8);
IkReal x8270=(r21*sj12*sj8);
CheckValue<IkReal> x8271 = IKatan2WithCheck(IkReal(((((-1.0)*x8267*x8268))+((sj9*x8269))+(((-1.0)*sj9*x8270)))),IkReal((((sj9*x8267))+(((-1.0)*x8268*x8270))+((cj9*x8269)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8271.valid){
continue;
}
CheckValue<IkReal> x8272=IKPowWithIntegerCheck(IKsign((((x8265*(r20*r20)))+(r22*r22)+(((-1.0)*x8265*x8266))+(((-2.0)*cj12*r20*r21*sj12))+x8266)),-1);
if(!x8272.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x8271.value)+(((1.5707963267949)*(x8272.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8273=IKsin(j11);
IkReal x8274=IKcos(j11);
IkReal x8275=(cj7*sj9);
IkReal x8276=(cj12*r20);
IkReal x8277=(cj8*cj9);
IkReal x8278=((1.0)*sj9);
IkReal x8279=((1.0)*cj9);
IkReal x8280=(cj12*x8274);
IkReal x8281=((1.0)*x8273);
IkReal x8282=(cj12*x8273);
IkReal x8283=((1.0)*sj12*x8274);
evalcond[0]=((((-1.0)*sj8*x8278))+((r22*x8274))+((x8273*x8276))+(((-1.0)*r21*sj12*x8281)));
evalcond[1]=((((-1.0)*r21*x8283))+(((-1.0)*sj8*x8279))+(((-1.0)*r22*x8281))+((x8274*x8276)));
evalcond[2]=(((r00*x8282))+((r02*x8274))+((cj9*sj7))+((cj8*x8275))+(((-1.0)*r01*sj12*x8281)));
evalcond[3]=(((r10*x8282))+((cj8*sj7*sj9))+(((-1.0)*cj7*x8279))+(((-1.0)*r11*sj12*x8281))+((r12*x8274)));
evalcond[4]=((((-1.0)*r12*x8281))+((r10*x8280))+(((-1.0)*r11*x8283))+((sj7*x8277))+x8275);
evalcond[5]=((((-1.0)*r02*x8281))+((r00*x8280))+(((-1.0)*sj7*x8278))+((cj7*x8277))+(((-1.0)*r01*x8283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8284=(sj8*sj9);
IkReal x8285=((1.0)*cj12);
IkReal x8286=(cj9*sj7);
IkReal x8287=(r21*sj12);
IkReal x8288=(cj7*cj8*sj9);
CheckValue<IkReal> x8289 = IKatan2WithCheck(IkReal((((r02*x8284))+((r22*x8288))+((r22*x8286)))),IkReal((((r01*sj12*x8284))+(((-1.0)*r20*x8285*x8286))+(((-1.0)*r20*x8285*x8288))+((x8286*x8287))+((x8287*x8288))+(((-1.0)*r00*x8284*x8285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8289.valid){
continue;
}
CheckValue<IkReal> x8290=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8285))+(((-1.0)*r10*sj12)))),-1);
if(!x8290.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x8289.value)+(((1.5707963267949)*(x8290.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8291=IKsin(j11);
IkReal x8292=IKcos(j11);
IkReal x8293=(cj7*sj9);
IkReal x8294=(cj12*r20);
IkReal x8295=(cj8*cj9);
IkReal x8296=((1.0)*sj9);
IkReal x8297=((1.0)*cj9);
IkReal x8298=(cj12*x8292);
IkReal x8299=((1.0)*x8291);
IkReal x8300=(cj12*x8291);
IkReal x8301=((1.0)*sj12*x8292);
evalcond[0]=((((-1.0)*r21*sj12*x8299))+((x8291*x8294))+(((-1.0)*sj8*x8296))+((r22*x8292)));
evalcond[1]=((((-1.0)*r21*x8301))+(((-1.0)*r22*x8299))+(((-1.0)*sj8*x8297))+((x8292*x8294)));
evalcond[2]=(((cj8*x8293))+((r00*x8300))+((cj9*sj7))+((r02*x8292))+(((-1.0)*r01*sj12*x8299)));
evalcond[3]=(((cj8*sj7*sj9))+((r10*x8300))+(((-1.0)*cj7*x8297))+((r12*x8292))+(((-1.0)*r11*sj12*x8299)));
evalcond[4]=((((-1.0)*r12*x8299))+((r10*x8298))+(((-1.0)*r11*x8301))+((sj7*x8295))+x8293);
evalcond[5]=(((r00*x8298))+(((-1.0)*sj7*x8296))+(((-1.0)*r01*x8301))+((cj7*x8295))+(((-1.0)*r02*x8299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8302=(r21*sj12);
IkReal x8303=((1.0)*cj12);
IkReal x8304=(sj8*sj9);
IkReal x8305=(cj8*sj7*sj9);
IkReal x8306=((1.0)*cj7*cj9);
CheckValue<IkReal> x8307 = IKatan2WithCheck(IkReal((((r22*x8305))+(((-1.0)*r22*x8306))+((r12*x8304)))),IkReal((((cj12*cj7*cj9*r20))+((x8302*x8305))+(((-1.0)*r10*x8303*x8304))+(((-1.0)*r20*x8303*x8305))+(((-1.0)*x8302*x8306))+((r11*sj12*x8304)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8307.valid){
continue;
}
CheckValue<IkReal> x8308=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x8308.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x8307.value)+(((1.5707963267949)*(x8308.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8309=IKsin(j11);
IkReal x8310=IKcos(j11);
IkReal x8311=(cj7*sj9);
IkReal x8312=(cj12*r20);
IkReal x8313=(cj8*cj9);
IkReal x8314=((1.0)*sj9);
IkReal x8315=((1.0)*cj9);
IkReal x8316=(cj12*x8310);
IkReal x8317=((1.0)*x8309);
IkReal x8318=(cj12*x8309);
IkReal x8319=((1.0)*sj12*x8310);
evalcond[0]=((((-1.0)*r21*sj12*x8317))+((r22*x8310))+((x8309*x8312))+(((-1.0)*sj8*x8314)));
evalcond[1]=((((-1.0)*r21*x8319))+(((-1.0)*r22*x8317))+((x8310*x8312))+(((-1.0)*sj8*x8315)));
evalcond[2]=(((r00*x8318))+((cj9*sj7))+(((-1.0)*r01*sj12*x8317))+((r02*x8310))+((cj8*x8311)));
evalcond[3]=(((cj8*sj7*sj9))+((r10*x8318))+(((-1.0)*r11*sj12*x8317))+(((-1.0)*cj7*x8315))+((r12*x8310)));
evalcond[4]=(x8311+((r10*x8316))+((sj7*x8313))+(((-1.0)*r11*x8319))+(((-1.0)*r12*x8317)));
evalcond[5]=(((r00*x8316))+((cj7*x8313))+(((-1.0)*r02*x8317))+(((-1.0)*sj7*x8314))+(((-1.0)*r01*x8319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8320=cj12*cj12;
IkReal x8321=r21*r21;
IkReal x8322=(r22*sj8);
IkReal x8323=((1.0)*cj9);
IkReal x8324=(cj12*r20*sj8);
IkReal x8325=(r21*sj12*sj8);
CheckValue<IkReal> x8326 = IKatan2WithCheck(IkReal(((((-1.0)*x8322*x8323))+(((-1.0)*sj9*x8325))+((sj9*x8324)))),IkReal((((cj9*x8324))+(((-1.0)*x8323*x8325))+((sj9*x8322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8326.valid){
continue;
}
CheckValue<IkReal> x8327=IKPowWithIntegerCheck(IKsign((x8321+(r22*r22)+(((-2.0)*cj12*r20*r21*sj12))+((x8320*(r20*r20)))+(((-1.0)*x8320*x8321)))),-1);
if(!x8327.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x8326.value)+(((1.5707963267949)*(x8327.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x8328=IKsin(j11);
IkReal x8329=IKcos(j11);
IkReal x8330=(cj12*r20);
IkReal x8331=((1.0)*sj8);
IkReal x8332=((1.0)*r21*sj12);
evalcond[0]=(((x8328*x8330))+((r22*x8329))+(((-1.0)*sj9*x8331))+(((-1.0)*x8328*x8332)));
evalcond[1]=(((x8329*x8330))+(((-1.0)*cj9*x8331))+(((-1.0)*x8329*x8332))+(((-1.0)*r22*x8328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j7eval[0]=sj8;
j7eval[1]=IKsign(sj8);
j7eval[2]=((IKabs((((r10*sj12))+((cj12*r11)))))+(IKabs((((r00*sj12))+((cj12*r01))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j7eval[0]=cj9;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j7eval[0]=cj8;
j7eval[1]=sj8;
j7eval[2]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs((((r10*sj12))+((cj12*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj12))+((cj12*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj12))+((cj12*r11))))+IKsqr((((r00*sj12))+((cj12*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((r10*sj12))+((cj12*r11))), (((r00*sj12))+((cj12*r01))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x8333=IKsin(j7);
IkReal x8334=IKcos(j7);
IkReal x8335=((1.0)*sj12);
IkReal x8336=(cj11*cj12);
IkReal x8337=((0.4)*sj12);
IkReal x8338=((1.0)*sj11);
IkReal x8339=(cj12*sj11);
IkReal x8340=(cj12*r01);
IkReal x8341=(cj12*r11);
IkReal x8342=(sj9*x8334);
IkReal x8343=(sj9*x8333);
evalcond[0]=(x8334+(((-1.0)*r00*x8335))+(((-1.0)*x8340)));
evalcond[1]=(x8333+(((-1.0)*r10*x8335))+(((-1.0)*x8341)));
evalcond[2]=(((cj9*x8333))+((r00*x8339))+((cj11*r02))+(((-1.0)*r01*sj11*x8335)));
evalcond[3]=((((-1.0)*cj9*x8334))+((r10*x8339))+((cj11*r12))+(((-1.0)*r11*sj11*x8335)));
evalcond[4]=(x8342+(((-1.0)*r12*x8338))+((r10*x8336))+(((-1.0)*cj11*r11*x8335)));
evalcond[5]=(((r00*x8336))+(((-1.0)*r02*x8338))+(((-1.0)*x8343))+(((-1.0)*cj11*r01*x8335)));
evalcond[6]=((((0.41956376)*x8334))+(((-1.0)*r00*x8337))+(((-1.0)*px))+(((-0.00043624)*x8343))+(((-0.4)*x8340)));
evalcond[7]=((((0.41956376)*x8333))+(((-1.0)*r10*x8337))+(((-1.0)*py))+(((-0.4)*x8341))+(((0.00043624)*x8342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x8344=((1.0)*cj12);
IkReal x8345=((1.0)*sj12);
if( IKabs(((((-1.0)*r11*x8344))+(((-1.0)*r10*x8345)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x8345))+(((-1.0)*r01*x8344)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x8344))+(((-1.0)*r10*x8345))))+IKsqr(((((-1.0)*r00*x8345))+(((-1.0)*r01*x8344))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*r11*x8344))+(((-1.0)*r10*x8345))), ((((-1.0)*r00*x8345))+(((-1.0)*r01*x8344))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x8346=IKsin(j7);
IkReal x8347=IKcos(j7);
IkReal x8348=((1.0)*sj12);
IkReal x8349=(cj11*cj12);
IkReal x8350=((0.4)*sj12);
IkReal x8351=((1.0)*sj11);
IkReal x8352=(cj12*sj11);
IkReal x8353=(cj12*r01);
IkReal x8354=(cj12*r11);
IkReal x8355=((1.0)*x8346);
IkReal x8356=(sj9*x8347);
IkReal x8357=((1.0)*x8347);
evalcond[0]=((((-1.0)*x8357))+(((-1.0)*r00*x8348))+(((-1.0)*x8353)));
evalcond[1]=((((-1.0)*x8355))+(((-1.0)*x8354))+(((-1.0)*r10*x8348)));
evalcond[2]=(((cj11*r02))+((r00*x8352))+((cj9*x8346))+(((-1.0)*r01*sj11*x8348)));
evalcond[3]=(((r10*x8352))+((cj11*r12))+(((-1.0)*r11*sj11*x8348))+(((-1.0)*cj9*x8357)));
evalcond[4]=(x8356+(((-1.0)*r12*x8351))+(((-1.0)*cj11*r11*x8348))+((r10*x8349)));
evalcond[5]=((((-1.0)*r02*x8351))+(((-1.0)*cj11*r01*x8348))+(((-1.0)*sj9*x8355))+((r00*x8349)));
evalcond[6]=((((-0.4)*x8353))+(((-0.42043624)*x8347))+(((-1.0)*r00*x8350))+(((-1.0)*px))+(((-0.00043624)*sj9*x8346)));
evalcond[7]=((((-0.4)*x8354))+(((-0.42043624)*x8346))+(((0.00043624)*x8356))+(((-1.0)*py))+(((-1.0)*r10*x8350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=1.0;
j8=0;
IkReal x8358=((68162500000.0)*sj9);
IkReal x8359=((68162500000.0)*px);
IkReal x8360=((68162500000.0)*py);
j7eval[0]=((1.0)+(((-1.0)*cj9)));
j7eval[1]=IKsign(((59470418.0)+(((-59470418.0)*cj9))));
j7eval[2]=((IKabs((((cj9*x8360))+(((-1.0)*x8360))+(((-1.0)*px*x8358)))))+(IKabs(((((-1.0)*x8359))+((py*x8358))+((cj9*x8359))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=1.0;
j8=0;
j7eval[0]=((-1.0)+cj9);
j7eval[1]=IKsign(((-5453.0)+(((5453.0)*cj9))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=1.0;
j8=0;
j7eval[0]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x8361=((5453.0)*cj9);
IkReal x8362=(cj11*r12);
IkReal x8363=(r11*sj11*sj12);
IkReal x8364=(cj12*r10*sj11);
CheckValue<IkReal> x8365=IKPowWithIntegerCheck(sj9,-1);
if(!x8365.valid){
continue;
}
if( IKabs(((0.000183385292499542)*(x8365.value)*(((((5453.0)*x8363))+(((-1.0)*x8361*x8363))+(((-12500000.0)*cj9*px))+((x8361*x8364))+((x8361*x8362))+(((-5453.0)*x8364))+(((-5453.0)*x8362)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x8362+x8364+(((-1.0)*x8363))+(((-2292.31615624427)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.000183385292499542)*(x8365.value)*(((((5453.0)*x8363))+(((-1.0)*x8361*x8363))+(((-12500000.0)*cj9*px))+((x8361*x8364))+((x8361*x8362))+(((-5453.0)*x8364))+(((-5453.0)*x8362))))))+IKsqr((x8362+x8364+(((-1.0)*x8363))+(((-2292.31615624427)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((0.000183385292499542)*(x8365.value)*(((((5453.0)*x8363))+(((-1.0)*x8361*x8363))+(((-12500000.0)*cj9*px))+((x8361*x8364))+((x8361*x8362))+(((-5453.0)*x8364))+(((-5453.0)*x8362))))), (x8362+x8364+(((-1.0)*x8363))+(((-2292.31615624427)*px))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x8366=IKcos(j7);
IkReal x8367=IKsin(j7);
IkReal x8368=((1.0)*sj11);
IkReal x8369=(r11*sj12);
IkReal x8370=(cj11*cj12);
IkReal x8371=(cj12*sj11);
IkReal x8372=((1.0)*cj11);
IkReal x8373=(r01*sj12);
IkReal x8374=(sj9*x8366);
IkReal x8375=(cj9*x8367);
IkReal x8376=(cj9*x8366);
IkReal x8377=((0.00043624)*x8366);
IkReal x8378=((0.00043624)*x8367);
IkReal x8379=(sj9*x8367);
IkReal x8380=(x8374+x8375);
evalcond[0]=((((-1.0)*px))+(((-1.0)*x8377))+(((0.00043624)*x8376))+(((-1.0)*sj9*x8378)));
evalcond[1]=((((-1.0)*py))+(((-1.0)*x8378))+(((0.00043624)*x8374))+(((0.00043624)*x8375)));
evalcond[2]=(x8380+(((-1.0)*x8368*x8373))+((r00*x8371))+((cj11*r02)));
evalcond[3]=(x8379+((r10*x8371))+(((-1.0)*x8368*x8369))+((cj11*r12))+(((-1.0)*x8376)));
evalcond[4]=(x8380+((r10*x8370))+(((-1.0)*r12*x8368))+(((-1.0)*x8369*x8372)));
evalcond[5]=(x8376+((r00*x8370))+(((-1.0)*x8372*x8373))+(((-1.0)*r02*x8368))+(((-1.0)*x8379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x8381=((12500000.0)*px);
IkReal x8382=((5453.0)*sj11);
IkReal x8383=(cj12*r00);
IkReal x8384=(r01*sj12);
IkReal x8385=((5453.0)*cj11*r02);
CheckValue<IkReal> x8386=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((5453.0)*cj9)))),-1);
if(!x8386.valid){
continue;
}
CheckValue<IkReal> x8387 = IKatan2WithCheck(IkReal(((((-1.0)*x8382*x8383))+(((-1.0)*x8385))+((cj9*x8385))+((x8382*x8384))+((cj9*x8382*x8383))+((sj9*x8381))+(((-1.0)*cj9*x8382*x8384)))),IkReal((((sj9*x8382*x8383))+(((-1.0)*sj9*x8382*x8384))+(((-1.0)*cj9*x8381))+((sj9*x8385)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8387.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8386.value)))+(x8387.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x8388=IKcos(j7);
IkReal x8389=IKsin(j7);
IkReal x8390=((1.0)*sj11);
IkReal x8391=(r11*sj12);
IkReal x8392=(cj11*cj12);
IkReal x8393=(cj12*sj11);
IkReal x8394=((1.0)*cj11);
IkReal x8395=(r01*sj12);
IkReal x8396=(sj9*x8388);
IkReal x8397=(cj9*x8389);
IkReal x8398=(cj9*x8388);
IkReal x8399=((0.00043624)*x8388);
IkReal x8400=((0.00043624)*x8389);
IkReal x8401=(sj9*x8389);
IkReal x8402=(x8396+x8397);
evalcond[0]=((((-1.0)*x8399))+(((-1.0)*px))+(((-1.0)*sj9*x8400))+(((0.00043624)*x8398)));
evalcond[1]=((((-1.0)*x8400))+(((-1.0)*py))+(((0.00043624)*x8397))+(((0.00043624)*x8396)));
evalcond[2]=((((-1.0)*x8390*x8395))+x8402+((cj11*r02))+((r00*x8393)));
evalcond[3]=((((-1.0)*x8390*x8391))+x8401+(((-1.0)*x8398))+((cj11*r12))+((r10*x8393)));
evalcond[4]=(x8402+(((-1.0)*x8391*x8394))+((r10*x8392))+(((-1.0)*r12*x8390)));
evalcond[5]=(x8398+(((-1.0)*x8401))+(((-1.0)*r02*x8390))+(((-1.0)*x8394*x8395))+((r00*x8392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x8403=((68162500000.0)*py);
IkReal x8404=((68162500000.0)*px);
CheckValue<IkReal> x8405 = IKatan2WithCheck(IkReal(((((-1.0)*x8403))+((cj9*x8403))+(((-1.0)*sj9*x8404)))),IkReal(((((-1.0)*x8404))+((cj9*x8404))+((sj9*x8403)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8405.valid){
continue;
}
CheckValue<IkReal> x8406=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((-59470418.0)*cj9)))),-1);
if(!x8406.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x8405.value)+(((1.5707963267949)*(x8406.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x8407=IKcos(j7);
IkReal x8408=IKsin(j7);
IkReal x8409=((1.0)*sj11);
IkReal x8410=(r11*sj12);
IkReal x8411=(cj11*cj12);
IkReal x8412=(cj12*sj11);
IkReal x8413=((1.0)*cj11);
IkReal x8414=(r01*sj12);
IkReal x8415=(sj9*x8407);
IkReal x8416=(cj9*x8408);
IkReal x8417=(cj9*x8407);
IkReal x8418=((0.00043624)*x8407);
IkReal x8419=((0.00043624)*x8408);
IkReal x8420=(sj9*x8408);
IkReal x8421=(x8416+x8415);
evalcond[0]=((((-1.0)*px))+(((-1.0)*x8418))+(((0.00043624)*x8417))+(((-1.0)*sj9*x8419)));
evalcond[1]=((((-1.0)*py))+(((-1.0)*x8419))+(((0.00043624)*x8416))+(((0.00043624)*x8415)));
evalcond[2]=(x8421+(((-1.0)*x8409*x8414))+((r00*x8412))+((cj11*r02)));
evalcond[3]=((((-1.0)*x8417))+x8420+(((-1.0)*x8409*x8410))+((cj11*r12))+((r10*x8412)));
evalcond[4]=(x8421+(((-1.0)*x8410*x8413))+((r10*x8411))+(((-1.0)*r12*x8409)));
evalcond[5]=(x8417+(((-1.0)*r02*x8409))+((r00*x8411))+(((-1.0)*x8413*x8414))+(((-1.0)*x8420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x8422=((68162500000.0)*cj9);
IkReal x8423=((68162500000.0)*px);
IkReal x8424=((68162500000.0)*py);
j7eval[0]=((1.0)+cj9);
j7eval[1]=IKsign(((59470418.0)+(((59470418.0)*cj9))));
j7eval[2]=((IKabs(((((-1.0)*x8424))+(((-1.0)*py*x8422))+(((-1.0)*sj9*x8423)))))+(IKabs((((sj9*x8424))+(((-1.0)*px*x8422))+(((-1.0)*x8423))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
j7eval[0]=((-1.0)+(((-1.0)*cj9)));
j7eval[1]=IKsign(((-5453.0)+(((-5453.0)*cj9))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
j7eval[0]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x8425=((5453.0)*cj9);
IkReal x8426=(cj11*r02);
IkReal x8427=(cj12*r00*sj11);
IkReal x8428=(r01*sj11*sj12);
CheckValue<IkReal> x8429=IKPowWithIntegerCheck(sj9,-1);
if(!x8429.valid){
continue;
}
if( IKabs((x8426+x8427+(((-2292.31615624427)*py))+(((-1.0)*x8428)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.000183385292499542)*(x8429.value)*(((((-5453.0)*x8427))+(((-5453.0)*x8426))+((x8425*x8428))+(((5453.0)*x8428))+(((12500000.0)*cj9*py))+(((-1.0)*x8425*x8427))+(((-1.0)*x8425*x8426)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x8426+x8427+(((-2292.31615624427)*py))+(((-1.0)*x8428))))+IKsqr(((-0.000183385292499542)*(x8429.value)*(((((-5453.0)*x8427))+(((-5453.0)*x8426))+((x8425*x8428))+(((5453.0)*x8428))+(((12500000.0)*cj9*py))+(((-1.0)*x8425*x8427))+(((-1.0)*x8425*x8426))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x8426+x8427+(((-2292.31615624427)*py))+(((-1.0)*x8428))), ((-0.000183385292499542)*(x8429.value)*(((((-5453.0)*x8427))+(((-5453.0)*x8426))+((x8425*x8428))+(((5453.0)*x8428))+(((12500000.0)*cj9*py))+(((-1.0)*x8425*x8427))+(((-1.0)*x8425*x8426))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x8430=IKcos(j7);
IkReal x8431=IKsin(j7);
IkReal x8432=((1.0)*sj11);
IkReal x8433=(r11*sj12);
IkReal x8434=(cj11*cj12);
IkReal x8435=((1.0)*cj9);
IkReal x8436=(cj12*sj11);
IkReal x8437=((1.0)*cj11);
IkReal x8438=(r01*sj12);
IkReal x8439=((0.00043624)*x8430);
IkReal x8440=((0.00043624)*x8431);
IkReal x8441=(sj9*x8430);
IkReal x8442=(x8430*x8435);
IkReal x8443=((1.0)*sj9*x8431);
IkReal x8444=(x8442+x8443);
evalcond[0]=((((-1.0)*x8439))+(((-1.0)*sj9*x8440))+(((-1.0)*cj9*x8439))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*cj9*x8440))+(((-1.0)*py))+(((-1.0)*x8440))+((sj9*x8439)));
evalcond[2]=((((-1.0)*x8432*x8438))+(((-1.0)*x8441))+((cj9*x8431))+((cj11*r02))+((r00*x8436)));
evalcond[3]=((((-1.0)*x8432*x8433))+((cj11*r12))+(((-1.0)*x8444))+((r10*x8436)));
evalcond[4]=(x8441+(((-1.0)*r12*x8432))+(((-1.0)*x8431*x8435))+((r10*x8434))+(((-1.0)*x8433*x8437)));
evalcond[5]=((((-1.0)*r02*x8432))+(((-1.0)*x8437*x8438))+(((-1.0)*x8444))+((r00*x8434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x8445=((12500000.0)*px);
IkReal x8446=((5453.0)*sj11);
IkReal x8447=(cj12*r00);
IkReal x8448=(r01*sj12);
IkReal x8449=((5453.0)*cj11*r02);
CheckValue<IkReal> x8450=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((-5453.0)*cj9)))),-1);
if(!x8450.valid){
continue;
}
CheckValue<IkReal> x8451 = IKatan2WithCheck(IkReal((((sj9*x8445))+x8449+((cj9*x8446*x8447))+((cj9*x8449))+((x8446*x8447))+(((-1.0)*x8446*x8448))+(((-1.0)*cj9*x8446*x8448)))),IkReal(((((-1.0)*sj9*x8446*x8447))+((sj9*x8446*x8448))+(((-1.0)*sj9*x8449))+((cj9*x8445)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8451.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8450.value)))+(x8451.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x8452=IKcos(j7);
IkReal x8453=IKsin(j7);
IkReal x8454=((1.0)*sj11);
IkReal x8455=(r11*sj12);
IkReal x8456=(cj11*cj12);
IkReal x8457=((1.0)*cj9);
IkReal x8458=(cj12*sj11);
IkReal x8459=((1.0)*cj11);
IkReal x8460=(r01*sj12);
IkReal x8461=((0.00043624)*x8452);
IkReal x8462=((0.00043624)*x8453);
IkReal x8463=(sj9*x8452);
IkReal x8464=(x8452*x8457);
IkReal x8465=((1.0)*sj9*x8453);
IkReal x8466=(x8464+x8465);
evalcond[0]=((((-1.0)*x8461))+(((-1.0)*cj9*x8461))+(((-1.0)*sj9*x8462))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*x8462))+((sj9*x8461))+(((-1.0)*cj9*x8462))+(((-1.0)*py)));
evalcond[2]=((((-1.0)*x8463))+(((-1.0)*x8454*x8460))+((cj9*x8453))+((cj11*r02))+((r00*x8458)));
evalcond[3]=((((-1.0)*x8466))+(((-1.0)*x8454*x8455))+((cj11*r12))+((r10*x8458)));
evalcond[4]=(x8463+(((-1.0)*x8453*x8457))+(((-1.0)*r12*x8454))+((r10*x8456))+(((-1.0)*x8455*x8459)));
evalcond[5]=((((-1.0)*x8459*x8460))+(((-1.0)*x8466))+(((-1.0)*r02*x8454))+((r00*x8456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x8467=((68162500000.0)*cj9);
IkReal x8468=((68162500000.0)*px);
IkReal x8469=((68162500000.0)*py);
CheckValue<IkReal> x8470=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((59470418.0)*cj9)))),-1);
if(!x8470.valid){
continue;
}
CheckValue<IkReal> x8471 = IKatan2WithCheck(IkReal(((((-1.0)*py*x8467))+(((-1.0)*x8469))+(((-1.0)*sj9*x8468)))),IkReal(((((-1.0)*x8468))+((sj9*x8469))+(((-1.0)*px*x8467)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8471.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8470.value)))+(x8471.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x8472=IKcos(j7);
IkReal x8473=IKsin(j7);
IkReal x8474=((1.0)*sj11);
IkReal x8475=(r11*sj12);
IkReal x8476=(cj11*cj12);
IkReal x8477=((1.0)*cj9);
IkReal x8478=(cj12*sj11);
IkReal x8479=((1.0)*cj11);
IkReal x8480=(r01*sj12);
IkReal x8481=((0.00043624)*x8472);
IkReal x8482=((0.00043624)*x8473);
IkReal x8483=(sj9*x8472);
IkReal x8484=(x8472*x8477);
IkReal x8485=((1.0)*sj9*x8473);
IkReal x8486=(x8484+x8485);
evalcond[0]=((((-1.0)*x8481))+(((-1.0)*sj9*x8482))+(((-1.0)*px))+(((-1.0)*cj9*x8481)));
evalcond[1]=((((-1.0)*x8482))+(((-1.0)*py))+(((-1.0)*cj9*x8482))+((sj9*x8481)));
evalcond[2]=((((-1.0)*x8474*x8480))+((r00*x8478))+((cj11*r02))+(((-1.0)*x8483))+((cj9*x8473)));
evalcond[3]=((((-1.0)*x8486))+((cj11*r12))+((r10*x8478))+(((-1.0)*x8474*x8475)));
evalcond[4]=(x8483+(((-1.0)*x8473*x8477))+((r10*x8476))+(((-1.0)*r12*x8474))+(((-1.0)*x8475*x8479)));
evalcond[5]=((((-1.0)*x8486))+((r00*x8476))+(((-1.0)*r02*x8474))+(((-1.0)*x8479*x8480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj9=0;
cj9=1.0;
j9=0;
j7eval[0]=sj8;
j7eval[1]=IKsign(sj8);
j7eval[2]=((IKabs((((r10*sj12))+((cj12*r11)))))+(IKabs((((r00*sj12))+((cj12*r01))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj9=0;
cj9=1.0;
j9=0;
j7eval[0]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj9=0;
cj9=1.0;
j9=0;
j7eval[0]=cj8;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x8487=IKPowWithIntegerCheck(cj8,-1);
if(!x8487.valid){
continue;
}
CheckValue<IkReal> x8488=IKPowWithIntegerCheck(sj8,-1);
if(!x8488.valid){
continue;
}
if( IKabs(((x8487.value)*(((((-1.0)*cj11*cj12*r10))+((r12*sj11))+((cj11*r11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8488.value)*((((r00*sj12))+((cj12*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8487.value)*(((((-1.0)*cj11*cj12*r10))+((r12*sj11))+((cj11*r11*sj12))))))+IKsqr(((x8488.value)*((((r00*sj12))+((cj12*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x8487.value)*(((((-1.0)*cj11*cj12*r10))+((r12*sj11))+((cj11*r11*sj12))))), ((x8488.value)*((((r00*sj12))+((cj12*r01))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x8489=IKsin(j7);
IkReal x8490=IKcos(j7);
IkReal x8491=((1.0)*sj12);
IkReal x8492=(cj11*cj12);
IkReal x8493=((0.4)*sj12);
IkReal x8494=((1.0)*sj11);
IkReal x8495=(cj12*sj11);
IkReal x8496=(cj12*r01);
IkReal x8497=(cj12*r11);
IkReal x8498=(cj8*x8489);
IkReal x8499=(cj8*x8490);
IkReal x8500=(sj8*x8490);
IkReal x8501=(sj8*x8489);
evalcond[0]=((((-1.0)*r00*x8491))+x8500+(((-1.0)*x8496)));
evalcond[1]=(x8501+(((-1.0)*r10*x8491))+(((-1.0)*x8497)));
evalcond[2]=(((r00*x8495))+x8489+((cj11*r02))+(((-1.0)*r01*sj11*x8491)));
evalcond[3]=(((r10*x8495))+((cj11*r12))+(((-1.0)*r11*sj11*x8491))+(((-1.0)*x8490)));
evalcond[4]=(((r10*x8492))+x8498+(((-1.0)*r12*x8494))+(((-1.0)*cj11*r11*x8491)));
evalcond[5]=(((r00*x8492))+(((-1.0)*r02*x8494))+(((-1.0)*cj11*r01*x8491))+x8499);
evalcond[6]=((((-1.0)*r00*x8493))+(((0.00043624)*x8499))+(((0.42)*x8500))+(((-1.0)*px))+(((-0.00043624)*x8490))+(((-0.4)*x8496)));
evalcond[7]=((((0.00043624)*x8498))+(((0.42)*x8501))+(((-1.0)*r10*x8493))+(((-0.00043624)*x8489))+(((-1.0)*py))+(((-0.4)*x8497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x8502=IKPowWithIntegerCheck(sj8,-1);
if(!x8502.valid){
continue;
}
if( IKabs(((x8502.value)*((((r10*sj12))+((cj12*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj11*r12))+(((-1.0)*r11*sj11*sj12))+((cj12*r10*sj11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8502.value)*((((r10*sj12))+((cj12*r11))))))+IKsqr((((cj11*r12))+(((-1.0)*r11*sj11*sj12))+((cj12*r10*sj11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x8502.value)*((((r10*sj12))+((cj12*r11))))), (((cj11*r12))+(((-1.0)*r11*sj11*sj12))+((cj12*r10*sj11))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x8503=IKsin(j7);
IkReal x8504=IKcos(j7);
IkReal x8505=((1.0)*sj12);
IkReal x8506=(cj11*cj12);
IkReal x8507=((0.4)*sj12);
IkReal x8508=((1.0)*sj11);
IkReal x8509=(cj12*sj11);
IkReal x8510=(cj12*r01);
IkReal x8511=(cj12*r11);
IkReal x8512=(cj8*x8503);
IkReal x8513=(cj8*x8504);
IkReal x8514=(sj8*x8504);
IkReal x8515=(sj8*x8503);
evalcond[0]=(x8514+(((-1.0)*x8510))+(((-1.0)*r00*x8505)));
evalcond[1]=(x8515+(((-1.0)*x8511))+(((-1.0)*r10*x8505)));
evalcond[2]=(x8503+(((-1.0)*r01*sj11*x8505))+((cj11*r02))+((r00*x8509)));
evalcond[3]=(((r10*x8509))+((cj11*r12))+(((-1.0)*r11*sj11*x8505))+(((-1.0)*x8504)));
evalcond[4]=(((r10*x8506))+x8512+(((-1.0)*cj11*r11*x8505))+(((-1.0)*r12*x8508)));
evalcond[5]=(x8513+(((-1.0)*r02*x8508))+(((-1.0)*cj11*r01*x8505))+((r00*x8506)));
evalcond[6]=((((0.00043624)*x8513))+(((0.42)*x8514))+(((-0.00043624)*x8504))+(((-1.0)*px))+(((-1.0)*r00*x8507))+(((-0.4)*x8510)));
evalcond[7]=((((0.00043624)*x8512))+(((0.42)*x8515))+(((-0.00043624)*x8503))+(((-1.0)*py))+(((-1.0)*r10*x8507))+(((-0.4)*x8511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x8516=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x8516.valid){
continue;
}
CheckValue<IkReal> x8517 = IKatan2WithCheck(IkReal((((r10*sj12))+((cj12*r11)))),IkReal((((r00*sj12))+((cj12*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8517.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8516.value)))+(x8517.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x8518=IKsin(j7);
IkReal x8519=IKcos(j7);
IkReal x8520=((1.0)*sj12);
IkReal x8521=(cj11*cj12);
IkReal x8522=((0.4)*sj12);
IkReal x8523=((1.0)*sj11);
IkReal x8524=(cj12*sj11);
IkReal x8525=(cj12*r01);
IkReal x8526=(cj12*r11);
IkReal x8527=(cj8*x8518);
IkReal x8528=(cj8*x8519);
IkReal x8529=(sj8*x8519);
IkReal x8530=(sj8*x8518);
evalcond[0]=(x8529+(((-1.0)*x8525))+(((-1.0)*r00*x8520)));
evalcond[1]=(x8530+(((-1.0)*x8526))+(((-1.0)*r10*x8520)));
evalcond[2]=(x8518+(((-1.0)*r01*sj11*x8520))+((cj11*r02))+((r00*x8524)));
evalcond[3]=(((cj11*r12))+(((-1.0)*x8519))+(((-1.0)*r11*sj11*x8520))+((r10*x8524)));
evalcond[4]=(x8527+(((-1.0)*cj11*r11*x8520))+(((-1.0)*r12*x8523))+((r10*x8521)));
evalcond[5]=(x8528+(((-1.0)*r02*x8523))+((r00*x8521))+(((-1.0)*cj11*r01*x8520)));
evalcond[6]=((((0.42)*x8529))+(((-0.4)*x8525))+(((-0.00043624)*x8519))+(((-1.0)*px))+(((-1.0)*r00*x8522))+(((0.00043624)*x8528)));
evalcond[7]=((((-0.4)*x8526))+(((-0.00043624)*x8518))+(((-1.0)*py))+(((-1.0)*r10*x8522))+(((0.42)*x8530))+(((0.00043624)*x8527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7eval[0]=sj8;
j7eval[1]=IKsign(sj8);
j7eval[2]=((IKabs((((r10*sj12))+((cj12*r11)))))+(IKabs((((r00*sj12))+((cj12*r01))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7eval[0]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj9=0;
cj9=-1.0;
j9=3.14159265358979;
j7eval[0]=cj8;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x8531=IKPowWithIntegerCheck(cj8,-1);
if(!x8531.valid){
continue;
}
CheckValue<IkReal> x8532=IKPowWithIntegerCheck(sj8,-1);
if(!x8532.valid){
continue;
}
if( IKabs(((x8531.value)*(((((-1.0)*cj11*r11*sj12))+((cj11*cj12*r10))+(((-1.0)*r12*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8532.value)*((((r00*sj12))+((cj12*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8531.value)*(((((-1.0)*cj11*r11*sj12))+((cj11*cj12*r10))+(((-1.0)*r12*sj11))))))+IKsqr(((x8532.value)*((((r00*sj12))+((cj12*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x8531.value)*(((((-1.0)*cj11*r11*sj12))+((cj11*cj12*r10))+(((-1.0)*r12*sj11))))), ((x8532.value)*((((r00*sj12))+((cj12*r01))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x8533=IKcos(j7);
IkReal x8534=IKsin(j7);
IkReal x8535=((1.0)*r11);
IkReal x8536=(sj11*sj12);
IkReal x8537=((0.00043624)*cj8);
IkReal x8538=((1.0)*sj12);
IkReal x8539=((0.4)*sj12);
IkReal x8540=((1.0)*sj11);
IkReal x8541=(cj12*sj11);
IkReal x8542=(cj12*r01);
IkReal x8543=((1.0)*cj8);
IkReal x8544=(cj11*cj12);
IkReal x8545=(sj8*x8533);
IkReal x8546=(sj8*x8534);
evalcond[0]=((((-1.0)*r00*x8538))+x8545+(((-1.0)*x8542)));
evalcond[1]=(x8546+(((-1.0)*cj12*x8535))+(((-1.0)*r10*x8538)));
evalcond[2]=(x8533+((r10*x8541))+((cj11*r12))+(((-1.0)*x8535*x8536)));
evalcond[3]=((((-1.0)*x8534))+((r00*x8541))+(((-1.0)*r01*x8536))+((cj11*r02)));
evalcond[4]=(((r10*x8544))+(((-1.0)*r12*x8540))+(((-1.0)*cj11*sj12*x8535))+(((-1.0)*x8534*x8543)));
evalcond[5]=((((-1.0)*r02*x8540))+((r00*x8544))+(((-1.0)*x8533*x8543))+(((-1.0)*cj11*r01*x8538)));
evalcond[6]=((((-1.0)*r00*x8539))+(((-0.00043624)*x8533))+(((-1.0)*x8533*x8537))+(((-1.0)*px))+(((0.42)*x8545))+(((-0.4)*x8542)));
evalcond[7]=((((-0.4)*cj12*r11))+(((-0.00043624)*x8534))+(((-1.0)*py))+(((0.42)*x8546))+(((-1.0)*r10*x8539))+(((-1.0)*x8534*x8537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x8547=IKPowWithIntegerCheck(sj8,-1);
if(!x8547.valid){
continue;
}
if( IKabs((((cj12*r00*sj11))+(((-1.0)*r01*sj11*sj12))+((cj11*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8547.value)*((((r00*sj12))+((cj12*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj12*r00*sj11))+(((-1.0)*r01*sj11*sj12))+((cj11*r02))))+IKsqr(((x8547.value)*((((r00*sj12))+((cj12*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((cj12*r00*sj11))+(((-1.0)*r01*sj11*sj12))+((cj11*r02))), ((x8547.value)*((((r00*sj12))+((cj12*r01))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x8548=IKcos(j7);
IkReal x8549=IKsin(j7);
IkReal x8550=((1.0)*r11);
IkReal x8551=(sj11*sj12);
IkReal x8552=((0.00043624)*cj8);
IkReal x8553=((1.0)*sj12);
IkReal x8554=((0.4)*sj12);
IkReal x8555=((1.0)*sj11);
IkReal x8556=(cj12*sj11);
IkReal x8557=(cj12*r01);
IkReal x8558=((1.0)*cj8);
IkReal x8559=(cj11*cj12);
IkReal x8560=(sj8*x8548);
IkReal x8561=(sj8*x8549);
evalcond[0]=(x8560+(((-1.0)*r00*x8553))+(((-1.0)*x8557)));
evalcond[1]=(x8561+(((-1.0)*r10*x8553))+(((-1.0)*cj12*x8550)));
evalcond[2]=(x8548+((r10*x8556))+((cj11*r12))+(((-1.0)*x8550*x8551)));
evalcond[3]=((((-1.0)*r01*x8551))+((r00*x8556))+((cj11*r02))+(((-1.0)*x8549)));
evalcond[4]=((((-1.0)*r12*x8555))+((r10*x8559))+(((-1.0)*x8549*x8558))+(((-1.0)*cj11*sj12*x8550)));
evalcond[5]=(((r00*x8559))+(((-1.0)*x8548*x8558))+(((-1.0)*cj11*r01*x8553))+(((-1.0)*r02*x8555)));
evalcond[6]=((((-0.00043624)*x8548))+(((-1.0)*r00*x8554))+(((-1.0)*x8548*x8552))+(((-1.0)*px))+(((-0.4)*x8557))+(((0.42)*x8560)));
evalcond[7]=((((-0.00043624)*x8549))+(((-0.4)*cj12*r11))+(((-1.0)*r10*x8554))+(((-1.0)*py))+(((-1.0)*x8549*x8552))+(((0.42)*x8561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x8562=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x8562.valid){
continue;
}
CheckValue<IkReal> x8563 = IKatan2WithCheck(IkReal((((r10*sj12))+((cj12*r11)))),IkReal((((r00*sj12))+((cj12*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8563.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8562.value)))+(x8563.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x8564=IKcos(j7);
IkReal x8565=IKsin(j7);
IkReal x8566=((1.0)*r11);
IkReal x8567=(sj11*sj12);
IkReal x8568=((0.00043624)*cj8);
IkReal x8569=((1.0)*sj12);
IkReal x8570=((0.4)*sj12);
IkReal x8571=((1.0)*sj11);
IkReal x8572=(cj12*sj11);
IkReal x8573=(cj12*r01);
IkReal x8574=((1.0)*cj8);
IkReal x8575=(cj11*cj12);
IkReal x8576=(sj8*x8564);
IkReal x8577=(sj8*x8565);
evalcond[0]=(x8576+(((-1.0)*r00*x8569))+(((-1.0)*x8573)));
evalcond[1]=(x8577+(((-1.0)*r10*x8569))+(((-1.0)*cj12*x8566)));
evalcond[2]=((((-1.0)*x8566*x8567))+x8564+((cj11*r12))+((r10*x8572)));
evalcond[3]=((((-1.0)*r01*x8567))+((r00*x8572))+((cj11*r02))+(((-1.0)*x8565)));
evalcond[4]=(((r10*x8575))+(((-1.0)*x8565*x8574))+(((-1.0)*r12*x8571))+(((-1.0)*cj11*sj12*x8566)));
evalcond[5]=((((-1.0)*r02*x8571))+(((-1.0)*cj11*r01*x8569))+((r00*x8575))+(((-1.0)*x8564*x8574)));
evalcond[6]=((((-1.0)*x8564*x8568))+(((0.42)*x8576))+(((-0.4)*x8573))+(((-0.00043624)*x8564))+(((-1.0)*px))+(((-1.0)*r00*x8570)));
evalcond[7]=((((-0.4)*cj12*r11))+(((-1.0)*x8565*x8568))+(((0.42)*x8577))+(((-0.00043624)*x8565))+(((-1.0)*py))+(((-1.0)*r10*x8570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7eval[0]=sj8;
j7eval[1]=IKsign(sj8);
j7eval[2]=((IKabs((((r10*sj12))+((cj12*r11)))))+(IKabs((((r00*sj12))+((cj12*r01))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7eval[0]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7eval[0]=cj8;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x8578=IKPowWithIntegerCheck(cj8,-1);
if(!x8578.valid){
continue;
}
CheckValue<IkReal> x8579=IKPowWithIntegerCheck(sj8,-1);
if(!x8579.valid){
continue;
}
if( IKabs(((x8578.value)*(((((-1.0)*cj12*r10*sj11))+(((-1.0)*cj11*r12))+((r11*sj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8579.value)*((((r00*sj12))+((cj12*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8578.value)*(((((-1.0)*cj12*r10*sj11))+(((-1.0)*cj11*r12))+((r11*sj11*sj12))))))+IKsqr(((x8579.value)*((((r00*sj12))+((cj12*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x8578.value)*(((((-1.0)*cj12*r10*sj11))+(((-1.0)*cj11*r12))+((r11*sj11*sj12))))), ((x8579.value)*((((r00*sj12))+((cj12*r01))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x8580=IKcos(j7);
IkReal x8581=IKsin(j7);
IkReal x8582=((1.0)*sj12);
IkReal x8583=(cj11*cj12);
IkReal x8584=((0.4)*sj12);
IkReal x8585=((1.0)*sj11);
IkReal x8586=(cj12*sj11);
IkReal x8587=(cj12*r01);
IkReal x8588=(cj12*r11);
IkReal x8589=((0.00043624)*x8580);
IkReal x8590=((0.00043624)*x8581);
IkReal x8591=(sj8*x8580);
IkReal x8592=(sj8*x8581);
evalcond[0]=(x8591+(((-1.0)*x8587))+(((-1.0)*r00*x8582)));
evalcond[1]=(x8592+(((-1.0)*x8588))+(((-1.0)*r10*x8582)));
evalcond[2]=(x8580+(((-1.0)*cj11*r11*x8582))+((r10*x8583))+(((-1.0)*r12*x8585)));
evalcond[3]=(((cj8*x8580))+(((-1.0)*r01*sj11*x8582))+((r00*x8586))+((cj11*r02)));
evalcond[4]=(((cj8*x8581))+(((-1.0)*r11*sj11*x8582))+((cj11*r12))+((r10*x8586)));
evalcond[5]=((((-1.0)*cj11*r01*x8582))+(((-1.0)*x8581))+(((-1.0)*r02*x8585))+((r00*x8583)));
evalcond[6]=((((-0.4)*x8587))+(((-1.0)*x8589))+(((-1.0)*px))+(((0.42)*x8591))+(((-1.0)*r00*x8584))+(((-1.0)*x8590)));
evalcond[7]=(x8589+(((-0.4)*x8588))+(((-1.0)*py))+(((0.42)*x8592))+(((-1.0)*r10*x8584))+(((-1.0)*x8590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x8593=IKPowWithIntegerCheck(sj8,-1);
if(!x8593.valid){
continue;
}
if( IKabs(((x8593.value)*((((r10*sj12))+((cj12*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj11*cj12*r10))+((r12*sj11))+((cj11*r11*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8593.value)*((((r10*sj12))+((cj12*r11))))))+IKsqr(((((-1.0)*cj11*cj12*r10))+((r12*sj11))+((cj11*r11*sj12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x8593.value)*((((r10*sj12))+((cj12*r11))))), ((((-1.0)*cj11*cj12*r10))+((r12*sj11))+((cj11*r11*sj12))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x8594=IKcos(j7);
IkReal x8595=IKsin(j7);
IkReal x8596=((1.0)*sj12);
IkReal x8597=(cj11*cj12);
IkReal x8598=((0.4)*sj12);
IkReal x8599=((1.0)*sj11);
IkReal x8600=(cj12*sj11);
IkReal x8601=(cj12*r01);
IkReal x8602=(cj12*r11);
IkReal x8603=((0.00043624)*x8594);
IkReal x8604=((0.00043624)*x8595);
IkReal x8605=(sj8*x8594);
IkReal x8606=(sj8*x8595);
evalcond[0]=(x8605+(((-1.0)*r00*x8596))+(((-1.0)*x8601)));
evalcond[1]=((((-1.0)*r10*x8596))+x8606+(((-1.0)*x8602)));
evalcond[2]=(x8594+(((-1.0)*r12*x8599))+((r10*x8597))+(((-1.0)*cj11*r11*x8596)));
evalcond[3]=(((r00*x8600))+(((-1.0)*r01*sj11*x8596))+((cj11*r02))+((cj8*x8594)));
evalcond[4]=(((r10*x8600))+((cj11*r12))+((cj8*x8595))+(((-1.0)*r11*sj11*x8596)));
evalcond[5]=((((-1.0)*r02*x8599))+(((-1.0)*x8595))+((r00*x8597))+(((-1.0)*cj11*r01*x8596)));
evalcond[6]=((((0.42)*x8605))+(((-1.0)*r00*x8598))+(((-1.0)*px))+(((-1.0)*x8603))+(((-1.0)*x8604))+(((-0.4)*x8601)));
evalcond[7]=((((-1.0)*r10*x8598))+x8603+(((0.42)*x8606))+(((-1.0)*py))+(((-1.0)*x8604))+(((-0.4)*x8602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x8607=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x8607.valid){
continue;
}
CheckValue<IkReal> x8608 = IKatan2WithCheck(IkReal((((r10*sj12))+((cj12*r11)))),IkReal((((r00*sj12))+((cj12*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8608.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8607.value)))+(x8608.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x8609=IKcos(j7);
IkReal x8610=IKsin(j7);
IkReal x8611=((1.0)*sj12);
IkReal x8612=(cj11*cj12);
IkReal x8613=((0.4)*sj12);
IkReal x8614=((1.0)*sj11);
IkReal x8615=(cj12*sj11);
IkReal x8616=(cj12*r01);
IkReal x8617=(cj12*r11);
IkReal x8618=((0.00043624)*x8609);
IkReal x8619=((0.00043624)*x8610);
IkReal x8620=(sj8*x8609);
IkReal x8621=(sj8*x8610);
evalcond[0]=((((-1.0)*r00*x8611))+x8620+(((-1.0)*x8616)));
evalcond[1]=(x8621+(((-1.0)*r10*x8611))+(((-1.0)*x8617)));
evalcond[2]=(x8609+(((-1.0)*cj11*r11*x8611))+((r10*x8612))+(((-1.0)*r12*x8614)));
evalcond[3]=(((r00*x8615))+((cj8*x8609))+((cj11*r02))+(((-1.0)*r01*sj11*x8611)));
evalcond[4]=(((r10*x8615))+((cj11*r12))+((cj8*x8610))+(((-1.0)*r11*sj11*x8611)));
evalcond[5]=((((-1.0)*r02*x8614))+((r00*x8612))+(((-1.0)*cj11*r01*x8611))+(((-1.0)*x8610)));
evalcond[6]=((((-0.4)*x8616))+(((-1.0)*r00*x8613))+(((-1.0)*px))+(((-1.0)*x8618))+(((-1.0)*x8619))+(((0.42)*x8620)));
evalcond[7]=((((-0.4)*x8617))+x8618+(((-1.0)*py))+(((-1.0)*r10*x8613))+(((-1.0)*x8619))+(((0.42)*x8621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7eval[0]=sj8;
j7eval[1]=IKsign(sj8);
j7eval[2]=((IKabs((((r10*sj12))+((cj12*r11)))))+(IKabs((((r00*sj12))+((cj12*r01))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7eval[0]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7eval[0]=cj8;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x8622=IKPowWithIntegerCheck(cj8,-1);
if(!x8622.valid){
continue;
}
CheckValue<IkReal> x8623=IKPowWithIntegerCheck(sj8,-1);
if(!x8623.valid){
continue;
}
if( IKabs(((x8622.value)*((((cj11*r12))+(((-1.0)*r11*sj11*sj12))+((cj12*r10*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8623.value)*((((r00*sj12))+((cj12*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8622.value)*((((cj11*r12))+(((-1.0)*r11*sj11*sj12))+((cj12*r10*sj11))))))+IKsqr(((x8623.value)*((((r00*sj12))+((cj12*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x8622.value)*((((cj11*r12))+(((-1.0)*r11*sj11*sj12))+((cj12*r10*sj11))))), ((x8623.value)*((((r00*sj12))+((cj12*r01))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x8624=IKsin(j7);
IkReal x8625=IKcos(j7);
IkReal x8626=((1.0)*sj12);
IkReal x8627=(cj11*cj12);
IkReal x8628=((0.4)*sj12);
IkReal x8629=(cj12*sj11);
IkReal x8630=(cj12*r01);
IkReal x8631=((1.0)*cj8);
IkReal x8632=((1.0)*sj11);
IkReal x8633=(cj12*r11);
IkReal x8634=((0.00043624)*x8625);
IkReal x8635=((0.00043624)*x8624);
IkReal x8636=(sj8*x8625);
IkReal x8637=(sj8*x8624);
evalcond[0]=(x8636+(((-1.0)*x8630))+(((-1.0)*r00*x8626)));
evalcond[1]=(x8637+(((-1.0)*x8633))+(((-1.0)*r10*x8626)));
evalcond[2]=(x8624+(((-1.0)*cj11*r01*x8626))+((r00*x8627))+(((-1.0)*r02*x8632)));
evalcond[3]=((((-1.0)*x8625*x8631))+((cj11*r02))+(((-1.0)*r01*sj11*x8626))+((r00*x8629)));
evalcond[4]=((((-1.0)*x8624*x8631))+((cj11*r12))+((r10*x8629))+(((-1.0)*r11*sj11*x8626)));
evalcond[5]=((((-1.0)*x8625))+(((-1.0)*r12*x8632))+(((-1.0)*cj11*r11*x8626))+((r10*x8627)));
evalcond[6]=((((-1.0)*x8634))+x8635+(((-1.0)*r00*x8628))+(((-0.4)*x8630))+(((-1.0)*px))+(((0.42)*x8636)));
evalcond[7]=((((-1.0)*x8634))+(((-1.0)*x8635))+(((-1.0)*r10*x8628))+(((-0.4)*x8633))+(((-1.0)*py))+(((0.42)*x8637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x8638=IKPowWithIntegerCheck(sj8,-1);
if(!x8638.valid){
continue;
}
if( IKabs((((r02*sj11))+((cj11*r01*sj12))+(((-1.0)*cj11*cj12*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8638.value)*((((r00*sj12))+((cj12*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*sj11))+((cj11*r01*sj12))+(((-1.0)*cj11*cj12*r00))))+IKsqr(((x8638.value)*((((r00*sj12))+((cj12*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((r02*sj11))+((cj11*r01*sj12))+(((-1.0)*cj11*cj12*r00))), ((x8638.value)*((((r00*sj12))+((cj12*r01))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x8639=IKsin(j7);
IkReal x8640=IKcos(j7);
IkReal x8641=((1.0)*sj12);
IkReal x8642=(cj11*cj12);
IkReal x8643=((0.4)*sj12);
IkReal x8644=(cj12*sj11);
IkReal x8645=(cj12*r01);
IkReal x8646=((1.0)*cj8);
IkReal x8647=((1.0)*sj11);
IkReal x8648=(cj12*r11);
IkReal x8649=((0.00043624)*x8640);
IkReal x8650=((0.00043624)*x8639);
IkReal x8651=(sj8*x8640);
IkReal x8652=(sj8*x8639);
evalcond[0]=(x8651+(((-1.0)*x8645))+(((-1.0)*r00*x8641)));
evalcond[1]=(x8652+(((-1.0)*r10*x8641))+(((-1.0)*x8648)));
evalcond[2]=(x8639+((r00*x8642))+(((-1.0)*cj11*r01*x8641))+(((-1.0)*r02*x8647)));
evalcond[3]=(((r00*x8644))+(((-1.0)*r01*sj11*x8641))+((cj11*r02))+(((-1.0)*x8640*x8646)));
evalcond[4]=((((-1.0)*x8639*x8646))+((cj11*r12))+((r10*x8644))+(((-1.0)*r11*sj11*x8641)));
evalcond[5]=(((r10*x8642))+(((-1.0)*r12*x8647))+(((-1.0)*cj11*r11*x8641))+(((-1.0)*x8640)));
evalcond[6]=(x8650+(((0.42)*x8651))+(((-1.0)*px))+(((-0.4)*x8645))+(((-1.0)*x8649))+(((-1.0)*r00*x8643)));
evalcond[7]=((((-1.0)*r10*x8643))+(((-1.0)*x8650))+(((0.42)*x8652))+(((-1.0)*py))+(((-0.4)*x8648))+(((-1.0)*x8649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x8653=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x8653.valid){
continue;
}
CheckValue<IkReal> x8654 = IKatan2WithCheck(IkReal((((r10*sj12))+((cj12*r11)))),IkReal((((r00*sj12))+((cj12*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8654.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8653.value)))+(x8654.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x8655=IKsin(j7);
IkReal x8656=IKcos(j7);
IkReal x8657=((1.0)*sj12);
IkReal x8658=(cj11*cj12);
IkReal x8659=((0.4)*sj12);
IkReal x8660=(cj12*sj11);
IkReal x8661=(cj12*r01);
IkReal x8662=((1.0)*cj8);
IkReal x8663=((1.0)*sj11);
IkReal x8664=(cj12*r11);
IkReal x8665=((0.00043624)*x8656);
IkReal x8666=((0.00043624)*x8655);
IkReal x8667=(sj8*x8656);
IkReal x8668=(sj8*x8655);
evalcond[0]=(x8667+(((-1.0)*r00*x8657))+(((-1.0)*x8661)));
evalcond[1]=(x8668+(((-1.0)*x8664))+(((-1.0)*r10*x8657)));
evalcond[2]=(((r00*x8658))+x8655+(((-1.0)*r02*x8663))+(((-1.0)*cj11*r01*x8657)));
evalcond[3]=((((-1.0)*x8656*x8662))+(((-1.0)*r01*sj11*x8657))+((r00*x8660))+((cj11*r02)));
evalcond[4]=(((cj11*r12))+((r10*x8660))+(((-1.0)*r11*sj11*x8657))+(((-1.0)*x8655*x8662)));
evalcond[5]=(((r10*x8658))+(((-1.0)*r12*x8663))+(((-1.0)*x8656))+(((-1.0)*cj11*r11*x8657)));
evalcond[6]=(x8666+(((-1.0)*r00*x8659))+(((0.42)*x8667))+(((-1.0)*px))+(((-1.0)*x8665))+(((-0.4)*x8661)));
evalcond[7]=((((0.42)*x8668))+(((-1.0)*py))+(((-1.0)*x8666))+(((-1.0)*x8665))+(((-0.4)*x8664))+(((-1.0)*r10*x8659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x8673=IKPowWithIntegerCheck(sj8,-1);
if(!x8673.valid){
continue;
}
IkReal x8669=x8673.value;
IkReal x8670=((1.0)*sj8);
IkReal x8671=(r00*sj12);
IkReal x8672=(cj12*r01);
CheckValue<IkReal> x8674=IKPowWithIntegerCheck(cj8,-1);
if(!x8674.valid){
continue;
}
CheckValue<IkReal> x8675=IKPowWithIntegerCheck(sj9,-1);
if(!x8675.valid){
continue;
}
if( IKabs((x8669*(x8674.value)*(x8675.value)*(((((-1.0)*cj12*r10*sj11*x8670))+((r11*sj11*sj12*sj8))+((cj9*x8671))+((cj9*x8672))+(((-1.0)*cj11*r12*x8670)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x8669*((x8672+x8671)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x8669*(x8674.value)*(x8675.value)*(((((-1.0)*cj12*r10*sj11*x8670))+((r11*sj11*sj12*sj8))+((cj9*x8671))+((cj9*x8672))+(((-1.0)*cj11*r12*x8670))))))+IKsqr((x8669*((x8672+x8671))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x8669*(x8674.value)*(x8675.value)*(((((-1.0)*cj12*r10*sj11*x8670))+((r11*sj11*sj12*sj8))+((cj9*x8671))+((cj9*x8672))+(((-1.0)*cj11*r12*x8670))))), (x8669*((x8672+x8671))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x8676=IKcos(j7);
IkReal x8677=IKsin(j7);
IkReal x8678=((1.0)*sj12);
IkReal x8679=(cj11*cj12);
IkReal x8680=((0.4)*sj12);
IkReal x8681=((1.0)*sj11);
IkReal x8682=(cj12*sj11);
IkReal x8683=(cj12*r01);
IkReal x8684=(cj12*r11);
IkReal x8685=(sj9*x8676);
IkReal x8686=(sj8*x8677);
IkReal x8687=(sj8*x8676);
IkReal x8688=(cj9*x8676);
IkReal x8689=((0.00043624)*x8677);
IkReal x8690=(cj8*x8677);
evalcond[0]=(x8687+(((-1.0)*r00*x8678))+(((-1.0)*x8683)));
evalcond[1]=(x8686+(((-1.0)*x8684))+(((-1.0)*r10*x8678)));
evalcond[2]=(((r00*x8682))+((cj8*x8685))+((cj9*x8677))+(((-1.0)*r01*sj11*x8678))+((cj11*r02)));
evalcond[3]=(((r10*x8682))+((cj11*r12))+(((-1.0)*x8688))+((sj9*x8690))+(((-1.0)*r11*sj11*x8678)));
evalcond[4]=(x8685+(((-1.0)*r12*x8681))+(((-1.0)*cj11*r11*x8678))+((r10*x8679))+((cj9*x8690)));
evalcond[5]=((((-1.0)*sj9*x8677))+(((-1.0)*r02*x8681))+((cj8*x8688))+((r00*x8679))+(((-1.0)*cj11*r01*x8678)));
evalcond[6]=((((-0.4)*x8683))+(((-1.0)*r00*x8680))+(((0.00043624)*cj8*x8688))+(((-1.0)*sj9*x8689))+(((0.42)*x8687))+(((-1.0)*px))+(((-0.00043624)*x8676)));
evalcond[7]=((((-0.4)*x8684))+(((0.42)*x8686))+(((-1.0)*py))+(((-1.0)*r10*x8680))+(((-1.0)*x8689))+(((0.00043624)*x8685))+((cj8*cj9*x8689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x8696=IKPowWithIntegerCheck(sj8,-1);
if(!x8696.valid){
continue;
}
IkReal x8691=x8696.value;
IkReal x8692=(sj11*sj8);
IkReal x8693=((1.0)*cj12);
IkReal x8694=(cj8*sj9);
IkReal x8695=(r00*sj12);
CheckValue<IkReal> x8697=IKPowWithIntegerCheck(cj9,-1);
if(!x8697.valid){
continue;
}
if( IKabs((x8691*(x8697.value)*(((((-1.0)*cj11*r02*sj8))+(((-1.0)*r01*x8693*x8694))+((r01*sj12*x8692))+(((-1.0)*x8694*x8695))+(((-1.0)*r00*x8692*x8693)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x8691*((x8695+((cj12*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x8691*(x8697.value)*(((((-1.0)*cj11*r02*sj8))+(((-1.0)*r01*x8693*x8694))+((r01*sj12*x8692))+(((-1.0)*x8694*x8695))+(((-1.0)*r00*x8692*x8693))))))+IKsqr((x8691*((x8695+((cj12*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x8691*(x8697.value)*(((((-1.0)*cj11*r02*sj8))+(((-1.0)*r01*x8693*x8694))+((r01*sj12*x8692))+(((-1.0)*x8694*x8695))+(((-1.0)*r00*x8692*x8693))))), (x8691*((x8695+((cj12*r01))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x8698=IKcos(j7);
IkReal x8699=IKsin(j7);
IkReal x8700=((1.0)*sj12);
IkReal x8701=(cj11*cj12);
IkReal x8702=((0.4)*sj12);
IkReal x8703=((1.0)*sj11);
IkReal x8704=(cj12*sj11);
IkReal x8705=(cj12*r01);
IkReal x8706=(cj12*r11);
IkReal x8707=(sj9*x8698);
IkReal x8708=(sj8*x8699);
IkReal x8709=(sj8*x8698);
IkReal x8710=(cj9*x8698);
IkReal x8711=((0.00043624)*x8699);
IkReal x8712=(cj8*x8699);
evalcond[0]=(x8709+(((-1.0)*x8705))+(((-1.0)*r00*x8700)));
evalcond[1]=(x8708+(((-1.0)*x8706))+(((-1.0)*r10*x8700)));
evalcond[2]=((((-1.0)*r01*sj11*x8700))+((cj11*r02))+((r00*x8704))+((cj8*x8707))+((cj9*x8699)));
evalcond[3]=(((sj9*x8712))+((r10*x8704))+((cj11*r12))+(((-1.0)*r11*sj11*x8700))+(((-1.0)*x8710)));
evalcond[4]=(((r10*x8701))+x8707+((cj9*x8712))+(((-1.0)*cj11*r11*x8700))+(((-1.0)*r12*x8703)));
evalcond[5]=(((cj8*x8710))+(((-1.0)*cj11*r01*x8700))+(((-1.0)*sj9*x8699))+(((-1.0)*r02*x8703))+((r00*x8701)));
evalcond[6]=((((0.00043624)*cj8*x8710))+(((-1.0)*sj9*x8711))+(((-0.00043624)*x8698))+(((-1.0)*px))+(((0.42)*x8709))+(((-1.0)*r00*x8702))+(((-0.4)*x8705)));
evalcond[7]=((((-1.0)*x8711))+(((-1.0)*py))+(((0.00043624)*x8707))+(((0.42)*x8708))+(((-1.0)*r10*x8702))+(((-0.4)*x8706))+((cj8*cj9*x8711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x8713=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x8713.valid){
continue;
}
CheckValue<IkReal> x8714 = IKatan2WithCheck(IkReal((((r10*sj12))+((cj12*r11)))),IkReal((((r00*sj12))+((cj12*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8714.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8713.value)))+(x8714.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x8715=IKcos(j7);
IkReal x8716=IKsin(j7);
IkReal x8717=((1.0)*sj12);
IkReal x8718=(cj11*cj12);
IkReal x8719=((0.4)*sj12);
IkReal x8720=((1.0)*sj11);
IkReal x8721=(cj12*sj11);
IkReal x8722=(cj12*r01);
IkReal x8723=(cj12*r11);
IkReal x8724=(sj9*x8715);
IkReal x8725=(sj8*x8716);
IkReal x8726=(sj8*x8715);
IkReal x8727=(cj9*x8715);
IkReal x8728=((0.00043624)*x8716);
IkReal x8729=(cj8*x8716);
evalcond[0]=(x8726+(((-1.0)*x8722))+(((-1.0)*r00*x8717)));
evalcond[1]=(x8725+(((-1.0)*x8723))+(((-1.0)*r10*x8717)));
evalcond[2]=(((cj9*x8716))+((cj11*r02))+(((-1.0)*r01*sj11*x8717))+((r00*x8721))+((cj8*x8724)));
evalcond[3]=(((r10*x8721))+((sj9*x8729))+(((-1.0)*x8727))+((cj11*r12))+(((-1.0)*r11*sj11*x8717)));
evalcond[4]=(((cj9*x8729))+x8724+((r10*x8718))+(((-1.0)*cj11*r11*x8717))+(((-1.0)*r12*x8720)));
evalcond[5]=((((-1.0)*sj9*x8716))+((r00*x8718))+(((-1.0)*cj11*r01*x8717))+(((-1.0)*r02*x8720))+((cj8*x8727)));
evalcond[6]=((((0.00043624)*cj8*x8727))+(((-0.00043624)*x8715))+(((-1.0)*sj9*x8728))+(((-1.0)*px))+(((0.42)*x8726))+(((-0.4)*x8722))+(((-1.0)*r00*x8719)));
evalcond[7]=((((0.00043624)*x8724))+(((-1.0)*py))+((cj8*cj9*x8728))+(((-1.0)*r10*x8719))+(((-1.0)*x8728))+(((0.42)*x8725))+(((-0.4)*x8723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x8730=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x8730.valid){
continue;
}
CheckValue<IkReal> x8731 = IKatan2WithCheck(IkReal((((r10*sj12))+((cj12*r11)))),IkReal((((r00*sj12))+((cj12*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8731.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8730.value)))+(x8731.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[4];
IkReal x8732=IKcos(j7);
IkReal x8733=IKsin(j7);
IkReal x8734=(r10*sj12);
IkReal x8735=((0.42)*sj8);
IkReal x8736=((1.0)*cj12);
IkReal x8737=(cj8*cj9);
IkReal x8738=((0.4)*cj12);
IkReal x8739=(r00*sj12);
IkReal x8740=((0.00043624)*x8732);
IkReal x8741=((0.00043624)*x8733);
evalcond[0]=((((-1.0)*x8739))+((sj8*x8732))+(((-1.0)*r01*x8736)));
evalcond[1]=((((-1.0)*x8734))+((sj8*x8733))+(((-1.0)*r11*x8736)));
evalcond[2]=(((x8732*x8735))+(((-1.0)*sj9*x8741))+(((-1.0)*px))+((x8737*x8740))+(((-1.0)*r01*x8738))+(((-1.0)*x8740))+(((-0.4)*x8739)));
evalcond[3]=(((sj9*x8740))+((x8733*x8735))+(((-1.0)*py))+((x8737*x8741))+(((-1.0)*x8741))+(((-0.4)*x8734))+(((-1.0)*r11*x8738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[2];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x8742=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x8742;
j11eval[1]=IKsign(x8742);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x8743=((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11)));
j11eval[0]=x8743;
j11eval[1]=IKsign(x8743);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x8744=cj12*cj12;
IkReal x8745=r21*r21;
IkReal x8746=(r22*sj8);
IkReal x8747=((1.0)*cj9);
IkReal x8748=(cj12*r20*sj8);
IkReal x8749=(r21*sj12*sj8);
IkReal x8750=((r22*r22)+x8745+(((-2.0)*cj12*r20*r21*sj12))+(((-1.0)*x8744*x8745))+((x8744*(r20*r20))));
j11eval[0]=x8750;
j11eval[1]=IKsign(x8750);
j11eval[2]=((IKabs((((sj9*x8748))+(((-1.0)*sj9*x8749))+(((-1.0)*x8746*x8747)))))+(IKabs((((sj9*x8746))+((cj9*x8748))+(((-1.0)*x8747*x8749))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=1.0;
j8=0;
IkReal x8751=(r21*sj12);
IkReal x8752=(sj7*sj9);
IkReal x8753=(cj12*r20);
IkReal x8754=((1.0)*cj7*cj9);
IkReal x8755=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x8755;
j11eval[1]=((IKabs(((((-1.0)*x8751*x8754))+((cj7*cj9*x8753))+(((-1.0)*x8752*x8753))+((x8751*x8752)))))+(IKabs((((r22*x8752))+(((-1.0)*r22*x8754))))));
j11eval[2]=IKsign(x8755);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=1.0;
j8=0;
IkReal x8756=(cj7*sj9);
IkReal x8757=(r21*sj12);
IkReal x8758=((1.0)*cj12);
IkReal x8759=(cj9*sj7);
IkReal x8760=((((-1.0)*r11*x8758))+(((-1.0)*r10*sj12)));
j11eval[0]=x8760;
j11eval[1]=IKsign(x8760);
j11eval[2]=((IKabs((((r22*x8756))+((r22*x8759)))))+(IKabs((((x8756*x8757))+((x8757*x8759))+(((-1.0)*r20*x8756*x8758))+(((-1.0)*r20*x8758*x8759))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=1.0;
j8=0;
IkReal x8761=cj12*cj12;
IkReal x8762=((1.0)*r21);
IkReal x8763=(cj12*sj12);
IkReal x8764=(cj7*sj9);
IkReal x8765=((1.0)*r20);
IkReal x8766=(r21*sj12);
IkReal x8767=(cj9*sj7);
IkReal x8768=((((-1.0)*r11*x8763*x8765))+((r11*r21))+(((-1.0)*r10*x8762*x8763))+(((-1.0)*r11*x8761*x8762))+((r12*r22))+((r10*r20*x8761)));
j11eval[0]=x8768;
j11eval[1]=IKsign(x8768);
j11eval[2]=((IKabs((((x8764*x8766))+((x8766*x8767))+(((-1.0)*cj12*x8765*x8767))+(((-1.0)*cj12*x8764*x8765)))))+(IKabs((((r22*x8764))+((r22*x8767))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8769=cj12*cj12;
IkReal x8770=(r21*sj12);
IkReal x8771=((1.0)*cj12);
IkReal x8772=(cj7*sj9);
IkReal x8773=(r11*r21);
IkReal x8774=(cj9*sj7);
CheckValue<IkReal> x8775=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8769*x8773))+x8773+(((-1.0)*r10*x8770*x8771))+(((-1.0)*r11*r20*sj12*x8771))+((r12*r22))+((r10*r20*x8769)))),-1);
if(!x8775.valid){
continue;
}
CheckValue<IkReal> x8776 = IKatan2WithCheck(IkReal((((r22*x8772))+((r22*x8774)))),IkReal((((x8770*x8774))+((x8770*x8772))+(((-1.0)*r20*x8771*x8772))+(((-1.0)*r20*x8771*x8774)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8776.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8775.value)))+(x8776.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8777=IKsin(j11);
IkReal x8778=IKcos(j11);
IkReal x8779=(cj9*sj7);
IkReal x8780=(cj7*sj9);
IkReal x8781=(cj12*r20);
IkReal x8782=(sj7*sj9);
IkReal x8783=(cj7*cj9);
IkReal x8784=(cj12*x8778);
IkReal x8785=((1.0)*x8777);
IkReal x8786=(cj12*x8777);
IkReal x8787=(x8780+x8779);
IkReal x8788=((1.0)*sj12*x8778);
evalcond[0]=(((x8777*x8781))+(((-1.0)*r21*sj12*x8785))+((r22*x8778)));
evalcond[1]=(((x8778*x8781))+(((-1.0)*r21*x8788))+(((-1.0)*r22*x8785)));
evalcond[2]=((((-1.0)*r01*sj12*x8785))+x8787+((r00*x8786))+((r02*x8778)));
evalcond[3]=(((r10*x8786))+x8782+(((-1.0)*x8783))+((r12*x8778))+(((-1.0)*r11*sj12*x8785)));
evalcond[4]=(((r10*x8784))+x8787+(((-1.0)*r12*x8785))+(((-1.0)*r11*x8788)));
evalcond[5]=(x8783+(((-1.0)*x8782))+(((-1.0)*r02*x8785))+((r00*x8784))+(((-1.0)*r01*x8788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8789=(cj7*sj9);
IkReal x8790=(r21*sj12);
IkReal x8791=((1.0)*cj12);
IkReal x8792=(cj9*sj7);
CheckValue<IkReal> x8793 = IKatan2WithCheck(IkReal((((r22*x8789))+((r22*x8792)))),IkReal(((((-1.0)*r20*x8791*x8792))+(((-1.0)*r20*x8789*x8791))+((x8789*x8790))+((x8790*x8792)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8793.valid){
continue;
}
CheckValue<IkReal> x8794=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8791))+(((-1.0)*r10*sj12)))),-1);
if(!x8794.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x8793.value)+(((1.5707963267949)*(x8794.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8795=IKsin(j11);
IkReal x8796=IKcos(j11);
IkReal x8797=(cj9*sj7);
IkReal x8798=(cj7*sj9);
IkReal x8799=(cj12*r20);
IkReal x8800=(sj7*sj9);
IkReal x8801=(cj7*cj9);
IkReal x8802=(cj12*x8796);
IkReal x8803=((1.0)*x8795);
IkReal x8804=(cj12*x8795);
IkReal x8805=(x8798+x8797);
IkReal x8806=((1.0)*sj12*x8796);
evalcond[0]=(((x8795*x8799))+(((-1.0)*r21*sj12*x8803))+((r22*x8796)));
evalcond[1]=((((-1.0)*r22*x8803))+((x8796*x8799))+(((-1.0)*r21*x8806)));
evalcond[2]=(x8805+((r02*x8796))+((r00*x8804))+(((-1.0)*r01*sj12*x8803)));
evalcond[3]=(((r10*x8804))+(((-1.0)*x8801))+(((-1.0)*r11*sj12*x8803))+((r12*x8796))+x8800);
evalcond[4]=((((-1.0)*r12*x8803))+(((-1.0)*r11*x8806))+((r10*x8802))+x8805);
evalcond[5]=((((-1.0)*x8800))+x8801+(((-1.0)*r02*x8803))+((r00*x8802))+(((-1.0)*r01*x8806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8807=(r21*sj12);
IkReal x8808=(sj7*sj9);
IkReal x8809=(cj12*r20);
IkReal x8810=((1.0)*cj7*cj9);
CheckValue<IkReal> x8811 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x8810))+((r22*x8808)))),IkReal(((((-1.0)*x8807*x8810))+((cj7*cj9*x8809))+(((-1.0)*x8808*x8809))+((x8807*x8808)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8811.valid){
continue;
}
CheckValue<IkReal> x8812=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x8812.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x8811.value)+(((1.5707963267949)*(x8812.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8813=IKsin(j11);
IkReal x8814=IKcos(j11);
IkReal x8815=(cj9*sj7);
IkReal x8816=(cj7*sj9);
IkReal x8817=(cj12*r20);
IkReal x8818=(sj7*sj9);
IkReal x8819=(cj7*cj9);
IkReal x8820=(cj12*x8814);
IkReal x8821=((1.0)*x8813);
IkReal x8822=(cj12*x8813);
IkReal x8823=(x8816+x8815);
IkReal x8824=((1.0)*sj12*x8814);
evalcond[0]=(((r22*x8814))+((x8813*x8817))+(((-1.0)*r21*sj12*x8821)));
evalcond[1]=((((-1.0)*r21*x8824))+((x8814*x8817))+(((-1.0)*r22*x8821)));
evalcond[2]=(x8823+((r02*x8814))+(((-1.0)*r01*sj12*x8821))+((r00*x8822)));
evalcond[3]=((((-1.0)*r11*sj12*x8821))+(((-1.0)*x8819))+((r12*x8814))+((r10*x8822))+x8818);
evalcond[4]=((((-1.0)*r11*x8824))+(((-1.0)*r12*x8821))+((r10*x8820))+x8823);
evalcond[5]=((((-1.0)*x8818))+(((-1.0)*r02*x8821))+x8819+(((-1.0)*r01*x8824))+((r00*x8820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x8825=(sj7*sj9);
IkReal x8826=((1.0)*r22);
IkReal x8827=(cj7*cj9);
IkReal x8828=(cj12*r20);
IkReal x8829=((1.0)*r21*sj12);
IkReal x8830=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x8830;
j11eval[1]=((IKabs(((((-1.0)*x8826*x8827))+(((-1.0)*x8825*x8826)))))+(IKabs((((x8825*x8828))+(((-1.0)*x8827*x8829))+(((-1.0)*x8825*x8829))+((x8827*x8828))))));
j11eval[2]=IKsign(x8830);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x8831=(cj9*sj7);
IkReal x8832=((1.0)*cj12);
IkReal x8833=(r21*sj12);
IkReal x8834=((1.0)*cj7*sj9);
IkReal x8835=((((-1.0)*r10*sj12))+(((-1.0)*r11*x8832)));
j11eval[0]=x8835;
j11eval[1]=IKsign(x8835);
j11eval[2]=((IKabs(((((-1.0)*x8833*x8834))+((x8831*x8833))+((cj12*cj7*r20*sj9))+(((-1.0)*r20*x8831*x8832)))))+(IKabs(((((-1.0)*r22*x8834))+((r22*x8831))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x8836=cj12*cj12;
IkReal x8837=((1.0)*cj12);
IkReal x8838=(r21*sj12);
IkReal x8839=(cj7*sj9);
IkReal x8840=(r11*r21);
IkReal x8841=(cj9*sj7);
IkReal x8842=((((-1.0)*r11*r20*sj12*x8837))+x8840+(((-1.0)*x8836*x8840))+((r12*r22))+(((-1.0)*r10*x8837*x8838))+((r10*r20*x8836)));
j11eval[0]=x8842;
j11eval[1]=IKsign(x8842);
j11eval[2]=((IKabs((((x8838*x8839))+(((-1.0)*r20*x8837*x8839))+((cj12*r20*x8841))+(((-1.0)*x8838*x8841)))))+(IKabs(((((-1.0)*r22*x8841))+((r22*x8839))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8843=cj12*cj12;
IkReal x8844=((1.0)*cj12);
IkReal x8845=(r21*sj12);
IkReal x8846=(cj7*sj9);
IkReal x8847=(r11*r21);
IkReal x8848=(cj9*sj7);
CheckValue<IkReal> x8849 = IKatan2WithCheck(IkReal((((r22*x8846))+(((-1.0)*r22*x8848)))),IkReal((((x8845*x8846))+(((-1.0)*r20*x8844*x8846))+(((-1.0)*x8845*x8848))+((cj12*r20*x8848)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8849.valid){
continue;
}
CheckValue<IkReal> x8850=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x8844*x8845))+(((-1.0)*r11*r20*sj12*x8844))+x8847+((r12*r22))+(((-1.0)*x8843*x8847))+((r10*r20*x8843)))),-1);
if(!x8850.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x8849.value)+(((1.5707963267949)*(x8850.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8851=IKsin(j11);
IkReal x8852=IKcos(j11);
IkReal x8853=(cj12*r20);
IkReal x8854=((1.0)*sj7);
IkReal x8855=(cj7*sj9);
IkReal x8856=((1.0)*cj7*cj9);
IkReal x8857=(sj9*x8854);
IkReal x8858=(cj12*x8852);
IkReal x8859=((1.0)*x8851);
IkReal x8860=(cj12*x8851);
IkReal x8861=((1.0)*sj12*x8852);
IkReal x8862=(x8857+x8856);
evalcond[0]=(((r22*x8852))+((x8851*x8853))+(((-1.0)*r21*sj12*x8859)));
evalcond[1]=((((-1.0)*r22*x8859))+((x8852*x8853))+(((-1.0)*r21*x8861)));
evalcond[2]=(((r00*x8860))+(((-1.0)*r01*sj12*x8859))+((cj9*sj7))+((r02*x8852))+(((-1.0)*x8855)));
evalcond[3]=((((-1.0)*x8862))+(((-1.0)*r11*sj12*x8859))+((r12*x8852))+((r10*x8860)));
evalcond[4]=((((-1.0)*cj9*x8854))+x8855+(((-1.0)*r12*x8859))+(((-1.0)*r11*x8861))+((r10*x8858)));
evalcond[5]=(((r00*x8858))+(((-1.0)*x8862))+(((-1.0)*r02*x8859))+(((-1.0)*r01*x8861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8863=((1.0)*cj12);
IkReal x8864=(cj9*sj7);
IkReal x8865=(r21*sj12);
IkReal x8866=((1.0)*cj7*sj9);
CheckValue<IkReal> x8867=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8863))+(((-1.0)*r10*sj12)))),-1);
if(!x8867.valid){
continue;
}
CheckValue<IkReal> x8868 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x8866))+((r22*x8864)))),IkReal((((x8864*x8865))+(((-1.0)*r20*x8863*x8864))+(((-1.0)*x8865*x8866))+((cj12*cj7*r20*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8868.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8867.value)))+(x8868.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8869=IKsin(j11);
IkReal x8870=IKcos(j11);
IkReal x8871=(cj12*r20);
IkReal x8872=((1.0)*sj7);
IkReal x8873=(cj7*sj9);
IkReal x8874=((1.0)*cj7*cj9);
IkReal x8875=(sj9*x8872);
IkReal x8876=(cj12*x8870);
IkReal x8877=((1.0)*x8869);
IkReal x8878=(cj12*x8869);
IkReal x8879=((1.0)*sj12*x8870);
IkReal x8880=(x8875+x8874);
evalcond[0]=((((-1.0)*r21*sj12*x8877))+((r22*x8870))+((x8869*x8871)));
evalcond[1]=((((-1.0)*r21*x8879))+(((-1.0)*r22*x8877))+((x8870*x8871)));
evalcond[2]=(((r02*x8870))+(((-1.0)*x8873))+((cj9*sj7))+((r00*x8878))+(((-1.0)*r01*sj12*x8877)));
evalcond[3]=(((r10*x8878))+(((-1.0)*x8880))+(((-1.0)*r11*sj12*x8877))+((r12*x8870)));
evalcond[4]=(((r10*x8876))+(((-1.0)*cj9*x8872))+x8873+(((-1.0)*r12*x8877))+(((-1.0)*r11*x8879)));
evalcond[5]=((((-1.0)*r01*x8879))+(((-1.0)*r02*x8877))+((r00*x8876))+(((-1.0)*x8880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8881=(sj7*sj9);
IkReal x8882=((1.0)*r22);
IkReal x8883=(cj7*cj9);
IkReal x8884=(cj12*r20);
IkReal x8885=((1.0)*r21*sj12);
CheckValue<IkReal> x8886 = IKatan2WithCheck(IkReal(((((-1.0)*x8881*x8882))+(((-1.0)*x8882*x8883)))),IkReal(((((-1.0)*x8881*x8885))+(((-1.0)*x8883*x8885))+((x8881*x8884))+((x8883*x8884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8886.valid){
continue;
}
CheckValue<IkReal> x8887=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x8887.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x8886.value)+(((1.5707963267949)*(x8887.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8888=IKsin(j11);
IkReal x8889=IKcos(j11);
IkReal x8890=(cj12*r20);
IkReal x8891=((1.0)*sj7);
IkReal x8892=(cj7*sj9);
IkReal x8893=((1.0)*cj7*cj9);
IkReal x8894=(sj9*x8891);
IkReal x8895=(cj12*x8889);
IkReal x8896=((1.0)*x8888);
IkReal x8897=(cj12*x8888);
IkReal x8898=((1.0)*sj12*x8889);
IkReal x8899=(x8894+x8893);
evalcond[0]=(((r22*x8889))+(((-1.0)*r21*sj12*x8896))+((x8888*x8890)));
evalcond[1]=((((-1.0)*r21*x8898))+((x8889*x8890))+(((-1.0)*r22*x8896)));
evalcond[2]=(((r00*x8897))+((r02*x8889))+(((-1.0)*x8892))+((cj9*sj7))+(((-1.0)*r01*sj12*x8896)));
evalcond[3]=((((-1.0)*r11*sj12*x8896))+((r10*x8897))+((r12*x8889))+(((-1.0)*x8899)));
evalcond[4]=(x8892+(((-1.0)*r11*x8898))+(((-1.0)*r12*x8896))+((r10*x8895))+(((-1.0)*cj9*x8891)));
evalcond[5]=((((-1.0)*r01*x8898))+((r00*x8895))+(((-1.0)*r02*x8896))+(((-1.0)*x8899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8900=((-1.0)*r10);
IkReal x8902 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8902)==0){
continue;
}
IkReal x8901=pow(x8902,-0.5);
CheckValue<IkReal> x8903 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8900),IKFAST_ATAN2_MAGTHRESH);
if(!x8903.valid){
continue;
}
IkReal gconst60=((-1.0)*(x8903.value));
IkReal gconst61=(r11*x8901);
IkReal gconst62=(x8900*x8901);
CheckValue<IkReal> x8904 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8904.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j12+(x8904.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8905=(cj9*sj8);
IkReal x8906=(gconst62*r20);
IkReal x8907=(gconst61*r21);
IkReal x8908=(sj8*sj9);
CheckValue<IkReal> x8909 = IKatan2WithCheck(IkReal((((x8906*x8908))+(((-1.0)*x8907*x8908))+(((-1.0)*r22*x8905)))),IkReal((((x8905*x8906))+(((-1.0)*x8905*x8907))+((r22*x8908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8909.valid){
continue;
}
CheckValue<IkReal> x8910=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8906*x8906)+(x8907*x8907)+(((-2.0)*x8906*x8907)))),-1);
if(!x8910.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x8909.value)+(((1.5707963267949)*(x8910.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8911=IKsin(j11);
IkReal x8912=IKcos(j11);
IkReal x8913=(cj7*sj9);
IkReal x8914=(cj9*sj7);
IkReal x8915=(gconst61*r11);
IkReal x8916=((1.0)*sj9);
IkReal x8917=(gconst61*r21);
IkReal x8918=(gconst61*r01);
IkReal x8919=((1.0)*cj9);
IkReal x8920=(gconst62*x8911);
IkReal x8921=(gconst62*x8912);
IkReal x8922=((1.0)*x8911);
IkReal x8923=((1.0)*x8912);
evalcond[0]=(((r20*x8920))+((r22*x8912))+(((-1.0)*x8917*x8922))+(((-1.0)*sj8*x8916)));
evalcond[1]=(((r20*x8921))+(((-1.0)*r22*x8922))+(((-1.0)*x8917*x8923))+(((-1.0)*sj8*x8919)));
evalcond[2]=((((-1.0)*x8918*x8922))+((r02*x8912))+x8914+((cj8*x8913))+((r00*x8920)));
evalcond[3]=(((cj8*sj7*sj9))+(((-1.0)*cj7*x8919))+(((-1.0)*x8915*x8922))+((r10*x8920))+((r12*x8912)));
evalcond[4]=(x8913+((cj8*x8914))+(((-1.0)*r12*x8922))+(((-1.0)*x8915*x8923))+((r10*x8921)));
evalcond[5]=((((-1.0)*r02*x8922))+(((-1.0)*x8918*x8923))+(((-1.0)*sj7*x8916))+((cj7*cj8*cj9))+((r00*x8921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8924=((-1.0)*r11);
IkReal x8926 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8926)==0){
continue;
}
IkReal x8925=pow(x8926,-0.5);
CheckValue<IkReal> x8927 = IKatan2WithCheck(IkReal(x8924),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8927.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x8927.value))));
IkReal gconst64=(x8924*x8925);
IkReal gconst65=((1.0)*r10*x8925);
CheckValue<IkReal> x8928 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8928.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12+(x8928.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8929=(gconst64*r21);
IkReal x8930=(sj8*sj9);
IkReal x8931=(gconst65*r20);
IkReal x8932=((1.0)*cj9*sj8);
CheckValue<IkReal> x8933 = IKatan2WithCheck(IkReal(((((-1.0)*x8929*x8930))+(((-1.0)*r22*x8932))+((x8930*x8931)))),IkReal((((cj9*sj8*x8931))+(((-1.0)*x8929*x8932))+((r22*x8930)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8933.valid){
continue;
}
CheckValue<IkReal> x8934=IKPowWithIntegerCheck(IKsign(((x8931*x8931)+(((-2.0)*x8929*x8931))+(x8929*x8929)+(r22*r22))),-1);
if(!x8934.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x8933.value)+(((1.5707963267949)*(x8934.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8935=IKsin(j11);
IkReal x8936=IKcos(j11);
IkReal x8937=(cj7*sj9);
IkReal x8938=(gconst65*r10);
IkReal x8939=(cj8*cj9);
IkReal x8940=((1.0)*sj9);
IkReal x8941=((1.0)*cj9);
IkReal x8942=((1.0)*x8935);
IkReal x8943=(gconst65*x8935);
IkReal x8944=(gconst65*x8936);
IkReal x8945=((1.0)*gconst64*x8936);
evalcond[0]=((((-1.0)*gconst64*r21*x8942))+(((-1.0)*sj8*x8940))+((r20*x8943))+((r22*x8936)));
evalcond[1]=((((-1.0)*r22*x8942))+(((-1.0)*sj8*x8941))+((r20*x8944))+(((-1.0)*r21*x8945)));
evalcond[2]=(((cj8*x8937))+((cj9*sj7))+((r00*x8943))+(((-1.0)*gconst64*r01*x8942))+((r02*x8936)));
evalcond[3]=((((-1.0)*cj7*x8941))+((r12*x8936))+(((-1.0)*gconst64*r11*x8942))+((x8935*x8938))+((cj8*sj7*sj9)));
evalcond[4]=(((x8936*x8938))+(((-1.0)*r11*x8945))+(((-1.0)*r12*x8942))+x8937+((sj7*x8939)));
evalcond[5]=((((-1.0)*r01*x8945))+(((-1.0)*sj7*x8940))+(((-1.0)*r02*x8942))+((r00*x8944))+((cj7*x8939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8947 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8947)==0){
continue;
}
IkReal x8946=pow(x8947,-0.5);
CheckValue<IkReal> x8948 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8948.valid){
continue;
}
IkReal gconst66=((-1.0)*(x8948.value));
IkReal gconst67=((-1.0)*r01*x8946);
IkReal gconst68=(r00*x8946);
CheckValue<IkReal> x8949 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8949.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8949.value)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8950=(cj9*sj8);
IkReal x8951=(gconst68*r20);
IkReal x8952=(gconst67*r21);
IkReal x8953=(sj8*sj9);
CheckValue<IkReal> x8954=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8951*x8951)+(((-2.0)*x8951*x8952))+(x8952*x8952))),-1);
if(!x8954.valid){
continue;
}
CheckValue<IkReal> x8955 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x8950))+(((-1.0)*x8952*x8953))+((x8951*x8953)))),IkReal((((r22*x8953))+((x8950*x8951))+(((-1.0)*x8950*x8952)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8955.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8954.value)))+(x8955.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8956=IKsin(j11);
IkReal x8957=IKcos(j11);
IkReal x8958=(cj7*sj9);
IkReal x8959=(cj8*cj9);
IkReal x8960=((1.0)*sj9);
IkReal x8961=(gconst67*r21);
IkReal x8962=((1.0)*cj9);
IkReal x8963=(gconst68*x8956);
IkReal x8964=(gconst68*x8957);
IkReal x8965=((1.0)*x8956);
IkReal x8966=((1.0)*gconst67*x8957);
evalcond[0]=(((r22*x8957))+(((-1.0)*sj8*x8960))+((r20*x8963))+(((-1.0)*x8961*x8965)));
evalcond[1]=((((-1.0)*x8957*x8961))+(((-1.0)*r22*x8965))+(((-1.0)*sj8*x8962))+((r20*x8964)));
evalcond[2]=(((r02*x8957))+((cj8*x8958))+((cj9*sj7))+((r00*x8963))+(((-1.0)*gconst67*r01*x8965)));
evalcond[3]=((((-1.0)*cj7*x8962))+((cj8*sj7*sj9))+((r10*x8963))+((r12*x8957))+(((-1.0)*gconst67*r11*x8965)));
evalcond[4]=((((-1.0)*r12*x8965))+x8958+(((-1.0)*r11*x8966))+((r10*x8964))+((sj7*x8959)));
evalcond[5]=((((-1.0)*r01*x8966))+((r00*x8964))+(((-1.0)*r02*x8965))+(((-1.0)*sj7*x8960))+((cj7*x8959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8968 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8968)==0){
continue;
}
IkReal x8967=pow(x8968,-0.5);
CheckValue<IkReal> x8969 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8969.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x8969.value))));
IkReal gconst70=((1.0)*r01*x8967);
IkReal gconst71=((-1.0)*r00*x8967);
CheckValue<IkReal> x8970 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8970.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8970.value)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8971=(cj9*sj8);
IkReal x8972=(gconst71*r20);
IkReal x8973=(sj8*sj9);
IkReal x8974=(gconst70*r21);
CheckValue<IkReal> x8975 = IKatan2WithCheck(IkReal((((x8972*x8973))+(((-1.0)*x8973*x8974))+(((-1.0)*r22*x8971)))),IkReal((((x8971*x8972))+(((-1.0)*x8971*x8974))+((r22*x8973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8975.valid){
continue;
}
CheckValue<IkReal> x8976=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8972*x8972)+(((-2.0)*x8972*x8974))+(x8974*x8974))),-1);
if(!x8976.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x8975.value)+(((1.5707963267949)*(x8976.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8977=IKsin(j11);
IkReal x8978=IKcos(j11);
IkReal x8979=(cj7*sj9);
IkReal x8980=(gconst70*r21);
IkReal x8981=(cj8*cj9);
IkReal x8982=((1.0)*sj9);
IkReal x8983=((1.0)*cj9);
IkReal x8984=((1.0)*x8977);
IkReal x8985=(gconst71*x8978);
IkReal x8986=(gconst71*x8977);
IkReal x8987=((1.0)*gconst70*x8978);
evalcond[0]=((((-1.0)*sj8*x8982))+(((-1.0)*x8980*x8984))+((r20*x8986))+((r22*x8978)));
evalcond[1]=((((-1.0)*sj8*x8983))+(((-1.0)*x8978*x8980))+(((-1.0)*r22*x8984))+((r20*x8985)));
evalcond[2]=(((r00*x8986))+((cj8*x8979))+(((-1.0)*gconst70*r01*x8984))+((cj9*sj7))+((r02*x8978)));
evalcond[3]=(((cj8*sj7*sj9))+(((-1.0)*cj7*x8983))+((r12*x8978))+(((-1.0)*gconst70*r11*x8984))+((r10*x8986)));
evalcond[4]=(((sj7*x8981))+x8979+(((-1.0)*r12*x8984))+(((-1.0)*r11*x8987))+((r10*x8985)));
evalcond[5]=(((r00*x8985))+(((-1.0)*r01*x8987))+((cj7*x8981))+(((-1.0)*r02*x8984))+(((-1.0)*sj7*x8982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x8988=((-1.0)*px);
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8988);
rxp1_1=(px*r21);
rxp1_2=(r11*x8988);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=r02;
j11eval[1]=IKsign(r02);
j11eval[2]=((IKabs((cj9*sj7)))+(IKabs((sj7*sj9))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x8989=((-1.0)*px);
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8989);
rxp1_1=(px*r21);
rxp1_2=(r11*x8989);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x8990=(cj8*sj7);
IkReal x8991=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[0]=x8991;
j11eval[1]=((IKabs((cj9*x8990)))+(IKabs((sj9*x8990))));
j11eval[2]=IKsign(x8991);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x8992=((-1.0)*px);
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8992);
rxp1_1=(px*r21);
rxp1_2=(r11*x8992);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[1]=r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x8993=((-1.0)*sj7);
CheckValue<IkReal> x8994=IKPowWithIntegerCheck(((((-1.0)*r11*sj12))+((cj12*r10))),-1);
if(!x8994.valid){
continue;
}
CheckValue<IkReal> x8995=IKPowWithIntegerCheck(r02,-1);
if(!x8995.valid){
continue;
}
if( IKabs((cj8*sj9*x8993*(x8994.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj9*x8993*(x8995.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj8*sj9*x8993*(x8994.value)))+IKsqr((cj9*x8993*(x8995.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((cj8*sj9*x8993*(x8994.value)), (cj9*x8993*(x8995.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x8996=IKsin(j11);
IkReal x8997=IKcos(j11);
IkReal x8998=(sj7*sj9);
IkReal x8999=(cj9*sj7);
IkReal x9000=(cj12*x8996);
IkReal x9001=(cj12*x8997);
IkReal x9002=((1.0)*x8996);
IkReal x9003=((1.0)*sj12*x8997);
evalcond[0]=(x8999+((r02*x8997)));
evalcond[1]=((((-1.0)*r02*x9002))+(((-1.0)*x8998)));
evalcond[2]=((((-1.0)*r21*sj12*x9002))+((r20*x9000)));
evalcond[3]=((((-1.0)*r21*x9003))+((r20*x9001)));
evalcond[4]=(((cj8*x8998))+(((-1.0)*r11*sj12*x9002))+((r10*x9000)));
evalcond[5]=(((cj8*x8999))+(((-1.0)*r11*x9003))+((r10*x9001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9004=((-1.0)*cj8*sj7);
CheckValue<IkReal> x9005=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj12))+((cj12*r10)))),-1);
if(!x9005.valid){
continue;
}
CheckValue<IkReal> x9006 = IKatan2WithCheck(IkReal((sj9*x9004)),IkReal((cj9*x9004)),IKFAST_ATAN2_MAGTHRESH);
if(!x9006.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9005.value)))+(x9006.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9007=IKsin(j11);
IkReal x9008=IKcos(j11);
IkReal x9009=(sj7*sj9);
IkReal x9010=(cj9*sj7);
IkReal x9011=(cj12*x9007);
IkReal x9012=(cj12*x9008);
IkReal x9013=((1.0)*x9007);
IkReal x9014=((1.0)*sj12*x9008);
evalcond[0]=(((r02*x9008))+x9010);
evalcond[1]=((((-1.0)*x9009))+(((-1.0)*r02*x9013)));
evalcond[2]=((((-1.0)*r21*sj12*x9013))+((r20*x9011)));
evalcond[3]=((((-1.0)*r21*x9014))+((r20*x9012)));
evalcond[4]=(((cj8*x9009))+(((-1.0)*r11*sj12*x9013))+((r10*x9011)));
evalcond[5]=(((cj8*x9010))+(((-1.0)*r11*x9014))+((r10*x9012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9015=((-1.0)*sj7);
CheckValue<IkReal> x9016=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x9016.valid){
continue;
}
CheckValue<IkReal> x9017 = IKatan2WithCheck(IkReal((sj9*x9015)),IkReal((cj9*x9015)),IKFAST_ATAN2_MAGTHRESH);
if(!x9017.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9016.value)))+(x9017.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9018=IKsin(j11);
IkReal x9019=IKcos(j11);
IkReal x9020=(sj7*sj9);
IkReal x9021=(cj9*sj7);
IkReal x9022=(cj12*x9018);
IkReal x9023=(cj12*x9019);
IkReal x9024=((1.0)*x9018);
IkReal x9025=((1.0)*sj12*x9019);
evalcond[0]=(x9021+((r02*x9019)));
evalcond[1]=((((-1.0)*r02*x9024))+(((-1.0)*x9020)));
evalcond[2]=((((-1.0)*r21*sj12*x9024))+((r20*x9022)));
evalcond[3]=((((-1.0)*r21*x9025))+((r20*x9023)));
evalcond[4]=((((-1.0)*r11*sj12*x9024))+((r10*x9022))+((cj8*x9020)));
evalcond[5]=((((-1.0)*r11*x9025))+((r10*x9023))+((cj8*x9021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9026=cj12*cj12;
IkReal x9027=r21*r21;
IkReal x9028=(r22*sj8);
IkReal x9029=((1.0)*cj9);
IkReal x9030=(cj12*r20*sj8);
IkReal x9031=(r21*sj12*sj8);
CheckValue<IkReal> x9032=IKPowWithIntegerCheck(IKsign(((r22*r22)+x9027+(((-2.0)*cj12*r20*r21*sj12))+(((-1.0)*x9026*x9027))+((x9026*(r20*r20))))),-1);
if(!x9032.valid){
continue;
}
CheckValue<IkReal> x9033 = IKatan2WithCheck(IkReal(((((-1.0)*sj9*x9031))+((sj9*x9030))+(((-1.0)*x9028*x9029)))),IkReal(((((-1.0)*x9029*x9031))+((sj9*x9028))+((cj9*x9030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9033.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9032.value)))+(x9033.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9034=IKsin(j11);
IkReal x9035=IKcos(j11);
IkReal x9036=(cj7*sj9);
IkReal x9037=(cj12*r20);
IkReal x9038=(cj8*cj9);
IkReal x9039=((1.0)*sj9);
IkReal x9040=((1.0)*cj9);
IkReal x9041=(cj12*x9035);
IkReal x9042=((1.0)*x9034);
IkReal x9043=(cj12*x9034);
IkReal x9044=((1.0)*sj12*x9035);
evalcond[0]=((((-1.0)*r21*sj12*x9042))+((r22*x9035))+(((-1.0)*sj8*x9039))+((x9034*x9037)));
evalcond[1]=((((-1.0)*sj8*x9040))+(((-1.0)*r22*x9042))+(((-1.0)*r21*x9044))+((x9035*x9037)));
evalcond[2]=((((-1.0)*r01*sj12*x9042))+((cj9*sj7))+((r00*x9043))+((r02*x9035))+((cj8*x9036)));
evalcond[3]=(((cj8*sj7*sj9))+(((-1.0)*r11*sj12*x9042))+(((-1.0)*cj7*x9040))+((r10*x9043))+((r12*x9035)));
evalcond[4]=(((sj7*x9038))+x9036+(((-1.0)*r11*x9044))+(((-1.0)*r12*x9042))+((r10*x9041)));
evalcond[5]=((((-1.0)*sj7*x9039))+((cj7*x9038))+(((-1.0)*r01*x9044))+((r00*x9041))+(((-1.0)*r02*x9042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9045=(sj8*sj9);
IkReal x9046=((1.0)*cj12);
IkReal x9047=(cj9*sj7);
IkReal x9048=(r21*sj12);
IkReal x9049=(cj7*cj8*sj9);
CheckValue<IkReal> x9050=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9046))+(((-1.0)*r10*sj12)))),-1);
if(!x9050.valid){
continue;
}
CheckValue<IkReal> x9051 = IKatan2WithCheck(IkReal((((r22*x9047))+((r22*x9049))+((r02*x9045)))),IkReal((((r01*sj12*x9045))+((x9048*x9049))+(((-1.0)*r20*x9046*x9049))+(((-1.0)*r20*x9046*x9047))+(((-1.0)*r00*x9045*x9046))+((x9047*x9048)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9051.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9050.value)))+(x9051.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9052=IKsin(j11);
IkReal x9053=IKcos(j11);
IkReal x9054=(cj7*sj9);
IkReal x9055=(cj12*r20);
IkReal x9056=(cj8*cj9);
IkReal x9057=((1.0)*sj9);
IkReal x9058=((1.0)*cj9);
IkReal x9059=(cj12*x9053);
IkReal x9060=((1.0)*x9052);
IkReal x9061=(cj12*x9052);
IkReal x9062=((1.0)*sj12*x9053);
evalcond[0]=((((-1.0)*sj8*x9057))+((x9052*x9055))+(((-1.0)*r21*sj12*x9060))+((r22*x9053)));
evalcond[1]=((((-1.0)*r21*x9062))+(((-1.0)*sj8*x9058))+((x9053*x9055))+(((-1.0)*r22*x9060)));
evalcond[2]=(((r00*x9061))+((cj8*x9054))+(((-1.0)*r01*sj12*x9060))+((cj9*sj7))+((r02*x9053)));
evalcond[3]=(((cj8*sj7*sj9))+((r10*x9061))+(((-1.0)*cj7*x9058))+((r12*x9053))+(((-1.0)*r11*sj12*x9060)));
evalcond[4]=(((sj7*x9056))+x9054+((r10*x9059))+(((-1.0)*r12*x9060))+(((-1.0)*r11*x9062)));
evalcond[5]=((((-1.0)*r01*x9062))+((r00*x9059))+(((-1.0)*r02*x9060))+((cj7*x9056))+(((-1.0)*sj7*x9057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9063=(r21*sj12);
IkReal x9064=((1.0)*cj12);
IkReal x9065=(sj8*sj9);
IkReal x9066=(cj8*sj7*sj9);
IkReal x9067=((1.0)*cj7*cj9);
CheckValue<IkReal> x9068 = IKatan2WithCheck(IkReal((((r22*x9066))+((r12*x9065))+(((-1.0)*r22*x9067)))),IkReal((((cj12*cj7*cj9*r20))+((x9063*x9066))+(((-1.0)*r10*x9064*x9065))+((r11*sj12*x9065))+(((-1.0)*r20*x9064*x9066))+(((-1.0)*x9063*x9067)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9068.valid){
continue;
}
CheckValue<IkReal> x9069=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x9069.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x9068.value)+(((1.5707963267949)*(x9069.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9070=IKsin(j11);
IkReal x9071=IKcos(j11);
IkReal x9072=(cj7*sj9);
IkReal x9073=(cj12*r20);
IkReal x9074=(cj8*cj9);
IkReal x9075=((1.0)*sj9);
IkReal x9076=((1.0)*cj9);
IkReal x9077=(cj12*x9071);
IkReal x9078=((1.0)*x9070);
IkReal x9079=(cj12*x9070);
IkReal x9080=((1.0)*sj12*x9071);
evalcond[0]=((((-1.0)*sj8*x9075))+(((-1.0)*r21*sj12*x9078))+((x9070*x9073))+((r22*x9071)));
evalcond[1]=((((-1.0)*sj8*x9076))+((x9071*x9073))+(((-1.0)*r21*x9080))+(((-1.0)*r22*x9078)));
evalcond[2]=(((cj8*x9072))+((cj9*sj7))+((r00*x9079))+(((-1.0)*r01*sj12*x9078))+((r02*x9071)));
evalcond[3]=(((cj8*sj7*sj9))+(((-1.0)*cj7*x9076))+(((-1.0)*r11*sj12*x9078))+((r12*x9071))+((r10*x9079)));
evalcond[4]=(((sj7*x9074))+(((-1.0)*r12*x9078))+x9072+((r10*x9077))+(((-1.0)*r11*x9080)));
evalcond[5]=((((-1.0)*sj7*x9075))+(((-1.0)*r01*x9080))+(((-1.0)*r02*x9078))+((r00*x9077))+((cj7*x9074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7, j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x9081=cj8*cj8;
IkReal x9082=cj9*cj9;
IkReal x9083=(cj12*r01);
IkReal x9084=((26250000000000.0)*sj8);
IkReal x9085=((68162500000.0)*sj9);
IkReal x9086=((68162500000.0)*py);
IkReal x9087=((57256500000.0)*sj8);
IkReal x9088=(cj8*cj9);
IkReal x9089=((27265000000.0)*sj9);
IkReal x9090=(cj12*r11);
IkReal x9091=((68162500000.0)*px);
IkReal x9092=(r00*sj12);
IkReal x9093=((65625000000000.0)*sj8);
IkReal x9094=((27265000000.0)*r10*sj12);
IkReal x9095=((29735209.0)*x9082);
CheckValue<IkReal> x9096 = IKatan2WithCheck(IkReal((((py*x9093))+(((-1.0)*px*x9085))+(((-1.0)*x9086))+(((-1.0)*x9094))+(((27265000000.0)*x9088*x9090))+((r10*sj12*x9084))+((x9086*x9088))+(((-1.0)*x9083*x9089))+((x9088*x9094))+(((-27265000000.0)*x9090))+((x9084*x9090))+(((-1.0)*x9089*x9092)))),IkReal((((py*x9085))+((x9083*x9084))+(((27265000000.0)*x9083*x9088))+(((-1.0)*x9091))+(((27265000000.0)*x9088*x9092))+((r10*sj12*x9089))+(((-27265000000.0)*x9083))+((x9089*x9090))+((x9088*x9091))+(((-27265000000.0)*x9092))+((x9084*x9092))+((px*x9093)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9096.valid){
continue;
}
CheckValue<IkReal> x9097=IKPowWithIntegerCheck(IKsign(((27562559470418.0)+((x9081*x9095))+(((-27562500000000.0)*x9081))+((x9087*x9088))+(((-1.0)*x9087))+(((-1.0)*x9095))+(((-59470418.0)*x9088)))),-1);
if(!x9097.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x9096.value)+(((1.5707963267949)*(x9097.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[2];
IkReal x9098=IKcos(j7);
IkReal x9099=IKsin(j7);
IkReal x9100=((0.42)*sj8);
IkReal x9101=(cj8*cj9);
IkReal x9102=((0.4)*cj12);
IkReal x9103=((0.4)*sj12);
IkReal x9104=((0.00043624)*x9098);
IkReal x9105=((0.00043624)*x9099);
evalcond[0]=(((x9098*x9100))+(((-1.0)*r01*x9102))+(((-1.0)*px))+(((-1.0)*r00*x9103))+((x9101*x9104))+(((-1.0)*sj9*x9105))+(((-1.0)*x9104)));
evalcond[1]=((((-1.0)*r10*x9103))+(((-1.0)*r11*x9102))+(((-1.0)*py))+((x9101*x9105))+((x9099*x9100))+((sj9*x9104))+(((-1.0)*x9105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j11eval[2];
IkReal x9106=(((r00*sj12))+((cj12*r01)));
j11eval[0]=x9106;
j11eval[1]=IKsign(x9106);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9107=((((-1.0)*r10*sj12))+(((-1.0)*cj12*r11)));
j11eval[0]=x9107;
j11eval[1]=IKsign(x9107);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9108=(((r20*sj12))+((cj12*r21)));
j11eval[0]=x9108;
j11eval[1]=IKsign(x9108);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x9110 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x9110)==0){
continue;
}
IkReal x9109=pow(x9110,-0.5);
CheckValue<IkReal> x9111 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9111.valid){
continue;
}
IkReal gconst0=((-1.0)*(x9111.value));
IkReal gconst1=((-1.0)*r21*x9109);
IkReal gconst2=(r20*x9109);
CheckValue<IkReal> x9112 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9112.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j12+(x9112.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9113=(cj7*cj9);
IkReal x9114=(sj8*sj9);
IkReal x9115=((1.0)*gconst2);
IkReal x9116=(gconst1*r21);
IkReal x9117=(cj8*sj7*sj9);
CheckValue<IkReal> x9118 = IKatan2WithCheck(IkReal((((r12*x9114))+(((-1.0)*r22*x9113))+((r22*x9117)))),IkReal(((((-1.0)*x9113*x9116))+((gconst1*r11*x9114))+(((-1.0)*r10*x9114*x9115))+((x9116*x9117))+((gconst2*r20*x9113))+(((-1.0)*r20*x9115*x9117)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9118.valid){
continue;
}
CheckValue<IkReal> x9119=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9119.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x9118.value)+(((1.5707963267949)*(x9119.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x9120=IKsin(j11);
IkReal x9121=IKcos(j11);
IkReal x9122=(cj10*gconst2);
IkReal x9123=(cj7*sj9);
IkReal x9124=(gconst2*sj10);
IkReal x9125=((1.0)*r21);
IkReal x9126=(cj10*gconst1);
IkReal x9127=(cj8*cj9);
IkReal x9128=((1.0)*r20);
IkReal x9129=(gconst1*sj10);
IkReal x9130=((1.0)*sj9);
IkReal x9131=((1.0)*r10);
IkReal x9132=((1.0)*cj9);
IkReal x9133=(gconst2*x9120);
IkReal x9134=(sj10*x9120);
IkReal x9135=(cj10*x9120);
IkReal x9136=((1.0)*r00*x9121);
IkReal x9137=(x9121*x9129);
IkReal x9138=((1.0)*gconst1*x9120);
evalcond[0]=(((r20*x9133))+((r22*x9121))+(((-1.0)*gconst1*x9120*x9125))+(((-1.0)*sj8*x9130)));
evalcond[1]=(((r02*x9121))+((cj9*sj7))+(((-1.0)*r01*x9138))+((cj8*x9123))+((r00*x9133)));
evalcond[2]=(((r10*x9133))+((cj8*sj7*sj9))+(((-1.0)*r11*x9138))+(((-1.0)*cj7*x9132))+((r12*x9121)));
evalcond[3]=(cj8+((r22*x9134))+((r20*x9126))+((r21*x9137))+(((-1.0)*x9121*x9124*x9128))+((r21*x9122)));
evalcond[4]=((((-1.0)*x9124*x9136))+((r02*x9134))+((r01*x9122))+((cj7*sj8))+((r00*x9126))+((r01*x9137)));
evalcond[5]=(((r10*x9126))+(((-1.0)*x9121*x9124*x9131))+((r12*x9134))+((r11*x9137))+((sj7*sj8))+((r11*x9122)));
evalcond[6]=((((-1.0)*x9124*x9125))+((r21*x9121*x9126))+((r22*x9135))+(((-1.0)*sj8*x9132))+(((-1.0)*x9128*x9129))+(((-1.0)*x9121*x9122*x9128)));
evalcond[7]=(((r11*x9121*x9126))+(((-1.0)*r11*x9124))+x9123+(((-1.0)*x9129*x9131))+((r12*x9135))+(((-1.0)*x9121*x9122*x9131))+((sj7*x9127)));
evalcond[8]=((((-1.0)*r00*x9129))+(((-1.0)*sj7*x9130))+((cj7*x9127))+(((-1.0)*x9122*x9136))+((r01*x9121*x9126))+((r02*x9135))+(((-1.0)*r01*x9124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9140 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x9140)==0){
continue;
}
IkReal x9139=pow(x9140,-0.5);
CheckValue<IkReal> x9141 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9141.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x9141.value))));
IkReal gconst4=((1.0)*r21*x9139);
IkReal gconst5=((-1.0)*r20*x9139);
CheckValue<IkReal> x9142 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9142.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12+(x9142.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9143=(sj8*sj9);
IkReal x9144=(gconst4*r21);
IkReal x9145=(gconst5*r20);
IkReal x9146=((1.0)*cj7*cj9);
IkReal x9147=(cj8*sj7*sj9);
CheckValue<IkReal> x9148 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x9146))+((r12*x9143))+((r22*x9147)))),IkReal((((gconst4*r11*x9143))+(((-1.0)*gconst5*r10*x9143))+((x9144*x9147))+(((-1.0)*x9145*x9147))+(((-1.0)*x9144*x9146))+((cj7*cj9*x9145)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9148.valid){
continue;
}
CheckValue<IkReal> x9149=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9149.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x9148.value)+(((1.5707963267949)*(x9149.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x9150=IKsin(j11);
IkReal x9151=IKcos(j11);
IkReal x9152=((1.0)*gconst5);
IkReal x9153=(r11*sj10);
IkReal x9154=(cj7*sj9);
IkReal x9155=(cj9*sj7);
IkReal x9156=(gconst4*r10);
IkReal x9157=(r21*sj10);
IkReal x9158=(gconst4*r01);
IkReal x9159=((1.0)*sj10);
IkReal x9160=((1.0)*sj8);
IkReal x9161=(cj7*cj9);
IkReal x9162=(cj10*r11);
IkReal x9163=(gconst4*r20);
IkReal x9164=(sj7*sj9);
IkReal x9165=(cj10*r21);
IkReal x9166=(gconst4*r00);
IkReal x9167=(r20*x9151);
IkReal x9168=((1.0)*x9150);
IkReal x9169=(sj10*x9150);
IkReal x9170=(sj10*x9151);
IkReal x9171=(gconst4*x9151);
IkReal x9172=(gconst5*x9150);
IkReal x9173=(cj10*x9151);
IkReal x9174=(cj10*x9150);
evalcond[0]=(((r22*x9151))+((r20*x9172))+(((-1.0)*gconst4*r21*x9168))+(((-1.0)*sj9*x9160)));
evalcond[1]=(((r02*x9151))+((r00*x9172))+x9155+(((-1.0)*x9158*x9168))+((cj8*x9154)));
evalcond[2]=(((r10*x9172))+(((-1.0)*x9161))+(((-1.0)*gconst4*r11*x9168))+((r12*x9151))+((cj8*x9164)));
evalcond[3]=(cj8+((gconst5*x9165))+((r22*x9169))+((x9157*x9171))+(((-1.0)*sj10*x9152*x9167))+((cj10*x9163)));
evalcond[4]=((((-1.0)*r00*x9152*x9170))+((r02*x9169))+((cj10*gconst5*r01))+((cj7*sj8))+((cj10*x9166))+((x9158*x9170)));
evalcond[5]=(((gconst5*x9162))+((x9153*x9171))+((cj10*x9156))+((r12*x9169))+((sj7*sj8))+(((-1.0)*r10*x9152*x9170)));
evalcond[6]=((((-1.0)*x9159*x9163))+(((-1.0)*cj9*x9160))+(((-1.0)*x9152*x9157))+((x9165*x9171))+(((-1.0)*cj10*x9152*x9167))+((r22*x9174)));
evalcond[7]=((((-1.0)*x9152*x9153))+x9154+(((-1.0)*x9156*x9159))+((x9162*x9171))+((r12*x9174))+((cj8*x9155))+(((-1.0)*r10*x9152*x9173)));
evalcond[8]=((((-1.0)*r00*x9152*x9173))+((r02*x9174))+(((-1.0)*x9159*x9166))+(((-1.0)*x9164))+(((-1.0)*r01*sj10*x9152))+((x9158*x9173))+((cj8*x9161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9175=((-1.0)*r10);
IkReal x9177 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x9177)==0){
continue;
}
IkReal x9176=pow(x9177,-0.5);
CheckValue<IkReal> x9178 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x9175),IKFAST_ATAN2_MAGTHRESH);
if(!x9178.valid){
continue;
}
IkReal gconst6=((-1.0)*(x9178.value));
IkReal gconst7=(r11*x9176);
IkReal gconst8=(x9175*x9176);
CheckValue<IkReal> x9179 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x9179.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j12+(x9179.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9180=(sj8*sj9);
IkReal x9181=((1.0)*gconst8);
IkReal x9182=(cj7*cj9);
IkReal x9183=(gconst7*r21);
IkReal x9184=(cj8*sj7*sj9);
CheckValue<IkReal> x9185 = IKatan2WithCheck(IkReal((((r12*x9180))+((r22*x9184))+(((-1.0)*r22*x9182)))),IkReal(((((-1.0)*r20*x9181*x9184))+((x9183*x9184))+(((-1.0)*x9182*x9183))+(((-1.0)*r10*x9180*x9181))+((gconst7*r11*x9180))+((gconst8*r20*x9182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9185.valid){
continue;
}
CheckValue<IkReal> x9186=IKPowWithIntegerCheck(IKsign((((gconst7*r00))+((gconst8*r01)))),-1);
if(!x9186.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x9185.value)+(((1.5707963267949)*(x9186.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x9187=IKsin(j11);
IkReal x9188=IKcos(j11);
IkReal x9189=((1.0)*gconst7);
IkReal x9190=(r00*sj10);
IkReal x9191=(cj7*sj9);
IkReal x9192=(gconst8*r10);
IkReal x9193=((1.0)*gconst8);
IkReal x9194=(r21*sj10);
IkReal x9195=(cj9*sj7);
IkReal x9196=(r11*sj10);
IkReal x9197=(cj10*gconst8);
IkReal x9198=(cj10*gconst7);
IkReal x9199=((1.0)*sj9);
IkReal x9200=(r01*sj10);
IkReal x9201=((1.0)*cj9);
IkReal x9202=(cj10*x9188);
IkReal x9203=(sj10*x9187);
IkReal x9204=(gconst7*x9188);
IkReal x9205=(gconst8*x9187);
IkReal x9206=(cj10*x9187);
IkReal x9207=(sj10*x9188);
IkReal x9208=(x9188*x9198);
evalcond[0]=(((r20*x9205))+(((-1.0)*sj8*x9199))+((r22*x9188))+(((-1.0)*r21*x9187*x9189)));
evalcond[1]=(((r00*x9205))+((r02*x9188))+((cj8*x9191))+(((-1.0)*r01*x9187*x9189))+x9195);
evalcond[2]=(((cj8*sj7*sj9))+((r12*x9188))+(((-1.0)*cj7*x9201))+((x9187*x9192))+(((-1.0)*r11*x9187*x9189)));
evalcond[3]=(cj8+((r22*x9203))+((x9194*x9204))+((r21*x9197))+(((-1.0)*r20*x9193*x9207))+((r20*x9198)));
evalcond[4]=(((r01*x9197))+((r00*x9198))+((x9200*x9204))+((r02*x9203))+(((-1.0)*x9188*x9190*x9193))+((cj7*sj8)));
evalcond[5]=(((r10*x9198))+((r12*x9203))+(((-1.0)*x9192*x9207))+((x9196*x9204))+((sj7*sj8))+((r11*x9197)));
evalcond[6]=(((r22*x9206))+(((-1.0)*r20*x9193*x9202))+((r21*x9208))+(((-1.0)*sj8*x9201))+(((-1.0)*r20*sj10*x9189))+(((-1.0)*x9193*x9194)));
evalcond[7]=(((cj8*x9195))+((r11*x9208))+x9191+((r12*x9206))+(((-1.0)*x9192*x9202))+(((-1.0)*r10*sj10*x9189))+(((-1.0)*x9193*x9196)));
evalcond[8]=(((r01*x9208))+(((-1.0)*x9189*x9190))+((r02*x9206))+((cj7*cj8*cj9))+(((-1.0)*r00*x9193*x9202))+(((-1.0)*sj7*x9199))+(((-1.0)*x9193*x9200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9209=((-1.0)*r11);
IkReal x9211 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x9211)==0){
continue;
}
IkReal x9210=pow(x9211,-0.5);
CheckValue<IkReal> x9212 = IKatan2WithCheck(IkReal(x9209),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x9212.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x9212.value))));
IkReal gconst10=(x9209*x9210);
IkReal gconst11=((1.0)*r10*x9210);
CheckValue<IkReal> x9213 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x9213.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12+(x9213.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9214=(cj7*cj9);
IkReal x9215=(gconst10*r21);
IkReal x9216=(gconst11*r20);
IkReal x9217=(sj8*sj9);
IkReal x9218=(cj8*sj7*sj9);
CheckValue<IkReal> x9219 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x9214))+((r12*x9217))+((r22*x9218)))),IkReal(((((-1.0)*x9216*x9218))+((x9214*x9216))+(((-1.0)*gconst11*r10*x9217))+((x9215*x9218))+(((-1.0)*x9214*x9215))+((gconst10*r11*x9217)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9219.valid){
continue;
}
CheckValue<IkReal> x9220=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x9220.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x9219.value)+(((1.5707963267949)*(x9220.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x9221=IKsin(j11);
IkReal x9222=IKcos(j11);
IkReal x9223=(cj10*gconst10);
IkReal x9224=(cj7*sj9);
IkReal x9225=(gconst11*r10);
IkReal x9226=((1.0)*gconst10);
IkReal x9227=(r00*sj10);
IkReal x9228=(r20*sj10);
IkReal x9229=(cj8*cj9);
IkReal x9230=((1.0)*sj9);
IkReal x9231=(gconst11*r00);
IkReal x9232=(cj10*gconst11);
IkReal x9233=((1.0)*cj9);
IkReal x9234=(r21*x9222);
IkReal x9235=((1.0)*gconst11*sj10);
IkReal x9236=(sj10*x9221);
IkReal x9237=((1.0)*x9222);
IkReal x9238=(cj10*x9221);
IkReal x9239=(gconst10*sj10*x9222);
evalcond[0]=(((r22*x9222))+(((-1.0)*r21*x9221*x9226))+((gconst11*r20*x9221))+(((-1.0)*sj8*x9230)));
evalcond[1]=(((cj9*sj7))+((x9221*x9231))+((r02*x9222))+(((-1.0)*r01*x9221*x9226))+((cj8*x9224)));
evalcond[2]=(((cj8*sj7*sj9))+((x9221*x9225))+((r12*x9222))+(((-1.0)*r11*x9221*x9226))+(((-1.0)*cj7*x9233)));
evalcond[3]=(((gconst10*sj10*x9234))+((r20*x9223))+cj8+((r22*x9236))+(((-1.0)*gconst11*x9228*x9237))+((r21*x9232)));
evalcond[4]=(((r00*x9223))+(((-1.0)*gconst11*x9227*x9237))+((r02*x9236))+((r01*x9232))+((r01*x9239))+((cj7*sj8)));
evalcond[5]=(((r11*x9232))+((r11*x9239))+(((-1.0)*sj10*x9225*x9237))+((r12*x9236))+((sj7*sj8))+((r10*x9223)));
evalcond[6]=((((-1.0)*r20*x9232*x9237))+((r22*x9238))+(((-1.0)*r21*x9235))+(((-1.0)*sj8*x9233))+((x9223*x9234))+(((-1.0)*x9226*x9228)));
evalcond[7]=(((r11*x9222*x9223))+(((-1.0)*r10*sj10*x9226))+(((-1.0)*cj10*x9225*x9237))+(((-1.0)*r11*x9235))+x9224+((sj7*x9229))+((r12*x9238)));
evalcond[8]=((((-1.0)*cj10*x9231*x9237))+((r02*x9238))+((r01*x9222*x9223))+(((-1.0)*sj7*x9230))+(((-1.0)*r01*x9235))+((cj7*x9229))+(((-1.0)*x9226*x9227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9241 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x9241)==0){
continue;
}
IkReal x9240=pow(x9241,-0.5);
CheckValue<IkReal> x9242 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x9242.valid){
continue;
}
IkReal gconst12=((-1.0)*(x9242.value));
IkReal gconst13=((-1.0)*r01*x9240);
IkReal gconst14=(r00*x9240);
CheckValue<IkReal> x9243 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x9243.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x9243.value)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9244=(sj8*sj9);
IkReal x9245=((1.0)*gconst14);
IkReal x9246=(cj9*sj7);
IkReal x9247=(gconst13*r21);
IkReal x9248=(cj7*cj8*sj9);
CheckValue<IkReal> x9249 = IKatan2WithCheck(IkReal((((r02*x9244))+((r22*x9246))+((r22*x9248)))),IkReal((((x9246*x9247))+((x9247*x9248))+(((-1.0)*r00*x9244*x9245))+((gconst13*r01*x9244))+(((-1.0)*r20*x9245*x9248))+(((-1.0)*r20*x9245*x9246)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9249.valid){
continue;
}
CheckValue<IkReal> x9250=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x9245)))),-1);
if(!x9250.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x9249.value)+(((1.5707963267949)*(x9250.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x9251=IKsin(j11);
IkReal x9252=IKcos(j11);
IkReal x9253=((1.0)*sj10);
IkReal x9254=(gconst14*r11);
IkReal x9255=(cj7*sj9);
IkReal x9256=(gconst13*r20);
IkReal x9257=((1.0)*sj9);
IkReal x9258=(gconst13*r10);
IkReal x9259=(gconst14*r01);
IkReal x9260=(cj8*cj9);
IkReal x9261=((1.0)*cj10);
IkReal x9262=(cj10*r21);
IkReal x9263=(gconst13*r00);
IkReal x9264=((1.0)*cj9);
IkReal x9265=(gconst14*x9251);
IkReal x9266=(gconst13*x9252);
IkReal x9267=(cj10*x9251);
IkReal x9268=(sj10*x9251);
IkReal x9269=(gconst14*x9252);
IkReal x9270=(r10*x9269);
IkReal x9271=((1.0)*gconst13*x9251);
evalcond[0]=((((-1.0)*sj8*x9257))+(((-1.0)*r21*x9271))+((r20*x9265))+((r22*x9252)));
evalcond[1]=(((cj9*sj7))+((r02*x9252))+((r00*x9265))+((cj8*x9255))+(((-1.0)*r01*x9271)));
evalcond[2]=(((cj8*sj7*sj9))+((r10*x9265))+(((-1.0)*cj7*x9264))+((r12*x9252))+(((-1.0)*r11*x9271)));
evalcond[3]=(((r22*x9268))+((r21*sj10*x9266))+cj8+((gconst14*x9262))+((cj10*x9256))+(((-1.0)*r20*x9253*x9269)));
evalcond[4]=((((-1.0)*r00*x9253*x9269))+((cj7*sj8))+((r01*sj10*x9266))+((cj10*x9263))+((cj10*x9259))+((r02*x9268)));
evalcond[5]=(((r12*x9268))+((r11*sj10*x9266))+((sj7*sj8))+(((-1.0)*x9253*x9270))+((cj10*x9258))+((cj10*x9254)));
evalcond[6]=((((-1.0)*x9253*x9256))+((x9262*x9266))+((r22*x9267))+(((-1.0)*sj8*x9264))+(((-1.0)*gconst14*r21*x9253))+(((-1.0)*r20*x9261*x9269)));
evalcond[7]=((((-1.0)*x9253*x9258))+(((-1.0)*x9253*x9254))+((r12*x9267))+((cj10*r11*x9266))+x9255+(((-1.0)*x9261*x9270))+((sj7*x9260)));
evalcond[8]=((((-1.0)*r00*x9261*x9269))+(((-1.0)*x9253*x9259))+((cj10*r01*x9266))+(((-1.0)*sj7*x9257))+(((-1.0)*x9253*x9263))+((cj7*x9260))+((r02*x9267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9273 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x9273)==0){
continue;
}
IkReal x9272=pow(x9273,-0.5);
CheckValue<IkReal> x9274 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x9274.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x9274.value))));
IkReal gconst16=((1.0)*r01*x9272);
IkReal gconst17=((-1.0)*r00*x9272);
CheckValue<IkReal> x9275 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x9275.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9275.value)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[2];
CheckValue<IkReal> x9278 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x9278.valid){
continue;
}
IkReal x9276=((1.0)*(x9278.value));
IkReal x9277=x9272;
sj12=gconst16;
cj12=gconst17;
j12=((3.14159265)+(((-1.0)*x9276)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x9276)));
IkReal gconst16=((1.0)*r01*x9277);
IkReal gconst17=((-1.0)*r00*x9277);
j11eval[0]=0;
j11eval[1]=0;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9279=((1.0)*gconst17);
IkReal x9280=(sj8*sj9);
IkReal x9281=(cj9*sj7);
IkReal x9282=(gconst16*r21);
IkReal x9283=(cj7*cj8*sj9);
CheckValue<IkReal> x9284 = IKatan2WithCheck(IkReal((((r02*x9280))+((r22*x9281))+((r22*x9283)))),IkReal((((gconst16*r01*x9280))+((x9282*x9283))+(((-1.0)*r00*x9279*x9280))+(((-1.0)*r20*x9279*x9281))+(((-1.0)*r20*x9279*x9283))+((x9281*x9282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9284.valid){
continue;
}
CheckValue<IkReal> x9285=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x9279)))),-1);
if(!x9285.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x9284.value)+(((1.5707963267949)*(x9285.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x9286=IKsin(j11);
IkReal x9287=IKcos(j11);
IkReal x9288=((1.0)*gconst17);
IkReal x9289=(cj7*sj9);
IkReal x9290=(r01*sj10);
IkReal x9291=(cj10*gconst17);
IkReal x9292=(r11*sj10);
IkReal x9293=(gconst16*r01);
IkReal x9294=(cj9*sj7);
IkReal x9295=(r21*sj10);
IkReal x9296=(gconst16*r21);
IkReal x9297=((1.0)*sj9);
IkReal x9298=(cj10*gconst16);
IkReal x9299=(gconst16*r11);
IkReal x9300=((1.0)*cj9);
IkReal x9301=(cj10*x9287);
IkReal x9302=(gconst16*x9287);
IkReal x9303=(sj10*x9286);
IkReal x9304=((1.0)*gconst16*sj10);
IkReal x9305=(sj10*x9287);
IkReal x9306=(gconst17*x9286);
IkReal x9307=(cj10*x9286);
IkReal x9308=((1.0)*x9286);
evalcond[0]=((((-1.0)*x9296*x9308))+((r22*x9287))+(((-1.0)*sj8*x9297))+((r20*x9306)));
evalcond[1]=(((r02*x9287))+x9294+((r00*x9306))+((cj8*x9289))+(((-1.0)*x9293*x9308)));
evalcond[2]=(((cj8*sj7*sj9))+(((-1.0)*x9299*x9308))+(((-1.0)*cj7*x9300))+((r10*x9306))+((r12*x9287)));
evalcond[3]=(((r22*x9303))+cj8+((x9295*x9302))+((r20*x9298))+((r21*x9291))+(((-1.0)*r20*x9288*x9305)));
evalcond[4]=(((r02*x9303))+((x9290*x9302))+((r00*x9298))+((r01*x9291))+(((-1.0)*r00*x9288*x9305))+((cj7*sj8)));
evalcond[5]=(((r11*x9291))+((x9292*x9302))+((r10*x9298))+((r12*x9303))+((sj7*sj8))+(((-1.0)*r10*x9288*x9305)));
evalcond[6]=((((-1.0)*r20*x9304))+((r22*x9307))+((x9296*x9301))+(((-1.0)*sj8*x9300))+(((-1.0)*r20*x9288*x9301))+(((-1.0)*x9288*x9295)));
evalcond[7]=(x9289+((r11*x9287*x9298))+((r12*x9307))+((cj8*x9294))+(((-1.0)*r10*x9304))+(((-1.0)*x9288*x9292))+(((-1.0)*r10*x9288*x9301)));
evalcond[8]=(((x9293*x9301))+((r02*x9307))+(((-1.0)*r00*x9304))+(((-1.0)*r00*x9288*x9301))+((cj7*cj8*cj9))+(((-1.0)*sj7*x9297))+(((-1.0)*x9288*x9290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9309=(gconst16*r21);
IkReal x9310=(cj8*sj7);
IkReal x9311=(sj8*sj9);
IkReal x9312=((1.0)*cj7*cj9);
IkReal x9313=((1.0)*gconst17*sj9);
CheckValue<IkReal> x9314=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x9314.valid){
continue;
}
CheckValue<IkReal> x9315 = IKatan2WithCheck(IkReal((((r22*sj9*x9310))+((r12*x9311))+(((-1.0)*r22*x9312)))),IkReal((((sj9*x9309*x9310))+(((-1.0)*r20*x9310*x9313))+(((-1.0)*gconst17*r10*x9311))+(((-1.0)*x9309*x9312))+((cj7*cj9*gconst17*r20))+((gconst16*r11*x9311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9315.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9314.value)))+(x9315.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x9316=IKsin(j11);
IkReal x9317=IKcos(j11);
IkReal x9318=((1.0)*gconst17);
IkReal x9319=(cj7*sj9);
IkReal x9320=(r01*sj10);
IkReal x9321=(cj10*gconst17);
IkReal x9322=(r11*sj10);
IkReal x9323=(gconst16*r01);
IkReal x9324=(cj9*sj7);
IkReal x9325=(r21*sj10);
IkReal x9326=(gconst16*r21);
IkReal x9327=((1.0)*sj9);
IkReal x9328=(cj10*gconst16);
IkReal x9329=(gconst16*r11);
IkReal x9330=((1.0)*cj9);
IkReal x9331=(cj10*x9317);
IkReal x9332=(gconst16*x9317);
IkReal x9333=(sj10*x9316);
IkReal x9334=((1.0)*gconst16*sj10);
IkReal x9335=(sj10*x9317);
IkReal x9336=(gconst17*x9316);
IkReal x9337=(cj10*x9316);
IkReal x9338=((1.0)*x9316);
evalcond[0]=(((r20*x9336))+((r22*x9317))+(((-1.0)*x9326*x9338))+(((-1.0)*sj8*x9327)));
evalcond[1]=(((r02*x9317))+x9324+((r00*x9336))+(((-1.0)*x9323*x9338))+((cj8*x9319)));
evalcond[2]=((((-1.0)*cj7*x9330))+((cj8*sj7*sj9))+(((-1.0)*x9329*x9338))+((r10*x9336))+((r12*x9317)));
evalcond[3]=(((r20*x9328))+cj8+((x9325*x9332))+((r22*x9333))+((r21*x9321))+(((-1.0)*r20*x9318*x9335)));
evalcond[4]=(((r00*x9328))+((r01*x9321))+(((-1.0)*r00*x9318*x9335))+((r02*x9333))+((cj7*sj8))+((x9320*x9332)));
evalcond[5]=(((r11*x9321))+((r12*x9333))+((r10*x9328))+((sj7*sj8))+((x9322*x9332))+(((-1.0)*r10*x9318*x9335)));
evalcond[6]=(((x9326*x9331))+(((-1.0)*x9318*x9325))+((r22*x9337))+(((-1.0)*r20*x9334))+(((-1.0)*sj8*x9330))+(((-1.0)*r20*x9318*x9331)));
evalcond[7]=(x9319+((cj8*x9324))+((r12*x9337))+(((-1.0)*x9318*x9322))+(((-1.0)*r10*x9334))+((r11*x9317*x9328))+(((-1.0)*r10*x9318*x9331)));
evalcond[8]=((((-1.0)*r00*x9334))+(((-1.0)*sj7*x9327))+(((-1.0)*r00*x9318*x9331))+(((-1.0)*x9318*x9320))+((r02*x9337))+((cj7*cj8*cj9))+((x9323*x9331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[2];
IkReal x9339=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9339);
rxp1_1=(px*r21);
rxp1_2=(r11*x9339);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=((((-1.0)*r21*sj12))+((cj12*r20)));
j11eval[1]=r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9340=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9340);
rxp1_1=(px*r21);
rxp1_2=(r11*x9340);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=r02;
j11eval[1]=sj10;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9341=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9341);
rxp1_1=(px*r21);
rxp1_2=(r11*x9341);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j11eval[0]=cj10;
j11eval[1]=r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x9342=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9342);
rxp1_1=(px*r21);
rxp1_2=(r11*x9342);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j11eval[0]=r02;
j11eval[1]=((IKabs(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9)))))+(IKabs((cj7*sj8))));
j11eval[2]=IKsign(r02);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9343=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9343);
rxp1_1=(px*r21);
rxp1_2=(r11*x9343);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j11eval[0]=r02;
j11eval[1]=((((-1.0)*cj12*r20))+((r21*sj12)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9344=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9344);
rxp1_1=(px*r21);
rxp1_2=(r11*x9344);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j11eval[0]=r02;
j11eval[1]=(((r11*sj12))+(((-1.0)*cj12*r10)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j9), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x9345=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9345);
rxp1_1=(px*r21);
rxp1_2=(r11*x9345);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x9346=((((-1.0)*r21*sj12))+((cj12*r20)));
j11eval[0]=x9346;
j11eval[1]=((IKabs(cj8))+(IKabs(sj8)));
j11eval[2]=IKsign(x9346);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x9347=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9347);
rxp1_1=(px*r21);
rxp1_2=(r11*x9347);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x9348=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[0]=x9348;
j11eval[1]=IKsign(x9348);
j11eval[2]=((IKabs(cj8))+(IKabs(sj8)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9349=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9349);
rxp1_1=(px*r21);
rxp1_2=(r11*x9349);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j11eval[0]=((((-1.0)*r21*sj12))+((cj12*r20)));
j11eval[1]=(((r11*sj12))+(((-1.0)*cj12*r10)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9350=IKPowWithIntegerCheck(((((-1.0)*r21*sj12))+((cj12*r20))),-1);
if(!x9350.valid){
continue;
}
CheckValue<IkReal> x9351=IKPowWithIntegerCheck((((r11*sj12))+(((-1.0)*cj12*r10))),-1);
if(!x9351.valid){
continue;
}
if( IKabs((sj8*(x9350.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj8*(x9351.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj8*(x9350.value)))+IKsqr(((-1.0)*sj8*(x9351.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((sj8*(x9350.value)), ((-1.0)*sj8*(x9351.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9352=IKsin(j11);
IkReal x9353=IKcos(j11);
IkReal x9354=(r21*sj12);
IkReal x9355=(r11*sj12);
IkReal x9356=((1.0)*x9352);
IkReal x9357=(cj12*x9352);
IkReal x9358=((1.0)*cj12*x9353);
evalcond[0]=(r02*x9353);
evalcond[1]=(r02*x9352);
evalcond[2]=(cj8+((r10*x9357))+(((-1.0)*x9355*x9356)));
evalcond[3]=(((x9353*x9354))+cj8+(((-1.0)*r20*x9358)));
evalcond[4]=(((x9353*x9355))+(((-1.0)*r10*x9358))+sj8);
evalcond[5]=((((-1.0)*sj8))+((r20*x9357))+(((-1.0)*x9354*x9356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9359=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj12))+((cj12*r10)))),-1);
if(!x9359.valid){
continue;
}
CheckValue<IkReal> x9360 = IKatan2WithCheck(IkReal(((-1.0)*cj8)),IkReal(sj8),IKFAST_ATAN2_MAGTHRESH);
if(!x9360.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9359.value)))+(x9360.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9361=IKsin(j11);
IkReal x9362=IKcos(j11);
IkReal x9363=(r21*sj12);
IkReal x9364=(r11*sj12);
IkReal x9365=((1.0)*x9361);
IkReal x9366=(cj12*x9361);
IkReal x9367=((1.0)*cj12*x9362);
evalcond[0]=(r02*x9362);
evalcond[1]=(r02*x9361);
evalcond[2]=(cj8+(((-1.0)*x9364*x9365))+((r10*x9366)));
evalcond[3]=(cj8+(((-1.0)*r20*x9367))+((x9362*x9363)));
evalcond[4]=(sj8+(((-1.0)*r10*x9367))+((x9362*x9364)));
evalcond[5]=((((-1.0)*sj8))+(((-1.0)*x9363*x9365))+((r20*x9366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9368=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj12))+((cj12*r20)))),-1);
if(!x9368.valid){
continue;
}
CheckValue<IkReal> x9369 = IKatan2WithCheck(IkReal(sj8),IkReal(cj8),IKFAST_ATAN2_MAGTHRESH);
if(!x9369.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9368.value)))+(x9369.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9370=IKsin(j11);
IkReal x9371=IKcos(j11);
IkReal x9372=(r21*sj12);
IkReal x9373=(r11*sj12);
IkReal x9374=((1.0)*x9370);
IkReal x9375=(cj12*x9370);
IkReal x9376=((1.0)*cj12*x9371);
evalcond[0]=(r02*x9371);
evalcond[1]=(r02*x9370);
evalcond[2]=(cj8+(((-1.0)*x9373*x9374))+((r10*x9375)));
evalcond[3]=(cj8+(((-1.0)*r20*x9376))+((x9371*x9372)));
evalcond[4]=(sj8+(((-1.0)*r10*x9376))+((x9371*x9373)));
evalcond[5]=((((-1.0)*sj8))+(((-1.0)*x9372*x9374))+((r20*x9375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j9), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x9377=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9377);
rxp1_1=(px*r21);
rxp1_2=(r11*x9377);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x9378=((((-1.0)*r21*sj12))+((cj12*r20)));
j11eval[0]=x9378;
j11eval[1]=((IKabs(cj8))+(IKabs(sj8)));
j11eval[2]=IKsign(x9378);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x9379=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9379);
rxp1_1=(px*r21);
rxp1_2=(r11*x9379);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x9380=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[0]=x9380;
j11eval[1]=((IKabs(cj8))+(IKabs(sj8)));
j11eval[2]=IKsign(x9380);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9381=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9381);
rxp1_1=(px*r21);
rxp1_2=(r11*x9381);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j11eval[0]=((((-1.0)*r21*sj12))+((cj12*r20)));
j11eval[1]=(((r11*sj12))+(((-1.0)*cj12*r10)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9382=IKPowWithIntegerCheck(((((-1.0)*r21*sj12))+((cj12*r20))),-1);
if(!x9382.valid){
continue;
}
CheckValue<IkReal> x9383=IKPowWithIntegerCheck((((r11*sj12))+(((-1.0)*cj12*r10))),-1);
if(!x9383.valid){
continue;
}
if( IKabs((sj8*(x9382.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj8*(x9383.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj8*(x9382.value)))+IKsqr((sj8*(x9383.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((sj8*(x9382.value)), (sj8*(x9383.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9384=IKcos(j11);
IkReal x9385=IKsin(j11);
IkReal x9386=((1.0)*sj8);
IkReal x9387=(cj12*r10);
IkReal x9388=(r21*sj12);
IkReal x9389=(r11*sj12);
IkReal x9390=(cj12*r20);
IkReal x9391=((1.0)*x9385);
IkReal x9392=((1.0)*x9384);
evalcond[0]=(r02*x9384);
evalcond[1]=(r02*x9385);
evalcond[2]=(cj8+(((-1.0)*x9390*x9392))+((x9384*x9388)));
evalcond[3]=((((-1.0)*x9388*x9391))+(((-1.0)*x9386))+((x9385*x9390)));
evalcond[4]=((((-1.0)*x9389*x9391))+((x9385*x9387))+(((-1.0)*cj8)));
evalcond[5]=((((-1.0)*x9387*x9392))+(((-1.0)*x9386))+((x9384*x9389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9393=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj12))+((cj12*r10)))),-1);
if(!x9393.valid){
continue;
}
CheckValue<IkReal> x9394 = IKatan2WithCheck(IkReal(cj8),IkReal(((-1.0)*sj8)),IKFAST_ATAN2_MAGTHRESH);
if(!x9394.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9393.value)))+(x9394.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9395=IKcos(j11);
IkReal x9396=IKsin(j11);
IkReal x9397=((1.0)*sj8);
IkReal x9398=(cj12*r10);
IkReal x9399=(r21*sj12);
IkReal x9400=(r11*sj12);
IkReal x9401=(cj12*r20);
IkReal x9402=((1.0)*x9396);
IkReal x9403=((1.0)*x9395);
evalcond[0]=(r02*x9395);
evalcond[1]=(r02*x9396);
evalcond[2]=(((x9395*x9399))+cj8+(((-1.0)*x9401*x9403)));
evalcond[3]=(((x9396*x9401))+(((-1.0)*x9397))+(((-1.0)*x9399*x9402)));
evalcond[4]=(((x9396*x9398))+(((-1.0)*x9400*x9402))+(((-1.0)*cj8)));
evalcond[5]=(((x9395*x9400))+(((-1.0)*x9397))+(((-1.0)*x9398*x9403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9404=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj12))+((cj12*r20)))),-1);
if(!x9404.valid){
continue;
}
CheckValue<IkReal> x9405 = IKatan2WithCheck(IkReal(sj8),IkReal(cj8),IKFAST_ATAN2_MAGTHRESH);
if(!x9405.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9404.value)))+(x9405.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9406=IKcos(j11);
IkReal x9407=IKsin(j11);
IkReal x9408=((1.0)*sj8);
IkReal x9409=(cj12*r10);
IkReal x9410=(r21*sj12);
IkReal x9411=(r11*sj12);
IkReal x9412=(cj12*r20);
IkReal x9413=((1.0)*x9407);
IkReal x9414=((1.0)*x9406);
evalcond[0]=(r02*x9406);
evalcond[1]=(r02*x9407);
evalcond[2]=(((x9406*x9410))+cj8+(((-1.0)*x9412*x9414)));
evalcond[3]=((((-1.0)*x9408))+(((-1.0)*x9410*x9413))+((x9407*x9412)));
evalcond[4]=(((x9407*x9409))+(((-1.0)*x9411*x9413))+(((-1.0)*cj8)));
evalcond[5]=(((x9406*x9411))+(((-1.0)*x9408))+(((-1.0)*x9409*x9414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j9), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x9415=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9415);
rxp1_1=(px*r21);
rxp1_2=(r11*x9415);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x9416=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[0]=x9416;
j11eval[1]=IKsign(x9416);
j11eval[2]=((IKabs(cj8))+(IKabs(sj8)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x9417=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9417);
rxp1_1=(px*r21);
rxp1_2=(r11*x9417);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x9418=((((-1.0)*r21*sj12))+((cj12*r20)));
j11eval[0]=x9418;
j11eval[1]=((IKabs(cj8))+(IKabs(sj8)));
j11eval[2]=IKsign(x9418);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9419=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9419);
rxp1_1=(px*r21);
rxp1_2=(r11*x9419);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
j11eval[0]=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[1]=((((-1.0)*cj12*r20))+((r21*sj12)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9420=IKPowWithIntegerCheck(((((-1.0)*r11*sj12))+((cj12*r10))),-1);
if(!x9420.valid){
continue;
}
CheckValue<IkReal> x9421=IKPowWithIntegerCheck(((((-1.0)*cj12*r20))+((r21*sj12))),-1);
if(!x9421.valid){
continue;
}
if( IKabs((cj8*(x9420.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj8*(x9421.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj8*(x9420.value)))+IKsqr(((-1.0)*cj8*(x9421.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((cj8*(x9420.value)), ((-1.0)*cj8*(x9421.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9422=IKsin(j11);
IkReal x9423=IKcos(j11);
IkReal x9424=(cj12*r10);
IkReal x9425=(cj12*r20);
IkReal x9426=(sj12*x9423);
IkReal x9427=((1.0)*x9423);
IkReal x9428=((1.0)*sj12*x9422);
evalcond[0]=(r02*x9423);
evalcond[1]=(r02*x9422);
evalcond[2]=(sj8+((x9422*x9425))+(((-1.0)*r21*x9428)));
evalcond[3]=((((-1.0)*x9425*x9427))+cj8+((r21*x9426)));
evalcond[4]=((((-1.0)*x9424*x9427))+sj8+((r11*x9426)));
evalcond[5]=(((x9422*x9424))+(((-1.0)*r11*x9428))+(((-1.0)*cj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9429=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj12))+((cj12*r20)))),-1);
if(!x9429.valid){
continue;
}
CheckValue<IkReal> x9430 = IKatan2WithCheck(IkReal(((-1.0)*sj8)),IkReal(cj8),IKFAST_ATAN2_MAGTHRESH);
if(!x9430.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9429.value)))+(x9430.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9431=IKsin(j11);
IkReal x9432=IKcos(j11);
IkReal x9433=(cj12*r10);
IkReal x9434=(cj12*r20);
IkReal x9435=(sj12*x9432);
IkReal x9436=((1.0)*x9432);
IkReal x9437=((1.0)*sj12*x9431);
evalcond[0]=(r02*x9432);
evalcond[1]=(r02*x9431);
evalcond[2]=(sj8+((x9431*x9434))+(((-1.0)*r21*x9437)));
evalcond[3]=(cj8+(((-1.0)*x9434*x9436))+((r21*x9435)));
evalcond[4]=(((r11*x9435))+sj8+(((-1.0)*x9433*x9436)));
evalcond[5]=(((x9431*x9433))+(((-1.0)*r11*x9437))+(((-1.0)*cj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9438=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj12))+((cj12*r10)))),-1);
if(!x9438.valid){
continue;
}
CheckValue<IkReal> x9439 = IKatan2WithCheck(IkReal(cj8),IkReal(sj8),IKFAST_ATAN2_MAGTHRESH);
if(!x9439.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9438.value)))+(x9439.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9440=IKsin(j11);
IkReal x9441=IKcos(j11);
IkReal x9442=(cj12*r10);
IkReal x9443=(cj12*r20);
IkReal x9444=(sj12*x9441);
IkReal x9445=((1.0)*x9441);
IkReal x9446=((1.0)*sj12*x9440);
evalcond[0]=(r02*x9441);
evalcond[1]=(r02*x9440);
evalcond[2]=(sj8+((x9440*x9443))+(((-1.0)*r21*x9446)));
evalcond[3]=(cj8+(((-1.0)*x9443*x9445))+((r21*x9444)));
evalcond[4]=(sj8+(((-1.0)*x9442*x9445))+((r11*x9444)));
evalcond[5]=(((x9440*x9442))+(((-1.0)*r11*x9446))+(((-1.0)*cj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j9), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x9447=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9447);
rxp1_1=(px*r21);
rxp1_2=(r11*x9447);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x9448=((((-1.0)*r21*sj12))+((cj12*r20)));
j11eval[0]=x9448;
j11eval[1]=((IKabs(cj8))+(IKabs(sj8)));
j11eval[2]=IKsign(x9448);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x9449=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9449);
rxp1_1=(px*r21);
rxp1_2=(r11*x9449);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x9450=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[0]=x9450;
j11eval[1]=IKsign(x9450);
j11eval[2]=((IKabs(cj8))+(IKabs(sj8)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9451=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9451);
rxp1_1=(px*r21);
rxp1_2=(r11*x9451);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
j11eval[0]=((((-1.0)*r21*sj12))+((cj12*r20)));
j11eval[1]=(((r11*sj12))+(((-1.0)*cj12*r10)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9452=IKPowWithIntegerCheck(((((-1.0)*r21*sj12))+((cj12*r20))),-1);
if(!x9452.valid){
continue;
}
CheckValue<IkReal> x9453=IKPowWithIntegerCheck((((r11*sj12))+(((-1.0)*cj12*r10))),-1);
if(!x9453.valid){
continue;
}
if( IKabs(((-1.0)*sj8*(x9452.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj8*(x9453.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj8*(x9452.value)))+IKsqr((sj8*(x9453.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*sj8*(x9452.value)), (sj8*(x9453.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9454=IKsin(j11);
IkReal x9455=IKcos(j11);
IkReal x9456=(cj12*r20);
IkReal x9457=(cj12*r10);
IkReal x9458=(sj12*x9455);
IkReal x9459=((1.0)*x9455);
IkReal x9460=((1.0)*sj12*x9454);
evalcond[0]=(r02*x9455);
evalcond[1]=(r02*x9454);
evalcond[2]=(sj8+(((-1.0)*r21*x9460))+((x9454*x9456)));
evalcond[3]=(cj8+(((-1.0)*r11*x9460))+((x9454*x9457)));
evalcond[4]=((((-1.0)*x9456*x9459))+cj8+((r21*x9458)));
evalcond[5]=((((-1.0)*sj8))+((r11*x9458))+(((-1.0)*x9457*x9459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9461=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj12))+((cj12*r10)))),-1);
if(!x9461.valid){
continue;
}
CheckValue<IkReal> x9462 = IKatan2WithCheck(IkReal(((-1.0)*cj8)),IkReal(((-1.0)*sj8)),IKFAST_ATAN2_MAGTHRESH);
if(!x9462.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9461.value)))+(x9462.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9463=IKsin(j11);
IkReal x9464=IKcos(j11);
IkReal x9465=(cj12*r20);
IkReal x9466=(cj12*r10);
IkReal x9467=(sj12*x9464);
IkReal x9468=((1.0)*x9464);
IkReal x9469=((1.0)*sj12*x9463);
evalcond[0]=(r02*x9464);
evalcond[1]=(r02*x9463);
evalcond[2]=(sj8+((x9463*x9465))+(((-1.0)*r21*x9469)));
evalcond[3]=(cj8+((x9463*x9466))+(((-1.0)*r11*x9469)));
evalcond[4]=(cj8+((r21*x9467))+(((-1.0)*x9465*x9468)));
evalcond[5]=((((-1.0)*sj8))+((r11*x9467))+(((-1.0)*x9466*x9468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9470=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj12))+((cj12*r20)))),-1);
if(!x9470.valid){
continue;
}
CheckValue<IkReal> x9471 = IKatan2WithCheck(IkReal(((-1.0)*sj8)),IkReal(cj8),IKFAST_ATAN2_MAGTHRESH);
if(!x9471.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9470.value)))+(x9471.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9472=IKsin(j11);
IkReal x9473=IKcos(j11);
IkReal x9474=(cj12*r20);
IkReal x9475=(cj12*r10);
IkReal x9476=(sj12*x9473);
IkReal x9477=((1.0)*x9473);
IkReal x9478=((1.0)*sj12*x9472);
evalcond[0]=(r02*x9473);
evalcond[1]=(r02*x9472);
evalcond[2]=(sj8+((x9472*x9474))+(((-1.0)*r21*x9478)));
evalcond[3]=(cj8+(((-1.0)*r11*x9478))+((x9472*x9475)));
evalcond[4]=(cj8+((r21*x9476))+(((-1.0)*x9474*x9477)));
evalcond[5]=((((-1.0)*sj8))+(((-1.0)*x9475*x9477))+((r11*x9476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9479=((-1.0)*sj8);
CheckValue<IkReal> x9480=IKPowWithIntegerCheck(r02,-1);
if(!x9480.valid){
continue;
}
CheckValue<IkReal> x9481=IKPowWithIntegerCheck((((r11*sj12))+(((-1.0)*cj12*r10))),-1);
if(!x9481.valid){
continue;
}
if( IKabs((cj7*x9479*(x9480.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj7*x9479*(x9481.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj7*x9479*(x9480.value)))+IKsqr((sj7*x9479*(x9481.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((cj7*x9479*(x9480.value)), (sj7*x9479*(x9481.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9482=IKcos(j11);
IkReal x9483=IKsin(j11);
IkReal x9484=(cj12*r10);
IkReal x9485=(cj8*sj9);
IkReal x9486=(r21*sj12);
IkReal x9487=(r11*sj12);
IkReal x9488=(cj12*r20);
IkReal x9489=((1.0)*x9483);
IkReal x9490=((1.0)*x9482);
evalcond[0]=(((r02*x9483))+((cj7*sj8)));
evalcond[1]=(((cj9*sj7))+((r02*x9482))+((cj7*x9485)));
evalcond[2]=(cj8+(((-1.0)*x9488*x9490))+((x9482*x9486)));
evalcond[3]=((((-1.0)*x9484*x9490))+((sj7*sj8))+((x9482*x9487)));
evalcond[4]=((((-1.0)*sj8*sj9))+((x9483*x9488))+(((-1.0)*x9486*x9489)));
evalcond[5]=((((-1.0)*cj7*cj9))+(((-1.0)*x9487*x9489))+((x9483*x9484))+((sj7*x9485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9491=IKPowWithIntegerCheck(r02,-1);
if(!x9491.valid){
continue;
}
CheckValue<IkReal> x9492=IKPowWithIntegerCheck(((((-1.0)*cj12*r20))+((r21*sj12))),-1);
if(!x9492.valid){
continue;
}
if( IKabs(((-1.0)*cj7*sj8*(x9491.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj8*(x9492.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj7*sj8*(x9491.value)))+IKsqr(((-1.0)*cj8*(x9492.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*cj7*sj8*(x9491.value)), ((-1.0)*cj8*(x9492.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9493=IKcos(j11);
IkReal x9494=IKsin(j11);
IkReal x9495=(cj12*r10);
IkReal x9496=(cj8*sj9);
IkReal x9497=(r21*sj12);
IkReal x9498=(r11*sj12);
IkReal x9499=(cj12*r20);
IkReal x9500=((1.0)*x9494);
IkReal x9501=((1.0)*x9493);
evalcond[0]=(((r02*x9494))+((cj7*sj8)));
evalcond[1]=(((r02*x9493))+((cj9*sj7))+((cj7*x9496)));
evalcond[2]=(cj8+((x9493*x9497))+(((-1.0)*x9499*x9501)));
evalcond[3]=(((x9493*x9498))+((sj7*sj8))+(((-1.0)*x9495*x9501)));
evalcond[4]=((((-1.0)*sj8*sj9))+((x9494*x9499))+(((-1.0)*x9497*x9500)));
evalcond[5]=(((sj7*x9496))+(((-1.0)*cj7*cj9))+(((-1.0)*x9498*x9500))+((x9494*x9495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9502=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x9502.valid){
continue;
}
CheckValue<IkReal> x9503 = IKatan2WithCheck(IkReal(((-1.0)*cj7*sj8)),IkReal(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9503.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9502.value)))+(x9503.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9504=IKcos(j11);
IkReal x9505=IKsin(j11);
IkReal x9506=(cj12*r10);
IkReal x9507=(cj8*sj9);
IkReal x9508=(r21*sj12);
IkReal x9509=(r11*sj12);
IkReal x9510=(cj12*r20);
IkReal x9511=((1.0)*x9505);
IkReal x9512=((1.0)*x9504);
evalcond[0]=(((r02*x9505))+((cj7*sj8)));
evalcond[1]=(((cj7*x9507))+((r02*x9504))+((cj9*sj7)));
evalcond[2]=((((-1.0)*x9510*x9512))+((x9504*x9508))+cj8);
evalcond[3]=(((x9504*x9509))+((sj7*sj8))+(((-1.0)*x9506*x9512)));
evalcond[4]=((((-1.0)*x9508*x9511))+((x9505*x9510))+(((-1.0)*sj8*sj9)));
evalcond[5]=(((x9505*x9506))+(((-1.0)*cj7*cj9))+((sj7*x9507))+(((-1.0)*x9509*x9511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x9513=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9513);
rxp1_1=(px*r21);
rxp1_2=(r11*x9513);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j11eval[0]=r02;
j11eval[1]=IKsign(r02);
j11eval[2]=((IKabs(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9)))))+(IKabs((cj7*sj8))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9514=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9514);
rxp1_1=(px*r21);
rxp1_2=(r11*x9514);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j11eval[0]=r02;
j11eval[1]=((((-1.0)*r21*sj12))+((cj12*r20)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9515=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9515);
rxp1_1=(px*r21);
rxp1_2=(r11*x9515);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j11eval[0]=r02;
j11eval[1]=((((-1.0)*r11*sj12))+((cj12*r10)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j9), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x9516=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9516);
rxp1_1=(px*r21);
rxp1_2=(r11*x9516);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x9517=((((-1.0)*r21*sj12))+((cj12*r20)));
j11eval[0]=x9517;
j11eval[1]=((IKabs(cj8))+(IKabs(sj8)));
j11eval[2]=IKsign(x9517);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x9518=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9518);
rxp1_1=(px*r21);
rxp1_2=(r11*x9518);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x9519=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[0]=x9519;
j11eval[1]=IKsign(x9519);
j11eval[2]=((IKabs(cj8))+(IKabs(sj8)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9520=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9520);
rxp1_1=(px*r21);
rxp1_2=(r11*x9520);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x9521=((1.0)*sj12);
j11eval[0]=((((-1.0)*r21*x9521))+((cj12*r20)));
j11eval[1]=((((-1.0)*r11*x9521))+((cj12*r10)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9522=((1.0)*sj12);
CheckValue<IkReal> x9523=IKPowWithIntegerCheck(((((-1.0)*r21*x9522))+((cj12*r20))),-1);
if(!x9523.valid){
continue;
}
CheckValue<IkReal> x9524=IKPowWithIntegerCheck(((((-1.0)*r11*x9522))+((cj12*r10))),-1);
if(!x9524.valid){
continue;
}
if( IKabs((sj8*(x9523.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj8*(x9524.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj8*(x9523.value)))+IKsqr(((-1.0)*sj8*(x9524.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((sj8*(x9523.value)), ((-1.0)*sj8*(x9524.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9525=IKsin(j11);
IkReal x9526=IKcos(j11);
IkReal x9527=(cj12*r20);
IkReal x9528=(cj12*r10);
IkReal x9529=((1.0)*sj12*x9526);
IkReal x9530=((1.0)*sj12*x9525);
evalcond[0]=(r02*x9526);
evalcond[1]=((-1.0)*r02*x9525);
evalcond[2]=(cj8+((x9525*x9528))+(((-1.0)*r11*x9530)));
evalcond[3]=(cj8+(((-1.0)*r21*x9529))+((x9526*x9527)));
evalcond[4]=((((-1.0)*r11*x9529))+sj8+((x9526*x9528)));
evalcond[5]=((((-1.0)*sj8))+((x9525*x9527))+(((-1.0)*r21*x9530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9531=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj12))+((cj12*r10)))),-1);
if(!x9531.valid){
continue;
}
CheckValue<IkReal> x9532 = IKatan2WithCheck(IkReal(((-1.0)*cj8)),IkReal(((-1.0)*sj8)),IKFAST_ATAN2_MAGTHRESH);
if(!x9532.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9531.value)))+(x9532.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9533=IKsin(j11);
IkReal x9534=IKcos(j11);
IkReal x9535=(cj12*r20);
IkReal x9536=(cj12*r10);
IkReal x9537=((1.0)*sj12*x9534);
IkReal x9538=((1.0)*sj12*x9533);
evalcond[0]=(r02*x9534);
evalcond[1]=((-1.0)*r02*x9533);
evalcond[2]=(cj8+((x9533*x9536))+(((-1.0)*r11*x9538)));
evalcond[3]=(cj8+(((-1.0)*r21*x9537))+((x9534*x9535)));
evalcond[4]=(sj8+((x9534*x9536))+(((-1.0)*r11*x9537)));
evalcond[5]=((((-1.0)*sj8))+(((-1.0)*r21*x9538))+((x9533*x9535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9539=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj12))+((cj12*r20)))),-1);
if(!x9539.valid){
continue;
}
CheckValue<IkReal> x9540 = IKatan2WithCheck(IkReal(sj8),IkReal(((-1.0)*cj8)),IKFAST_ATAN2_MAGTHRESH);
if(!x9540.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9539.value)))+(x9540.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9541=IKsin(j11);
IkReal x9542=IKcos(j11);
IkReal x9543=(cj12*r20);
IkReal x9544=(cj12*r10);
IkReal x9545=((1.0)*sj12*x9542);
IkReal x9546=((1.0)*sj12*x9541);
evalcond[0]=(r02*x9542);
evalcond[1]=((-1.0)*r02*x9541);
evalcond[2]=(cj8+((x9541*x9544))+(((-1.0)*r11*x9546)));
evalcond[3]=(cj8+((x9542*x9543))+(((-1.0)*r21*x9545)));
evalcond[4]=(sj8+((x9542*x9544))+(((-1.0)*r11*x9545)));
evalcond[5]=((((-1.0)*sj8))+(((-1.0)*r21*x9546))+((x9541*x9543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j9), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x9547=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9547);
rxp1_1=(px*r21);
rxp1_2=(r11*x9547);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x9548=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[0]=x9548;
j11eval[1]=IKsign(x9548);
j11eval[2]=((IKabs(cj8))+(IKabs(sj8)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x9549=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9549);
rxp1_1=(px*r21);
rxp1_2=(r11*x9549);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x9550=((((-1.0)*r21*sj12))+((cj12*r20)));
j11eval[0]=x9550;
j11eval[1]=((IKabs(cj8))+(IKabs(sj8)));
j11eval[2]=IKsign(x9550);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9551=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9551);
rxp1_1=(px*r21);
rxp1_2=(r11*x9551);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j9=1.5707963267949;
sj9=1.0;
cj9=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x9552=((1.0)*sj12);
j11eval[0]=((((-1.0)*r21*x9552))+((cj12*r20)));
j11eval[1]=(((cj12*r10))+(((-1.0)*r11*x9552)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9553=((1.0)*sj12);
CheckValue<IkReal> x9554=IKPowWithIntegerCheck(((((-1.0)*r21*x9553))+((cj12*r20))),-1);
if(!x9554.valid){
continue;
}
CheckValue<IkReal> x9555=IKPowWithIntegerCheck((((cj12*r10))+(((-1.0)*r11*x9553))),-1);
if(!x9555.valid){
continue;
}
if( IKabs((sj8*(x9554.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj8*(x9555.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj8*(x9554.value)))+IKsqr((sj8*(x9555.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((sj8*(x9554.value)), (sj8*(x9555.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9556=IKcos(j11);
IkReal x9557=IKsin(j11);
IkReal x9558=((1.0)*sj8);
IkReal x9559=(cj12*x9557);
IkReal x9560=(cj12*x9556);
IkReal x9561=((1.0)*sj12*x9556);
IkReal x9562=((1.0)*sj12*x9557);
evalcond[0]=(r02*x9556);
evalcond[1]=((-1.0)*r02*x9557);
evalcond[2]=((((-1.0)*r21*x9561))+cj8+((r20*x9560)));
evalcond[3]=((((-1.0)*r21*x9562))+((r20*x9559))+(((-1.0)*x9558)));
evalcond[4]=(((r10*x9559))+(((-1.0)*r11*x9562))+(((-1.0)*cj8)));
evalcond[5]=((((-1.0)*r11*x9561))+(((-1.0)*x9558))+((r10*x9560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9563=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj12))+((cj12*r20)))),-1);
if(!x9563.valid){
continue;
}
CheckValue<IkReal> x9564 = IKatan2WithCheck(IkReal(sj8),IkReal(((-1.0)*cj8)),IKFAST_ATAN2_MAGTHRESH);
if(!x9564.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9563.value)))+(x9564.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9565=IKcos(j11);
IkReal x9566=IKsin(j11);
IkReal x9567=((1.0)*sj8);
IkReal x9568=(cj12*x9566);
IkReal x9569=(cj12*x9565);
IkReal x9570=((1.0)*sj12*x9565);
IkReal x9571=((1.0)*sj12*x9566);
evalcond[0]=(r02*x9565);
evalcond[1]=((-1.0)*r02*x9566);
evalcond[2]=(cj8+(((-1.0)*r21*x9570))+((r20*x9569)));
evalcond[3]=((((-1.0)*r21*x9571))+(((-1.0)*x9567))+((r20*x9568)));
evalcond[4]=((((-1.0)*r11*x9571))+((r10*x9568))+(((-1.0)*cj8)));
evalcond[5]=((((-1.0)*x9567))+(((-1.0)*r11*x9570))+((r10*x9569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9572=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj12))+((cj12*r10)))),-1);
if(!x9572.valid){
continue;
}
CheckValue<IkReal> x9573 = IKatan2WithCheck(IkReal(cj8),IkReal(sj8),IKFAST_ATAN2_MAGTHRESH);
if(!x9573.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9572.value)))+(x9573.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9574=IKcos(j11);
IkReal x9575=IKsin(j11);
IkReal x9576=((1.0)*sj8);
IkReal x9577=(cj12*x9575);
IkReal x9578=(cj12*x9574);
IkReal x9579=((1.0)*sj12*x9574);
IkReal x9580=((1.0)*sj12*x9575);
evalcond[0]=(r02*x9574);
evalcond[1]=((-1.0)*r02*x9575);
evalcond[2]=(cj8+(((-1.0)*r21*x9579))+((r20*x9578)));
evalcond[3]=((((-1.0)*x9576))+(((-1.0)*r21*x9580))+((r20*x9577)));
evalcond[4]=((((-1.0)*r11*x9580))+(((-1.0)*cj8))+((r10*x9577)));
evalcond[5]=((((-1.0)*x9576))+(((-1.0)*r11*x9579))+((r10*x9578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j9), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x9581=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9581);
rxp1_1=(px*r21);
rxp1_2=(r11*x9581);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x9582=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[0]=x9582;
j11eval[1]=((IKabs(cj8))+(IKabs(sj8)));
j11eval[2]=IKsign(x9582);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x9583=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9583);
rxp1_1=(px*r21);
rxp1_2=(r11*x9583);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x9584=((((-1.0)*r21*sj12))+((cj12*r20)));
j11eval[0]=x9584;
j11eval[1]=((IKabs(cj8))+(IKabs(sj8)));
j11eval[2]=IKsign(x9584);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9585=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9585);
rxp1_1=(px*r21);
rxp1_2=(r11*x9585);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
j7=1.5707963267949;
sj7=1.0;
cj7=0;
IkReal x9586=((1.0)*sj12);
j11eval[0]=(((cj12*r10))+(((-1.0)*r11*x9586)));
j11eval[1]=((((-1.0)*r21*x9586))+((cj12*r20)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9587=((1.0)*sj12);
CheckValue<IkReal> x9588=IKPowWithIntegerCheck((((cj12*r10))+(((-1.0)*r11*x9587))),-1);
if(!x9588.valid){
continue;
}
CheckValue<IkReal> x9589=IKPowWithIntegerCheck(((((-1.0)*r21*x9587))+((cj12*r20))),-1);
if(!x9589.valid){
continue;
}
if( IKabs((cj8*(x9588.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj8*(x9589.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj8*(x9588.value)))+IKsqr(((-1.0)*cj8*(x9589.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((cj8*(x9588.value)), ((-1.0)*cj8*(x9589.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9590=IKsin(j11);
IkReal x9591=IKcos(j11);
IkReal x9592=(cj12*x9590);
IkReal x9593=(cj12*x9591);
IkReal x9594=((1.0)*sj12*x9591);
IkReal x9595=((1.0)*sj12*x9590);
evalcond[0]=(r02*x9591);
evalcond[1]=((-1.0)*r02*x9590);
evalcond[2]=(((r20*x9592))+sj8+(((-1.0)*r21*x9595)));
evalcond[3]=(((r20*x9593))+cj8+(((-1.0)*r21*x9594)));
evalcond[4]=(sj8+((r10*x9593))+(((-1.0)*r11*x9594)));
evalcond[5]=(((r10*x9592))+(((-1.0)*r11*x9595))+(((-1.0)*cj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9596=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj12))+((cj12*r20)))),-1);
if(!x9596.valid){
continue;
}
CheckValue<IkReal> x9597 = IKatan2WithCheck(IkReal(((-1.0)*sj8)),IkReal(((-1.0)*cj8)),IKFAST_ATAN2_MAGTHRESH);
if(!x9597.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9596.value)))+(x9597.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9598=IKsin(j11);
IkReal x9599=IKcos(j11);
IkReal x9600=(cj12*x9598);
IkReal x9601=(cj12*x9599);
IkReal x9602=((1.0)*sj12*x9599);
IkReal x9603=((1.0)*sj12*x9598);
evalcond[0]=(r02*x9599);
evalcond[1]=((-1.0)*r02*x9598);
evalcond[2]=(sj8+(((-1.0)*r21*x9603))+((r20*x9600)));
evalcond[3]=((((-1.0)*r21*x9602))+cj8+((r20*x9601)));
evalcond[4]=(sj8+((r10*x9601))+(((-1.0)*r11*x9602)));
evalcond[5]=(((r10*x9600))+(((-1.0)*r11*x9603))+(((-1.0)*cj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9604=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj12))+((cj12*r10)))),-1);
if(!x9604.valid){
continue;
}
CheckValue<IkReal> x9605 = IKatan2WithCheck(IkReal(cj8),IkReal(((-1.0)*sj8)),IKFAST_ATAN2_MAGTHRESH);
if(!x9605.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9604.value)))+(x9605.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9606=IKsin(j11);
IkReal x9607=IKcos(j11);
IkReal x9608=(cj12*x9606);
IkReal x9609=(cj12*x9607);
IkReal x9610=((1.0)*sj12*x9607);
IkReal x9611=((1.0)*sj12*x9606);
evalcond[0]=(r02*x9607);
evalcond[1]=((-1.0)*r02*x9606);
evalcond[2]=((((-1.0)*r21*x9611))+sj8+((r20*x9608)));
evalcond[3]=((((-1.0)*r21*x9610))+cj8+((r20*x9609)));
evalcond[4]=(sj8+(((-1.0)*r11*x9610))+((r10*x9609)));
evalcond[5]=((((-1.0)*r11*x9611))+((r10*x9608))+(((-1.0)*cj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j9), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j7), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x9612=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9612);
rxp1_1=(px*r21);
rxp1_2=(r11*x9612);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x9613=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[0]=x9613;
j11eval[1]=IKsign(x9613);
j11eval[2]=((IKabs(cj8))+(IKabs(sj8)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x9614=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9614);
rxp1_1=(px*r21);
rxp1_2=(r11*x9614);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x9615=((((-1.0)*r21*sj12))+((cj12*r20)));
j11eval[0]=x9615;
j11eval[1]=((IKabs(cj8))+(IKabs(sj8)));
j11eval[2]=IKsign(x9615);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9616=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9616);
rxp1_1=(px*r21);
rxp1_2=(r11*x9616);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
j9=-1.5707963267949;
sj9=-1.0;
cj9=0;
j7=-1.5707963267949;
sj7=-1.0;
cj7=0;
IkReal x9617=((1.0)*sj12);
j11eval[0]=((((-1.0)*r21*x9617))+((cj12*r20)));
j11eval[1]=((((-1.0)*r11*x9617))+((cj12*r10)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9618=((1.0)*sj12);
CheckValue<IkReal> x9619=IKPowWithIntegerCheck(((((-1.0)*r21*x9618))+((cj12*r20))),-1);
if(!x9619.valid){
continue;
}
CheckValue<IkReal> x9620=IKPowWithIntegerCheck(((((-1.0)*r11*x9618))+((cj12*r10))),-1);
if(!x9620.valid){
continue;
}
if( IKabs(((-1.0)*sj8*(x9619.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj8*(x9620.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj8*(x9619.value)))+IKsqr((sj8*(x9620.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*sj8*(x9619.value)), (sj8*(x9620.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9621=IKsin(j11);
IkReal x9622=IKcos(j11);
IkReal x9623=(cj12*r20);
IkReal x9624=(cj12*r10);
IkReal x9625=((1.0)*sj12*x9622);
IkReal x9626=((1.0)*sj12*x9621);
evalcond[0]=(r02*x9622);
evalcond[1]=((-1.0)*r02*x9621);
evalcond[2]=(sj8+((x9621*x9623))+(((-1.0)*r21*x9626)));
evalcond[3]=(cj8+((x9621*x9624))+(((-1.0)*r11*x9626)));
evalcond[4]=(((x9622*x9623))+cj8+(((-1.0)*r21*x9625)));
evalcond[5]=((((-1.0)*sj8))+((x9622*x9624))+(((-1.0)*r11*x9625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9627=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj12))+((cj12*r20)))),-1);
if(!x9627.valid){
continue;
}
CheckValue<IkReal> x9628 = IKatan2WithCheck(IkReal(((-1.0)*sj8)),IkReal(((-1.0)*cj8)),IKFAST_ATAN2_MAGTHRESH);
if(!x9628.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9627.value)))+(x9628.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9629=IKsin(j11);
IkReal x9630=IKcos(j11);
IkReal x9631=(cj12*r20);
IkReal x9632=(cj12*r10);
IkReal x9633=((1.0)*sj12*x9630);
IkReal x9634=((1.0)*sj12*x9629);
evalcond[0]=(r02*x9630);
evalcond[1]=((-1.0)*r02*x9629);
evalcond[2]=(sj8+((x9629*x9631))+(((-1.0)*r21*x9634)));
evalcond[3]=(cj8+((x9629*x9632))+(((-1.0)*r11*x9634)));
evalcond[4]=(cj8+((x9630*x9631))+(((-1.0)*r21*x9633)));
evalcond[5]=((((-1.0)*sj8))+((x9630*x9632))+(((-1.0)*r11*x9633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9635=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj12))+((cj12*r10)))),-1);
if(!x9635.valid){
continue;
}
CheckValue<IkReal> x9636 = IKatan2WithCheck(IkReal(((-1.0)*cj8)),IkReal(sj8),IKFAST_ATAN2_MAGTHRESH);
if(!x9636.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9635.value)))+(x9636.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9637=IKsin(j11);
IkReal x9638=IKcos(j11);
IkReal x9639=(cj12*r20);
IkReal x9640=(cj12*r10);
IkReal x9641=((1.0)*sj12*x9638);
IkReal x9642=((1.0)*sj12*x9637);
evalcond[0]=(r02*x9638);
evalcond[1]=((-1.0)*r02*x9637);
evalcond[2]=(sj8+(((-1.0)*r21*x9642))+((x9637*x9639)));
evalcond[3]=((((-1.0)*r11*x9642))+((x9637*x9640))+cj8);
evalcond[4]=(cj8+(((-1.0)*r21*x9641))+((x9638*x9639)));
evalcond[5]=(((x9638*x9640))+(((-1.0)*r11*x9641))+(((-1.0)*sj8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9643=IKPowWithIntegerCheck(r02,-1);
if(!x9643.valid){
continue;
}
CheckValue<IkReal> x9644=IKPowWithIntegerCheck(((((-1.0)*r11*sj12))+((cj12*r10))),-1);
if(!x9644.valid){
continue;
}
if( IKabs((cj7*sj8*(x9643.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj7*sj8*(x9644.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj7*sj8*(x9643.value)))+IKsqr(((-1.0)*sj7*sj8*(x9644.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((cj7*sj8*(x9643.value)), ((-1.0)*sj7*sj8*(x9644.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9645=IKcos(j11);
IkReal x9646=IKsin(j11);
IkReal x9647=(cj8*sj9);
IkReal x9648=(cj12*x9646);
IkReal x9649=(cj12*x9645);
IkReal x9650=((1.0)*x9646);
IkReal x9651=((1.0)*sj12*x9645);
evalcond[0]=((((-1.0)*r02*x9650))+((cj7*sj8)));
evalcond[1]=(((r02*x9645))+((cj9*sj7))+((cj7*x9647)));
evalcond[2]=(cj8+(((-1.0)*r21*x9651))+((r20*x9649)));
evalcond[3]=(((r10*x9649))+(((-1.0)*r11*x9651))+((sj7*sj8)));
evalcond[4]=((((-1.0)*sj8*sj9))+((r20*x9648))+(((-1.0)*r21*sj12*x9650)));
evalcond[5]=((((-1.0)*cj7*cj9))+((sj7*x9647))+((r10*x9648))+(((-1.0)*r11*sj12*x9650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9652=IKPowWithIntegerCheck(r02,-1);
if(!x9652.valid){
continue;
}
CheckValue<IkReal> x9653=IKPowWithIntegerCheck(((((-1.0)*r21*sj12))+((cj12*r20))),-1);
if(!x9653.valid){
continue;
}
if( IKabs((cj7*sj8*(x9652.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj8*(x9653.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj7*sj8*(x9652.value)))+IKsqr(((-1.0)*cj8*(x9653.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((cj7*sj8*(x9652.value)), ((-1.0)*cj8*(x9653.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9654=IKcos(j11);
IkReal x9655=IKsin(j11);
IkReal x9656=(cj8*sj9);
IkReal x9657=(cj12*x9655);
IkReal x9658=(cj12*x9654);
IkReal x9659=((1.0)*x9655);
IkReal x9660=((1.0)*sj12*x9654);
evalcond[0]=((((-1.0)*r02*x9659))+((cj7*sj8)));
evalcond[1]=(((cj7*x9656))+((cj9*sj7))+((r02*x9654)));
evalcond[2]=(cj8+(((-1.0)*r21*x9660))+((r20*x9658)));
evalcond[3]=(((r10*x9658))+(((-1.0)*r11*x9660))+((sj7*sj8)));
evalcond[4]=((((-1.0)*sj8*sj9))+((r20*x9657))+(((-1.0)*r21*sj12*x9659)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r10*x9657))+((sj7*x9656))+(((-1.0)*r11*sj12*x9659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9661=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x9661.valid){
continue;
}
CheckValue<IkReal> x9662 = IKatan2WithCheck(IkReal((cj7*sj8)),IkReal(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9662.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9661.value)))+(x9662.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9663=IKcos(j11);
IkReal x9664=IKsin(j11);
IkReal x9665=(cj8*sj9);
IkReal x9666=(cj12*x9664);
IkReal x9667=(cj12*x9663);
IkReal x9668=((1.0)*x9664);
IkReal x9669=((1.0)*sj12*x9663);
evalcond[0]=((((-1.0)*r02*x9668))+((cj7*sj8)));
evalcond[1]=(((cj9*sj7))+((cj7*x9665))+((r02*x9663)));
evalcond[2]=(cj8+(((-1.0)*r21*x9669))+((r20*x9667)));
evalcond[3]=(((r10*x9667))+(((-1.0)*r11*x9669))+((sj7*sj8)));
evalcond[4]=((((-1.0)*sj8*sj9))+((r20*x9666))+(((-1.0)*r21*sj12*x9668)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r10*x9666))+((sj7*x9665))+(((-1.0)*r11*sj12*x9668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x9670=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9670);
rxp1_1=(px*r21);
rxp1_2=(r11*x9670);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=0;
cj10=1.0;
j10=0;
j11eval[0]=r02;
j11eval[1]=IKsign(r02);
j11eval[2]=((IKabs((cj9*sj7)))+(IKabs((sj7*sj9))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x9671=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9671);
rxp1_1=(px*r21);
rxp1_2=(r11*x9671);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=0;
cj10=1.0;
j10=0;
IkReal x9672=(cj8*sj7);
IkReal x9673=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[0]=x9673;
j11eval[1]=IKsign(x9673);
j11eval[2]=((IKabs((sj9*x9672)))+(IKabs((cj9*x9672))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9674=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9674);
rxp1_1=(px*r21);
rxp1_2=(r11*x9674);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=0;
cj10=1.0;
j10=0;
j11eval[0]=r02;
j11eval[1]=(((r11*sj12))+(((-1.0)*cj12*r10)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
j11array[0]=0;
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
j11array[0]=0;
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
j11array[0]=0;
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
j11array[0]=0;
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9675=IKPowWithIntegerCheck(r02,-1);
if(!x9675.valid){
continue;
}
CheckValue<IkReal> x9676=IKPowWithIntegerCheck((((r11*sj12))+(((-1.0)*cj12*r10))),-1);
if(!x9676.valid){
continue;
}
if( IKabs((sj7*sj9*(x9675.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj8*cj9*sj7*(x9676.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj7*sj9*(x9675.value)))+IKsqr(((-1.0)*cj8*cj9*sj7*(x9676.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((sj7*sj9*(x9675.value)), ((-1.0)*cj8*cj9*sj7*(x9676.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9677=IKsin(j11);
IkReal x9678=IKcos(j11);
IkReal x9679=(sj7*sj9);
IkReal x9680=(cj9*sj7);
IkReal x9681=(cj12*x9677);
IkReal x9682=(sj12*x9678);
IkReal x9683=((1.0)*cj12*x9678);
IkReal x9684=((1.0)*sj12*x9677);
evalcond[0]=(x9680+((r02*x9678)));
evalcond[1]=((((-1.0)*x9679))+((r02*x9677)));
evalcond[2]=((((-1.0)*r21*x9684))+((r20*x9681)));
evalcond[3]=(((r21*x9682))+(((-1.0)*r20*x9683)));
evalcond[4]=((((-1.0)*r11*x9684))+((cj8*x9679))+((r10*x9681)));
evalcond[5]=((((-1.0)*r10*x9683))+((cj8*x9680))+((r11*x9682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9685=(cj8*sj7);
CheckValue<IkReal> x9686=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj12))+((cj12*r10)))),-1);
if(!x9686.valid){
continue;
}
CheckValue<IkReal> x9687 = IKatan2WithCheck(IkReal(((-1.0)*sj9*x9685)),IkReal((cj9*x9685)),IKFAST_ATAN2_MAGTHRESH);
if(!x9687.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9686.value)))+(x9687.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9688=IKsin(j11);
IkReal x9689=IKcos(j11);
IkReal x9690=(sj7*sj9);
IkReal x9691=(cj9*sj7);
IkReal x9692=(cj12*x9688);
IkReal x9693=(sj12*x9689);
IkReal x9694=((1.0)*cj12*x9689);
IkReal x9695=((1.0)*sj12*x9688);
evalcond[0]=(((r02*x9689))+x9691);
evalcond[1]=((((-1.0)*x9690))+((r02*x9688)));
evalcond[2]=((((-1.0)*r21*x9695))+((r20*x9692)));
evalcond[3]=(((r21*x9693))+(((-1.0)*r20*x9694)));
evalcond[4]=(((cj8*x9690))+(((-1.0)*r11*x9695))+((r10*x9692)));
evalcond[5]=(((cj8*x9691))+(((-1.0)*r10*x9694))+((r11*x9693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9696=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x9696.valid){
continue;
}
CheckValue<IkReal> x9697 = IKatan2WithCheck(IkReal((sj7*sj9)),IkReal(((-1.0)*cj9*sj7)),IKFAST_ATAN2_MAGTHRESH);
if(!x9697.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9696.value)))+(x9697.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9698=IKsin(j11);
IkReal x9699=IKcos(j11);
IkReal x9700=(sj7*sj9);
IkReal x9701=(cj9*sj7);
IkReal x9702=(cj12*x9698);
IkReal x9703=(sj12*x9699);
IkReal x9704=((1.0)*cj12*x9699);
IkReal x9705=((1.0)*sj12*x9698);
evalcond[0]=(((r02*x9699))+x9701);
evalcond[1]=((((-1.0)*x9700))+((r02*x9698)));
evalcond[2]=(((r20*x9702))+(((-1.0)*r21*x9705)));
evalcond[3]=(((r21*x9703))+(((-1.0)*r20*x9704)));
evalcond[4]=(((r10*x9702))+((cj8*x9700))+(((-1.0)*r11*x9705)));
evalcond[5]=(((r11*x9703))+(((-1.0)*r10*x9704))+((cj8*x9701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x9706=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9706);
rxp1_1=(px*r21);
rxp1_2=(r11*x9706);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j11eval[0]=r02;
j11eval[1]=IKsign(r02);
j11eval[2]=((IKabs((cj9*sj7)))+(IKabs((sj7*sj9))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x9707=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9707);
rxp1_1=(px*r21);
rxp1_2=(r11*x9707);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x9708=(cj8*sj7);
IkReal x9709=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[0]=x9709;
j11eval[1]=((IKabs((sj9*x9708)))+(IKabs((cj9*x9708))));
j11eval[2]=IKsign(x9709);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9710=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9710);
rxp1_1=(px*r21);
rxp1_2=(r11*x9710);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j11eval[0]=((((-1.0)*r11*sj12))+((cj12*r10)));
j11eval[1]=r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
j11array[0]=0;
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
j11array[0]=0;
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
j11array[0]=0;
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
j11array[0]=0;
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9711=((-1.0)*sj7);
CheckValue<IkReal> x9712=IKPowWithIntegerCheck(((((-1.0)*r11*sj12))+((cj12*r10))),-1);
if(!x9712.valid){
continue;
}
CheckValue<IkReal> x9713=IKPowWithIntegerCheck(r02,-1);
if(!x9713.valid){
continue;
}
if( IKabs((cj8*sj9*x9711*(x9712.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj9*x9711*(x9713.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj8*sj9*x9711*(x9712.value)))+IKsqr((cj9*x9711*(x9713.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((cj8*sj9*x9711*(x9712.value)), (cj9*x9711*(x9713.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9714=IKsin(j11);
IkReal x9715=IKcos(j11);
IkReal x9716=(sj7*sj9);
IkReal x9717=(cj9*sj7);
IkReal x9718=(cj12*x9714);
IkReal x9719=(cj12*x9715);
IkReal x9720=((1.0)*x9714);
IkReal x9721=((1.0)*sj12*x9715);
evalcond[0]=(((r02*x9715))+x9717);
evalcond[1]=((((-1.0)*r02*x9720))+(((-1.0)*x9716)));
evalcond[2]=((((-1.0)*r21*sj12*x9720))+((r20*x9718)));
evalcond[3]=((((-1.0)*r21*x9721))+((r20*x9719)));
evalcond[4]=(((cj8*x9716))+(((-1.0)*r11*sj12*x9720))+((r10*x9718)));
evalcond[5]=(((cj8*x9717))+(((-1.0)*r11*x9721))+((r10*x9719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9722=((-1.0)*cj8*sj7);
CheckValue<IkReal> x9723=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj12))+((cj12*r10)))),-1);
if(!x9723.valid){
continue;
}
CheckValue<IkReal> x9724 = IKatan2WithCheck(IkReal((sj9*x9722)),IkReal((cj9*x9722)),IKFAST_ATAN2_MAGTHRESH);
if(!x9724.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9723.value)))+(x9724.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9725=IKsin(j11);
IkReal x9726=IKcos(j11);
IkReal x9727=(sj7*sj9);
IkReal x9728=(cj9*sj7);
IkReal x9729=(cj12*x9725);
IkReal x9730=(cj12*x9726);
IkReal x9731=((1.0)*x9725);
IkReal x9732=((1.0)*sj12*x9726);
evalcond[0]=(((r02*x9726))+x9728);
evalcond[1]=((((-1.0)*r02*x9731))+(((-1.0)*x9727)));
evalcond[2]=((((-1.0)*r21*sj12*x9731))+((r20*x9729)));
evalcond[3]=((((-1.0)*r21*x9732))+((r20*x9730)));
evalcond[4]=((((-1.0)*r11*sj12*x9731))+((r10*x9729))+((cj8*x9727)));
evalcond[5]=((((-1.0)*r11*x9732))+((cj8*x9728))+((r10*x9730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9733=((-1.0)*sj7);
CheckValue<IkReal> x9734 = IKatan2WithCheck(IkReal((sj9*x9733)),IkReal((cj9*x9733)),IKFAST_ATAN2_MAGTHRESH);
if(!x9734.valid){
continue;
}
CheckValue<IkReal> x9735=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x9735.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x9734.value)+(((1.5707963267949)*(x9735.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9736=IKsin(j11);
IkReal x9737=IKcos(j11);
IkReal x9738=(sj7*sj9);
IkReal x9739=(cj9*sj7);
IkReal x9740=(cj12*x9736);
IkReal x9741=(cj12*x9737);
IkReal x9742=((1.0)*x9736);
IkReal x9743=((1.0)*sj12*x9737);
evalcond[0]=(((r02*x9737))+x9739);
evalcond[1]=((((-1.0)*r02*x9742))+(((-1.0)*x9738)));
evalcond[2]=(((r20*x9740))+(((-1.0)*r21*sj12*x9742)));
evalcond[3]=(((r20*x9741))+(((-1.0)*r21*x9743)));
evalcond[4]=(((r10*x9740))+(((-1.0)*r11*sj12*x9742))+((cj8*x9738)));
evalcond[5]=(((r10*x9741))+(((-1.0)*r11*x9743))+((cj8*x9739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9744=((-1.0)*r21);
CheckValue<IkReal> x9745 = IKatan2WithCheck(IkReal(r20),IkReal(x9744),IKFAST_ATAN2_MAGTHRESH);
if(!x9745.valid){
continue;
}
IkReal gconst18=((-1.0)*(x9745.value));
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x9744;
CheckValue<IkReal> x9746 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9746.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x9746.value)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[2];
IkReal x9747=((-1.0)*r21);
IkReal x9748=((-1.0)*px);
CheckValue<IkReal> x9750 = IKatan2WithCheck(IkReal(r20),IkReal(x9747),IKFAST_ATAN2_MAGTHRESH);
if(!x9750.valid){
continue;
}
IkReal x9749=((-1.0)*(x9750.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9748);
rxp1_1=(px*r21);
rxp1_2=(r11*x9748);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst19;
cj12=gconst20;
j12=x9749;
IkReal gconst18=x9749;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x9747;
j11eval[0]=(((r11*r20))+(((-1.0)*r10*r21)));
j11eval[1]=r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9751=((-1.0)*r21);
IkReal x9752=((-1.0)*px);
CheckValue<IkReal> x9754 = IKatan2WithCheck(IkReal(r20),IkReal(x9751),IKFAST_ATAN2_MAGTHRESH);
if(!x9754.valid){
continue;
}
IkReal x9753=((-1.0)*(x9754.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9752);
rxp1_1=(px*r21);
rxp1_2=(r11*x9752);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst19;
cj12=gconst20;
j12=x9753;
IkReal gconst18=x9753;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x9751;
j11eval[0]=r02;
j11eval[1]=sj10;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9755=((-1.0)*r21);
IkReal x9756=((-1.0)*px);
CheckValue<IkReal> x9758 = IKatan2WithCheck(IkReal(r20),IkReal(x9755),IKFAST_ATAN2_MAGTHRESH);
if(!x9758.valid){
continue;
}
IkReal x9757=((-1.0)*(x9758.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9756);
rxp1_1=(px*r21);
rxp1_2=(r11*x9756);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst19;
cj12=gconst20;
j12=x9757;
IkReal gconst18=x9757;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x9755;
j11eval[0]=cj10;
j11eval[1]=r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x9759=((-1.0)*r21);
IkReal x9760=((-1.0)*px);
CheckValue<IkReal> x9762 = IKatan2WithCheck(IkReal(r20),IkReal(x9759),IKFAST_ATAN2_MAGTHRESH);
if(!x9762.valid){
continue;
}
IkReal x9761=((-1.0)*(x9762.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9760);
rxp1_1=(px*r21);
rxp1_2=(r11*x9760);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst19;
cj12=gconst20;
j12=x9761;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst18=x9761;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x9759;
j11eval[0]=r02;
j11eval[1]=((IKabs(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9)))))+(IKabs((cj7*sj8))));
j11eval[2]=IKsign(r02);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x9763=((-1.0)*r21);
IkReal x9764=((-1.0)*px);
CheckValue<IkReal> x9766 = IKatan2WithCheck(IkReal(r20),IkReal(x9763),IKFAST_ATAN2_MAGTHRESH);
if(!x9766.valid){
continue;
}
IkReal x9765=((-1.0)*(x9766.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9764);
rxp1_1=(px*r21);
rxp1_2=(r11*x9764);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst19;
cj12=gconst20;
j12=x9765;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst18=x9765;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x9763;
IkReal x9767=(((r11*r20))+(((-1.0)*r10*r21)));
j11eval[0]=x9767;
j11eval[1]=((IKabs((sj7*sj8)))+(IKabs((((cj7*cj9))+(((-1.0)*cj8*sj7*sj9))))));
j11eval[2]=IKsign(x9767);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9768=((-1.0)*r21);
IkReal x9769=((-1.0)*px);
CheckValue<IkReal> x9771 = IKatan2WithCheck(IkReal(r20),IkReal(x9768),IKFAST_ATAN2_MAGTHRESH);
if(!x9771.valid){
continue;
}
IkReal x9770=((-1.0)*(x9771.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9769);
rxp1_1=(px*r21);
rxp1_2=(r11*x9769);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst19;
cj12=gconst20;
j12=x9770;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst18=x9770;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x9768;
j11eval[0]=r02;
j11eval[1]=((((-1.0)*r11*r20))+((r10*r21)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9772=((-1.0)*sj8);
CheckValue<IkReal> x9773=IKPowWithIntegerCheck(r02,-1);
if(!x9773.valid){
continue;
}
CheckValue<IkReal> x9774=IKPowWithIntegerCheck(((((-1.0)*gconst20*r10))+((gconst19*r11))),-1);
if(!x9774.valid){
continue;
}
if( IKabs((cj7*x9772*(x9773.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj7*x9772*(x9774.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj7*x9772*(x9773.value)))+IKsqr((sj7*x9772*(x9774.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((cj7*x9772*(x9773.value)), (sj7*x9772*(x9774.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9775=IKcos(j11);
IkReal x9776=IKsin(j11);
IkReal x9777=(cj8*sj9);
IkReal x9778=(gconst20*r10);
IkReal x9779=(gconst20*r20);
IkReal x9780=((1.0)*x9775);
IkReal x9781=(gconst19*x9775);
IkReal x9782=((1.0)*gconst19*x9776);
evalcond[0]=(((r02*x9776))+((cj7*sj8)));
evalcond[1]=(((cj9*sj7))+((r02*x9775))+((cj7*x9777)));
evalcond[2]=(((r21*x9781))+cj8+(((-1.0)*x9779*x9780)));
evalcond[3]=((((-1.0)*x9778*x9780))+((r11*x9781))+((sj7*sj8)));
evalcond[4]=((((-1.0)*sj8*sj9))+(((-1.0)*r21*x9782))+((x9776*x9779)));
evalcond[5]=((((-1.0)*cj7*cj9))+(((-1.0)*r11*x9782))+((sj7*x9777))+((x9776*x9778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9783 = IKatan2WithCheck(IkReal((((cj7*cj9))+(((-1.0)*cj8*sj7*sj9)))),IkReal((sj7*sj8)),IKFAST_ATAN2_MAGTHRESH);
if(!x9783.valid){
continue;
}
CheckValue<IkReal> x9784=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst19*r11))+((gconst20*r10)))),-1);
if(!x9784.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x9783.value)+(((1.5707963267949)*(x9784.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9785=IKcos(j11);
IkReal x9786=IKsin(j11);
IkReal x9787=(cj8*sj9);
IkReal x9788=(gconst20*r10);
IkReal x9789=(gconst20*r20);
IkReal x9790=((1.0)*x9785);
IkReal x9791=(gconst19*x9785);
IkReal x9792=((1.0)*gconst19*x9786);
evalcond[0]=(((r02*x9786))+((cj7*sj8)));
evalcond[1]=(((cj7*x9787))+((cj9*sj7))+((r02*x9785)));
evalcond[2]=((((-1.0)*x9789*x9790))+cj8+((r21*x9791)));
evalcond[3]=((((-1.0)*x9788*x9790))+((r11*x9791))+((sj7*sj8)));
evalcond[4]=((((-1.0)*sj8*sj9))+((x9786*x9789))+(((-1.0)*r21*x9792)));
evalcond[5]=((((-1.0)*cj7*cj9))+((sj7*x9787))+(((-1.0)*r11*x9792))+((x9786*x9788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9793=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x9793.valid){
continue;
}
CheckValue<IkReal> x9794 = IKatan2WithCheck(IkReal(((-1.0)*cj7*sj8)),IkReal(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9794.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9793.value)))+(x9794.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9795=IKcos(j11);
IkReal x9796=IKsin(j11);
IkReal x9797=(cj8*sj9);
IkReal x9798=(gconst20*r10);
IkReal x9799=(gconst20*r20);
IkReal x9800=((1.0)*x9795);
IkReal x9801=(gconst19*x9795);
IkReal x9802=((1.0)*gconst19*x9796);
evalcond[0]=(((r02*x9796))+((cj7*sj8)));
evalcond[1]=(((r02*x9795))+((cj9*sj7))+((cj7*x9797)));
evalcond[2]=(((r21*x9801))+cj8+(((-1.0)*x9799*x9800)));
evalcond[3]=(((r11*x9801))+(((-1.0)*x9798*x9800))+((sj7*sj8)));
evalcond[4]=((((-1.0)*sj8*sj9))+((x9796*x9799))+(((-1.0)*r21*x9802)));
evalcond[5]=((((-1.0)*cj7*cj9))+((sj7*x9797))+((x9796*x9798))+(((-1.0)*r11*x9802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x9803=((-1.0)*r21);
IkReal x9804=((-1.0)*px);
CheckValue<IkReal> x9806 = IKatan2WithCheck(IkReal(r20),IkReal(x9803),IKFAST_ATAN2_MAGTHRESH);
if(!x9806.valid){
continue;
}
IkReal x9805=((-1.0)*(x9806.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9804);
rxp1_1=(px*r21);
rxp1_2=(r11*x9804);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst19;
cj12=gconst20;
j12=x9805;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst18=x9805;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x9803;
j11eval[0]=r02;
j11eval[1]=IKsign(r02);
j11eval[2]=((IKabs(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9)))))+(IKabs((cj7*sj8))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x9807=((-1.0)*r21);
IkReal x9808=((-1.0)*px);
CheckValue<IkReal> x9810 = IKatan2WithCheck(IkReal(r20),IkReal(x9807),IKFAST_ATAN2_MAGTHRESH);
if(!x9810.valid){
continue;
}
IkReal x9809=((-1.0)*(x9810.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9808);
rxp1_1=(px*r21);
rxp1_2=(r11*x9808);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst19;
cj12=gconst20;
j12=x9809;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst18=x9809;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x9807;
IkReal x9811=(((r11*r20))+(((-1.0)*r10*r21)));
j11eval[0]=x9811;
j11eval[1]=IKsign(x9811);
j11eval[2]=((IKabs((sj7*sj8)))+(IKabs((((cj7*cj9))+(((-1.0)*cj8*sj7*sj9))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9812=((-1.0)*r21);
IkReal x9813=((-1.0)*px);
CheckValue<IkReal> x9815 = IKatan2WithCheck(IkReal(r20),IkReal(x9812),IKFAST_ATAN2_MAGTHRESH);
if(!x9815.valid){
continue;
}
IkReal x9814=((-1.0)*(x9815.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9813);
rxp1_1=(px*r21);
rxp1_2=(r11*x9813);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst19;
cj12=gconst20;
j12=x9814;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst18=x9814;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x9812;
j11eval[0]=r02;
j11eval[1]=(((r11*r20))+(((-1.0)*r10*r21)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9816=IKPowWithIntegerCheck(r02,-1);
if(!x9816.valid){
continue;
}
CheckValue<IkReal> x9817=IKPowWithIntegerCheck(((((-1.0)*gconst19*r11))+((gconst20*r10))),-1);
if(!x9817.valid){
continue;
}
if( IKabs((cj7*sj8*(x9816.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj7*sj8*(x9817.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj7*sj8*(x9816.value)))+IKsqr(((-1.0)*sj7*sj8*(x9817.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((cj7*sj8*(x9816.value)), ((-1.0)*sj7*sj8*(x9817.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9818=IKcos(j11);
IkReal x9819=IKsin(j11);
IkReal x9820=(cj8*sj9);
IkReal x9821=(gconst19*r11);
IkReal x9822=(gconst20*x9818);
IkReal x9823=((1.0)*gconst19*r21);
IkReal x9824=(gconst20*x9819);
IkReal x9825=((1.0)*x9819);
evalcond[0]=((((-1.0)*r02*x9825))+((cj7*sj8)));
evalcond[1]=(((cj9*sj7))+((r02*x9818))+((cj7*x9820)));
evalcond[2]=(((r20*x9822))+(((-1.0)*x9818*x9823))+cj8);
evalcond[3]=((((-1.0)*x9818*x9821))+((sj7*sj8))+((r10*x9822)));
evalcond[4]=(((r20*x9824))+(((-1.0)*sj8*sj9))+(((-1.0)*x9819*x9823)));
evalcond[5]=((((-1.0)*cj7*cj9))+((sj7*x9820))+(((-1.0)*x9821*x9825))+((r10*x9824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9826 = IKatan2WithCheck(IkReal((((cj7*cj9))+(((-1.0)*cj8*sj7*sj9)))),IkReal(((-1.0)*sj7*sj8)),IKFAST_ATAN2_MAGTHRESH);
if(!x9826.valid){
continue;
}
CheckValue<IkReal> x9827=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst19*r11))+((gconst20*r10)))),-1);
if(!x9827.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x9826.value)+(((1.5707963267949)*(x9827.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9828=IKcos(j11);
IkReal x9829=IKsin(j11);
IkReal x9830=(cj8*sj9);
IkReal x9831=(gconst19*r11);
IkReal x9832=(gconst20*x9828);
IkReal x9833=((1.0)*gconst19*r21);
IkReal x9834=(gconst20*x9829);
IkReal x9835=((1.0)*x9829);
evalcond[0]=((((-1.0)*r02*x9835))+((cj7*sj8)));
evalcond[1]=(((cj9*sj7))+((r02*x9828))+((cj7*x9830)));
evalcond[2]=(cj8+(((-1.0)*x9828*x9833))+((r20*x9832)));
evalcond[3]=((((-1.0)*x9828*x9831))+((r10*x9832))+((sj7*sj8)));
evalcond[4]=((((-1.0)*sj8*sj9))+(((-1.0)*x9829*x9833))+((r20*x9834)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r10*x9834))+((sj7*x9830))+(((-1.0)*x9831*x9835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9836=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x9836.valid){
continue;
}
CheckValue<IkReal> x9837 = IKatan2WithCheck(IkReal((cj7*sj8)),IkReal(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9837.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9836.value)))+(x9837.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9838=IKcos(j11);
IkReal x9839=IKsin(j11);
IkReal x9840=(cj8*sj9);
IkReal x9841=(gconst19*r11);
IkReal x9842=(gconst20*x9838);
IkReal x9843=((1.0)*gconst19*r21);
IkReal x9844=(gconst20*x9839);
IkReal x9845=((1.0)*x9839);
evalcond[0]=((((-1.0)*r02*x9845))+((cj7*sj8)));
evalcond[1]=(((cj7*x9840))+((cj9*sj7))+((r02*x9838)));
evalcond[2]=(cj8+((r20*x9842))+(((-1.0)*x9838*x9843)));
evalcond[3]=((((-1.0)*x9838*x9841))+((r10*x9842))+((sj7*sj8)));
evalcond[4]=((((-1.0)*sj8*sj9))+(((-1.0)*x9839*x9843))+((r20*x9844)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r10*x9844))+((sj7*x9840))+(((-1.0)*x9841*x9845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x9846=((-1.0)*r21);
IkReal x9847=((-1.0)*px);
CheckValue<IkReal> x9849 = IKatan2WithCheck(IkReal(r20),IkReal(x9846),IKFAST_ATAN2_MAGTHRESH);
if(!x9849.valid){
continue;
}
IkReal x9848=((-1.0)*(x9849.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9847);
rxp1_1=(px*r21);
rxp1_2=(r11*x9847);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst19;
cj12=gconst20;
j12=x9848;
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst18=x9848;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x9846;
j11eval[0]=r02;
j11eval[1]=IKsign(r02);
j11eval[2]=((IKabs((cj9*sj7)))+(IKabs((sj7*sj9))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x9850=((-1.0)*r21);
IkReal x9851=((-1.0)*px);
CheckValue<IkReal> x9853 = IKatan2WithCheck(IkReal(r20),IkReal(x9850),IKFAST_ATAN2_MAGTHRESH);
if(!x9853.valid){
continue;
}
IkReal x9852=((-1.0)*(x9853.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9851);
rxp1_1=(px*r21);
rxp1_2=(r11*x9851);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst19;
cj12=gconst20;
j12=x9852;
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst18=x9852;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x9850;
IkReal x9854=(cj8*sj7);
IkReal x9855=(((r11*r20))+(((-1.0)*r10*r21)));
j11eval[0]=x9855;
j11eval[1]=IKsign(x9855);
j11eval[2]=((IKabs((cj9*x9854)))+(IKabs((sj9*x9854))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9856=((-1.0)*r21);
IkReal x9857=((-1.0)*px);
CheckValue<IkReal> x9859 = IKatan2WithCheck(IkReal(r20),IkReal(x9856),IKFAST_ATAN2_MAGTHRESH);
if(!x9859.valid){
continue;
}
IkReal x9858=((-1.0)*(x9859.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9857);
rxp1_1=(px*r21);
rxp1_2=(r11*x9857);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst19;
cj12=gconst20;
j12=x9858;
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst18=x9858;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x9856;
j11eval[0]=r02;
j11eval[1]=((((-1.0)*r11*r20))+((r10*r21)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9860=IKPowWithIntegerCheck(r02,-1);
if(!x9860.valid){
continue;
}
CheckValue<IkReal> x9861=IKPowWithIntegerCheck(((((-1.0)*gconst20*r10))+((gconst19*r11))),-1);
if(!x9861.valid){
continue;
}
if( IKabs((sj7*sj9*(x9860.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj8*cj9*sj7*(x9861.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj7*sj9*(x9860.value)))+IKsqr(((-1.0)*cj8*cj9*sj7*(x9861.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((sj7*sj9*(x9860.value)), ((-1.0)*cj8*cj9*sj7*(x9861.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9862=IKsin(j11);
IkReal x9863=IKcos(j11);
IkReal x9864=(gconst20*r10);
IkReal x9865=(sj7*sj9);
IkReal x9866=(cj9*sj7);
IkReal x9867=(gconst20*r20);
IkReal x9868=((1.0)*x9863);
IkReal x9869=(gconst19*x9863);
IkReal x9870=((1.0)*gconst19*x9862);
evalcond[0]=(((r02*x9863))+x9866);
evalcond[1]=(((r02*x9862))+(((-1.0)*x9865)));
evalcond[2]=((((-1.0)*r21*x9870))+((x9862*x9867)));
evalcond[3]=((((-1.0)*x9867*x9868))+((r21*x9869)));
evalcond[4]=(((x9862*x9864))+((cj8*x9865))+(((-1.0)*r11*x9870)));
evalcond[5]=(((r11*x9869))+((cj8*x9866))+(((-1.0)*x9864*x9868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9871=(cj8*sj7);
CheckValue<IkReal> x9872=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst19*r11))+((gconst20*r10)))),-1);
if(!x9872.valid){
continue;
}
CheckValue<IkReal> x9873 = IKatan2WithCheck(IkReal(((-1.0)*sj9*x9871)),IkReal((cj9*x9871)),IKFAST_ATAN2_MAGTHRESH);
if(!x9873.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9872.value)))+(x9873.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9874=IKsin(j11);
IkReal x9875=IKcos(j11);
IkReal x9876=(gconst20*r10);
IkReal x9877=(sj7*sj9);
IkReal x9878=(cj9*sj7);
IkReal x9879=(gconst20*r20);
IkReal x9880=((1.0)*x9875);
IkReal x9881=(gconst19*x9875);
IkReal x9882=((1.0)*gconst19*x9874);
evalcond[0]=(((r02*x9875))+x9878);
evalcond[1]=(((r02*x9874))+(((-1.0)*x9877)));
evalcond[2]=((((-1.0)*r21*x9882))+((x9874*x9879)));
evalcond[3]=(((r21*x9881))+(((-1.0)*x9879*x9880)));
evalcond[4]=(((cj8*x9877))+((x9874*x9876))+(((-1.0)*r11*x9882)));
evalcond[5]=(((r11*x9881))+((cj8*x9878))+(((-1.0)*x9876*x9880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9883=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x9883.valid){
continue;
}
CheckValue<IkReal> x9884 = IKatan2WithCheck(IkReal((sj7*sj9)),IkReal(((-1.0)*cj9*sj7)),IKFAST_ATAN2_MAGTHRESH);
if(!x9884.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9883.value)))+(x9884.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9885=IKsin(j11);
IkReal x9886=IKcos(j11);
IkReal x9887=(gconst20*r10);
IkReal x9888=(sj7*sj9);
IkReal x9889=(cj9*sj7);
IkReal x9890=(gconst20*r20);
IkReal x9891=((1.0)*x9886);
IkReal x9892=(gconst19*x9886);
IkReal x9893=((1.0)*gconst19*x9885);
evalcond[0]=(x9889+((r02*x9886)));
evalcond[1]=((((-1.0)*x9888))+((r02*x9885)));
evalcond[2]=(((x9885*x9890))+(((-1.0)*r21*x9893)));
evalcond[3]=(((r21*x9892))+(((-1.0)*x9890*x9891)));
evalcond[4]=((((-1.0)*r11*x9893))+((cj8*x9888))+((x9885*x9887)));
evalcond[5]=((((-1.0)*x9887*x9891))+((cj8*x9889))+((r11*x9892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x9894=((-1.0)*r21);
IkReal x9895=((-1.0)*px);
CheckValue<IkReal> x9897 = IKatan2WithCheck(IkReal(r20),IkReal(x9894),IKFAST_ATAN2_MAGTHRESH);
if(!x9897.valid){
continue;
}
IkReal x9896=((-1.0)*(x9897.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9895);
rxp1_1=(px*r21);
rxp1_2=(r11*x9895);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst19;
cj12=gconst20;
j12=x9896;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst18=x9896;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x9894;
j11eval[0]=r02;
j11eval[1]=IKsign(r02);
j11eval[2]=((IKabs((cj9*sj7)))+(IKabs((sj7*sj9))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x9898=((-1.0)*r21);
IkReal x9899=((-1.0)*px);
CheckValue<IkReal> x9901 = IKatan2WithCheck(IkReal(r20),IkReal(x9898),IKFAST_ATAN2_MAGTHRESH);
if(!x9901.valid){
continue;
}
IkReal x9900=((-1.0)*(x9901.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9899);
rxp1_1=(px*r21);
rxp1_2=(r11*x9899);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst19;
cj12=gconst20;
j12=x9900;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst18=x9900;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x9898;
IkReal x9902=(cj8*sj7);
IkReal x9903=(((r11*r20))+(((-1.0)*r10*r21)));
j11eval[0]=x9903;
j11eval[1]=((IKabs((cj9*x9902)))+(IKabs((sj9*x9902))));
j11eval[2]=IKsign(x9903);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x9904=((-1.0)*r21);
IkReal x9905=((-1.0)*px);
CheckValue<IkReal> x9907 = IKatan2WithCheck(IkReal(r20),IkReal(x9904),IKFAST_ATAN2_MAGTHRESH);
if(!x9907.valid){
continue;
}
IkReal x9906=((-1.0)*(x9907.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9905);
rxp1_1=(px*r21);
rxp1_2=(r11*x9905);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst19;
cj12=gconst20;
j12=x9906;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst18=x9906;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x9904;
j11eval[0]=(((r11*r20))+(((-1.0)*r10*r21)));
j11eval[1]=r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9908=((-1.0)*sj7);
CheckValue<IkReal> x9909=IKPowWithIntegerCheck(((((-1.0)*gconst19*r11))+((gconst20*r10))),-1);
if(!x9909.valid){
continue;
}
CheckValue<IkReal> x9910=IKPowWithIntegerCheck(r02,-1);
if(!x9910.valid){
continue;
}
if( IKabs((cj8*sj9*x9908*(x9909.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj9*x9908*(x9910.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj8*sj9*x9908*(x9909.value)))+IKsqr((cj9*x9908*(x9910.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((cj8*sj9*x9908*(x9909.value)), (cj9*x9908*(x9910.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9911=IKsin(j11);
IkReal x9912=IKcos(j11);
IkReal x9913=(sj7*sj9);
IkReal x9914=(cj9*sj7);
IkReal x9915=(gconst20*x9912);
IkReal x9916=(gconst20*x9911);
IkReal x9917=((1.0)*x9911);
IkReal x9918=((1.0)*gconst19*x9912);
evalcond[0]=(x9914+((r02*x9912)));
evalcond[1]=((((-1.0)*x9913))+(((-1.0)*r02*x9917)));
evalcond[2]=(((r20*x9916))+(((-1.0)*gconst19*r21*x9917)));
evalcond[3]=(((r20*x9915))+(((-1.0)*r21*x9918)));
evalcond[4]=((((-1.0)*gconst19*r11*x9917))+((cj8*x9913))+((r10*x9916)));
evalcond[5]=((((-1.0)*r11*x9918))+((cj8*x9914))+((r10*x9915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9919=((-1.0)*cj8*sj7);
CheckValue<IkReal> x9920 = IKatan2WithCheck(IkReal((sj9*x9919)),IkReal((cj9*x9919)),IKFAST_ATAN2_MAGTHRESH);
if(!x9920.valid){
continue;
}
CheckValue<IkReal> x9921=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst19*r11))+((gconst20*r10)))),-1);
if(!x9921.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x9920.value)+(((1.5707963267949)*(x9921.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9922=IKsin(j11);
IkReal x9923=IKcos(j11);
IkReal x9924=(sj7*sj9);
IkReal x9925=(cj9*sj7);
IkReal x9926=(gconst20*x9923);
IkReal x9927=(gconst20*x9922);
IkReal x9928=((1.0)*x9922);
IkReal x9929=((1.0)*gconst19*x9923);
evalcond[0]=(((r02*x9923))+x9925);
evalcond[1]=((((-1.0)*r02*x9928))+(((-1.0)*x9924)));
evalcond[2]=((((-1.0)*gconst19*r21*x9928))+((r20*x9927)));
evalcond[3]=((((-1.0)*r21*x9929))+((r20*x9926)));
evalcond[4]=(((r10*x9927))+(((-1.0)*gconst19*r11*x9928))+((cj8*x9924)));
evalcond[5]=(((r10*x9926))+(((-1.0)*r11*x9929))+((cj8*x9925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9930=((-1.0)*sj7);
CheckValue<IkReal> x9931=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x9931.valid){
continue;
}
CheckValue<IkReal> x9932 = IKatan2WithCheck(IkReal((sj9*x9930)),IkReal((cj9*x9930)),IKFAST_ATAN2_MAGTHRESH);
if(!x9932.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9931.value)))+(x9932.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x9933=IKsin(j11);
IkReal x9934=IKcos(j11);
IkReal x9935=(sj7*sj9);
IkReal x9936=(cj9*sj7);
IkReal x9937=(gconst20*x9934);
IkReal x9938=(gconst20*x9933);
IkReal x9939=((1.0)*x9933);
IkReal x9940=((1.0)*gconst19*x9934);
evalcond[0]=(((r02*x9934))+x9936);
evalcond[1]=((((-1.0)*r02*x9939))+(((-1.0)*x9935)));
evalcond[2]=((((-1.0)*gconst19*r21*x9939))+((r20*x9938)));
evalcond[3]=((((-1.0)*r21*x9940))+((r20*x9937)));
evalcond[4]=(((r10*x9938))+(((-1.0)*gconst19*r11*x9939))+((cj8*x9935)));
evalcond[5]=(((r10*x9937))+(((-1.0)*r11*x9940))+((cj8*x9936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9944=IKPowWithIntegerCheck(r02,-1);
if(!x9944.valid){
continue;
}
IkReal x9941=x9944.value;
IkReal x9942=((1.0)*cj9);
IkReal x9943=(cj7*cj8);
CheckValue<IkReal> x9945=IKPowWithIntegerCheck(cj10,-1);
if(!x9945.valid){
continue;
}
if( IKabs((x9941*(x9945.value)*((((sj7*sj9))+(((-1.0)*x9942*x9943)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x9941*(((((-1.0)*sj9*x9943))+(((-1.0)*sj7*x9942)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9941*(x9945.value)*((((sj7*sj9))+(((-1.0)*x9942*x9943))))))+IKsqr((x9941*(((((-1.0)*sj9*x9943))+(((-1.0)*sj7*x9942))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((x9941*(x9945.value)*((((sj7*sj9))+(((-1.0)*x9942*x9943))))), (x9941*(((((-1.0)*sj9*x9943))+(((-1.0)*sj7*x9942))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x9946=IKsin(j11);
IkReal x9947=IKcos(j11);
IkReal x9948=(cj8*sj9);
IkReal x9949=(gconst20*r10);
IkReal x9950=((1.0)*gconst19);
IkReal x9951=(r20*sj10);
IkReal x9952=(cj9*sj7);
IkReal x9953=(gconst19*r11);
IkReal x9954=((1.0)*sj9);
IkReal x9955=((1.0)*gconst20);
IkReal x9956=(cj10*gconst19);
IkReal x9957=(cj10*gconst20);
IkReal x9958=(cj7*cj9);
IkReal x9959=(cj10*x9947);
IkReal x9960=(sj10*x9947);
IkReal x9961=(r02*x9946);
IkReal x9962=(gconst19*r21*x9947);
evalcond[0]=(((sj10*x9961))+((cj7*sj8)));
evalcond[1]=(((cj7*x9948))+((r02*x9947))+x9952);
evalcond[2]=((((-1.0)*sj7*x9954))+((cj8*x9958))+((cj10*x9961)));
evalcond[3]=(((gconst20*r20*x9946))+(((-1.0)*r21*x9946*x9950))+(((-1.0)*sj8*x9954)));
evalcond[4]=((((-1.0)*x9958))+((x9946*x9949))+((sj7*x9948))+(((-1.0)*r11*x9946*x9950)));
evalcond[5]=(cj8+((r20*x9956))+((gconst19*r21*x9960))+(((-1.0)*x9947*x9951*x9955))+((r21*x9957)));
evalcond[6]=(((r11*x9957))+((x9953*x9960))+(((-1.0)*x9949*x9960))+((sj7*sj8))+((r10*x9956)));
evalcond[7]=((((-1.0)*cj9*sj8))+(((-1.0)*r20*x9955*x9959))+(((-1.0)*x9950*x9951))+(((-1.0)*r21*sj10*x9955))+((r21*x9947*x9956)));
evalcond[8]=(((x9953*x9959))+(((-1.0)*r11*sj10*x9955))+(((-1.0)*x9949*x9959))+((cj8*x9952))+(((-1.0)*r10*sj10*x9950))+((cj7*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x9964=IKPowWithIntegerCheck(r02,-1);
if(!x9964.valid){
continue;
}
IkReal x9963=x9964.value;
CheckValue<IkReal> x9965=IKPowWithIntegerCheck(sj10,-1);
if(!x9965.valid){
continue;
}
if( IKabs(((-1.0)*cj7*sj8*x9963*(x9965.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x9963*(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj7*sj8*x9963*(x9965.value)))+IKsqr((x9963*(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*cj7*sj8*x9963*(x9965.value)), (x9963*(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x9966=IKsin(j11);
IkReal x9967=IKcos(j11);
IkReal x9968=(cj8*sj9);
IkReal x9969=(gconst20*r10);
IkReal x9970=((1.0)*gconst19);
IkReal x9971=(r20*sj10);
IkReal x9972=(cj9*sj7);
IkReal x9973=(gconst19*r11);
IkReal x9974=((1.0)*sj9);
IkReal x9975=((1.0)*gconst20);
IkReal x9976=(cj10*gconst19);
IkReal x9977=(cj10*gconst20);
IkReal x9978=(cj7*cj9);
IkReal x9979=(cj10*x9967);
IkReal x9980=(sj10*x9967);
IkReal x9981=(r02*x9966);
IkReal x9982=(gconst19*r21*x9967);
evalcond[0]=(((sj10*x9981))+((cj7*sj8)));
evalcond[1]=(((r02*x9967))+((cj7*x9968))+x9972);
evalcond[2]=((((-1.0)*sj7*x9974))+((cj8*x9978))+((cj10*x9981)));
evalcond[3]=(((gconst20*r20*x9966))+(((-1.0)*r21*x9966*x9970))+(((-1.0)*sj8*x9974)));
evalcond[4]=(((sj7*x9968))+(((-1.0)*r11*x9966*x9970))+((x9966*x9969))+(((-1.0)*x9978)));
evalcond[5]=(cj8+((r20*x9976))+((gconst19*r21*x9980))+(((-1.0)*x9967*x9971*x9975))+((r21*x9977)));
evalcond[6]=((((-1.0)*x9969*x9980))+((r11*x9977))+((x9973*x9980))+((r10*x9976))+((sj7*sj8)));
evalcond[7]=((((-1.0)*r21*sj10*x9975))+(((-1.0)*cj9*sj8))+(((-1.0)*r20*x9975*x9979))+(((-1.0)*x9970*x9971))+((r21*x9967*x9976)));
evalcond[8]=(((x9973*x9979))+(((-1.0)*r11*sj10*x9975))+(((-1.0)*x9969*x9979))+((cj8*x9972))+((cj7*sj9))+(((-1.0)*r10*sj10*x9970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x9983=((1.0)*sj7);
IkReal x9984=(cj8*sj9);
CheckValue<IkReal> x9985=IKPowWithIntegerCheck(((((-1.0)*gconst19*r11))+((gconst20*r10))),-1);
if(!x9985.valid){
continue;
}
CheckValue<IkReal> x9986=IKPowWithIntegerCheck(r02,-1);
if(!x9986.valid){
continue;
}
if( IKabs(((x9985.value)*((((cj7*cj9))+(((-1.0)*x9983*x9984)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9986.value)*(((((-1.0)*cj7*x9984))+(((-1.0)*cj9*x9983)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9985.value)*((((cj7*cj9))+(((-1.0)*x9983*x9984))))))+IKsqr(((x9986.value)*(((((-1.0)*cj7*x9984))+(((-1.0)*cj9*x9983))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x9985.value)*((((cj7*cj9))+(((-1.0)*x9983*x9984))))), ((x9986.value)*(((((-1.0)*cj7*x9984))+(((-1.0)*cj9*x9983))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x9987=IKsin(j11);
IkReal x9988=IKcos(j11);
IkReal x9989=(cj8*sj9);
IkReal x9990=(gconst20*r10);
IkReal x9991=((1.0)*gconst19);
IkReal x9992=(r20*sj10);
IkReal x9993=(cj9*sj7);
IkReal x9994=(gconst19*r11);
IkReal x9995=((1.0)*sj9);
IkReal x9996=((1.0)*gconst20);
IkReal x9997=(cj10*gconst19);
IkReal x9998=(cj10*gconst20);
IkReal x9999=(cj7*cj9);
IkReal x10000=(cj10*x9988);
IkReal x10001=(sj10*x9988);
IkReal x10002=(r02*x9987);
IkReal x10003=(gconst19*r21*x9988);
evalcond[0]=(((cj7*sj8))+((sj10*x10002)));
evalcond[1]=(((cj7*x9989))+((r02*x9988))+x9993);
evalcond[2]=((((-1.0)*sj7*x9995))+((cj10*x10002))+((cj8*x9999)));
evalcond[3]=((((-1.0)*r21*x9987*x9991))+(((-1.0)*sj8*x9995))+((gconst20*r20*x9987)));
evalcond[4]=(((x9987*x9990))+((sj7*x9989))+(((-1.0)*r11*x9987*x9991))+(((-1.0)*x9999)));
evalcond[5]=(cj8+(((-1.0)*x9988*x9992*x9996))+((r21*x9998))+((r20*x9997))+((gconst19*r21*x10001)));
evalcond[6]=(((r11*x9998))+((r10*x9997))+((x10001*x9994))+(((-1.0)*x10001*x9990))+((sj7*sj8)));
evalcond[7]=((((-1.0)*cj9*sj8))+(((-1.0)*x9991*x9992))+((r21*x9988*x9997))+(((-1.0)*r20*x10000*x9996))+(((-1.0)*r21*sj10*x9996)));
evalcond[8]=((((-1.0)*r11*sj10*x9996))+(((-1.0)*r10*sj10*x9991))+((x10000*x9994))+(((-1.0)*x10000*x9990))+((cj7*sj9))+((cj8*x9993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x10004 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10004.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x10004.value))));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
CheckValue<IkReal> x10005 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10005.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10005.value)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[2];
IkReal x10006=((-1.0)*px);
CheckValue<IkReal> x10008 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10008.valid){
continue;
}
IkReal x10007=((1.0)*(x10008.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10006);
rxp1_1=(px*r21);
rxp1_2=(r11*x10006);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst22;
cj12=gconst23;
j12=((3.14159265)+(((-1.0)*x10007)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x10007)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j11eval[0]=((((-1.0)*r11*r20))+(((1.0)*r10*r21)));
j11eval[1]=r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x10009=((-1.0)*px);
CheckValue<IkReal> x10011 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10011.valid){
continue;
}
IkReal x10010=((1.0)*(x10011.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10009);
rxp1_1=(px*r21);
rxp1_2=(r11*x10009);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst22;
cj12=gconst23;
j12=((3.14159265)+(((-1.0)*x10010)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x10010)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j11eval[0]=r02;
j11eval[1]=sj10;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x10012=((-1.0)*px);
CheckValue<IkReal> x10014 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10014.valid){
continue;
}
IkReal x10013=((1.0)*(x10014.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10012);
rxp1_1=(px*r21);
rxp1_2=(r11*x10012);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst22;
cj12=gconst23;
j12=((3.14159265)+(((-1.0)*x10013)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x10013)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j11eval[0]=cj10;
j11eval[1]=r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x10015=((-1.0)*px);
CheckValue<IkReal> x10017 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10017.valid){
continue;
}
IkReal x10016=((1.0)*(x10017.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10015);
rxp1_1=(px*r21);
rxp1_2=(r11*x10015);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst22;
cj12=gconst23;
j12=((3.14159265)+(((-1.0)*x10016)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x10016)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j11eval[0]=r02;
j11eval[1]=((IKabs(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9)))))+(IKabs((cj7*sj8))));
j11eval[2]=IKsign(r02);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x10018=((-1.0)*px);
CheckValue<IkReal> x10020 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10020.valid){
continue;
}
IkReal x10019=((1.0)*(x10020.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10018);
rxp1_1=(px*r21);
rxp1_2=(r11*x10018);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst22;
cj12=gconst23;
j12=((3.14159265)+(((-1.0)*x10019)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x10019)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
IkReal x10021=((((-1.0)*r11*r20))+(((1.0)*r10*r21)));
j11eval[0]=x10021;
j11eval[1]=IKsign(x10021);
j11eval[2]=((IKabs((sj7*sj8)))+(IKabs((((cj7*cj9))+(((-1.0)*cj8*sj7*sj9))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x10022=((-1.0)*px);
CheckValue<IkReal> x10024 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10024.valid){
continue;
}
IkReal x10023=((1.0)*(x10024.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10022);
rxp1_1=(px*r21);
rxp1_2=(r11*x10022);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst22;
cj12=gconst23;
j12=((3.14159265)+(((-1.0)*x10023)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x10023)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j11eval[0]=r02;
j11eval[1]=((((1.0)*r11*r20))+(((-1.0)*r10*r21)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x10025=((-1.0)*sj8);
CheckValue<IkReal> x10026=IKPowWithIntegerCheck(r02,-1);
if(!x10026.valid){
continue;
}
CheckValue<IkReal> x10027=IKPowWithIntegerCheck((((gconst22*r11))+(((-1.0)*gconst23*r10))),-1);
if(!x10027.valid){
continue;
}
if( IKabs((cj7*x10025*(x10026.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj7*x10025*(x10027.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj7*x10025*(x10026.value)))+IKsqr((sj7*x10025*(x10027.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((cj7*x10025*(x10026.value)), (sj7*x10025*(x10027.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x10028=IKcos(j11);
IkReal x10029=IKsin(j11);
IkReal x10030=(cj8*sj9);
IkReal x10031=(gconst22*r11);
IkReal x10032=(gconst22*r21);
IkReal x10033=(gconst23*x10029);
IkReal x10034=((1.0)*x10029);
IkReal x10035=((1.0)*gconst23*x10028);
evalcond[0]=(((r02*x10029))+((cj7*sj8)));
evalcond[1]=(((cj9*sj7))+((r02*x10028))+((cj7*x10030)));
evalcond[2]=(cj8+((x10028*x10032))+(((-1.0)*r20*x10035)));
evalcond[3]=((((-1.0)*r10*x10035))+((x10028*x10031))+((sj7*sj8)));
evalcond[4]=((((-1.0)*sj8*sj9))+((r20*x10033))+(((-1.0)*x10032*x10034)));
evalcond[5]=((((-1.0)*cj7*cj9))+((sj7*x10030))+((r10*x10033))+(((-1.0)*x10031*x10034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x10036 = IKatan2WithCheck(IkReal((((cj7*cj9))+(((-1.0)*cj8*sj7*sj9)))),IkReal((sj7*sj8)),IKFAST_ATAN2_MAGTHRESH);
if(!x10036.valid){
continue;
}
CheckValue<IkReal> x10037=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r11))+((gconst23*r10)))),-1);
if(!x10037.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x10036.value)+(((1.5707963267949)*(x10037.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x10038=IKcos(j11);
IkReal x10039=IKsin(j11);
IkReal x10040=(cj8*sj9);
IkReal x10041=(gconst22*r11);
IkReal x10042=(gconst22*r21);
IkReal x10043=(gconst23*x10039);
IkReal x10044=((1.0)*x10039);
IkReal x10045=((1.0)*gconst23*x10038);
evalcond[0]=(((cj7*sj8))+((r02*x10039)));
evalcond[1]=(((cj7*x10040))+((cj9*sj7))+((r02*x10038)));
evalcond[2]=(cj8+(((-1.0)*r20*x10045))+((x10038*x10042)));
evalcond[3]=((((-1.0)*r10*x10045))+((sj7*sj8))+((x10038*x10041)));
evalcond[4]=((((-1.0)*sj8*sj9))+(((-1.0)*x10042*x10044))+((r20*x10043)));
evalcond[5]=((((-1.0)*x10041*x10044))+(((-1.0)*cj7*cj9))+((r10*x10043))+((sj7*x10040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x10046=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x10046.valid){
continue;
}
CheckValue<IkReal> x10047 = IKatan2WithCheck(IkReal(((-1.0)*cj7*sj8)),IkReal(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10047.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10046.value)))+(x10047.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x10048=IKcos(j11);
IkReal x10049=IKsin(j11);
IkReal x10050=(cj8*sj9);
IkReal x10051=(gconst22*r11);
IkReal x10052=(gconst22*r21);
IkReal x10053=(gconst23*x10049);
IkReal x10054=((1.0)*x10049);
IkReal x10055=((1.0)*gconst23*x10048);
evalcond[0]=(((cj7*sj8))+((r02*x10049)));
evalcond[1]=(((cj9*sj7))+((cj7*x10050))+((r02*x10048)));
evalcond[2]=(cj8+(((-1.0)*r20*x10055))+((x10048*x10052)));
evalcond[3]=((((-1.0)*r10*x10055))+((sj7*sj8))+((x10048*x10051)));
evalcond[4]=((((-1.0)*sj8*sj9))+((r20*x10053))+(((-1.0)*x10052*x10054)));
evalcond[5]=((((-1.0)*cj7*cj9))+((r10*x10053))+(((-1.0)*x10051*x10054))+((sj7*x10050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x10056=((-1.0)*px);
CheckValue<IkReal> x10058 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10058.valid){
continue;
}
IkReal x10057=((1.0)*(x10058.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10056);
rxp1_1=(px*r21);
rxp1_2=(r11*x10056);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst22;
cj12=gconst23;
j12=((3.14159265)+(((-1.0)*x10057)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x10057)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j11eval[0]=r02;
j11eval[1]=IKsign(r02);
j11eval[2]=((IKabs(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9)))))+(IKabs((cj7*sj8))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x10059=((-1.0)*px);
CheckValue<IkReal> x10061 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10061.valid){
continue;
}
IkReal x10060=((1.0)*(x10061.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10059);
rxp1_1=(px*r21);
rxp1_2=(r11*x10059);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst22;
cj12=gconst23;
j12=((3.14159265)+(((-1.0)*x10060)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x10060)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
IkReal x10062=((((-1.0)*r11*r20))+(((1.0)*r10*r21)));
j11eval[0]=x10062;
j11eval[1]=IKsign(x10062);
j11eval[2]=((IKabs((sj7*sj8)))+(IKabs((((cj7*cj9))+(((-1.0)*cj8*sj7*sj9))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x10063=((-1.0)*px);
CheckValue<IkReal> x10065 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10065.valid){
continue;
}
IkReal x10064=((1.0)*(x10065.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10063);
rxp1_1=(px*r21);
rxp1_2=(r11*x10063);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst22;
cj12=gconst23;
j12=((3.14159265)+(((-1.0)*x10064)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x10064)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j11eval[0]=r02;
j11eval[1]=((((-1.0)*r11*r20))+(((1.0)*r10*r21)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x10066=IKPowWithIntegerCheck(r02,-1);
if(!x10066.valid){
continue;
}
CheckValue<IkReal> x10067=IKPowWithIntegerCheck(((((-1.0)*gconst22*r11))+((gconst23*r10))),-1);
if(!x10067.valid){
continue;
}
if( IKabs((cj7*sj8*(x10066.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj7*sj8*(x10067.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj7*sj8*(x10066.value)))+IKsqr(((-1.0)*sj7*sj8*(x10067.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((cj7*sj8*(x10066.value)), ((-1.0)*sj7*sj8*(x10067.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x10068=IKcos(j11);
IkReal x10069=IKsin(j11);
IkReal x10070=((1.0)*gconst22);
IkReal x10071=(cj8*sj9);
IkReal x10072=(gconst23*x10069);
IkReal x10073=(gconst23*x10068);
evalcond[0]=(((cj7*sj8))+(((-1.0)*r02*x10069)));
evalcond[1]=(((cj9*sj7))+((r02*x10068))+((cj7*x10071)));
evalcond[2]=(cj8+((r20*x10073))+(((-1.0)*r21*x10068*x10070)));
evalcond[3]=(((r10*x10073))+(((-1.0)*r11*x10068*x10070))+((sj7*sj8)));
evalcond[4]=((((-1.0)*sj8*sj9))+((r20*x10072))+(((-1.0)*r21*x10069*x10070)));
evalcond[5]=(((r10*x10072))+(((-1.0)*cj7*cj9))+((sj7*x10071))+(((-1.0)*r11*x10069*x10070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x10074=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r11))+((gconst23*r10)))),-1);
if(!x10074.valid){
continue;
}
CheckValue<IkReal> x10075 = IKatan2WithCheck(IkReal((((cj7*cj9))+(((-1.0)*cj8*sj7*sj9)))),IkReal(((-1.0)*sj7*sj8)),IKFAST_ATAN2_MAGTHRESH);
if(!x10075.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10074.value)))+(x10075.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x10076=IKcos(j11);
IkReal x10077=IKsin(j11);
IkReal x10078=((1.0)*gconst22);
IkReal x10079=(cj8*sj9);
IkReal x10080=(gconst23*x10077);
IkReal x10081=(gconst23*x10076);
evalcond[0]=(((cj7*sj8))+(((-1.0)*r02*x10077)));
evalcond[1]=(((cj9*sj7))+((r02*x10076))+((cj7*x10079)));
evalcond[2]=(cj8+((r20*x10081))+(((-1.0)*r21*x10076*x10078)));
evalcond[3]=((((-1.0)*r11*x10076*x10078))+((sj7*sj8))+((r10*x10081)));
evalcond[4]=((((-1.0)*sj8*sj9))+((r20*x10080))+(((-1.0)*r21*x10077*x10078)));
evalcond[5]=((((-1.0)*cj7*cj9))+(((-1.0)*r11*x10077*x10078))+((sj7*x10079))+((r10*x10080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x10082=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x10082.valid){
continue;
}
CheckValue<IkReal> x10083 = IKatan2WithCheck(IkReal((cj7*sj8)),IkReal(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10083.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10082.value)))+(x10083.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x10084=IKcos(j11);
IkReal x10085=IKsin(j11);
IkReal x10086=((1.0)*gconst22);
IkReal x10087=(cj8*sj9);
IkReal x10088=(gconst23*x10085);
IkReal x10089=(gconst23*x10084);
evalcond[0]=((((-1.0)*r02*x10085))+((cj7*sj8)));
evalcond[1]=(((cj9*sj7))+((r02*x10084))+((cj7*x10087)));
evalcond[2]=(cj8+(((-1.0)*r21*x10084*x10086))+((r20*x10089)));
evalcond[3]=((((-1.0)*r11*x10084*x10086))+((sj7*sj8))+((r10*x10089)));
evalcond[4]=((((-1.0)*sj8*sj9))+(((-1.0)*r21*x10085*x10086))+((r20*x10088)));
evalcond[5]=((((-1.0)*cj7*cj9))+((sj7*x10087))+(((-1.0)*r11*x10085*x10086))+((r10*x10088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x10090=((-1.0)*px);
CheckValue<IkReal> x10092 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10092.valid){
continue;
}
IkReal x10091=((1.0)*(x10092.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10090);
rxp1_1=(px*r21);
rxp1_2=(r11*x10090);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst22;
cj12=gconst23;
j12=((3.14159265)+(((-1.0)*x10091)));
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x10091)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j11eval[0]=r02;
j11eval[1]=IKsign(r02);
j11eval[2]=((IKabs((cj9*sj7)))+(IKabs((sj7*sj9))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x10093=((-1.0)*px);
CheckValue<IkReal> x10095 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10095.valid){
continue;
}
IkReal x10094=((1.0)*(x10095.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10093);
rxp1_1=(px*r21);
rxp1_2=(r11*x10093);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst22;
cj12=gconst23;
j12=((3.14159265)+(((-1.0)*x10094)));
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x10094)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
IkReal x10096=(cj8*sj7);
IkReal x10097=((((-1.0)*r11*r20))+(((1.0)*r10*r21)));
j11eval[0]=x10097;
j11eval[1]=IKsign(x10097);
j11eval[2]=((IKabs((cj9*x10096)))+(IKabs((sj9*x10096))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x10098=((-1.0)*px);
CheckValue<IkReal> x10100 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10100.valid){
continue;
}
IkReal x10099=((1.0)*(x10100.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10098);
rxp1_1=(px*r21);
rxp1_2=(r11*x10098);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst22;
cj12=gconst23;
j12=((3.14159265)+(((-1.0)*x10099)));
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x10099)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j11eval[0]=r02;
j11eval[1]=((((1.0)*r11*r20))+(((-1.0)*r10*r21)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x10101=IKPowWithIntegerCheck(r02,-1);
if(!x10101.valid){
continue;
}
CheckValue<IkReal> x10102=IKPowWithIntegerCheck((((gconst22*r11))+(((-1.0)*gconst23*r10))),-1);
if(!x10102.valid){
continue;
}
if( IKabs((sj7*sj9*(x10101.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj8*cj9*sj7*(x10102.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj7*sj9*(x10101.value)))+IKsqr(((-1.0)*cj8*cj9*sj7*(x10102.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((sj7*sj9*(x10101.value)), ((-1.0)*cj8*cj9*sj7*(x10102.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x10103=IKsin(j11);
IkReal x10104=IKcos(j11);
IkReal x10105=(gconst23*r20);
IkReal x10106=(gconst23*r10);
IkReal x10107=(gconst22*r11);
IkReal x10108=(cj8*sj7);
IkReal x10109=(gconst22*r21);
IkReal x10110=((1.0)*x10104);
IkReal x10111=((1.0)*x10103);
evalcond[0]=(((cj9*sj7))+((r02*x10104)));
evalcond[1]=(((r02*x10103))+(((-1.0)*sj7*sj9)));
evalcond[2]=((((-1.0)*x10109*x10111))+((x10103*x10105)));
evalcond[3]=((((-1.0)*x10105*x10110))+((x10104*x10109)));
evalcond[4]=(((sj9*x10108))+((x10103*x10106))+(((-1.0)*x10107*x10111)));
evalcond[5]=((((-1.0)*x10106*x10110))+((cj9*x10108))+((x10104*x10107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x10112=(cj8*sj7);
CheckValue<IkReal> x10113=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r11))+((gconst23*r10)))),-1);
if(!x10113.valid){
continue;
}
CheckValue<IkReal> x10114 = IKatan2WithCheck(IkReal(((-1.0)*sj9*x10112)),IkReal((cj9*x10112)),IKFAST_ATAN2_MAGTHRESH);
if(!x10114.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10113.value)))+(x10114.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x10115=IKsin(j11);
IkReal x10116=IKcos(j11);
IkReal x10117=(gconst23*r20);
IkReal x10118=(gconst23*r10);
IkReal x10119=(gconst22*r11);
IkReal x10120=(cj8*sj7);
IkReal x10121=(gconst22*r21);
IkReal x10122=((1.0)*x10116);
IkReal x10123=((1.0)*x10115);
evalcond[0]=(((cj9*sj7))+((r02*x10116)));
evalcond[1]=(((r02*x10115))+(((-1.0)*sj7*sj9)));
evalcond[2]=((((-1.0)*x10121*x10123))+((x10115*x10117)));
evalcond[3]=(((x10116*x10121))+(((-1.0)*x10117*x10122)));
evalcond[4]=(((sj9*x10120))+((x10115*x10118))+(((-1.0)*x10119*x10123)));
evalcond[5]=(((x10116*x10119))+((cj9*x10120))+(((-1.0)*x10118*x10122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x10124=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x10124.valid){
continue;
}
CheckValue<IkReal> x10125 = IKatan2WithCheck(IkReal((sj7*sj9)),IkReal(((-1.0)*cj9*sj7)),IKFAST_ATAN2_MAGTHRESH);
if(!x10125.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10124.value)))+(x10125.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x10126=IKsin(j11);
IkReal x10127=IKcos(j11);
IkReal x10128=(gconst23*r20);
IkReal x10129=(gconst23*r10);
IkReal x10130=(gconst22*r11);
IkReal x10131=(cj8*sj7);
IkReal x10132=(gconst22*r21);
IkReal x10133=((1.0)*x10127);
IkReal x10134=((1.0)*x10126);
evalcond[0]=(((cj9*sj7))+((r02*x10127)));
evalcond[1]=(((r02*x10126))+(((-1.0)*sj7*sj9)));
evalcond[2]=((((-1.0)*x10132*x10134))+((x10126*x10128)));
evalcond[3]=((((-1.0)*x10128*x10133))+((x10127*x10132)));
evalcond[4]=(((x10126*x10129))+((sj9*x10131))+(((-1.0)*x10130*x10134)));
evalcond[5]=((((-1.0)*x10129*x10133))+((cj9*x10131))+((x10127*x10130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
IkReal x10135=((-1.0)*px);
CheckValue<IkReal> x10137 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10137.valid){
continue;
}
IkReal x10136=((1.0)*(x10137.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10135);
rxp1_1=(px*r21);
rxp1_2=(r11*x10135);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst22;
cj12=gconst23;
j12=((3.14159265)+(((-1.0)*x10136)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x10136)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j11eval[0]=r02;
j11eval[1]=IKsign(r02);
j11eval[2]=((IKabs((cj9*sj7)))+(IKabs((sj7*sj9))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
IkReal x10138=((-1.0)*px);
CheckValue<IkReal> x10140 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10140.valid){
continue;
}
IkReal x10139=((1.0)*(x10140.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10138);
rxp1_1=(px*r21);
rxp1_2=(r11*x10138);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst22;
cj12=gconst23;
j12=((3.14159265)+(((-1.0)*x10139)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x10139)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
IkReal x10141=(cj8*sj7);
IkReal x10142=((((-1.0)*r11*r20))+(((1.0)*r10*r21)));
j11eval[0]=x10142;
j11eval[1]=IKsign(x10142);
j11eval[2]=((IKabs((cj9*x10141)))+(IKabs((sj9*x10141))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x10143=((-1.0)*px);
CheckValue<IkReal> x10145 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10145.valid){
continue;
}
IkReal x10144=((1.0)*(x10145.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10143);
rxp1_1=(px*r21);
rxp1_2=(r11*x10143);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj12=gconst22;
cj12=gconst23;
j12=((3.14159265)+(((-1.0)*x10144)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x10144)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j11eval[0]=((((-1.0)*r11*r20))+(((1.0)*r10*r21)));
j11eval[1]=r02;
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x10146=((-1.0)*sj7);
CheckValue<IkReal> x10147=IKPowWithIntegerCheck(((((-1.0)*gconst22*r11))+((gconst23*r10))),-1);
if(!x10147.valid){
continue;
}
CheckValue<IkReal> x10148=IKPowWithIntegerCheck(r02,-1);
if(!x10148.valid){
continue;
}
if( IKabs((cj8*sj9*x10146*(x10147.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj9*x10146*(x10148.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj8*sj9*x10146*(x10147.value)))+IKsqr((cj9*x10146*(x10148.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((cj8*sj9*x10146*(x10147.value)), (cj9*x10146*(x10148.value)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x10149=IKsin(j11);
IkReal x10150=IKcos(j11);
IkReal x10151=(sj7*sj9);
IkReal x10152=(cj9*sj7);
IkReal x10153=(gconst23*x10149);
IkReal x10154=(gconst23*x10150);
IkReal x10155=((1.0)*x10149);
IkReal x10156=((1.0)*gconst22*x10150);
evalcond[0]=(((r02*x10150))+x10152);
evalcond[1]=((((-1.0)*r02*x10155))+(((-1.0)*x10151)));
evalcond[2]=((((-1.0)*gconst22*r21*x10155))+((r20*x10153)));
evalcond[3]=((((-1.0)*r21*x10156))+((r20*x10154)));
evalcond[4]=(((cj8*x10151))+((r10*x10153))+(((-1.0)*gconst22*r11*x10155)));
evalcond[5]=(((cj8*x10152))+((r10*x10154))+(((-1.0)*r11*x10156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x10157=((-1.0)*cj8*sj7);
CheckValue<IkReal> x10158=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r11))+((gconst23*r10)))),-1);
if(!x10158.valid){
continue;
}
CheckValue<IkReal> x10159 = IKatan2WithCheck(IkReal((sj9*x10157)),IkReal((cj9*x10157)),IKFAST_ATAN2_MAGTHRESH);
if(!x10159.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10158.value)))+(x10159.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x10160=IKsin(j11);
IkReal x10161=IKcos(j11);
IkReal x10162=(sj7*sj9);
IkReal x10163=(cj9*sj7);
IkReal x10164=(gconst23*x10160);
IkReal x10165=(gconst23*x10161);
IkReal x10166=((1.0)*x10160);
IkReal x10167=((1.0)*gconst22*x10161);
evalcond[0]=(x10163+((r02*x10161)));
evalcond[1]=((((-1.0)*x10162))+(((-1.0)*r02*x10166)));
evalcond[2]=((((-1.0)*gconst22*r21*x10166))+((r20*x10164)));
evalcond[3]=((((-1.0)*r21*x10167))+((r20*x10165)));
evalcond[4]=(((r10*x10164))+(((-1.0)*gconst22*r11*x10166))+((cj8*x10162)));
evalcond[5]=(((r10*x10165))+(((-1.0)*r11*x10167))+((cj8*x10163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x10168=((-1.0)*sj7);
CheckValue<IkReal> x10169=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x10169.valid){
continue;
}
CheckValue<IkReal> x10170 = IKatan2WithCheck(IkReal((sj9*x10168)),IkReal((cj9*x10168)),IKFAST_ATAN2_MAGTHRESH);
if(!x10170.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10169.value)))+(x10170.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x10171=IKsin(j11);
IkReal x10172=IKcos(j11);
IkReal x10173=(sj7*sj9);
IkReal x10174=(cj9*sj7);
IkReal x10175=(gconst23*x10171);
IkReal x10176=(gconst23*x10172);
IkReal x10177=((1.0)*x10171);
IkReal x10178=((1.0)*gconst22*x10172);
evalcond[0]=(((r02*x10172))+x10174);
evalcond[1]=((((-1.0)*x10173))+(((-1.0)*r02*x10177)));
evalcond[2]=((((-1.0)*gconst22*r21*x10177))+((r20*x10175)));
evalcond[3]=((((-1.0)*r21*x10178))+((r20*x10176)));
evalcond[4]=(((r10*x10175))+((cj8*x10173))+(((-1.0)*gconst22*r11*x10177)));
evalcond[5]=(((r10*x10176))+((cj8*x10174))+(((-1.0)*r11*x10178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x10182=IKPowWithIntegerCheck(r02,-1);
if(!x10182.valid){
continue;
}
IkReal x10179=x10182.value;
IkReal x10180=((1.0)*cj9);
IkReal x10181=(cj7*cj8);
CheckValue<IkReal> x10183=IKPowWithIntegerCheck(cj10,-1);
if(!x10183.valid){
continue;
}
if( IKabs((x10179*(x10183.value)*((((sj7*sj9))+(((-1.0)*x10180*x10181)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x10179*(((((-1.0)*sj7*x10180))+(((-1.0)*sj9*x10181)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10179*(x10183.value)*((((sj7*sj9))+(((-1.0)*x10180*x10181))))))+IKsqr((x10179*(((((-1.0)*sj7*x10180))+(((-1.0)*sj9*x10181))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((x10179*(x10183.value)*((((sj7*sj9))+(((-1.0)*x10180*x10181))))), (x10179*(((((-1.0)*sj7*x10180))+(((-1.0)*sj9*x10181))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x10184=IKsin(j11);
IkReal x10185=IKcos(j11);
IkReal x10186=(cj8*sj9);
IkReal x10187=((1.0)*sj10);
IkReal x10188=(gconst22*r20);
IkReal x10189=(gconst23*r21);
IkReal x10190=(gconst22*r10);
IkReal x10191=(cj9*sj7);
IkReal x10192=(gconst22*r11);
IkReal x10193=((1.0)*sj9);
IkReal x10194=(gconst23*r11);
IkReal x10195=((1.0)*cj9);
IkReal x10196=(gconst22*r21);
IkReal x10197=(sj10*x10185);
IkReal x10198=(gconst23*x10184);
IkReal x10199=((1.0)*x10184);
IkReal x10200=(r02*x10184);
IkReal x10201=(cj10*gconst22*x10185);
IkReal x10202=(gconst23*r10*x10185);
IkReal x10203=((1.0)*gconst23*r20*x10185);
evalcond[0]=(((sj10*x10200))+((cj7*sj8)));
evalcond[1]=(((r02*x10185))+x10191+((cj7*x10186)));
evalcond[2]=(((cj10*x10200))+(((-1.0)*sj7*x10193))+((cj7*cj8*cj9)));
evalcond[3]=((((-1.0)*sj8*x10193))+((r20*x10198))+(((-1.0)*x10196*x10199)));
evalcond[4]=(((r10*x10198))+(((-1.0)*cj7*x10195))+(((-1.0)*x10192*x10199))+((sj7*x10186)));
evalcond[5]=(((x10196*x10197))+cj8+((cj10*x10189))+((cj10*x10188))+(((-1.0)*gconst23*r20*x10185*x10187)));
evalcond[6]=(((cj10*x10190))+((cj10*x10194))+((x10192*x10197))+(((-1.0)*x10187*x10202))+((sj7*sj8)));
evalcond[7]=((((-1.0)*sj8*x10195))+(((-1.0)*x10187*x10189))+(((-1.0)*x10187*x10188))+((cj10*x10185*x10196))+(((-1.0)*cj10*x10203)));
evalcond[8]=(((cj8*x10191))+(((-1.0)*x10187*x10190))+(((-1.0)*x10187*x10194))+((cj10*x10185*x10192))+(((-1.0)*cj10*x10202))+((cj7*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x10205=IKPowWithIntegerCheck(r02,-1);
if(!x10205.valid){
continue;
}
IkReal x10204=x10205.value;
CheckValue<IkReal> x10206=IKPowWithIntegerCheck(sj10,-1);
if(!x10206.valid){
continue;
}
if( IKabs(((-1.0)*cj7*sj8*x10204*(x10206.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x10204*(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj7*sj8*x10204*(x10206.value)))+IKsqr((x10204*(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*cj7*sj8*x10204*(x10206.value)), (x10204*(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x10207=IKsin(j11);
IkReal x10208=IKcos(j11);
IkReal x10209=(cj8*sj9);
IkReal x10210=((1.0)*sj10);
IkReal x10211=(gconst22*r20);
IkReal x10212=(gconst23*r21);
IkReal x10213=(gconst22*r10);
IkReal x10214=(cj9*sj7);
IkReal x10215=(gconst22*r11);
IkReal x10216=((1.0)*sj9);
IkReal x10217=(gconst23*r11);
IkReal x10218=((1.0)*cj9);
IkReal x10219=(gconst22*r21);
IkReal x10220=(sj10*x10208);
IkReal x10221=(gconst23*x10207);
IkReal x10222=((1.0)*x10207);
IkReal x10223=(r02*x10207);
IkReal x10224=(cj10*gconst22*x10208);
IkReal x10225=(gconst23*r10*x10208);
IkReal x10226=((1.0)*gconst23*r20*x10208);
evalcond[0]=(((sj10*x10223))+((cj7*sj8)));
evalcond[1]=(((r02*x10208))+((cj7*x10209))+x10214);
evalcond[2]=((((-1.0)*sj7*x10216))+((cj10*x10223))+((cj7*cj8*cj9)));
evalcond[3]=((((-1.0)*sj8*x10216))+(((-1.0)*x10219*x10222))+((r20*x10221)));
evalcond[4]=((((-1.0)*x10215*x10222))+((r10*x10221))+(((-1.0)*cj7*x10218))+((sj7*x10209)));
evalcond[5]=(((cj10*x10212))+((cj10*x10211))+cj8+(((-1.0)*gconst23*r20*x10208*x10210))+((x10219*x10220)));
evalcond[6]=(((cj10*x10213))+((cj10*x10217))+(((-1.0)*x10210*x10225))+((sj7*sj8))+((x10215*x10220)));
evalcond[7]=((((-1.0)*x10210*x10212))+(((-1.0)*x10210*x10211))+((cj10*x10208*x10219))+(((-1.0)*sj8*x10218))+(((-1.0)*cj10*x10226)));
evalcond[8]=((((-1.0)*x10210*x10213))+(((-1.0)*x10210*x10217))+((cj10*x10208*x10215))+((cj8*x10214))+(((-1.0)*cj10*x10225))+((cj7*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x10227=((1.0)*sj7);
IkReal x10228=(cj8*sj9);
CheckValue<IkReal> x10229=IKPowWithIntegerCheck(((((-1.0)*gconst22*r11))+((gconst23*r10))),-1);
if(!x10229.valid){
continue;
}
CheckValue<IkReal> x10230=IKPowWithIntegerCheck(r02,-1);
if(!x10230.valid){
continue;
}
if( IKabs(((x10229.value)*(((((-1.0)*x10227*x10228))+((cj7*cj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10230.value)*(((((-1.0)*cj9*x10227))+(((-1.0)*cj7*x10228)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10229.value)*(((((-1.0)*x10227*x10228))+((cj7*cj9))))))+IKsqr(((x10230.value)*(((((-1.0)*cj9*x10227))+(((-1.0)*cj7*x10228))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((x10229.value)*(((((-1.0)*x10227*x10228))+((cj7*cj9))))), ((x10230.value)*(((((-1.0)*cj9*x10227))+(((-1.0)*cj7*x10228))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x10231=IKsin(j11);
IkReal x10232=IKcos(j11);
IkReal x10233=(cj8*sj9);
IkReal x10234=((1.0)*sj10);
IkReal x10235=(gconst22*r20);
IkReal x10236=(gconst23*r21);
IkReal x10237=(gconst22*r10);
IkReal x10238=(cj9*sj7);
IkReal x10239=(gconst22*r11);
IkReal x10240=((1.0)*sj9);
IkReal x10241=(gconst23*r11);
IkReal x10242=((1.0)*cj9);
IkReal x10243=(gconst22*r21);
IkReal x10244=(sj10*x10232);
IkReal x10245=(gconst23*x10231);
IkReal x10246=((1.0)*x10231);
IkReal x10247=(r02*x10231);
IkReal x10248=(cj10*gconst22*x10232);
IkReal x10249=(gconst23*r10*x10232);
IkReal x10250=((1.0)*gconst23*r20*x10232);
evalcond[0]=(((cj7*sj8))+((sj10*x10247)));
evalcond[1]=(((cj7*x10233))+((r02*x10232))+x10238);
evalcond[2]=((((-1.0)*sj7*x10240))+((cj10*x10247))+((cj7*cj8*cj9)));
evalcond[3]=((((-1.0)*sj8*x10240))+((r20*x10245))+(((-1.0)*x10243*x10246)));
evalcond[4]=(((r10*x10245))+(((-1.0)*cj7*x10242))+(((-1.0)*x10239*x10246))+((sj7*x10233)));
evalcond[5]=(((x10243*x10244))+(((-1.0)*gconst23*r20*x10232*x10234))+cj8+((cj10*x10235))+((cj10*x10236)));
evalcond[6]=(((x10239*x10244))+(((-1.0)*x10234*x10249))+((cj10*x10237))+((cj10*x10241))+((sj7*sj8)));
evalcond[7]=((((-1.0)*x10234*x10236))+(((-1.0)*x10234*x10235))+(((-1.0)*sj8*x10242))+(((-1.0)*cj10*x10250))+((cj10*x10232*x10243)));
evalcond[8]=((((-1.0)*x10234*x10241))+(((-1.0)*x10234*x10237))+((cj8*x10238))+(((-1.0)*cj10*x10249))+((cj7*sj9))+((cj10*x10232*x10239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x10254=IKPowWithIntegerCheck(r02,-1);
if(!x10254.valid){
continue;
}
IkReal x10251=x10254.value;
IkReal x10252=((1.0)*cj9);
IkReal x10253=(cj7*cj8);
CheckValue<IkReal> x10255=IKPowWithIntegerCheck(cj10,-1);
if(!x10255.valid){
continue;
}
if( IKabs((x10251*(x10255.value)*(((((-1.0)*x10252*x10253))+((sj7*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x10251*(((((-1.0)*sj7*x10252))+(((-1.0)*sj9*x10253)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10251*(x10255.value)*(((((-1.0)*x10252*x10253))+((sj7*sj9))))))+IKsqr((x10251*(((((-1.0)*sj7*x10252))+(((-1.0)*sj9*x10253))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((x10251*(x10255.value)*(((((-1.0)*x10252*x10253))+((sj7*sj9))))), (x10251*(((((-1.0)*sj7*x10252))+(((-1.0)*sj9*x10253))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x10256=IKsin(j11);
IkReal x10257=IKcos(j11);
IkReal x10258=(cj10*cj12);
IkReal x10259=(cj8*sj9);
IkReal x10260=(r21*sj10);
IkReal x10261=(cj12*r20);
IkReal x10262=(cj12*sj10);
IkReal x10263=(cj9*sj7);
IkReal x10264=(cj10*sj12);
IkReal x10265=((1.0)*sj9);
IkReal x10266=((1.0)*sj12);
IkReal x10267=(cj7*cj9);
IkReal x10268=((1.0)*x10257);
IkReal x10269=(sj12*x10257);
IkReal x10270=(r02*x10256);
evalcond[0]=(((sj10*x10270))+((cj7*sj8)));
evalcond[1]=(((r02*x10257))+x10263+((cj7*x10259)));
evalcond[2]=(((cj8*x10267))+(((-1.0)*sj7*x10265))+((cj10*x10270)));
evalcond[3]=(((x10256*x10261))+(((-1.0)*r21*x10256*x10266))+(((-1.0)*sj8*x10265)));
evalcond[4]=(((cj12*r10*x10256))+(((-1.0)*x10267))+(((-1.0)*r11*x10256*x10266))+((sj7*x10259)));
evalcond[5]=(cj8+(((-1.0)*sj10*x10261*x10268))+((r20*x10264))+((r21*x10258))+((x10260*x10269)));
evalcond[6]=((((-1.0)*r10*x10262*x10268))+((r10*x10264))+((r11*x10258))+((sj7*sj8))+((r11*sj10*x10269)));
evalcond[7]=((((-1.0)*r20*x10258*x10268))+(((-1.0)*cj9*sj8))+((r21*x10257*x10264))+(((-1.0)*cj12*x10260))+(((-1.0)*r20*sj10*x10266)));
evalcond[8]=((((-1.0)*r11*x10262))+((cj8*x10263))+(((-1.0)*r10*sj10*x10266))+((cj7*sj9))+(((-1.0)*r10*x10258*x10268))+((r11*x10257*x10264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x10272=IKPowWithIntegerCheck(r02,-1);
if(!x10272.valid){
continue;
}
IkReal x10271=x10272.value;
CheckValue<IkReal> x10273=IKPowWithIntegerCheck(sj10,-1);
if(!x10273.valid){
continue;
}
if( IKabs(((-1.0)*cj7*sj8*x10271*(x10273.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x10271*(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj7*sj8*x10271*(x10273.value)))+IKsqr((x10271*(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2(((-1.0)*cj7*sj8*x10271*(x10273.value)), (x10271*(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x10274=IKsin(j11);
IkReal x10275=IKcos(j11);
IkReal x10276=(cj10*cj12);
IkReal x10277=(cj8*sj9);
IkReal x10278=(r21*sj10);
IkReal x10279=(cj12*r20);
IkReal x10280=(cj12*sj10);
IkReal x10281=(cj9*sj7);
IkReal x10282=(cj10*sj12);
IkReal x10283=((1.0)*sj9);
IkReal x10284=((1.0)*sj12);
IkReal x10285=(cj7*cj9);
IkReal x10286=((1.0)*x10275);
IkReal x10287=(sj12*x10275);
IkReal x10288=(r02*x10274);
evalcond[0]=(((sj10*x10288))+((cj7*sj8)));
evalcond[1]=(((cj7*x10277))+x10281+((r02*x10275)));
evalcond[2]=(((cj8*x10285))+(((-1.0)*sj7*x10283))+((cj10*x10288)));
evalcond[3]=((((-1.0)*sj8*x10283))+(((-1.0)*r21*x10274*x10284))+((x10274*x10279)));
evalcond[4]=(((cj12*r10*x10274))+(((-1.0)*r11*x10274*x10284))+((sj7*x10277))+(((-1.0)*x10285)));
evalcond[5]=(((r20*x10282))+cj8+((x10278*x10287))+((r21*x10276))+(((-1.0)*sj10*x10279*x10286)));
evalcond[6]=(((r11*x10276))+(((-1.0)*r10*x10280*x10286))+((r11*sj10*x10287))+((r10*x10282))+((sj7*sj8)));
evalcond[7]=((((-1.0)*cj9*sj8))+(((-1.0)*cj12*x10278))+(((-1.0)*r20*x10276*x10286))+((r21*x10275*x10282))+(((-1.0)*r20*sj10*x10284)));
evalcond[8]=((((-1.0)*r10*x10276*x10286))+((r11*x10275*x10282))+((cj8*x10281))+(((-1.0)*r11*x10280))+((cj7*sj9))+(((-1.0)*r10*sj10*x10284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
CheckValue<IkReal> x10289=IKPowWithIntegerCheck(((((-1.0)*r21*sj12))+((cj12*r20))),-1);
if(!x10289.valid){
continue;
}
CheckValue<IkReal> x10290=IKPowWithIntegerCheck(r02,-1);
if(!x10290.valid){
continue;
}
if( IKabs((sj8*sj9*(x10289.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10290.value)*(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj8*sj9*(x10289.value)))+IKsqr(((x10290.value)*(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j11array[0]=IKatan2((sj8*sj9*(x10289.value)), ((x10290.value)*(((((-1.0)*cj9*sj7))+(((-1.0)*cj7*cj8*sj9))))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x10291=IKsin(j11);
IkReal x10292=IKcos(j11);
IkReal x10293=(cj10*cj12);
IkReal x10294=(cj8*sj9);
IkReal x10295=(r21*sj10);
IkReal x10296=(cj12*r20);
IkReal x10297=(cj12*sj10);
IkReal x10298=(cj9*sj7);
IkReal x10299=(cj10*sj12);
IkReal x10300=((1.0)*sj9);
IkReal x10301=((1.0)*sj12);
IkReal x10302=(cj7*cj9);
IkReal x10303=((1.0)*x10292);
IkReal x10304=(sj12*x10292);
IkReal x10305=(r02*x10291);
evalcond[0]=(((sj10*x10305))+((cj7*sj8)));
evalcond[1]=(x10298+((r02*x10292))+((cj7*x10294)));
evalcond[2]=((((-1.0)*sj7*x10300))+((cj10*x10305))+((cj8*x10302)));
evalcond[3]=(((x10291*x10296))+(((-1.0)*sj8*x10300))+(((-1.0)*r21*x10291*x10301)));
evalcond[4]=((((-1.0)*x10302))+(((-1.0)*r11*x10291*x10301))+((sj7*x10294))+((cj12*r10*x10291)));
evalcond[5]=(((r20*x10299))+cj8+((r21*x10293))+(((-1.0)*sj10*x10296*x10303))+((x10295*x10304)));
evalcond[6]=((((-1.0)*r10*x10297*x10303))+((r11*sj10*x10304))+((r11*x10293))+((r10*x10299))+((sj7*sj8)));
evalcond[7]=((((-1.0)*cj9*sj8))+(((-1.0)*r20*x10293*x10303))+(((-1.0)*cj12*x10295))+((r21*x10292*x10299))+(((-1.0)*r20*sj10*x10301)));
evalcond[8]=((((-1.0)*r10*sj10*x10301))+(((-1.0)*r10*x10293*x10303))+((r11*x10292*x10299))+((cj8*x10298))+(((-1.0)*r11*x10297))+((cj7*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x10306=(cj7*cj9);
IkReal x10307=(r01*sj12);
IkReal x10308=(cj9*sj7);
IkReal x10309=((1.0)*r10);
IkReal x10310=(r11*sj12);
IkReal x10311=(cj8*sj9);
IkReal x10312=((1.0)*sj7);
IkReal x10313=(cj12*x10311);
CheckValue<IkReal> x10314=IKPowWithIntegerCheck(IKsign((((r20*sj12))+((cj12*r21)))),-1);
if(!x10314.valid){
continue;
}
CheckValue<IkReal> x10315 = IKatan2WithCheck(IkReal((((r02*x10306))+(((-1.0)*r02*x10311*x10312))+((cj7*r12*x10311))+((r12*x10308)))),IkReal((((x10306*x10307))+((cj7*x10310*x10311))+((r00*sj7*x10313))+(((-1.0)*cj12*r00*x10306))+(((-1.0)*x10307*x10311*x10312))+(((-1.0)*cj12*x10308*x10309))+((x10308*x10310))+(((-1.0)*cj7*x10309*x10313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10315.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10314.value)))+(x10315.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x10316=IKsin(j11);
IkReal x10317=IKcos(j11);
IkReal x10318=(cj10*cj12);
IkReal x10319=(cj7*sj9);
IkReal x10320=(r21*sj10);
IkReal x10321=(cj10*sj12);
IkReal x10322=(cj12*r20);
IkReal x10323=(cj12*sj10);
IkReal x10324=(cj9*sj7);
IkReal x10325=((1.0)*r01);
IkReal x10326=((1.0)*sj9);
IkReal x10327=((1.0)*r11);
IkReal x10328=((1.0)*cj9);
IkReal x10329=((1.0)*x10317);
IkReal x10330=(sj12*x10317);
IkReal x10331=(sj10*x10316);
IkReal x10332=(sj12*x10316);
IkReal x10333=((1.0)*sj10*sj12);
IkReal x10334=(cj10*x10316);
IkReal x10335=(cj12*x10316);
evalcond[0]=(((x10316*x10322))+(((-1.0)*r21*x10332))+((r22*x10317))+(((-1.0)*sj8*x10326)));
evalcond[1]=(((cj8*x10319))+((r00*x10335))+((r02*x10317))+x10324+(((-1.0)*x10325*x10332)));
evalcond[2]=((((-1.0)*cj7*x10328))+((cj8*sj7*sj9))+((r12*x10317))+(((-1.0)*x10327*x10332))+((r10*x10335)));
evalcond[3]=(((r22*x10331))+cj8+(((-1.0)*sj10*x10322*x10329))+((x10320*x10330))+((r21*x10318))+((r20*x10321)));
evalcond[4]=(((r01*x10318))+((r02*x10331))+((r01*sj10*x10330))+((r00*x10321))+(((-1.0)*r00*x10323*x10329))+((cj7*sj8)));
evalcond[5]=(((r11*x10318))+(((-1.0)*r10*x10323*x10329))+((r11*sj10*x10330))+((r12*x10331))+((sj7*sj8))+((r10*x10321)));
evalcond[6]=(((r22*x10334))+(((-1.0)*cj12*x10320))+(((-1.0)*sj8*x10328))+(((-1.0)*r20*x10318*x10329))+((r21*x10317*x10321))+(((-1.0)*r20*x10333)));
evalcond[7]=(((r11*x10317*x10321))+(((-1.0)*r10*x10318*x10329))+((r12*x10334))+x10319+(((-1.0)*r10*x10333))+(((-1.0)*x10323*x10327))+((cj8*x10324)));
evalcond[8]=((((-1.0)*sj7*x10326))+((r02*x10334))+((r01*x10317*x10321))+(((-1.0)*r00*x10333))+(((-1.0)*r00*x10318*x10329))+((cj7*cj8*cj9))+(((-1.0)*x10323*x10325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x10336=(sj8*sj9);
IkReal x10337=((1.0)*cj12);
IkReal x10338=(cj9*sj7);
IkReal x10339=(r21*sj12);
IkReal x10340=(cj7*cj8*sj9);
CheckValue<IkReal> x10341 = IKatan2WithCheck(IkReal((((r22*x10338))+((r02*x10336))+((r22*x10340)))),IkReal((((r01*sj12*x10336))+(((-1.0)*r00*x10336*x10337))+((x10338*x10339))+(((-1.0)*r20*x10337*x10338))+((x10339*x10340))+(((-1.0)*r20*x10337*x10340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10341.valid){
continue;
}
CheckValue<IkReal> x10342=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10337))+(((-1.0)*r10*sj12)))),-1);
if(!x10342.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x10341.value)+(((1.5707963267949)*(x10342.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x10343=IKsin(j11);
IkReal x10344=IKcos(j11);
IkReal x10345=(cj10*cj12);
IkReal x10346=(cj7*sj9);
IkReal x10347=(r21*sj10);
IkReal x10348=(cj10*sj12);
IkReal x10349=(cj12*r20);
IkReal x10350=(cj12*sj10);
IkReal x10351=(cj9*sj7);
IkReal x10352=((1.0)*r01);
IkReal x10353=((1.0)*sj9);
IkReal x10354=((1.0)*r11);
IkReal x10355=((1.0)*cj9);
IkReal x10356=((1.0)*x10344);
IkReal x10357=(sj12*x10344);
IkReal x10358=(sj10*x10343);
IkReal x10359=(sj12*x10343);
IkReal x10360=((1.0)*sj10*sj12);
IkReal x10361=(cj10*x10343);
IkReal x10362=(cj12*x10343);
evalcond[0]=(((x10343*x10349))+((r22*x10344))+(((-1.0)*sj8*x10353))+(((-1.0)*r21*x10359)));
evalcond[1]=(((r00*x10362))+(((-1.0)*x10352*x10359))+((cj8*x10346))+x10351+((r02*x10344)));
evalcond[2]=(((cj8*sj7*sj9))+((r10*x10362))+((r12*x10344))+(((-1.0)*x10354*x10359))+(((-1.0)*cj7*x10355)));
evalcond[3]=(((r20*x10348))+cj8+(((-1.0)*sj10*x10349*x10356))+((r22*x10358))+((r21*x10345))+((x10347*x10357)));
evalcond[4]=((((-1.0)*r00*x10350*x10356))+((r00*x10348))+((r01*x10345))+((r01*sj10*x10357))+((r02*x10358))+((cj7*sj8)));
evalcond[5]=((((-1.0)*r10*x10350*x10356))+((r11*x10345))+((r10*x10348))+((r11*sj10*x10357))+((sj7*sj8))+((r12*x10358)));
evalcond[6]=(((r22*x10361))+(((-1.0)*cj12*x10347))+(((-1.0)*r20*x10360))+(((-1.0)*sj8*x10355))+(((-1.0)*r20*x10345*x10356))+((r21*x10344*x10348)));
evalcond[7]=(((r11*x10344*x10348))+((cj8*x10351))+x10346+(((-1.0)*r10*x10345*x10356))+(((-1.0)*r10*x10360))+(((-1.0)*x10350*x10354))+((r12*x10361)));
evalcond[8]=((((-1.0)*sj7*x10353))+(((-1.0)*r00*x10360))+((r02*x10361))+((cj7*cj8*cj9))+(((-1.0)*x10350*x10352))+(((-1.0)*r00*x10345*x10356))+((r01*x10344*x10348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x10363=(r21*sj12);
IkReal x10364=((1.0)*cj12);
IkReal x10365=(sj8*sj9);
IkReal x10366=(cj8*sj7*sj9);
IkReal x10367=((1.0)*cj7*cj9);
CheckValue<IkReal> x10368 = IKatan2WithCheck(IkReal((((r22*x10366))+(((-1.0)*r22*x10367))+((r12*x10365)))),IkReal((((cj12*cj7*cj9*r20))+((x10363*x10366))+(((-1.0)*r10*x10364*x10365))+(((-1.0)*x10363*x10367))+((r11*sj12*x10365))+(((-1.0)*r20*x10364*x10366)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10368.valid){
continue;
}
CheckValue<IkReal> x10369=IKPowWithIntegerCheck(IKsign((((r00*sj12))+((cj12*r01)))),-1);
if(!x10369.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x10368.value)+(((1.5707963267949)*(x10369.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[9];
IkReal x10370=IKsin(j11);
IkReal x10371=IKcos(j11);
IkReal x10372=(cj10*cj12);
IkReal x10373=(cj7*sj9);
IkReal x10374=(r21*sj10);
IkReal x10375=(cj10*sj12);
IkReal x10376=(cj12*r20);
IkReal x10377=(cj12*sj10);
IkReal x10378=(cj9*sj7);
IkReal x10379=((1.0)*r01);
IkReal x10380=((1.0)*sj9);
IkReal x10381=((1.0)*r11);
IkReal x10382=((1.0)*cj9);
IkReal x10383=((1.0)*x10371);
IkReal x10384=(sj12*x10371);
IkReal x10385=(sj10*x10370);
IkReal x10386=(sj12*x10370);
IkReal x10387=((1.0)*sj10*sj12);
IkReal x10388=(cj10*x10370);
IkReal x10389=(cj12*x10370);
evalcond[0]=(((r22*x10371))+(((-1.0)*sj8*x10380))+(((-1.0)*r21*x10386))+((x10370*x10376)));
evalcond[1]=(((cj8*x10373))+(((-1.0)*x10379*x10386))+((r02*x10371))+x10378+((r00*x10389)));
evalcond[2]=(((cj8*sj7*sj9))+(((-1.0)*cj7*x10382))+(((-1.0)*x10381*x10386))+((r10*x10389))+((r12*x10371)));
evalcond[3]=((((-1.0)*sj10*x10376*x10383))+cj8+((r22*x10385))+((r20*x10375))+((x10374*x10384))+((r21*x10372)));
evalcond[4]=(((r01*x10372))+((r00*x10375))+(((-1.0)*r00*x10377*x10383))+((r02*x10385))+((cj7*sj8))+((r01*sj10*x10384)));
evalcond[5]=(((r12*x10385))+((r10*x10375))+((r11*x10372))+((sj7*sj8))+((r11*sj10*x10384))+(((-1.0)*r10*x10377*x10383)));
evalcond[6]=(((r21*x10371*x10375))+(((-1.0)*sj8*x10382))+(((-1.0)*r20*x10387))+((r22*x10388))+(((-1.0)*cj12*x10374))+(((-1.0)*r20*x10372*x10383)));
evalcond[7]=((((-1.0)*r10*x10372*x10383))+((cj8*x10378))+((r12*x10388))+(((-1.0)*x10377*x10381))+(((-1.0)*r10*x10387))+x10373+((r11*x10371*x10375)));
evalcond[8]=((((-1.0)*x10377*x10379))+(((-1.0)*sj7*x10380))+(((-1.0)*r00*x10372*x10383))+((r02*x10388))+(((-1.0)*r00*x10387))+((cj7*cj8*cj9))+((r01*x10371*x10375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x10390=cj12*cj12;
IkReal x10391=r21*r21;
IkReal x10392=r20*r20;
IkReal x10393=((1.0)*r22);
IkReal x10394=(cj9*sj8);
IkReal x10395=(r20*r21);
IkReal x10396=((1.0)*sj10);
IkReal x10397=(cj12*sj12);
IkReal x10398=((1.0)*cj10);
IkReal x10399=(sj8*sj9);
IkReal x10400=(r21*sj12);
IkReal x10401=(cj12*r20);
IkReal x10402=(cj10*x10391);
CheckValue<IkReal> x10403 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj10*sj12*x10393))+(((-1.0)*x10393*x10394))+(((-1.0)*x10398*x10399*x10401))+(((-1.0)*cj12*r21*sj10*x10393))+((cj10*x10399*x10400)))),IkReal(((((-1.0)*x10394*x10400))+(((-1.0)*x10395*x10396))+(((-1.0)*cj10*x10393*x10399))+(((2.0)*sj10*x10390*x10395))+((sj10*x10392*x10397))+(((-1.0)*x10391*x10396*x10397))+((x10394*x10401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10403.valid){
continue;
}
CheckValue<IkReal> x10404=IKPowWithIntegerCheck(IKsign((((x10390*x10402))+(((-1.0)*x10390*x10392*x10398))+(((-1.0)*cj10*r22*x10393))+(((-1.0)*x10391*x10398))+(((2.0)*cj10*x10395*x10397)))),-1);
if(!x10404.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x10403.value)+(((1.5707963267949)*(x10404.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x10405=IKsin(j11);
IkReal x10406=IKcos(j11);
IkReal x10407=(r21*sj12);
IkReal x10408=((1.0)*cj12);
IkReal x10409=(r20*sj12);
IkReal x10410=((1.0)*sj8);
IkReal x10411=(cj10*x10406);
IkReal x10412=(sj10*x10406);
IkReal x10413=(r22*x10405);
evalcond[0]=((((-1.0)*sj9*x10410))+((r22*x10406))+((cj12*r20*x10405))+(((-1.0)*x10405*x10407)));
evalcond[1]=(cj8+((x10407*x10412))+((cj10*x10409))+(((-1.0)*r20*x10408*x10412))+((sj10*x10413))+((cj10*cj12*r21)));
evalcond[2]=(((x10407*x10411))+(((-1.0)*r21*sj10*x10408))+(((-1.0)*cj9*x10410))+(((-1.0)*sj10*x10409))+((cj10*x10413))+(((-1.0)*r20*x10408*x10411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[2];
IkReal x10414=cj8*cj8;
IkReal x10415=cj9*cj9;
IkReal x10416=(((x10414*x10415))+(((-1.0)*x10415))+(((-1.0)*x10414)));
j7eval[0]=x10416;
j7eval[1]=IKsign(x10416);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x10417=(cj9*sj8);
j7eval[0]=(cj8+(((962.772785622593)*x10417))+(((-1.0)*cj9)));
j7eval[1]=IKsign(((((5453.0)*cj8))+(((5250000.0)*x10417))+(((-5453.0)*cj9))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=cj9;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x10418=(sj11*sj12);
IkReal x10419=((1.0)*cj11);
IkReal x10420=((1.0)*cj12*sj11);
j7eval[0]=cj8;
j7eval[1]=IKsign(cj8);
j7eval[2]=((IKabs(((((-1.0)*r02*x10419))+((r01*x10418))+(((-1.0)*r00*x10420)))))+(IKabs(((((-1.0)*r10*x10420))+(((-1.0)*r12*x10419))+((r11*x10418))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7eval[0]=((((962.772785622593)*cj8*sj8))+(((-1.0)*cj8)));
j7eval[1]=cj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7eval[0]=cj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x10421=((0.953370156591352)*cj12);
IkReal x10422=(r00*sj12);
IkReal x10423=(r10*sj12);
IkReal x10424=((0.00099126339489238)*cj12);
if( IKabs(((((0.953370156591352)*x10423))+(((-0.00247815848723095)*px))+(((-0.00099126339489238)*x10422))+(((-1.0)*r01*x10424))+(((2.38342539147838)*py))+((r11*x10421)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x10421))+(((0.00247815848723095)*py))+(((0.953370156591352)*x10422))+(((0.00099126339489238)*x10423))+(((2.38342539147838)*px))+((r11*x10424)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.953370156591352)*x10423))+(((-0.00247815848723095)*px))+(((-0.00099126339489238)*x10422))+(((-1.0)*r01*x10424))+(((2.38342539147838)*py))+((r11*x10421))))+IKsqr((((r01*x10421))+(((0.00247815848723095)*py))+(((0.953370156591352)*x10422))+(((0.00099126339489238)*x10423))+(((2.38342539147838)*px))+((r11*x10424))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((0.953370156591352)*x10423))+(((-0.00247815848723095)*px))+(((-0.00099126339489238)*x10422))+(((-1.0)*r01*x10424))+(((2.38342539147838)*py))+((r11*x10421))), (((r01*x10421))+(((0.00247815848723095)*py))+(((0.953370156591352)*x10422))+(((0.00099126339489238)*x10423))+(((2.38342539147838)*px))+((r11*x10424))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x10425=IKcos(j7);
IkReal x10426=IKsin(j7);
IkReal x10427=(r00*sj12);
IkReal x10428=((1.0)*sj10);
IkReal x10429=(cj10*r11);
IkReal x10430=(cj11*sj12);
IkReal x10431=(r12*sj11);
IkReal x10432=(cj11*cj12);
IkReal x10433=((1.0)*cj10);
IkReal x10434=(r10*sj12);
IkReal x10435=(cj12*r01);
IkReal x10436=(cj12*r11);
IkReal x10437=(r02*sj11);
evalcond[0]=((((-0.00043624)*x10426))+(((-1.0)*px))+(((-0.4)*x10435))+(((-0.4)*x10427))+(((0.41956376)*x10425)));
evalcond[1]=((((-1.0)*py))+(((-0.4)*x10436))+(((-0.4)*x10434))+(((0.00043624)*x10425))+(((0.41956376)*x10426)));
evalcond[2]=(((r01*sj10*x10430))+(((-1.0)*r00*x10428*x10432))+((cj10*x10435))+((cj10*x10427))+x10425+((sj10*x10437)));
evalcond[3]=((((-1.0)*r10*x10428*x10432))+((cj10*x10434))+((cj12*x10429))+((r11*sj10*x10430))+x10426+((sj10*x10431)));
evalcond[4]=((((-1.0)*x10428*x10434))+(((-1.0)*x10428*x10436))+(((-1.0)*r10*x10432*x10433))+((cj10*x10431))+((x10429*x10430))+x10425);
evalcond[5]=(((cj10*r01*x10430))+(((-1.0)*x10428*x10435))+(((-1.0)*x10427*x10428))+((cj10*x10437))+(((-1.0)*r00*x10432*x10433))+(((-1.0)*x10426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x10438=(r10*sj12);
IkReal x10439=(cj12*r11);
IkReal x10440=(cj12*r01);
IkReal x10441=(r00*sj12);
if( IKabs(((((-2.37847937040421)*py))+(((-0.00246788393061724)*px))+(((-0.951391748161685)*x10439))+(((-0.951391748161685)*x10438))+(((-0.000987153572246896)*x10441))+(((-0.000987153572246896)*x10440)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.37847937040421)*px))+(((0.000987153572246896)*x10439))+(((0.000987153572246896)*x10438))+(((-0.951391748161685)*x10440))+(((-0.951391748161685)*x10441))+(((0.00246788393061724)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.37847937040421)*py))+(((-0.00246788393061724)*px))+(((-0.951391748161685)*x10439))+(((-0.951391748161685)*x10438))+(((-0.000987153572246896)*x10441))+(((-0.000987153572246896)*x10440))))+IKsqr(((((-2.37847937040421)*px))+(((0.000987153572246896)*x10439))+(((0.000987153572246896)*x10438))+(((-0.951391748161685)*x10440))+(((-0.951391748161685)*x10441))+(((0.00246788393061724)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-2.37847937040421)*py))+(((-0.00246788393061724)*px))+(((-0.951391748161685)*x10439))+(((-0.951391748161685)*x10438))+(((-0.000987153572246896)*x10441))+(((-0.000987153572246896)*x10440))), ((((-2.37847937040421)*px))+(((0.000987153572246896)*x10439))+(((0.000987153572246896)*x10438))+(((-0.951391748161685)*x10440))+(((-0.951391748161685)*x10441))+(((0.00246788393061724)*py))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x10442=IKcos(j7);
IkReal x10443=IKsin(j7);
IkReal x10444=(r00*sj12);
IkReal x10445=((1.0)*sj10);
IkReal x10446=(cj10*r11);
IkReal x10447=(cj11*sj12);
IkReal x10448=(sj10*sj11);
IkReal x10449=(r10*sj12);
IkReal x10450=((1.0)*cj10);
IkReal x10451=(cj12*r01);
IkReal x10452=(cj12*r11);
IkReal x10453=(cj10*sj11);
IkReal x10454=((1.0)*x10443);
IkReal x10455=(cj11*cj12*r10);
IkReal x10456=(cj11*cj12*r00);
evalcond[0]=((((-0.42043624)*x10442))+(((-0.4)*x10451))+(((-0.00043624)*x10443))+(((-1.0)*px))+(((-0.4)*x10444)));
evalcond[1]=((((-0.42043624)*x10443))+(((-0.4)*x10452))+(((0.00043624)*x10442))+(((-1.0)*py))+(((-0.4)*x10449)));
evalcond[2]=((((-1.0)*x10442))+(((-1.0)*x10445*x10456))+((cj10*x10444))+((r01*sj10*x10447))+((r02*x10448))+((cj10*x10451)));
evalcond[3]=((((-1.0)*x10445*x10455))+((r11*sj10*x10447))+((cj10*x10449))+((cj12*x10446))+((r12*x10448))+(((-1.0)*x10454)));
evalcond[4]=((((-1.0)*x10445*x10452))+((x10446*x10447))+(((-1.0)*x10445*x10449))+((r12*x10453))+(((-1.0)*x10450*x10455))+x10442);
evalcond[5]=((((-1.0)*x10445*x10451))+((cj10*r01*x10447))+(((-1.0)*x10444*x10445))+(((-1.0)*x10450*x10456))+((r02*x10453))+(((-1.0)*x10454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x10464=IKPowWithIntegerCheck(cj8,-1);
if(!x10464.valid){
continue;
}
IkReal x10457=x10464.value;
IkReal x10458=(cj12*r00);
IkReal x10459=(r01*sj12);
IkReal x10460=((5000000.0)*cj8);
IkReal x10461=(cj11*r02);
IkReal x10462=((5453.0)*sj11);
IkReal x10463=((5250000.0)*sj11*sj8);
if( IKabs(((0.000183385292499542)*x10457*((((x10459*x10463))+(((5453.0)*x10461))+(((-1.0)*x10459*x10462))+(((-5250000.0)*sj8*x10461))+(((-12500000.0)*cj8*px))+(((-1.0)*x10458*x10463))+(((-1.0)*cj12*r01*x10460))+(((-1.0)*r00*sj12*x10460))+((x10458*x10462)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x10457*(((((-1.0)*x10461))+(((-1.0)*sj11*x10458))+((sj11*x10459)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.000183385292499542)*x10457*((((x10459*x10463))+(((5453.0)*x10461))+(((-1.0)*x10459*x10462))+(((-5250000.0)*sj8*x10461))+(((-12500000.0)*cj8*px))+(((-1.0)*x10458*x10463))+(((-1.0)*cj12*r01*x10460))+(((-1.0)*r00*sj12*x10460))+((x10458*x10462))))))+IKsqr((x10457*(((((-1.0)*x10461))+(((-1.0)*sj11*x10458))+((sj11*x10459))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((0.000183385292499542)*x10457*((((x10459*x10463))+(((5453.0)*x10461))+(((-1.0)*x10459*x10462))+(((-5250000.0)*sj8*x10461))+(((-12500000.0)*cj8*px))+(((-1.0)*x10458*x10463))+(((-1.0)*cj12*r01*x10460))+(((-1.0)*r00*sj12*x10460))+((x10458*x10462))))), (x10457*(((((-1.0)*x10461))+(((-1.0)*sj11*x10458))+((sj11*x10459))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x10465=IKcos(j7);
IkReal x10466=IKsin(j7);
IkReal x10467=(r11*sj12);
IkReal x10468=((1.0)*sj11);
IkReal x10469=(cj10*cj11);
IkReal x10470=(cj12*r11);
IkReal x10471=(cj10*sj12);
IkReal x10472=(r12*sj11);
IkReal x10473=((1.0)*cj12);
IkReal x10474=(cj11*sj10);
IkReal x10475=((0.4)*sj12);
IkReal x10476=(r02*sj11);
IkReal x10477=(cj12*r01);
IkReal x10478=(r01*sj12);
IkReal x10479=(cj12*sj11);
IkReal x10480=((1.0)*sj10);
IkReal x10481=((0.00043624)*x10465);
IkReal x10482=((0.00043624)*x10466);
IkReal x10483=(sj8*x10465);
IkReal x10484=(sj8*x10466);
evalcond[0]=(((r00*x10479))+((cj11*r02))+(((-1.0)*x10468*x10478))+((cj8*x10465)));
evalcond[1]=((((-1.0)*x10467*x10468))+((cj11*r12))+((cj8*x10466))+((r10*x10479)));
evalcond[2]=((((-1.0)*r00*x10475))+(((0.42)*x10483))+(((-1.0)*px))+(((-0.4)*x10477))+(((-1.0)*x10481))+(((-1.0)*x10482)));
evalcond[3]=((((0.42)*x10484))+(((-1.0)*py))+(((-0.4)*x10470))+(((-1.0)*x10482))+x10481+(((-1.0)*r10*x10475)));
evalcond[4]=(((sj10*x10476))+((r00*x10471))+((x10474*x10478))+(((-1.0)*r00*x10473*x10474))+x10483+((cj10*x10477)));
evalcond[5]=((((-1.0)*r10*x10473*x10474))+((sj10*x10472))+((x10467*x10474))+x10484+((cj10*x10470))+((r10*x10471)));
evalcond[6]=((((-1.0)*x10470*x10480))+((x10467*x10469))+(((-1.0)*r10*sj12*x10480))+x10465+((cj10*x10472))+(((-1.0)*r10*x10469*x10473)));
evalcond[7]=((((-1.0)*x10466))+(((-1.0)*r00*sj12*x10480))+((cj10*x10476))+(((-1.0)*r00*x10469*x10473))+(((-1.0)*r01*sj10*x10473))+((x10469*x10478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x10485=((5000000.0)*cj8);
IkReal x10486=(cj11*r02);
IkReal x10487=(r01*sj11*sj12);
IkReal x10488=(cj12*r00*sj11);
CheckValue<IkReal> x10489=IKPowWithIntegerCheck(((((5250000.0)*cj8*sj8))+(((-5453.0)*cj8))),-1);
if(!x10489.valid){
continue;
}
CheckValue<IkReal> x10490=IKPowWithIntegerCheck(cj8,-1);
if(!x10490.valid){
continue;
}
if( IKabs(((x10489.value)*(((((-5453.0)*x10487))+((r10*sj12*x10485))+((cj12*r11*x10485))+(((5453.0)*x10488))+(((5453.0)*x10486))+(((12500000.0)*cj8*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10490.value)*(((((-1.0)*x10486))+(((-1.0)*x10488))+x10487)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10489.value)*(((((-5453.0)*x10487))+((r10*sj12*x10485))+((cj12*r11*x10485))+(((5453.0)*x10488))+(((5453.0)*x10486))+(((12500000.0)*cj8*py))))))+IKsqr(((x10490.value)*(((((-1.0)*x10486))+(((-1.0)*x10488))+x10487))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x10489.value)*(((((-5453.0)*x10487))+((r10*sj12*x10485))+((cj12*r11*x10485))+(((5453.0)*x10488))+(((5453.0)*x10486))+(((12500000.0)*cj8*py))))), ((x10490.value)*(((((-1.0)*x10486))+(((-1.0)*x10488))+x10487))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x10491=IKcos(j7);
IkReal x10492=IKsin(j7);
IkReal x10493=(r11*sj12);
IkReal x10494=((1.0)*sj11);
IkReal x10495=(cj10*cj11);
IkReal x10496=(cj12*r11);
IkReal x10497=(cj10*sj12);
IkReal x10498=(r12*sj11);
IkReal x10499=((1.0)*cj12);
IkReal x10500=(cj11*sj10);
IkReal x10501=((0.4)*sj12);
IkReal x10502=(r02*sj11);
IkReal x10503=(cj12*r01);
IkReal x10504=(r01*sj12);
IkReal x10505=(cj12*sj11);
IkReal x10506=((1.0)*sj10);
IkReal x10507=((0.00043624)*x10491);
IkReal x10508=((0.00043624)*x10492);
IkReal x10509=(sj8*x10491);
IkReal x10510=(sj8*x10492);
evalcond[0]=(((r00*x10505))+((cj8*x10491))+((cj11*r02))+(((-1.0)*x10494*x10504)));
evalcond[1]=(((cj8*x10492))+((r10*x10505))+(((-1.0)*x10493*x10494))+((cj11*r12)));
evalcond[2]=((((0.42)*x10509))+(((-1.0)*r00*x10501))+(((-1.0)*x10508))+(((-1.0)*x10507))+(((-1.0)*px))+(((-0.4)*x10503)));
evalcond[3]=((((-1.0)*x10508))+(((-1.0)*r10*x10501))+(((-1.0)*py))+x10507+(((-0.4)*x10496))+(((0.42)*x10510)));
evalcond[4]=((((-1.0)*r00*x10499*x10500))+x10509+((x10500*x10504))+((cj10*x10503))+((r00*x10497))+((sj10*x10502)));
evalcond[5]=(((r10*x10497))+(((-1.0)*r10*x10499*x10500))+((x10493*x10500))+((cj10*x10496))+x10510+((sj10*x10498)));
evalcond[6]=((((-1.0)*x10496*x10506))+(((-1.0)*r10*sj12*x10506))+((cj10*x10498))+x10491+((x10493*x10495))+(((-1.0)*r10*x10495*x10499)));
evalcond[7]=((((-1.0)*x10492))+((cj10*x10502))+(((-1.0)*r00*x10495*x10499))+((x10495*x10504))+(((-1.0)*r01*sj10*x10499))+(((-1.0)*r00*sj12*x10506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x10511=(sj11*sj12);
IkReal x10512=((1.0)*cj11);
IkReal x10513=((1.0)*cj12*sj11);
CheckValue<IkReal> x10514 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x10513))+(((-1.0)*r12*x10512))+((r11*x10511)))),IkReal(((((-1.0)*r00*x10513))+(((-1.0)*r02*x10512))+((r01*x10511)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10514.valid){
continue;
}
CheckValue<IkReal> x10515=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x10515.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x10514.value)+(((1.5707963267949)*(x10515.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x10516=IKcos(j7);
IkReal x10517=IKsin(j7);
IkReal x10518=(r11*sj12);
IkReal x10519=((1.0)*sj11);
IkReal x10520=(cj10*cj11);
IkReal x10521=(cj12*r11);
IkReal x10522=(cj10*sj12);
IkReal x10523=(r12*sj11);
IkReal x10524=((1.0)*cj12);
IkReal x10525=(cj11*sj10);
IkReal x10526=((0.4)*sj12);
IkReal x10527=(r02*sj11);
IkReal x10528=(cj12*r01);
IkReal x10529=(r01*sj12);
IkReal x10530=(cj12*sj11);
IkReal x10531=((1.0)*sj10);
IkReal x10532=((0.00043624)*x10516);
IkReal x10533=((0.00043624)*x10517);
IkReal x10534=(sj8*x10516);
IkReal x10535=(sj8*x10517);
evalcond[0]=(((cj11*r02))+((cj8*x10516))+((r00*x10530))+(((-1.0)*x10519*x10529)));
evalcond[1]=(((r10*x10530))+((cj11*r12))+(((-1.0)*x10518*x10519))+((cj8*x10517)));
evalcond[2]=((((-1.0)*x10533))+(((-1.0)*x10532))+(((0.42)*x10534))+(((-0.4)*x10528))+(((-1.0)*px))+(((-1.0)*r00*x10526)));
evalcond[3]=((((-1.0)*x10533))+(((0.42)*x10535))+(((-1.0)*r10*x10526))+(((-0.4)*x10521))+(((-1.0)*py))+x10532);
evalcond[4]=(((cj10*x10528))+((sj10*x10527))+(((-1.0)*r00*x10524*x10525))+((r00*x10522))+x10534+((x10525*x10529)));
evalcond[5]=(((cj10*x10521))+((sj10*x10523))+((r10*x10522))+((x10518*x10525))+(((-1.0)*r10*x10524*x10525))+x10535);
evalcond[6]=(((cj10*x10523))+(((-1.0)*x10521*x10531))+(((-1.0)*r10*sj12*x10531))+((x10518*x10520))+x10516+(((-1.0)*r10*x10520*x10524)));
evalcond[7]=((((-1.0)*r00*x10520*x10524))+((cj10*x10527))+(((-1.0)*x10517))+((x10520*x10529))+(((-1.0)*r00*sj12*x10531))+(((-1.0)*r01*sj10*x10524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x10536=(cj12*sj11);
IkReal x10537=((1.0)*sj11*sj12);
j7eval[0]=cj8;
j7eval[1]=IKsign(cj8);
j7eval[2]=((IKabs(((((-1.0)*r11*x10537))+((r10*x10536))+((cj11*r12)))))+(IKabs(((((-1.0)*r01*x10537))+((cj11*r02))+((r00*x10536))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7eval[0]=((((962.772785622593)*cj8*sj8))+(((-1.0)*cj8)));
j7eval[1]=cj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7eval[0]=cj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x10538=((0.953370156591352)*cj12);
IkReal x10539=(r00*sj12);
IkReal x10540=(r10*sj12);
IkReal x10541=((0.00099126339489238)*cj12);
if( IKabs(((((0.00247815848723095)*px))+(((0.00099126339489238)*x10539))+(((0.953370156591352)*x10540))+(((2.38342539147838)*py))+((r01*x10541))+((r11*x10538)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.953370156591352)*x10539))+(((-0.00099126339489238)*x10540))+(((-0.00247815848723095)*py))+(((-1.0)*r11*x10541))+((r01*x10538))+(((2.38342539147838)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.00247815848723095)*px))+(((0.00099126339489238)*x10539))+(((0.953370156591352)*x10540))+(((2.38342539147838)*py))+((r01*x10541))+((r11*x10538))))+IKsqr(((((0.953370156591352)*x10539))+(((-0.00099126339489238)*x10540))+(((-0.00247815848723095)*py))+(((-1.0)*r11*x10541))+((r01*x10538))+(((2.38342539147838)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((0.00247815848723095)*px))+(((0.00099126339489238)*x10539))+(((0.953370156591352)*x10540))+(((2.38342539147838)*py))+((r01*x10541))+((r11*x10538))), ((((0.953370156591352)*x10539))+(((-0.00099126339489238)*x10540))+(((-0.00247815848723095)*py))+(((-1.0)*r11*x10541))+((r01*x10538))+(((2.38342539147838)*px))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x10542=IKsin(j7);
IkReal x10543=IKcos(j7);
IkReal x10544=(r00*sj12);
IkReal x10545=((1.0)*sj10);
IkReal x10546=(cj10*r11);
IkReal x10547=(cj11*sj12);
IkReal x10548=(r12*sj11);
IkReal x10549=(cj11*cj12);
IkReal x10550=((1.0)*cj10);
IkReal x10551=(r10*sj12);
IkReal x10552=(cj12*r01);
IkReal x10553=(cj12*r11);
IkReal x10554=(r02*sj11);
evalcond[0]=((((-0.4)*x10552))+(((-1.0)*px))+(((0.00043624)*x10542))+(((0.41956376)*x10543))+(((-0.4)*x10544)));
evalcond[1]=((((-0.4)*x10551))+(((-0.4)*x10553))+(((-0.00043624)*x10543))+(((-1.0)*py))+(((0.41956376)*x10542)));
evalcond[2]=(((cj10*x10552))+((sj10*x10554))+((cj10*x10544))+x10543+(((-1.0)*r00*x10545*x10549))+((r01*sj10*x10547)));
evalcond[3]=((((-1.0)*r10*x10545*x10549))+((cj10*x10551))+((sj10*x10548))+x10542+((cj12*x10546))+((r11*sj10*x10547)));
evalcond[4]=((((-1.0)*x10544*x10545))+(((-1.0)*x10545*x10552))+((cj10*x10554))+(((-1.0)*r00*x10549*x10550))+((cj10*r01*x10547))+x10542);
evalcond[5]=((((-1.0)*x10545*x10553))+(((-1.0)*x10545*x10551))+(((-1.0)*x10543))+((cj10*x10548))+((x10546*x10547))+(((-1.0)*r10*x10549*x10550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x10555=(r10*sj12);
IkReal x10556=(cj12*r11);
IkReal x10557=(cj12*r01);
IkReal x10558=(r00*sj12);
if( IKabs(((((-2.37847937040421)*py))+(((-0.951391748161685)*x10555))+(((-0.951391748161685)*x10556))+(((0.000987153572246896)*x10558))+(((0.000987153572246896)*x10557))+(((0.00246788393061724)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.37847937040421)*px))+(((-0.951391748161685)*x10558))+(((-0.951391748161685)*x10557))+(((-0.000987153572246896)*x10556))+(((-0.000987153572246896)*x10555))+(((-0.00246788393061724)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.37847937040421)*py))+(((-0.951391748161685)*x10555))+(((-0.951391748161685)*x10556))+(((0.000987153572246896)*x10558))+(((0.000987153572246896)*x10557))+(((0.00246788393061724)*px))))+IKsqr(((((-2.37847937040421)*px))+(((-0.951391748161685)*x10558))+(((-0.951391748161685)*x10557))+(((-0.000987153572246896)*x10556))+(((-0.000987153572246896)*x10555))+(((-0.00246788393061724)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-2.37847937040421)*py))+(((-0.951391748161685)*x10555))+(((-0.951391748161685)*x10556))+(((0.000987153572246896)*x10558))+(((0.000987153572246896)*x10557))+(((0.00246788393061724)*px))), ((((-2.37847937040421)*px))+(((-0.951391748161685)*x10558))+(((-0.951391748161685)*x10557))+(((-0.000987153572246896)*x10556))+(((-0.000987153572246896)*x10555))+(((-0.00246788393061724)*py))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x10559=IKcos(j7);
IkReal x10560=IKsin(j7);
IkReal x10561=(r00*sj12);
IkReal x10562=((1.0)*sj10);
IkReal x10563=(cj10*r11);
IkReal x10564=(cj11*sj12);
IkReal x10565=(sj10*sj11);
IkReal x10566=(r10*sj12);
IkReal x10567=((1.0)*cj10);
IkReal x10568=(cj12*r01);
IkReal x10569=(cj12*r11);
IkReal x10570=(cj10*sj11);
IkReal x10571=((1.0)*x10559);
IkReal x10572=(cj11*cj12*r10);
IkReal x10573=(cj11*cj12*r00);
evalcond[0]=((((0.00043624)*x10560))+(((-1.0)*px))+(((-0.42043624)*x10559))+(((-0.4)*x10568))+(((-0.4)*x10561)));
evalcond[1]=((((-0.42043624)*x10560))+(((-1.0)*py))+(((-0.00043624)*x10559))+(((-0.4)*x10569))+(((-0.4)*x10566)));
evalcond[2]=((((-1.0)*x10562*x10573))+(((-1.0)*x10571))+((cj10*x10568))+((cj10*x10561))+((r02*x10565))+((r01*sj10*x10564)));
evalcond[3]=((((-1.0)*x10562*x10572))+((r11*sj10*x10564))+(((-1.0)*x10560))+((cj10*x10566))+((r12*x10565))+((cj12*x10563)));
evalcond[4]=(((cj10*r01*x10564))+(((-1.0)*x10561*x10562))+(((-1.0)*x10562*x10568))+((r02*x10570))+x10560+(((-1.0)*x10567*x10573)));
evalcond[5]=((((-1.0)*x10571))+(((-1.0)*x10562*x10569))+(((-1.0)*x10562*x10566))+(((-1.0)*x10567*x10572))+((x10563*x10564))+((r12*x10570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x10580=IKPowWithIntegerCheck(cj8,-1);
if(!x10580.valid){
continue;
}
IkReal x10574=x10580.value;
IkReal x10575=((5250000.0)*sj8);
IkReal x10576=((5000000.0)*cj8);
IkReal x10577=(cj11*r02);
IkReal x10578=(cj12*r00*sj11);
IkReal x10579=(r01*sj11*sj12);
if( IKabs(((0.000183385292499542)*x10574*(((((-5453.0)*x10579))+(((5453.0)*x10578))+(((5453.0)*x10577))+((cj12*r01*x10576))+(((-1.0)*x10575*x10577))+(((-1.0)*x10575*x10578))+((r00*sj12*x10576))+((x10575*x10579))+(((12500000.0)*cj8*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x10574*(((((-1.0)*x10579))+x10578+x10577)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.000183385292499542)*x10574*(((((-5453.0)*x10579))+(((5453.0)*x10578))+(((5453.0)*x10577))+((cj12*r01*x10576))+(((-1.0)*x10575*x10577))+(((-1.0)*x10575*x10578))+((r00*sj12*x10576))+((x10575*x10579))+(((12500000.0)*cj8*px))))))+IKsqr((x10574*(((((-1.0)*x10579))+x10578+x10577))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((0.000183385292499542)*x10574*(((((-5453.0)*x10579))+(((5453.0)*x10578))+(((5453.0)*x10577))+((cj12*r01*x10576))+(((-1.0)*x10575*x10577))+(((-1.0)*x10575*x10578))+((r00*sj12*x10576))+((x10575*x10579))+(((12500000.0)*cj8*px))))), (x10574*(((((-1.0)*x10579))+x10578+x10577))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x10581=IKcos(j7);
IkReal x10582=IKsin(j7);
IkReal x10583=((1.0)*sj12);
IkReal x10584=(r00*sj10);
IkReal x10585=(cj10*r11);
IkReal x10586=(cj11*sj12);
IkReal x10587=(cj10*r00);
IkReal x10588=(r12*sj11);
IkReal x10589=(r10*sj10);
IkReal x10590=(r10*sj12);
IkReal x10591=(cj12*r01);
IkReal x10592=((1.0)*sj10);
IkReal x10593=(r02*sj11);
IkReal x10594=((1.0)*cj8);
IkReal x10595=(cj12*r11);
IkReal x10596=(cj12*sj11);
IkReal x10597=((0.00043624)*x10581);
IkReal x10598=((0.00043624)*x10582);
IkReal x10599=((1.0)*cj11*cj12);
IkReal x10600=(sj8*x10581);
IkReal x10601=(sj8*x10582);
evalcond[0]=(((r00*x10596))+(((-1.0)*r01*sj11*x10583))+(((-1.0)*x10581*x10594))+((cj11*r02)));
evalcond[1]=((((-1.0)*r11*sj11*x10583))+((cj11*r12))+((r10*x10596))+(((-1.0)*x10582*x10594)));
evalcond[2]=((((-1.0)*x10597))+(((-0.4)*x10591))+(((-1.0)*px))+(((-0.4)*r00*sj12))+(((0.42)*x10600))+x10598);
evalcond[3]=((((-1.0)*x10598))+(((-1.0)*x10597))+(((-0.4)*x10590))+(((-0.4)*x10595))+(((-1.0)*py))+(((0.42)*x10601)));
evalcond[4]=(((cj10*x10591))+(((-1.0)*x10584*x10599))+((r01*sj10*x10586))+((sj10*x10593))+((sj12*x10587))+x10600);
evalcond[5]=(((cj10*x10590))+(((-1.0)*x10589*x10599))+((r11*sj10*x10586))+((sj10*x10588))+x10601+((cj12*x10585)));
evalcond[6]=(((cj10*x10593))+((cj10*r01*x10586))+(((-1.0)*x10587*x10599))+(((-1.0)*x10591*x10592))+x10582+(((-1.0)*x10583*x10584)));
evalcond[7]=((((-1.0)*x10592*x10595))+(((-1.0)*cj10*r10*x10599))+((x10585*x10586))+(((-1.0)*x10581))+(((-1.0)*x10583*x10589))+((cj10*x10588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x10602=((5000000.0)*cj8);
IkReal x10603=(cj11*r02);
IkReal x10604=(cj12*r00*sj11);
IkReal x10605=(r01*sj11*sj12);
CheckValue<IkReal> x10606=IKPowWithIntegerCheck(((((5250000.0)*cj8*sj8))+(((-5453.0)*cj8))),-1);
if(!x10606.valid){
continue;
}
CheckValue<IkReal> x10607=IKPowWithIntegerCheck(cj8,-1);
if(!x10607.valid){
continue;
}
if( IKabs(((x10606.value)*(((((-5453.0)*x10605))+(((5453.0)*x10603))+(((5453.0)*x10604))+((cj12*r11*x10602))+(((12500000.0)*cj8*py))+((r10*sj12*x10602)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10607.value)*(((((-1.0)*x10605))+x10603+x10604)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10606.value)*(((((-5453.0)*x10605))+(((5453.0)*x10603))+(((5453.0)*x10604))+((cj12*r11*x10602))+(((12500000.0)*cj8*py))+((r10*sj12*x10602))))))+IKsqr(((x10607.value)*(((((-1.0)*x10605))+x10603+x10604))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x10606.value)*(((((-5453.0)*x10605))+(((5453.0)*x10603))+(((5453.0)*x10604))+((cj12*r11*x10602))+(((12500000.0)*cj8*py))+((r10*sj12*x10602))))), ((x10607.value)*(((((-1.0)*x10605))+x10603+x10604))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x10608=IKcos(j7);
IkReal x10609=IKsin(j7);
IkReal x10610=((1.0)*sj12);
IkReal x10611=(r00*sj10);
IkReal x10612=(cj10*r11);
IkReal x10613=(cj11*sj12);
IkReal x10614=(cj10*r00);
IkReal x10615=(r12*sj11);
IkReal x10616=(r10*sj10);
IkReal x10617=(r10*sj12);
IkReal x10618=(cj12*r01);
IkReal x10619=((1.0)*sj10);
IkReal x10620=(r02*sj11);
IkReal x10621=((1.0)*cj8);
IkReal x10622=(cj12*r11);
IkReal x10623=(cj12*sj11);
IkReal x10624=((0.00043624)*x10608);
IkReal x10625=((0.00043624)*x10609);
IkReal x10626=((1.0)*cj11*cj12);
IkReal x10627=(sj8*x10608);
IkReal x10628=(sj8*x10609);
evalcond[0]=((((-1.0)*x10608*x10621))+((r00*x10623))+((cj11*r02))+(((-1.0)*r01*sj11*x10610)));
evalcond[1]=((((-1.0)*x10609*x10621))+((r10*x10623))+((cj11*r12))+(((-1.0)*r11*sj11*x10610)));
evalcond[2]=((((-0.4)*x10618))+(((0.42)*x10627))+(((-1.0)*x10624))+(((-1.0)*px))+(((-0.4)*r00*sj12))+x10625);
evalcond[3]=((((-0.4)*x10617))+(((0.42)*x10628))+(((-1.0)*x10625))+(((-1.0)*x10624))+(((-1.0)*py))+(((-0.4)*x10622)));
evalcond[4]=(((cj10*x10618))+((sj10*x10620))+((r01*sj10*x10613))+((sj12*x10614))+x10627+(((-1.0)*x10611*x10626)));
evalcond[5]=(((cj10*x10617))+((cj12*x10612))+x10628+((sj10*x10615))+(((-1.0)*x10616*x10626))+((r11*sj10*x10613)));
evalcond[6]=((((-1.0)*x10610*x10611))+((cj10*r01*x10613))+((cj10*x10620))+(((-1.0)*x10614*x10626))+x10609+(((-1.0)*x10618*x10619)));
evalcond[7]=(((cj10*x10615))+(((-1.0)*x10610*x10616))+((x10612*x10613))+(((-1.0)*cj10*r10*x10626))+(((-1.0)*x10608))+(((-1.0)*x10619*x10622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x10629=(cj12*sj11);
IkReal x10630=((1.0)*sj11*sj12);
CheckValue<IkReal> x10631=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x10631.valid){
continue;
}
CheckValue<IkReal> x10632 = IKatan2WithCheck(IkReal((((r10*x10629))+((cj11*r12))+(((-1.0)*r11*x10630)))),IkReal(((((-1.0)*r01*x10630))+((r00*x10629))+((cj11*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10632.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10631.value)))+(x10632.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x10633=IKcos(j7);
IkReal x10634=IKsin(j7);
IkReal x10635=((1.0)*sj12);
IkReal x10636=(r00*sj10);
IkReal x10637=(cj10*r11);
IkReal x10638=(cj11*sj12);
IkReal x10639=(cj10*r00);
IkReal x10640=(r12*sj11);
IkReal x10641=(r10*sj10);
IkReal x10642=(r10*sj12);
IkReal x10643=(cj12*r01);
IkReal x10644=((1.0)*sj10);
IkReal x10645=(r02*sj11);
IkReal x10646=((1.0)*cj8);
IkReal x10647=(cj12*r11);
IkReal x10648=(cj12*sj11);
IkReal x10649=((0.00043624)*x10633);
IkReal x10650=((0.00043624)*x10634);
IkReal x10651=((1.0)*cj11*cj12);
IkReal x10652=(sj8*x10633);
IkReal x10653=(sj8*x10634);
evalcond[0]=((((-1.0)*x10633*x10646))+((r00*x10648))+(((-1.0)*r01*sj11*x10635))+((cj11*r02)));
evalcond[1]=(((cj11*r12))+((r10*x10648))+(((-1.0)*x10634*x10646))+(((-1.0)*r11*sj11*x10635)));
evalcond[2]=((((-1.0)*x10649))+(((-1.0)*px))+(((-0.4)*x10643))+(((-0.4)*r00*sj12))+x10650+(((0.42)*x10652)));
evalcond[3]=((((-1.0)*x10649))+(((-1.0)*py))+(((-0.4)*x10642))+(((-0.4)*x10647))+(((0.42)*x10653))+(((-1.0)*x10650)));
evalcond[4]=((((-1.0)*x10636*x10651))+((sj12*x10639))+((sj10*x10645))+((cj10*x10643))+x10652+((r01*sj10*x10638)));
evalcond[5]=(((sj10*x10640))+((cj10*x10642))+((cj12*x10637))+(((-1.0)*x10641*x10651))+x10653+((r11*sj10*x10638)));
evalcond[6]=((((-1.0)*x10635*x10636))+(((-1.0)*x10639*x10651))+((cj10*x10645))+((cj10*r01*x10638))+x10634+(((-1.0)*x10643*x10644)));
evalcond[7]=((((-1.0)*cj10*r10*x10651))+(((-1.0)*x10633))+((cj10*x10640))+(((-1.0)*x10644*x10647))+((x10637*x10638))+(((-1.0)*x10635*x10641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x10654=((1.0)*cj11);
IkReal x10655=((1.0)*sj11);
IkReal x10656=(cj12*r10);
IkReal x10657=(r11*sj12);
IkReal x10658=(cj9*sj11);
IkReal x10659=(sj11*sj9);
IkReal x10660=(r01*sj12);
IkReal x10661=(cj12*r00);
if( IKabs((((x10657*x10659))+(((-1.0)*cj9*r02*x10654))+(((-1.0)*r12*sj9*x10654))+((x10658*x10660))+(((-1.0)*cj9*x10655*x10661))+(((-1.0)*sj9*x10655*x10656)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x10656*x10658))+(((-1.0)*sj9*x10655*x10661))+(((-1.0)*r02*sj9*x10654))+((x10659*x10660))+(((-1.0)*cj9*x10655*x10657))+((cj11*cj9*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x10657*x10659))+(((-1.0)*cj9*r02*x10654))+(((-1.0)*r12*sj9*x10654))+((x10658*x10660))+(((-1.0)*cj9*x10655*x10661))+(((-1.0)*sj9*x10655*x10656))))+IKsqr((((x10656*x10658))+(((-1.0)*sj9*x10655*x10661))+(((-1.0)*r02*sj9*x10654))+((x10659*x10660))+(((-1.0)*cj9*x10655*x10657))+((cj11*cj9*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((x10657*x10659))+(((-1.0)*cj9*r02*x10654))+(((-1.0)*r12*sj9*x10654))+((x10658*x10660))+(((-1.0)*cj9*x10655*x10661))+(((-1.0)*sj9*x10655*x10656))), (((x10656*x10658))+(((-1.0)*sj9*x10655*x10661))+(((-1.0)*r02*sj9*x10654))+((x10659*x10660))+(((-1.0)*cj9*x10655*x10657))+((cj11*cj9*r12))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x10662=IKsin(j7);
IkReal x10663=IKcos(j7);
IkReal x10664=((1.0)*sj12);
IkReal x10665=(cj10*cj11);
IkReal x10666=((1.0)*cj12);
IkReal x10667=((0.4)*sj12);
IkReal x10668=(cj12*sj11);
IkReal x10669=((0.4)*cj12);
IkReal x10670=(cj10*sj11);
IkReal x10671=(sj9*x10663);
IkReal x10672=(cj9*x10662);
IkReal x10673=(cj9*x10663);
IkReal x10674=((0.00043624)*x10663);
IkReal x10675=((0.00043624)*x10662);
IkReal x10676=(sj9*x10662);
IkReal x10677=(x10671+x10672);
evalcond[0]=(((cj11*r02))+((r00*x10668))+x10677+(((-1.0)*r01*sj11*x10664)));
evalcond[1]=(((r10*x10668))+((cj11*r12))+(((-1.0)*x10673))+x10676+(((-1.0)*r11*sj11*x10664)));
evalcond[2]=((((-1.0)*sj9*x10675))+(((0.00043624)*x10673))+(((-1.0)*px))+(((-1.0)*r00*x10667))+(((-1.0)*x10674))+(((-1.0)*r01*x10669)));
evalcond[3]=((((0.00043624)*x10671))+(((0.00043624)*x10672))+(((-1.0)*py))+(((-1.0)*r11*x10669))+(((-1.0)*x10675))+(((-1.0)*r10*x10667)));
evalcond[4]=((((-1.0)*r10*x10665*x10666))+(((-1.0)*r10*sj10*x10664))+(((-1.0)*r11*sj10*x10666))+((r11*sj12*x10665))+x10677+((r12*x10670)));
evalcond[5]=(((r01*sj12*x10665))+(((-1.0)*r00*x10665*x10666))+((r02*x10670))+(((-1.0)*r01*sj10*x10666))+(((-1.0)*x10676))+(((-1.0)*r00*sj10*x10664))+x10673);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x10678=((1.0)*cj9);
IkReal x10679=(cj11*r02);
IkReal x10680=(sj11*sj9);
IkReal x10681=(cj12*r10);
IkReal x10682=(r11*sj12);
IkReal x10683=(cj11*r12);
IkReal x10684=(r01*sj12);
IkReal x10685=(cj9*sj11);
IkReal x10686=(cj12*r00);
if( IKabs(((((-1.0)*x10680*x10682))+(((-1.0)*sj11*x10678*x10686))+(((-1.0)*x10678*x10679))+((x10680*x10681))+((x10684*x10685))+((sj9*x10683)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x10680*x10684))+(((-1.0)*sj11*x10678*x10682))+((x10681*x10685))+((x10680*x10686))+((sj9*x10679))+((cj9*x10683)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x10680*x10682))+(((-1.0)*sj11*x10678*x10686))+(((-1.0)*x10678*x10679))+((x10680*x10681))+((x10684*x10685))+((sj9*x10683))))+IKsqr(((((-1.0)*x10680*x10684))+(((-1.0)*sj11*x10678*x10682))+((x10681*x10685))+((x10680*x10686))+((sj9*x10679))+((cj9*x10683))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*x10680*x10682))+(((-1.0)*sj11*x10678*x10686))+(((-1.0)*x10678*x10679))+((x10680*x10681))+((x10684*x10685))+((sj9*x10683))), ((((-1.0)*x10680*x10684))+(((-1.0)*sj11*x10678*x10682))+((x10681*x10685))+((x10680*x10686))+((sj9*x10679))+((cj9*x10683))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x10687=IKcos(j7);
IkReal x10688=IKsin(j7);
IkReal x10689=((1.0)*sj12);
IkReal x10690=(cj10*cj11);
IkReal x10691=((1.0)*cj12);
IkReal x10692=((0.4)*sj12);
IkReal x10693=(cj12*sj11);
IkReal x10694=((0.4)*cj12);
IkReal x10695=((1.0)*cj9);
IkReal x10696=(cj10*sj11);
IkReal x10697=((0.00043624)*x10687);
IkReal x10698=((0.00043624)*x10688);
IkReal x10699=(sj9*x10687);
IkReal x10700=(x10687*x10695);
IkReal x10701=((1.0)*sj9*x10688);
IkReal x10702=(x10701+x10700);
evalcond[0]=((((-1.0)*r01*sj11*x10689))+(((-1.0)*x10699))+((cj11*r02))+((cj9*x10688))+((r00*x10693)));
evalcond[1]=((((-1.0)*r11*sj11*x10689))+((r10*x10693))+((cj11*r12))+(((-1.0)*x10702)));
evalcond[2]=((((-1.0)*sj9*x10698))+(((-1.0)*x10697))+(((-1.0)*r01*x10694))+(((-1.0)*cj9*x10697))+(((-1.0)*r00*x10692))+(((-1.0)*px)));
evalcond[3]=(((sj9*x10697))+(((-1.0)*x10698))+(((-1.0)*r11*x10694))+(((-1.0)*cj9*x10698))+(((-1.0)*py))+(((-1.0)*r10*x10692)));
evalcond[4]=(((r11*sj12*x10690))+(((-1.0)*r10*sj10*x10689))+(((-1.0)*x10688*x10695))+(((-1.0)*r11*sj10*x10691))+x10699+(((-1.0)*r10*x10690*x10691))+((r12*x10696)));
evalcond[5]=((((-1.0)*r00*sj10*x10689))+(((-1.0)*r01*sj10*x10691))+((r02*x10696))+(((-1.0)*r00*x10690*x10691))+((r01*sj12*x10690))+(((-1.0)*x10702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x10712=IKPowWithIntegerCheck(sj8,-1);
if(!x10712.valid){
continue;
}
IkReal x10703=x10712.value;
IkReal x10704=((1.0)*r00);
IkReal x10705=(cj10*sj12);
IkReal x10706=(sj11*sj8);
IkReal x10707=(r01*sj12);
IkReal x10708=(cj8*sj9);
IkReal x10709=(cj11*sj10);
IkReal x10710=(r02*sj10*sj11);
IkReal x10711=(cj10*cj12*r01);
CheckValue<IkReal> x10713=IKPowWithIntegerCheck(cj9,-1);
if(!x10713.valid){
continue;
}
if( IKabs((x10703*(x10713.value)*(((((-1.0)*cj11*r02*sj8))+(((-1.0)*cj12*x10704*x10708*x10709))+((r00*x10705*x10708))+((x10707*x10708*x10709))+((x10708*x10710))+((x10708*x10711))+((x10706*x10707))+(((-1.0)*cj12*x10704*x10706)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x10703*(((((-1.0)*x10710))+(((-1.0)*x10711))+(((-1.0)*x10704*x10705))+(((-1.0)*x10707*x10709))+((cj12*r00*x10709)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10703*(x10713.value)*(((((-1.0)*cj11*r02*sj8))+(((-1.0)*cj12*x10704*x10708*x10709))+((r00*x10705*x10708))+((x10707*x10708*x10709))+((x10708*x10710))+((x10708*x10711))+((x10706*x10707))+(((-1.0)*cj12*x10704*x10706))))))+IKsqr((x10703*(((((-1.0)*x10710))+(((-1.0)*x10711))+(((-1.0)*x10704*x10705))+(((-1.0)*x10707*x10709))+((cj12*r00*x10709))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x10703*(x10713.value)*(((((-1.0)*cj11*r02*sj8))+(((-1.0)*cj12*x10704*x10708*x10709))+((r00*x10705*x10708))+((x10707*x10708*x10709))+((x10708*x10710))+((x10708*x10711))+((x10706*x10707))+(((-1.0)*cj12*x10704*x10706))))), (x10703*(((((-1.0)*x10710))+(((-1.0)*x10711))+(((-1.0)*x10704*x10705))+(((-1.0)*x10707*x10709))+((cj12*r00*x10709))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x10714=IKsin(j7);
IkReal x10715=IKcos(j7);
IkReal x10716=((1.0)*sj12);
IkReal x10717=(r00*sj10);
IkReal x10718=(cj10*r11);
IkReal x10719=(cj11*sj12);
IkReal x10720=(cj10*r00);
IkReal x10721=(sj10*sj11);
IkReal x10722=(r10*sj10);
IkReal x10723=(r10*sj12);
IkReal x10724=(cj12*r01);
IkReal x10725=((1.0)*sj10);
IkReal x10726=(cj12*sj11);
IkReal x10727=(cj12*r11);
IkReal x10728=(cj10*sj11);
IkReal x10729=((1.0)*cj11*cj12);
IkReal x10730=(sj9*x10715);
IkReal x10731=(sj8*x10714);
IkReal x10732=(sj8*x10715);
IkReal x10733=(cj9*x10715);
IkReal x10734=((0.00043624)*x10714);
IkReal x10735=(cj8*x10714);
evalcond[0]=((((-1.0)*r01*sj11*x10716))+((cj9*x10714))+((cj8*x10730))+((cj11*r02))+((r00*x10726)));
evalcond[1]=(((r10*x10726))+((sj9*x10735))+((cj11*r12))+(((-1.0)*x10733))+(((-1.0)*r11*sj11*x10716)));
evalcond[2]=(((r02*x10721))+((r01*sj10*x10719))+((sj12*x10720))+(((-1.0)*x10717*x10729))+x10732+((cj10*x10724)));
evalcond[3]=(((r11*sj10*x10719))+(((-1.0)*x10722*x10729))+((r12*x10721))+x10731+((cj12*x10718))+((cj10*x10723)));
evalcond[4]=((((0.00043624)*cj8*x10733))+(((-0.4)*x10724))+(((-1.0)*px))+(((-0.00043624)*x10715))+(((-0.4)*r00*sj12))+(((0.42)*x10732))+(((-1.0)*sj9*x10734)));
evalcond[5]=((((-0.4)*x10723))+(((-0.4)*x10727))+(((-1.0)*py))+(((-1.0)*x10734))+(((0.42)*x10731))+((cj8*cj9*x10734))+(((0.00043624)*x10730)));
evalcond[6]=((((-1.0)*x10716*x10722))+((x10718*x10719))+((cj9*x10735))+(((-1.0)*cj10*r10*x10729))+((r12*x10728))+x10730+(((-1.0)*x10725*x10727)));
evalcond[7]=(((r02*x10728))+(((-1.0)*x10720*x10729))+((cj10*r01*x10719))+((cj8*x10733))+(((-1.0)*x10716*x10717))+(((-1.0)*x10724*x10725))+(((-1.0)*sj9*x10714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x10736=((5250000.0)*sj8);
IkReal x10737=(cj9*r01);
IkReal x10738=((5000000.0)*cj12);
IkReal x10739=((5453.0)*cj8);
IkReal x10740=((12500000.0)*px);
IkReal x10741=(sj11*sj12);
IkReal x10742=(cj8*sj9);
IkReal x10743=(cj11*r02);
IkReal x10744=((5453.0)*sj9);
IkReal x10745=(cj12*r00*sj11);
IkReal x10746=((5000000.0)*r00*sj12);
CheckValue<IkReal> x10747 = IKatan2WithCheck(IkReal((((x10737*x10739*x10741))+(((-1.0)*cj9*x10739*x10743))+(((-1.0)*cj9*x10739*x10745))+(((5453.0)*x10745))+(((5453.0)*x10743))+(((-1.0)*r01*x10738*x10742))+(((-1.0)*x10736*x10743))+(((-1.0)*x10736*x10745))+(((-5453.0)*r01*x10741))+(((-1.0)*x10740*x10742))+(((-1.0)*x10742*x10746))+((r01*x10736*x10741)))),IkReal((((r01*x10741*x10744))+((x10737*x10738))+(((-1.0)*x10744*x10745))+(((-1.0)*x10743*x10744))+((cj9*x10740))+((cj9*x10746)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10747.valid){
continue;
}
CheckValue<IkReal> x10748=IKPowWithIntegerCheck(IKsign((((cj9*x10736))+x10739+(((-5453.0)*cj9)))),-1);
if(!x10748.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x10747.value)+(((1.5707963267949)*(x10748.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x10749=IKsin(j7);
IkReal x10750=IKcos(j7);
IkReal x10751=((1.0)*sj12);
IkReal x10752=(r00*sj10);
IkReal x10753=(cj10*r11);
IkReal x10754=(cj11*sj12);
IkReal x10755=(cj10*r00);
IkReal x10756=(sj10*sj11);
IkReal x10757=(r10*sj10);
IkReal x10758=(r10*sj12);
IkReal x10759=(cj12*r01);
IkReal x10760=((1.0)*sj10);
IkReal x10761=(cj12*sj11);
IkReal x10762=(cj12*r11);
IkReal x10763=(cj10*sj11);
IkReal x10764=((1.0)*cj11*cj12);
IkReal x10765=(sj9*x10750);
IkReal x10766=(sj8*x10749);
IkReal x10767=(sj8*x10750);
IkReal x10768=(cj9*x10750);
IkReal x10769=((0.00043624)*x10749);
IkReal x10770=(cj8*x10749);
evalcond[0]=(((cj8*x10765))+(((-1.0)*r01*sj11*x10751))+((r00*x10761))+((cj11*r02))+((cj9*x10749)));
evalcond[1]=((((-1.0)*r11*sj11*x10751))+(((-1.0)*x10768))+((cj11*r12))+((sj9*x10770))+((r10*x10761)));
evalcond[2]=(((r01*sj10*x10754))+(((-1.0)*x10752*x10764))+((sj12*x10755))+((r02*x10756))+((cj10*x10759))+x10767);
evalcond[3]=(((r11*sj10*x10754))+(((-1.0)*x10757*x10764))+((cj12*x10753))+((cj10*x10758))+((r12*x10756))+x10766);
evalcond[4]=((((-1.0)*px))+(((-0.4)*r00*sj12))+(((-0.4)*x10759))+(((-1.0)*sj9*x10769))+(((0.42)*x10767))+(((0.00043624)*cj8*x10768))+(((-0.00043624)*x10750)));
evalcond[5]=(((cj8*cj9*x10769))+(((-1.0)*x10769))+(((-0.4)*x10762))+(((-1.0)*py))+(((-0.4)*x10758))+(((0.42)*x10766))+(((0.00043624)*x10765)));
evalcond[6]=(((r12*x10763))+((cj9*x10770))+((x10753*x10754))+(((-1.0)*x10751*x10757))+(((-1.0)*x10760*x10762))+x10765+(((-1.0)*cj10*r10*x10764)));
evalcond[7]=(((cj10*r01*x10754))+((cj8*x10768))+(((-1.0)*x10755*x10764))+(((-1.0)*sj9*x10749))+(((-1.0)*x10751*x10752))+(((-1.0)*x10759*x10760))+((r02*x10763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x10771=cj8*cj8;
IkReal x10772=cj9*cj9;
IkReal x10773=(cj11*cj9);
IkReal x10774=(cj12*cj9*sj11);
IkReal x10775=(cj9*sj11*sj12);
IkReal x10776=(cj11*cj8*sj9);
IkReal x10777=(cj12*cj8*sj11*sj9);
IkReal x10778=((1.0)*cj8*sj11*sj12*sj9);
CheckValue<IkReal> x10779=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10771))+(((-1.0)*x10772))+((x10771*x10772)))),-1);
if(!x10779.valid){
continue;
}
CheckValue<IkReal> x10780 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x10775))+((r12*x10776))+(((-1.0)*r11*x10778))+((r00*x10774))+((r10*x10777))+((r02*x10773)))),IkReal(((((-1.0)*r12*x10773))+((r11*x10775))+(((-1.0)*r10*x10774))+(((-1.0)*r01*x10778))+((r00*x10777))+((r02*x10776)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10780.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10779.value)))+(x10780.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x10781=IKsin(j7);
IkReal x10782=IKcos(j7);
IkReal x10783=((1.0)*sj12);
IkReal x10784=(r00*sj10);
IkReal x10785=(cj10*r11);
IkReal x10786=(cj11*sj12);
IkReal x10787=(cj10*r00);
IkReal x10788=(sj10*sj11);
IkReal x10789=(r10*sj10);
IkReal x10790=(r10*sj12);
IkReal x10791=(cj12*r01);
IkReal x10792=((1.0)*sj10);
IkReal x10793=(cj12*sj11);
IkReal x10794=(cj12*r11);
IkReal x10795=(cj10*sj11);
IkReal x10796=((1.0)*cj11*cj12);
IkReal x10797=(sj9*x10782);
IkReal x10798=(sj8*x10781);
IkReal x10799=(sj8*x10782);
IkReal x10800=(cj9*x10782);
IkReal x10801=((0.00043624)*x10781);
IkReal x10802=(cj8*x10781);
evalcond[0]=(((cj9*x10781))+((cj8*x10797))+((cj11*r02))+((r00*x10793))+(((-1.0)*r01*sj11*x10783)));
evalcond[1]=(((r10*x10793))+((sj9*x10802))+(((-1.0)*r11*sj11*x10783))+((cj11*r12))+(((-1.0)*x10800)));
evalcond[2]=(((cj10*x10791))+((r01*sj10*x10786))+((r02*x10788))+((sj12*x10787))+(((-1.0)*x10784*x10796))+x10799);
evalcond[3]=(((r11*sj10*x10786))+((cj10*x10790))+((cj12*x10785))+x10798+(((-1.0)*x10789*x10796))+((r12*x10788)));
evalcond[4]=((((0.00043624)*cj8*x10800))+(((-0.00043624)*x10782))+(((0.42)*x10799))+(((-1.0)*px))+(((-0.4)*r00*sj12))+(((-1.0)*sj9*x10801))+(((-0.4)*x10791)));
evalcond[5]=(((cj8*cj9*x10801))+(((-1.0)*x10801))+(((0.42)*x10798))+(((-1.0)*py))+(((0.00043624)*x10797))+(((-0.4)*x10790))+(((-0.4)*x10794)));
evalcond[6]=((((-1.0)*x10783*x10789))+((r12*x10795))+(((-1.0)*cj10*r10*x10796))+((x10785*x10786))+((cj9*x10802))+(((-1.0)*x10792*x10794))+x10797);
evalcond[7]=((((-1.0)*x10783*x10784))+((cj10*r01*x10786))+((r02*x10795))+((cj8*x10800))+(((-1.0)*x10787*x10796))+(((-1.0)*x10791*x10792))+(((-1.0)*sj9*x10781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x10803=cj12*cj12;
IkReal x10804=r21*r21;
IkReal x10805=r20*r20;
IkReal x10806=((1.0)*sj10);
IkReal x10807=(cj12*r20);
IkReal x10808=(sj8*sj9);
IkReal x10809=(cj10*cj12);
IkReal x10810=(r21*sj12);
IkReal x10811=(sj10*x10804);
IkReal x10812=(cj10*r20*r21);
CheckValue<IkReal> x10813 = IKatan2WithCheck(IkReal((((cj10*r20*r22*sj12))+((cj8*r22))+(((-1.0)*x10806*x10807*x10808))+((sj10*x10808*x10810))+((r21*r22*x10809)))),IkReal(((((-1.0)*sj12*x10805*x10809))+(((-2.0)*x10803*x10812))+(((-1.0)*cj8*x10807))+((sj12*x10804*x10809))+(((-1.0)*r22*x10806*x10808))+((cj8*x10810))+x10812)),IKFAST_ATAN2_MAGTHRESH);
if(!x10813.valid){
continue;
}
CheckValue<IkReal> x10814=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10804*x10806))+(((-1.0)*x10806*(r22*r22)))+(((2.0)*sj10*x10807*x10810))+(((-1.0)*x10803*x10805*x10806))+((x10803*x10811)))),-1);
if(!x10814.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x10813.value)+(((1.5707963267949)*(x10814.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[3];
IkReal x10815=IKsin(j11);
IkReal x10816=IKcos(j11);
IkReal x10817=(r21*sj12);
IkReal x10818=((1.0)*cj12);
IkReal x10819=(r20*sj12);
IkReal x10820=((1.0)*sj8);
IkReal x10821=(cj10*x10816);
IkReal x10822=(sj10*x10816);
IkReal x10823=(r22*x10815);
evalcond[0]=(((r22*x10816))+((cj12*r20*x10815))+(((-1.0)*x10815*x10817))+(((-1.0)*sj9*x10820)));
evalcond[1]=(((x10817*x10822))+((cj10*x10819))+cj8+(((-1.0)*r20*x10818*x10822))+((sj10*x10823))+((cj10*cj12*r21)));
evalcond[2]=((((-1.0)*cj9*x10820))+((x10817*x10821))+((cj10*x10823))+(((-1.0)*r20*x10818*x10821))+(((-1.0)*sj10*x10819))+(((-1.0)*r21*sj10*x10818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[2];
IkReal x10824=cj8*cj8;
IkReal x10825=cj9*cj9;
IkReal x10826=((((-1.0)*x10825))+(((-1.0)*x10824))+((x10824*x10825)));
j7eval[0]=x10826;
j7eval[1]=IKsign(x10826);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x10827=(cj9*sj8);
j7eval[0]=((((962.772785622593)*x10827))+cj8+(((-1.0)*cj9)));
j7eval[1]=IKsign(((((5453.0)*cj8))+(((5250000.0)*x10827))+(((-5453.0)*cj9))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=cj9;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x10828=(sj11*sj12);
IkReal x10829=((1.0)*cj11);
IkReal x10830=((1.0)*cj12*sj11);
j7eval[0]=cj8;
j7eval[1]=IKsign(cj8);
j7eval[2]=((IKabs(((((-1.0)*r10*x10830))+(((-1.0)*r12*x10829))+((r11*x10828)))))+(IKabs(((((-1.0)*r02*x10829))+(((-1.0)*r00*x10830))+((r01*x10828))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7eval[0]=((((962.772785622593)*cj8*sj8))+(((-1.0)*cj8)));
j7eval[1]=cj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
j7eval[0]=cj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x10831=((0.953370156591352)*cj12);
IkReal x10832=(r00*sj12);
IkReal x10833=(r10*sj12);
IkReal x10834=((0.00099126339489238)*cj12);
if( IKabs(((((-1.0)*r01*x10834))+(((-0.00247815848723095)*px))+(((-0.00099126339489238)*x10832))+(((2.38342539147838)*py))+(((0.953370156591352)*x10833))+((r11*x10831)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.00247815848723095)*py))+(((2.38342539147838)*px))+((r01*x10831))+(((0.953370156591352)*x10832))+(((0.00099126339489238)*x10833))+((r11*x10834)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x10834))+(((-0.00247815848723095)*px))+(((-0.00099126339489238)*x10832))+(((2.38342539147838)*py))+(((0.953370156591352)*x10833))+((r11*x10831))))+IKsqr(((((0.00247815848723095)*py))+(((2.38342539147838)*px))+((r01*x10831))+(((0.953370156591352)*x10832))+(((0.00099126339489238)*x10833))+((r11*x10834))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*r01*x10834))+(((-0.00247815848723095)*px))+(((-0.00099126339489238)*x10832))+(((2.38342539147838)*py))+(((0.953370156591352)*x10833))+((r11*x10831))), ((((0.00247815848723095)*py))+(((2.38342539147838)*px))+((r01*x10831))+(((0.953370156591352)*x10832))+(((0.00099126339489238)*x10833))+((r11*x10834))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x10835=IKcos(j7);
IkReal x10836=IKsin(j7);
IkReal x10837=(r00*sj12);
IkReal x10838=((1.0)*sj10);
IkReal x10839=(cj10*r11);
IkReal x10840=(cj11*sj12);
IkReal x10841=(r12*sj11);
IkReal x10842=(cj11*cj12);
IkReal x10843=((1.0)*cj10);
IkReal x10844=(r10*sj12);
IkReal x10845=(cj12*r01);
IkReal x10846=(cj12*r11);
IkReal x10847=(r02*sj11);
evalcond[0]=((((-0.4)*x10837))+(((0.41956376)*x10835))+(((-1.0)*px))+(((-0.00043624)*x10836))+(((-0.4)*x10845)));
evalcond[1]=((((0.41956376)*x10836))+(((-1.0)*py))+(((-0.4)*x10844))+(((-0.4)*x10846))+(((0.00043624)*x10835)));
evalcond[2]=((((-1.0)*r00*x10838*x10842))+((cj10*x10845))+((r01*sj10*x10840))+((sj10*x10847))+((cj10*x10837))+x10835);
evalcond[3]=(((cj12*x10839))+(((-1.0)*r10*x10838*x10842))+((r11*sj10*x10840))+((cj10*x10844))+((sj10*x10841))+x10836);
evalcond[4]=(((cj10*x10841))+((x10839*x10840))+(((-1.0)*x10838*x10846))+(((-1.0)*x10838*x10844))+(((-1.0)*r10*x10842*x10843))+x10835);
evalcond[5]=((((-1.0)*x10836))+(((-1.0)*x10837*x10838))+((cj10*r01*x10840))+((cj10*x10847))+(((-1.0)*x10838*x10845))+(((-1.0)*r00*x10842*x10843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x10848=(r10*sj12);
IkReal x10849=(cj12*r11);
IkReal x10850=(cj12*r01);
IkReal x10851=(r00*sj12);
if( IKabs(((((-2.37847937040421)*py))+(((-0.00246788393061724)*px))+(((-0.951391748161685)*x10849))+(((-0.951391748161685)*x10848))+(((-0.000987153572246896)*x10850))+(((-0.000987153572246896)*x10851)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.000987153572246896)*x10848))+(((0.000987153572246896)*x10849))+(((-2.37847937040421)*px))+(((-0.951391748161685)*x10851))+(((-0.951391748161685)*x10850))+(((0.00246788393061724)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.37847937040421)*py))+(((-0.00246788393061724)*px))+(((-0.951391748161685)*x10849))+(((-0.951391748161685)*x10848))+(((-0.000987153572246896)*x10850))+(((-0.000987153572246896)*x10851))))+IKsqr(((((0.000987153572246896)*x10848))+(((0.000987153572246896)*x10849))+(((-2.37847937040421)*px))+(((-0.951391748161685)*x10851))+(((-0.951391748161685)*x10850))+(((0.00246788393061724)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-2.37847937040421)*py))+(((-0.00246788393061724)*px))+(((-0.951391748161685)*x10849))+(((-0.951391748161685)*x10848))+(((-0.000987153572246896)*x10850))+(((-0.000987153572246896)*x10851))), ((((0.000987153572246896)*x10848))+(((0.000987153572246896)*x10849))+(((-2.37847937040421)*px))+(((-0.951391748161685)*x10851))+(((-0.951391748161685)*x10850))+(((0.00246788393061724)*py))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x10852=IKcos(j7);
IkReal x10853=IKsin(j7);
IkReal x10854=(r00*sj12);
IkReal x10855=((1.0)*sj10);
IkReal x10856=(cj10*r11);
IkReal x10857=(cj11*sj12);
IkReal x10858=(sj10*sj11);
IkReal x10859=(r10*sj12);
IkReal x10860=((1.0)*cj10);
IkReal x10861=(cj12*r01);
IkReal x10862=(cj12*r11);
IkReal x10863=(cj10*sj11);
IkReal x10864=((1.0)*x10853);
IkReal x10865=(cj11*cj12*r10);
IkReal x10866=(cj11*cj12*r00);
evalcond[0]=((((-0.42043624)*x10852))+(((-0.4)*x10861))+(((-0.4)*x10854))+(((-1.0)*px))+(((-0.00043624)*x10853)));
evalcond[1]=((((-0.42043624)*x10853))+(((-0.4)*x10862))+(((-0.4)*x10859))+(((0.00043624)*x10852))+(((-1.0)*py)));
evalcond[2]=(((r01*sj10*x10857))+(((-1.0)*x10855*x10866))+((cj10*x10861))+((cj10*x10854))+((r02*x10858))+(((-1.0)*x10852)));
evalcond[3]=(((r12*x10858))+((cj12*x10856))+(((-1.0)*x10864))+(((-1.0)*x10855*x10865))+((r11*sj10*x10857))+((cj10*x10859)));
evalcond[4]=(((x10856*x10857))+((r12*x10863))+(((-1.0)*x10860*x10865))+(((-1.0)*x10855*x10859))+(((-1.0)*x10855*x10862))+x10852);
evalcond[5]=((((-1.0)*x10860*x10866))+((cj10*r01*x10857))+(((-1.0)*x10854*x10855))+(((-1.0)*x10864))+(((-1.0)*x10855*x10861))+((r02*x10863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x10874=IKPowWithIntegerCheck(cj8,-1);
if(!x10874.valid){
continue;
}
IkReal x10867=x10874.value;
IkReal x10868=(cj12*r00);
IkReal x10869=(r01*sj12);
IkReal x10870=((5000000.0)*cj8);
IkReal x10871=(cj11*r02);
IkReal x10872=((5453.0)*sj11);
IkReal x10873=((5250000.0)*sj11*sj8);
if( IKabs(((0.000183385292499542)*x10867*(((((-5250000.0)*sj8*x10871))+(((-1.0)*x10868*x10873))+(((-12500000.0)*cj8*px))+(((-1.0)*cj12*r01*x10870))+(((-1.0)*x10869*x10872))+((x10868*x10872))+(((5453.0)*x10871))+((x10869*x10873))+(((-1.0)*r00*sj12*x10870)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x10867*(((((-1.0)*sj11*x10868))+(((-1.0)*x10871))+((sj11*x10869)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.000183385292499542)*x10867*(((((-5250000.0)*sj8*x10871))+(((-1.0)*x10868*x10873))+(((-12500000.0)*cj8*px))+(((-1.0)*cj12*r01*x10870))+(((-1.0)*x10869*x10872))+((x10868*x10872))+(((5453.0)*x10871))+((x10869*x10873))+(((-1.0)*r00*sj12*x10870))))))+IKsqr((x10867*(((((-1.0)*sj11*x10868))+(((-1.0)*x10871))+((sj11*x10869))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((0.000183385292499542)*x10867*(((((-5250000.0)*sj8*x10871))+(((-1.0)*x10868*x10873))+(((-12500000.0)*cj8*px))+(((-1.0)*cj12*r01*x10870))+(((-1.0)*x10869*x10872))+((x10868*x10872))+(((5453.0)*x10871))+((x10869*x10873))+(((-1.0)*r00*sj12*x10870))))), (x10867*(((((-1.0)*sj11*x10868))+(((-1.0)*x10871))+((sj11*x10869))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x10875=IKcos(j7);
IkReal x10876=IKsin(j7);
IkReal x10877=(r11*sj12);
IkReal x10878=((1.0)*sj11);
IkReal x10879=(cj10*cj11);
IkReal x10880=(cj12*r11);
IkReal x10881=(cj10*sj12);
IkReal x10882=(r12*sj11);
IkReal x10883=((1.0)*cj12);
IkReal x10884=(cj11*sj10);
IkReal x10885=((0.4)*sj12);
IkReal x10886=(r02*sj11);
IkReal x10887=(cj12*r01);
IkReal x10888=(r01*sj12);
IkReal x10889=(cj12*sj11);
IkReal x10890=((1.0)*sj10);
IkReal x10891=((0.00043624)*x10875);
IkReal x10892=((0.00043624)*x10876);
IkReal x10893=(sj8*x10875);
IkReal x10894=(sj8*x10876);
evalcond[0]=(((r00*x10889))+(((-1.0)*x10878*x10888))+((cj11*r02))+((cj8*x10875)));
evalcond[1]=((((-1.0)*x10877*x10878))+((cj11*r12))+((cj8*x10876))+((r10*x10889)));
evalcond[2]=((((0.42)*x10893))+(((-1.0)*r00*x10885))+(((-1.0)*x10891))+(((-1.0)*x10892))+(((-1.0)*px))+(((-0.4)*x10887)));
evalcond[3]=((((0.42)*x10894))+(((-1.0)*x10892))+(((-1.0)*py))+(((-1.0)*r10*x10885))+(((-0.4)*x10880))+x10891);
evalcond[4]=(((r00*x10881))+(((-1.0)*r00*x10883*x10884))+((cj10*x10887))+((sj10*x10886))+((x10884*x10888))+x10893);
evalcond[5]=(((cj10*x10880))+((x10877*x10884))+((sj10*x10882))+((r10*x10881))+(((-1.0)*r10*x10883*x10884))+x10894);
evalcond[6]=(((x10877*x10879))+(((-1.0)*x10880*x10890))+(((-1.0)*r10*x10879*x10883))+((cj10*x10882))+(((-1.0)*r10*sj12*x10890))+x10875);
evalcond[7]=(((cj10*x10886))+(((-1.0)*r00*x10879*x10883))+((x10879*x10888))+(((-1.0)*x10876))+(((-1.0)*r00*sj12*x10890))+(((-1.0)*r01*sj10*x10883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x10895=((5000000.0)*cj8);
IkReal x10896=(cj11*r02);
IkReal x10897=(r01*sj11*sj12);
IkReal x10898=(cj12*r00*sj11);
CheckValue<IkReal> x10899=IKPowWithIntegerCheck(((((5250000.0)*cj8*sj8))+(((-5453.0)*cj8))),-1);
if(!x10899.valid){
continue;
}
CheckValue<IkReal> x10900=IKPowWithIntegerCheck(cj8,-1);
if(!x10900.valid){
continue;
}
if( IKabs(((x10899.value)*(((((5453.0)*x10898))+(((5453.0)*x10896))+(((-5453.0)*x10897))+(((12500000.0)*cj8*py))+((cj12*r11*x10895))+((r10*sj12*x10895)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10900.value)*(((((-1.0)*x10896))+(((-1.0)*x10898))+x10897)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10899.value)*(((((5453.0)*x10898))+(((5453.0)*x10896))+(((-5453.0)*x10897))+(((12500000.0)*cj8*py))+((cj12*r11*x10895))+((r10*sj12*x10895))))))+IKsqr(((x10900.value)*(((((-1.0)*x10896))+(((-1.0)*x10898))+x10897))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x10899.value)*(((((5453.0)*x10898))+(((5453.0)*x10896))+(((-5453.0)*x10897))+(((12500000.0)*cj8*py))+((cj12*r11*x10895))+((r10*sj12*x10895))))), ((x10900.value)*(((((-1.0)*x10896))+(((-1.0)*x10898))+x10897))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x10901=IKcos(j7);
IkReal x10902=IKsin(j7);
IkReal x10903=(r11*sj12);
IkReal x10904=((1.0)*sj11);
IkReal x10905=(cj10*cj11);
IkReal x10906=(cj12*r11);
IkReal x10907=(cj10*sj12);
IkReal x10908=(r12*sj11);
IkReal x10909=((1.0)*cj12);
IkReal x10910=(cj11*sj10);
IkReal x10911=((0.4)*sj12);
IkReal x10912=(r02*sj11);
IkReal x10913=(cj12*r01);
IkReal x10914=(r01*sj12);
IkReal x10915=(cj12*sj11);
IkReal x10916=((1.0)*sj10);
IkReal x10917=((0.00043624)*x10901);
IkReal x10918=((0.00043624)*x10902);
IkReal x10919=(sj8*x10901);
IkReal x10920=(sj8*x10902);
evalcond[0]=(((cj8*x10901))+((r00*x10915))+((cj11*r02))+(((-1.0)*x10904*x10914)));
evalcond[1]=(((cj8*x10902))+((cj11*r12))+(((-1.0)*x10903*x10904))+((r10*x10915)));
evalcond[2]=((((-1.0)*x10917))+(((-1.0)*x10918))+(((0.42)*x10919))+(((-0.4)*x10913))+(((-1.0)*px))+(((-1.0)*r00*x10911)));
evalcond[3]=((((-1.0)*x10918))+(((-1.0)*r10*x10911))+(((0.42)*x10920))+(((-1.0)*py))+(((-0.4)*x10906))+x10917);
evalcond[4]=(((x10910*x10914))+(((-1.0)*r00*x10909*x10910))+((sj10*x10912))+((cj10*x10913))+((r00*x10907))+x10919);
evalcond[5]=(((sj10*x10908))+((cj10*x10906))+(((-1.0)*r10*x10909*x10910))+((r10*x10907))+x10920+((x10903*x10910)));
evalcond[6]=(((cj10*x10908))+((x10903*x10905))+(((-1.0)*x10906*x10916))+(((-1.0)*r10*sj12*x10916))+(((-1.0)*r10*x10905*x10909))+x10901);
evalcond[7]=(((cj10*x10912))+(((-1.0)*r00*x10905*x10909))+(((-1.0)*r00*sj12*x10916))+(((-1.0)*r01*sj10*x10909))+(((-1.0)*x10902))+((x10905*x10914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x10921=(sj11*sj12);
IkReal x10922=((1.0)*cj11);
IkReal x10923=((1.0)*cj12*sj11);
CheckValue<IkReal> x10924=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x10924.valid){
continue;
}
CheckValue<IkReal> x10925 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x10923))+(((-1.0)*r12*x10922))+((r11*x10921)))),IkReal(((((-1.0)*r02*x10922))+((r01*x10921))+(((-1.0)*r00*x10923)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10925.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10924.value)))+(x10925.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x10926=IKcos(j7);
IkReal x10927=IKsin(j7);
IkReal x10928=(r11*sj12);
IkReal x10929=((1.0)*sj11);
IkReal x10930=(cj10*cj11);
IkReal x10931=(cj12*r11);
IkReal x10932=(cj10*sj12);
IkReal x10933=(r12*sj11);
IkReal x10934=((1.0)*cj12);
IkReal x10935=(cj11*sj10);
IkReal x10936=((0.4)*sj12);
IkReal x10937=(r02*sj11);
IkReal x10938=(cj12*r01);
IkReal x10939=(r01*sj12);
IkReal x10940=(cj12*sj11);
IkReal x10941=((1.0)*sj10);
IkReal x10942=((0.00043624)*x10926);
IkReal x10943=((0.00043624)*x10927);
IkReal x10944=(sj8*x10926);
IkReal x10945=(sj8*x10927);
evalcond[0]=((((-1.0)*x10929*x10939))+((r00*x10940))+((cj11*r02))+((cj8*x10926)));
evalcond[1]=(((cj11*r12))+((cj8*x10927))+(((-1.0)*x10928*x10929))+((r10*x10940)));
evalcond[2]=((((-0.4)*x10938))+(((-1.0)*x10942))+(((-1.0)*x10943))+(((-1.0)*px))+(((0.42)*x10944))+(((-1.0)*r00*x10936)));
evalcond[3]=((((-0.4)*x10931))+(((-1.0)*r10*x10936))+(((-1.0)*x10943))+(((-1.0)*py))+(((0.42)*x10945))+x10942);
evalcond[4]=(((x10935*x10939))+(((-1.0)*r00*x10934*x10935))+((sj10*x10937))+((cj10*x10938))+((r00*x10932))+x10944);
evalcond[5]=(((r10*x10932))+((sj10*x10933))+((cj10*x10931))+((x10928*x10935))+x10945+(((-1.0)*r10*x10934*x10935)));
evalcond[6]=((((-1.0)*r10*sj12*x10941))+((cj10*x10933))+(((-1.0)*x10931*x10941))+((x10928*x10930))+(((-1.0)*r10*x10930*x10934))+x10926);
evalcond[7]=(((x10930*x10939))+(((-1.0)*x10927))+(((-1.0)*r00*sj12*x10941))+((cj10*x10937))+(((-1.0)*r01*sj10*x10934))+(((-1.0)*r00*x10930*x10934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x10946=(cj12*sj11);
IkReal x10947=((1.0)*sj11*sj12);
j7eval[0]=cj8;
j7eval[1]=IKsign(cj8);
j7eval[2]=((IKabs(((((-1.0)*r11*x10947))+((cj11*r12))+((r10*x10946)))))+(IKabs(((((-1.0)*r01*x10947))+((r00*x10946))+((cj11*r02))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7eval[0]=((((962.772785622593)*cj8*sj8))+(((-1.0)*cj8)));
j7eval[1]=cj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
j7eval[0]=cj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x10948=((0.953370156591352)*cj12);
IkReal x10949=(r00*sj12);
IkReal x10950=(r10*sj12);
IkReal x10951=((0.00099126339489238)*cj12);
if( IKabs(((((0.00247815848723095)*px))+((r11*x10948))+(((0.953370156591352)*x10950))+((r01*x10951))+(((0.00099126339489238)*x10949))+(((2.38342539147838)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.00099126339489238)*x10950))+((r01*x10948))+(((-0.00247815848723095)*py))+(((2.38342539147838)*px))+(((0.953370156591352)*x10949))+(((-1.0)*r11*x10951)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.00247815848723095)*px))+((r11*x10948))+(((0.953370156591352)*x10950))+((r01*x10951))+(((0.00099126339489238)*x10949))+(((2.38342539147838)*py))))+IKsqr(((((-0.00099126339489238)*x10950))+((r01*x10948))+(((-0.00247815848723095)*py))+(((2.38342539147838)*px))+(((0.953370156591352)*x10949))+(((-1.0)*r11*x10951))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((0.00247815848723095)*px))+((r11*x10948))+(((0.953370156591352)*x10950))+((r01*x10951))+(((0.00099126339489238)*x10949))+(((2.38342539147838)*py))), ((((-0.00099126339489238)*x10950))+((r01*x10948))+(((-0.00247815848723095)*py))+(((2.38342539147838)*px))+(((0.953370156591352)*x10949))+(((-1.0)*r11*x10951))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x10952=IKsin(j7);
IkReal x10953=IKcos(j7);
IkReal x10954=(r00*sj12);
IkReal x10955=((1.0)*sj10);
IkReal x10956=(cj10*r11);
IkReal x10957=(cj11*sj12);
IkReal x10958=(r12*sj11);
IkReal x10959=(cj11*cj12);
IkReal x10960=((1.0)*cj10);
IkReal x10961=(r10*sj12);
IkReal x10962=(cj12*r01);
IkReal x10963=(cj12*r11);
IkReal x10964=(r02*sj11);
evalcond[0]=((((0.41956376)*x10953))+(((-1.0)*px))+(((-0.4)*x10954))+(((-0.4)*x10962))+(((0.00043624)*x10952)));
evalcond[1]=((((-0.00043624)*x10953))+(((0.41956376)*x10952))+(((-1.0)*py))+(((-0.4)*x10963))+(((-0.4)*x10961)));
evalcond[2]=(((cj10*x10954))+((sj10*x10964))+((cj10*x10962))+(((-1.0)*r00*x10955*x10959))+((r01*sj10*x10957))+x10953);
evalcond[3]=(((r11*sj10*x10957))+((cj10*x10961))+((cj12*x10956))+(((-1.0)*r10*x10955*x10959))+((sj10*x10958))+x10952);
evalcond[4]=(((cj10*x10964))+(((-1.0)*r00*x10959*x10960))+(((-1.0)*x10955*x10962))+((cj10*r01*x10957))+x10952+(((-1.0)*x10954*x10955)));
evalcond[5]=(((cj10*x10958))+((x10956*x10957))+(((-1.0)*x10953))+(((-1.0)*x10955*x10961))+(((-1.0)*x10955*x10963))+(((-1.0)*r10*x10959*x10960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x10965=(r10*sj12);
IkReal x10966=(cj12*r11);
IkReal x10967=(cj12*r01);
IkReal x10968=(r00*sj12);
if( IKabs(((((0.000987153572246896)*x10968))+(((0.000987153572246896)*x10967))+(((-2.37847937040421)*py))+(((-0.951391748161685)*x10965))+(((-0.951391748161685)*x10966))+(((0.00246788393061724)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.37847937040421)*px))+(((-0.00246788393061724)*py))+(((-0.000987153572246896)*x10966))+(((-0.000987153572246896)*x10965))+(((-0.951391748161685)*x10968))+(((-0.951391748161685)*x10967)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.000987153572246896)*x10968))+(((0.000987153572246896)*x10967))+(((-2.37847937040421)*py))+(((-0.951391748161685)*x10965))+(((-0.951391748161685)*x10966))+(((0.00246788393061724)*px))))+IKsqr(((((-2.37847937040421)*px))+(((-0.00246788393061724)*py))+(((-0.000987153572246896)*x10966))+(((-0.000987153572246896)*x10965))+(((-0.951391748161685)*x10968))+(((-0.951391748161685)*x10967))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((0.000987153572246896)*x10968))+(((0.000987153572246896)*x10967))+(((-2.37847937040421)*py))+(((-0.951391748161685)*x10965))+(((-0.951391748161685)*x10966))+(((0.00246788393061724)*px))), ((((-2.37847937040421)*px))+(((-0.00246788393061724)*py))+(((-0.000987153572246896)*x10966))+(((-0.000987153572246896)*x10965))+(((-0.951391748161685)*x10968))+(((-0.951391748161685)*x10967))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x10969=IKcos(j7);
IkReal x10970=IKsin(j7);
IkReal x10971=(r00*sj12);
IkReal x10972=((1.0)*sj10);
IkReal x10973=(cj10*r11);
IkReal x10974=(cj11*sj12);
IkReal x10975=(sj10*sj11);
IkReal x10976=(r10*sj12);
IkReal x10977=((1.0)*cj10);
IkReal x10978=(cj12*r01);
IkReal x10979=(cj12*r11);
IkReal x10980=(cj10*sj11);
IkReal x10981=((1.0)*x10969);
IkReal x10982=(cj11*cj12*r10);
IkReal x10983=(cj11*cj12*r00);
evalcond[0]=((((-1.0)*px))+(((-0.4)*x10978))+(((-0.4)*x10971))+(((0.00043624)*x10970))+(((-0.42043624)*x10969)));
evalcond[1]=((((-0.00043624)*x10969))+(((-1.0)*py))+(((-0.4)*x10979))+(((-0.4)*x10976))+(((-0.42043624)*x10970)));
evalcond[2]=(((cj10*x10978))+((cj10*x10971))+((r02*x10975))+(((-1.0)*x10981))+(((-1.0)*x10972*x10983))+((r01*sj10*x10974)));
evalcond[3]=(((cj10*x10976))+((r11*sj10*x10974))+((cj12*x10973))+(((-1.0)*x10970))+((r12*x10975))+(((-1.0)*x10972*x10982)));
evalcond[4]=((((-1.0)*x10971*x10972))+(((-1.0)*x10972*x10978))+(((-1.0)*x10977*x10983))+((r02*x10980))+((cj10*r01*x10974))+x10970);
evalcond[5]=(((r12*x10980))+(((-1.0)*x10972*x10979))+(((-1.0)*x10972*x10976))+(((-1.0)*x10977*x10982))+((x10973*x10974))+(((-1.0)*x10981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x10990=IKPowWithIntegerCheck(cj8,-1);
if(!x10990.valid){
continue;
}
IkReal x10984=x10990.value;
IkReal x10985=((5250000.0)*sj8);
IkReal x10986=((5000000.0)*cj8);
IkReal x10987=(cj11*r02);
IkReal x10988=(cj12*r00*sj11);
IkReal x10989=(r01*sj11*sj12);
if( IKabs(((0.000183385292499542)*x10984*((((x10985*x10989))+(((-5453.0)*x10989))+(((-1.0)*x10985*x10987))+(((-1.0)*x10985*x10988))+((r00*sj12*x10986))+(((5453.0)*x10988))+(((5453.0)*x10987))+(((12500000.0)*cj8*px))+((cj12*r01*x10986)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x10984*(((((-1.0)*x10989))+x10988+x10987)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.000183385292499542)*x10984*((((x10985*x10989))+(((-5453.0)*x10989))+(((-1.0)*x10985*x10987))+(((-1.0)*x10985*x10988))+((r00*sj12*x10986))+(((5453.0)*x10988))+(((5453.0)*x10987))+(((12500000.0)*cj8*px))+((cj12*r01*x10986))))))+IKsqr((x10984*(((((-1.0)*x10989))+x10988+x10987))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((0.000183385292499542)*x10984*((((x10985*x10989))+(((-5453.0)*x10989))+(((-1.0)*x10985*x10987))+(((-1.0)*x10985*x10988))+((r00*sj12*x10986))+(((5453.0)*x10988))+(((5453.0)*x10987))+(((12500000.0)*cj8*px))+((cj12*r01*x10986))))), (x10984*(((((-1.0)*x10989))+x10988+x10987))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x10991=IKcos(j7);
IkReal x10992=IKsin(j7);
IkReal x10993=((1.0)*sj12);
IkReal x10994=(r00*sj10);
IkReal x10995=(cj10*r11);
IkReal x10996=(cj11*sj12);
IkReal x10997=(cj10*r00);
IkReal x10998=(r12*sj11);
IkReal x10999=(r10*sj10);
IkReal x11000=(r10*sj12);
IkReal x11001=(cj12*r01);
IkReal x11002=((1.0)*sj10);
IkReal x11003=(r02*sj11);
IkReal x11004=((1.0)*cj8);
IkReal x11005=(cj12*r11);
IkReal x11006=(cj12*sj11);
IkReal x11007=((0.00043624)*x10991);
IkReal x11008=((0.00043624)*x10992);
IkReal x11009=((1.0)*cj11*cj12);
IkReal x11010=(sj8*x10991);
IkReal x11011=(sj8*x10992);
evalcond[0]=((((-1.0)*x10991*x11004))+((cj11*r02))+((r00*x11006))+(((-1.0)*r01*sj11*x10993)));
evalcond[1]=((((-1.0)*x10992*x11004))+((r10*x11006))+((cj11*r12))+(((-1.0)*r11*sj11*x10993)));
evalcond[2]=((((-1.0)*x11007))+(((0.42)*x11010))+(((-0.4)*x11001))+x11008+(((-1.0)*px))+(((-0.4)*r00*sj12)));
evalcond[3]=((((-1.0)*x11008))+(((-1.0)*x11007))+(((0.42)*x11011))+(((-0.4)*x11000))+(((-0.4)*x11005))+(((-1.0)*py)));
evalcond[4]=(((sj10*x11003))+(((-1.0)*x10994*x11009))+x11010+((r01*sj10*x10996))+((sj12*x10997))+((cj10*x11001)));
evalcond[5]=((((-1.0)*x10999*x11009))+x11011+((sj10*x10998))+((cj12*x10995))+((r11*sj10*x10996))+((cj10*x11000)));
evalcond[6]=((((-1.0)*x10993*x10994))+((cj10*r01*x10996))+(((-1.0)*x11001*x11002))+(((-1.0)*x10997*x11009))+x10992+((cj10*x11003)));
evalcond[7]=((((-1.0)*x10993*x10999))+((x10995*x10996))+(((-1.0)*x11002*x11005))+(((-1.0)*x10991))+((cj10*x10998))+(((-1.0)*cj10*r10*x11009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x11012=((5000000.0)*cj8);
IkReal x11013=(cj11*r02);
IkReal x11014=(cj12*r00*sj11);
IkReal x11015=(r01*sj11*sj12);
CheckValue<IkReal> x11016=IKPowWithIntegerCheck(((((5250000.0)*cj8*sj8))+(((-5453.0)*cj8))),-1);
if(!x11016.valid){
continue;
}
CheckValue<IkReal> x11017=IKPowWithIntegerCheck(cj8,-1);
if(!x11017.valid){
continue;
}
if( IKabs(((x11016.value)*(((((-5453.0)*x11015))+(((5453.0)*x11013))+(((5453.0)*x11014))+((r10*sj12*x11012))+(((12500000.0)*cj8*py))+((cj12*r11*x11012)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11017.value)*((x11014+x11013+(((-1.0)*x11015)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11016.value)*(((((-5453.0)*x11015))+(((5453.0)*x11013))+(((5453.0)*x11014))+((r10*sj12*x11012))+(((12500000.0)*cj8*py))+((cj12*r11*x11012))))))+IKsqr(((x11017.value)*((x11014+x11013+(((-1.0)*x11015))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x11016.value)*(((((-5453.0)*x11015))+(((5453.0)*x11013))+(((5453.0)*x11014))+((r10*sj12*x11012))+(((12500000.0)*cj8*py))+((cj12*r11*x11012))))), ((x11017.value)*((x11014+x11013+(((-1.0)*x11015))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x11018=IKcos(j7);
IkReal x11019=IKsin(j7);
IkReal x11020=((1.0)*sj12);
IkReal x11021=(r00*sj10);
IkReal x11022=(cj10*r11);
IkReal x11023=(cj11*sj12);
IkReal x11024=(cj10*r00);
IkReal x11025=(r12*sj11);
IkReal x11026=(r10*sj10);
IkReal x11027=(r10*sj12);
IkReal x11028=(cj12*r01);
IkReal x11029=((1.0)*sj10);
IkReal x11030=(r02*sj11);
IkReal x11031=((1.0)*cj8);
IkReal x11032=(cj12*r11);
IkReal x11033=(cj12*sj11);
IkReal x11034=((0.00043624)*x11018);
IkReal x11035=((0.00043624)*x11019);
IkReal x11036=((1.0)*cj11*cj12);
IkReal x11037=(sj8*x11018);
IkReal x11038=(sj8*x11019);
evalcond[0]=((((-1.0)*x11018*x11031))+((r00*x11033))+((cj11*r02))+(((-1.0)*r01*sj11*x11020)));
evalcond[1]=(((cj11*r12))+((r10*x11033))+(((-1.0)*x11019*x11031))+(((-1.0)*r11*sj11*x11020)));
evalcond[2]=(x11035+(((-1.0)*px))+(((-0.4)*r00*sj12))+(((-0.4)*x11028))+(((0.42)*x11037))+(((-1.0)*x11034)));
evalcond[3]=((((-1.0)*py))+(((-0.4)*x11027))+(((-0.4)*x11032))+(((0.42)*x11038))+(((-1.0)*x11035))+(((-1.0)*x11034)));
evalcond[4]=(((sj10*x11030))+((sj12*x11024))+x11037+(((-1.0)*x11021*x11036))+((cj10*x11028))+((r01*sj10*x11023)));
evalcond[5]=(((sj10*x11025))+x11038+((r11*sj10*x11023))+(((-1.0)*x11026*x11036))+((cj10*x11027))+((cj12*x11022)));
evalcond[6]=((((-1.0)*x11028*x11029))+x11019+((cj10*r01*x11023))+(((-1.0)*x11020*x11021))+((cj10*x11030))+(((-1.0)*x11024*x11036)));
evalcond[7]=(((x11022*x11023))+(((-1.0)*x11029*x11032))+(((-1.0)*x11020*x11026))+((cj10*x11025))+(((-1.0)*x11018))+(((-1.0)*cj10*r10*x11036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x11039=(cj12*sj11);
IkReal x11040=((1.0)*sj11*sj12);
CheckValue<IkReal> x11041=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x11041.valid){
continue;
}
CheckValue<IkReal> x11042 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x11040))+((cj11*r12))+((r10*x11039)))),IkReal(((((-1.0)*r01*x11040))+((r00*x11039))+((cj11*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11042.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11041.value)))+(x11042.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x11043=IKcos(j7);
IkReal x11044=IKsin(j7);
IkReal x11045=((1.0)*sj12);
IkReal x11046=(r00*sj10);
IkReal x11047=(cj10*r11);
IkReal x11048=(cj11*sj12);
IkReal x11049=(cj10*r00);
IkReal x11050=(r12*sj11);
IkReal x11051=(r10*sj10);
IkReal x11052=(r10*sj12);
IkReal x11053=(cj12*r01);
IkReal x11054=((1.0)*sj10);
IkReal x11055=(r02*sj11);
IkReal x11056=((1.0)*cj8);
IkReal x11057=(cj12*r11);
IkReal x11058=(cj12*sj11);
IkReal x11059=((0.00043624)*x11043);
IkReal x11060=((0.00043624)*x11044);
IkReal x11061=((1.0)*cj11*cj12);
IkReal x11062=(sj8*x11043);
IkReal x11063=(sj8*x11044);
evalcond[0]=(((r00*x11058))+((cj11*r02))+(((-1.0)*x11043*x11056))+(((-1.0)*r01*sj11*x11045)));
evalcond[1]=(((r10*x11058))+((cj11*r12))+(((-1.0)*r11*sj11*x11045))+(((-1.0)*x11044*x11056)));
evalcond[2]=((((0.42)*x11062))+(((-0.4)*x11053))+x11060+(((-1.0)*px))+(((-0.4)*r00*sj12))+(((-1.0)*x11059)));
evalcond[3]=((((-1.0)*x11060))+(((0.42)*x11063))+(((-0.4)*x11052))+(((-0.4)*x11057))+(((-1.0)*py))+(((-1.0)*x11059)));
evalcond[4]=(((sj10*x11055))+((sj12*x11049))+(((-1.0)*x11046*x11061))+x11062+((r01*sj10*x11048))+((cj10*x11053)));
evalcond[5]=(((sj10*x11050))+((r11*sj10*x11048))+x11063+((cj10*x11052))+((cj12*x11047))+(((-1.0)*x11051*x11061)));
evalcond[6]=((((-1.0)*x11045*x11046))+((cj10*r01*x11048))+(((-1.0)*x11049*x11061))+x11044+(((-1.0)*x11053*x11054))+((cj10*x11055)));
evalcond[7]=((((-1.0)*x11054*x11057))+(((-1.0)*cj10*r10*x11061))+((x11047*x11048))+(((-1.0)*x11045*x11051))+(((-1.0)*x11043))+((cj10*x11050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x11064=((1.0)*cj11);
IkReal x11065=((1.0)*sj11);
IkReal x11066=(cj12*r10);
IkReal x11067=(r11*sj12);
IkReal x11068=(cj9*sj11);
IkReal x11069=(sj11*sj9);
IkReal x11070=(r01*sj12);
IkReal x11071=(cj12*r00);
if( IKabs(((((-1.0)*r12*sj9*x11064))+(((-1.0)*sj9*x11065*x11066))+(((-1.0)*cj9*r02*x11064))+((x11068*x11070))+(((-1.0)*cj9*x11065*x11071))+((x11067*x11069)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x11069*x11070))+(((-1.0)*cj9*x11065*x11067))+(((-1.0)*sj9*x11065*x11071))+(((-1.0)*r02*sj9*x11064))+((x11066*x11068))+((cj11*cj9*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*sj9*x11064))+(((-1.0)*sj9*x11065*x11066))+(((-1.0)*cj9*r02*x11064))+((x11068*x11070))+(((-1.0)*cj9*x11065*x11071))+((x11067*x11069))))+IKsqr((((x11069*x11070))+(((-1.0)*cj9*x11065*x11067))+(((-1.0)*sj9*x11065*x11071))+(((-1.0)*r02*sj9*x11064))+((x11066*x11068))+((cj11*cj9*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((((-1.0)*r12*sj9*x11064))+(((-1.0)*sj9*x11065*x11066))+(((-1.0)*cj9*r02*x11064))+((x11068*x11070))+(((-1.0)*cj9*x11065*x11071))+((x11067*x11069))), (((x11069*x11070))+(((-1.0)*cj9*x11065*x11067))+(((-1.0)*sj9*x11065*x11071))+(((-1.0)*r02*sj9*x11064))+((x11066*x11068))+((cj11*cj9*r12))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x11072=IKsin(j7);
IkReal x11073=IKcos(j7);
IkReal x11074=((1.0)*sj12);
IkReal x11075=(cj10*cj11);
IkReal x11076=((1.0)*cj12);
IkReal x11077=((0.4)*sj12);
IkReal x11078=(cj12*sj11);
IkReal x11079=((0.4)*cj12);
IkReal x11080=(cj10*sj11);
IkReal x11081=(sj9*x11073);
IkReal x11082=(cj9*x11072);
IkReal x11083=(cj9*x11073);
IkReal x11084=((0.00043624)*x11073);
IkReal x11085=((0.00043624)*x11072);
IkReal x11086=(sj9*x11072);
IkReal x11087=(x11081+x11082);
evalcond[0]=((((-1.0)*r01*sj11*x11074))+x11087+((cj11*r02))+((r00*x11078)));
evalcond[1]=((((-1.0)*x11083))+x11086+((cj11*r12))+((r10*x11078))+(((-1.0)*r11*sj11*x11074)));
evalcond[2]=((((-1.0)*sj9*x11085))+(((0.00043624)*x11083))+(((-1.0)*px))+(((-1.0)*r00*x11077))+(((-1.0)*r01*x11079))+(((-1.0)*x11084)));
evalcond[3]=((((-1.0)*r11*x11079))+(((0.00043624)*x11081))+(((0.00043624)*x11082))+(((-1.0)*py))+(((-1.0)*x11085))+(((-1.0)*r10*x11077)));
evalcond[4]=((((-1.0)*r10*sj10*x11074))+(((-1.0)*r11*sj10*x11076))+x11087+(((-1.0)*r10*x11075*x11076))+((r12*x11080))+((r11*sj12*x11075)));
evalcond[5]=((((-1.0)*r00*x11075*x11076))+((r01*sj12*x11075))+(((-1.0)*x11086))+(((-1.0)*r00*sj10*x11074))+x11083+(((-1.0)*r01*sj10*x11076))+((r02*x11080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x11088=((1.0)*cj9);
IkReal x11089=(cj11*r02);
IkReal x11090=(sj11*sj9);
IkReal x11091=(cj12*r10);
IkReal x11092=(r11*sj12);
IkReal x11093=(cj11*r12);
IkReal x11094=(r01*sj12);
IkReal x11095=(cj9*sj11);
IkReal x11096=(cj12*r00);
if( IKabs((((sj9*x11093))+(((-1.0)*sj11*x11088*x11096))+(((-1.0)*x11090*x11092))+((x11094*x11095))+(((-1.0)*x11088*x11089))+((x11090*x11091)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj11*x11088*x11092))+((sj9*x11089))+(((-1.0)*x11090*x11094))+((cj9*x11093))+((x11091*x11095))+((x11090*x11096)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj9*x11093))+(((-1.0)*sj11*x11088*x11096))+(((-1.0)*x11090*x11092))+((x11094*x11095))+(((-1.0)*x11088*x11089))+((x11090*x11091))))+IKsqr(((((-1.0)*sj11*x11088*x11092))+((sj9*x11089))+(((-1.0)*x11090*x11094))+((cj9*x11093))+((x11091*x11095))+((x11090*x11096))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((((sj9*x11093))+(((-1.0)*sj11*x11088*x11096))+(((-1.0)*x11090*x11092))+((x11094*x11095))+(((-1.0)*x11088*x11089))+((x11090*x11091))), ((((-1.0)*sj11*x11088*x11092))+((sj9*x11089))+(((-1.0)*x11090*x11094))+((cj9*x11093))+((x11091*x11095))+((x11090*x11096))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x11097=IKcos(j7);
IkReal x11098=IKsin(j7);
IkReal x11099=((1.0)*sj12);
IkReal x11100=(cj10*cj11);
IkReal x11101=((1.0)*cj12);
IkReal x11102=((0.4)*sj12);
IkReal x11103=(cj12*sj11);
IkReal x11104=((0.4)*cj12);
IkReal x11105=((1.0)*cj9);
IkReal x11106=(cj10*sj11);
IkReal x11107=((0.00043624)*x11097);
IkReal x11108=((0.00043624)*x11098);
IkReal x11109=(sj9*x11097);
IkReal x11110=(x11097*x11105);
IkReal x11111=((1.0)*sj9*x11098);
IkReal x11112=(x11111+x11110);
evalcond[0]=((((-1.0)*x11109))+((cj11*r02))+((cj9*x11098))+(((-1.0)*r01*sj11*x11099))+((r00*x11103)));
evalcond[1]=((((-1.0)*r11*sj11*x11099))+((r10*x11103))+((cj11*r12))+(((-1.0)*x11112)));
evalcond[2]=((((-1.0)*cj9*x11107))+(((-1.0)*px))+(((-1.0)*sj9*x11108))+(((-1.0)*r00*x11102))+(((-1.0)*r01*x11104))+(((-1.0)*x11107)));
evalcond[3]=((((-1.0)*r10*x11102))+(((-1.0)*cj9*x11108))+(((-1.0)*py))+(((-1.0)*r11*x11104))+(((-1.0)*x11108))+((sj9*x11107)));
evalcond[4]=((((-1.0)*x11098*x11105))+x11109+(((-1.0)*r10*x11100*x11101))+(((-1.0)*r10*sj10*x11099))+(((-1.0)*r11*sj10*x11101))+((r11*sj12*x11100))+((r12*x11106)));
evalcond[5]=(((r02*x11106))+((r01*sj12*x11100))+(((-1.0)*r01*sj10*x11101))+(((-1.0)*x11112))+(((-1.0)*r00*sj10*x11099))+(((-1.0)*r00*x11100*x11101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x11122=IKPowWithIntegerCheck(sj8,-1);
if(!x11122.valid){
continue;
}
IkReal x11113=x11122.value;
IkReal x11114=((1.0)*r00);
IkReal x11115=(cj10*sj12);
IkReal x11116=(sj11*sj8);
IkReal x11117=(r01*sj12);
IkReal x11118=(cj8*sj9);
IkReal x11119=(cj11*sj10);
IkReal x11120=(r02*sj10*sj11);
IkReal x11121=(cj10*cj12*r01);
CheckValue<IkReal> x11123=IKPowWithIntegerCheck(cj9,-1);
if(!x11123.valid){
continue;
}
if( IKabs((x11113*(x11123.value)*(((((-1.0)*cj11*r02*sj8))+((r00*x11115*x11118))+((x11116*x11117))+(((-1.0)*cj12*x11114*x11118*x11119))+((x11118*x11121))+((x11118*x11120))+((x11117*x11118*x11119))+(((-1.0)*cj12*x11114*x11116)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11113*(((((-1.0)*x11120))+(((-1.0)*x11121))+(((-1.0)*x11114*x11115))+(((-1.0)*x11117*x11119))+((cj12*r00*x11119)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11113*(x11123.value)*(((((-1.0)*cj11*r02*sj8))+((r00*x11115*x11118))+((x11116*x11117))+(((-1.0)*cj12*x11114*x11118*x11119))+((x11118*x11121))+((x11118*x11120))+((x11117*x11118*x11119))+(((-1.0)*cj12*x11114*x11116))))))+IKsqr((x11113*(((((-1.0)*x11120))+(((-1.0)*x11121))+(((-1.0)*x11114*x11115))+(((-1.0)*x11117*x11119))+((cj12*r00*x11119))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x11113*(x11123.value)*(((((-1.0)*cj11*r02*sj8))+((r00*x11115*x11118))+((x11116*x11117))+(((-1.0)*cj12*x11114*x11118*x11119))+((x11118*x11121))+((x11118*x11120))+((x11117*x11118*x11119))+(((-1.0)*cj12*x11114*x11116))))), (x11113*(((((-1.0)*x11120))+(((-1.0)*x11121))+(((-1.0)*x11114*x11115))+(((-1.0)*x11117*x11119))+((cj12*r00*x11119))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x11124=IKsin(j7);
IkReal x11125=IKcos(j7);
IkReal x11126=((1.0)*sj12);
IkReal x11127=(r00*sj10);
IkReal x11128=(cj10*r11);
IkReal x11129=(cj11*sj12);
IkReal x11130=(cj10*r00);
IkReal x11131=(sj10*sj11);
IkReal x11132=(r10*sj10);
IkReal x11133=(r10*sj12);
IkReal x11134=(cj12*r01);
IkReal x11135=((1.0)*sj10);
IkReal x11136=(cj12*sj11);
IkReal x11137=(cj12*r11);
IkReal x11138=(cj10*sj11);
IkReal x11139=((1.0)*cj11*cj12);
IkReal x11140=(sj9*x11125);
IkReal x11141=(sj8*x11124);
IkReal x11142=(sj8*x11125);
IkReal x11143=(cj9*x11125);
IkReal x11144=((0.00043624)*x11124);
IkReal x11145=(cj8*x11124);
evalcond[0]=(((cj11*r02))+((cj8*x11140))+((cj9*x11124))+((r00*x11136))+(((-1.0)*r01*sj11*x11126)));
evalcond[1]=((((-1.0)*x11143))+((cj11*r12))+((r10*x11136))+((sj9*x11145))+(((-1.0)*r11*sj11*x11126)));
evalcond[2]=(((r02*x11131))+((cj10*x11134))+(((-1.0)*x11127*x11139))+x11142+((r01*sj10*x11129))+((sj12*x11130)));
evalcond[3]=(((r11*sj10*x11129))+((cj10*x11133))+(((-1.0)*x11132*x11139))+x11141+((cj12*x11128))+((r12*x11131)));
evalcond[4]=((((0.42)*x11142))+(((-0.4)*x11134))+(((-1.0)*sj9*x11144))+(((0.00043624)*cj8*x11143))+(((-1.0)*px))+(((-0.00043624)*x11125))+(((-0.4)*r00*sj12)));
evalcond[5]=((((0.42)*x11141))+(((0.00043624)*x11140))+(((-0.4)*x11133))+(((-0.4)*x11137))+(((-1.0)*py))+(((-1.0)*x11144))+((cj8*cj9*x11144)));
evalcond[6]=((((-1.0)*cj10*r10*x11139))+(((-1.0)*x11135*x11137))+x11140+(((-1.0)*x11126*x11132))+((r12*x11138))+((cj9*x11145))+((x11128*x11129)));
evalcond[7]=(((r02*x11138))+(((-1.0)*x11134*x11135))+((cj10*r01*x11129))+(((-1.0)*sj9*x11124))+((cj8*x11143))+(((-1.0)*x11126*x11127))+(((-1.0)*x11130*x11139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x11146=((5250000.0)*sj8);
IkReal x11147=(cj9*r01);
IkReal x11148=((5000000.0)*cj12);
IkReal x11149=((5453.0)*cj8);
IkReal x11150=((12500000.0)*px);
IkReal x11151=(sj11*sj12);
IkReal x11152=(cj8*sj9);
IkReal x11153=(cj11*r02);
IkReal x11154=((5453.0)*sj9);
IkReal x11155=(cj12*r00*sj11);
IkReal x11156=((5000000.0)*r00*sj12);
CheckValue<IkReal> x11157 = IKatan2WithCheck(IkReal((((r01*x11146*x11151))+(((-5453.0)*r01*x11151))+(((5453.0)*x11155))+(((5453.0)*x11153))+(((-1.0)*r01*x11148*x11152))+(((-1.0)*x11150*x11152))+(((-1.0)*cj9*x11149*x11153))+(((-1.0)*cj9*x11149*x11155))+((x11147*x11149*x11151))+(((-1.0)*x11146*x11153))+(((-1.0)*x11146*x11155))+(((-1.0)*x11152*x11156)))),IkReal((((x11147*x11148))+(((-1.0)*x11154*x11155))+(((-1.0)*x11153*x11154))+((cj9*x11156))+((cj9*x11150))+((r01*x11151*x11154)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11157.valid){
continue;
}
CheckValue<IkReal> x11158=IKPowWithIntegerCheck(IKsign((x11149+((cj9*x11146))+(((-5453.0)*cj9)))),-1);
if(!x11158.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x11157.value)+(((1.5707963267949)*(x11158.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x11159=IKsin(j7);
IkReal x11160=IKcos(j7);
IkReal x11161=((1.0)*sj12);
IkReal x11162=(r00*sj10);
IkReal x11163=(cj10*r11);
IkReal x11164=(cj11*sj12);
IkReal x11165=(cj10*r00);
IkReal x11166=(sj10*sj11);
IkReal x11167=(r10*sj10);
IkReal x11168=(r10*sj12);
IkReal x11169=(cj12*r01);
IkReal x11170=((1.0)*sj10);
IkReal x11171=(cj12*sj11);
IkReal x11172=(cj12*r11);
IkReal x11173=(cj10*sj11);
IkReal x11174=((1.0)*cj11*cj12);
IkReal x11175=(sj9*x11160);
IkReal x11176=(sj8*x11159);
IkReal x11177=(sj8*x11160);
IkReal x11178=(cj9*x11160);
IkReal x11179=((0.00043624)*x11159);
IkReal x11180=(cj8*x11159);
evalcond[0]=(((cj8*x11175))+((r00*x11171))+((cj11*r02))+(((-1.0)*r01*sj11*x11161))+((cj9*x11159)));
evalcond[1]=(((sj9*x11180))+(((-1.0)*r11*sj11*x11161))+((cj11*r12))+(((-1.0)*x11178))+((r10*x11171)));
evalcond[2]=(((sj12*x11165))+((r01*sj10*x11164))+x11177+((cj10*x11169))+((r02*x11166))+(((-1.0)*x11162*x11174)));
evalcond[3]=((((-1.0)*x11167*x11174))+((r12*x11166))+x11176+((cj10*x11168))+((cj12*x11163))+((r11*sj10*x11164)));
evalcond[4]=((((-1.0)*sj9*x11179))+(((-0.00043624)*x11160))+(((-1.0)*px))+(((0.42)*x11177))+(((-0.4)*r00*sj12))+(((0.00043624)*cj8*x11178))+(((-0.4)*x11169)));
evalcond[5]=(((cj8*cj9*x11179))+(((-1.0)*x11179))+(((-1.0)*py))+(((0.42)*x11176))+(((0.00043624)*x11175))+(((-0.4)*x11172))+(((-0.4)*x11168)));
evalcond[6]=(((cj9*x11180))+(((-1.0)*x11161*x11167))+((r12*x11173))+(((-1.0)*cj10*r10*x11174))+((x11163*x11164))+x11175+(((-1.0)*x11170*x11172)));
evalcond[7]=(((cj10*r01*x11164))+((cj8*x11178))+(((-1.0)*x11161*x11162))+(((-1.0)*x11169*x11170))+(((-1.0)*sj9*x11159))+((r02*x11173))+(((-1.0)*x11165*x11174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x11181=cj8*cj8;
IkReal x11182=cj9*cj9;
IkReal x11183=(cj11*cj9);
IkReal x11184=(cj12*cj9*sj11);
IkReal x11185=(cj9*sj11*sj12);
IkReal x11186=(cj11*cj8*sj9);
IkReal x11187=(cj12*cj8*sj11*sj9);
IkReal x11188=((1.0)*cj8*sj11*sj12*sj9);
CheckValue<IkReal> x11189 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x11188))+((r12*x11186))+((r00*x11184))+((r02*x11183))+(((-1.0)*r01*x11185))+((r10*x11187)))),IkReal(((((-1.0)*r01*x11188))+((r11*x11185))+(((-1.0)*r12*x11183))+((r00*x11187))+((r02*x11186))+(((-1.0)*r10*x11184)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11189.valid){
continue;
}
CheckValue<IkReal> x11190=IKPowWithIntegerCheck(IKsign((((x11181*x11182))+(((-1.0)*x11181))+(((-1.0)*x11182)))),-1);
if(!x11190.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x11189.value)+(((1.5707963267949)*(x11190.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x11191=IKsin(j7);
IkReal x11192=IKcos(j7);
IkReal x11193=((1.0)*sj12);
IkReal x11194=(r00*sj10);
IkReal x11195=(cj10*r11);
IkReal x11196=(cj11*sj12);
IkReal x11197=(cj10*r00);
IkReal x11198=(sj10*sj11);
IkReal x11199=(r10*sj10);
IkReal x11200=(r10*sj12);
IkReal x11201=(cj12*r01);
IkReal x11202=((1.0)*sj10);
IkReal x11203=(cj12*sj11);
IkReal x11204=(cj12*r11);
IkReal x11205=(cj10*sj11);
IkReal x11206=((1.0)*cj11*cj12);
IkReal x11207=(sj9*x11192);
IkReal x11208=(sj8*x11191);
IkReal x11209=(sj8*x11192);
IkReal x11210=(cj9*x11192);
IkReal x11211=((0.00043624)*x11191);
IkReal x11212=(cj8*x11191);
evalcond[0]=(((cj9*x11191))+(((-1.0)*r01*sj11*x11193))+((cj11*r02))+((r00*x11203))+((cj8*x11207)));
evalcond[1]=(((sj9*x11212))+(((-1.0)*r11*sj11*x11193))+((cj11*r12))+((r10*x11203))+(((-1.0)*x11210)));
evalcond[2]=(((sj12*x11197))+x11209+((cj10*x11201))+((r01*sj10*x11196))+((r02*x11198))+(((-1.0)*x11194*x11206)));
evalcond[3]=(x11208+((cj10*x11200))+(((-1.0)*x11199*x11206))+((r12*x11198))+((cj12*x11195))+((r11*sj10*x11196)));
evalcond[4]=((((-0.00043624)*x11192))+(((0.42)*x11209))+(((-1.0)*px))+(((-0.4)*r00*sj12))+(((-1.0)*sj9*x11211))+(((-0.4)*x11201))+(((0.00043624)*cj8*x11210)));
evalcond[5]=((((-1.0)*x11211))+(((0.42)*x11208))+(((-1.0)*py))+(((0.00043624)*x11207))+((cj8*cj9*x11211))+(((-0.4)*x11204))+(((-0.4)*x11200)));
evalcond[6]=(x11207+(((-1.0)*cj10*r10*x11206))+((x11195*x11196))+((r12*x11205))+(((-1.0)*x11202*x11204))+((cj9*x11212))+(((-1.0)*x11193*x11199)));
evalcond[7]=(((r02*x11205))+(((-1.0)*x11197*x11206))+((cj10*r01*x11196))+(((-1.0)*sj9*x11191))+((cj8*x11210))+(((-1.0)*x11201*x11202))+(((-1.0)*x11193*x11194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "afb2d585f71c88fdad4bbc357daecfc8"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
