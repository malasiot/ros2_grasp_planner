/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2024-10-01 06:50:41.406771
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[1]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((0.07)*x5);
x13=((1.0)*x5);
x14=((1.0)*x7);
x15=((0.07)*x1);
x16=((0.4)*x5);
x17=((1.0)*x1);
x18=((0.07)*x3);
x19=(x3*x4);
x20=(x2*x6);
x21=(x0*x4);
x22=(x6*x7);
x23=(x3*x6);
x24=(x0*x2);
x25=(x0*x6);
x26=(x23*x5);
x27=(x4*x6*x9);
x28=(x1*x2*x3);
x29=(x4*x6*x8);
x30=(x13*x25);
x31=(x13*x20);
x32=(((x1*x24))+(((-1.0)*x19)));
x33=(x21+x28);
x34=((((-1.0)*x17*x19))+x24);
x35=((((-1.0)*x31))+((x1*x7)));
x36=((((-1.0)*x17*x21))+(((-1.0)*x2*x3)));
x37=(((x1*x13))+((x14*x20)));
x38=(x32*x7);
x39=(x32*x5);
x40=(x34*x9);
x41=(x35*x8);
x42=(x36*x9);
x43=(((x0*x22))+x39);
x44=(((x22*x3))+((x33*x5)));
x45=((((-1.0)*x14*x33))+((x13*x23)));
x46=(x44*x8);
x47=(x43*x8);
eerot[0]=(((x11*(((((-1.0)*x38))+x30))))+((x10*((x47+x42)))));
eerot[1]=(((x36*x8))+((x9*(((((-1.0)*x14*x25))+(((-1.0)*x13*x32)))))));
eerot[2]=(((x11*(((((-1.0)*x42))+(((-1.0)*x47))))))+((x10*(((((-1.0)*x14*x32))+x30)))));
IkReal x48=(x1*x24);
eetrans[0]=((((-0.00043624)*x19))+(((-0.00043624)*x0))+((x8*(((((-1.0)*x15*x21))+(((-1.0)*x18*x2))))))+((x7*(((((-0.4)*x48))+(((0.4)*x19))))))+((x9*(((((-1.0)*x12*x32))+(((-0.07)*x0*x22))))))+((x16*x25))+(((0.00043624)*x48))+(((0.42)*x25)));
eerot[3]=(((x10*((x46+x40))))+((x11*x45)));
eerot[4]=(((x34*x8))+((x9*(((((-1.0)*x14*x23))+(((-1.0)*x13*x33)))))));
eerot[5]=(((x10*x45))+((x11*(((((-1.0)*x40))+(((-1.0)*x46)))))));
eetrans[1]=(((x8*(((((-1.0)*x15*x19))+(((0.07)*x24))))))+((x7*(((((-0.4)*x28))+(((-0.4)*x21))))))+(((-0.00043624)*x3))+((x9*(((((-1.0)*x12*x33))+(((-1.0)*x18*x22))))))+((x16*x23))+(((0.00043624)*x21))+(((0.00043624)*x28))+(((0.42)*x23)));
eerot[6]=(((x10*((x41+x27))))+((x11*x37)));
eerot[7]=(((x9*(((((-1.0)*x1*x14))+x31))))+x29);
eerot[8]=(((x11*(((((-1.0)*x41))+(((-1.0)*x27))))))+((x10*x37)));
eetrans[2]=((0.36)+(((-0.00043624)*x20))+((x1*x16))+(((0.4)*x20*x7))+(((0.07)*x29))+((x9*((((x12*x20))+(((-1.0)*x15*x7))))))+(((0.42)*x1)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r02);
new_r01=((-1.0)*r00);
new_r02=r01;
new_px=((((-0.07)*r01))+px);
new_r10=((-1.0)*r12);
new_r11=((-1.0)*r10);
new_r12=r11;
new_py=((((-0.07)*r11))+py);
new_r20=((-1.0)*r22);
new_r21=((-1.0)*r20);
new_r22=r21;
new_pz=((-0.36)+pz+(((-0.07)*r21)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x49=((1.0)*px);
IkReal x50=((1.0)*pz);
IkReal x51=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x51))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x50)));
rxp0_2=((((-1.0)*r10*x49))+((py*r00)));
rxp1_0=((((-1.0)*r21*x51))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x50)));
rxp1_2=((((-1.0)*r11*x49))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x51)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x50)));
rxp2_2=((((-1.0)*r12*x49))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x52=((0.8)*npx);
IkReal x53=((0.8)*npy);
IkReal x54=((0.4)*r20);
IkReal x55=((0.4)*r22);
IkReal x56=((-0.4)*r20);
IkReal x57=((-0.4)*r21);
IkReal x58=((-1.0)*r22);
IkReal x59=((-0.4)*r22);
IkReal x60=((-1.0)*rxp2_2);
IkReal x61=((-1.0)*r21);
IkReal x62=((-1.0)*npy);
IkReal x63=((-1.0)*rxp0_2);
IkReal x64=((-1.0)*rxp1_2);
IkReal x65=((-1.0)*npx);
matrixinvcoeffs[0]=x56;
matrixinvcoeffs[1]=x52;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=((-1.0)*r20);
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x63;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x56;
matrixinvcoeffs[19]=x52;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=r20;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=x65;
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=rxp0_2;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x57;
matrixinvcoeffs[33]=x53;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=x61;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x64;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x57;
matrixinvcoeffs[51]=x53;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=r21;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=x62;
matrixinvcoeffs[59]=0;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=rxp1_2;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=x58;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=npz;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x59;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=x60;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=npz;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=x58;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x59;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=x60;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=x61;
matrixinvcoeffs[101]=x62;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=rxp1_2;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x57;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=x61;
matrixinvcoeffs[119]=x62;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=rxp1_2;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x57;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=r20;
matrixinvcoeffs[133]=npx;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=x63;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x54;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=r20;
matrixinvcoeffs[151]=npx;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=x63;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x54;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=r22;
matrixinvcoeffs[165]=npz;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=x60;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x55;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=r22;
matrixinvcoeffs[183]=npz;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=x60;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=x55;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=x61;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=npy;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x57;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x64;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=npy;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=x61;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x57;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=x64;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=r20;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=x65;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=x54;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=x65;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=r20;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x54;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=rxp0_2;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_10=matrixinvcoeffs[164], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_11=matrixinvcoeffs[181], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_8=matrixinvcoeffs[134], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_9=matrixinvcoeffs[151], gclwh7_11=matrixinvcoeffs[183], gclwh7_13=matrixinvcoeffs[215], gclwh7_15=matrixinvcoeffs[247], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_8=matrixinvcoeffs[136], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_1=matrixinvcoeffs[25], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_9=matrixinvcoeffs[153], gclwh9_11=matrixinvcoeffs[185], gclwh9_13=matrixinvcoeffs[217], gclwh9_15=matrixinvcoeffs[249], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_8=matrixinvcoeffs[138], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_9=matrixinvcoeffs[155], gclwh11_11=matrixinvcoeffs[187], gclwh11_13=matrixinvcoeffs[219], gclwh11_15=matrixinvcoeffs[251], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_10=matrixinvcoeffs[172], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_11=matrixinvcoeffs[189], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_10=matrixinvcoeffs[174], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_11=matrixinvcoeffs[191], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x66=pz*pz;
IkReal x67=pp*pp;
IkReal x68=((0.000697984)*rxp0_2);
IkReal x69=(npx*pz);
IkReal x70=((2.0)*gclwh9_11);
IkReal x71=((0.16)*r21);
IkReal x72=(gclwh6_12*r21);
IkReal x73=(gclwh13_0*rxp1_2);
IkReal x74=(gclwh8_2*r20);
IkReal x75=(pp*r21);
IkReal x76=((0.8)*rxp0_2);
IkReal x77=((3.2)*rxp2_2);
IkReal x78=(gclwh8_12*r20);
IkReal x79=((0.84)*pp);
IkReal x80=(npy*pz);
IkReal x81=((0.00087248)*pp);
IkReal x82=((2.0)*gclwh6_8);
IkReal x83=(gclwh9_15*r20);
IkReal x84=(pp*r22);
IkReal x85=(gclwh7_0*pz);
IkReal x86=(gclwh9_9*r20);
IkReal x87=(gclwh8_5*r20);
IkReal x88=(gclwh9_6*r20);
IkReal x89=((0.000697984)*rxp2_2);
IkReal x90=((1.0)*pz);
IkReal x91=(npz*pz);
IkReal x92=(gclwh5_1*rxp2_2);
IkReal x93=((0.0001395968)*r22);
IkReal x94=(gclwh9_13*r20);
IkReal x95=(gclwh13_1*rxp1_2);
IkReal x96=(gclwh10_12*r22);
IkReal x97=(gclwh7_1*r21);
IkReal x98=(gclwh9_0*r20);
IkReal x99=((0.001395968)*rxp0_2);
IkReal x100=((1.344)*rxp1_2);
IkReal x101=((0.000697984)*rxp1_2);
IkReal x102=((0.0001395968)*r21);
IkReal x103=((0.16)*r22);
IkReal x104=(gclwh14_3*rxp0_2);
IkReal x105=(gclwh14_14*r20);
IkReal x106=(gclwh14_10*r20);
IkReal x107=((1.344)*rxp0_2);
IkReal x108=(gclwh11_13*r22);
IkReal x109=((1.6)*rxp1_2);
IkReal x110=((0.0001395968)*r20);
IkReal x111=((0.0672)*r21);
IkReal x112=((3.2)*rxp1_2);
IkReal x113=((0.336)*rxp0_2);
IkReal x114=((4.0)*pp);
IkReal x115=(gclwh7_15*r21);
IkReal x116=((0.001395968)*rxp1_2);
IkReal x117=(pp*r20);
IkReal x118=(gclwh8_4*r20);
IkReal x119=(gclwh11_15*r22);
IkReal x120=((0.8)*rxp1_2);
IkReal x121=((2.0)*gclwh7_11);
IkReal x122=(gclwh4_8*rxp2_2);
IkReal x123=((0.42)*pp);
IkReal x124=(gclwh10_2*r22);
IkReal x125=((0.16)*pz);
IkReal x126=((2.0)*gclwh10_8);
IkReal x127=((0.32)*r21);
IkReal x128=(gclwh11_9*r22);
IkReal x129=((2.0)*gclwh11_11);
IkReal x130=(gclwh9_1*r20);
IkReal x131=((0.8)*pp);
IkReal x132=((0.00174496)*gclwh11_15);
IkReal x133=((2.0)*gclwh8_8);
IkReal x134=((1.6)*rxp0_2);
IkReal x135=(gclwh11_1*r22);
IkReal x136=((0.336)*rxp2_2);
IkReal x137=((2.0)*pp);
IkReal x138=(gclwh12_3*rxp1_2);
IkReal x139=((0.64)*r21);
IkReal x140=((3.2)*rxp0_2);
IkReal x141=((0.32)*r20);
IkReal x142=((0.32)*r22);
IkReal x143=(gclwh5_15*rxp2_2);
IkReal x144=((0.64)*r22);
IkReal x145=(gclwh11_0*r22);
IkReal x146=(gclwh15_1*rxp0_2);
IkReal x147=((0.16)*r20);
IkReal x148=(gclwh5_11*rxp2_2);
IkReal x149=(gclwh4_14*rxp2_2);
IkReal x150=((0.00174496)*gclwh7_15);
IkReal x151=(gclwh6_2*pz);
IkReal x152=((0.016)*gclwh14_10*rxp0_2);
IkReal x153=(gclwh6_8*x71);
IkReal x154=((0.0672)*x74);
IkReal x155=(gclwh12_8*x120);
IkReal x156=((0.0672)*x124);
IkReal x157=(gclwh6_8*x75);
IkReal x158=((0.8)*x122);
IkReal x159=(gclwh14_2*x113);
IkReal x160=(gclwh14_8*x76);
IkReal x161=(gclwh6_2*x111);
IkReal x162=(gclwh4_2*x136);
IkReal x163=((0.016)*gclwh4_10*rxp2_2);
IkReal x164=(gclwh10_8*x103);
IkReal x165=((0.336)*gclwh12_2*rxp1_2);
IkReal x166=((0.016)*gclwh12_10*rxp1_2);
IkReal x167=(gclwh8_8*x147);
IkReal x168=(gclwh15_0*x113);
IkReal x169=((0.0672)*x98);
IkReal x170=((0.8)*x148);
IkReal x171=(gclwh13_11*x120);
IkReal x172=((0.1312)*x128);
IkReal x173=((0.1312)*x86);
IkReal x174=((0.656)*gclwh15_9*rxp0_2);
IkReal x175=(gclwh7_11*x71);
IkReal x176=((0.0672)*x145);
IkReal x177=(gclwh7_11*x75);
IkReal x178=(gclwh5_0*x136);
IkReal x179=((0.656)*gclwh5_9*rxp2_2);
IkReal x180=((0.336)*x73);
IkReal x181=((0.1312)*gclwh7_9*r21);
IkReal x182=((0.656)*gclwh13_9*rxp1_2);
IkReal x183=(gclwh9_11*x147);
IkReal x184=(gclwh7_0*x111);
IkReal x185=(gclwh11_11*x103);
IkReal x186=(gclwh15_11*x76);
IkReal x187=(gclwh12_10*x101);
IkReal x188=(gclwh4_10*x89);
IkReal x189=(gclwh14_10*x68);
IkReal x190=(gclwh10_2*x93);
IkReal x191=(gclwh14_2*x68);
IkReal x192=((0.0001395968)*x74);
IkReal x193=((0.00058630656)*x104);
IkReal x194=(gclwh4_2*x89);
IkReal x195=(gclwh6_2*x102);
IkReal x196=((0.00058630656)*x138);
IkReal x197=(gclwh12_2*x101);
IkReal x198=(gclwh7_9*x102);
IkReal x199=(gclwh13_9*x101);
IkReal x200=(gclwh5_9*x89);
IkReal x201=((0.0001395968)*x86);
IkReal x202=(gclwh15_9*x68);
IkReal x203=(gclwh11_9*x93);
IkReal x204=(gclwh11_0*x93);
IkReal x205=((0.000117261312)*x135);
IkReal x206=((0.00058630656)*x146);
IkReal x207=((0.000117261312)*x130);
IkReal x208=((0.0001395968)*x98);
IkReal x209=(gclwh15_0*x68);
IkReal x210=(gclwh7_0*x102);
IkReal x211=((0.000117261312)*x97);
IkReal x212=(gclwh5_0*x89);
IkReal x213=((0.00058630656)*x92);
IkReal x214=((0.00058630656)*x95);
IkReal x215=((0.000697984)*x73);
IkReal x216=((0.8)*pz*rxp2_2);
IkReal x217=((2.0)*x66);
IkReal x218=(gclwh4_2*x216);
IkReal x219=(gclwh14_3*pp*x76);
IkReal x220=(x151*x75);
IkReal x221=((0.42)*gclwh10_2*x84);
IkReal x222=((0.84)*gclwh6_2*x80);
IkReal x223=(gclwh12_2*pz*x120);
IkReal x224=(x151*x71);
IkReal x225=(x133*x69);
IkReal x226=(x126*x91);
IkReal x227=(x123*x74);
IkReal x228=(x125*x74);
IkReal x229=((1.0)*gclwh10_8*x84);
IkReal x230=(x80*x82);
IkReal x231=(gclwh12_3*pp*x120);
IkReal x232=((0.42)*gclwh6_2*x75);
IkReal x233=(gclwh10_2*pz*x103);
IkReal x234=((1.0)*gclwh8_8*x117);
IkReal x235=((0.84)*gclwh10_2*x91);
IkReal x236=((0.84)*gclwh8_2*x69);
IkReal x237=(gclwh14_2*pz*x76);
IkReal x238=(x71*x85);
IkReal x239=((0.82)*pp*x86);
IkReal x240=(x75*x85);
IkReal x241=((0.84)*gclwh7_0*x80);
IkReal x242=((0.42)*gclwh11_0*x84);
IkReal x243=(gclwh5_0*x216);
IkReal x244=(x69*x70);
IkReal x245=((1.64)*gclwh7_9*x80);
IkReal x246=(x130*x67);
IkReal x247=(gclwh15_1*pp*x76);
IkReal x248=(x135*x67);
IkReal x249=(x129*x91);
IkReal x250=(x123*x98);
IkReal x251=((0.82)*gclwh11_9*x84);
IkReal x252=((0.8)*pz*x73);
IkReal x253=(x131*x92);
IkReal x254=((1.64)*gclwh11_9*x91);
IkReal x255=(x131*x95);
IkReal x256=((1.0)*gclwh9_11*x117);
IkReal x257=(gclwh15_0*pz*x76);
IkReal x258=((0.82)*gclwh7_9*x75);
IkReal x259=(x121*x80);
IkReal x260=((1.64)*gclwh9_9*x69);
IkReal x261=(gclwh11_0*pz*x103);
IkReal x262=((0.84)*gclwh11_0*x91);
IkReal x263=((0.42)*gclwh7_0*x75);
IkReal x264=((0.84)*gclwh9_0*x69);
IkReal x265=((1.0)*gclwh11_11*x84);
IkReal x266=(x125*x98);
IkReal x267=((0.00174496)*gclwh6_2*x80);
IkReal x268=(x74*x81);
IkReal x269=(x124*x81);
IkReal x270=((0.00087248)*gclwh6_2*x75);
IkReal x271=((0.00174496)*gclwh8_2*x69);
IkReal x272=((0.00174496)*gclwh10_2*x91);
IkReal x273=((0.00174496)*gclwh11_9*x91);
IkReal x274=((0.00087248)*gclwh7_9*x75);
IkReal x275=((0.00174496)*gclwh9_9*x69);
IkReal x276=(x128*x81);
IkReal x277=(x81*x86);
IkReal x278=((0.00174496)*gclwh7_9*x80);
IkReal x279=((0.00174496)*gclwh7_0*x80);
IkReal x280=((0.0007328832)*gclwh11_1*x84);
IkReal x281=(x145*x81);
IkReal x282=(x81*x98);
IkReal x283=((0.0014657664)*gclwh7_1*x80);
IkReal x284=((0.0007328832)*gclwh9_1*x117);
IkReal x285=((0.0014657664)*gclwh11_1*x91);
IkReal x286=((0.00174496)*gclwh11_0*x91);
IkReal x287=((0.00174496)*gclwh9_0*x69);
IkReal x288=((0.0014657664)*gclwh9_1*x69);
IkReal x289=((0.0007328832)*gclwh7_1*x75);
IkReal x290=((0.00087248)*gclwh7_0*x75);
IkReal x291=(gclwh10_2*npz*x217);
IkReal x292=(gclwh8_2*npx*x217);
IkReal x293=(gclwh10_2*x84*x90);
IkReal x294=(gclwh6_2*npy*x217);
IkReal x295=(pp*x74*x90);
IkReal x296=(gclwh9_0*npx*x217);
IkReal x297=(gclwh7_1*x137*x80);
IkReal x298=(gclwh11_0*npz*x217);
IkReal x299=(pp*x90*x98);
IkReal x300=(gclwh11_0*x84*x90);
IkReal x301=((1.0)*x67*x97);
IkReal x302=(gclwh11_1*x137*x91);
IkReal x303=(gclwh9_1*x137*x69);
IkReal x304=(gclwh7_0*npy*x217);
IkReal x305=(x187+x188);
IkReal x306=(x196+x189);
IkReal x307=(x197+x195+x194+x272+x270+x271);
IkReal x308=(x210+x212+x215+x290+x287+x286);
IkReal x309=(x204+x209+x208+x279+x282+x281);
IkReal x310=(x192+x191+x190+x267+x269+x268);
IkReal x311=(x203+x202+x201+x276+x277+x278);
IkReal x312=(x211+x213+x214+x289+x288+x285);
IkReal x313=((((0.1344)*x72))+((x117*x133))+((gclwh8_8*x141))+(((1.68)*gclwh8_12*x69))+((gclwh14_8*x134))+(((4.0)*gclwh6_8*x80))+((gclwh10_8*x142))+((x72*x79))+(((1.68)*gclwh10_12*x91))+((x126*x84)));
IkReal x314=((((1.68)*gclwh9_13*x69))+(((0.1344)*gclwh7_13*r21))+(((1.6)*x148))+((gclwh13_11*x109))+(((4.0)*gclwh11_11*x91))+(((4.0)*gclwh9_11*x69))+((x121*x75))+(((0.84)*gclwh7_13*x75))+(((1.68)*gclwh11_13*x91))+((gclwh7_11*x127)));
IkReal x315=((((0.1344)*x78))+(((0.1344)*x96))+((gclwh12_8*x109))+((x79*x96))+(((1.6)*x122))+((x78*x79))+(((1.68)*gclwh6_12*x80))+(((4.0)*gclwh10_8*x91))+((x75*x82))+((gclwh6_8*x127))+(((4.0)*gclwh8_8*x69)));
IkReal x316=((((1.68)*gclwh7_13*x80))+(((0.1344)*x94))+((x79*x94))+((gclwh15_11*x134))+((x117*x70))+(((0.1344)*x108))+(((4.0)*gclwh7_11*x80))+((gclwh9_11*x141))+((x129*x84))+((x108*x79))+((gclwh11_11*x142)));
IkReal x317=(x199+x198+x207+x206+x205+x200+x274+x275+x273+x284+x283+x280);
IkReal x318=(x157+x156+x155+x154+x153+x152+x159+x158+x218+x219+x221+x220+x223+x222+x225+x224+x227+x226+x291+x292);
IkReal x319=(x162+x163+x160+x161+x166+x167+x164+x165+x229+x228+x232+x233+x230+x231+x236+x237+x234+x235+x293+x294+x295);
IkReal x320=(x171+x170+x173+x172+x175+x174+x177+x176+x168+x169+x250+x251+x252+x238+x239+x298+x296+x297+x243+x242+x241+x240+x247+x246+x245+x244+x249+x248);
IkReal x321=(x179+x178+x184+x185+x186+x180+x181+x182+x183+x304+x302+x303+x300+x301+x258+x259+x254+x255+x256+x257+x253+x299+x265+x264+x266+x261+x260+x263+x262);
op[0]=0;
op[1]=(x318+(((-1.0)*x319))+(((0.01312)*x138))+(((-0.01312)*x104)));
op[2]=((-0.0007328832)+(((-1.0)*x81*x87))+((gclwh12_14*x101))+(((-1.0)*gclwh10_5*r22*x81))+(((-0.0001395968)*x87))+(((-1.0)*gclwh14_14*x68))+((gclwh4_14*x89))+(((-0.00174496)*gclwh6_5*x80))+((gclwh6_5*x102))+(((-1.0)*gclwh10_5*x93))+(((0.00174496)*gclwh10_5*x91))+(((0.00174496)*gclwh8_5*x69))+(((0.00087248)*gclwh6_5*x75)));
op[3]=0;
op[4]=((((-0.0001395968)*x78))+(((0.00174496)*gclwh8_12*x69))+((x72*x81))+x189+(((-1.0)*x78*x81))+(((0.00174496)*gclwh10_12*x91))+(((-0.00174496)*gclwh6_12*x80))+(((-1.0)*x305))+(((-1.0)*gclwh10_12*x93))+(((-1.0)*x81*x96))+(((0.0001395968)*x72)));
op[5]=((((0.0131206089770803)*x138))+x318+(((-0.0131206089770803)*x104))+(((-1.0)*x319)));
op[6]=((((0.01312)*x92))+(((0.01312)*x95))+(((-0.01312)*x146))+(((-1.0)*x321))+(((0.002624)*x97))+x320+(((-0.0328)*gclwh7_1*x80))+(((-0.1436)*gclwh7_1*x75))+(((0.1436)*gclwh11_1*x84))+(((0.0328)*gclwh9_1*x69))+(((0.1436)*gclwh9_1*x117))+(((0.0328)*gclwh11_1*x91))+(((-0.002624)*x130))+(((-0.002624)*x135)));
op[7]=0;
op[8]=0;
op[9]=((-0.0007328832)+(((-1.0)*gclwh9_7*x110))+((gclwh7_7*x102))+((x150*x80))+(((-1.0)*gclwh5_15*x89))+(((-1.0)*gclwh7_15*x102))+(((-0.00087248)*gclwh7_15*x75))+((x81*x83))+(((0.00087248)*gclwh7_7*x75))+(((-1.0)*gclwh11_7*r22*x81))+(((-1.0)*gclwh11_7*x93))+(((-0.00174496)*gclwh9_15*x69))+((gclwh11_15*x93))+(((0.00174496)*gclwh11_7*x91))+(((0.00174496)*gclwh9_7*x69))+((x119*x81))+(((-1.0)*x132*x91))+(((0.0001395968)*x83))+(((-1.0)*gclwh9_7*r20*x81))+((gclwh15_15*x68))+(((-0.00174496)*gclwh7_7*x80))+(((-1.0)*gclwh13_15*x101)));
op[10]=((((0.00262412179541606)*x97))+(((0.0328015224427008)*gclwh11_1*x91))+(((0.14359923877865)*gclwh11_1*x84))+(((0.0328015224427008)*gclwh9_1*x69))+(((-0.00262412179541606)*x130))+(((-0.00262412179541606)*x135))+(((-0.0131206089770803)*x146))+(((-1.0)*x321))+x320+(((0.0131206089770803)*x95))+(((0.0131206089770803)*x92))+(((0.14359923877865)*gclwh9_1*x117))+(((-0.14359923877865)*gclwh7_1*x75))+(((-0.0328015224427008)*gclwh7_1*x80)));
op[11]=(((gclwh7_13*x102))+(((-0.00174496)*gclwh7_13*x80))+(((0.00174496)*gclwh11_13*x91))+(((-0.0001395968)*x94))+x199+x198+(((0.00174496)*gclwh9_13*x69))+x200+x274+x275+x273+(((-1.0)*gclwh11_13*x93))+(((-1.0)*x311))+(((0.00087248)*gclwh7_13*x75))+(((-1.0)*x108*x81))+(((-1.0)*x81*x94)));
op[12]=0;
op[13]=((0.1764)+(((-1.0)*gclwh12_2*pp*pz*r21))+(((-2.0)*gclwh1_2*npx*(pz*pz)))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((0.42)*gclwh12_2*pp*r21))+(((-0.0672)*gclwh14_2*r20))+(((0.0672)*gclwh3_2*r21))+(((-0.02)*gclwh14_10*pp*r20))+(((-0.8)*gclwh8_2*pz*rxp0_2))+(((-0.8)*pz))+((gclwh12_3*r21*(pp*pp)))+(((0.8)*gclwh6_8*rxp1_2))+(((0.0672)*gclwh4_2*r22))+(((-0.0032)*gclwh14_10*r20))+(((-0.16)*gclwh4_8*r22))+((gclwh1_2*pp*pz*r20))+(((0.04)*gclwh14_10*npx*pz))+(((0.1764)*gclwh3_3*pp*r21))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.84)*gclwh12_2*npy*pz))+(((-0.002624)*gclwh1_3*r20))+(((-0.42)*gclwh14_2*pp*r20))+(((0.0032)*gclwh4_10*r22))+(((0.16)*gclwh14_8*r20))+(((2.0)*gclwh3_3*npy*pp*pz))+(((0.0672)*gclwh12_2*r21))+(((-1.0)*gclwh3_3*r21*(pp*pp)))+(((-1.0)*gclwh12_8*pp*r21))+((gclwh3_2*pp*pz*r21))+(((0.02)*gclwh12_10*pp*r21))+(((-0.04)*gclwh4_10*npz*pz))+(((2.0)*gclwh12_8*npy*pz))+((gclwh14_8*pp*r20))+(((-0.002624)*gclwh3_3*r21))+(((-2.0)*gclwh3_2*npy*(pz*pz)))+(((0.336)*gclwh10_2*rxp2_2))+(((-0.002624)*gclwh12_3*r21))+(((-0.04)*gclwh12_10*npy*pz))+(((0.002624)*gclwh14_3*r20))+(((0.336)*gclwh8_2*rxp0_2))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh14_8*npx*pz))+(((-0.8)*gclwh8_8*rxp0_2))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((-0.42)*gclwh1_2*pp*r20))+(((-0.16)*gclwh12_8*r21))+(((0.84)*gclwh14_2*npx*pz))+(((0.84)*gclwh1_2*npx*pz))+(((-0.84)*gclwh4_2*npz*pz))+(((-0.0328)*gclwh14_3*npx*pz))+(((0.1436)*gclwh12_3*pp*r21))+(((0.42)*gclwh4_2*pp*r22))+(((-0.16)*gclwh3_2*pz*r21))+(((2.0)*gclwh1_3*npx*pp*pz))+(((-0.0328)*gclwh3_3*npy*pz))+(((-0.0328)*gclwh1_3*npx*pz))+(((-1.0)*gclwh4_8*pp*r22))+(((-0.16)*gclwh1_2*pz*r20))+(((0.0032)*gclwh12_10*r21))+(((-0.42)*gclwh3_2*pp*r21))+(((0.1764)*gclwh1_3*pp*r20))+(((0.0328)*gclwh12_3*npy*pz))+(((-0.8)*gclwh10_8*rxp2_2))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((0.8)*gclwh6_2*pz*rxp1_2))+(((0.02)*gclwh4_10*pp*r22))+(((-0.16)*gclwh4_2*pz*r22))+(((-0.16)*gclwh12_2*pz*r21))+(((0.0672)*gclwh1_2*r20))+(((0.84)*gclwh3_2*npy*pz))+(((2.0)*gclwh4_8*npz*pz))+(((-0.1436)*gclwh14_3*pp*r20))+(((-0.8)*gclwh10_2*pz*rxp2_2))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((-0.336)*gclwh6_2*rxp1_2))+(((0.16)*gclwh14_2*pz*r20))+(((-1.0)*gclwh1_3*r20*(pp*pp))));
op[14]=((((0.0001395968)*x105))+(((-1.0)*gclwh12_14*x102))+(((-1.0)*gclwh8_5*x68))+(((0.00174496)*gclwh12_14*x80))+(((-1.0)*gclwh10_5*x89))+((gclwh6_5*x101))+(((-0.00174496)*gclwh14_14*x69))+(((-0.00087248)*gclwh12_14*x75))+(((-1.0)*gclwh4_14*r22*x81))+(((0.00174496)*gclwh4_14*x91))+(((-1.0)*gclwh4_14*x93))+((x105*x81)));
op[15]=0;
op[16]=((0.0007328832)+(((-0.00174496)*gclwh12_10*x80))+((gclwh6_12*x101))+(((0.00174496)*gclwh14_10*x69))+(((-0.0001395968)*x106))+((gclwh4_10*x93))+(((0.00087248)*gclwh12_10*x75))+((gclwh4_10*r22*x81))+((gclwh12_10*x102))+(((-0.00174496)*gclwh4_10*x91))+(((-1.0)*x106*x81))+(((-1.0)*gclwh8_12*x68))+(((-1.0)*gclwh10_12*x89)));
op[17]=((0.17639923877865)+(((-0.0328015224427008)*gclwh1_3*npx*pz))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((-2.0)*gclwh1_2*npx*(pz*pz)))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((0.42)*gclwh12_2*pp*r21))+(((-0.0672)*gclwh14_2*r20))+(((-0.00262412179541606)*gclwh3_3*r21))+(((0.0672)*gclwh3_2*r21))+(((-0.02)*gclwh14_10*pp*r20))+(((-0.0328015224427008)*gclwh14_3*npx*pz))+(((-0.8)*gclwh8_2*pz*rxp0_2))+(((-0.8)*pz))+(((0.00262412179541606)*gclwh14_3*r20))+((gclwh12_3*r21*(pp*pp)))+(((0.8)*gclwh6_8*rxp1_2))+(((0.0672)*gclwh4_2*r22))+(((-0.0032)*gclwh14_10*r20))+(((-0.16)*gclwh4_8*r22))+((gclwh1_2*pp*pz*r20))+(((0.04)*gclwh14_10*npx*pz))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.84)*gclwh12_2*npy*pz))+(((-0.0328015224427008)*gclwh3_3*npy*pz))+(((-0.42)*gclwh14_2*pp*r20))+(((0.0032)*gclwh4_10*r22))+(((0.16)*gclwh14_8*r20))+(((2.0)*gclwh3_3*npy*pp*pz))+(((0.0672)*gclwh12_2*r21))+(((-1.0)*gclwh3_3*r21*(pp*pp)))+(((-1.0)*gclwh12_8*pp*r21))+((gclwh3_2*pp*pz*r21))+(((0.02)*gclwh12_10*pp*r21))+(((-0.04)*gclwh4_10*npz*pz))+(((2.0)*gclwh12_8*npy*pz))+((gclwh14_8*pp*r20))+(((-2.0)*gclwh3_2*npy*(pz*pz)))+(((0.336)*gclwh10_2*rxp2_2))+(((0.0328015224427008)*gclwh12_3*npy*pz))+(((-0.04)*gclwh12_10*npy*pz))+(((0.14359923877865)*gclwh12_3*pp*r21))+(((0.336)*gclwh8_2*rxp0_2))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-2.0)*gclwh14_8*npx*pz))+(((-0.8)*gclwh8_8*rxp0_2))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((-0.42)*gclwh1_2*pp*r20))+(((-0.00262412179541606)*gclwh12_3*r21))+(((-0.16)*gclwh12_8*r21))+(((0.84)*gclwh14_2*npx*pz))+(((0.84)*gclwh1_2*npx*pz))+(((-0.84)*gclwh4_2*npz*pz))+(((0.42)*gclwh4_2*pp*r22))+(((-0.16)*gclwh3_2*pz*r21))+(((2.0)*gclwh1_3*npx*pp*pz))+(((0.17640076122135)*gclwh1_3*pp*r20))+(((0.17640076122135)*gclwh3_3*pp*r21))+(((-1.0)*gclwh4_8*pp*r22))+(((-0.16)*gclwh1_2*pz*r20))+(((0.0032)*gclwh12_10*r21))+(((-0.42)*gclwh3_2*pp*r21))+(((-0.14359923877865)*gclwh14_3*pp*r20))+(((-0.8)*gclwh10_8*rxp2_2))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((0.8)*gclwh6_2*pz*rxp1_2))+(((0.02)*gclwh4_10*pp*r22))+(((-0.16)*gclwh4_2*pz*r22))+(((-0.16)*gclwh12_2*pz*r21))+(((0.0672)*gclwh1_2*r20))+(((0.84)*gclwh3_2*npy*pz))+(((2.0)*gclwh4_8*npz*pz))+(((-0.00262412179541606)*gclwh1_3*r20))+(((-0.8)*gclwh10_2*pz*rxp2_2))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((-0.336)*gclwh6_2*rxp1_2))+(((0.16)*gclwh14_2*pz*r20))+(((-1.0)*gclwh1_3*r20*(pp*pp))));
op[18]=((0.1764)+(((-0.8)*gclwh11_11*rxp2_2))+(((0.42)*gclwh5_0*pp*r22))+((gclwh15_0*pp*pz*r20))+((gclwh13_1*r21*(pp*pp)))+(((-0.1764)*gclwh0_1*pp*r20))+(((-0.84)*gclwh13_0*npy*pz))+(((-0.656)*gclwh7_9*rxp1_2))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((-0.0328)*gclwh15_1*npx*pz))+(((0.42)*gclwh2_0*pp*r21))+(((0.82)*gclwh5_9*pp*r22))+(((0.1312)*gclwh13_9*r21))+(((0.82)*gclwh13_9*pp*r21))+(((0.1436)*gclwh13_1*pp*r21))+(((-0.8)*gclwh9_11*rxp0_2))+(((-0.16)*gclwh13_0*pz*r21))+(((0.8)*gclwh11_1*pp*rxp2_2))+(((-1.0)*gclwh13_11*pp*r21))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((0.42)*gclwh0_0*pp*r20))+(((0.16)*gclwh2_0*pz*r21))+(((-0.0672)*gclwh15_0*r20))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((0.656)*gclwh11_9*rxp2_2))+(((-0.8)*gclwh11_0*pz*rxp2_2))+(((0.84)*gclwh15_0*npx*pz))+(((0.16)*gclwh15_11*r20))+(((-0.002624)*gclwh13_1*r21))+(((-0.42)*gclwh15_0*pp*r20))+(((-0.84)*gclwh2_0*npy*pz))+(((-2.0)*gclwh15_11*npx*pz))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((0.8)*gclwh9_1*pp*rxp0_2))+(((0.1436)*gclwh5_1*pp*r22))+(((-0.16)*gclwh5_11*r22))+(((0.8)*gclwh7_11*rxp1_2))+(((0.0328)*gclwh2_1*npy*pz))+(((-0.8)*gclwh9_0*pz*rxp0_2))+(((0.8)*pz))+(((0.8)*gclwh7_0*pz*rxp1_2))+(((0.16)*gclwh15_0*pz*r20))+((gclwh15_11*pp*r20))+(((2.0)*gclwh5_11*npz*pz))+(((0.0328)*gclwh0_1*npx*pz))+(((-0.8)*gclwh7_1*pp*rxp1_2))+(((0.336)*gclwh11_0*rxp2_2))+(((-1.0)*gclwh5_11*pp*r22))+(((1.64)*gclwh15_9*npx*pz))+(((2.0)*gclwh13_11*npy*pz))+(((0.42)*gclwh13_0*pp*r21))+(((0.336)*gclwh9_0*rxp0_2))+(((0.002624)*gclwh15_1*r20))+(((-0.1764)*gclwh2_1*pp*r21))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((-0.84)*gclwh5_0*npz*pz))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-0.1436)*gclwh15_1*pp*r20))+(((-0.82)*gclwh15_9*pp*r20))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-1.64)*gclwh13_9*npy*pz))+(((-1.64)*gclwh5_9*npz*pz))+(((-1.0)*gclwh5_0*pp*pz*r22))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((-0.16)*gclwh13_11*r21))+(((0.01312)*gclwh7_1*rxp1_2))+(((0.0328)*gclwh13_1*npy*pz))+((gclwh2_1*r21*(pp*pp)))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((0.002624)*gclwh2_1*r21))+(((0.16)*gclwh0_0*pz*r20))+(((-0.0672)*gclwh0_0*r20))+(((-0.16)*gclwh5_0*pz*r22))+(((-0.01312)*gclwh9_1*rxp0_2))+(((-0.1312)*gclwh15_9*r20))+(((-0.01312)*gclwh11_1*rxp2_2))+(((0.656)*gclwh9_9*rxp0_2))+((gclwh5_1*r22*(pp*pp)))+(((-0.002624)*gclwh5_1*r22))+(((0.1312)*gclwh5_9*r22))+(((-0.0672)*gclwh2_0*r21))+(((-0.336)*gclwh7_0*rxp1_2))+(((0.0672)*gclwh13_0*r21))+(((0.0672)*gclwh5_0*r22))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((0.002624)*gclwh0_1*r20))+((gclwh0_1*r20*(pp*pp)))+(((0.0328)*gclwh5_1*npz*pz))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-0.84)*gclwh0_0*npx*pz)));
op[19]=0;
op[20]=0;
op[21]=(((gclwh13_15*x102))+((gclwh7_7*x101))+((gclwh5_15*r22*x81))+(((-1.0)*gclwh7_15*x101))+((gclwh11_15*x89))+(((-1.0)*gclwh9_7*x68))+(((-1.0)*gclwh11_7*x89))+(((-0.00174496)*gclwh13_15*x80))+(((-1.0)*gclwh15_15*r20*x81))+(((-1.0)*gclwh15_15*x110))+((gclwh9_15*x68))+(((0.00087248)*gclwh13_15*x75))+((gclwh5_15*x93))+(((-0.00174496)*gclwh5_15*x91))+(((0.00174496)*gclwh15_15*x69)));
op[22]=((0.17639923877865)+(((-0.8)*gclwh11_11*rxp2_2))+(((0.42)*gclwh5_0*pp*r22))+((gclwh15_0*pp*pz*r20))+(((0.14359923877865)*gclwh13_1*pp*r21))+((gclwh13_1*r21*(pp*pp)))+(((-0.84)*gclwh13_0*npy*pz))+(((-0.656)*gclwh7_9*rxp1_2))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((0.42)*gclwh2_0*pp*r21))+(((0.82)*gclwh5_9*pp*r22))+(((-0.17640076122135)*gclwh2_1*pp*r21))+(((0.1312)*gclwh13_9*r21))+(((0.82)*gclwh13_9*pp*r21))+(((-0.8)*gclwh9_11*rxp0_2))+(((-0.16)*gclwh13_0*pz*r21))+(((0.8)*gclwh11_1*pp*rxp2_2))+(((-1.0)*gclwh13_11*pp*r21))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((0.42)*gclwh0_0*pp*r20))+(((0.16)*gclwh2_0*pz*r21))+(((-0.0672)*gclwh15_0*r20))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((0.656)*gclwh11_9*rxp2_2))+(((-0.8)*gclwh11_0*pz*rxp2_2))+(((0.84)*gclwh15_0*npx*pz))+(((0.16)*gclwh15_11*r20))+(((0.0328015224427008)*gclwh13_1*npy*pz))+(((-0.42)*gclwh15_0*pp*r20))+(((-0.84)*gclwh2_0*npy*pz))+(((-2.0)*gclwh15_11*npx*pz))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((0.8)*gclwh9_1*pp*rxp0_2))+(((-0.16)*gclwh5_11*r22))+(((0.8)*gclwh7_11*rxp1_2))+(((-0.8)*gclwh9_0*pz*rxp0_2))+(((0.8)*pz))+(((0.00262412179541606)*gclwh2_1*r21))+(((0.8)*gclwh7_0*pz*rxp1_2))+(((0.16)*gclwh15_0*pz*r20))+((gclwh15_11*pp*r20))+(((2.0)*gclwh5_11*npz*pz))+(((-0.00262412179541606)*gclwh5_1*r22))+(((-0.0131206089770803)*gclwh11_1*rxp2_2))+(((-0.8)*gclwh7_1*pp*rxp1_2))+(((0.00262412179541606)*gclwh15_1*r20))+(((0.14359923877865)*gclwh5_1*pp*r22))+(((0.336)*gclwh11_0*rxp2_2))+(((-1.0)*gclwh5_11*pp*r22))+(((1.64)*gclwh15_9*npx*pz))+(((2.0)*gclwh13_11*npy*pz))+(((0.42)*gclwh13_0*pp*r21))+(((0.336)*gclwh9_0*rxp0_2))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((0.0328015224427008)*gclwh0_1*npx*pz))+(((-0.84)*gclwh5_0*npz*pz))+(((-0.00262412179541606)*gclwh13_1*r21))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((0.0328015224427008)*gclwh5_1*npz*pz))+(((-0.0131206089770803)*gclwh9_1*rxp0_2))+(((0.0131206089770803)*gclwh7_1*rxp1_2))+(((-0.82)*gclwh15_9*pp*r20))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-1.64)*gclwh13_9*npy*pz))+(((-1.64)*gclwh5_9*npz*pz))+(((0.0328015224427008)*gclwh2_1*npy*pz))+(((-1.0)*gclwh5_0*pp*pz*r22))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((-0.16)*gclwh13_11*r21))+(((0.00262412179541606)*gclwh0_1*r20))+((gclwh2_1*r21*(pp*pp)))+(((-0.17640076122135)*gclwh0_1*pp*r20))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((0.16)*gclwh0_0*pz*r20))+(((-0.0672)*gclwh0_0*r20))+(((-0.16)*gclwh5_0*pz*r22))+(((-0.1312)*gclwh15_9*r20))+(((0.656)*gclwh9_9*rxp0_2))+(((-0.14359923877865)*gclwh15_1*pp*r20))+((gclwh5_1*r22*(pp*pp)))+(((0.1312)*gclwh5_9*r22))+(((-0.0672)*gclwh2_0*r21))+(((-0.336)*gclwh7_0*rxp1_2))+(((0.0672)*gclwh13_0*r21))+(((0.0672)*gclwh5_0*r22))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((-0.0328015224427008)*gclwh15_1*npx*pz))+((gclwh0_1*r20*(pp*pp)))+(((2.0)*gclwh15_1*npx*pp*pz))+(((-0.84)*gclwh0_0*npx*pz)));
op[23]=((-0.0007328832)+((gclwh7_13*x101))+(((-1.0)*gclwh9_13*x68))+(((0.00174496)*gclwh5_9*x91))+(((-1.0)*gclwh11_13*x89))+(((-1.0)*gclwh13_9*x102))+((gclwh15_9*r20*x81))+(((-1.0)*gclwh5_9*x93))+(((-0.00174496)*gclwh15_9*x69))+(((-1.0)*gclwh5_9*r22*x81))+((gclwh7_9*x101))+(((0.00174496)*gclwh13_9*x80))+(((-1.0)*gclwh11_9*x89))+((gclwh15_9*x110))+(((-0.00087248)*gclwh13_9*x75))+(((-1.0)*gclwh9_9*x68)));
op[24]=(x313+(((-1.0)*x315)));
op[25]=(x193+x307+x305+(((-1.0)*x310))+(((-1.0)*x306)));
op[26]=((0.705601522442701)+(((8.0)*gclwh10_4*x91))+(((8.0)*gclwh8_4*x69))+(((-4.0)*gclwh10_4*x84))+(((-8.0)*gclwh6_4*x80))+((gclwh12_4*x112))+((gclwh14_14*x107))+(((4.0)*gclwh6_4*x75))+(((-1.0)*gclwh12_14*x100))+(((-0.64)*x118))+((gclwh6_4*x139))+(((-1.0)*x114*x118))+((gclwh4_4*x77))+(((-1.0)*gclwh10_4*x144))+(((-1.0)*gclwh14_4*x140))+(((-1.344)*x149)));
op[27]=((((0.001395968)*x149))+((gclwh12_14*x116))+(((-1.0)*gclwh14_14*x99)));
op[28]=(x315+(((-1.0)*x313)));
op[29]=(x193+x305+x310+(((-1.0)*x307))+(((-1.0)*x306)));
op[30]=(x308+x317+(((-1.0)*x312))+(((-1.0)*x311))+(((-1.0)*x309)));
op[31]=(x314+(((-1.0)*x316)));
op[32]=((((0.001395968)*x143))+(((-0.0002791936)*x83))+(((-0.0002791936)*x119))+((gclwh13_15*x116))+(((0.00348992)*gclwh11_15*x91))+(((-0.00348992)*gclwh7_15*x80))+((x150*x75))+(((-1.0)*gclwh15_15*x99))+(((-1.0)*x132*x84))+(((0.0002791936)*x115))+(((-0.00174496)*pp*x83))+(((0.00348992)*gclwh9_15*x69)));
op[33]=((0.705601522442701)+(((-4.0)*gclwh11_6*x84))+((gclwh13_15*x100))+(((1.344)*x143))+(((3.36)*gclwh11_15*x91))+(((1.68)*gclwh7_15*x75))+(((8.0)*gclwh11_6*x91))+(((0.2688)*x115))+(((3.36)*gclwh9_15*x69))+((gclwh7_6*x139))+(((-0.64)*x88))+(((-1.68)*gclwh11_15*x84))+(((-1.0)*gclwh15_6*x140))+(((-1.0)*gclwh11_6*x144))+((gclwh13_6*x112))+((gclwh5_6*x77))+(((4.0)*gclwh7_6*x75))+(((-1.0)*gclwh15_15*x107))+(((-0.2688)*x119))+(((-8.0)*gclwh7_6*x80))+(((-0.2688)*x83))+(((-3.36)*gclwh7_15*x80))+(((-1.68)*pp*x83))+(((-1.0)*x114*x88))+(((8.0)*gclwh9_6*x69)));
op[34]=(x309+x317+(((-1.0)*x312))+(((-1.0)*x311))+(((-1.0)*x308)));
op[35]=(x316+(((-1.0)*x314)));
IkReal x322=pz*pz;
IkReal x323=pp*pp;
IkReal x324=(npx*pz);
IkReal x325=(gclwh4_14*r22);
IkReal x326=((0.00174496)*pp);
IkReal x327=((0.16)*r21);
IkReal x328=((0.0001395968)*r21);
IkReal x329=(npy*pz);
IkReal x330=(gclwh8_2*r20);
IkReal x331=(pp*r21);
IkReal x332=((0.8)*rxp0_2);
IkReal x333=((3.2)*rxp2_2);
IkReal x334=(pp*r22);
IkReal x335=((0.000697984)*rxp2_2);
IkReal x336=(gclwh7_0*pz);
IkReal x337=(gclwh9_15*rxp0_2);
IkReal x338=(gclwh9_9*r20);
IkReal x339=(pp*r20);
IkReal x340=((1.0)*pz);
IkReal x341=((0.0001395968)*r20);
IkReal x342=((0.000697984)*rxp0_2);
IkReal x343=((1.6)*rxp0_2);
IkReal x344=((0.01312)*rxp1_2);
IkReal x345=(gclwh7_1*r21);
IkReal x346=((0.336)*rxp1_2);
IkReal x347=((0.000117261312)*r20);
IkReal x348=((0.000697984)*rxp1_2);
IkReal x349=((0.16)*r22);
IkReal x350=(gclwh11_0*pz);
IkReal x351=(npz*pz);
IkReal x352=(gclwh14_3*rxp0_2);
IkReal x353=((0.0001395968)*r22);
IkReal x354=((0.32)*r20);
IkReal x355=(gclwh9_0*r20);
IkReal x356=((0.64)*r22);
IkReal x357=((0.00087248)*pp);
IkReal x358=((0.64)*r20);
IkReal x359=((0.0672)*r21);
IkReal x360=(gclwh11_15*rxp2_2);
IkReal x361=((0.32)*r21);
IkReal x362=((0.672)*rxp1_2);
IkReal x363=((0.64)*r21);
IkReal x364=(gclwh5_1*rxp2_2);
IkReal x365=(gclwh12_14*r21);
IkReal x366=(gclwh5_15*r22);
IkReal x367=((3.2)*rxp0_2);
IkReal x368=(gclwh15_15*r20);
IkReal x369=(gclwh7_15*rxp1_2);
IkReal x370=((0.16)*pz);
IkReal x371=((0.000117261312)*r21);
IkReal x372=((1.6)*rxp2_2);
IkReal x373=((0.8)*rxp1_2);
IkReal x374=(gclwh9_1*r20);
IkReal x375=(gclwh11_1*r22);
IkReal x376=(gclwh14_14*r20);
IkReal x377=((0.336)*rxp2_2);
IkReal x378=((2.0)*pp);
IkReal x379=((0.672)*rxp2_2);
IkReal x380=(gclwh13_15*r21);
IkReal x381=((0.16)*r20);
IkReal x382=((1.6)*rxp1_2);
IkReal x383=((0.8)*rxp2_2);
IkReal x384=(gclwh15_1*rxp0_2);
IkReal x385=((0.0672)*r22);
IkReal x386=((0.0131206089770803)*rxp1_2);
IkReal x387=((3.2)*rxp1_2);
IkReal x388=((0.672)*rxp0_2);
IkReal x389=((0.336)*rxp0_2);
IkReal x390=((0.32)*r22);
IkReal x391=(gclwh6_2*pz);
IkReal x392=(gclwh10_12*x379);
IkReal x393=(gclwh14_8*x354);
IkReal x394=(gclwh8_12*x388);
IkReal x395=(gclwh6_8*x382);
IkReal x396=(gclwh8_8*x343);
IkReal x397=(gclwh4_8*x390);
IkReal x398=(gclwh10_8*x372);
IkReal x399=(gclwh12_8*x361);
IkReal x400=(gclwh6_12*x362);
IkReal x401=(gclwh10_2*x335);
IkReal x402=(gclwh12_2*x328);
IkReal x403=(gclwh12_3*x371);
IkReal x404=(gclwh4_2*x353);
IkReal x405=(gclwh3_3*x371);
IkReal x406=(gclwh14_10*x341);
IkReal x407=(gclwh1_3*x347);
IkReal x408=(gclwh8_2*x342);
IkReal x409=(gclwh1_2*x341);
IkReal x410=(gclwh3_2*x328);
IkReal x411=(gclwh12_10*x328);
IkReal x412=(gclwh4_10*x353);
IkReal x413=(gclwh14_3*x347);
IkReal x414=(gclwh6_2*x348);
IkReal x415=(gclwh14_2*x341);
IkReal x416=((0.000117261312)*gclwh5_1*r22);
IkReal x417=(gclwh7_9*x348);
IkReal x418=(gclwh13_0*x328);
IkReal x419=(gclwh11_0*x335);
IkReal x420=(gclwh15_9*x341);
IkReal x421=((0.00058630656)*gclwh9_1*rxp0_2);
IkReal x422=(gclwh5_0*x353);
IkReal x423=((0.00058630656)*gclwh11_1*rxp2_2);
IkReal x424=(gclwh13_1*x371);
IkReal x425=(gclwh9_0*x342);
IkReal x426=(gclwh0_0*x341);
IkReal x427=(gclwh7_0*x348);
IkReal x428=((0.00058630656)*gclwh7_1*rxp1_2);
IkReal x429=(gclwh0_1*x347);
IkReal x430=(gclwh2_0*x328);
IkReal x431=(gclwh11_9*x335);
IkReal x432=(gclwh15_1*x347);
IkReal x433=(gclwh15_0*x341);
IkReal x434=(gclwh9_9*x342);
IkReal x435=(gclwh5_9*x353);
IkReal x436=(gclwh13_9*x328);
IkReal x437=(gclwh2_1*x371);
IkReal x438=(gclwh9_11*x343);
IkReal x439=(gclwh5_11*x390);
IkReal x440=(gclwh9_13*x388);
IkReal x441=(gclwh13_11*x361);
IkReal x442=(gclwh11_13*x379);
IkReal x443=(gclwh11_11*x372);
IkReal x444=(gclwh7_11*x382);
IkReal x445=(gclwh15_11*x354);
IkReal x446=(gclwh7_13*x362);
IkReal x447=((0.016)*gclwh14_10*rxp0_2);
IkReal x448=(gclwh10_8*x334);
IkReal x449=(gclwh14_8*x332);
IkReal x450=(gclwh6_2*x359);
IkReal x451=(gclwh4_2*x377);
IkReal x452=(gclwh10_8*x349);
IkReal x453=(gclwh12_2*x346);
IkReal x454=(gclwh8_8*x339);
IkReal x455=(gclwh8_8*x381);
IkReal x456=(gclwh6_8*x327);
IkReal x457=((0.0672)*x330);
IkReal x458=(gclwh12_8*x373);
IkReal x459=(gclwh10_2*x385);
IkReal x460=((0.016)*gclwh4_10*rxp2_2);
IkReal x461=(gclwh4_8*x383);
IkReal x462=((0.016)*gclwh12_10*rxp1_2);
IkReal x463=(gclwh14_2*x389);
IkReal x464=((0.1312)*gclwh11_9*r22);
IkReal x465=((0.1312)*x338);
IkReal x466=(gclwh5_0*x377);
IkReal x467=(gclwh11_11*x334);
IkReal x468=(gclwh13_0*x346);
IkReal x469=((0.656)*gclwh15_9*rxp0_2);
IkReal x470=(gclwh9_11*x381);
IkReal x471=(gclwh7_0*x359);
IkReal x472=(gclwh9_11*x339);
IkReal x473=(gclwh11_11*x349);
IkReal x474=(gclwh15_11*x332);
IkReal x475=(gclwh15_0*x389);
IkReal x476=((0.0672)*x355);
IkReal x477=(gclwh5_11*x383);
IkReal x478=(gclwh13_11*x373);
IkReal x479=((0.656)*gclwh5_9*rxp2_2);
IkReal x480=((0.1312)*gclwh7_9*r21);
IkReal x481=((0.656)*gclwh13_9*rxp1_2);
IkReal x482=(gclwh7_11*x327);
IkReal x483=(gclwh11_0*x385);
IkReal x484=(pz*x383);
IkReal x485=((2.0)*x322);
IkReal x486=((4.0)*gclwh4_8*x351);
IkReal x487=((2.0)*gclwh14_8*x339);
IkReal x488=((4.0)*gclwh12_8*x329);
IkReal x489=((2.0)*gclwh4_8*x334);
IkReal x490=((2.0)*gclwh12_8*x331);
IkReal x491=((4.0)*gclwh14_8*x324);
IkReal x492=((0.00174496)*gclwh14_2*x324);
IkReal x493=((0.00174496)*gclwh4_10*x351);
IkReal x494=((0.0014657664)*gclwh14_3*x324);
IkReal x495=((0.00174496)*gclwh1_2*x324);
IkReal x496=((0.00174496)*gclwh3_2*x329);
IkReal x497=((0.0007328832)*gclwh12_3*x331);
IkReal x498=((0.00087248)*gclwh4_2*x334);
IkReal x499=((0.0014657664)*gclwh1_3*x324);
IkReal x500=((0.00087248)*gclwh14_10*x339);
IkReal x501=((0.00087248)*gclwh12_2*x331);
IkReal x502=((0.0014657664)*gclwh3_3*x329);
IkReal x503=((0.00174496)*gclwh12_10*x329);
IkReal x504=((0.00174496)*gclwh4_2*x351);
IkReal x505=((0.00174496)*gclwh12_2*x329);
IkReal x506=((0.0007328832)*gclwh1_3*x339);
IkReal x507=((0.00087248)*gclwh12_10*x331);
IkReal x508=((0.0007328832)*gclwh3_3*x331);
IkReal x509=((0.0007328832)*gclwh14_3*x339);
IkReal x510=((0.00087248)*gclwh1_2*x339);
IkReal x511=((0.00174496)*gclwh14_10*x324);
IkReal x512=((0.00087248)*gclwh3_2*x331);
IkReal x513=((0.0014657664)*gclwh12_3*x329);
IkReal x514=((0.00087248)*gclwh14_2*x339);
IkReal x515=((0.00087248)*gclwh4_10*x334);
IkReal x516=((0.00174496)*gclwh13_9*x329);
IkReal x517=((0.0007328832)*gclwh5_1*x334);
IkReal x518=((0.00087248)*gclwh2_0*x331);
IkReal x519=((0.0007328832)*gclwh2_1*x331);
IkReal x520=((0.00087248)*gclwh13_0*x331);
IkReal x521=((0.00087248)*gclwh15_9*x339);
IkReal x522=((0.00087248)*gclwh0_0*x339);
IkReal x523=((0.0014657664)*gclwh15_1*x324);
IkReal x524=((0.00087248)*gclwh5_0*x334);
IkReal x525=((0.00174496)*gclwh5_9*x351);
IkReal x526=((0.0007328832)*gclwh0_1*x339);
IkReal x527=((0.0007328832)*gclwh13_1*x331);
IkReal x528=((0.00174496)*gclwh15_0*x324);
IkReal x529=((0.00174496)*gclwh5_0*x351);
IkReal x530=((0.0014657664)*gclwh0_1*x324);
IkReal x531=((0.00174496)*gclwh13_0*x329);
IkReal x532=((0.00174496)*gclwh0_0*x324);
IkReal x533=((0.00087248)*gclwh13_9*x331);
IkReal x534=((0.0014657664)*gclwh2_1*x329);
IkReal x535=((0.0014657664)*gclwh5_1*x351);
IkReal x536=((0.0014657664)*gclwh13_1*x329);
IkReal x537=((0.00087248)*gclwh15_0*x339);
IkReal x538=((0.0007328832)*gclwh15_1*x339);
IkReal x539=((0.00174496)*gclwh2_0*x329);
IkReal x540=((0.00174496)*gclwh15_9*x324);
IkReal x541=((0.00087248)*gclwh5_9*x334);
IkReal x542=((2.0)*gclwh5_11*x334);
IkReal x543=((4.0)*gclwh15_11*x324);
IkReal x544=((2.0)*gclwh13_11*x331);
IkReal x545=((2.0)*gclwh15_11*x339);
IkReal x546=((4.0)*gclwh5_11*x351);
IkReal x547=((4.0)*gclwh13_11*x329);
IkReal x548=(gclwh4_2*x484);
IkReal x549=(gclwh14_3*pp*x332);
IkReal x550=(x331*x391);
IkReal x551=(gclwh12_2*pz*x373);
IkReal x552=(x327*x391);
IkReal x553=((2.0)*gclwh6_8*x329);
IkReal x554=((0.42)*gclwh6_2*x331);
IkReal x555=((0.84)*gclwh10_2*x351);
IkReal x556=((0.84)*gclwh8_2*x324);
IkReal x557=((1.0)*gclwh6_8*x331);
IkReal x558=((0.42)*gclwh10_2*x334);
IkReal x559=((0.84)*gclwh6_2*x329);
IkReal x560=(x330*x370);
IkReal x561=(gclwh12_3*pp*x373);
IkReal x562=((2.0)*gclwh8_8*x324);
IkReal x563=(gclwh10_2*pz*x349);
IkReal x564=((2.0)*gclwh10_8*x351);
IkReal x565=(gclwh14_2*pz*x332);
IkReal x566=((0.42)*pp*x330);
IkReal x567=(x327*x336);
IkReal x568=((0.82)*pp*x338);
IkReal x569=(x331*x336);
IkReal x570=(gclwh5_0*x484);
IkReal x571=((2.0)*gclwh7_11*x329);
IkReal x572=((1.64)*gclwh7_9*x329);
IkReal x573=(x323*x374);
IkReal x574=(gclwh15_1*pp*x332);
IkReal x575=((0.84)*npz*x350);
IkReal x576=(x323*x375);
IkReal x577=((0.42)*gclwh7_0*x331);
IkReal x578=((0.84)*gclwh9_0*x324);
IkReal x579=((0.82)*gclwh11_9*x334);
IkReal x580=(gclwh13_0*pz*x373);
IkReal x581=((0.8)*pp*x364);
IkReal x582=((1.64)*gclwh11_9*x351);
IkReal x583=((1.0)*gclwh7_11*x331);
IkReal x584=((0.84)*gclwh7_0*x329);
IkReal x585=(gclwh13_1*pp*x373);
IkReal x586=((0.42)*gclwh11_0*x334);
IkReal x587=(gclwh15_0*pz*x332);
IkReal x588=((0.82)*gclwh7_9*x331);
IkReal x589=((1.64)*gclwh9_9*x324);
IkReal x590=((2.0)*gclwh9_11*x324);
IkReal x591=(x349*x350);
IkReal x592=((2.0)*gclwh11_11*x351);
IkReal x593=(x355*x370);
IkReal x594=((0.42)*gclwh9_0*x339);
IkReal x595=(gclwh10_2*npz*x485);
IkReal x596=(gclwh8_2*npx*x485);
IkReal x597=(gclwh10_2*x334*x340);
IkReal x598=(gclwh6_2*npy*x485);
IkReal x599=(pp*x330*x340);
IkReal x600=(gclwh9_0*npx*x485);
IkReal x601=(gclwh7_1*x329*x378);
IkReal x602=(gclwh11_0*npz*x485);
IkReal x603=(gclwh9_0*x339*x340);
IkReal x604=(gclwh11_0*x334*x340);
IkReal x605=((1.0)*x323*x345);
IkReal x606=(gclwh11_1*x351*x378);
IkReal x607=(gclwh9_1*x324*x378);
IkReal x608=(gclwh7_0*npy*x485);
IkReal x609=(x493+x406+x500+x503);
IkReal x610=(x412+x411+x507+x515+x511);
IkReal x611=(x413+x508+x509+x506+x513);
IkReal x612=(x445+x444+x446+x545+x546+x547);
IkReal x613=(x431+x434+x435+x436+x540+x541+x533);
IkReal x614=(x395+x394+x393+x392+x488+x487+x486);
IkReal x615=(x499+x497+x494+x403+x405+x407+x502);
IkReal x616=(x414+x415+x504+x505+x514+x512+x510);
IkReal x617=(x397+x396+x399+x398+x489+x490+x491+x400);
IkReal x618=(x438+x439+x441+x440+x443+x442+x544+x542+x543);
IkReal x619=(x418+x419+x425+x422+x522+x520+x524+x528+x518);
IkReal x620=(x429+x428+x432+x437+x530+x535+x534+x536+x538);
IkReal x621=(x427+x426+x430+x433+x531+x532+x537+x539+x529);
IkReal x622=(x498+x492+x496+x495+x401+x402+x404+x409+x408+x410+x501);
IkReal x623=(x416+x417+x424+x423+x421+x420+x523+x521+x526+x527+x525+x519+x517+x516);
IkReal x624=(x449+x448+x447+x454+x455+x452+x453+x450+x451+x553+x552+x551+x550+x556+x555+x554+x548+x549+x596+x595);
IkReal x625=(x458+x459+x456+x457+x463+x462+x461+x460+x559+x558+x557+x566+x564+x565+x562+x563+x560+x561+x597+x599+x598);
IkReal x626=(x469+x468+x467+x466+x465+x464+x474+x470+x471+x472+x473+x579+x578+x575+x574+x577+x576+x571+x570+x573+x572+x568+x569+x567+x580+x602+x601+x600);
IkReal x627=(x481+x480+x483+x482+x475+x476+x477+x478+x479+x581+x582+x583+x584+x585+x586+x587+x588+x589+x594+x593+x592+x591+x590+x603+x607+x606+x605+x604+x608);
op[36]=((0.3528)+(((-1.0)*x614))+x617);
op[37]=((-0.0007328832)+(((-1.0)*x622))+(((-1.0)*x611))+(((-1.0)*x610))+x609+x615+x616);
op[38]=((((-0.2688)*x376))+(((0.2688)*x365))+(((-8.0)*gclwh14_4*x324))+(((3.36)*gclwh14_14*x324))+(((4.0)*gclwh14_4*x339))+(((-4.0)*gclwh12_4*x331))+(((-3.36)*gclwh4_14*x351))+(((0.2688)*x325))+(((8.0)*gclwh12_4*x329))+(((1.68)*pp*x325))+(((-1.0)*gclwh8_4*x367))+(((8.0)*gclwh4_4*x351))+(((-1.0)*gclwh4_4*x356))+(((-3.36)*gclwh12_14*x329))+(((-1.68)*gclwh14_14*x339))+(((-1.0)*gclwh10_4*x333))+(((1.68)*gclwh12_14*x331))+(((-4.0)*gclwh4_4*x334))+((gclwh6_4*x387))+((gclwh14_4*x358))+(((-1.0)*gclwh12_4*x363)));
op[39]=((((-0.0002791936)*x365))+(((-0.0002791936)*x325))+((x326*x376))+(((-1.0)*x325*x326))+(((0.00348992)*gclwh12_14*x329))+(((0.00348992)*gclwh4_14*x351))+(((0.0002791936)*x376))+(((-1.0)*x326*x365))+(((-0.00348992)*gclwh14_14*x324)));
op[40]=((-0.3528)+(((-1.0)*x617))+x614);
op[41]=((0.0007328832)+(((-1.0)*x611))+(((-1.0)*x610))+(((-1.0)*x616))+x609+x615+x622);
op[42]=((-0.0007328832)+(((-1.0)*x620))+(((-1.0)*x613))+(((-1.0)*x619))+x621+x623);
op[43]=((-0.3528)+(((-1.0)*x618))+x612);
op[44]=((((-0.0002791936)*x366))+(((0.00348992)*gclwh13_15*x329))+(((-0.001395968)*x337))+((x326*x368))+(((-1.0)*x326*x380))+(((-0.001395968)*x360))+(((0.0002791936)*x368))+(((0.00348992)*gclwh5_15*x351))+(((-0.0002791936)*x380))+(((-1.0)*x326*x366))+(((-0.00348992)*gclwh15_15*x324))+(((0.001395968)*x369)));
op[45]=((((-1.0)*gclwh11_6*x333))+(((3.36)*gclwh13_15*x329))+(((0.2688)*x368))+(((-0.2688)*x366))+(((-8.0)*gclwh15_6*x324))+(((-1.0)*gclwh9_6*x367))+(((-4.0)*gclwh5_6*x334))+(((-1.0)*gclwh5_6*x356))+(((1.68)*gclwh15_15*x339))+(((-0.2688)*x380))+((gclwh15_6*x358))+(((-1.344)*x360))+(((1.344)*x369))+(((8.0)*gclwh5_6*x351))+(((-4.0)*gclwh13_6*x331))+(((8.0)*gclwh13_6*x329))+(((-1.0)*gclwh13_6*x363))+(((-1.68)*gclwh13_15*x331))+(((4.0)*gclwh15_6*x339))+(((3.36)*gclwh5_15*x351))+(((-3.36)*gclwh15_15*x324))+((gclwh7_6*x387))+(((-1.344)*x337))+(((-1.68)*gclwh5_15*x334)));
op[46]=((0.0007328832)+(((-1.0)*x620))+(((-1.0)*x621))+(((-1.0)*x613))+x619+x623);
op[47]=((0.3528)+(((-1.0)*x612))+x618);
op[48]=(((gclwh14_10*x342))+(((-1.0)*gclwh12_10*x348))+(((0.00174496)*gclwh6_12*x329))+(((-0.00174496)*gclwh8_12*x324))+(((-0.00174496)*gclwh10_12*x351))+(((0.00087248)*gclwh10_12*x334))+(((-1.0)*gclwh6_12*x328))+((gclwh10_12*x353))+(((0.00087248)*gclwh8_12*x339))+(((-1.0)*gclwh4_10*x335))+((gclwh8_12*x341))+(((-0.00087248)*gclwh6_12*x331)));
op[49]=((((-1.0)*x625))+(((-0.0131206089770803)*x352))+((gclwh12_3*x386))+x624);
op[50]=((-0.0007328832)+(((-0.00087248)*gclwh6_5*x331))+(((0.00174496)*gclwh6_5*x329))+(((0.00087248)*gclwh10_5*x334))+((gclwh8_5*x341))+(((-1.0)*gclwh6_5*x328))+((gclwh4_14*x335))+((gclwh10_5*x353))+(((0.00087248)*gclwh8_5*x339))+((gclwh12_14*x348))+(((-1.0)*gclwh14_14*x342))+(((-0.00174496)*gclwh10_5*x351))+(((-0.00174496)*gclwh8_5*x324)));
op[51]=0;
op[52]=0;
op[53]=((((-1.0)*x625))+((gclwh12_3*x344))+x624+(((-0.01312)*x352)));
op[54]=((((-0.00262412179541606)*x375))+(((-0.00262412179541606)*x374))+(((0.00262412179541606)*x345))+(((-1.0)*x627))+(((-0.14359923877865)*gclwh7_1*x331))+(((0.0328015224427008)*gclwh11_1*x351))+(((0.0328015224427008)*gclwh9_1*x324))+(((-0.0131206089770803)*x384))+(((0.0131206089770803)*x364))+x626+(((0.14359923877865)*gclwh11_1*x334))+(((0.14359923877865)*gclwh9_1*x339))+((gclwh13_1*x386))+(((-0.0328015224427008)*gclwh7_1*x329)));
op[55]=((((0.00174496)*gclwh7_13*x329))+(((-0.0001395968)*x338))+((gclwh5_9*x335))+(((-1.0)*gclwh7_13*x328))+((gclwh9_13*x341))+(((-0.00087248)*gclwh7_13*x331))+(((0.00087248)*gclwh11_13*x334))+(((-1.0)*gclwh11_9*x353))+(((-1.0)*x338*x357))+(((-0.00174496)*gclwh9_13*x324))+(((0.00087248)*gclwh9_13*x339))+(((0.00087248)*gclwh7_9*x331))+((gclwh13_9*x348))+(((-1.0)*gclwh15_9*x342))+((gclwh11_13*x353))+(((-0.00174496)*gclwh7_9*x329))+(((-0.00087248)*gclwh11_9*x334))+(((0.00174496)*gclwh9_9*x324))+((gclwh7_9*x328))+(((-0.00174496)*gclwh11_13*x351))+(((0.00174496)*gclwh11_9*x351)));
op[56]=0;
op[57]=((-0.0007328832)+((gclwh15_15*x342))+(((-0.00087248)*gclwh7_15*x331))+(((0.00087248)*gclwh11_15*x334))+(((-0.00087248)*gclwh7_7*x331))+(((-1.0)*gclwh13_15*x348))+(((0.00087248)*gclwh9_7*x339))+(((-1.0)*gclwh7_7*x328))+(((-0.00174496)*gclwh9_15*x324))+((gclwh11_7*x353))+(((-1.0)*gclwh5_15*x335))+((gclwh11_15*x353))+(((-1.0)*gclwh7_15*x328))+(((0.00087248)*gclwh9_15*x339))+((gclwh9_7*x341))+(((0.00174496)*gclwh7_7*x329))+(((-0.00174496)*gclwh11_7*x351))+(((-0.00174496)*gclwh11_15*x351))+((gclwh9_15*x341))+(((0.00087248)*gclwh11_7*x334))+(((0.00174496)*gclwh7_15*x329))+(((-0.00174496)*gclwh9_7*x324)));
op[58]=((((0.1436)*gclwh9_1*x339))+((gclwh13_1*x344))+(((-0.0328)*gclwh7_1*x329))+(((-0.1436)*gclwh7_1*x331))+(((0.0328)*gclwh11_1*x351))+(((-1.0)*x627))+(((-0.002624)*x374))+(((-0.002624)*x375))+(((0.1436)*gclwh11_1*x334))+x626+(((-0.01312)*x384))+(((0.002624)*x345))+(((0.01312)*x364))+(((0.0328)*gclwh9_1*x324)));
op[59]=0;
op[60]=((-0.0007328832)+(((-1.0)*gclwh6_12*x348))+x610+(((-1.0)*x609))+((gclwh10_12*x335))+((gclwh8_12*x342)));
op[61]=((-0.17639923877865)+(((0.8)*gclwh8_8*rxp0_2))+(((-0.0328015224427008)*gclwh1_3*npx*pz))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((-2.0)*gclwh1_2*npx*(pz*pz)))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((0.42)*gclwh14_2*pp*r20))+(((0.84)*gclwh4_2*npz*pz))+(((-0.16)*gclwh14_8*r20))+(((-0.00262412179541606)*gclwh3_3*r21))+(((-0.02)*gclwh14_10*pp*r20))+(((-0.0672)*gclwh12_2*r21))+(((-0.0328015224427008)*gclwh14_3*npx*pz))+(((0.42)*gclwh1_2*pp*r20))+(((-0.8)*gclwh8_2*pz*rxp0_2))+(((-0.8)*pz))+(((-0.0672)*gclwh1_2*r20))+(((0.00262412179541606)*gclwh14_3*r20))+(((0.42)*gclwh3_2*pp*r21))+((gclwh12_3*r21*(pp*pp)))+(((-0.0032)*gclwh14_10*r20))+(((0.8)*gclwh10_8*rxp2_2))+(((-2.0)*gclwh4_8*npz*pz))+(((-1.0)*gclwh14_8*pp*r20))+((gclwh1_2*pp*pz*r20))+(((0.04)*gclwh14_10*npx*pz))+(((-0.42)*gclwh12_2*pp*r21))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.8)*gclwh6_8*rxp1_2))+(((-0.0328015224427008)*gclwh3_3*npy*pz))+(((-0.0672)*gclwh3_2*r21))+(((0.0032)*gclwh4_10*r22))+(((2.0)*gclwh3_3*npy*pp*pz))+(((0.0672)*gclwh14_2*r20))+(((0.16)*gclwh12_8*r21))+(((-1.0)*gclwh3_3*r21*(pp*pp)))+(((-0.42)*gclwh4_2*pp*r22))+(((0.16)*gclwh4_8*r22))+((gclwh3_2*pp*pz*r21))+(((-0.0672)*gclwh4_2*r22))+(((0.02)*gclwh12_10*pp*r21))+(((-0.04)*gclwh4_10*npz*pz))+(((-0.84)*gclwh1_2*npx*pz))+(((-2.0)*gclwh12_8*npy*pz))+(((-2.0)*gclwh3_2*npy*(pz*pz)))+(((0.0328015224427008)*gclwh12_3*npy*pz))+(((-0.04)*gclwh12_10*npy*pz))+(((0.336)*gclwh6_2*rxp1_2))+(((0.14359923877865)*gclwh12_3*pp*r21))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-0.84)*gclwh14_2*npx*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((-0.336)*gclwh10_2*rxp2_2))+((gclwh12_8*pp*r21))+(((-0.00262412179541606)*gclwh12_3*r21))+(((-0.16)*gclwh3_2*pz*r21))+(((2.0)*gclwh1_3*npx*pp*pz))+(((0.17640076122135)*gclwh1_3*pp*r20))+(((0.17640076122135)*gclwh3_3*pp*r21))+(((-0.16)*gclwh1_2*pz*r20))+(((0.0032)*gclwh12_10*r21))+(((2.0)*gclwh14_8*npx*pz))+(((0.84)*gclwh12_2*npy*pz))+(((-0.14359923877865)*gclwh14_3*pp*r20))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((0.8)*gclwh6_2*pz*rxp1_2))+(((0.02)*gclwh4_10*pp*r22))+(((-0.16)*gclwh4_2*pz*r22))+(((-0.16)*gclwh12_2*pz*r21))+(((-0.336)*gclwh8_2*rxp0_2))+(((-0.84)*gclwh3_2*npy*pz))+(((-0.00262412179541606)*gclwh1_3*r20))+((gclwh4_8*pp*r22))+(((-0.8)*gclwh10_2*pz*rxp2_2))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((0.16)*gclwh14_2*pz*r20))+(((-1.0)*gclwh1_3*r20*(pp*pp))));
op[62]=((((-0.00087248)*gclwh12_14*x331))+(((-1.0)*gclwh12_14*x328))+(((-0.0001395968)*x325))+(((-0.00174496)*gclwh14_14*x324))+((gclwh8_5*x342))+(((-1.0)*x325*x357))+((gclwh14_14*x341))+(((0.00174496)*gclwh12_14*x329))+(((0.00174496)*gclwh4_14*x351))+((gclwh10_5*x335))+(((-1.0)*gclwh6_5*x348))+(((0.00087248)*gclwh14_14*x339)));
op[63]=0;
op[64]=0;
op[65]=((-0.1764)+(((0.8)*gclwh8_8*rxp0_2))+(((-1.0)*gclwh12_2*pp*pz*r21))+(((-2.0)*gclwh1_2*npx*(pz*pz)))+(((2.0)*gclwh12_2*npy*(pz*pz)))+((gclwh14_2*pp*pz*r20))+(((0.42)*gclwh14_2*pp*r20))+(((0.84)*gclwh4_2*npz*pz))+(((-0.16)*gclwh14_8*r20))+(((-0.02)*gclwh14_10*pp*r20))+(((-0.0672)*gclwh12_2*r21))+(((0.42)*gclwh1_2*pp*r20))+(((-0.8)*gclwh8_2*pz*rxp0_2))+(((-0.8)*pz))+(((-0.0672)*gclwh1_2*r20))+(((0.42)*gclwh3_2*pp*r21))+((gclwh12_3*r21*(pp*pp)))+(((-0.0032)*gclwh14_10*r20))+(((0.8)*gclwh10_8*rxp2_2))+(((-2.0)*gclwh4_8*npz*pz))+(((-1.0)*gclwh14_8*pp*r20))+((gclwh1_2*pp*pz*r20))+(((0.04)*gclwh14_10*npx*pz))+(((-0.42)*gclwh12_2*pp*r21))+(((0.1764)*gclwh3_3*pp*r21))+(((-2.0)*gclwh14_2*npx*(pz*pz)))+(((-0.8)*gclwh6_8*rxp1_2))+(((-0.002624)*gclwh1_3*r20))+(((-0.0672)*gclwh3_2*r21))+(((0.0032)*gclwh4_10*r22))+(((2.0)*gclwh3_3*npy*pp*pz))+(((0.0672)*gclwh14_2*r20))+(((0.16)*gclwh12_8*r21))+(((-1.0)*gclwh3_3*r21*(pp*pp)))+(((-0.42)*gclwh4_2*pp*r22))+(((0.16)*gclwh4_8*r22))+((gclwh3_2*pp*pz*r21))+(((-0.0672)*gclwh4_2*r22))+(((0.02)*gclwh12_10*pp*r21))+(((-0.04)*gclwh4_10*npz*pz))+(((-0.84)*gclwh1_2*npx*pz))+(((-2.0)*gclwh12_8*npy*pz))+(((-0.002624)*gclwh3_3*r21))+(((-2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.002624)*gclwh12_3*r21))+(((-0.04)*gclwh12_10*npy*pz))+(((0.336)*gclwh6_2*rxp1_2))+(((0.002624)*gclwh14_3*r20))+(((2.0)*gclwh14_3*npx*pp*pz))+(((-0.84)*gclwh14_2*npx*pz))+(((-2.0)*gclwh12_3*npy*pp*pz))+(((-0.336)*gclwh10_2*rxp2_2))+((gclwh12_8*pp*r21))+(((-0.0328)*gclwh14_3*npx*pz))+(((0.1436)*gclwh12_3*pp*r21))+(((-0.16)*gclwh3_2*pz*r21))+(((2.0)*gclwh1_3*npx*pp*pz))+(((-0.0328)*gclwh3_3*npy*pz))+(((-0.0328)*gclwh1_3*npx*pz))+(((-0.16)*gclwh1_2*pz*r20))+(((0.0032)*gclwh12_10*r21))+(((2.0)*gclwh14_8*npx*pz))+(((0.84)*gclwh12_2*npy*pz))+(((0.1764)*gclwh1_3*pp*r20))+(((0.0328)*gclwh12_3*npy*pz))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-1.0)*gclwh14_3*r20*(pp*pp)))+(((0.8)*gclwh6_2*pz*rxp1_2))+(((0.02)*gclwh4_10*pp*r22))+(((-0.16)*gclwh4_2*pz*r22))+(((-0.16)*gclwh12_2*pz*r21))+(((-0.1436)*gclwh14_3*pp*r20))+(((-0.336)*gclwh8_2*rxp0_2))+(((-0.84)*gclwh3_2*npy*pz))+((gclwh4_8*pp*r22))+(((-0.8)*gclwh10_2*pz*rxp2_2))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((0.16)*gclwh14_2*pz*r20))+(((-1.0)*gclwh1_3*r20*(pp*pp))));
op[66]=((-0.17639923877865)+((gclwh15_0*pp*pz*r20))+(((2.0)*gclwh15_11*npx*pz))+(((0.14359923877865)*gclwh13_1*pp*r21))+((gclwh13_1*r21*(pp*pp)))+(((-0.656)*gclwh7_9*rxp1_2))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((0.82)*gclwh5_9*pp*r22))+(((-0.17640076122135)*gclwh2_1*pp*r21))+(((0.1312)*gclwh13_9*r21))+(((-0.42)*gclwh13_0*pp*r21))+(((0.0672)*gclwh0_0*r20))+(((0.82)*gclwh13_9*pp*r21))+(((-0.84)*gclwh15_0*npx*pz))+(((-0.42)*gclwh2_0*pp*r21))+(((-0.16)*gclwh13_0*pz*r21))+(((0.8)*gclwh11_1*pp*rxp2_2))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((-0.8)*gclwh7_11*rxp1_2))+(((0.16)*gclwh2_0*pz*r21))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((-2.0)*gclwh13_11*npy*pz))+(((0.656)*gclwh11_9*rxp2_2))+(((0.8)*gclwh9_11*rxp0_2))+(((-0.8)*gclwh11_0*pz*rxp2_2))+(((0.0328015224427008)*gclwh13_1*npy*pz))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((-0.0672)*gclwh13_0*r21))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((0.8)*gclwh9_1*pp*rxp0_2))+(((0.336)*gclwh7_0*rxp1_2))+(((-0.8)*gclwh9_0*pz*rxp0_2))+(((0.8)*pz))+(((0.00262412179541606)*gclwh2_1*r21))+(((-0.336)*gclwh9_0*rxp0_2))+(((0.8)*gclwh7_0*pz*rxp1_2))+(((0.16)*gclwh15_0*pz*r20))+(((-0.0672)*gclwh5_0*r22))+(((0.16)*gclwh13_11*r21))+(((-0.00262412179541606)*gclwh5_1*r22))+(((-0.0131206089770803)*gclwh11_1*rxp2_2))+(((-0.8)*gclwh7_1*pp*rxp1_2))+(((0.00262412179541606)*gclwh15_1*r20))+(((0.14359923877865)*gclwh5_1*pp*r22))+(((1.64)*gclwh15_9*npx*pz))+(((0.0672)*gclwh2_0*r21))+(((0.8)*gclwh11_11*rxp2_2))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((-0.336)*gclwh11_0*rxp2_2))+(((0.0672)*gclwh15_0*r20))+(((-0.16)*gclwh15_11*r20))+(((0.0328015224427008)*gclwh0_1*npx*pz))+(((-0.00262412179541606)*gclwh13_1*r21))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-2.0)*gclwh5_11*npz*pz))+(((0.0328015224427008)*gclwh5_1*npz*pz))+(((-0.0131206089770803)*gclwh9_1*rxp0_2))+(((0.0131206089770803)*gclwh7_1*rxp1_2))+(((-0.82)*gclwh15_9*pp*r20))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-1.64)*gclwh13_9*npy*pz))+(((-1.64)*gclwh5_9*npz*pz))+(((0.0328015224427008)*gclwh2_1*npy*pz))+(((-1.0)*gclwh5_0*pp*pz*r22))+((gclwh5_11*pp*r22))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((0.00262412179541606)*gclwh0_1*r20))+((gclwh2_1*r21*(pp*pp)))+(((-0.17640076122135)*gclwh0_1*pp*r20))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((-0.42)*gclwh5_0*pp*r22))+(((0.16)*gclwh0_0*pz*r20))+(((0.84)*gclwh5_0*npz*pz))+(((0.84)*gclwh2_0*npy*pz))+((gclwh13_11*pp*r21))+(((-0.16)*gclwh5_0*pz*r22))+(((-0.1312)*gclwh15_9*r20))+(((-1.0)*gclwh15_11*pp*r20))+(((-0.42)*gclwh0_0*pp*r20))+(((0.656)*gclwh9_9*rxp0_2))+(((0.84)*gclwh0_0*npx*pz))+(((-0.14359923877865)*gclwh15_1*pp*r20))+((gclwh5_1*r22*(pp*pp)))+(((0.1312)*gclwh5_9*r22))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((0.42)*gclwh15_0*pp*r20))+(((-0.0328015224427008)*gclwh15_1*npx*pz))+((gclwh0_1*r20*(pp*pp)))+(((0.16)*gclwh5_11*r22))+(((2.0)*gclwh15_1*npx*pp*pz))+(((0.84)*gclwh13_0*npy*pz)));
op[67]=((0.0007328832)+(((-1.0)*gclwh7_13*x348))+((gclwh9_13*x342))+x417+x420+x521+x525+x516+(((-1.0)*x613))+((gclwh11_13*x335)));
op[68]=0;
op[69]=((((-0.00087248)*gclwh15_15*x339))+((gclwh11_15*x335))+(((0.00174496)*gclwh15_15*x324))+((gclwh11_7*x335))+(((-1.0)*gclwh15_15*x341))+(((-0.00174496)*gclwh13_15*x329))+((gclwh13_15*x328))+(((-0.00174496)*gclwh5_15*x351))+(((-1.0)*gclwh7_7*x348))+((gclwh9_7*x342))+(((0.00087248)*gclwh13_15*x331))+(((-1.0)*gclwh7_15*x348))+((gclwh5_15*x353))+(((0.00087248)*gclwh5_15*x334))+(((0.000697984)*x337)));
op[70]=((-0.1764)+((gclwh15_0*pp*pz*r20))+(((2.0)*gclwh15_11*npx*pz))+((gclwh13_1*r21*(pp*pp)))+(((-0.1764)*gclwh0_1*pp*r20))+(((-0.656)*gclwh7_9*rxp1_2))+(((-2.0)*gclwh5_1*npz*pp*pz))+(((-0.0328)*gclwh15_1*npx*pz))+(((0.82)*gclwh5_9*pp*r22))+(((0.1312)*gclwh13_9*r21))+(((-0.42)*gclwh13_0*pp*r21))+(((0.0672)*gclwh0_0*r20))+(((0.82)*gclwh13_9*pp*r21))+(((0.1436)*gclwh13_1*pp*r21))+(((-0.84)*gclwh15_0*npx*pz))+(((-0.42)*gclwh2_0*pp*r21))+(((-0.16)*gclwh13_0*pz*r21))+(((0.8)*gclwh11_1*pp*rxp2_2))+(((2.0)*gclwh5_0*npz*(pz*pz)))+(((-0.8)*gclwh7_11*rxp1_2))+(((0.16)*gclwh2_0*pz*r21))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((-2.0)*gclwh13_11*npy*pz))+(((0.656)*gclwh11_9*rxp2_2))+(((0.8)*gclwh9_11*rxp0_2))+(((-0.8)*gclwh11_0*pz*rxp2_2))+(((-0.002624)*gclwh13_1*r21))+(((2.0)*gclwh13_0*npy*(pz*pz)))+(((-0.0672)*gclwh13_0*r21))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((0.8)*gclwh9_1*pp*rxp0_2))+(((0.1436)*gclwh5_1*pp*r22))+(((0.0328)*gclwh2_1*npy*pz))+(((0.336)*gclwh7_0*rxp1_2))+(((-0.8)*gclwh9_0*pz*rxp0_2))+(((0.8)*pz))+(((-0.336)*gclwh9_0*rxp0_2))+(((0.8)*gclwh7_0*pz*rxp1_2))+(((0.16)*gclwh15_0*pz*r20))+(((-0.0672)*gclwh5_0*r22))+(((0.16)*gclwh13_11*r21))+(((0.0328)*gclwh0_1*npx*pz))+(((-0.8)*gclwh7_1*pp*rxp1_2))+(((1.64)*gclwh15_9*npx*pz))+(((0.0672)*gclwh2_0*r21))+(((0.002624)*gclwh15_1*r20))+(((0.8)*gclwh11_11*rxp2_2))+(((-0.1764)*gclwh2_1*pp*r21))+(((-2.0)*gclwh15_0*npx*(pz*pz)))+(((-0.336)*gclwh11_0*rxp2_2))+(((0.0672)*gclwh15_0*r20))+(((-0.16)*gclwh15_11*r20))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-2.0)*gclwh5_11*npz*pz))+(((-0.1436)*gclwh15_1*pp*r20))+(((-0.82)*gclwh15_9*pp*r20))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-1.64)*gclwh13_9*npy*pz))+(((-1.64)*gclwh5_9*npz*pz))+(((-1.0)*gclwh5_0*pp*pz*r22))+((gclwh5_11*pp*r22))+(((-1.0)*gclwh13_0*pp*pz*r21))+(((0.01312)*gclwh7_1*rxp1_2))+(((0.0328)*gclwh13_1*npy*pz))+((gclwh2_1*r21*(pp*pp)))+(((-2.0)*gclwh13_1*npy*pp*pz))+(((0.002624)*gclwh2_1*r21))+(((-0.42)*gclwh5_0*pp*r22))+(((0.16)*gclwh0_0*pz*r20))+(((0.84)*gclwh5_0*npz*pz))+(((0.84)*gclwh2_0*npy*pz))+((gclwh13_11*pp*r21))+(((-0.16)*gclwh5_0*pz*r22))+(((-0.01312)*gclwh9_1*rxp0_2))+(((-0.1312)*gclwh15_9*r20))+(((-1.0)*gclwh15_11*pp*r20))+(((-0.01312)*gclwh11_1*rxp2_2))+(((-0.42)*gclwh0_0*pp*r20))+(((0.656)*gclwh9_9*rxp0_2))+(((0.84)*gclwh0_0*npx*pz))+((gclwh5_1*r22*(pp*pp)))+(((-0.002624)*gclwh5_1*r22))+(((0.1312)*gclwh5_9*r22))+(((-1.0)*gclwh15_1*r20*(pp*pp)))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((0.42)*gclwh15_0*pp*r20))+(((0.002624)*gclwh0_1*r20))+((gclwh0_1*r20*(pp*pp)))+(((0.16)*gclwh5_11*r22))+(((0.0328)*gclwh5_1*npz*pz))+(((2.0)*gclwh15_1*npx*pp*pz))+(((0.84)*gclwh13_0*npy*pz)));
op[71]=0;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x628=htj1*htj1;
CheckValue<IkReal> x629=IKPowWithIntegerCheck(((1.0)+x628),-1);
if(!x629.valid){
continue;
}
cj1array[numsolutions]=((x629.value)*(((1.0)+(((-1.0)*x628)))));
CheckValue<IkReal> x630=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x630.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x630.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x631=htj2*htj2;
CheckValue<IkReal> x632=IKPowWithIntegerCheck(((1.0)+x631),-1);
if(!x632.valid){
continue;
}
cj2array[numsolutions]=((x632.value)*(((1.0)+(((-1.0)*x631)))));
CheckValue<IkReal> x633=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x633.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x633.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x634=htj3*htj3;
CheckValue<IkReal> x635=IKPowWithIntegerCheck(((1.0)+x634),-1);
if(!x635.valid){
continue;
}
cj3array[numsolutions]=((x635.value)*(((1.0)+(((-1.0)*x634)))));
CheckValue<IkReal> x636=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x636.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x636.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((1.0)+(((-1.0)*(r22*r22))));
j5eval[1]=((r20*r20)+(r21*r21));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x637=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x637);
rxp1_0=(pz*r11);
rxp1_1=(r01*x637);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x638=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x638);
rxp1_0=(pz*r11);
rxp1_1=(r01*x638);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x641=IKPowWithIntegerCheck(r22,-1);
if(!x641.valid){
continue;
}
IkReal x639=x641.value;
IkReal x640=(sj1*x639);
CheckValue<IkReal> x642=IKPowWithIntegerCheck(cj3,-1);
if(!x642.valid){
continue;
}
if( IKabs((cj2*x640*(x642.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj2*x640)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj2*x640*(x642.value)))+IKsqr((sj2*x640))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj2*x640*(x642.value)), (sj2*x640));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x643=IKsin(j4);
IkReal x644=((1.0)*sj1);
IkReal x645=(r22*x643);
evalcond[0]=(cj1+((sj3*x645)));
evalcond[1]=((((-1.0)*sj2*x644))+((r22*(IKcos(j4)))));
evalcond[2]=((((-1.0)*cj2*x644))+((cj3*x645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x646=cj1*cj1;
IkReal x647=sj2*sj2;
IkReal x648=cj2*cj2;
IkReal x649=((4.0)*sj3);
IkReal x650=(cj1*sj2);
IkReal x651=((8.0)*cj3);
IkReal x652=(r02*sj4);
IkReal x653=((16.0)*r01);
IkReal x654=(sj1*sj4);
IkReal x655=(cj4*sj1);
IkReal x656=(cj2*r12);
IkReal x657=((16.0)*cj3);
IkReal x658=((4.0)*x654);
IkReal x659=(sj3*x648);
IkReal x660=(r00*x648);
IkReal x661=((8.0)*cj4*r01);
IkReal x662=((4.0)*cj3*r01);
IkReal x663=(cj2*r11*x654);
IkReal x664=(x646*x647);
IkReal x665=(x648*x662);
IkReal x666=(cj2*r10*x658);
IkReal x667=((12.0)*x655*x656);
IkReal x668=((4.0)*x655*x656);
IkReal x669=(r00*x664);
IkReal x670=(cj4*x649*x660);
IkReal x671=(r00*x650*x658);
IkReal x672=((12.0)*r02*x650*x655);
IkReal x673=((12.0)*x652*x659);
IkReal x674=((4.0)*r02*x650*x655);
IkReal x675=(x648*x649*x652);
IkReal x676=(x662*x664);
IkReal x677=(cj4*x649*x669);
IkReal x678=((12.0)*sj3*x652*x664);
IkReal x679=(x649*x652*x664);
IkReal x680=(x665+x666+x676);
IkReal x681=(x668+x679+x675);
IkReal x682=(x667+x678+x673);
IkReal x683=(x670+x671+x677);
IkReal x684=((((8.0)*x663))+(((-1.0)*x659*x661))+(((-1.0)*sj3*x661*x664))+(((-8.0)*r01*x650*x654))+(((-1.0)*x651*x660))+(((-1.0)*x651*x669)));
op[0]=((((-1.0)*x681))+(((-1.0)*x683))+x674+x680);
op[1]=x684;
op[2]=((((-1.0)*x682))+(((-1.0)*x683))+x672+x680);
op[3]=((((-1.0)*cj4*x653*x659))+(((16.0)*x663))+(((-1.0)*cj4*sj3*x653*x664))+(((-1.0)*x657*x660))+(((-1.0)*x657*x669))+(((-1.0)*x650*x653*x654)));
op[4]=((((-1.0)*x680))+(((-1.0)*x682))+x672+x683);
op[5]=x684;
op[6]=((((-1.0)*x680))+(((-1.0)*x681))+x674+x683);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5)*(((((4.0)*cj3*r11*(cj2*cj2)))+(((-4.0)*cj4*r10*sj3*(cj2*cj2)))+(((-4.0)*cj2*r00*sj1*sj4))+(((12.0)*cj1*cj4*r12*sj1*sj2))+(((12.0)*cj2*cj4*r02*sj1))+(((-4.0)*cj1*r10*sj1*sj2*sj4))+(((4.0)*cj3*r11*(cj1*cj1)*(sj2*sj2)))+(((-4.0)*cj4*r10*sj3*(cj1*cj1)*(sj2*sj2)))+(((-12.0)*r12*sj3*sj4*(cj1*cj1)*(sj2*sj2)))+(((-12.0)*r12*sj3*sj4*(cj2*cj2)))))))+(((4.0)*cj4*r10*sj3*(cj1*cj1)*(sj2*sj2)))+(((htj5*htj5)*(((((4.0)*cj4*r10*sj3*(cj1*cj1)*(sj2*sj2)))+(((12.0)*cj1*cj4*r12*sj1*sj2))+(((12.0)*cj2*cj4*r02*sj1))+(((-4.0)*cj3*r11*(cj2*cj2)))+(((-4.0)*cj3*r11*(cj1*cj1)*(sj2*sj2)))+(((4.0)*cj1*r10*sj1*sj2*sj4))+(((4.0)*cj2*r00*sj1*sj4))+(((-12.0)*r12*sj3*sj4*(cj1*cj1)*(sj2*sj2)))+(((-12.0)*r12*sj3*sj4*(cj2*cj2)))+(((4.0)*cj4*r10*sj3*(cj2*cj2)))))))+((htj5*(((((-8.0)*cj2*r01*sj1*sj4))+(((-8.0)*cj4*r11*sj3*(cj1*cj1)*(sj2*sj2)))+(((-8.0)*cj4*r11*sj3*(cj2*cj2)))+(((-8.0)*cj3*r10*(cj1*cj1)*(sj2*sj2)))+(((-8.0)*cj1*r11*sj1*sj2*sj4))+(((-8.0)*cj3*r10*(cj2*cj2)))))))+(((4.0)*cj2*cj4*r02*sj1))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((4.0)*cj3*r11*(cj2*cj2)))+(((-4.0)*cj4*r10*sj3*(cj2*cj2)))+(((-4.0)*cj2*r00*sj1*sj4))+(((4.0)*cj2*cj4*r02*sj1))+(((-4.0)*cj1*r10*sj1*sj2*sj4))+(((4.0)*cj3*r11*(cj1*cj1)*(sj2*sj2)))+(((-4.0)*cj4*r10*sj3*(cj1*cj1)*(sj2*sj2)))+(((4.0)*cj1*cj4*r12*sj1*sj2))+(((-4.0)*r12*sj3*sj4*(cj1*cj1)*(sj2*sj2)))+(((-4.0)*r12*sj3*sj4*(cj2*cj2)))))))+(((-4.0)*cj3*r11*(cj2*cj2)))+(((htj5*htj5*htj5*htj5*htj5)*(((((-8.0)*cj2*r01*sj1*sj4))+(((-8.0)*cj4*r11*sj3*(cj1*cj1)*(sj2*sj2)))+(((-8.0)*cj4*r11*sj3*(cj2*cj2)))+(((-8.0)*cj3*r10*(cj1*cj1)*(sj2*sj2)))+(((-8.0)*cj1*r11*sj1*sj2*sj4))+(((-8.0)*cj3*r10*(cj2*cj2)))))))+(((-4.0)*cj3*r11*(cj1*cj1)*(sj2*sj2)))+(((4.0)*cj1*r10*sj1*sj2*sj4))+(((htj5*htj5*htj5)*(((((-16.0)*cj3*r10*(cj2*cj2)))+(((-16.0)*cj3*r10*(cj1*cj1)*(sj2*sj2)))+(((-16.0)*cj4*r11*sj3*(cj2*cj2)))+(((-16.0)*cj1*r11*sj1*sj2*sj4))+(((-16.0)*cj4*r11*sj3*(cj1*cj1)*(sj2*sj2)))+(((-16.0)*cj2*r01*sj1*sj4))))))+(((4.0)*cj1*cj4*r12*sj1*sj2))+(((-4.0)*r12*sj3*sj4*(cj1*cj1)*(sj2*sj2)))+(((4.0)*cj2*r00*sj1*sj4))+(((-4.0)*r12*sj3*sj4*(cj2*cj2)))+(((4.0)*cj4*r10*sj3*(cj2*cj2))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0eval[2];
IkReal x685=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x685);
rxp1_0=(pz*r11);
rxp1_1=(r01*x685);
IkReal x686=cj1*cj1;
IkReal x687=cj2*cj2;
IkReal x688=(((x686*x687))+(((-1.0)*x687))+(((-1.0)*x686)));
j0eval[0]=x688;
j0eval[1]=IKsign(x688);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x689=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x689);
rxp1_0=(pz*r11);
rxp1_1=(r01*x689);
IkReal x690=(cj2*sj1);
j0eval[0]=((((962.772785622593)*x690))+cj1+(((-1.0)*cj2)));
j0eval[1]=IKsign(((((5250000.0)*x690))+(((5453.0)*cj1))+(((-5453.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x691=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x691);
rxp1_0=(pz*r11);
rxp1_1=(r01*x691);
j0eval[0]=cj2;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x703=IKPowWithIntegerCheck(sj1,-1);
if(!x703.valid){
continue;
}
IkReal x692=x703.value;
IkReal x693=(r01*sj5);
IkReal x694=(sj1*sj4);
IkReal x695=((1.0)*cj3);
IkReal x696=(cj5*r01);
IkReal x697=(cj4*sj3);
IkReal x698=(cj1*sj2);
IkReal x699=((1.0)*r02);
IkReal x700=(cj5*r00);
IkReal x701=(r00*sj5);
IkReal x702=(sj3*sj4);
CheckValue<IkReal> x704=IKPowWithIntegerCheck(cj2,-1);
if(!x704.valid){
continue;
}
if( IKabs((x692*(x704.value)*((((x693*x697*x698))+(((-1.0)*x694*x700))+(((-1.0)*x697*x698*x700))+(((-1.0)*cj4*sj1*x699))+((x693*x694))+((cj3*x696*x698))+((cj3*x698*x701))+((r02*x698*x702)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x692*(((((-1.0)*x693*x697))+(((-1.0)*x695*x701))+((x697*x700))+(((-1.0)*x699*x702))+(((-1.0)*x695*x696)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x692*(x704.value)*((((x693*x697*x698))+(((-1.0)*x694*x700))+(((-1.0)*x697*x698*x700))+(((-1.0)*cj4*sj1*x699))+((x693*x694))+((cj3*x696*x698))+((cj3*x698*x701))+((r02*x698*x702))))))+IKsqr((x692*(((((-1.0)*x693*x697))+(((-1.0)*x695*x701))+((x697*x700))+(((-1.0)*x699*x702))+(((-1.0)*x695*x696))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x692*(x704.value)*((((x693*x697*x698))+(((-1.0)*x694*x700))+(((-1.0)*x697*x698*x700))+(((-1.0)*cj4*sj1*x699))+((x693*x694))+((cj3*x696*x698))+((cj3*x698*x701))+((r02*x698*x702))))), (x692*(((((-1.0)*x693*x697))+(((-1.0)*x695*x701))+((x697*x700))+(((-1.0)*x699*x702))+(((-1.0)*x695*x696))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x705=IKsin(j0);
IkReal x706=IKcos(j0);
IkReal x707=(cj3*sj4);
IkReal x708=(r10*sj3);
IkReal x709=(cj3*r00);
IkReal x710=(cj5*sj4);
IkReal x711=(r01*sj5);
IkReal x712=((1.0)*sj4);
IkReal x713=(cj3*r10);
IkReal x714=(cj1*cj2);
IkReal x715=(cj5*r01);
IkReal x716=(cj5*r11);
IkReal x717=((1.0)*sj3);
IkReal x718=(cj4*sj3);
IkReal x719=(cj3*cj4);
IkReal x720=(sj3*sj4);
IkReal x721=(r00*sj5);
IkReal x722=(r11*sj5);
IkReal x723=((0.00043624)*x706);
IkReal x724=((1.0)*cj4*cj5);
IkReal x725=((0.00043624)*x705);
IkReal x726=(sj1*x705);
IkReal x727=(sj2*x706);
IkReal x728=(sj1*x706);
IkReal x729=(sj2*x705);
evalcond[0]=(((cj1*x727))+(((-1.0)*x711*x712))+((r00*x710))+((cj2*x705))+((cj4*r02)));
evalcond[1]=(((cj1*x729))+(((-1.0)*cj2*x706))+((r10*x710))+(((-1.0)*x712*x722))+((cj4*r12)));
evalcond[2]=(((x711*x718))+((sj5*x709))+(((-1.0)*cj4*cj5*r00*x717))+((r02*x720))+x728+((cj3*x715)));
evalcond[3]=(((sj5*x713))+((x718*x722))+x726+((cj3*x716))+(((-1.0)*x708*x724))+((r12*x720)));
evalcond[4]=((((-1.0)*x723))+(((-0.4)*x721))+(((-1.0)*px))+(((-0.4)*x715))+(((-1.0)*sj2*x725))+(((0.42)*x728))+((x714*x723)));
evalcond[5]=((((-0.4)*r10*sj5))+((sj2*x723))+(((-1.0)*x725))+(((-1.0)*py))+(((-0.4)*x716))+(((0.42)*x726))+((x714*x725)));
evalcond[6]=((((-1.0)*x713*x724))+(((-1.0)*sj5*x708))+(((-1.0)*x716*x717))+((x719*x722))+x727+((r12*x707))+((x705*x714)));
evalcond[7]=((((-1.0)*x709*x724))+((x706*x714))+((x711*x719))+(((-1.0)*x717*x721))+(((-1.0)*x729))+((r02*x707))+(((-1.0)*x715*x717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x730=((5250000.0)*sj1);
IkReal x731=(cj1*cj2);
IkReal x732=(cj1*sj2);
IkReal x733=((12500000.0)*px);
IkReal x734=((5453.0)*cj4*r02);
IkReal x735=((5000000.0)*r00*sj5);
IkReal x736=(r01*sj4*sj5);
IkReal x737=((5000000.0)*cj5*r01);
IkReal x738=((5453.0)*cj5*r00*sj4);
CheckValue<IkReal> x739 = IKatan2WithCheck(IkReal(((((-1.0)*x732*x735))+(((-1.0)*x732*x733))+(((-1.0)*x732*x737))+(((-1.0)*x731*x738))+(((-1.0)*x731*x734))+(((-1.0)*cj5*r00*sj4*x730))+(((-5453.0)*x736))+x734+x738+(((5453.0)*x731*x736))+(((-1.0)*cj4*r02*x730))+((x730*x736)))),IkReal(((((5453.0)*sj2*x736))+(((-1.0)*sj2*x738))+(((-1.0)*sj2*x734))+((cj2*x735))+((cj2*x733))+((cj2*x737)))),IKFAST_ATAN2_MAGTHRESH);
if(!x739.valid){
continue;
}
CheckValue<IkReal> x740=IKPowWithIntegerCheck(IKsign(((((5453.0)*cj1))+((cj2*x730))+(((-5453.0)*cj2)))),-1);
if(!x740.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x739.value)+(((1.5707963267949)*(x740.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x741=IKsin(j0);
IkReal x742=IKcos(j0);
IkReal x743=(cj3*sj4);
IkReal x744=(r10*sj3);
IkReal x745=(cj3*r00);
IkReal x746=(cj5*sj4);
IkReal x747=(r01*sj5);
IkReal x748=((1.0)*sj4);
IkReal x749=(cj3*r10);
IkReal x750=(cj1*cj2);
IkReal x751=(cj5*r01);
IkReal x752=(cj5*r11);
IkReal x753=((1.0)*sj3);
IkReal x754=(cj4*sj3);
IkReal x755=(cj3*cj4);
IkReal x756=(sj3*sj4);
IkReal x757=(r00*sj5);
IkReal x758=(r11*sj5);
IkReal x759=((0.00043624)*x742);
IkReal x760=((1.0)*cj4*cj5);
IkReal x761=((0.00043624)*x741);
IkReal x762=(sj1*x741);
IkReal x763=(sj2*x742);
IkReal x764=(sj1*x742);
IkReal x765=(sj2*x741);
evalcond[0]=(((cj1*x763))+(((-1.0)*x747*x748))+((cj2*x741))+((r00*x746))+((cj4*r02)));
evalcond[1]=(((cj1*x765))+((r10*x746))+(((-1.0)*cj2*x742))+(((-1.0)*x748*x758))+((cj4*r12)));
evalcond[2]=(((r02*x756))+(((-1.0)*cj4*cj5*r00*x753))+((x747*x754))+((cj3*x751))+x764+((sj5*x745)));
evalcond[3]=(((r12*x756))+(((-1.0)*x744*x760))+((cj3*x752))+x762+((sj5*x749))+((x754*x758)));
evalcond[4]=((((0.42)*x764))+(((-0.4)*x751))+(((-0.4)*x757))+(((-1.0)*px))+((x750*x759))+(((-1.0)*x759))+(((-1.0)*sj2*x761)));
evalcond[5]=((((0.42)*x762))+(((-0.4)*r10*sj5))+(((-0.4)*x752))+(((-1.0)*x761))+(((-1.0)*py))+((sj2*x759))+((x750*x761)));
evalcond[6]=(((x741*x750))+((r12*x743))+(((-1.0)*x752*x753))+((x755*x758))+x763+(((-1.0)*sj5*x744))+(((-1.0)*x749*x760)));
evalcond[7]=(((r02*x743))+((x747*x755))+(((-1.0)*x753*x757))+(((-1.0)*x751*x753))+(((-1.0)*x745*x760))+(((-1.0)*x765))+((x742*x750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x766=cj1*cj1;
IkReal x767=cj2*cj2;
IkReal x768=(cj2*sj4);
IkReal x769=((1.0)*sj5);
IkReal x770=(cj5*r00);
IkReal x771=(cj5*r10);
IkReal x772=(cj4*r12);
IkReal x773=(cj1*sj2);
IkReal x774=(cj4*r02);
IkReal x775=(sj4*x773);
CheckValue<IkReal> x776 = IKatan2WithCheck(IkReal((((x771*x775))+((x772*x773))+((cj2*x774))+(((-1.0)*r01*x768*x769))+(((-1.0)*r11*x769*x775))+((x768*x770)))),IkReal((((r11*sj5*x768))+((x770*x775))+(((-1.0)*r01*x769*x775))+((x773*x774))+(((-1.0)*cj2*x772))+(((-1.0)*x768*x771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x776.valid){
continue;
}
CheckValue<IkReal> x777=IKPowWithIntegerCheck(IKsign(((((-1.0)*x766))+(((-1.0)*x767))+((x766*x767)))),-1);
if(!x777.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x776.value)+(((1.5707963267949)*(x777.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x778=IKsin(j0);
IkReal x779=IKcos(j0);
IkReal x780=(cj3*sj4);
IkReal x781=(r10*sj3);
IkReal x782=(cj3*r00);
IkReal x783=(cj5*sj4);
IkReal x784=(r01*sj5);
IkReal x785=((1.0)*sj4);
IkReal x786=(cj3*r10);
IkReal x787=(cj1*cj2);
IkReal x788=(cj5*r01);
IkReal x789=(cj5*r11);
IkReal x790=((1.0)*sj3);
IkReal x791=(cj4*sj3);
IkReal x792=(cj3*cj4);
IkReal x793=(sj3*sj4);
IkReal x794=(r00*sj5);
IkReal x795=(r11*sj5);
IkReal x796=((0.00043624)*x779);
IkReal x797=((1.0)*cj4*cj5);
IkReal x798=((0.00043624)*x778);
IkReal x799=(sj1*x778);
IkReal x800=(sj2*x779);
IkReal x801=(sj1*x779);
IkReal x802=(sj2*x778);
evalcond[0]=(((r00*x783))+((cj2*x778))+((cj1*x800))+(((-1.0)*x784*x785))+((cj4*r02)));
evalcond[1]=(((r10*x783))+((cj1*x802))+(((-1.0)*cj2*x779))+(((-1.0)*x785*x795))+((cj4*r12)));
evalcond[2]=(((sj5*x782))+(((-1.0)*cj4*cj5*r00*x790))+((x784*x791))+((r02*x793))+x801+((cj3*x788)));
evalcond[3]=(((sj5*x786))+(((-1.0)*x781*x797))+x799+((cj3*x789))+((r12*x793))+((x791*x795)));
evalcond[4]=((((-1.0)*x796))+((x787*x796))+(((-1.0)*px))+(((-0.4)*x788))+(((-0.4)*x794))+(((0.42)*x801))+(((-1.0)*sj2*x798)));
evalcond[5]=((((-1.0)*x798))+(((-0.4)*r10*sj5))+(((0.42)*x799))+((x787*x798))+(((-1.0)*py))+(((-0.4)*x789))+((sj2*x796)));
evalcond[6]=(((x778*x787))+((x792*x795))+(((-1.0)*sj5*x781))+(((-1.0)*x786*x797))+(((-1.0)*x789*x790))+x800+((r12*x780)));
evalcond[7]=((((-1.0)*x802))+(((-1.0)*x788*x790))+((x779*x787))+((r02*x780))+((x784*x792))+(((-1.0)*x790*x794))+(((-1.0)*x782*x797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x804=IKPowWithIntegerCheck(r22,-1);
if(!x804.valid){
continue;
}
IkReal x803=x804.value;
CheckValue<IkReal> x805=IKPowWithIntegerCheck(sj3,-1);
if(!x805.valid){
continue;
}
if( IKabs(((-1.0)*cj1*x803*(x805.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj1*sj2*x803)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj1*x803*(x805.value)))+IKsqr((sj1*sj2*x803))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj1*x803*(x805.value)), (sj1*sj2*x803));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x806=IKsin(j4);
IkReal x807=((1.0)*sj1);
IkReal x808=(r22*x806);
evalcond[0]=(((sj3*x808))+cj1);
evalcond[1]=((((-1.0)*sj2*x807))+((r22*(IKcos(j4)))));
evalcond[2]=(((cj3*x808))+(((-1.0)*cj2*x807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x809=cj1*cj1;
IkReal x810=sj2*sj2;
IkReal x811=cj2*cj2;
IkReal x812=((4.0)*sj3);
IkReal x813=(cj1*sj2);
IkReal x814=((8.0)*cj3);
IkReal x815=(r02*sj4);
IkReal x816=((16.0)*r01);
IkReal x817=(sj1*sj4);
IkReal x818=(cj4*sj1);
IkReal x819=(cj2*r12);
IkReal x820=((16.0)*cj3);
IkReal x821=((4.0)*x817);
IkReal x822=(sj3*x811);
IkReal x823=(r00*x811);
IkReal x824=((8.0)*cj4*r01);
IkReal x825=((4.0)*cj3*r01);
IkReal x826=(cj2*r11*x817);
IkReal x827=(x809*x810);
IkReal x828=(x811*x825);
IkReal x829=(cj2*r10*x821);
IkReal x830=((12.0)*x818*x819);
IkReal x831=((4.0)*x818*x819);
IkReal x832=(r00*x827);
IkReal x833=(cj4*x812*x823);
IkReal x834=(r00*x813*x821);
IkReal x835=((12.0)*r02*x813*x818);
IkReal x836=((12.0)*x815*x822);
IkReal x837=((4.0)*r02*x813*x818);
IkReal x838=(x811*x812*x815);
IkReal x839=(x825*x827);
IkReal x840=(cj4*x812*x832);
IkReal x841=((12.0)*sj3*x815*x827);
IkReal x842=(x812*x815*x827);
IkReal x843=(x829+x828+x839);
IkReal x844=(x831+x838+x842);
IkReal x845=(x836+x830+x841);
IkReal x846=(x834+x833+x840);
IkReal x847=((((8.0)*x826))+(((-1.0)*x822*x824))+(((-1.0)*x814*x823))+(((-8.0)*r01*x813*x817))+(((-1.0)*x814*x832))+(((-1.0)*sj3*x824*x827)));
op[0]=((((-1.0)*x844))+(((-1.0)*x846))+x837+x843);
op[1]=x847;
op[2]=((((-1.0)*x845))+(((-1.0)*x846))+x835+x843);
op[3]=((((-1.0)*x820*x832))+(((-1.0)*x813*x816*x817))+(((-1.0)*cj4*x816*x822))+(((-1.0)*cj4*sj3*x816*x827))+(((-1.0)*x820*x823))+(((16.0)*x826)));
op[4]=((((-1.0)*x845))+(((-1.0)*x843))+x835+x846);
op[5]=x847;
op[6]=((((-1.0)*x844))+(((-1.0)*x843))+x837+x846);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5)*(((((4.0)*cj3*r11*(cj2*cj2)))+(((-4.0)*cj4*r10*sj3*(cj2*cj2)))+(((-4.0)*cj2*r00*sj1*sj4))+(((12.0)*cj1*cj4*r12*sj1*sj2))+(((12.0)*cj2*cj4*r02*sj1))+(((-4.0)*cj1*r10*sj1*sj2*sj4))+(((4.0)*cj3*r11*(cj1*cj1)*(sj2*sj2)))+(((-4.0)*cj4*r10*sj3*(cj1*cj1)*(sj2*sj2)))+(((-12.0)*r12*sj3*sj4*(cj1*cj1)*(sj2*sj2)))+(((-12.0)*r12*sj3*sj4*(cj2*cj2)))))))+(((4.0)*cj4*r10*sj3*(cj1*cj1)*(sj2*sj2)))+(((htj5*htj5)*(((((4.0)*cj4*r10*sj3*(cj1*cj1)*(sj2*sj2)))+(((12.0)*cj1*cj4*r12*sj1*sj2))+(((12.0)*cj2*cj4*r02*sj1))+(((-4.0)*cj3*r11*(cj2*cj2)))+(((-4.0)*cj3*r11*(cj1*cj1)*(sj2*sj2)))+(((4.0)*cj1*r10*sj1*sj2*sj4))+(((4.0)*cj2*r00*sj1*sj4))+(((-12.0)*r12*sj3*sj4*(cj1*cj1)*(sj2*sj2)))+(((-12.0)*r12*sj3*sj4*(cj2*cj2)))+(((4.0)*cj4*r10*sj3*(cj2*cj2)))))))+((htj5*(((((-8.0)*cj2*r01*sj1*sj4))+(((-8.0)*cj4*r11*sj3*(cj1*cj1)*(sj2*sj2)))+(((-8.0)*cj4*r11*sj3*(cj2*cj2)))+(((-8.0)*cj3*r10*(cj1*cj1)*(sj2*sj2)))+(((-8.0)*cj1*r11*sj1*sj2*sj4))+(((-8.0)*cj3*r10*(cj2*cj2)))))))+(((4.0)*cj2*cj4*r02*sj1))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((4.0)*cj3*r11*(cj2*cj2)))+(((-4.0)*cj4*r10*sj3*(cj2*cj2)))+(((-4.0)*cj2*r00*sj1*sj4))+(((4.0)*cj2*cj4*r02*sj1))+(((-4.0)*cj1*r10*sj1*sj2*sj4))+(((4.0)*cj3*r11*(cj1*cj1)*(sj2*sj2)))+(((-4.0)*cj4*r10*sj3*(cj1*cj1)*(sj2*sj2)))+(((4.0)*cj1*cj4*r12*sj1*sj2))+(((-4.0)*r12*sj3*sj4*(cj1*cj1)*(sj2*sj2)))+(((-4.0)*r12*sj3*sj4*(cj2*cj2)))))))+(((-4.0)*cj3*r11*(cj2*cj2)))+(((htj5*htj5*htj5*htj5*htj5)*(((((-8.0)*cj2*r01*sj1*sj4))+(((-8.0)*cj4*r11*sj3*(cj1*cj1)*(sj2*sj2)))+(((-8.0)*cj4*r11*sj3*(cj2*cj2)))+(((-8.0)*cj3*r10*(cj1*cj1)*(sj2*sj2)))+(((-8.0)*cj1*r11*sj1*sj2*sj4))+(((-8.0)*cj3*r10*(cj2*cj2)))))))+(((-4.0)*cj3*r11*(cj1*cj1)*(sj2*sj2)))+(((4.0)*cj1*r10*sj1*sj2*sj4))+(((htj5*htj5*htj5)*(((((-16.0)*cj3*r10*(cj2*cj2)))+(((-16.0)*cj3*r10*(cj1*cj1)*(sj2*sj2)))+(((-16.0)*cj4*r11*sj3*(cj2*cj2)))+(((-16.0)*cj1*r11*sj1*sj2*sj4))+(((-16.0)*cj4*r11*sj3*(cj1*cj1)*(sj2*sj2)))+(((-16.0)*cj2*r01*sj1*sj4))))))+(((4.0)*cj1*cj4*r12*sj1*sj2))+(((-4.0)*r12*sj3*sj4*(cj1*cj1)*(sj2*sj2)))+(((4.0)*cj2*r00*sj1*sj4))+(((-4.0)*r12*sj3*sj4*(cj2*cj2)))+(((4.0)*cj4*r10*sj3*(cj2*cj2))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0eval[2];
IkReal x848=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x848);
rxp1_0=(pz*r11);
rxp1_1=(r01*x848);
IkReal x849=cj1*cj1;
IkReal x850=cj2*cj2;
IkReal x851=((((-1.0)*x850))+(((-1.0)*x849))+((x849*x850)));
j0eval[0]=x851;
j0eval[1]=IKsign(x851);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x852=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x852);
rxp1_0=(pz*r11);
rxp1_1=(r01*x852);
IkReal x853=(cj2*sj1);
j0eval[0]=(cj1+(((962.772785622593)*x853))+(((-1.0)*cj2)));
j0eval[1]=IKsign(((((5453.0)*cj1))+(((5250000.0)*x853))+(((-5453.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x854=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x854);
rxp1_0=(pz*r11);
rxp1_1=(r01*x854);
j0eval[0]=cj2;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x866=IKPowWithIntegerCheck(sj1,-1);
if(!x866.valid){
continue;
}
IkReal x855=x866.value;
IkReal x856=(r01*sj5);
IkReal x857=(sj1*sj4);
IkReal x858=((1.0)*cj3);
IkReal x859=(cj5*r01);
IkReal x860=(cj4*sj3);
IkReal x861=(cj1*sj2);
IkReal x862=((1.0)*r02);
IkReal x863=(cj5*r00);
IkReal x864=(r00*sj5);
IkReal x865=(sj3*sj4);
CheckValue<IkReal> x867=IKPowWithIntegerCheck(cj2,-1);
if(!x867.valid){
continue;
}
if( IKabs((x855*(x867.value)*(((((-1.0)*cj4*sj1*x862))+((x856*x860*x861))+(((-1.0)*x860*x861*x863))+(((-1.0)*x857*x863))+((r02*x861*x865))+((cj3*x861*x864))+((x856*x857))+((cj3*x859*x861)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x855*(((((-1.0)*x862*x865))+(((-1.0)*x856*x860))+(((-1.0)*x858*x859))+(((-1.0)*x858*x864))+((x860*x863)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x855*(x867.value)*(((((-1.0)*cj4*sj1*x862))+((x856*x860*x861))+(((-1.0)*x860*x861*x863))+(((-1.0)*x857*x863))+((r02*x861*x865))+((cj3*x861*x864))+((x856*x857))+((cj3*x859*x861))))))+IKsqr((x855*(((((-1.0)*x862*x865))+(((-1.0)*x856*x860))+(((-1.0)*x858*x859))+(((-1.0)*x858*x864))+((x860*x863))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x855*(x867.value)*(((((-1.0)*cj4*sj1*x862))+((x856*x860*x861))+(((-1.0)*x860*x861*x863))+(((-1.0)*x857*x863))+((r02*x861*x865))+((cj3*x861*x864))+((x856*x857))+((cj3*x859*x861))))), (x855*(((((-1.0)*x862*x865))+(((-1.0)*x856*x860))+(((-1.0)*x858*x859))+(((-1.0)*x858*x864))+((x860*x863))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x868=IKsin(j0);
IkReal x869=IKcos(j0);
IkReal x870=(cj3*sj4);
IkReal x871=(r10*sj3);
IkReal x872=(cj3*r00);
IkReal x873=(cj5*sj4);
IkReal x874=(r01*sj5);
IkReal x875=((1.0)*sj4);
IkReal x876=(cj3*r10);
IkReal x877=(cj1*cj2);
IkReal x878=(cj5*r01);
IkReal x879=(cj5*r11);
IkReal x880=((1.0)*sj3);
IkReal x881=(cj4*sj3);
IkReal x882=(cj3*cj4);
IkReal x883=(sj3*sj4);
IkReal x884=(r00*sj5);
IkReal x885=(r11*sj5);
IkReal x886=((0.00043624)*x869);
IkReal x887=((1.0)*cj4*cj5);
IkReal x888=((0.00043624)*x868);
IkReal x889=(sj1*x868);
IkReal x890=(sj2*x869);
IkReal x891=(sj1*x869);
IkReal x892=(sj2*x868);
evalcond[0]=(((cj2*x868))+((r00*x873))+(((-1.0)*x874*x875))+((cj1*x890))+((cj4*r02)));
evalcond[1]=(((r10*x873))+(((-1.0)*cj2*x869))+((cj1*x892))+((cj4*r12))+(((-1.0)*x875*x885)));
evalcond[2]=(((r02*x883))+((x874*x881))+((sj5*x872))+((cj3*x878))+x891+(((-1.0)*cj4*cj5*r00*x880)));
evalcond[3]=(((x881*x885))+((sj5*x876))+((cj3*x879))+(((-1.0)*x871*x887))+x889+((r12*x883)));
evalcond[4]=((((0.42)*x891))+((x877*x886))+(((-0.4)*x884))+(((-1.0)*x886))+(((-1.0)*px))+(((-0.4)*x878))+(((-1.0)*sj2*x888)));
evalcond[5]=((((0.42)*x889))+((x877*x888))+(((-0.4)*r10*sj5))+(((-1.0)*x888))+(((-1.0)*py))+(((-0.4)*x879))+((sj2*x886)));
evalcond[6]=((((-1.0)*x879*x880))+((x868*x877))+((r12*x870))+((x882*x885))+(((-1.0)*x876*x887))+(((-1.0)*sj5*x871))+x890);
evalcond[7]=(((x874*x882))+(((-1.0)*x892))+((r02*x870))+((x869*x877))+(((-1.0)*x872*x887))+(((-1.0)*x880*x884))+(((-1.0)*x878*x880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x893=((5250000.0)*sj1);
IkReal x894=(cj1*cj2);
IkReal x895=(cj1*sj2);
IkReal x896=((12500000.0)*px);
IkReal x897=((5453.0)*cj4*r02);
IkReal x898=((5000000.0)*r00*sj5);
IkReal x899=(r01*sj4*sj5);
IkReal x900=((5000000.0)*cj5*r01);
IkReal x901=((5453.0)*cj5*r00*sj4);
CheckValue<IkReal> x902 = IKatan2WithCheck(IkReal(((((-1.0)*x895*x900))+(((-1.0)*x895*x896))+(((-1.0)*x895*x898))+(((-1.0)*x894*x901))+(((5453.0)*x894*x899))+(((-5453.0)*x899))+((x893*x899))+(((-1.0)*cj4*r02*x893))+(((-1.0)*x894*x897))+x897+(((-1.0)*cj5*r00*sj4*x893))+x901)),IkReal((((cj2*x896))+((cj2*x898))+(((5453.0)*sj2*x899))+((cj2*x900))+(((-1.0)*sj2*x901))+(((-1.0)*sj2*x897)))),IKFAST_ATAN2_MAGTHRESH);
if(!x902.valid){
continue;
}
CheckValue<IkReal> x903=IKPowWithIntegerCheck(IKsign((((cj2*x893))+(((5453.0)*cj1))+(((-5453.0)*cj2)))),-1);
if(!x903.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x902.value)+(((1.5707963267949)*(x903.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x904=IKsin(j0);
IkReal x905=IKcos(j0);
IkReal x906=(cj3*sj4);
IkReal x907=(r10*sj3);
IkReal x908=(cj3*r00);
IkReal x909=(cj5*sj4);
IkReal x910=(r01*sj5);
IkReal x911=((1.0)*sj4);
IkReal x912=(cj3*r10);
IkReal x913=(cj1*cj2);
IkReal x914=(cj5*r01);
IkReal x915=(cj5*r11);
IkReal x916=((1.0)*sj3);
IkReal x917=(cj4*sj3);
IkReal x918=(cj3*cj4);
IkReal x919=(sj3*sj4);
IkReal x920=(r00*sj5);
IkReal x921=(r11*sj5);
IkReal x922=((0.00043624)*x905);
IkReal x923=((1.0)*cj4*cj5);
IkReal x924=((0.00043624)*x904);
IkReal x925=(sj1*x904);
IkReal x926=(sj2*x905);
IkReal x927=(sj1*x905);
IkReal x928=(sj2*x904);
evalcond[0]=(((r00*x909))+((cj2*x904))+(((-1.0)*x910*x911))+((cj1*x926))+((cj4*r02)));
evalcond[1]=((((-1.0)*cj2*x905))+((r10*x909))+((cj1*x928))+((cj4*r12))+(((-1.0)*x911*x921)));
evalcond[2]=(((x910*x917))+((sj5*x908))+((r02*x919))+((cj3*x914))+x927+(((-1.0)*cj4*cj5*r00*x916)));
evalcond[3]=(((sj5*x912))+((r12*x919))+((cj3*x915))+((x917*x921))+(((-1.0)*x907*x923))+x925);
evalcond[4]=((((-1.0)*x922))+(((-0.4)*x914))+(((-1.0)*sj2*x924))+(((0.42)*x927))+(((-0.4)*x920))+(((-1.0)*px))+((x913*x922)));
evalcond[5]=((((-1.0)*x924))+(((-0.4)*x915))+(((0.42)*x925))+(((-0.4)*r10*sj5))+(((-1.0)*py))+((sj2*x922))+((x913*x924)));
evalcond[6]=(((x918*x921))+(((-1.0)*x912*x923))+((r12*x906))+(((-1.0)*sj5*x907))+x926+((x904*x913))+(((-1.0)*x915*x916)));
evalcond[7]=(((x910*x918))+((r02*x906))+(((-1.0)*x928))+(((-1.0)*x914*x916))+(((-1.0)*x908*x923))+(((-1.0)*x916*x920))+((x905*x913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x929=cj1*cj1;
IkReal x930=cj2*cj2;
IkReal x931=(cj2*sj4);
IkReal x932=((1.0)*sj5);
IkReal x933=(cj5*r00);
IkReal x934=(cj5*r10);
IkReal x935=(cj4*r12);
IkReal x936=(cj1*sj2);
IkReal x937=(cj4*r02);
IkReal x938=(sj4*x936);
CheckValue<IkReal> x939 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x932*x938))+((x935*x936))+(((-1.0)*r01*x931*x932))+((cj2*x937))+((x931*x933))+((x934*x938)))),IkReal((((x936*x937))+(((-1.0)*cj2*x935))+(((-1.0)*r01*x932*x938))+(((-1.0)*x931*x934))+((r11*sj5*x931))+((x933*x938)))),IKFAST_ATAN2_MAGTHRESH);
if(!x939.valid){
continue;
}
CheckValue<IkReal> x940=IKPowWithIntegerCheck(IKsign(((((-1.0)*x929))+(((-1.0)*x930))+((x929*x930)))),-1);
if(!x940.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x939.value)+(((1.5707963267949)*(x940.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x941=IKsin(j0);
IkReal x942=IKcos(j0);
IkReal x943=(cj3*sj4);
IkReal x944=(r10*sj3);
IkReal x945=(cj3*r00);
IkReal x946=(cj5*sj4);
IkReal x947=(r01*sj5);
IkReal x948=((1.0)*sj4);
IkReal x949=(cj3*r10);
IkReal x950=(cj1*cj2);
IkReal x951=(cj5*r01);
IkReal x952=(cj5*r11);
IkReal x953=((1.0)*sj3);
IkReal x954=(cj4*sj3);
IkReal x955=(cj3*cj4);
IkReal x956=(sj3*sj4);
IkReal x957=(r00*sj5);
IkReal x958=(r11*sj5);
IkReal x959=((0.00043624)*x942);
IkReal x960=((1.0)*cj4*cj5);
IkReal x961=((0.00043624)*x941);
IkReal x962=(sj1*x941);
IkReal x963=(sj2*x942);
IkReal x964=(sj1*x942);
IkReal x965=(sj2*x941);
evalcond[0]=((((-1.0)*x947*x948))+((cj1*x963))+((cj2*x941))+((r00*x946))+((cj4*r02)));
evalcond[1]=(((cj1*x965))+(((-1.0)*cj2*x942))+(((-1.0)*x948*x958))+((cj4*r12))+((r10*x946)));
evalcond[2]=(((x947*x954))+((r02*x956))+((cj3*x951))+x964+(((-1.0)*cj4*cj5*r00*x953))+((sj5*x945)));
evalcond[3]=((((-1.0)*x944*x960))+((cj3*x952))+((r12*x956))+x962+((sj5*x949))+((x954*x958)));
evalcond[4]=((((-0.4)*x957))+(((-0.4)*x951))+(((0.42)*x964))+(((-1.0)*px))+(((-1.0)*sj2*x961))+(((-1.0)*x959))+((x950*x959)));
evalcond[5]=((((-0.4)*r10*sj5))+(((-0.4)*x952))+(((0.42)*x962))+(((-1.0)*py))+((sj2*x959))+(((-1.0)*x961))+((x950*x961)));
evalcond[6]=(((x955*x958))+((r12*x943))+((x941*x950))+(((-1.0)*sj5*x944))+(((-1.0)*x949*x960))+(((-1.0)*x952*x953))+x963);
evalcond[7]=(((r02*x943))+(((-1.0)*x965))+((x942*x950))+((x947*x955))+(((-1.0)*x953*x957))+(((-1.0)*x945*x960))+(((-1.0)*x951*x953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x966=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x966);
rxp1_0=(pz*r11);
rxp1_1=(r01*x966);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x967=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x967);
rxp1_0=(pz*r11);
rxp1_1=(r01*x967);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x968=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x968);
rxp1_0=(pz*r11);
rxp1_1=(r01*x968);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x969=IKPowWithIntegerCheck(r22,-1);
if(!x969.valid){
continue;
}
sj4array[0]=((-1.0)*cj1*(x969.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x970=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x970);
rxp1_0=(pz*r11);
rxp1_1=(r01*x970);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x972 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x972.valid){
continue;
}
IkReal x971=x972.value;
j5array[0]=((-1.0)*x971);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x971)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
IkReal x973=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x973);
rxp1_0=(pz*r11);
rxp1_1=(r01*x973);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=sj2;
j0eval[1]=((cj5*cj5)+(sj5*sj5));
j0eval[2]=IKsign(sj2);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[4];
IkReal x974=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x974);
rxp1_0=(pz*r11);
rxp1_1=(r01*x974);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x975=(cj1*sj2);
j0eval[0]=x975;
j0eval[1]=IKsign(x975);
j0eval[2]=sj4;
j0eval[3]=((cj5*cj5)+(sj5*sj5));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x976=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x976);
rxp1_0=(pz*r11);
rxp1_1=(r01*x976);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x978=IKPowWithIntegerCheck(sj2,-1);
if(!x978.valid){
continue;
}
IkReal x977=x978.value;
CheckValue<IkReal> x979=IKPowWithIntegerCheck(cj1,-1);
if(!x979.valid){
continue;
}
if( IKabs((x977*(x979.value)*((((r11*sj4*sj5))+(((-1.0)*cj5*r10*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x977*((((cj5*r11))+((r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x977*(x979.value)*((((r11*sj4*sj5))+(((-1.0)*cj5*r10*sj4))))))+IKsqr((x977*((((cj5*r11))+((r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x977*(x979.value)*((((r11*sj4*sj5))+(((-1.0)*cj5*r10*sj4))))), (x977*((((cj5*r11))+((r10*sj5))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x980=IKcos(j0);
IkReal x981=IKsin(j0);
IkReal x982=(cj5*sj4);
IkReal x983=((1.0)*sj5);
IkReal x984=((1.0)*cj5);
IkReal x985=((0.4)*cj5);
IkReal x986=((0.4)*sj5);
IkReal x987=((0.00043624)*x980);
IkReal x988=(sj2*x980);
IkReal x989=(sj2*x981);
evalcond[0]=((((-1.0)*r10*x983))+(((-1.0)*r11*x984))+x988);
evalcond[1]=((((-1.0)*r00*x983))+(((-1.0)*x989))+(((-1.0)*r01*x984)));
evalcond[2]=((((-1.0)*r01*sj4*x983))+((cj1*x988))+((r00*x982)));
evalcond[3]=(((cj1*x989))+(((-1.0)*r11*sj4*x983))+((r10*x982)));
evalcond[4]=((((-1.0)*x987))+(((-1.0)*r00*x986))+(((-0.00043624)*x989))+(((-1.0)*r01*x985))+(((-1.0)*px)));
evalcond[5]=((((-1.0)*r10*x986))+(((-0.00043624)*x981))+(((-1.0)*py))+(((-1.0)*r11*x985))+((sj2*x987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x990=(sj4*sj5);
IkReal x991=((1.0)*cj5*sj4);
CheckValue<IkReal> x992 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x991))+((r11*x990)))),IkReal((((r01*x990))+(((-1.0)*r00*x991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x992.valid){
continue;
}
CheckValue<IkReal> x993=IKPowWithIntegerCheck(IKsign((cj1*sj2)),-1);
if(!x993.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x992.value)+(((1.5707963267949)*(x993.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x994=IKcos(j0);
IkReal x995=IKsin(j0);
IkReal x996=(cj5*sj4);
IkReal x997=((1.0)*sj5);
IkReal x998=((1.0)*cj5);
IkReal x999=((0.4)*cj5);
IkReal x1000=((0.4)*sj5);
IkReal x1001=((0.00043624)*x994);
IkReal x1002=(sj2*x994);
IkReal x1003=(sj2*x995);
evalcond[0]=(x1002+(((-1.0)*r11*x998))+(((-1.0)*r10*x997)));
evalcond[1]=((((-1.0)*x1003))+(((-1.0)*r01*x998))+(((-1.0)*r00*x997)));
evalcond[2]=((((-1.0)*r01*sj4*x997))+((r00*x996))+((cj1*x1002)));
evalcond[3]=(((r10*x996))+((cj1*x1003))+(((-1.0)*r11*sj4*x997)));
evalcond[4]=((((-1.0)*x1001))+(((-0.00043624)*x1003))+(((-1.0)*px))+(((-1.0)*r01*x999))+(((-1.0)*r00*x1000)));
evalcond[5]=((((-1.0)*r10*x1000))+(((-0.00043624)*x995))+(((-1.0)*r11*x999))+(((-1.0)*py))+((sj2*x1001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1004=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x1004.valid){
continue;
}
CheckValue<IkReal> x1005 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1005.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1004.value)))+(x1005.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1006=IKcos(j0);
IkReal x1007=IKsin(j0);
IkReal x1008=(cj5*sj4);
IkReal x1009=((1.0)*sj5);
IkReal x1010=((1.0)*cj5);
IkReal x1011=((0.4)*cj5);
IkReal x1012=((0.4)*sj5);
IkReal x1013=((0.00043624)*x1006);
IkReal x1014=(sj2*x1006);
IkReal x1015=(sj2*x1007);
evalcond[0]=((((-1.0)*r10*x1009))+x1014+(((-1.0)*r11*x1010)));
evalcond[1]=((((-1.0)*r01*x1010))+(((-1.0)*r00*x1009))+(((-1.0)*x1015)));
evalcond[2]=((((-1.0)*r01*sj4*x1009))+((cj1*x1014))+((r00*x1008)));
evalcond[3]=((((-1.0)*r11*sj4*x1009))+((cj1*x1015))+((r10*x1008)));
evalcond[4]=((((-1.0)*x1013))+(((-1.0)*px))+(((-0.00043624)*x1015))+(((-1.0)*r01*x1011))+(((-1.0)*r00*x1012)));
evalcond[5]=((((-0.00043624)*x1007))+(((-1.0)*py))+((sj2*x1013))+(((-1.0)*r11*x1011))+(((-1.0)*r10*x1012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1016=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1016);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1016);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1017=IKPowWithIntegerCheck(r22,-1);
if(!x1017.valid){
continue;
}
sj4array[0]=(cj1*(x1017.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1018=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1018);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1018);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1020 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1020.valid){
continue;
}
IkReal x1019=x1020.value;
j5array[0]=((-1.0)*x1019);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1019)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
IkReal x1021=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1021);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1021);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=sj2;
j0eval[1]=IKsign(sj2);
j0eval[2]=((cj5*cj5)+(sj5*sj5));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[4];
IkReal x1022=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1022);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1022);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1023=(cj1*sj2);
j0eval[0]=x1023;
j0eval[1]=IKsign(x1023);
j0eval[2]=sj4;
j0eval[3]=((cj5*cj5)+(sj5*sj5));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1024=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1024);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1024);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=sj2;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1026=IKPowWithIntegerCheck(sj2,-1);
if(!x1026.valid){
continue;
}
IkReal x1025=x1026.value;
CheckValue<IkReal> x1027=IKPowWithIntegerCheck(cj1,-1);
if(!x1027.valid){
continue;
}
if( IKabs((x1025*((((r00*sj5))+((cj5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1025*(x1027.value)*(((((-1.0)*cj5*r00*sj4))+((r01*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1025*((((r00*sj5))+((cj5*r01))))))+IKsqr((x1025*(x1027.value)*(((((-1.0)*cj5*r00*sj4))+((r01*sj4*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1025*((((r00*sj5))+((cj5*r01))))), (x1025*(x1027.value)*(((((-1.0)*cj5*r00*sj4))+((r01*sj4*sj5))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1028=IKcos(j0);
IkReal x1029=IKsin(j0);
IkReal x1030=(cj5*sj4);
IkReal x1031=(cj5*r01);
IkReal x1032=(r00*sj5);
IkReal x1033=(cj5*r11);
IkReal x1034=(r10*sj5);
IkReal x1035=((0.00043624)*x1028);
IkReal x1036=((1.0)*sj4*sj5);
IkReal x1037=(sj2*x1028);
IkReal x1038=(sj2*x1029);
evalcond[0]=(x1033+x1037+x1034);
evalcond[1]=(x1032+x1031+(((-1.0)*x1038)));
evalcond[2]=(((r00*x1030))+(((-1.0)*r01*x1036))+((cj1*x1037)));
evalcond[3]=(((r10*x1030))+(((-1.0)*r11*x1036))+((cj1*x1038)));
evalcond[4]=((((-1.0)*x1035))+(((-0.00043624)*x1038))+(((-0.4)*x1031))+(((-0.4)*x1032))+(((-1.0)*px)));
evalcond[5]=((((-0.00043624)*x1029))+(((-0.4)*x1034))+(((-0.4)*x1033))+((sj2*x1035))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1039=(sj4*sj5);
IkReal x1040=((1.0)*cj5*sj4);
CheckValue<IkReal> x1041 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1040))+((r11*x1039)))),IkReal(((((-1.0)*r00*x1040))+((r01*x1039)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1041.valid){
continue;
}
CheckValue<IkReal> x1042=IKPowWithIntegerCheck(IKsign((cj1*sj2)),-1);
if(!x1042.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1041.value)+(((1.5707963267949)*(x1042.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1043=IKcos(j0);
IkReal x1044=IKsin(j0);
IkReal x1045=(cj5*sj4);
IkReal x1046=(cj5*r01);
IkReal x1047=(r00*sj5);
IkReal x1048=(cj5*r11);
IkReal x1049=(r10*sj5);
IkReal x1050=((0.00043624)*x1043);
IkReal x1051=((1.0)*sj4*sj5);
IkReal x1052=(sj2*x1043);
IkReal x1053=(sj2*x1044);
evalcond[0]=(x1052+x1049+x1048);
evalcond[1]=(x1047+x1046+(((-1.0)*x1053)));
evalcond[2]=((((-1.0)*r01*x1051))+((cj1*x1052))+((r00*x1045)));
evalcond[3]=(((cj1*x1053))+(((-1.0)*r11*x1051))+((r10*x1045)));
evalcond[4]=((((-1.0)*x1050))+(((-1.0)*px))+(((-0.00043624)*x1053))+(((-0.4)*x1046))+(((-0.4)*x1047)));
evalcond[5]=(((sj2*x1050))+(((-1.0)*py))+(((-0.4)*x1048))+(((-0.4)*x1049))+(((-0.00043624)*x1044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1054 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1054.valid){
continue;
}
CheckValue<IkReal> x1055=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x1055.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1054.value)+(((1.5707963267949)*(x1055.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1056=IKcos(j0);
IkReal x1057=IKsin(j0);
IkReal x1058=(cj5*sj4);
IkReal x1059=(cj5*r01);
IkReal x1060=(r00*sj5);
IkReal x1061=(cj5*r11);
IkReal x1062=(r10*sj5);
IkReal x1063=((0.00043624)*x1056);
IkReal x1064=((1.0)*sj4*sj5);
IkReal x1065=(sj2*x1056);
IkReal x1066=(sj2*x1057);
evalcond[0]=(x1061+x1062+x1065);
evalcond[1]=(x1059+x1060+(((-1.0)*x1066)));
evalcond[2]=((((-1.0)*r01*x1064))+((r00*x1058))+((cj1*x1065)));
evalcond[3]=((((-1.0)*r11*x1064))+((r10*x1058))+((cj1*x1066)));
evalcond[4]=((((-1.0)*px))+(((-0.00043624)*x1066))+(((-0.4)*x1060))+(((-1.0)*x1063))+(((-0.4)*x1059)));
evalcond[5]=(((sj2*x1063))+(((-1.0)*py))+(((-0.4)*x1061))+(((-0.4)*x1062))+(((-0.00043624)*x1057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1067=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1067);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1067);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=IKsign(r22);
j4eval[2]=((IKabs((sj1*sj2)))+(IKabs((cj2*sj1))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1068 = IKatan2WithCheck(IkReal((cj2*sj1)),IkReal((sj1*sj2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1068.valid){
continue;
}
CheckValue<IkReal> x1069=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1068.value)+(((1.5707963267949)*(x1069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1070=((1.0)*sj1);
evalcond[0]=((((-1.0)*sj2*x1070))+((r22*(IKcos(j4)))));
evalcond[1]=(((r22*(IKsin(j4))))+(((-1.0)*cj2*x1070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[1];
IkReal x1071=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1071);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1071);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x1072=(sj2*sj4);
IkReal x1073=(cj2*cj4);
IkReal x1074=(r01*r11);
IkReal x1075=((4.0)*r00*r10);
IkReal x1076=((1.6)*r00*r10);
IkReal x1077=(x1073*x1074);
IkReal x1078=((((4.0)*x1072*x1074))+((x1072*x1075)));
IkReal x1079=(((x1073*x1075))+(((4.0)*x1077)));
IkReal x1080=(((x1073*x1076))+(((1.6)*x1077)));
IkReal x1081=(((x1072*x1076))+(((1.6)*x1072*x1074)));
j0eval[0]=((IKabs((x1078+(((-1.0)*x1079)))))+(((0.5)*(IKabs((x1079+(((-1.0)*x1078)))))))+(IKabs((x1080+(((-1.0)*x1081)))))+(((0.5)*(IKabs((x1081+(((-1.0)*x1080))))))));
if( IKabs(j0eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j0evalpoly[1];
IkReal x1082=(sj2*sj4);
IkReal x1083=(cj2*cj4);
IkReal x1084=((4.0)*r01*r11);
IkReal x1085=((4.0)*r00*r10);
IkReal x1086=(((x1083*x1084))+((x1083*x1085)));
IkReal x1087=(((x1082*x1084))+((x1082*x1085)));
IkReal x1088=(x1087+(((-1.0)*x1086)));
IkReal x1089=(x1086+(((-1.0)*x1087)));
op[0]=x1088;
op[1]=0;
op[2]=x1088;
op[3]=0;
op[4]=x1089;
op[5]=0;
op[6]=x1089;
polyroots6(op,zeror,numroots);
IkReal j0array[6], cj0array[6], sj0array[6], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[6]={true,true,true,true,true,true};
_nj0 = 6;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

IkReal x1090=(r01*r11);
IkReal x1091=(r00*r10);
IkReal x1092=((1.6)*cj2*cj4);
IkReal x1093=((1.6)*sj2*sj4);
IkReal x1094=(x1090*x1093);
IkReal x1095=(x1091*x1093);
IkReal x1096=(((x1091*x1092))+((x1090*x1092)));
IkReal x1097=(x1094+x1095);
IkReal x1098=(x1096+(((-1.0)*x1097)));
j0evalpoly[0]=(x1097+(((-1.0)*x1096))+((x1098*(htj0*htj0*htj0*htj0)))+((x1098*(htj0*htj0*htj0*htj0*htj0*htj0)))+(((htj0*htj0)*((x1097+(((-1.0)*x1096)))))));
if( IKabs(j0evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j5eval[4];
IkReal x1099=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1099);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1099);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=r22;
j5eval[1]=sj1;
j5eval[2]=((cj0*cj0)+(sj0*sj0));
j5eval[3]=IKsign(r22);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x1100=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1100);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1100);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((((cj0*cj0)*(sj1*sj1)*(sj4*sj4)))+(((cj2*cj2)*(sj0*sj0))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1101=((1.0)*r00);
IkReal x1102=(cj2*sj0);
IkReal x1103=(cj0*sj1*sj4);
CheckValue<IkReal> x1104=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1104.valid){
continue;
}
CheckValue<IkReal> x1105 = IKatan2WithCheck(IkReal((((r01*x1102))+(((-1.0)*x1101*x1103)))),IkReal(((((-1.0)*r01*x1103))+(((-1.0)*x1101*x1102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1105.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1104.value)))+(x1105.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1106=IKsin(j5);
IkReal x1107=IKcos(j5);
IkReal x1108=((0.00043624)*sj2);
IkReal x1109=((1.0)*sj4);
IkReal x1110=((0.42)*sj1);
IkReal x1111=(r11*x1106);
IkReal x1112=(r01*x1106);
IkReal x1113=(r00*x1106);
IkReal x1114=(r10*x1106);
IkReal x1115=(sj4*x1107);
IkReal x1116=(r01*x1107);
IkReal x1117=(r11*x1107);
IkReal x1118=((1.0)*cj4*x1107);
evalcond[0]=(x1113+x1116+((cj0*sj1)));
evalcond[1]=(x1114+x1117+((sj0*sj1)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*x1109*x1112))+((r00*x1115)));
evalcond[3]=(((cj4*x1111))+((cj0*sj2))+(((-1.0)*r10*x1118)));
evalcond[4]=((((-1.0)*x1109*x1111))+(((-1.0)*cj0*cj2))+((r10*x1115)));
evalcond[5]=((((-1.0)*r00*x1118))+((cj4*x1112))+(((-1.0)*sj0*sj2)));
evalcond[6]=((((-0.4)*x1116))+(((-0.4)*x1113))+(((-0.00043624)*cj0))+(((-1.0)*px))+((cj0*x1110))+(((-1.0)*sj0*x1108)));
evalcond[7]=((((-0.4)*x1114))+(((-0.4)*x1117))+(((-1.0)*py))+(((-0.00043624)*sj0))+((sj0*x1110))+((cj0*x1108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1119=((1.0)*sj1);
CheckValue<IkReal> x1120 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r11*x1119))+((r01*sj0*sj1)))),IkReal((((cj0*r10*sj1))+(((-1.0)*r00*sj0*x1119)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1120.valid){
continue;
}
CheckValue<IkReal> x1121=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1121.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1120.value)+(((1.5707963267949)*(x1121.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1122=IKsin(j5);
IkReal x1123=IKcos(j5);
IkReal x1124=((0.00043624)*sj2);
IkReal x1125=((1.0)*sj4);
IkReal x1126=((0.42)*sj1);
IkReal x1127=(r11*x1122);
IkReal x1128=(r01*x1122);
IkReal x1129=(r00*x1122);
IkReal x1130=(r10*x1122);
IkReal x1131=(sj4*x1123);
IkReal x1132=(r01*x1123);
IkReal x1133=(r11*x1123);
IkReal x1134=((1.0)*cj4*x1123);
evalcond[0]=(x1129+x1132+((cj0*sj1)));
evalcond[1]=(x1133+x1130+((sj0*sj1)));
evalcond[2]=(((cj2*sj0))+((r00*x1131))+(((-1.0)*x1125*x1128)));
evalcond[3]=((((-1.0)*r10*x1134))+((cj4*x1127))+((cj0*sj2)));
evalcond[4]=(((r10*x1131))+(((-1.0)*cj0*cj2))+(((-1.0)*x1125*x1127)));
evalcond[5]=(((cj4*x1128))+(((-1.0)*sj0*sj2))+(((-1.0)*r00*x1134)));
evalcond[6]=(((cj0*x1126))+(((-0.4)*x1129))+(((-0.00043624)*cj0))+(((-0.4)*x1132))+(((-1.0)*px))+(((-1.0)*sj0*x1124)));
evalcond[7]=(((cj0*x1124))+((sj0*x1126))+(((-0.4)*x1133))+(((-0.4)*x1130))+(((-1.0)*py))+(((-0.00043624)*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1135=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1135);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1135);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((IKabs((sj1*sj2)))+(IKabs((cj2*sj1))));
j4eval[2]=IKsign(r22);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1136 = IKatan2WithCheck(IkReal(((-1.0)*cj2*sj1)),IkReal((sj1*sj2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1136.valid){
continue;
}
CheckValue<IkReal> x1137=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1136.value)+(((1.5707963267949)*(x1137.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1138=((1.0)*sj1);
evalcond[0]=((((-1.0)*sj2*x1138))+((r22*(IKcos(j4)))));
evalcond[1]=((((-1.0)*r22*(IKsin(j4))))+(((-1.0)*cj2*x1138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[1];
IkReal x1139=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1139);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1139);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1140=(sj2*sj4);
IkReal x1141=(cj2*cj4);
IkReal x1142=(r01*r11);
IkReal x1143=((4.0)*r00*r10);
IkReal x1144=((1.6)*r00*r10);
IkReal x1145=(x1141*x1142);
IkReal x1146=(((x1140*x1143))+((x1141*x1143))+(((4.0)*x1140*x1142))+(((4.0)*x1145)));
IkReal x1147=(((x1140*x1144))+(((1.6)*x1140*x1142))+(((1.6)*x1145))+((x1141*x1144)));
j0eval[0]=((((1.5)*(IKabs(x1146))))+(((1.5)*(IKabs(x1147)))));
if( IKabs(j0eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j0evalpoly[1];
IkReal x1148=(sj2*sj4);
IkReal x1149=(cj2*cj4);
IkReal x1150=((4.0)*r01*r11);
IkReal x1151=((4.0)*r00*r10);
IkReal x1152=((((-1.0)*x1149*x1151))+(((-1.0)*x1149*x1150))+(((-1.0)*x1148*x1150))+(((-1.0)*x1148*x1151)));
IkReal x1153=(((x1149*x1150))+((x1149*x1151))+((x1148*x1151))+((x1148*x1150)));
op[0]=x1152;
op[1]=0;
op[2]=x1152;
op[3]=0;
op[4]=x1153;
op[5]=0;
op[6]=x1153;
polyroots6(op,zeror,numroots);
IkReal j0array[6], cj0array[6], sj0array[6], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[6]={true,true,true,true,true,true};
_nj0 = 6;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

IkReal x1154=(r01*r11);
IkReal x1155=(r00*r10);
IkReal x1156=((1.6)*cj2*cj4);
IkReal x1157=((1.6)*sj2*sj4);
IkReal x1158=(x1154*x1156);
IkReal x1159=(x1154*x1157);
IkReal x1160=(x1155*x1156);
IkReal x1161=(x1155*x1157);
IkReal x1162=((((-1.0)*x1159))+(((-1.0)*x1158))+(((-1.0)*x1161))+(((-1.0)*x1160)));
IkReal x1163=(x1159+x1158+x1160+x1161);
j0evalpoly[0]=(((x1163*(htj0*htj0)))+x1163+((x1162*(htj0*htj0*htj0*htj0)))+((x1162*(htj0*htj0*htj0*htj0*htj0*htj0))));
if( IKabs(j0evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j5eval[4];
IkReal x1164=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1164);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1164);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=r22;
j5eval[1]=IKsign(r22);
j5eval[2]=sj1;
j5eval[3]=((cj0*cj0)+(sj0*sj0));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x1165=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1165);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1165);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((((cj0*cj0)*(sj1*sj1)*(sj4*sj4)))+(((cj2*cj2)*(sj0*sj0))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1166=(cj2*sj0);
IkReal x1167=(cj0*sj1*sj4);
CheckValue<IkReal> x1168 = IKatan2WithCheck(IkReal((((r00*x1167))+((r01*x1166)))),IkReal((((r01*x1167))+(((-1.0)*r00*x1166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1168.valid){
continue;
}
CheckValue<IkReal> x1169=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1169.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1168.value)+(((1.5707963267949)*(x1169.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1170=IKsin(j5);
IkReal x1171=IKcos(j5);
IkReal x1172=((0.00043624)*sj2);
IkReal x1173=((0.42)*sj1);
IkReal x1174=((1.0)*x1170);
IkReal x1175=((1.0)*x1171);
IkReal x1176=(r10*x1171);
IkReal x1177=((0.4)*x1171);
IkReal x1178=(r00*x1171);
IkReal x1179=((0.4)*x1170);
evalcond[0]=((((-1.0)*r01*x1175))+(((-1.0)*r00*x1174))+((cj0*sj1)));
evalcond[1]=((((-1.0)*r11*x1175))+((sj0*sj1))+(((-1.0)*r10*x1174)));
evalcond[2]=(((cj2*sj0))+((sj4*x1178))+(((-1.0)*r01*sj4*x1174)));
evalcond[3]=((((-1.0)*cj4*r11*x1174))+((cj4*x1176))+((cj0*sj2)));
evalcond[4]=(((sj4*x1176))+(((-1.0)*r11*sj4*x1174))+(((-1.0)*cj0*cj2)));
evalcond[5]=((((-1.0)*cj4*r01*x1174))+((cj4*x1178))+(((-1.0)*sj0*sj2)));
evalcond[6]=((((-1.0)*sj0*x1172))+((cj0*x1173))+(((-0.00043624)*cj0))+(((-1.0)*px))+(((-1.0)*r01*x1177))+(((-1.0)*r00*x1179)));
evalcond[7]=(((sj0*x1173))+((cj0*x1172))+(((-1.0)*r11*x1177))+(((-1.0)*py))+(((-0.00043624)*sj0))+(((-1.0)*r10*x1179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1180=(sj0*sj1);
IkReal x1181=(cj0*sj1);
CheckValue<IkReal> x1182 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x1180))+((r11*x1181)))),IkReal((((r00*x1180))+(((-1.0)*r10*x1181)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1182.valid){
continue;
}
CheckValue<IkReal> x1183=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x1183.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1182.value)+(((1.5707963267949)*(x1183.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x1184=IKsin(j5);
IkReal x1185=IKcos(j5);
IkReal x1186=((0.00043624)*sj2);
IkReal x1187=((0.42)*sj1);
IkReal x1188=((1.0)*x1184);
IkReal x1189=((1.0)*x1185);
IkReal x1190=(r10*x1185);
IkReal x1191=((0.4)*x1185);
IkReal x1192=(r00*x1185);
IkReal x1193=((0.4)*x1184);
evalcond[0]=((((-1.0)*r01*x1189))+((cj0*sj1))+(((-1.0)*r00*x1188)));
evalcond[1]=((((-1.0)*r11*x1189))+(((-1.0)*r10*x1188))+((sj0*sj1)));
evalcond[2]=(((cj2*sj0))+((sj4*x1192))+(((-1.0)*r01*sj4*x1188)));
evalcond[3]=((((-1.0)*cj4*r11*x1188))+((cj4*x1190))+((cj0*sj2)));
evalcond[4]=(((sj4*x1190))+(((-1.0)*r11*sj4*x1188))+(((-1.0)*cj0*cj2)));
evalcond[5]=(((cj4*x1192))+(((-1.0)*sj0*sj2))+(((-1.0)*cj4*r01*x1188)));
evalcond[6]=((((-1.0)*r00*x1193))+((cj0*x1187))+(((-0.00043624)*cj0))+(((-1.0)*px))+(((-1.0)*sj0*x1186))+(((-1.0)*r01*x1191)));
evalcond[7]=(((cj0*x1186))+(((-1.0)*r10*x1193))+((sj0*x1187))+(((-1.0)*py))+(((-0.00043624)*sj0))+(((-1.0)*r11*x1191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1196=IKPowWithIntegerCheck(r22,-1);
if(!x1196.valid){
continue;
}
IkReal x1194=x1196.value;
IkReal x1195=(sj1*x1194);
CheckValue<IkReal> x1197=IKPowWithIntegerCheck(cj3,-1);
if(!x1197.valid){
continue;
}
if( IKabs((cj2*x1195*(x1197.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj2*x1195)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj2*x1195*(x1197.value)))+IKsqr((sj2*x1195))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj2*x1195*(x1197.value)), (sj2*x1195));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1198=IKsin(j4);
IkReal x1199=((1.0)*sj1);
IkReal x1200=(r22*x1198);
evalcond[0]=(cj1+((sj3*x1200)));
evalcond[1]=((((-1.0)*sj2*x1199))+((r22*(IKcos(j4)))));
evalcond[2]=((((-1.0)*cj2*x1199))+((cj3*x1200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1201=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1201);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1201);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1202=sj1*sj1;
IkReal x1203=(r00*sj1);
IkReal x1204=((16.0)*sj2);
IkReal x1205=(r10*sj1);
IkReal x1206=(r01*sj1);
IkReal x1207=(cj4*sj3);
IkReal x1208=((8.0)*cj3);
IkReal x1209=((4.0)*sj2);
IkReal x1210=(r11*sj1);
IkReal x1211=((8.0)*sj2);
IkReal x1212=((4.0)*sj3);
IkReal x1213=(cj1*cj2);
IkReal x1214=((4.0)*cj3);
IkReal x1215=((16.0)*cj3);
IkReal x1216=(cj3*x1213);
IkReal x1217=(r01*x1202);
IkReal x1218=(cj4*x1202);
IkReal x1219=(r10*sj3*x1202);
IkReal x1220=(r00*sj3*x1202);
IkReal x1221=((4.0)*x1207*x1213);
IkReal x1222=(((x1203*x1221))+((cj3*x1209*x1210)));
IkReal x1223=(((x1205*x1221))+((x1203*x1207*x1209)));
IkReal x1224=(((cj3*x1206*x1209))+((x1210*x1213*x1214))+((r10*x1214*x1218))+((r11*x1202*x1212)));
IkReal x1225=(((x1212*x1217))+((x1205*x1207*x1209))+((x1206*x1213*x1214))+((r00*x1214*x1218)));
j5eval[0]=((((0.5)*(IKabs((x1222+(((-1.0)*x1225)))))))+(((0.5)*(IKabs((x1223+(((-1.0)*x1224)))))))+(IKabs(((((-1.0)*x1205*x1208*x1213))+(((-1.0)*sj2*x1203*x1208))+(((-1.0)*x1206*x1207*x1211))+((r11*x1208*x1218))+(((-8.0)*x1207*x1210*x1213))+(((-8.0)*x1219)))))+(IKabs((x1224+(((-1.0)*x1223)))))+(((0.5)*(IKabs((((cj4*x1215*x1217))+(((-1.0)*x1203*x1213*x1215))+((cj3*x1204*x1205))+(((-16.0)*x1220))+(((-16.0)*x1206*x1207*x1213))+((x1204*x1207*x1210)))))))+(IKabs((((x1207*x1210*x1211))+(((-8.0)*x1206*x1207*x1213))+((sj2*x1205*x1208))+(((-1.0)*x1203*x1208*x1213))+((cj4*x1208*x1217))+(((-8.0)*x1220)))))+(IKabs((x1225+(((-1.0)*x1222)))))+(((0.5)*(IKabs(((((-1.0)*x1204*x1206*x1207))+(((-1.0)*cj3*x1203*x1204))+(((-16.0)*x1207*x1210*x1213))+((r11*x1215*x1218))+(((-1.0)*x1205*x1213*x1215))+(((-16.0)*x1219))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1226=sj1*sj1;
IkReal x1227=(cj4*sj3);
IkReal x1228=((8.0)*cj3);
IkReal x1229=(cj3*sj1);
IkReal x1230=(r01*sj2);
IkReal x1231=((16.0)*r10);
IkReal x1232=(cj1*cj2);
IkReal x1233=((16.0)*cj3);
IkReal x1234=((16.0)*sj1);
IkReal x1235=((4.0)*r10);
IkReal x1236=((4.0)*r11);
IkReal x1237=((8.0)*sj1);
IkReal x1238=(r00*sj1*sj2);
IkReal x1239=(sj3*x1226);
IkReal x1240=(cj4*r11*x1226);
IkReal x1241=((((4.0)*x1227*x1238))+((sj1*x1227*x1232*x1235)));
IkReal x1242=(((x1229*x1232*x1236))+(((4.0)*x1229*x1230))+((cj3*cj4*x1226*x1235))+((x1236*x1239)));
IkReal x1243=(x1242+(((-1.0)*x1241)));
IkReal x1244=((((-8.0)*r10*x1239))+(((-1.0)*r10*sj1*x1228*x1232))+(((-1.0)*x1228*x1238))+(((-1.0)*r11*x1227*x1232*x1237))+((x1228*x1240))+(((-1.0)*x1227*x1230*x1237)));
IkReal x1245=(x1241+(((-1.0)*x1242)));
op[0]=x1243;
op[1]=x1244;
op[2]=x1243;
op[3]=((((-16.0)*r00*sj2*x1229))+(((-1.0)*x1229*x1231*x1232))+((x1233*x1240))+(((-1.0)*r11*x1227*x1232*x1234))+(((-1.0)*x1231*x1239))+(((-1.0)*x1227*x1230*x1234)));
op[4]=x1245;
op[5]=x1244;
op[6]=x1245;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1246=sj1*sj1;
IkReal x1247=(cj4*sj3);
IkReal x1248=(cj3*r01);
IkReal x1249=((8.0)*sj1);
IkReal x1250=((16.0)*sj1);
IkReal x1251=(cj4*x1246);
IkReal x1252=((4.0)*sj1*sj2);
IkReal x1253=(r11*sj1*sj2);
IkReal x1254=(cj3*r10*sj2);
IkReal x1255=(cj1*cj2*r01);
IkReal x1256=(sj3*x1246);
IkReal x1257=((4.0)*cj1*cj2*sj1);
IkReal x1258=(cj3*r11*x1252);
IkReal x1259=(cj1*cj2*cj3*r00*sj1);
IkReal x1260=(r00*x1247*x1257);
IkReal x1261=(x1260+x1258);
IkReal x1262=((((4.0)*r01*x1256))+(((4.0)*cj3*r00*x1251))+((r10*x1247*x1252))+((x1248*x1257)));
IkReal x1263=((((8.0)*x1248*x1251))+((r11*sj2*x1247*x1249))+(((-1.0)*cj1*cj2*cj3*r00*x1249))+(((-1.0)*x1247*x1249*x1255))+((x1249*x1254))+(((-8.0)*r00*x1256)));
IkReal x1264=(x1262+(((-1.0)*x1261)));
j5evalpoly[0]=(x1261+((x1263*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*(((((-1.0)*cj1*cj2*cj3*r00*x1250))+(((-16.0)*r00*x1256))+((r11*sj2*x1247*x1250))+((x1250*x1254))+(((-1.0)*x1247*x1250*x1255))+(((16.0)*x1248*x1251))))))+(((htj5*htj5)*((x1261+(((-1.0)*x1262))))))+((x1264*(htj5*htj5*htj5*htj5)))+((x1264*(htj5*htj5*htj5*htj5*htj5*htj5)))+((htj5*x1263))+(((-1.0)*x1262)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0eval[3];
IkReal x1265=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1265);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1265);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1266=cj1*cj1;
IkReal x1267=cj2*cj2;
IkReal x1268=sj4*sj4;
IkReal x1269=cj5*cj5;
IkReal x1270=sj2*sj2;
IkReal x1271=sj5*sj5;
IkReal x1272=(x1267*x1268);
IkReal x1273=(x1266*x1268*x1270);
IkReal x1274=(((x1266*x1267))+(((-1.0)*x1267))+(((-1.0)*x1266)));
j0eval[0]=x1274;
j0eval[1]=IKsign(x1274);
j0eval[2]=(((x1269*x1272))+((x1269*x1273))+((x1271*x1273))+((x1271*x1272)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1275=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1275);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1275);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j0eval[0]=cj2;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x1276=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1276);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1276);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j0eval[0]=sj1;
j0eval[1]=cj1;
j0eval[2]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1277=(cj2*sj3);
IkReal x1278=(cj5*r11);
IkReal x1279=(r10*sj5);
IkReal x1280=(sj2*sj3);
if( IKabs((((x1277*x1279))+((x1277*x1278)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1279*x1280))+((x1278*x1280)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1277*x1279))+((x1277*x1278))))+IKsqr((((x1279*x1280))+((x1278*x1280))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x1277*x1279))+((x1277*x1278))), (((x1279*x1280))+((x1278*x1280))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1281=IKsin(j0);
IkReal x1282=IKcos(j0);
IkReal x1283=((1.0)*sj3);
IkReal x1284=(cj5*r11);
IkReal x1285=(r00*sj5);
IkReal x1286=(r10*sj5);
IkReal x1287=(cj5*r01);
IkReal x1288=((0.00043624)*x1282);
IkReal x1289=(cj2*x1282);
IkReal x1290=(sj2*x1281);
IkReal x1291=(cj2*x1281);
IkReal x1292=(x1291+((sj2*x1282)));
evalcond[0]=x1292;
evalcond[1]=((((-1.0)*x1289))+x1290);
evalcond[2]=(x1292+(((-1.0)*x1283*x1284))+(((-1.0)*x1283*x1286)));
evalcond[3]=(x1289+(((-1.0)*x1290))+(((-1.0)*x1283*x1285))+(((-1.0)*x1283*x1287)));
evalcond[4]=((((-0.4)*x1287))+(((-0.4)*x1285))+(((-1.0)*px))+((cj2*x1288))+(((-1.0)*x1288))+(((-0.00043624)*x1290)));
evalcond[5]=((((0.00043624)*x1291))+(((-0.00043624)*x1281))+(((-0.4)*x1286))+(((-0.4)*x1284))+(((-1.0)*py))+((sj2*x1288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1293=(cj5*r11);
IkReal x1294=(r10*sj5);
IkReal x1295=(sj2*sj3);
IkReal x1296=((1.0)*cj2*sj3);
if( IKabs(((((-1.0)*x1293*x1296))+(((-1.0)*x1294*x1296)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1294*x1295))+((x1293*x1295)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1293*x1296))+(((-1.0)*x1294*x1296))))+IKsqr((((x1294*x1295))+((x1293*x1295))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x1293*x1296))+(((-1.0)*x1294*x1296))), (((x1294*x1295))+((x1293*x1295))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1297=IKcos(j0);
IkReal x1298=IKsin(j0);
IkReal x1299=((1.0)*sj3);
IkReal x1300=(cj5*r11);
IkReal x1301=(r00*sj5);
IkReal x1302=(r10*sj5);
IkReal x1303=(cj5*r01);
IkReal x1304=((0.00043624)*x1297);
IkReal x1305=((1.0)*x1297);
IkReal x1306=(cj2*x1298);
IkReal x1307=(sj2*x1298);
IkReal x1308=(cj2*x1305);
IkReal x1309=((1.0)*x1307);
IkReal x1310=(x1308+x1309);
evalcond[0]=(x1306+(((-1.0)*sj2*x1305)));
evalcond[1]=((-1.0)*x1310);
evalcond[2]=(((sj2*x1297))+(((-1.0)*x1306))+(((-1.0)*x1299*x1300))+(((-1.0)*x1299*x1302)));
evalcond[3]=((((-1.0)*x1299*x1303))+(((-1.0)*x1299*x1301))+(((-1.0)*x1310)));
evalcond[4]=((((-1.0)*cj2*x1304))+(((-0.00043624)*x1307))+(((-1.0)*x1304))+(((-1.0)*px))+(((-0.4)*x1301))+(((-0.4)*x1303)));
evalcond[5]=(((sj2*x1304))+(((-0.00043624)*x1306))+(((-1.0)*py))+(((-0.4)*x1302))+(((-0.4)*x1300))+(((-0.00043624)*x1298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1311=((1.0)*cj3);
if( IKabs(((((-1.0)*cj5*r11*x1311))+(((-1.0)*r10*sj5*x1311)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj5*x1311))+(((-1.0)*cj5*r01*x1311)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r11*x1311))+(((-1.0)*r10*sj5*x1311))))+IKsqr(((((-1.0)*r00*sj5*x1311))+(((-1.0)*cj5*r01*x1311))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj5*r11*x1311))+(((-1.0)*r10*sj5*x1311))), ((((-1.0)*r00*sj5*x1311))+(((-1.0)*cj5*r01*x1311))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1312=IKcos(j0);
IkReal x1313=IKsin(j0);
IkReal x1314=(cj3*r01);
IkReal x1315=(cj3*sj5);
IkReal x1316=(cj5*r11);
IkReal x1317=((0.4)*sj5);
IkReal x1318=(sj2*x1312);
IkReal x1319=(sj2*x1313);
IkReal x1320=((1.0)*cj3*cj4*cj5);
evalcond[0]=((-2292.31615624427)*pz*x1313);
evalcond[1]=((2292.31615624427)*pz*x1312);
evalcond[2]=(x1312+((r00*x1315))+((cj5*x1314)));
evalcond[3]=(x1313+((r10*x1315))+((cj3*x1316)));
evalcond[4]=(x1318+((cj4*r11*x1315))+(((-1.0)*r10*x1320)));
evalcond[5]=(((cj4*sj5*x1314))+(((-1.0)*x1319))+(((-1.0)*r00*x1320)));
evalcond[6]=((((-0.00043624)*x1319))+(((0.41956376)*x1312))+(((-1.0)*r00*x1317))+(((-1.0)*px))+(((-0.4)*cj5*r01)));
evalcond[7]=((((0.41956376)*x1313))+(((-0.4)*x1316))+(((-1.0)*py))+(((0.00043624)*x1318))+(((-1.0)*r10*x1317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1321=(cj3*sj5);
IkReal x1322=(cj3*cj5);
if( IKabs((((r11*x1322))+((r10*x1321)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1322))+((r00*x1321)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1322))+((r10*x1321))))+IKsqr((((r01*x1322))+((r00*x1321))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x1322))+((r10*x1321))), (((r01*x1322))+((r00*x1321))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1323=IKcos(j0);
IkReal x1324=IKsin(j0);
IkReal x1325=(cj3*cj4);
IkReal x1326=((1.0)*cj5);
IkReal x1327=(cj3*cj5);
IkReal x1328=(cj3*sj5);
IkReal x1329=((0.4)*cj5);
IkReal x1330=((0.4)*sj5);
IkReal x1331=(sj2*x1323);
IkReal x1332=((1.0)*x1324);
evalcond[0]=((2292.31615624427)*pz*x1324);
evalcond[1]=((-2292.31615624427)*pz*x1323);
evalcond[2]=(((r01*x1327))+((r00*x1328))+(((-1.0)*x1323)));
evalcond[3]=(((r11*x1327))+((r10*x1328))+(((-1.0)*x1332)));
evalcond[4]=(x1331+((r11*sj5*x1325))+(((-1.0)*r10*x1325*x1326)));
evalcond[5]=(((r01*sj5*x1325))+(((-1.0)*sj2*x1332))+(((-1.0)*r00*x1325*x1326)));
evalcond[6]=((((-1.0)*r01*x1329))+(((-1.0)*px))+(((-0.00043624)*sj2*x1324))+(((-1.0)*r00*x1330))+(((-0.42043624)*x1323)));
evalcond[7]=((((0.00043624)*x1331))+(((-1.0)*r11*x1329))+(((-1.0)*py))+(((-1.0)*r10*x1330))+(((-0.42043624)*x1324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1333=(cj5*sj4);
IkReal x1334=(sj4*sj5);
if( IKabs((((r01*x1334))+(((-1.0)*r00*x1333)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1334))+((r10*x1333)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1334))+(((-1.0)*r00*x1333))))+IKsqr(((((-1.0)*r11*x1334))+((r10*x1333))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1334))+(((-1.0)*r00*x1333))), ((((-1.0)*r11*x1334))+((r10*x1333))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1335=IKsin(j0);
IkReal x1336=IKcos(j0);
IkReal x1337=(cj5*sj4);
IkReal x1338=((1.0)*sj5);
IkReal x1339=(cj3*cj5);
IkReal x1340=(cj3*sj5);
IkReal x1341=((0.4)*cj5);
IkReal x1342=((0.4)*sj5);
IkReal x1343=((0.00043624)*x1336);
IkReal x1344=(sj1*x1335);
IkReal x1345=((1.0)*cj5*sj3);
IkReal x1346=(sj1*x1336);
IkReal x1347=(cj1*x1335);
evalcond[0]=(x1335+((r00*x1337))+(((-1.0)*r01*sj4*x1338)));
evalcond[1]=(x1346+((r01*x1339))+((r00*x1340)));
evalcond[2]=(x1344+((r11*x1339))+((r10*x1340)));
evalcond[3]=((((-1.0)*x1336))+(((-1.0)*r11*sj4*x1338))+((r10*x1337)));
evalcond[4]=(x1347+(((-1.0)*r11*x1345))+(((-1.0)*r10*sj3*x1338)));
evalcond[5]=((((-1.0)*r00*sj3*x1338))+(((-1.0)*r01*x1345))+((cj1*x1336)));
evalcond[6]=(((cj1*x1343))+(((-1.0)*x1343))+(((-1.0)*r00*x1342))+(((-1.0)*r01*x1341))+(((-1.0)*px))+(((0.42)*x1346)));
evalcond[7]=((((-0.00043624)*x1335))+(((-1.0)*r11*x1341))+(((-1.0)*py))+(((0.00043624)*x1347))+(((-1.0)*r10*x1342))+(((0.42)*x1344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1348=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1348)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1348))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1348))))+IKsqr(((((-1.0)*cj5*r10*x1348))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1348))), ((((-1.0)*cj5*r10*x1348))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1349=IKcos(j0);
IkReal x1350=IKsin(j0);
IkReal x1351=(cj5*sj4);
IkReal x1352=((1.0)*sj5);
IkReal x1353=(cj3*cj5);
IkReal x1354=(cj3*sj5);
IkReal x1355=((0.4)*cj5);
IkReal x1356=((0.4)*sj5);
IkReal x1357=((0.00043624)*x1349);
IkReal x1358=(sj1*x1350);
IkReal x1359=((1.0)*cj5*sj3);
IkReal x1360=((1.0)*x1350);
IkReal x1361=(sj1*x1349);
IkReal x1362=((0.00043624)*x1350);
evalcond[0]=(x1349+((r10*x1351))+(((-1.0)*r11*sj4*x1352)));
evalcond[1]=(x1361+((r00*x1354))+((r01*x1353)));
evalcond[2]=(x1358+((r10*x1354))+((r11*x1353)));
evalcond[3]=((((-1.0)*r01*sj4*x1352))+((r00*x1351))+(((-1.0)*x1360)));
evalcond[4]=((((-1.0)*r10*sj3*x1352))+(((-1.0)*r11*x1359))+(((-1.0)*cj1*x1360)));
evalcond[5]=((((-1.0)*r01*x1359))+(((-1.0)*cj1*x1349))+(((-1.0)*r00*sj3*x1352)));
evalcond[6]=((((-1.0)*x1357))+(((0.42)*x1361))+(((-1.0)*px))+(((-1.0)*cj1*x1357))+(((-1.0)*r00*x1356))+(((-1.0)*r01*x1355)));
evalcond[7]=((((-1.0)*r10*x1356))+(((0.42)*x1358))+(((-1.0)*r11*x1355))+(((-1.0)*py))+(((-1.0)*cj1*x1362))+(((-1.0)*x1362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1363=(sj3*sj5);
IkReal x1364=(cj5*sj3);
if( IKabs(((((-1.0)*r01*x1364))+(((-1.0)*r00*x1363)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1363))+((r11*x1364)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1364))+(((-1.0)*r00*x1363))))+IKsqr((((r10*x1363))+((r11*x1364))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x1364))+(((-1.0)*r00*x1363))), (((r10*x1363))+((r11*x1364))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1365=IKcos(j0);
IkReal x1366=IKsin(j0);
IkReal x1367=(cj4*sj3);
IkReal x1368=((1.0)*cj5);
IkReal x1369=((0.4)*cj5);
IkReal x1370=((0.4)*sj5);
IkReal x1371=((0.00043624)*x1365);
IkReal x1372=((0.00043624)*x1366);
IkReal x1373=(sj1*x1366);
IkReal x1374=((1.0)*sj3*sj5);
IkReal x1375=(sj1*x1365);
evalcond[0]=(cj1*x1365);
evalcond[1]=(cj1*x1366);
evalcond[2]=(x1365+(((-1.0)*r10*x1374))+(((-1.0)*r11*sj3*x1368)));
evalcond[3]=((((-1.0)*r00*x1374))+(((-1.0)*x1366))+(((-1.0)*r01*sj3*x1368)));
evalcond[4]=(x1375+((r01*sj5*x1367))+(((-1.0)*r00*x1367*x1368)));
evalcond[5]=(x1373+(((-1.0)*r10*x1367*x1368))+((r11*sj5*x1367)));
evalcond[6]=((((-1.0)*r00*x1370))+(((-1.0)*x1372))+(((-1.0)*x1371))+(((-1.0)*px))+(((-1.0)*r01*x1369))+(((0.42)*x1375)));
evalcond[7]=(x1371+(((-1.0)*r11*x1369))+(((-1.0)*x1372))+(((-1.0)*py))+(((-1.0)*r10*x1370))+(((0.42)*x1373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1376=(sj3*sj5);
IkReal x1377=(cj5*sj3);
if( IKabs((((r00*x1376))+((r01*x1377)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1377))+(((-1.0)*r10*x1376)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1376))+((r01*x1377))))+IKsqr(((((-1.0)*r11*x1377))+(((-1.0)*r10*x1376))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1376))+((r01*x1377))), ((((-1.0)*r11*x1377))+(((-1.0)*r10*x1376))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1378=IKsin(j0);
IkReal x1379=IKcos(j0);
IkReal x1380=(cj4*sj3);
IkReal x1381=((1.0)*cj5);
IkReal x1382=((0.4)*cj5);
IkReal x1383=((0.4)*sj5);
IkReal x1384=((0.00043624)*x1378);
IkReal x1385=((0.00043624)*x1379);
IkReal x1386=(sj1*x1378);
IkReal x1387=((-1.0)*cj1);
IkReal x1388=((1.0)*sj3*sj5);
IkReal x1389=(sj1*x1379);
evalcond[0]=(x1379*x1387);
evalcond[1]=(x1378*x1387);
evalcond[2]=(x1378+(((-1.0)*r00*x1388))+(((-1.0)*r01*sj3*x1381)));
evalcond[3]=((((-1.0)*x1379))+(((-1.0)*r10*x1388))+(((-1.0)*r11*sj3*x1381)));
evalcond[4]=(x1389+(((-1.0)*r00*x1380*x1381))+((r01*sj5*x1380)));
evalcond[5]=(x1386+(((-1.0)*r10*x1380*x1381))+((r11*sj5*x1380)));
evalcond[6]=((((-1.0)*x1385))+x1384+(((0.42)*x1389))+(((-1.0)*r00*x1383))+(((-1.0)*px))+(((-1.0)*r01*x1382)));
evalcond[7]=((((-1.0)*x1385))+(((-1.0)*x1384))+(((-1.0)*r11*x1382))+(((0.42)*x1386))+(((-1.0)*r10*x1383))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1390=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1390);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1390);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=1.0;
j4=0;
IkReal x1391=cj2*cj2;
IkReal x1392=((12500000.0)*px);
IkReal x1393=((12500000.0)*py);
IkReal x1394=((5000000.0)*sj5);
IkReal x1395=((5000000.0)*cj5*r11);
IkReal x1396=((5000000.0)*cj5*r01);
j0eval[0]=((2.0)+(((-1.0)*x1391)));
j0eval[1]=((IKabs((((r10*sj2*x1394))+(((-1.0)*r00*x1394))+((sj2*x1395))+((sj2*x1393))+(((-1.0)*x1396))+(((-1.0)*x1392)))))+(IKabs(((((-1.0)*r10*x1394))+(((-1.0)*r00*sj2*x1394))+(((-1.0)*sj2*x1392))+(((-1.0)*sj2*x1396))+(((-1.0)*x1395))+(((-1.0)*x1393))))));
j0eval[2]=IKsign(((10906.0)+(((-5453.0)*x1391))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x1397=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1397);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1397);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=1.0;
j4=0;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1398=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1398);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1398);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=1.0;
j4=0;
j0eval[0]=((1.0)+(((-1.0)*(cj2*cj2))));
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1399=((5453.0)*sj5);
IkReal x1400=(r10*sj3);
IkReal x1401=(cj3*r11);
IkReal x1402=((5000000.0)*sj2);
IkReal x1403=(cj5*r11*sj3);
IkReal x1404=(cj3*cj5*r10);
CheckValue<IkReal> x1405=IKPowWithIntegerCheck(((5453.0)+(((-5453.0)*(cj2*cj2)))),-1);
if(!x1405.valid){
continue;
}
CheckValue<IkReal> x1406=IKPowWithIntegerCheck(sj2,-1);
if(!x1406.valid){
continue;
}
if( IKabs(((x1405.value)*(((((-1.0)*cj5*r01*x1402))+(((-1.0)*x1399*x1400))+(((-1.0)*r00*sj5*x1402))+((x1399*x1401))+(((-5453.0)*x1403))+(((-5453.0)*x1404))+(((-12500000.0)*px*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1406.value)*(((((-1.0)*sj5*x1401))+((sj5*x1400))+x1403+x1404)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1405.value)*(((((-1.0)*cj5*r01*x1402))+(((-1.0)*x1399*x1400))+(((-1.0)*r00*sj5*x1402))+((x1399*x1401))+(((-5453.0)*x1403))+(((-5453.0)*x1404))+(((-12500000.0)*px*sj2))))))+IKsqr(((x1406.value)*(((((-1.0)*sj5*x1401))+((sj5*x1400))+x1403+x1404))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1405.value)*(((((-1.0)*cj5*r01*x1402))+(((-1.0)*x1399*x1400))+(((-1.0)*r00*sj5*x1402))+((x1399*x1401))+(((-5453.0)*x1403))+(((-5453.0)*x1404))+(((-12500000.0)*px*sj2))))), ((x1406.value)*(((((-1.0)*sj5*x1401))+((sj5*x1400))+x1403+x1404))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1407=IKcos(j0);
IkReal x1408=IKsin(j0);
IkReal x1409=((1.0)*cj5);
IkReal x1410=((0.4)*sj5);
IkReal x1411=((0.4)*cj5);
IkReal x1412=(cj3*sj5);
IkReal x1413=((0.00043624)*x1407);
IkReal x1414=((0.00043624)*x1408);
IkReal x1415=((1.0)*sj3*sj5);
evalcond[0]=((((-1.0)*x1413))+(((-1.0)*px))+(((-1.0)*r00*x1410))+(((-1.0)*sj2*x1414))+(((-1.0)*r01*x1411)));
evalcond[1]=(((sj2*x1413))+(((-1.0)*r10*x1410))+(((-1.0)*x1414))+(((-1.0)*py))+(((-1.0)*r11*x1411)));
evalcond[2]=((((-1.0)*r10*x1415))+((sj2*x1407))+(((-1.0)*r11*sj3*x1409))+((r11*x1412))+(((-1.0)*cj3*r10*x1409)));
evalcond[3]=((((-1.0)*sj2*x1408))+(((-1.0)*cj3*r00*x1409))+(((-1.0)*r01*sj3*x1409))+((r01*x1412))+(((-1.0)*r00*x1415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1416=(cj5*r11);
IkReal x1417=(r10*sj5);
IkReal x1418=((1.0)*cj3*r11*sj5);
IkReal x1419=(((cj3*cj5*r10))+((sj3*x1417))+((sj3*x1416)));
CheckValue<IkReal> x1420=IKPowWithIntegerCheck(sj2,-1);
if(!x1420.valid){
continue;
}
if( IKabs(((((-1.0)*x1418))+(((-2292.31615624427)*py))+(((-916.926462497708)*x1416))+(((-916.926462497708)*x1417))+x1419)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1420.value)*(((((-1.0)*x1418))+x1419)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1418))+(((-2292.31615624427)*py))+(((-916.926462497708)*x1416))+(((-916.926462497708)*x1417))+x1419))+IKsqr(((x1420.value)*(((((-1.0)*x1418))+x1419))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x1418))+(((-2292.31615624427)*py))+(((-916.926462497708)*x1416))+(((-916.926462497708)*x1417))+x1419), ((x1420.value)*(((((-1.0)*x1418))+x1419))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1421=IKcos(j0);
IkReal x1422=IKsin(j0);
IkReal x1423=((1.0)*cj5);
IkReal x1424=((0.4)*sj5);
IkReal x1425=((0.4)*cj5);
IkReal x1426=(cj3*sj5);
IkReal x1427=((0.00043624)*x1421);
IkReal x1428=((0.00043624)*x1422);
IkReal x1429=((1.0)*sj3*sj5);
evalcond[0]=((((-1.0)*px))+(((-1.0)*sj2*x1428))+(((-1.0)*r01*x1425))+(((-1.0)*r00*x1424))+(((-1.0)*x1427)));
evalcond[1]=((((-1.0)*r10*x1424))+(((-1.0)*r11*x1425))+(((-1.0)*py))+((sj2*x1427))+(((-1.0)*x1428)));
evalcond[2]=(((r11*x1426))+(((-1.0)*r10*x1429))+(((-1.0)*cj3*r10*x1423))+((sj2*x1421))+(((-1.0)*r11*sj3*x1423)));
evalcond[3]=(((r01*x1426))+(((-1.0)*sj2*x1422))+(((-1.0)*r01*sj3*x1423))+(((-1.0)*r00*x1429))+(((-1.0)*cj3*r00*x1423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1430=((12500000.0)*sj2);
IkReal x1431=((5000000.0)*sj5);
IkReal x1432=((5000000.0)*cj5*r11);
IkReal x1433=((5000000.0)*cj5*r01);
CheckValue<IkReal> x1434=IKPowWithIntegerCheck(IKsign(((10906.0)+(((-5453.0)*(cj2*cj2))))),-1);
if(!x1434.valid){
continue;
}
CheckValue<IkReal> x1435 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj2*x1431))+(((-12500000.0)*py))+(((-1.0)*x1432))+(((-1.0)*px*x1430))+(((-1.0)*r10*x1431))+(((-1.0)*sj2*x1433)))),IkReal(((((-12500000.0)*px))+((r10*sj2*x1431))+((sj2*x1432))+(((-1.0)*x1433))+((py*x1430))+(((-1.0)*r00*x1431)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1435.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1434.value)))+(x1435.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1436=IKcos(j0);
IkReal x1437=IKsin(j0);
IkReal x1438=((1.0)*cj5);
IkReal x1439=((0.4)*sj5);
IkReal x1440=((0.4)*cj5);
IkReal x1441=(cj3*sj5);
IkReal x1442=((0.00043624)*x1436);
IkReal x1443=((0.00043624)*x1437);
IkReal x1444=((1.0)*sj3*sj5);
evalcond[0]=((((-1.0)*r01*x1440))+(((-1.0)*sj2*x1443))+(((-1.0)*px))+(((-1.0)*r00*x1439))+(((-1.0)*x1442)));
evalcond[1]=((((-1.0)*r11*x1440))+(((-1.0)*py))+(((-1.0)*r10*x1439))+((sj2*x1442))+(((-1.0)*x1443)));
evalcond[2]=(((r11*x1441))+((sj2*x1436))+(((-1.0)*r10*x1444))+(((-1.0)*r11*sj3*x1438))+(((-1.0)*cj3*r10*x1438)));
evalcond[3]=((((-1.0)*r00*x1444))+(((-1.0)*sj2*x1437))+(((-1.0)*r01*sj3*x1438))+(((-1.0)*cj3*r00*x1438))+((r01*x1441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1445=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1445);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1445);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1446=cj2*cj2;
IkReal x1447=((12500000.0)*px);
IkReal x1448=((12500000.0)*py);
IkReal x1449=((5000000.0)*sj5);
IkReal x1450=((5000000.0)*cj5*r11);
IkReal x1451=((5000000.0)*cj5*r01);
j0eval[0]=((2.0)+(((-1.0)*x1446)));
j0eval[1]=((IKabs(((((-1.0)*sj2*x1447))+(((-1.0)*x1450))+(((-1.0)*r00*sj2*x1449))+(((-1.0)*r10*x1449))+(((-1.0)*x1448))+(((-1.0)*sj2*x1451)))))+(IKabs((((r10*sj2*x1449))+(((-1.0)*r00*x1449))+((sj2*x1450))+(((-1.0)*x1451))+((sj2*x1448))+(((-1.0)*x1447))))));
j0eval[2]=IKsign(((10906.0)+(((-5453.0)*x1446))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x1452=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1452);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1452);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1453=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1453);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1453);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j0eval[0]=((1.0)+(((-1.0)*(cj2*cj2))));
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1454=((5453.0)*sj5);
IkReal x1455=(r10*sj3);
IkReal x1456=(cj3*r11);
IkReal x1457=((5000000.0)*sj2);
IkReal x1458=(cj3*cj5*r10);
IkReal x1459=(cj5*r11*sj3);
CheckValue<IkReal> x1460=IKPowWithIntegerCheck(((5453.0)+(((-5453.0)*(cj2*cj2)))),-1);
if(!x1460.valid){
continue;
}
CheckValue<IkReal> x1461=IKPowWithIntegerCheck(sj2,-1);
if(!x1461.valid){
continue;
}
if( IKabs(((x1460.value)*(((((5453.0)*x1458))+(((-1.0)*cj5*r01*x1457))+(((-1.0)*r00*sj5*x1457))+(((-1.0)*x1454*x1455))+(((-1.0)*x1454*x1456))+(((-5453.0)*x1459))+(((-12500000.0)*px*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1461.value)*(((((-1.0)*x1458))+((sj5*x1455))+((sj5*x1456))+x1459)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1460.value)*(((((5453.0)*x1458))+(((-1.0)*cj5*r01*x1457))+(((-1.0)*r00*sj5*x1457))+(((-1.0)*x1454*x1455))+(((-1.0)*x1454*x1456))+(((-5453.0)*x1459))+(((-12500000.0)*px*sj2))))))+IKsqr(((x1461.value)*(((((-1.0)*x1458))+((sj5*x1455))+((sj5*x1456))+x1459))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1460.value)*(((((5453.0)*x1458))+(((-1.0)*cj5*r01*x1457))+(((-1.0)*r00*sj5*x1457))+(((-1.0)*x1454*x1455))+(((-1.0)*x1454*x1456))+(((-5453.0)*x1459))+(((-12500000.0)*px*sj2))))), ((x1461.value)*(((((-1.0)*x1458))+((sj5*x1455))+((sj5*x1456))+x1459))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1462=IKcos(j0);
IkReal x1463=IKsin(j0);
IkReal x1464=((0.4)*sj5);
IkReal x1465=(cj3*cj5);
IkReal x1466=((1.0)*sj3);
IkReal x1467=(cj5*r11);
IkReal x1468=(cj5*r01);
IkReal x1469=((1.0)*cj3*sj5);
IkReal x1470=((0.00043624)*x1462);
IkReal x1471=((0.00043624)*x1463);
evalcond[0]=((((-0.4)*x1468))+(((-1.0)*sj2*x1471))+(((-1.0)*px))+(((-1.0)*r00*x1464))+(((-1.0)*x1470)));
evalcond[1]=((((-0.4)*x1467))+(((-1.0)*py))+((sj2*x1470))+(((-1.0)*x1471))+(((-1.0)*r10*x1464)));
evalcond[2]=(((sj2*x1462))+(((-1.0)*x1466*x1467))+(((-1.0)*r10*sj5*x1466))+(((-1.0)*r11*x1469))+((r10*x1465)));
evalcond[3]=((((-1.0)*sj2*x1463))+(((-1.0)*x1466*x1468))+((r00*x1465))+(((-1.0)*r00*sj5*x1466))+(((-1.0)*r01*x1469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1472=(cj5*r11);
IkReal x1473=(r10*sj5);
IkReal x1474=((1.0)*cj3*cj5*r10);
IkReal x1475=(((cj3*r11*sj5))+((sj3*x1473))+((sj3*x1472)));
CheckValue<IkReal> x1476=IKPowWithIntegerCheck(sj2,-1);
if(!x1476.valid){
continue;
}
if( IKabs(((((-916.926462497708)*x1472))+(((-916.926462497708)*x1473))+(((-2292.31615624427)*py))+x1475+(((-1.0)*x1474)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1476.value)*((x1475+(((-1.0)*x1474)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-916.926462497708)*x1472))+(((-916.926462497708)*x1473))+(((-2292.31615624427)*py))+x1475+(((-1.0)*x1474))))+IKsqr(((x1476.value)*((x1475+(((-1.0)*x1474))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-916.926462497708)*x1472))+(((-916.926462497708)*x1473))+(((-2292.31615624427)*py))+x1475+(((-1.0)*x1474))), ((x1476.value)*((x1475+(((-1.0)*x1474))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1477=IKcos(j0);
IkReal x1478=IKsin(j0);
IkReal x1479=((0.4)*sj5);
IkReal x1480=(cj3*cj5);
IkReal x1481=((1.0)*sj3);
IkReal x1482=(cj5*r11);
IkReal x1483=(cj5*r01);
IkReal x1484=((1.0)*cj3*sj5);
IkReal x1485=((0.00043624)*x1477);
IkReal x1486=((0.00043624)*x1478);
evalcond[0]=((((-1.0)*x1485))+(((-0.4)*x1483))+(((-1.0)*r00*x1479))+(((-1.0)*px))+(((-1.0)*sj2*x1486)));
evalcond[1]=(((sj2*x1485))+(((-1.0)*x1486))+(((-0.4)*x1482))+(((-1.0)*r10*x1479))+(((-1.0)*py)));
evalcond[2]=((((-1.0)*r10*sj5*x1481))+(((-1.0)*r11*x1484))+((r10*x1480))+(((-1.0)*x1481*x1482))+((sj2*x1477)));
evalcond[3]=((((-1.0)*r01*x1484))+(((-1.0)*x1481*x1483))+((r00*x1480))+(((-1.0)*r00*sj5*x1481))+(((-1.0)*sj2*x1478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1487=((12500000.0)*sj2);
IkReal x1488=((5000000.0)*sj5);
IkReal x1489=((5000000.0)*cj5*r11);
IkReal x1490=((5000000.0)*cj5*r01);
CheckValue<IkReal> x1491=IKPowWithIntegerCheck(IKsign(((10906.0)+(((-5453.0)*(cj2*cj2))))),-1);
if(!x1491.valid){
continue;
}
CheckValue<IkReal> x1492 = IKatan2WithCheck(IkReal(((((-1.0)*x1489))+(((-12500000.0)*py))+(((-1.0)*px*x1487))+(((-1.0)*sj2*x1490))+(((-1.0)*r00*sj2*x1488))+(((-1.0)*r10*x1488)))),IkReal((((sj2*x1489))+(((-12500000.0)*px))+((py*x1487))+(((-1.0)*r00*x1488))+(((-1.0)*x1490))+((r10*sj2*x1488)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1492.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1491.value)))+(x1492.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1493=IKcos(j0);
IkReal x1494=IKsin(j0);
IkReal x1495=((0.4)*sj5);
IkReal x1496=(cj3*cj5);
IkReal x1497=((1.0)*sj3);
IkReal x1498=(cj5*r11);
IkReal x1499=(cj5*r01);
IkReal x1500=((1.0)*cj3*sj5);
IkReal x1501=((0.00043624)*x1493);
IkReal x1502=((0.00043624)*x1494);
evalcond[0]=((((-1.0)*sj2*x1502))+(((-1.0)*x1501))+(((-0.4)*x1499))+(((-1.0)*r00*x1495))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*x1502))+(((-0.4)*x1498))+(((-1.0)*py))+(((-1.0)*r10*x1495))+((sj2*x1501)));
evalcond[2]=(((r10*x1496))+((sj2*x1493))+(((-1.0)*r10*sj5*x1497))+(((-1.0)*x1497*x1498))+(((-1.0)*r11*x1500)));
evalcond[3]=(((r00*x1496))+(((-1.0)*r01*x1500))+(((-1.0)*x1497*x1499))+(((-1.0)*r00*sj5*x1497))+(((-1.0)*sj2*x1494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1510=IKPowWithIntegerCheck(sj1,-1);
if(!x1510.valid){
continue;
}
IkReal x1503=x1510.value;
IkReal x1504=((1.0)*cj5);
IkReal x1505=(sj1*sj4);
IkReal x1506=(cj2*cj3);
IkReal x1507=(r10*sj5);
IkReal x1508=(cj4*cj5*r10*sj3);
IkReal x1509=(cj4*r11*sj3*sj5);
CheckValue<IkReal> x1511=IKPowWithIntegerCheck(cj1,-1);
if(!x1511.valid){
continue;
}
CheckValue<IkReal> x1512=IKPowWithIntegerCheck(sj2,-1);
if(!x1512.valid){
continue;
}
if( IKabs((x1503*(((((-1.0)*x1509))+(((-1.0)*cj3*x1507))+(((-1.0)*cj3*r11*x1504))+x1508)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1503*(x1511.value)*(x1512.value)*((((cj2*x1509))+(((-1.0)*cj2*cj4*r10*sj3*x1504))+((r01*sj5*x1505))+((x1506*x1507))+((cj5*r11*x1506))+(((-1.0)*r00*x1504*x1505)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1503*(((((-1.0)*x1509))+(((-1.0)*cj3*x1507))+(((-1.0)*cj3*r11*x1504))+x1508))))+IKsqr((x1503*(x1511.value)*(x1512.value)*((((cj2*x1509))+(((-1.0)*cj2*cj4*r10*sj3*x1504))+((r01*sj5*x1505))+((x1506*x1507))+((cj5*r11*x1506))+(((-1.0)*r00*x1504*x1505))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1503*(((((-1.0)*x1509))+(((-1.0)*cj3*x1507))+(((-1.0)*cj3*r11*x1504))+x1508))), (x1503*(x1511.value)*(x1512.value)*((((cj2*x1509))+(((-1.0)*cj2*cj4*r10*sj3*x1504))+((r01*sj5*x1505))+((x1506*x1507))+((cj5*r11*x1506))+(((-1.0)*r00*x1504*x1505))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1513=IKsin(j0);
IkReal x1514=IKcos(j0);
IkReal x1515=(r10*sj3);
IkReal x1516=(cj3*r00);
IkReal x1517=(cj5*sj4);
IkReal x1518=(r01*sj5);
IkReal x1519=((1.0)*sj4);
IkReal x1520=(cj3*r10);
IkReal x1521=(cj1*cj2);
IkReal x1522=(cj3*cj5);
IkReal x1523=(cj4*sj3);
IkReal x1524=(r00*sj3);
IkReal x1525=(cj3*cj4);
IkReal x1526=((1.0)*sj5);
IkReal x1527=(r11*sj5);
IkReal x1528=((0.4)*cj5);
IkReal x1529=((0.4)*sj5);
IkReal x1530=((0.00043624)*x1514);
IkReal x1531=((1.0)*cj4*cj5);
IkReal x1532=((0.00043624)*x1513);
IkReal x1533=(sj1*x1513);
IkReal x1534=(sj2*x1514);
IkReal x1535=((1.0)*cj5*sj3);
IkReal x1536=(sj1*x1514);
IkReal x1537=(sj2*x1513);
evalcond[0]=(((cj2*x1513))+((cj1*x1534))+(((-1.0)*x1518*x1519))+((r00*x1517)));
evalcond[1]=((((-1.0)*x1519*x1527))+((cj1*x1537))+((r10*x1517))+(((-1.0)*cj2*x1514)));
evalcond[2]=(((sj5*x1516))+(((-1.0)*cj5*r00*x1523))+((x1518*x1523))+((r01*x1522))+x1536);
evalcond[3]=(((sj5*x1520))+(((-1.0)*x1515*x1531))+((r11*x1522))+((x1523*x1527))+x1533);
evalcond[4]=((((-1.0)*r11*x1535))+((x1525*x1527))+((x1513*x1521))+(((-1.0)*x1515*x1526))+x1534+(((-1.0)*x1520*x1531)));
evalcond[5]=((((-1.0)*x1537))+(((-1.0)*r01*x1535))+(((-1.0)*x1524*x1526))+((x1518*x1525))+(((-1.0)*x1516*x1531))+((x1514*x1521)));
evalcond[6]=((((-1.0)*sj2*x1532))+(((-1.0)*r00*x1529))+(((-1.0)*r01*x1528))+(((-1.0)*x1530))+(((-1.0)*px))+(((0.42)*x1536))+((x1521*x1530)));
evalcond[7]=((((-1.0)*r11*x1528))+((sj2*x1530))+(((-1.0)*x1532))+(((-1.0)*py))+(((0.42)*x1533))+((x1521*x1532))+(((-1.0)*r10*x1529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1546=IKPowWithIntegerCheck(sj1,-1);
if(!x1546.valid){
continue;
}
IkReal x1538=x1546.value;
IkReal x1539=(r01*sj5);
IkReal x1540=(sj1*sj4);
IkReal x1541=((1.0)*cj5);
IkReal x1542=(cj3*r01);
IkReal x1543=(cj4*sj3);
IkReal x1544=(cj1*sj2);
IkReal x1545=(cj3*r00*sj5);
CheckValue<IkReal> x1547=IKPowWithIntegerCheck(cj2,-1);
if(!x1547.valid){
continue;
}
if( IKabs((x1538*(x1547.value)*((((cj5*x1542*x1544))+((x1539*x1540))+((x1544*x1545))+(((-1.0)*r00*x1541*x1543*x1544))+((x1539*x1543*x1544))+(((-1.0)*r00*x1540*x1541)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1538*(((((-1.0)*x1545))+(((-1.0)*x1539*x1543))+(((-1.0)*x1541*x1542))+((cj5*r00*x1543)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1538*(x1547.value)*((((cj5*x1542*x1544))+((x1539*x1540))+((x1544*x1545))+(((-1.0)*r00*x1541*x1543*x1544))+((x1539*x1543*x1544))+(((-1.0)*r00*x1540*x1541))))))+IKsqr((x1538*(((((-1.0)*x1545))+(((-1.0)*x1539*x1543))+(((-1.0)*x1541*x1542))+((cj5*r00*x1543))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1538*(x1547.value)*((((cj5*x1542*x1544))+((x1539*x1540))+((x1544*x1545))+(((-1.0)*r00*x1541*x1543*x1544))+((x1539*x1543*x1544))+(((-1.0)*r00*x1540*x1541))))), (x1538*(((((-1.0)*x1545))+(((-1.0)*x1539*x1543))+(((-1.0)*x1541*x1542))+((cj5*r00*x1543))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1548=IKsin(j0);
IkReal x1549=IKcos(j0);
IkReal x1550=(r10*sj3);
IkReal x1551=(cj3*r00);
IkReal x1552=(cj5*sj4);
IkReal x1553=(r01*sj5);
IkReal x1554=((1.0)*sj4);
IkReal x1555=(cj3*r10);
IkReal x1556=(cj1*cj2);
IkReal x1557=(cj3*cj5);
IkReal x1558=(cj4*sj3);
IkReal x1559=(r00*sj3);
IkReal x1560=(cj3*cj4);
IkReal x1561=((1.0)*sj5);
IkReal x1562=(r11*sj5);
IkReal x1563=((0.4)*cj5);
IkReal x1564=((0.4)*sj5);
IkReal x1565=((0.00043624)*x1549);
IkReal x1566=((1.0)*cj4*cj5);
IkReal x1567=((0.00043624)*x1548);
IkReal x1568=(sj1*x1548);
IkReal x1569=(sj2*x1549);
IkReal x1570=((1.0)*cj5*sj3);
IkReal x1571=(sj1*x1549);
IkReal x1572=(sj2*x1548);
evalcond[0]=(((r00*x1552))+((cj1*x1569))+((cj2*x1548))+(((-1.0)*x1553*x1554)));
evalcond[1]=(((cj1*x1572))+(((-1.0)*cj2*x1549))+(((-1.0)*x1554*x1562))+((r10*x1552)));
evalcond[2]=(((r01*x1557))+((x1553*x1558))+x1571+(((-1.0)*cj5*r00*x1558))+((sj5*x1551)));
evalcond[3]=(((r11*x1557))+(((-1.0)*x1550*x1566))+x1568+((sj5*x1555))+((x1558*x1562)));
evalcond[4]=(((x1560*x1562))+(((-1.0)*x1555*x1566))+(((-1.0)*x1550*x1561))+x1569+((x1548*x1556))+(((-1.0)*r11*x1570)));
evalcond[5]=((((-1.0)*x1559*x1561))+((x1553*x1560))+((x1549*x1556))+(((-1.0)*r01*x1570))+(((-1.0)*x1551*x1566))+(((-1.0)*x1572)));
evalcond[6]=((((-1.0)*sj2*x1567))+((x1556*x1565))+(((-1.0)*px))+(((-1.0)*r00*x1564))+(((0.42)*x1571))+(((-1.0)*r01*x1563))+(((-1.0)*x1565)));
evalcond[7]=(((x1556*x1567))+(((-1.0)*py))+(((0.42)*x1568))+(((-1.0)*r10*x1564))+(((-1.0)*r11*x1563))+(((-1.0)*x1567))+((sj2*x1565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1573=cj1*cj1;
IkReal x1574=cj2*cj2;
IkReal x1575=(cj2*sj4);
IkReal x1576=((1.0)*sj5);
IkReal x1577=(cj5*r00);
IkReal x1578=(cj5*r10);
IkReal x1579=(cj1*sj2*sj4);
CheckValue<IkReal> x1580=IKPowWithIntegerCheck(IKsign((((x1573*x1574))+(((-1.0)*x1574))+(((-1.0)*x1573)))),-1);
if(!x1580.valid){
continue;
}
CheckValue<IkReal> x1581 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1576*x1579))+(((-1.0)*r01*x1575*x1576))+((x1575*x1577))+((x1578*x1579)))),IkReal((((x1577*x1579))+((r11*sj5*x1575))+(((-1.0)*x1575*x1578))+(((-1.0)*r01*x1576*x1579)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1581.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1580.value)))+(x1581.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1582=IKsin(j0);
IkReal x1583=IKcos(j0);
IkReal x1584=(r10*sj3);
IkReal x1585=(cj3*r00);
IkReal x1586=(cj5*sj4);
IkReal x1587=(r01*sj5);
IkReal x1588=((1.0)*sj4);
IkReal x1589=(cj3*r10);
IkReal x1590=(cj1*cj2);
IkReal x1591=(cj3*cj5);
IkReal x1592=(cj4*sj3);
IkReal x1593=(r00*sj3);
IkReal x1594=(cj3*cj4);
IkReal x1595=((1.0)*sj5);
IkReal x1596=(r11*sj5);
IkReal x1597=((0.4)*cj5);
IkReal x1598=((0.4)*sj5);
IkReal x1599=((0.00043624)*x1583);
IkReal x1600=((1.0)*cj4*cj5);
IkReal x1601=((0.00043624)*x1582);
IkReal x1602=(sj1*x1582);
IkReal x1603=(sj2*x1583);
IkReal x1604=((1.0)*cj5*sj3);
IkReal x1605=(sj1*x1583);
IkReal x1606=(sj2*x1582);
evalcond[0]=(((cj1*x1603))+((cj2*x1582))+(((-1.0)*x1587*x1588))+((r00*x1586)));
evalcond[1]=(((cj1*x1606))+(((-1.0)*x1588*x1596))+((r10*x1586))+(((-1.0)*cj2*x1583)));
evalcond[2]=(((r01*x1591))+((x1587*x1592))+(((-1.0)*cj5*r00*x1592))+x1605+((sj5*x1585)));
evalcond[3]=(((x1592*x1596))+x1602+((r11*x1591))+(((-1.0)*x1584*x1600))+((sj5*x1589)));
evalcond[4]=((((-1.0)*x1589*x1600))+((x1594*x1596))+x1603+((x1582*x1590))+(((-1.0)*x1584*x1595))+(((-1.0)*r11*x1604)));
evalcond[5]=(((x1587*x1594))+(((-1.0)*x1606))+(((-1.0)*x1593*x1595))+((x1583*x1590))+(((-1.0)*x1585*x1600))+(((-1.0)*r01*x1604)));
evalcond[6]=((((-1.0)*x1599))+((x1590*x1599))+(((-1.0)*r00*x1598))+(((-1.0)*r01*x1597))+(((-1.0)*px))+(((-1.0)*sj2*x1601))+(((0.42)*x1605)));
evalcond[7]=(((sj2*x1599))+(((-1.0)*x1601))+(((-1.0)*py))+((x1590*x1601))+(((0.42)*x1602))+(((-1.0)*r10*x1598))+(((-1.0)*r11*x1597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1608=IKPowWithIntegerCheck(r22,-1);
if(!x1608.valid){
continue;
}
IkReal x1607=x1608.value;
CheckValue<IkReal> x1609=IKPowWithIntegerCheck(sj3,-1);
if(!x1609.valid){
continue;
}
if( IKabs(((-1.0)*cj1*x1607*(x1609.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj1*sj2*x1607)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj1*x1607*(x1609.value)))+IKsqr((sj1*sj2*x1607))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj1*x1607*(x1609.value)), (sj1*sj2*x1607));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1610=IKsin(j4);
IkReal x1611=((1.0)*sj1);
IkReal x1612=(r22*x1610);
evalcond[0]=(cj1+((sj3*x1612)));
evalcond[1]=(((r22*(IKcos(j4))))+(((-1.0)*sj2*x1611)));
evalcond[2]=(((cj3*x1612))+(((-1.0)*cj2*x1611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1613=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1613);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1613);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1614=sj1*sj1;
IkReal x1615=(r00*sj1);
IkReal x1616=((16.0)*sj2);
IkReal x1617=(r10*sj1);
IkReal x1618=(r01*sj1);
IkReal x1619=(cj4*sj3);
IkReal x1620=((8.0)*cj3);
IkReal x1621=((4.0)*sj2);
IkReal x1622=(r11*sj1);
IkReal x1623=((8.0)*sj2);
IkReal x1624=((4.0)*sj3);
IkReal x1625=(cj1*cj2);
IkReal x1626=((4.0)*cj3);
IkReal x1627=((16.0)*cj3);
IkReal x1628=(cj3*x1625);
IkReal x1629=(r01*x1614);
IkReal x1630=(cj4*x1614);
IkReal x1631=(r10*sj3*x1614);
IkReal x1632=(r00*sj3*x1614);
IkReal x1633=((4.0)*x1619*x1625);
IkReal x1634=(((x1615*x1633))+((cj3*x1621*x1622)));
IkReal x1635=(((x1615*x1619*x1621))+((x1617*x1633)));
IkReal x1636=(((x1622*x1625*x1626))+((r10*x1626*x1630))+((r11*x1614*x1624))+((cj3*x1618*x1621)));
IkReal x1637=(((r00*x1626*x1630))+((x1617*x1619*x1621))+((x1618*x1625*x1626))+((x1624*x1629)));
j5eval[0]=((IKabs((x1636+(((-1.0)*x1635)))))+(((0.5)*(IKabs((x1635+(((-1.0)*x1636)))))))+(IKabs(((((-1.0)*sj2*x1615*x1620))+(((-8.0)*x1619*x1622*x1625))+(((-1.0)*x1618*x1619*x1623))+(((-1.0)*x1617*x1620*x1625))+(((-8.0)*x1631))+((r11*x1620*x1630)))))+(((0.5)*(IKabs(((((-1.0)*x1615*x1625*x1627))+(((-16.0)*x1632))+(((-16.0)*x1618*x1619*x1625))+((cj4*x1627*x1629))+((x1616*x1619*x1622))+((cj3*x1616*x1617)))))))+(IKabs((((x1619*x1622*x1623))+(((-8.0)*x1618*x1619*x1625))+(((-8.0)*x1632))+((cj4*x1620*x1629))+((sj2*x1617*x1620))+(((-1.0)*x1615*x1620*x1625)))))+(IKabs((x1637+(((-1.0)*x1634)))))+(((0.5)*(IKabs((x1634+(((-1.0)*x1637)))))))+(((0.5)*(IKabs(((((-1.0)*cj3*x1615*x1616))+(((-1.0)*x1617*x1625*x1627))+(((-16.0)*x1631))+(((-16.0)*x1619*x1622*x1625))+((r11*x1627*x1630))+(((-1.0)*x1616*x1618*x1619))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1638=sj1*sj1;
IkReal x1639=(cj4*sj3);
IkReal x1640=((8.0)*cj3);
IkReal x1641=(cj3*sj1);
IkReal x1642=(r01*sj2);
IkReal x1643=((16.0)*r10);
IkReal x1644=(cj1*cj2);
IkReal x1645=((16.0)*cj3);
IkReal x1646=((16.0)*sj1);
IkReal x1647=((4.0)*r10);
IkReal x1648=((4.0)*r11);
IkReal x1649=((8.0)*sj1);
IkReal x1650=(r00*sj1*sj2);
IkReal x1651=(sj3*x1638);
IkReal x1652=(cj4*r11*x1638);
IkReal x1653=(((sj1*x1639*x1644*x1647))+(((4.0)*x1639*x1650)));
IkReal x1654=(((x1648*x1651))+((cj3*cj4*x1638*x1647))+((x1641*x1644*x1648))+(((4.0)*x1641*x1642)));
IkReal x1655=(x1654+(((-1.0)*x1653)));
IkReal x1656=((((-1.0)*x1639*x1642*x1649))+((x1640*x1652))+(((-1.0)*x1640*x1650))+(((-8.0)*r10*x1651))+(((-1.0)*r10*sj1*x1640*x1644))+(((-1.0)*r11*x1639*x1644*x1649)));
IkReal x1657=(x1653+(((-1.0)*x1654)));
op[0]=x1655;
op[1]=x1656;
op[2]=x1655;
op[3]=((((-1.0)*x1639*x1642*x1646))+(((-1.0)*x1643*x1651))+((x1645*x1652))+(((-16.0)*r00*sj2*x1641))+(((-1.0)*r11*x1639*x1644*x1646))+(((-1.0)*x1641*x1643*x1644)));
op[4]=x1657;
op[5]=x1656;
op[6]=x1657;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1658=sj1*sj1;
IkReal x1659=(cj4*sj3);
IkReal x1660=(cj3*r01);
IkReal x1661=((8.0)*sj1);
IkReal x1662=((16.0)*sj1);
IkReal x1663=(cj4*x1658);
IkReal x1664=((4.0)*sj1*sj2);
IkReal x1665=(r11*sj1*sj2);
IkReal x1666=(cj3*r10*sj2);
IkReal x1667=(cj1*cj2*r01);
IkReal x1668=(sj3*x1658);
IkReal x1669=((4.0)*cj1*cj2*sj1);
IkReal x1670=(cj3*r11*x1664);
IkReal x1671=(cj1*cj2*cj3*r00*sj1);
IkReal x1672=(r00*x1659*x1669);
IkReal x1673=(x1670+x1672);
IkReal x1674=(((x1660*x1669))+(((4.0)*r01*x1668))+(((4.0)*cj3*r00*x1663))+((r10*x1659*x1664)));
IkReal x1675=((((-8.0)*r00*x1668))+(((8.0)*x1660*x1663))+(((-1.0)*x1659*x1661*x1667))+((r11*sj2*x1659*x1661))+((x1661*x1666))+(((-1.0)*cj1*cj2*cj3*r00*x1661)));
IkReal x1676=(x1674+(((-1.0)*x1673)));
j5evalpoly[0]=(x1673+((htj5*x1675))+((x1675*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5)*((x1673+(((-1.0)*x1674))))))+((x1676*(htj5*htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*(((((16.0)*x1660*x1663))+(((-16.0)*r00*x1668))+((x1662*x1666))+(((-1.0)*x1659*x1662*x1667))+((r11*sj2*x1659*x1662))+(((-1.0)*cj1*cj2*cj3*r00*x1662))))))+((x1676*(htj5*htj5*htj5*htj5)))+(((-1.0)*x1674)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0eval[3];
IkReal x1677=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1677);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1677);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1678=cj1*cj1;
IkReal x1679=cj2*cj2;
IkReal x1680=sj4*sj4;
IkReal x1681=cj5*cj5;
IkReal x1682=sj2*sj2;
IkReal x1683=sj5*sj5;
IkReal x1684=(x1679*x1680);
IkReal x1685=(x1678*x1680*x1682);
IkReal x1686=(((x1678*x1679))+(((-1.0)*x1678))+(((-1.0)*x1679)));
j0eval[0]=x1686;
j0eval[1]=IKsign(x1686);
j0eval[2]=(((x1681*x1685))+((x1681*x1684))+((x1683*x1684))+((x1683*x1685)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1687=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1687);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1687);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j0eval[0]=cj2;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x1688=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1688);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1688);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j0eval[0]=sj1;
j0eval[1]=cj1;
j0eval[2]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1689=(cj2*sj3);
IkReal x1690=(cj5*r11);
IkReal x1691=(r10*sj5);
IkReal x1692=(sj2*sj3);
if( IKabs((((x1689*x1690))+((x1689*x1691)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1690*x1692))+((x1691*x1692)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1689*x1690))+((x1689*x1691))))+IKsqr((((x1690*x1692))+((x1691*x1692))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x1689*x1690))+((x1689*x1691))), (((x1690*x1692))+((x1691*x1692))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1693=IKsin(j0);
IkReal x1694=IKcos(j0);
IkReal x1695=((1.0)*sj3);
IkReal x1696=(cj5*r11);
IkReal x1697=(r00*sj5);
IkReal x1698=(r10*sj5);
IkReal x1699=(cj5*r01);
IkReal x1700=((0.00043624)*x1694);
IkReal x1701=(cj2*x1694);
IkReal x1702=(sj2*x1693);
IkReal x1703=(cj2*x1693);
IkReal x1704=(((sj2*x1694))+x1703);
evalcond[0]=x1704;
evalcond[1]=(x1702+(((-1.0)*x1701)));
evalcond[2]=(x1704+(((-1.0)*x1695*x1698))+(((-1.0)*x1695*x1696)));
evalcond[3]=(x1701+(((-1.0)*x1702))+(((-1.0)*x1695*x1699))+(((-1.0)*x1695*x1697)));
evalcond[4]=((((-0.4)*x1699))+(((-0.4)*x1697))+(((-1.0)*x1700))+(((-1.0)*px))+((cj2*x1700))+(((-0.00043624)*x1702)));
evalcond[5]=((((0.00043624)*x1703))+(((-0.4)*x1698))+(((-0.4)*x1696))+(((-1.0)*py))+((sj2*x1700))+(((-0.00043624)*x1693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1705=(cj5*r11);
IkReal x1706=(r10*sj5);
IkReal x1707=(sj2*sj3);
IkReal x1708=((1.0)*cj2*sj3);
if( IKabs(((((-1.0)*x1705*x1708))+(((-1.0)*x1706*x1708)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1706*x1707))+((x1705*x1707)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1705*x1708))+(((-1.0)*x1706*x1708))))+IKsqr((((x1706*x1707))+((x1705*x1707))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x1705*x1708))+(((-1.0)*x1706*x1708))), (((x1706*x1707))+((x1705*x1707))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1709=IKcos(j0);
IkReal x1710=IKsin(j0);
IkReal x1711=((1.0)*sj3);
IkReal x1712=(cj5*r11);
IkReal x1713=(r00*sj5);
IkReal x1714=(r10*sj5);
IkReal x1715=(cj5*r01);
IkReal x1716=((0.00043624)*x1709);
IkReal x1717=((1.0)*x1709);
IkReal x1718=(cj2*x1710);
IkReal x1719=(sj2*x1710);
IkReal x1720=(cj2*x1717);
IkReal x1721=((1.0)*x1719);
IkReal x1722=(x1720+x1721);
evalcond[0]=(x1718+(((-1.0)*sj2*x1717)));
evalcond[1]=((-1.0)*x1722);
evalcond[2]=((((-1.0)*x1718))+(((-1.0)*x1711*x1712))+(((-1.0)*x1711*x1714))+((sj2*x1709)));
evalcond[3]=((((-1.0)*x1711*x1713))+(((-1.0)*x1711*x1715))+(((-1.0)*x1722)));
evalcond[4]=((((-1.0)*x1716))+(((-0.4)*x1715))+(((-0.4)*x1713))+(((-1.0)*px))+(((-0.00043624)*x1719))+(((-1.0)*cj2*x1716)));
evalcond[5]=((((-0.4)*x1714))+(((-0.4)*x1712))+((sj2*x1716))+(((-1.0)*py))+(((-0.00043624)*x1718))+(((-0.00043624)*x1710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1723=((1.0)*cj3);
if( IKabs(((((-1.0)*r10*sj5*x1723))+(((-1.0)*cj5*r11*x1723)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj5*x1723))+(((-1.0)*cj5*r01*x1723)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*sj5*x1723))+(((-1.0)*cj5*r11*x1723))))+IKsqr(((((-1.0)*r00*sj5*x1723))+(((-1.0)*cj5*r01*x1723))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*sj5*x1723))+(((-1.0)*cj5*r11*x1723))), ((((-1.0)*r00*sj5*x1723))+(((-1.0)*cj5*r01*x1723))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1724=IKcos(j0);
IkReal x1725=IKsin(j0);
IkReal x1726=(cj3*r01);
IkReal x1727=(cj3*sj5);
IkReal x1728=(cj5*r11);
IkReal x1729=((0.4)*sj5);
IkReal x1730=(sj2*x1724);
IkReal x1731=(sj2*x1725);
IkReal x1732=((1.0)*cj3*cj4*cj5);
evalcond[0]=((-2292.31615624427)*pz*x1725);
evalcond[1]=((2292.31615624427)*pz*x1724);
evalcond[2]=(((r00*x1727))+x1724+((cj5*x1726)));
evalcond[3]=(x1725+((r10*x1727))+((cj3*x1728)));
evalcond[4]=((((-1.0)*r10*x1732))+x1730+((cj4*r11*x1727)));
evalcond[5]=((((-1.0)*r00*x1732))+((cj4*sj5*x1726))+(((-1.0)*x1731)));
evalcond[6]=((((-0.00043624)*x1731))+(((-1.0)*r00*x1729))+(((-1.0)*px))+(((0.41956376)*x1724))+(((-0.4)*cj5*r01)));
evalcond[7]=((((-1.0)*r10*x1729))+(((-1.0)*py))+(((0.41956376)*x1725))+(((0.00043624)*x1730))+(((-0.4)*x1728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1733=(cj3*sj5);
IkReal x1734=(cj3*cj5);
if( IKabs((((r10*x1733))+((r11*x1734)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1734))+((r00*x1733)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x1733))+((r11*x1734))))+IKsqr((((r01*x1734))+((r00*x1733))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x1733))+((r11*x1734))), (((r01*x1734))+((r00*x1733))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1735=IKcos(j0);
IkReal x1736=IKsin(j0);
IkReal x1737=(cj3*cj4);
IkReal x1738=((1.0)*cj5);
IkReal x1739=(cj3*cj5);
IkReal x1740=(cj3*sj5);
IkReal x1741=((0.4)*cj5);
IkReal x1742=((0.4)*sj5);
IkReal x1743=(sj2*x1735);
IkReal x1744=((1.0)*x1736);
evalcond[0]=((2292.31615624427)*pz*x1736);
evalcond[1]=((-2292.31615624427)*pz*x1735);
evalcond[2]=(((r01*x1739))+((r00*x1740))+(((-1.0)*x1735)));
evalcond[3]=((((-1.0)*x1744))+((r11*x1739))+((r10*x1740)));
evalcond[4]=(x1743+(((-1.0)*r10*x1737*x1738))+((r11*sj5*x1737)));
evalcond[5]=((((-1.0)*sj2*x1744))+(((-1.0)*r00*x1737*x1738))+((r01*sj5*x1737)));
evalcond[6]=((((-0.00043624)*sj2*x1736))+(((-0.42043624)*x1735))+(((-1.0)*px))+(((-1.0)*r00*x1742))+(((-1.0)*r01*x1741)));
evalcond[7]=((((0.00043624)*x1743))+(((-1.0)*r11*x1741))+(((-0.42043624)*x1736))+(((-1.0)*r10*x1742))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1745=(cj5*sj4);
IkReal x1746=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1745))+((r01*x1746)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1746))+((r10*x1745)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1745))+((r01*x1746))))+IKsqr(((((-1.0)*r11*x1746))+((r10*x1745))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1745))+((r01*x1746))), ((((-1.0)*r11*x1746))+((r10*x1745))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1747=IKsin(j0);
IkReal x1748=IKcos(j0);
IkReal x1749=(cj5*sj4);
IkReal x1750=((1.0)*sj5);
IkReal x1751=(cj3*cj5);
IkReal x1752=(cj3*sj5);
IkReal x1753=((0.4)*cj5);
IkReal x1754=((0.4)*sj5);
IkReal x1755=((0.00043624)*x1748);
IkReal x1756=(sj1*x1747);
IkReal x1757=((1.0)*cj5*sj3);
IkReal x1758=(sj1*x1748);
IkReal x1759=(cj1*x1747);
evalcond[0]=(x1747+(((-1.0)*r01*sj4*x1750))+((r00*x1749)));
evalcond[1]=(x1758+((r01*x1751))+((r00*x1752)));
evalcond[2]=(x1756+((r11*x1751))+((r10*x1752)));
evalcond[3]=((((-1.0)*r11*sj4*x1750))+(((-1.0)*x1748))+((r10*x1749)));
evalcond[4]=((((-1.0)*r11*x1757))+x1759+(((-1.0)*r10*sj3*x1750)));
evalcond[5]=(((cj1*x1748))+(((-1.0)*r01*x1757))+(((-1.0)*r00*sj3*x1750)));
evalcond[6]=((((0.42)*x1758))+((cj1*x1755))+(((-1.0)*px))+(((-1.0)*x1755))+(((-1.0)*r01*x1753))+(((-1.0)*r00*x1754)));
evalcond[7]=((((-1.0)*r11*x1753))+(((-1.0)*r10*x1754))+(((-0.00043624)*x1747))+(((0.42)*x1756))+(((-1.0)*py))+(((0.00043624)*x1759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1760=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1760)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1760))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1760))))+IKsqr(((((-1.0)*cj5*r10*x1760))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1760))), ((((-1.0)*cj5*r10*x1760))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1761=IKcos(j0);
IkReal x1762=IKsin(j0);
IkReal x1763=(cj5*sj4);
IkReal x1764=((1.0)*sj5);
IkReal x1765=(cj3*cj5);
IkReal x1766=(cj3*sj5);
IkReal x1767=((0.4)*cj5);
IkReal x1768=((0.4)*sj5);
IkReal x1769=((0.00043624)*x1761);
IkReal x1770=(sj1*x1762);
IkReal x1771=((1.0)*cj5*sj3);
IkReal x1772=((1.0)*x1762);
IkReal x1773=(sj1*x1761);
IkReal x1774=((0.00043624)*x1762);
evalcond[0]=(x1761+((r10*x1763))+(((-1.0)*r11*sj4*x1764)));
evalcond[1]=(x1773+((r01*x1765))+((r00*x1766)));
evalcond[2]=(x1770+((r11*x1765))+((r10*x1766)));
evalcond[3]=(((r00*x1763))+(((-1.0)*x1772))+(((-1.0)*r01*sj4*x1764)));
evalcond[4]=((((-1.0)*cj1*x1772))+(((-1.0)*r10*sj3*x1764))+(((-1.0)*r11*x1771)));
evalcond[5]=((((-1.0)*cj1*x1761))+(((-1.0)*r00*sj3*x1764))+(((-1.0)*r01*x1771)));
evalcond[6]=((((-1.0)*r01*x1767))+(((-1.0)*r00*x1768))+(((-1.0)*x1769))+(((-1.0)*cj1*x1769))+(((0.42)*x1773))+(((-1.0)*px)));
evalcond[7]=((((-1.0)*cj1*x1774))+(((-1.0)*r11*x1767))+(((0.42)*x1770))+(((-1.0)*py))+(((-1.0)*x1774))+(((-1.0)*r10*x1768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1775=(sj3*sj5);
IkReal x1776=(cj5*sj3);
if( IKabs(((((-1.0)*r00*x1775))+(((-1.0)*r01*x1776)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1776))+((r10*x1775)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1775))+(((-1.0)*r01*x1776))))+IKsqr((((r11*x1776))+((r10*x1775))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1775))+(((-1.0)*r01*x1776))), (((r11*x1776))+((r10*x1775))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1777=IKcos(j0);
IkReal x1778=IKsin(j0);
IkReal x1779=(cj4*sj3);
IkReal x1780=((1.0)*cj5);
IkReal x1781=((0.4)*cj5);
IkReal x1782=((0.4)*sj5);
IkReal x1783=((0.00043624)*x1777);
IkReal x1784=((0.00043624)*x1778);
IkReal x1785=(sj1*x1778);
IkReal x1786=((1.0)*sj3*sj5);
IkReal x1787=(sj1*x1777);
evalcond[0]=(cj1*x1777);
evalcond[1]=(cj1*x1778);
evalcond[2]=((((-1.0)*r10*x1786))+x1777+(((-1.0)*r11*sj3*x1780)));
evalcond[3]=((((-1.0)*r00*x1786))+(((-1.0)*x1778))+(((-1.0)*r01*sj3*x1780)));
evalcond[4]=(x1787+((r01*sj5*x1779))+(((-1.0)*r00*x1779*x1780)));
evalcond[5]=(x1785+(((-1.0)*r10*x1779*x1780))+((r11*sj5*x1779)));
evalcond[6]=((((-1.0)*x1784))+(((-1.0)*x1783))+(((-1.0)*r00*x1782))+(((-1.0)*r01*x1781))+(((-1.0)*px))+(((0.42)*x1787)));
evalcond[7]=((((-1.0)*x1784))+(((-1.0)*r10*x1782))+x1783+(((-1.0)*r11*x1781))+(((-1.0)*py))+(((0.42)*x1785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1788=(sj3*sj5);
IkReal x1789=(cj5*sj3);
if( IKabs((((r00*x1788))+((r01*x1789)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1789))+(((-1.0)*r10*x1788)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1788))+((r01*x1789))))+IKsqr(((((-1.0)*r11*x1789))+(((-1.0)*r10*x1788))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1788))+((r01*x1789))), ((((-1.0)*r11*x1789))+(((-1.0)*r10*x1788))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1790=IKsin(j0);
IkReal x1791=IKcos(j0);
IkReal x1792=(cj4*sj3);
IkReal x1793=((1.0)*cj5);
IkReal x1794=((0.4)*cj5);
IkReal x1795=((0.4)*sj5);
IkReal x1796=((0.00043624)*x1790);
IkReal x1797=((0.00043624)*x1791);
IkReal x1798=(sj1*x1790);
IkReal x1799=((-1.0)*cj1);
IkReal x1800=((1.0)*sj3*sj5);
IkReal x1801=(sj1*x1791);
evalcond[0]=(x1791*x1799);
evalcond[1]=(x1790*x1799);
evalcond[2]=((((-1.0)*r00*x1800))+x1790+(((-1.0)*r01*sj3*x1793)));
evalcond[3]=((((-1.0)*r10*x1800))+(((-1.0)*r11*sj3*x1793))+(((-1.0)*x1791)));
evalcond[4]=((((-1.0)*r00*x1792*x1793))+x1801+((r01*sj5*x1792)));
evalcond[5]=((((-1.0)*r10*x1792*x1793))+x1798+((r11*sj5*x1792)));
evalcond[6]=((((-1.0)*x1797))+(((-1.0)*r01*x1794))+x1796+(((-1.0)*r00*x1795))+(((-1.0)*px))+(((0.42)*x1801)));
evalcond[7]=((((0.42)*x1798))+(((-1.0)*x1796))+(((-1.0)*x1797))+(((-1.0)*r10*x1795))+(((-1.0)*r11*x1794))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1802=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1802);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1802);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=1.0;
j4=0;
IkReal x1803=cj2*cj2;
IkReal x1804=((12500000.0)*px);
IkReal x1805=((12500000.0)*py);
IkReal x1806=((5000000.0)*sj5);
IkReal x1807=((5000000.0)*cj5*r11);
IkReal x1808=((5000000.0)*cj5*r01);
j0eval[0]=((2.0)+(((-1.0)*x1803)));
j0eval[1]=((IKabs(((((-1.0)*r00*x1806))+(((-1.0)*x1808))+(((-1.0)*x1804))+((r10*sj2*x1806))+((sj2*x1807))+((sj2*x1805)))))+(IKabs(((((-1.0)*r10*x1806))+(((-1.0)*x1807))+(((-1.0)*x1805))+(((-1.0)*sj2*x1804))+(((-1.0)*sj2*x1808))+(((-1.0)*r00*sj2*x1806))))));
j0eval[2]=IKsign(((10906.0)+(((-5453.0)*x1803))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x1809=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1809);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1809);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=1.0;
j4=0;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1810=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1810);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1810);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=1.0;
j4=0;
j0eval[0]=((1.0)+(((-1.0)*(cj2*cj2))));
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1811=((5453.0)*sj5);
IkReal x1812=(r10*sj3);
IkReal x1813=(cj3*r11);
IkReal x1814=((5000000.0)*sj2);
IkReal x1815=(cj5*r11*sj3);
IkReal x1816=(cj3*cj5*r10);
CheckValue<IkReal> x1817=IKPowWithIntegerCheck(((5453.0)+(((-5453.0)*(cj2*cj2)))),-1);
if(!x1817.valid){
continue;
}
CheckValue<IkReal> x1818=IKPowWithIntegerCheck(sj2,-1);
if(!x1818.valid){
continue;
}
if( IKabs(((x1817.value)*(((((-1.0)*cj5*r01*x1814))+(((-5453.0)*x1816))+(((-5453.0)*x1815))+(((-1.0)*r00*sj5*x1814))+(((-1.0)*x1811*x1812))+((x1811*x1813))+(((-12500000.0)*px*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1818.value)*(((((-1.0)*sj5*x1813))+((sj5*x1812))+x1815+x1816)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1817.value)*(((((-1.0)*cj5*r01*x1814))+(((-5453.0)*x1816))+(((-5453.0)*x1815))+(((-1.0)*r00*sj5*x1814))+(((-1.0)*x1811*x1812))+((x1811*x1813))+(((-12500000.0)*px*sj2))))))+IKsqr(((x1818.value)*(((((-1.0)*sj5*x1813))+((sj5*x1812))+x1815+x1816))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1817.value)*(((((-1.0)*cj5*r01*x1814))+(((-5453.0)*x1816))+(((-5453.0)*x1815))+(((-1.0)*r00*sj5*x1814))+(((-1.0)*x1811*x1812))+((x1811*x1813))+(((-12500000.0)*px*sj2))))), ((x1818.value)*(((((-1.0)*sj5*x1813))+((sj5*x1812))+x1815+x1816))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1819=IKcos(j0);
IkReal x1820=IKsin(j0);
IkReal x1821=((1.0)*cj5);
IkReal x1822=((0.4)*sj5);
IkReal x1823=((0.4)*cj5);
IkReal x1824=(cj3*sj5);
IkReal x1825=((0.00043624)*x1819);
IkReal x1826=((0.00043624)*x1820);
IkReal x1827=((1.0)*sj3*sj5);
evalcond[0]=((((-1.0)*x1825))+(((-1.0)*px))+(((-1.0)*r00*x1822))+(((-1.0)*r01*x1823))+(((-1.0)*sj2*x1826)));
evalcond[1]=((((-1.0)*x1826))+(((-1.0)*py))+(((-1.0)*r11*x1823))+((sj2*x1825))+(((-1.0)*r10*x1822)));
evalcond[2]=((((-1.0)*cj3*r10*x1821))+((sj2*x1819))+(((-1.0)*r11*sj3*x1821))+((r11*x1824))+(((-1.0)*r10*x1827)));
evalcond[3]=((((-1.0)*cj3*r00*x1821))+((r01*x1824))+(((-1.0)*r00*x1827))+(((-1.0)*r01*sj3*x1821))+(((-1.0)*sj2*x1820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1828=(cj5*r11);
IkReal x1829=(r10*sj5);
IkReal x1830=((1.0)*cj3*r11*sj5);
IkReal x1831=(((sj3*x1829))+((sj3*x1828))+((cj3*cj5*r10)));
CheckValue<IkReal> x1832=IKPowWithIntegerCheck(sj2,-1);
if(!x1832.valid){
continue;
}
if( IKabs(((((-1.0)*x1830))+(((-2292.31615624427)*py))+x1831+(((-916.926462497708)*x1828))+(((-916.926462497708)*x1829)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1832.value)*(((((-1.0)*x1830))+x1831)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1830))+(((-2292.31615624427)*py))+x1831+(((-916.926462497708)*x1828))+(((-916.926462497708)*x1829))))+IKsqr(((x1832.value)*(((((-1.0)*x1830))+x1831))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x1830))+(((-2292.31615624427)*py))+x1831+(((-916.926462497708)*x1828))+(((-916.926462497708)*x1829))), ((x1832.value)*(((((-1.0)*x1830))+x1831))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1833=IKcos(j0);
IkReal x1834=IKsin(j0);
IkReal x1835=((1.0)*cj5);
IkReal x1836=((0.4)*sj5);
IkReal x1837=((0.4)*cj5);
IkReal x1838=(cj3*sj5);
IkReal x1839=((0.00043624)*x1833);
IkReal x1840=((0.00043624)*x1834);
IkReal x1841=((1.0)*sj3*sj5);
evalcond[0]=((((-1.0)*r00*x1836))+(((-1.0)*r01*x1837))+(((-1.0)*sj2*x1840))+(((-1.0)*x1839))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*x1840))+(((-1.0)*r10*x1836))+((sj2*x1839))+(((-1.0)*py))+(((-1.0)*r11*x1837)));
evalcond[2]=((((-1.0)*r10*x1841))+((sj2*x1833))+((r11*x1838))+(((-1.0)*cj3*r10*x1835))+(((-1.0)*r11*sj3*x1835)));
evalcond[3]=(((r01*x1838))+(((-1.0)*cj3*r00*x1835))+(((-1.0)*r00*x1841))+(((-1.0)*sj2*x1834))+(((-1.0)*r01*sj3*x1835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1842=((12500000.0)*sj2);
IkReal x1843=((5000000.0)*sj5);
IkReal x1844=((5000000.0)*cj5*r11);
IkReal x1845=((5000000.0)*cj5*r01);
CheckValue<IkReal> x1846=IKPowWithIntegerCheck(IKsign(((10906.0)+(((-5453.0)*(cj2*cj2))))),-1);
if(!x1846.valid){
continue;
}
CheckValue<IkReal> x1847 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1842))+(((-1.0)*x1844))+(((-12500000.0)*py))+(((-1.0)*sj2*x1845))+(((-1.0)*r10*x1843))+(((-1.0)*r00*sj2*x1843)))),IkReal(((((-1.0)*x1845))+(((-12500000.0)*px))+(((-1.0)*r00*x1843))+((sj2*x1844))+((py*x1842))+((r10*sj2*x1843)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1847.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1846.value)))+(x1847.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1848=IKcos(j0);
IkReal x1849=IKsin(j0);
IkReal x1850=((1.0)*cj5);
IkReal x1851=((0.4)*sj5);
IkReal x1852=((0.4)*cj5);
IkReal x1853=(cj3*sj5);
IkReal x1854=((0.00043624)*x1848);
IkReal x1855=((0.00043624)*x1849);
IkReal x1856=((1.0)*sj3*sj5);
evalcond[0]=((((-1.0)*r01*x1852))+(((-1.0)*px))+(((-1.0)*r00*x1851))+(((-1.0)*sj2*x1855))+(((-1.0)*x1854)));
evalcond[1]=((((-1.0)*py))+(((-1.0)*r11*x1852))+((sj2*x1854))+(((-1.0)*r10*x1851))+(((-1.0)*x1855)));
evalcond[2]=(((sj2*x1848))+(((-1.0)*r11*sj3*x1850))+((r11*x1853))+(((-1.0)*r10*x1856))+(((-1.0)*cj3*r10*x1850)));
evalcond[3]=(((r01*x1853))+(((-1.0)*cj3*r00*x1850))+(((-1.0)*r01*sj3*x1850))+(((-1.0)*r00*x1856))+(((-1.0)*sj2*x1849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1857=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1857);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1857);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1858=cj2*cj2;
IkReal x1859=((12500000.0)*px);
IkReal x1860=((12500000.0)*py);
IkReal x1861=((5000000.0)*sj5);
IkReal x1862=((5000000.0)*cj5*r11);
IkReal x1863=((5000000.0)*cj5*r01);
j0eval[0]=((2.0)+(((-1.0)*x1858)));
j0eval[1]=((IKabs(((((-1.0)*r00*sj2*x1861))+(((-1.0)*sj2*x1863))+(((-1.0)*x1862))+(((-1.0)*x1860))+(((-1.0)*sj2*x1859))+(((-1.0)*r10*x1861)))))+(IKabs((((r10*sj2*x1861))+((sj2*x1860))+((sj2*x1862))+(((-1.0)*r00*x1861))+(((-1.0)*x1863))+(((-1.0)*x1859))))));
j0eval[2]=IKsign(((10906.0)+(((-5453.0)*x1858))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x1864=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1864);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1864);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1865=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1865);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1865);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j0eval[0]=((1.0)+(((-1.0)*(cj2*cj2))));
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1866=((5453.0)*sj5);
IkReal x1867=(r10*sj3);
IkReal x1868=(cj3*r11);
IkReal x1869=((5000000.0)*sj2);
IkReal x1870=(cj3*cj5*r10);
IkReal x1871=(cj5*r11*sj3);
CheckValue<IkReal> x1872=IKPowWithIntegerCheck(((5453.0)+(((-5453.0)*(cj2*cj2)))),-1);
if(!x1872.valid){
continue;
}
CheckValue<IkReal> x1873=IKPowWithIntegerCheck(sj2,-1);
if(!x1873.valid){
continue;
}
if( IKabs(((x1872.value)*(((((-1.0)*r00*sj5*x1869))+(((-1.0)*cj5*r01*x1869))+(((-5453.0)*x1871))+(((-1.0)*x1866*x1868))+(((-1.0)*x1866*x1867))+(((-12500000.0)*px*sj2))+(((5453.0)*x1870)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1873.value)*((((sj5*x1867))+((sj5*x1868))+x1871+(((-1.0)*x1870)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1872.value)*(((((-1.0)*r00*sj5*x1869))+(((-1.0)*cj5*r01*x1869))+(((-5453.0)*x1871))+(((-1.0)*x1866*x1868))+(((-1.0)*x1866*x1867))+(((-12500000.0)*px*sj2))+(((5453.0)*x1870))))))+IKsqr(((x1873.value)*((((sj5*x1867))+((sj5*x1868))+x1871+(((-1.0)*x1870))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1872.value)*(((((-1.0)*r00*sj5*x1869))+(((-1.0)*cj5*r01*x1869))+(((-5453.0)*x1871))+(((-1.0)*x1866*x1868))+(((-1.0)*x1866*x1867))+(((-12500000.0)*px*sj2))+(((5453.0)*x1870))))), ((x1873.value)*((((sj5*x1867))+((sj5*x1868))+x1871+(((-1.0)*x1870))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1874=IKcos(j0);
IkReal x1875=IKsin(j0);
IkReal x1876=((0.4)*sj5);
IkReal x1877=(cj3*cj5);
IkReal x1878=((1.0)*sj3);
IkReal x1879=(cj5*r11);
IkReal x1880=(cj5*r01);
IkReal x1881=((1.0)*cj3*sj5);
IkReal x1882=((0.00043624)*x1874);
IkReal x1883=((0.00043624)*x1875);
evalcond[0]=((((-1.0)*r00*x1876))+(((-1.0)*px))+(((-0.4)*x1880))+(((-1.0)*x1882))+(((-1.0)*sj2*x1883)));
evalcond[1]=(((sj2*x1882))+(((-1.0)*r10*x1876))+(((-1.0)*py))+(((-0.4)*x1879))+(((-1.0)*x1883)));
evalcond[2]=((((-1.0)*x1878*x1879))+(((-1.0)*r10*sj5*x1878))+((sj2*x1874))+(((-1.0)*r11*x1881))+((r10*x1877)));
evalcond[3]=((((-1.0)*r00*sj5*x1878))+(((-1.0)*x1878*x1880))+((r00*x1877))+(((-1.0)*r01*x1881))+(((-1.0)*sj2*x1875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1884=(cj5*r11);
IkReal x1885=(r10*sj5);
IkReal x1886=((1.0)*cj3*cj5*r10);
IkReal x1887=(((cj3*r11*sj5))+((sj3*x1884))+((sj3*x1885)));
CheckValue<IkReal> x1888=IKPowWithIntegerCheck(sj2,-1);
if(!x1888.valid){
continue;
}
if( IKabs(((((-2292.31615624427)*py))+x1887+(((-1.0)*x1886))+(((-916.926462497708)*x1885))+(((-916.926462497708)*x1884)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1888.value)*((x1887+(((-1.0)*x1886)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2292.31615624427)*py))+x1887+(((-1.0)*x1886))+(((-916.926462497708)*x1885))+(((-916.926462497708)*x1884))))+IKsqr(((x1888.value)*((x1887+(((-1.0)*x1886))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2292.31615624427)*py))+x1887+(((-1.0)*x1886))+(((-916.926462497708)*x1885))+(((-916.926462497708)*x1884))), ((x1888.value)*((x1887+(((-1.0)*x1886))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1889=IKcos(j0);
IkReal x1890=IKsin(j0);
IkReal x1891=((0.4)*sj5);
IkReal x1892=(cj3*cj5);
IkReal x1893=((1.0)*sj3);
IkReal x1894=(cj5*r11);
IkReal x1895=(cj5*r01);
IkReal x1896=((1.0)*cj3*sj5);
IkReal x1897=((0.00043624)*x1889);
IkReal x1898=((0.00043624)*x1890);
evalcond[0]=((((-1.0)*sj2*x1898))+(((-1.0)*px))+(((-1.0)*r00*x1891))+(((-0.4)*x1895))+(((-1.0)*x1897)));
evalcond[1]=(((sj2*x1897))+(((-1.0)*r10*x1891))+(((-1.0)*py))+(((-0.4)*x1894))+(((-1.0)*x1898)));
evalcond[2]=((((-1.0)*x1893*x1894))+((sj2*x1889))+((r10*x1892))+(((-1.0)*r10*sj5*x1893))+(((-1.0)*r11*x1896)));
evalcond[3]=((((-1.0)*x1893*x1895))+(((-1.0)*sj2*x1890))+(((-1.0)*r00*sj5*x1893))+((r00*x1892))+(((-1.0)*r01*x1896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1899=((12500000.0)*sj2);
IkReal x1900=((5000000.0)*sj5);
IkReal x1901=((5000000.0)*cj5*r11);
IkReal x1902=((5000000.0)*cj5*r01);
CheckValue<IkReal> x1903=IKPowWithIntegerCheck(IKsign(((10906.0)+(((-5453.0)*(cj2*cj2))))),-1);
if(!x1903.valid){
continue;
}
CheckValue<IkReal> x1904 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x1902))+(((-12500000.0)*py))+(((-1.0)*px*x1899))+(((-1.0)*r10*x1900))+(((-1.0)*r00*sj2*x1900))+(((-1.0)*x1901)))),IkReal(((((-12500000.0)*px))+((py*x1899))+((r10*sj2*x1900))+(((-1.0)*x1902))+((sj2*x1901))+(((-1.0)*r00*x1900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1904.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1903.value)))+(x1904.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1905=IKcos(j0);
IkReal x1906=IKsin(j0);
IkReal x1907=((0.4)*sj5);
IkReal x1908=(cj3*cj5);
IkReal x1909=((1.0)*sj3);
IkReal x1910=(cj5*r11);
IkReal x1911=(cj5*r01);
IkReal x1912=((1.0)*cj3*sj5);
IkReal x1913=((0.00043624)*x1905);
IkReal x1914=((0.00043624)*x1906);
evalcond[0]=((((-1.0)*px))+(((-0.4)*x1911))+(((-1.0)*x1913))+(((-1.0)*sj2*x1914))+(((-1.0)*r00*x1907)));
evalcond[1]=((((-1.0)*r10*x1907))+(((-1.0)*py))+(((-0.4)*x1910))+(((-1.0)*x1914))+((sj2*x1913)));
evalcond[2]=((((-1.0)*r11*x1912))+(((-1.0)*r10*sj5*x1909))+(((-1.0)*x1909*x1910))+((r10*x1908))+((sj2*x1905)));
evalcond[3]=((((-1.0)*r01*x1912))+((r00*x1908))+(((-1.0)*sj2*x1906))+(((-1.0)*x1909*x1911))+(((-1.0)*r00*sj5*x1909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1922=IKPowWithIntegerCheck(sj1,-1);
if(!x1922.valid){
continue;
}
IkReal x1915=x1922.value;
IkReal x1916=((1.0)*cj5);
IkReal x1917=(sj1*sj4);
IkReal x1918=(cj2*cj3);
IkReal x1919=(r10*sj5);
IkReal x1920=(cj4*cj5*r10*sj3);
IkReal x1921=(cj4*r11*sj3*sj5);
CheckValue<IkReal> x1923=IKPowWithIntegerCheck(cj1,-1);
if(!x1923.valid){
continue;
}
CheckValue<IkReal> x1924=IKPowWithIntegerCheck(sj2,-1);
if(!x1924.valid){
continue;
}
if( IKabs((x1915*(((((-1.0)*x1921))+(((-1.0)*cj3*r11*x1916))+x1920+(((-1.0)*cj3*x1919)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1915*(x1923.value)*(x1924.value)*((((r01*sj5*x1917))+(((-1.0)*r00*x1916*x1917))+((cj5*r11*x1918))+((cj2*x1921))+(((-1.0)*cj2*cj4*r10*sj3*x1916))+((x1918*x1919)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1915*(((((-1.0)*x1921))+(((-1.0)*cj3*r11*x1916))+x1920+(((-1.0)*cj3*x1919))))))+IKsqr((x1915*(x1923.value)*(x1924.value)*((((r01*sj5*x1917))+(((-1.0)*r00*x1916*x1917))+((cj5*r11*x1918))+((cj2*x1921))+(((-1.0)*cj2*cj4*r10*sj3*x1916))+((x1918*x1919))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1915*(((((-1.0)*x1921))+(((-1.0)*cj3*r11*x1916))+x1920+(((-1.0)*cj3*x1919))))), (x1915*(x1923.value)*(x1924.value)*((((r01*sj5*x1917))+(((-1.0)*r00*x1916*x1917))+((cj5*r11*x1918))+((cj2*x1921))+(((-1.0)*cj2*cj4*r10*sj3*x1916))+((x1918*x1919))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1925=IKsin(j0);
IkReal x1926=IKcos(j0);
IkReal x1927=(r10*sj3);
IkReal x1928=(cj3*r00);
IkReal x1929=(cj5*sj4);
IkReal x1930=(r01*sj5);
IkReal x1931=((1.0)*sj4);
IkReal x1932=(cj3*r10);
IkReal x1933=(cj1*cj2);
IkReal x1934=(cj3*cj5);
IkReal x1935=(cj4*sj3);
IkReal x1936=(r00*sj3);
IkReal x1937=(cj3*cj4);
IkReal x1938=((1.0)*sj5);
IkReal x1939=(r11*sj5);
IkReal x1940=((0.4)*cj5);
IkReal x1941=((0.4)*sj5);
IkReal x1942=((0.00043624)*x1926);
IkReal x1943=((1.0)*cj4*cj5);
IkReal x1944=((0.00043624)*x1925);
IkReal x1945=(sj1*x1925);
IkReal x1946=(sj2*x1926);
IkReal x1947=((1.0)*cj5*sj3);
IkReal x1948=(sj1*x1926);
IkReal x1949=(sj2*x1925);
evalcond[0]=((((-1.0)*x1930*x1931))+((r00*x1929))+((cj1*x1946))+((cj2*x1925)));
evalcond[1]=(((cj1*x1949))+(((-1.0)*x1931*x1939))+((r10*x1929))+(((-1.0)*cj2*x1926)));
evalcond[2]=(((r01*x1934))+((x1930*x1935))+x1948+((sj5*x1928))+(((-1.0)*cj5*r00*x1935)));
evalcond[3]=(x1945+((x1935*x1939))+((r11*x1934))+((sj5*x1932))+(((-1.0)*x1927*x1943)));
evalcond[4]=(((x1925*x1933))+x1946+(((-1.0)*x1932*x1943))+(((-1.0)*r11*x1947))+(((-1.0)*x1927*x1938))+((x1937*x1939)));
evalcond[5]=(((x1930*x1937))+((x1926*x1933))+(((-1.0)*x1949))+(((-1.0)*r01*x1947))+(((-1.0)*x1928*x1943))+(((-1.0)*x1936*x1938)));
evalcond[6]=((((-1.0)*sj2*x1944))+(((-1.0)*x1942))+(((-1.0)*px))+(((-1.0)*r00*x1941))+(((-1.0)*r01*x1940))+(((0.42)*x1948))+((x1933*x1942)));
evalcond[7]=(((sj2*x1942))+(((-1.0)*x1944))+(((-1.0)*py))+(((-1.0)*r11*x1940))+(((-1.0)*r10*x1941))+(((0.42)*x1945))+((x1933*x1944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1958=IKPowWithIntegerCheck(sj1,-1);
if(!x1958.valid){
continue;
}
IkReal x1950=x1958.value;
IkReal x1951=(r01*sj5);
IkReal x1952=(sj1*sj4);
IkReal x1953=((1.0)*cj5);
IkReal x1954=(cj3*r01);
IkReal x1955=(cj4*sj3);
IkReal x1956=(cj1*sj2);
IkReal x1957=(cj3*r00*sj5);
CheckValue<IkReal> x1959=IKPowWithIntegerCheck(cj2,-1);
if(!x1959.valid){
continue;
}
if( IKabs((x1950*(x1959.value)*(((((-1.0)*r00*x1953*x1955*x1956))+((x1951*x1952))+((cj5*x1954*x1956))+(((-1.0)*r00*x1952*x1953))+((x1951*x1955*x1956))+((x1956*x1957)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1950*(((((-1.0)*x1951*x1955))+(((-1.0)*x1957))+(((-1.0)*x1953*x1954))+((cj5*r00*x1955)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1950*(x1959.value)*(((((-1.0)*r00*x1953*x1955*x1956))+((x1951*x1952))+((cj5*x1954*x1956))+(((-1.0)*r00*x1952*x1953))+((x1951*x1955*x1956))+((x1956*x1957))))))+IKsqr((x1950*(((((-1.0)*x1951*x1955))+(((-1.0)*x1957))+(((-1.0)*x1953*x1954))+((cj5*r00*x1955))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1950*(x1959.value)*(((((-1.0)*r00*x1953*x1955*x1956))+((x1951*x1952))+((cj5*x1954*x1956))+(((-1.0)*r00*x1952*x1953))+((x1951*x1955*x1956))+((x1956*x1957))))), (x1950*(((((-1.0)*x1951*x1955))+(((-1.0)*x1957))+(((-1.0)*x1953*x1954))+((cj5*r00*x1955))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1960=IKsin(j0);
IkReal x1961=IKcos(j0);
IkReal x1962=(r10*sj3);
IkReal x1963=(cj3*r00);
IkReal x1964=(cj5*sj4);
IkReal x1965=(r01*sj5);
IkReal x1966=((1.0)*sj4);
IkReal x1967=(cj3*r10);
IkReal x1968=(cj1*cj2);
IkReal x1969=(cj3*cj5);
IkReal x1970=(cj4*sj3);
IkReal x1971=(r00*sj3);
IkReal x1972=(cj3*cj4);
IkReal x1973=((1.0)*sj5);
IkReal x1974=(r11*sj5);
IkReal x1975=((0.4)*cj5);
IkReal x1976=((0.4)*sj5);
IkReal x1977=((0.00043624)*x1961);
IkReal x1978=((1.0)*cj4*cj5);
IkReal x1979=((0.00043624)*x1960);
IkReal x1980=(sj1*x1960);
IkReal x1981=(sj2*x1961);
IkReal x1982=((1.0)*cj5*sj3);
IkReal x1983=(sj1*x1961);
IkReal x1984=(sj2*x1960);
evalcond[0]=((((-1.0)*x1965*x1966))+((cj2*x1960))+((r00*x1964))+((cj1*x1981)));
evalcond[1]=(((r10*x1964))+(((-1.0)*x1966*x1974))+(((-1.0)*cj2*x1961))+((cj1*x1984)));
evalcond[2]=(((sj5*x1963))+x1983+((r01*x1969))+(((-1.0)*cj5*r00*x1970))+((x1965*x1970)));
evalcond[3]=(((sj5*x1967))+((r11*x1969))+((x1970*x1974))+x1980+(((-1.0)*x1962*x1978)));
evalcond[4]=(((x1972*x1974))+(((-1.0)*r11*x1982))+x1981+((x1960*x1968))+(((-1.0)*x1962*x1973))+(((-1.0)*x1967*x1978)));
evalcond[5]=((((-1.0)*x1971*x1973))+((x1961*x1968))+((x1965*x1972))+(((-1.0)*r01*x1982))+(((-1.0)*x1984))+(((-1.0)*x1963*x1978)));
evalcond[6]=((((-1.0)*sj2*x1979))+(((-1.0)*x1977))+(((-1.0)*r00*x1976))+(((-1.0)*r01*x1975))+(((-1.0)*px))+(((0.42)*x1983))+((x1968*x1977)));
evalcond[7]=(((sj2*x1977))+(((-1.0)*x1979))+(((-1.0)*py))+(((-1.0)*r10*x1976))+(((0.42)*x1980))+(((-1.0)*r11*x1975))+((x1968*x1979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1985=cj1*cj1;
IkReal x1986=cj2*cj2;
IkReal x1987=(cj2*sj4);
IkReal x1988=((1.0)*sj5);
IkReal x1989=(cj5*r00);
IkReal x1990=(cj5*r10);
IkReal x1991=(cj1*sj2*sj4);
CheckValue<IkReal> x1992=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1985))+(((-1.0)*x1986))+((x1985*x1986)))),-1);
if(!x1992.valid){
continue;
}
CheckValue<IkReal> x1993 = IKatan2WithCheck(IkReal((((x1987*x1989))+(((-1.0)*r11*x1988*x1991))+(((-1.0)*r01*x1987*x1988))+((x1990*x1991)))),IkReal(((((-1.0)*x1987*x1990))+(((-1.0)*r01*x1988*x1991))+((x1989*x1991))+((r11*sj5*x1987)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1993.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1992.value)))+(x1993.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1994=IKsin(j0);
IkReal x1995=IKcos(j0);
IkReal x1996=(r10*sj3);
IkReal x1997=(cj3*r00);
IkReal x1998=(cj5*sj4);
IkReal x1999=(r01*sj5);
IkReal x2000=((1.0)*sj4);
IkReal x2001=(cj3*r10);
IkReal x2002=(cj1*cj2);
IkReal x2003=(cj3*cj5);
IkReal x2004=(cj4*sj3);
IkReal x2005=(r00*sj3);
IkReal x2006=(cj3*cj4);
IkReal x2007=((1.0)*sj5);
IkReal x2008=(r11*sj5);
IkReal x2009=((0.4)*cj5);
IkReal x2010=((0.4)*sj5);
IkReal x2011=((0.00043624)*x1995);
IkReal x2012=((1.0)*cj4*cj5);
IkReal x2013=((0.00043624)*x1994);
IkReal x2014=(sj1*x1994);
IkReal x2015=(sj2*x1995);
IkReal x2016=((1.0)*cj5*sj3);
IkReal x2017=(sj1*x1995);
IkReal x2018=(sj2*x1994);
evalcond[0]=(((cj2*x1994))+((cj1*x2015))+((r00*x1998))+(((-1.0)*x1999*x2000)));
evalcond[1]=(((cj1*x2018))+((r10*x1998))+(((-1.0)*x2000*x2008))+(((-1.0)*cj2*x1995)));
evalcond[2]=(((r01*x2003))+x2017+((x1999*x2004))+((sj5*x1997))+(((-1.0)*cj5*r00*x2004)));
evalcond[3]=(((r11*x2003))+x2014+((sj5*x2001))+(((-1.0)*x1996*x2012))+((x2004*x2008)));
evalcond[4]=(x2015+((x1994*x2002))+(((-1.0)*x1996*x2007))+((x2006*x2008))+(((-1.0)*r11*x2016))+(((-1.0)*x2001*x2012)));
evalcond[5]=((((-1.0)*x2005*x2007))+((x1999*x2006))+(((-1.0)*x1997*x2012))+((x1995*x2002))+(((-1.0)*x2018))+(((-1.0)*r01*x2016)));
evalcond[6]=((((-1.0)*x2011))+(((-1.0)*r01*x2009))+(((0.42)*x2017))+(((-1.0)*px))+((x2002*x2011))+(((-1.0)*sj2*x2013))+(((-1.0)*r00*x2010)));
evalcond[7]=((((-1.0)*x2013))+(((-1.0)*r11*x2009))+(((0.42)*x2014))+(((-1.0)*py))+((x2002*x2013))+((sj2*x2011))+(((-1.0)*r10*x2010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x2021 = IKatan2WithCheck(IkReal(((-0.4)*r21)),IkReal(((-0.4)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2021.valid){
continue;
}
IkReal x2019=((1.0)*(x2021.value));
if((((((0.16)*(r20*r20)))+(((0.16)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x2022=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.16)*(r20*r20)))+(((0.16)*(r21*r21)))))),-1);
if(!x2022.valid){
continue;
}
if( (((x2022.value)*(((((-1.0)*pz))+(((0.42)*cj1))+(((-0.00043624)*cj2*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((x2022.value)*(((((-1.0)*pz))+(((0.42)*cj1))+(((-0.00043624)*cj2*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2020=IKasin(((x2022.value)*(((((-1.0)*pz))+(((0.42)*cj1))+(((-0.00043624)*cj2*sj1))))));
j5array[0]=((((-1.0)*x2019))+(((-1.0)*x2020)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x2019))+x2020);
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x2023=cj5*cj5;
IkReal x2024=r21*r21;
IkReal x2025=(cj3*x2023);
IkReal x2026=((((-1.0)*x2024*x2025))+(((-2.0)*cj3*cj5*r20*r21*sj5))+((x2025*(r20*r20)))+((cj3*(r22*r22)))+((cj3*x2024)));
j4eval[0]=x2026;
j4eval[1]=IKsign(x2026);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2027=cj5*cj5;
IkReal x2028=r21*r21;
IkReal x2029=(sj3*x2027);
IkReal x2030=(((sj3*(r22*r22)))+((x2029*(r20*r20)))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((sj3*x2028))+(((-1.0)*x2028*x2029)));
j4eval[0]=x2030;
j4eval[1]=IKsign(x2030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x2031=cj1*cj1;
IkReal x2032=cj2*cj2;
IkReal x2033=(cj1*cj2);
IkReal x2034=((1925.54557124519)*sj1);
IkReal x2035=((57256500000.0)*sj1);
IkReal x2036=((29735209.0)*x2032);
j0eval[0]=((926933.436735488)+((x2031*x2032))+((x2033*x2034))+(((-926931.436735488)*x2031))+(((-1.0)*x2032))+(((-1.0)*x2034))+(((-2.0)*x2033)));
j0eval[1]=IKsign(((27562559470418.0)+(((-59470418.0)*x2033))+((x2031*x2036))+((x2033*x2035))+(((-1.0)*x2035))+(((-1.0)*x2036))+(((-27562500000000.0)*x2031))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2037=((1.0)*sj5);
IkReal x2038=((1.0)*cj5);
j0eval[0]=sj1;
j0eval[1]=((IKabs(((((-1.0)*r11*x2038))+(((-1.0)*r10*x2037)))))+(IKabs(((((-1.0)*r00*x2037))+(((-1.0)*r01*x2038))))));
j0eval[2]=IKsign(sj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2039=cj5*cj5;
IkReal x2040=r21*r21;
IkReal x2041=((1.0)*sj1);
IkReal x2042=(cj5*r20);
IkReal x2043=(r21*sj5);
IkReal x2044=(r22*sj1);
IkReal x2045=((r22*r22)+x2040+(((-1.0)*x2039*x2040))+((x2039*(r20*r20)))+(((-2.0)*x2042*x2043)));
j4eval[0]=x2045;
j4eval[1]=IKsign(x2045);
j4eval[2]=((IKabs((((sj1*sj2*x2042))+((cj2*x2044))+(((-1.0)*sj2*x2041*x2043)))))+(IKabs((((cj2*sj1*x2043))+(((-1.0)*cj2*x2041*x2042))+((sj2*x2044))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=((962.772785622593)+((cj1*cj2*sj1))+(((-1.0)*sj1))+(((-962.772785622593)*(cj1*cj1))));
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
IkReal x2046=((68162500000.0)*cj2);
IkReal x2047=((68162500000.0)*px);
IkReal x2048=((68162500000.0)*py);
j0eval[0]=((1.0)+(((-1.0)*cj2)));
j0eval[1]=IKsign(((59470418.0)+(((-59470418.0)*cj2))));
j0eval[2]=((IKabs(((((-1.0)*x2048))+(((-1.0)*sj2*x2047))+((py*x2046)))))+(IKabs(((((-1.0)*x2047))+((px*x2046))+((sj2*x2048))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j4eval[0]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j4eval[0]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2050 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x2050.valid){
continue;
}
IkReal x2049=x2050.value;
j4array[0]=((-1.0)*x2049);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x2049)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x2051=IKsin(j4);
evalcond[0]=((((-1.0)*r21*sj5*x2051))+((cj5*r20*x2051))+((r22*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2052=(r01*sj5);
IkReal x2053=((1.0)*cj4);
IkReal x2054=((1.0)*sj4);
IkReal x2055=(cj5*r00);
if( IKabs(((((-1.0)*x2054*x2055))+(((-1.0)*r02*x2053))+((sj4*x2052)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x2055))+(((-1.0)*r02*x2054))+(((-1.0)*x2052*x2053)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2054*x2055))+(((-1.0)*r02*x2053))+((sj4*x2052))))+IKsqr((((cj4*x2055))+(((-1.0)*r02*x2054))+(((-1.0)*x2052*x2053))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x2054*x2055))+(((-1.0)*r02*x2053))+((sj4*x2052))), (((cj4*x2055))+(((-1.0)*r02*x2054))+(((-1.0)*x2052*x2053))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2056=IKsin(j0);
IkReal x2057=IKcos(j0);
IkReal x2058=(cj5*r00);
IkReal x2059=((1.0)*cj4);
IkReal x2060=(cj4*sj5);
IkReal x2061=(cj5*r10);
IkReal x2062=((1.0)*sj4*sj5);
evalcond[0]=(x2056+(((-1.0)*r01*x2062))+((sj4*x2058))+((cj4*r02)));
evalcond[1]=(x2056+((r11*x2060))+((r12*sj4))+(((-1.0)*x2059*x2061)));
evalcond[2]=((((-1.0)*x2058*x2059))+x2057+((r02*sj4))+((r01*x2060)));
evalcond[3]=((((-1.0)*r11*x2062))+(((-1.0)*x2057))+((sj4*x2061))+((cj4*r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2064 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2064.valid){
continue;
}
IkReal x2063=x2064.value;
j4array[0]=((-1.0)*x2063);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x2063)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x2065=IKcos(j4);
evalcond[0]=(((r22*(IKsin(j4))))+(((-1.0)*cj5*r20*x2065))+((r21*sj5*x2065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2066=(r01*sj5);
IkReal x2067=((1.0)*cj4);
IkReal x2068=((1.0)*sj4);
IkReal x2069=(cj5*r00);
if( IKabs(((((-1.0)*r02*x2067))+((sj4*x2066))+(((-1.0)*x2068*x2069)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x2068))+((cj4*x2069))+(((-1.0)*x2066*x2067)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x2067))+((sj4*x2066))+(((-1.0)*x2068*x2069))))+IKsqr(((((-1.0)*r02*x2068))+((cj4*x2069))+(((-1.0)*x2066*x2067))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r02*x2067))+((sj4*x2066))+(((-1.0)*x2068*x2069))), ((((-1.0)*r02*x2068))+((cj4*x2069))+(((-1.0)*x2066*x2067))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2070=IKsin(j0);
IkReal x2071=IKcos(j0);
IkReal x2072=(cj5*r00);
IkReal x2073=((1.0)*cj4);
IkReal x2074=(cj4*sj5);
IkReal x2075=(cj5*r10);
IkReal x2076=((1.0)*sj4*sj5);
evalcond[0]=(x2070+((sj4*x2072))+(((-1.0)*r01*x2076))+((cj4*r02)));
evalcond[1]=(x2070+((r11*x2074))+((r12*sj4))+(((-1.0)*x2073*x2075)));
evalcond[2]=(x2071+((r02*sj4))+((r01*x2074))+(((-1.0)*x2072*x2073)));
evalcond[3]=((((-1.0)*r11*x2076))+((sj4*x2075))+(((-1.0)*x2071))+((cj4*r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj2)))+(IKabs(((-1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2078 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x2078.valid){
continue;
}
IkReal x2077=x2078.value;
j4array[0]=((-1.0)*x2077);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x2077)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x2079=IKsin(j4);
evalcond[0]=((((-1.0)*r21*sj5*x2079))+((cj5*r20*x2079))+((r22*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2080=(r01*sj5);
IkReal x2081=((1.0)*cj4);
IkReal x2082=((1.0)*sj4);
IkReal x2083=(cj5*r00);
if( IKabs(((((-1.0)*r02*x2081))+((sj4*x2080))+(((-1.0)*x2082*x2083)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x2082))+((cj4*x2083))+(((-1.0)*x2080*x2081)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x2081))+((sj4*x2080))+(((-1.0)*x2082*x2083))))+IKsqr(((((-1.0)*r02*x2082))+((cj4*x2083))+(((-1.0)*x2080*x2081))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r02*x2081))+((sj4*x2080))+(((-1.0)*x2082*x2083))), ((((-1.0)*r02*x2082))+((cj4*x2083))+(((-1.0)*x2080*x2081))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2084=IKsin(j0);
IkReal x2085=IKcos(j0);
IkReal x2086=(cj5*r00);
IkReal x2087=((1.0)*cj4);
IkReal x2088=(cj4*sj5);
IkReal x2089=(cj5*r10);
IkReal x2090=((1.0)*sj4*sj5);
evalcond[0]=(x2084+((sj4*x2086))+(((-1.0)*r01*x2090))+((cj4*r02)));
evalcond[1]=(x2084+(((-1.0)*x2087*x2089))+((r12*sj4))+((r11*x2088)));
evalcond[2]=(x2085+(((-1.0)*x2086*x2087))+((r02*sj4))+((r01*x2088)));
evalcond[3]=((((-1.0)*x2085))+((sj4*x2089))+(((-1.0)*r11*x2090))+((cj4*r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2092 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2092.valid){
continue;
}
IkReal x2091=x2092.value;
j4array[0]=((-1.0)*x2091);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x2091)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x2093=IKcos(j4);
evalcond[0]=(((r22*(IKsin(j4))))+((r21*sj5*x2093))+(((-1.0)*cj5*r20*x2093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2094=(r01*sj5);
IkReal x2095=((1.0)*cj4);
IkReal x2096=((1.0)*sj4);
IkReal x2097=(cj5*r00);
if( IKabs(((((-1.0)*x2096*x2097))+((sj4*x2094))+(((-1.0)*r02*x2095)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2094*x2095))+(((-1.0)*r02*x2096))+((cj4*x2097)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2096*x2097))+((sj4*x2094))+(((-1.0)*r02*x2095))))+IKsqr(((((-1.0)*x2094*x2095))+(((-1.0)*r02*x2096))+((cj4*x2097))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x2096*x2097))+((sj4*x2094))+(((-1.0)*r02*x2095))), ((((-1.0)*x2094*x2095))+(((-1.0)*r02*x2096))+((cj4*x2097))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2098=IKsin(j0);
IkReal x2099=IKcos(j0);
IkReal x2100=(cj5*r00);
IkReal x2101=((1.0)*cj4);
IkReal x2102=(cj4*sj5);
IkReal x2103=(cj5*r10);
IkReal x2104=((1.0)*sj4*sj5);
evalcond[0]=(x2098+((sj4*x2100))+(((-1.0)*r01*x2104))+((cj4*r02)));
evalcond[1]=(((r11*x2102))+x2098+(((-1.0)*x2101*x2103))+((r12*sj4)));
evalcond[2]=((((-1.0)*x2100*x2101))+x2099+((r02*sj4))+((r01*x2102)));
evalcond[3]=(((sj4*x2103))+(((-1.0)*r11*x2104))+(((-1.0)*x2099))+((cj4*r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj2)))+(IKabs(((1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2106 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x2106.valid){
continue;
}
IkReal x2105=x2106.value;
j4array[0]=((-1.0)*x2105);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x2105)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x2107=IKsin(j4);
evalcond[0]=(((cj5*r20*x2107))+((r22*(IKcos(j4))))+(((-1.0)*r21*sj5*x2107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2108=(r01*sj5);
IkReal x2109=((1.0)*cj4);
IkReal x2110=((1.0)*sj4);
IkReal x2111=(cj5*r00);
if( IKabs(((((-1.0)*r02*x2109))+((sj4*x2108))+(((-1.0)*x2110*x2111)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x2111))+(((-1.0)*x2108*x2109))+(((-1.0)*r02*x2110)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x2109))+((sj4*x2108))+(((-1.0)*x2110*x2111))))+IKsqr((((cj4*x2111))+(((-1.0)*x2108*x2109))+(((-1.0)*r02*x2110))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r02*x2109))+((sj4*x2108))+(((-1.0)*x2110*x2111))), (((cj4*x2111))+(((-1.0)*x2108*x2109))+(((-1.0)*r02*x2110))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2112=IKsin(j0);
IkReal x2113=IKcos(j0);
IkReal x2114=(cj5*r00);
IkReal x2115=((1.0)*cj4);
IkReal x2116=(cj4*sj5);
IkReal x2117=(cj5*r10);
IkReal x2118=((1.0)*sj4*sj5);
evalcond[0]=((((-1.0)*r01*x2118))+x2112+((sj4*x2114))+((cj4*r02)));
evalcond[1]=(x2112+((r12*sj4))+(((-1.0)*x2115*x2117))+((r11*x2116)));
evalcond[2]=((((-1.0)*x2114*x2115))+((r01*x2116))+x2113+((r02*sj4)));
evalcond[3]=((((-1.0)*r11*x2118))+((sj4*x2117))+(((-1.0)*x2113))+((cj4*r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2120 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2120.valid){
continue;
}
IkReal x2119=x2120.value;
j4array[0]=((-1.0)*x2119);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x2119)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x2121=IKcos(j4);
evalcond[0]=(((r21*sj5*x2121))+((r22*(IKsin(j4))))+(((-1.0)*cj5*r20*x2121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2122=(r01*sj5);
IkReal x2123=((1.0)*cj4);
IkReal x2124=((1.0)*sj4);
IkReal x2125=(cj5*r00);
if( IKabs(((((-1.0)*r02*x2123))+((sj4*x2122))+(((-1.0)*x2124*x2125)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2122*x2123))+(((-1.0)*r02*x2124))+((cj4*x2125)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x2123))+((sj4*x2122))+(((-1.0)*x2124*x2125))))+IKsqr(((((-1.0)*x2122*x2123))+(((-1.0)*r02*x2124))+((cj4*x2125))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r02*x2123))+((sj4*x2122))+(((-1.0)*x2124*x2125))), ((((-1.0)*x2122*x2123))+(((-1.0)*r02*x2124))+((cj4*x2125))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2126=IKsin(j0);
IkReal x2127=IKcos(j0);
IkReal x2128=(cj5*r00);
IkReal x2129=((1.0)*cj4);
IkReal x2130=(cj4*sj5);
IkReal x2131=(cj5*r10);
IkReal x2132=((1.0)*sj4*sj5);
evalcond[0]=(x2126+(((-1.0)*r01*x2132))+((sj4*x2128))+((cj4*r02)));
evalcond[1]=(((r11*x2130))+x2126+((r12*sj4))+(((-1.0)*x2129*x2131)));
evalcond[2]=(x2127+((r01*x2130))+((r02*sj4))+(((-1.0)*x2128*x2129)));
evalcond[3]=((((-1.0)*r11*x2132))+((sj4*x2131))+(((-1.0)*x2127))+((cj4*r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x2133=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2133);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2133);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2133);
rxp2_2=0;
j0eval[0]=((IKabs(sj2))+(((2292.31615624427)*(IKabs(((-0.00043624)+(((0.00043624)*cj2))))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2134=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2134);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2134);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2134);
rxp2_2=0;
j4eval[0]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2135=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2135);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2135);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2135);
rxp2_2=0;
j4eval[0]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2137 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x2137.valid){
continue;
}
IkReal x2136=x2137.value;
j4array[0]=((-1.0)*x2136);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x2136)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x2138=IKsin(j4);
evalcond[0]=(((cj5*r20*x2138))+((r22*(IKcos(j4))))+(((-1.0)*r21*sj5*x2138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[2];
IkReal x2139=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2139);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2139);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2139);
rxp2_2=0;
j0eval[0]=((-1.0)+cj2);
j0eval[1]=IKsign(((-5453.0)+(((5453.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x2140=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2140);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2140);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2140);
rxp2_2=0;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2141=((5453.0)*cj4*r02);
IkReal x2142=(cj5*r00*sj4);
IkReal x2143=((5453.0)*r01*sj4*sj5);
CheckValue<IkReal> x2144=IKPowWithIntegerCheck(sj2,-1);
if(!x2144.valid){
continue;
}
if( IKabs(((((-1.0)*x2142))+(((-1.0)*cj4*r02))+((r01*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.000183385292499542)*(x2144.value)*(((((-5453.0)*x2142))+((cj2*x2141))+x2143+(((-1.0)*x2141))+(((5453.0)*cj2*x2142))+(((-1.0)*cj2*x2143)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2142))+(((-1.0)*cj4*r02))+((r01*sj4*sj5))))+IKsqr(((0.000183385292499542)*(x2144.value)*(((((-5453.0)*x2142))+((cj2*x2141))+x2143+(((-1.0)*x2141))+(((5453.0)*cj2*x2142))+(((-1.0)*cj2*x2143))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x2142))+(((-1.0)*cj4*r02))+((r01*sj4*sj5))), ((0.000183385292499542)*(x2144.value)*(((((-5453.0)*x2142))+((cj2*x2141))+x2143+(((-1.0)*x2141))+(((5453.0)*cj2*x2142))+(((-1.0)*cj2*x2143))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2145=IKcos(j0);
IkReal x2146=IKsin(j0);
IkReal x2147=(cj5*r00);
IkReal x2148=((1.0)*cj4);
IkReal x2149=(cj5*r10);
IkReal x2150=(cj4*sj5);
IkReal x2151=(sj2*x2145);
IkReal x2152=(cj2*x2146);
IkReal x2153=((0.00043624)*x2145);
IkReal x2154=((1.0)*sj4*sj5);
IkReal x2155=(cj2*x2145);
IkReal x2156=(sj2*x2146);
IkReal x2157=(x2151+x2152);
evalcond[0]=(((cj2*x2153))+(((-0.00043624)*x2156))+(((-1.0)*x2153)));
evalcond[1]=((((0.00043624)*x2151))+(((0.00043624)*x2152))+(((-0.00043624)*x2146)));
evalcond[2]=((((-1.0)*r01*x2154))+x2157+((sj4*x2147))+((cj4*r02)));
evalcond[3]=((((-1.0)*x2148*x2149))+x2157+((r12*sj4))+((r11*x2150)));
evalcond[4]=(x2156+((sj4*x2149))+(((-1.0)*r11*x2154))+((cj4*r12))+(((-1.0)*x2155)));
evalcond[5]=(x2155+((r02*sj4))+((r01*x2150))+(((-1.0)*x2147*x2148))+(((-1.0)*x2156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2158=((5453.0)*sj4);
IkReal x2159=(cj5*r00);
IkReal x2160=(r01*sj5);
IkReal x2161=((5453.0)*cj4*r02);
CheckValue<IkReal> x2162=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((5453.0)*cj2)))),-1);
if(!x2162.valid){
continue;
}
CheckValue<IkReal> x2163 = IKatan2WithCheck(IkReal((((cj2*x2158*x2159))+(((-1.0)*cj2*x2158*x2160))+(((-1.0)*x2158*x2159))+(((-1.0)*x2161))+((x2158*x2160))+((cj2*x2161)))),IkReal((((sj2*x2161))+(((-1.0)*sj2*x2158*x2160))+((sj2*x2158*x2159)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2163.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2162.value)))+(x2163.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2164=IKcos(j0);
IkReal x2165=IKsin(j0);
IkReal x2166=(cj5*r00);
IkReal x2167=((1.0)*cj4);
IkReal x2168=(cj5*r10);
IkReal x2169=(cj4*sj5);
IkReal x2170=(sj2*x2164);
IkReal x2171=(cj2*x2165);
IkReal x2172=((0.00043624)*x2164);
IkReal x2173=((1.0)*sj4*sj5);
IkReal x2174=(cj2*x2164);
IkReal x2175=(sj2*x2165);
IkReal x2176=(x2170+x2171);
evalcond[0]=(((cj2*x2172))+(((-0.00043624)*x2175))+(((-1.0)*x2172)));
evalcond[1]=((((-0.00043624)*x2165))+(((0.00043624)*x2170))+(((0.00043624)*x2171)));
evalcond[2]=(x2176+((sj4*x2166))+(((-1.0)*r01*x2173))+((cj4*r02)));
evalcond[3]=(x2176+((r12*sj4))+(((-1.0)*x2167*x2168))+((r11*x2169)));
evalcond[4]=(x2175+((sj4*x2168))+(((-1.0)*x2174))+(((-1.0)*r11*x2173))+((cj4*r12)));
evalcond[5]=(((r01*x2169))+x2174+(((-1.0)*x2166*x2167))+((r02*sj4))+(((-1.0)*x2175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2178 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2178.valid){
continue;
}
IkReal x2177=x2178.value;
j4array[0]=((-1.0)*x2177);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x2177)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x2179=IKcos(j4);
evalcond[0]=(((r22*(IKsin(j4))))+((r21*sj5*x2179))+(((-1.0)*cj5*r20*x2179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[2];
IkReal x2180=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2180);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2180);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2180);
rxp2_2=0;
j0eval[0]=((-1.0)+cj2);
j0eval[1]=IKsign(((-5453.0)+(((5453.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x2181=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2181);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2181);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2181);
rxp2_2=0;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2182=((5453.0)*cj4*r02);
IkReal x2183=(cj5*r00*sj4);
IkReal x2184=((5453.0)*r01*sj4*sj5);
CheckValue<IkReal> x2185=IKPowWithIntegerCheck(sj2,-1);
if(!x2185.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*x2183))+((r01*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.000183385292499542)*(x2185.value)*(((((-5453.0)*x2183))+x2184+(((5453.0)*cj2*x2183))+(((-1.0)*x2182))+(((-1.0)*cj2*x2184))+((cj2*x2182)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*x2183))+((r01*sj4*sj5))))+IKsqr(((0.000183385292499542)*(x2185.value)*(((((-5453.0)*x2183))+x2184+(((5453.0)*cj2*x2183))+(((-1.0)*x2182))+(((-1.0)*cj2*x2184))+((cj2*x2182))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*x2183))+((r01*sj4*sj5))), ((0.000183385292499542)*(x2185.value)*(((((-5453.0)*x2183))+x2184+(((5453.0)*cj2*x2183))+(((-1.0)*x2182))+(((-1.0)*cj2*x2184))+((cj2*x2182))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2186=IKcos(j0);
IkReal x2187=IKsin(j0);
IkReal x2188=(cj5*r00);
IkReal x2189=((1.0)*cj4);
IkReal x2190=(cj5*r10);
IkReal x2191=(cj4*sj5);
IkReal x2192=(sj2*x2186);
IkReal x2193=(cj2*x2187);
IkReal x2194=((0.00043624)*x2186);
IkReal x2195=((1.0)*sj4*sj5);
IkReal x2196=(cj2*x2186);
IkReal x2197=(sj2*x2187);
IkReal x2198=(x2192+x2193);
evalcond[0]=(((cj2*x2194))+(((-0.00043624)*x2197))+(((-1.0)*x2194)));
evalcond[1]=((((-0.00043624)*x2187))+(((0.00043624)*x2193))+(((0.00043624)*x2192)));
evalcond[2]=((((-1.0)*r01*x2195))+x2198+((sj4*x2188))+((cj4*r02)));
evalcond[3]=((((-1.0)*x2189*x2190))+x2198+((r12*sj4))+((r11*x2191)));
evalcond[4]=((((-1.0)*x2196))+x2197+((sj4*x2190))+(((-1.0)*r11*x2195))+((cj4*r12)));
evalcond[5]=((((-1.0)*x2188*x2189))+(((-1.0)*x2197))+x2196+((r02*sj4))+((r01*x2191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2199=((5453.0)*sj4);
IkReal x2200=(cj5*r00);
IkReal x2201=(r01*sj5);
IkReal x2202=((5453.0)*cj4*r02);
CheckValue<IkReal> x2203 = IKatan2WithCheck(IkReal(((((-1.0)*x2202))+((cj2*x2199*x2200))+((cj2*x2202))+(((-1.0)*x2199*x2200))+((x2199*x2201))+(((-1.0)*cj2*x2199*x2201)))),IkReal((((sj2*x2202))+(((-1.0)*sj2*x2199*x2201))+((sj2*x2199*x2200)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2203.valid){
continue;
}
CheckValue<IkReal> x2204=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((5453.0)*cj2)))),-1);
if(!x2204.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2203.value)+(((1.5707963267949)*(x2204.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2205=IKcos(j0);
IkReal x2206=IKsin(j0);
IkReal x2207=(cj5*r00);
IkReal x2208=((1.0)*cj4);
IkReal x2209=(cj5*r10);
IkReal x2210=(cj4*sj5);
IkReal x2211=(sj2*x2205);
IkReal x2212=(cj2*x2206);
IkReal x2213=((0.00043624)*x2205);
IkReal x2214=((1.0)*sj4*sj5);
IkReal x2215=(cj2*x2205);
IkReal x2216=(sj2*x2206);
IkReal x2217=(x2212+x2211);
evalcond[0]=((((-0.00043624)*x2216))+(((-1.0)*x2213))+((cj2*x2213)));
evalcond[1]=((((0.00043624)*x2212))+(((0.00043624)*x2211))+(((-0.00043624)*x2206)));
evalcond[2]=(x2217+((sj4*x2207))+(((-1.0)*r01*x2214))+((cj4*r02)));
evalcond[3]=(x2217+(((-1.0)*x2208*x2209))+((r11*x2210))+((r12*sj4)));
evalcond[4]=((((-1.0)*x2215))+x2216+(((-1.0)*r11*x2214))+((sj4*x2209))+((cj4*r12)));
evalcond[5]=((((-1.0)*x2216))+(((-1.0)*x2207*x2208))+((r01*x2210))+x2215+((r02*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x2219 = IKatan2WithCheck(IkReal(((-0.00043624)+(((0.00043624)*cj2)))),IkReal(((-0.00043624)*sj2)),IKFAST_ATAN2_MAGTHRESH);
if(!x2219.valid){
continue;
}
IkReal x2218=x2219.value;
j0array[0]=((-1.0)*x2218);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x2218)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x2220=IKsin(j0);
IkReal x2221=((0.00043624)*x2220);
evalcond[0]=((((0.00043624)*sj2*(IKcos(j0))))+(((-1.0)*x2221))+((cj2*x2221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x2222=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2222);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2222);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2222);
rxp2_2=0;
IkReal x2223=((1.0)*cj5);
IkReal x2224=(cj0*sj2);
IkReal x2225=(cj2*sj0);
IkReal x2226=(r21*sj5);
IkReal x2227=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2223)));
j4eval[0]=x2227;
j4eval[1]=IKsign(x2227);
j4eval[2]=((IKabs(((((-1.0)*r20*x2223*x2225))+(((-1.0)*r20*x2223*x2224))+((x2225*x2226))+((x2224*x2226)))))+(IKabs((((r22*x2224))+((r22*x2225))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2228=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2228);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2228);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2228);
rxp2_2=0;
IkReal x2229=(cj2*sj0);
IkReal x2230=(r21*sj5);
IkReal x2231=(cj0*sj2);
IkReal x2232=((1.0)*r22);
IkReal x2233=((1.0)*cj5*r20);
IkReal x2234=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2234;
j4eval[1]=IKsign(x2234);
j4eval[2]=((IKabs(((((-1.0)*x2229*x2232))+(((-1.0)*x2231*x2232)))))+(IKabs((((x2229*x2230))+(((-1.0)*x2229*x2233))+((x2230*x2231))+(((-1.0)*x2231*x2233))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2235=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2235);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2235);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2235);
rxp2_2=0;
IkReal x2236=cj5*cj5;
IkReal x2237=(r11*r21);
IkReal x2238=(cj0*sj2);
IkReal x2239=((1.0)*r20);
IkReal x2240=(cj2*sj0);
IkReal x2241=(r21*sj5);
IkReal x2242=(((cj5*r10*x2241))+(((-1.0)*r10*x2236*x2239))+(((-1.0)*r12*r22))+((x2236*x2237))+(((-1.0)*x2237))+((cj5*r11*r20*sj5)));
j4eval[0]=x2242;
j4eval[1]=((IKabs(((((-1.0)*cj5*x2238*x2239))+(((-1.0)*cj5*x2239*x2240))+((x2240*x2241))+((x2238*x2241)))))+(IKabs((((r22*x2238))+((r22*x2240))))));
j4eval[2]=IKsign(x2242);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2243=cj5*cj5;
IkReal x2244=(r11*r21);
IkReal x2245=(cj0*sj2);
IkReal x2246=(cj2*sj0);
IkReal x2247=(r21*sj5);
IkReal x2248=(cj5*r20);
CheckValue<IkReal> x2249 = IKatan2WithCheck(IkReal((((r22*x2245))+((r22*x2246)))),IkReal((((x2246*x2247))+(((-1.0)*x2246*x2248))+(((-1.0)*x2245*x2248))+((x2245*x2247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2249.valid){
continue;
}
CheckValue<IkReal> x2250=IKPowWithIntegerCheck(IKsign((((cj5*r10*x2247))+((r11*sj5*x2248))+(((-1.0)*x2244))+((x2243*x2244))+(((-1.0)*r10*r20*x2243))+(((-1.0)*r12*r22)))),-1);
if(!x2250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2249.value)+(((1.5707963267949)*(x2250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2251=IKsin(j4);
IkReal x2252=IKcos(j4);
IkReal x2253=(cj2*sj0);
IkReal x2254=(cj0*sj2);
IkReal x2255=(cj5*r00);
IkReal x2256=(cj0*cj2);
IkReal x2257=(sj0*sj2);
IkReal x2258=((1.0)*x2252);
IkReal x2259=(sj5*x2252);
IkReal x2260=(cj5*x2251);
IkReal x2261=(x2254+x2253);
IkReal x2262=((1.0)*sj5*x2251);
evalcond[0]=((((-1.0)*r21*x2262))+((r22*x2252))+((r20*x2260)));
evalcond[1]=((((-1.0)*cj5*r20*x2258))+((r22*x2251))+((r21*x2259)));
evalcond[2]=(x2261+(((-1.0)*r01*x2262))+((x2251*x2255))+((r02*x2252)));
evalcond[3]=(x2261+((r12*x2251))+(((-1.0)*cj5*r10*x2258))+((r11*x2259)));
evalcond[4]=(x2257+(((-1.0)*x2256))+((r12*x2252))+((r10*x2260))+(((-1.0)*r11*x2262)));
evalcond[5]=((((-1.0)*x2255*x2258))+x2256+(((-1.0)*x2257))+((r01*x2259))+((r02*x2251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2263=(cj2*sj0);
IkReal x2264=(r21*sj5);
IkReal x2265=(cj0*sj2);
IkReal x2266=((1.0)*r22);
IkReal x2267=((1.0)*cj5*r20);
CheckValue<IkReal> x2268 = IKatan2WithCheck(IkReal((((x2263*x2264))+(((-1.0)*x2263*x2267))+((x2264*x2265))+(((-1.0)*x2265*x2267)))),IkReal(((((-1.0)*x2263*x2266))+(((-1.0)*x2265*x2266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2268.valid){
continue;
}
CheckValue<IkReal> x2269=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2268.value)+(((1.5707963267949)*(x2269.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2270=IKsin(j4);
IkReal x2271=IKcos(j4);
IkReal x2272=(cj2*sj0);
IkReal x2273=(cj0*sj2);
IkReal x2274=(cj5*r00);
IkReal x2275=(cj0*cj2);
IkReal x2276=(sj0*sj2);
IkReal x2277=((1.0)*x2271);
IkReal x2278=(sj5*x2271);
IkReal x2279=(cj5*x2270);
IkReal x2280=(x2273+x2272);
IkReal x2281=((1.0)*sj5*x2270);
evalcond[0]=(((r22*x2271))+((r20*x2279))+(((-1.0)*r21*x2281)));
evalcond[1]=((((-1.0)*cj5*r20*x2277))+((r21*x2278))+((r22*x2270)));
evalcond[2]=(x2280+((x2270*x2274))+((r02*x2271))+(((-1.0)*r01*x2281)));
evalcond[3]=(x2280+((r11*x2278))+((r12*x2270))+(((-1.0)*cj5*r10*x2277)));
evalcond[4]=(x2276+(((-1.0)*r11*x2281))+((r10*x2279))+((r12*x2271))+(((-1.0)*x2275)));
evalcond[5]=(((r01*x2278))+x2275+(((-1.0)*x2274*x2277))+((r02*x2270))+(((-1.0)*x2276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2282=((1.0)*cj5);
IkReal x2283=(cj0*sj2);
IkReal x2284=(cj2*sj0);
IkReal x2285=(r21*sj5);
CheckValue<IkReal> x2286 = IKatan2WithCheck(IkReal((((r22*x2283))+((r22*x2284)))),IkReal(((((-1.0)*r20*x2282*x2283))+(((-1.0)*r20*x2282*x2284))+((x2283*x2285))+((x2284*x2285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2286.valid){
continue;
}
CheckValue<IkReal> x2287=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2282)))),-1);
if(!x2287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2286.value)+(((1.5707963267949)*(x2287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2288=IKsin(j4);
IkReal x2289=IKcos(j4);
IkReal x2290=(cj2*sj0);
IkReal x2291=(cj0*sj2);
IkReal x2292=(cj5*r00);
IkReal x2293=(cj0*cj2);
IkReal x2294=(sj0*sj2);
IkReal x2295=((1.0)*x2289);
IkReal x2296=(sj5*x2289);
IkReal x2297=(cj5*x2288);
IkReal x2298=(x2291+x2290);
IkReal x2299=((1.0)*sj5*x2288);
evalcond[0]=(((r20*x2297))+((r22*x2289))+(((-1.0)*r21*x2299)));
evalcond[1]=(((r21*x2296))+(((-1.0)*cj5*r20*x2295))+((r22*x2288)));
evalcond[2]=(x2298+(((-1.0)*r01*x2299))+((x2288*x2292))+((r02*x2289)));
evalcond[3]=((((-1.0)*cj5*r10*x2295))+x2298+((r12*x2288))+((r11*x2296)));
evalcond[4]=(x2294+((r10*x2297))+((r12*x2289))+(((-1.0)*x2293))+(((-1.0)*r11*x2299)));
evalcond[5]=(x2293+(((-1.0)*x2292*x2295))+(((-1.0)*x2294))+((r01*x2296))+((r02*x2288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2301 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x2301.valid){
continue;
}
IkReal x2300=x2301.value;
j4array[0]=((-1.0)*x2300);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x2300)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x2302=IKsin(j4);
evalcond[0]=((((-1.0)*r21*sj5*x2302))+((cj5*r20*x2302))+((r22*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
IkReal x2303=((68162500000.0)*cj2);
IkReal x2304=((68162500000.0)*px);
IkReal x2305=((68162500000.0)*py);
j0eval[0]=((1.0)+(((-1.0)*cj2)));
j0eval[1]=IKsign(((59470418.0)+(((-59470418.0)*cj2))));
j0eval[2]=((IKabs(((((-1.0)*sj2*x2304))+((py*x2303))+(((-1.0)*x2305)))))+(IKabs((((px*x2303))+(((-1.0)*x2304))+((sj2*x2305))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=((-1.0)+cj2);
j0eval[1]=IKsign(((-5453.0)+(((5453.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2306=(r01*sj5);
IkReal x2307=((1.0)*cj4);
IkReal x2308=((1.0)*sj4);
IkReal x2309=(cj5*r00);
if( IKabs(((((-1.0)*x2308*x2309))+(((-1.0)*r02*x2307))+((sj4*x2306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2306*x2307))+((cj4*x2309))+(((-1.0)*r02*x2308)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2308*x2309))+(((-1.0)*r02*x2307))+((sj4*x2306))))+IKsqr(((((-1.0)*x2306*x2307))+((cj4*x2309))+(((-1.0)*r02*x2308))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x2308*x2309))+(((-1.0)*r02*x2307))+((sj4*x2306))), ((((-1.0)*x2306*x2307))+((cj4*x2309))+(((-1.0)*r02*x2308))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2310=IKsin(j0);
IkReal x2311=IKcos(j0);
IkReal x2312=(cj5*r00);
IkReal x2313=((1.0)*cj4);
IkReal x2314=(cj4*sj5);
IkReal x2315=(cj5*r10);
IkReal x2316=((1.0)*sj4*sj5);
evalcond[0]=(x2310+((sj4*x2312))+(((-1.0)*r01*x2316))+((cj4*r02)));
evalcond[1]=(x2310+((r11*x2314))+(((-1.0)*x2313*x2315))+((r12*sj4)));
evalcond[2]=(x2311+(((-1.0)*x2312*x2313))+((r02*sj4))+((r01*x2314)));
evalcond[3]=((((-1.0)*x2311))+((sj4*x2315))+(((-1.0)*r11*x2316))+((cj4*r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-1146.15807812213)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1146.15807812213)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1146.15807812213)*py))+IKsqr(((-1146.15807812213)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-1146.15807812213)*py), ((-1146.15807812213)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2317=IKcos(j0);
IkReal x2318=IKsin(j0);
IkReal x2319=(cj5*r00);
IkReal x2320=((1.0)*cj4);
IkReal x2321=(cj4*sj5);
IkReal x2322=(cj5*r10);
IkReal x2323=((1.0)*x2318);
IkReal x2324=((1.0)*sj4*sj5);
evalcond[0]=((((-1.0)*px))+(((-0.00087248)*x2317)));
evalcond[1]=((((-1.0)*py))+(((-0.00087248)*x2318)));
evalcond[2]=(x2317+((sj4*x2322))+(((-1.0)*r11*x2324))+((cj4*r12)));
evalcond[3]=(((sj4*x2319))+(((-1.0)*r01*x2324))+(((-1.0)*x2323))+((cj4*r02)));
evalcond[4]=(((r11*x2321))+(((-1.0)*x2320*x2322))+((r12*sj4))+(((-1.0)*x2323)));
evalcond[5]=((((-1.0)*x2317))+(((-1.0)*x2319*x2320))+((r02*sj4))+((r01*x2321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj2)))+(IKabs(((-1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2325=(r01*sj5);
IkReal x2326=((1.0)*cj4);
IkReal x2327=((1.0)*sj4);
IkReal x2328=(cj5*r00);
if( IKabs((((sj4*x2325))+(((-1.0)*x2327*x2328))+(((-1.0)*r02*x2326)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x2328))+(((-1.0)*x2325*x2326))+(((-1.0)*r02*x2327)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x2325))+(((-1.0)*x2327*x2328))+(((-1.0)*r02*x2326))))+IKsqr((((cj4*x2328))+(((-1.0)*x2325*x2326))+(((-1.0)*r02*x2327))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((sj4*x2325))+(((-1.0)*x2327*x2328))+(((-1.0)*r02*x2326))), (((cj4*x2328))+(((-1.0)*x2325*x2326))+(((-1.0)*r02*x2327))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2329=IKsin(j0);
IkReal x2330=IKcos(j0);
IkReal x2331=(cj5*r00);
IkReal x2332=((1.0)*cj4);
IkReal x2333=(cj4*sj5);
IkReal x2334=(cj5*r10);
IkReal x2335=((1.0)*sj4*sj5);
evalcond[0]=(x2329+(((-1.0)*r01*x2335))+((sj4*x2331))+((cj4*r02)));
evalcond[1]=((((-1.0)*x2332*x2334))+x2329+((r11*x2333))+((r12*sj4)));
evalcond[2]=(x2330+(((-1.0)*x2331*x2332))+((r01*x2333))+((r02*sj4)));
evalcond[3]=(((sj4*x2334))+(((-1.0)*r11*x2335))+(((-1.0)*x2330))+((cj4*r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj2)))+(IKabs(((1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2336=(r01*sj5);
IkReal x2337=((1.0)*cj4);
IkReal x2338=((1.0)*sj4);
IkReal x2339=(cj5*r00);
if( IKabs(((((-1.0)*x2338*x2339))+(((-1.0)*r02*x2337))+((sj4*x2336)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x2338))+((cj4*x2339))+(((-1.0)*x2336*x2337)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2338*x2339))+(((-1.0)*r02*x2337))+((sj4*x2336))))+IKsqr(((((-1.0)*r02*x2338))+((cj4*x2339))+(((-1.0)*x2336*x2337))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x2338*x2339))+(((-1.0)*r02*x2337))+((sj4*x2336))), ((((-1.0)*r02*x2338))+((cj4*x2339))+(((-1.0)*x2336*x2337))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2340=IKsin(j0);
IkReal x2341=IKcos(j0);
IkReal x2342=(cj5*r00);
IkReal x2343=((1.0)*cj4);
IkReal x2344=(cj4*sj5);
IkReal x2345=(cj5*r10);
IkReal x2346=((1.0)*sj4*sj5);
evalcond[0]=(x2340+(((-1.0)*r01*x2346))+((sj4*x2342))+((cj4*r02)));
evalcond[1]=(x2340+((r11*x2344))+((r12*sj4))+(((-1.0)*x2343*x2345)));
evalcond[2]=(((r01*x2344))+x2341+((r02*sj4))+(((-1.0)*x2342*x2343)));
evalcond[3]=((((-1.0)*x2341))+((sj4*x2345))+(((-1.0)*r11*x2346))+((cj4*r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x2347=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2347);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2347);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2347);
rxp2_2=0;
j0eval[0]=((-1.0)+cj2);
j0eval[1]=IKsign(((-5453.0)+(((5453.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x2348=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2348);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2348);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2348);
rxp2_2=0;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2349=((5453.0)*cj4*r02);
IkReal x2350=(cj5*r00*sj4);
IkReal x2351=((5453.0)*r01*sj4*sj5);
CheckValue<IkReal> x2352=IKPowWithIntegerCheck(sj2,-1);
if(!x2352.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*x2350))+((r01*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.000183385292499542)*(x2352.value)*(((((5453.0)*cj2*x2350))+x2351+((cj2*x2349))+(((-1.0)*cj2*x2351))+(((-5453.0)*x2350))+(((-1.0)*x2349)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*x2350))+((r01*sj4*sj5))))+IKsqr(((0.000183385292499542)*(x2352.value)*(((((5453.0)*cj2*x2350))+x2351+((cj2*x2349))+(((-1.0)*cj2*x2351))+(((-5453.0)*x2350))+(((-1.0)*x2349))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*x2350))+((r01*sj4*sj5))), ((0.000183385292499542)*(x2352.value)*(((((5453.0)*cj2*x2350))+x2351+((cj2*x2349))+(((-1.0)*cj2*x2351))+(((-5453.0)*x2350))+(((-1.0)*x2349))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2353=IKcos(j0);
IkReal x2354=IKsin(j0);
IkReal x2355=(cj5*r00);
IkReal x2356=((1.0)*cj4);
IkReal x2357=(cj5*r10);
IkReal x2358=(cj4*sj5);
IkReal x2359=(sj2*x2353);
IkReal x2360=(cj2*x2354);
IkReal x2361=((0.00043624)*x2353);
IkReal x2362=((1.0)*sj4*sj5);
IkReal x2363=(cj2*x2353);
IkReal x2364=(sj2*x2354);
IkReal x2365=(x2360+x2359);
evalcond[0]=((((-0.00043624)*x2364))+(((-1.0)*x2361))+((cj2*x2361)));
evalcond[1]=((((0.00043624)*x2359))+(((-0.00043624)*x2354))+(((0.00043624)*x2360)));
evalcond[2]=(x2365+(((-1.0)*r01*x2362))+((sj4*x2355))+((cj4*r02)));
evalcond[3]=((((-1.0)*x2356*x2357))+x2365+((r11*x2358))+((r12*sj4)));
evalcond[4]=(x2364+(((-1.0)*x2363))+((sj4*x2357))+(((-1.0)*r11*x2362))+((cj4*r12)));
evalcond[5]=(((r01*x2358))+x2363+(((-1.0)*x2355*x2356))+(((-1.0)*x2364))+((r02*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2366=((5453.0)*sj4);
IkReal x2367=(cj5*r00);
IkReal x2368=(r01*sj5);
IkReal x2369=((5453.0)*cj4*r02);
CheckValue<IkReal> x2370=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((5453.0)*cj2)))),-1);
if(!x2370.valid){
continue;
}
CheckValue<IkReal> x2371 = IKatan2WithCheck(IkReal((((cj2*x2366*x2367))+(((-1.0)*x2369))+((x2366*x2368))+(((-1.0)*cj2*x2366*x2368))+((cj2*x2369))+(((-1.0)*x2366*x2367)))),IkReal((((sj2*x2369))+(((-1.0)*sj2*x2366*x2368))+((sj2*x2366*x2367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2371.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2370.value)))+(x2371.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2372=IKcos(j0);
IkReal x2373=IKsin(j0);
IkReal x2374=(cj5*r00);
IkReal x2375=((1.0)*cj4);
IkReal x2376=(cj5*r10);
IkReal x2377=(cj4*sj5);
IkReal x2378=(sj2*x2372);
IkReal x2379=(cj2*x2373);
IkReal x2380=((0.00043624)*x2372);
IkReal x2381=((1.0)*sj4*sj5);
IkReal x2382=(cj2*x2372);
IkReal x2383=(sj2*x2373);
IkReal x2384=(x2378+x2379);
evalcond[0]=((((-0.00043624)*x2383))+(((-1.0)*x2380))+((cj2*x2380)));
evalcond[1]=((((-0.00043624)*x2373))+(((0.00043624)*x2378))+(((0.00043624)*x2379)));
evalcond[2]=((((-1.0)*r01*x2381))+x2384+((sj4*x2374))+((cj4*r02)));
evalcond[3]=(x2384+(((-1.0)*x2375*x2376))+((r12*sj4))+((r11*x2377)));
evalcond[4]=(x2383+(((-1.0)*x2382))+((sj4*x2376))+((cj4*r12))+(((-1.0)*r11*x2381)));
evalcond[5]=(x2382+((r02*sj4))+(((-1.0)*x2383))+(((-1.0)*x2374*x2375))+((r01*x2377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2385=((5453.0)*cj2);
IkReal x2386=(cj5*r00*sj4);
IkReal x2387=((5453.0)*cj4*r02);
IkReal x2388=(r01*sj4*sj5);
CheckValue<IkReal> x2389=IKPowWithIntegerCheck(sj2,-1);
if(!x2389.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*r02))+x2388+(((-1.0)*x2386))+(((-2292.31615624427)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.000183385292499542)*(x2389.value)*(((((5453.0)*x2388))+(((12500000.0)*cj2*py))+((x2385*x2386))+((cj4*r02*x2385))+(((-5453.0)*x2386))+(((-1.0)*x2387))+(((-1.0)*x2385*x2388)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+x2388+(((-1.0)*x2386))+(((-2292.31615624427)*py))))+IKsqr(((0.000183385292499542)*(x2389.value)*(((((5453.0)*x2388))+(((12500000.0)*cj2*py))+((x2385*x2386))+((cj4*r02*x2385))+(((-5453.0)*x2386))+(((-1.0)*x2387))+(((-1.0)*x2385*x2388))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+x2388+(((-1.0)*x2386))+(((-2292.31615624427)*py))), ((0.000183385292499542)*(x2389.value)*(((((5453.0)*x2388))+(((12500000.0)*cj2*py))+((x2385*x2386))+((cj4*r02*x2385))+(((-5453.0)*x2386))+(((-1.0)*x2387))+(((-1.0)*x2385*x2388))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2390=IKcos(j0);
IkReal x2391=IKsin(j0);
IkReal x2392=(cj5*r00);
IkReal x2393=((1.0)*cj4);
IkReal x2394=(cj5*r10);
IkReal x2395=(cj4*sj5);
IkReal x2396=(sj2*x2390);
IkReal x2397=(cj2*x2391);
IkReal x2398=((0.00043624)*x2390);
IkReal x2399=((1.0)*sj4*sj5);
IkReal x2400=(cj2*x2390);
IkReal x2401=(sj2*x2391);
IkReal x2402=(x2396+x2397);
evalcond[0]=((((-1.0)*px))+(((-1.0)*x2398))+((cj2*x2398))+(((-0.00043624)*x2401)));
evalcond[1]=((((-1.0)*py))+(((0.00043624)*x2397))+(((0.00043624)*x2396))+(((-0.00043624)*x2391)));
evalcond[2]=(((sj4*x2392))+x2402+(((-1.0)*r01*x2399))+((cj4*r02)));
evalcond[3]=(x2402+((r12*sj4))+((r11*x2395))+(((-1.0)*x2393*x2394)));
evalcond[4]=(((sj4*x2394))+(((-1.0)*x2400))+x2401+((cj4*r12))+(((-1.0)*r11*x2399)));
evalcond[5]=((((-1.0)*x2401))+x2400+((r01*x2395))+((r02*sj4))+(((-1.0)*x2392*x2393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2403=((5453.0)*sj4);
IkReal x2404=(cj5*r00);
IkReal x2405=(r01*sj5);
IkReal x2406=((12500000.0)*px);
IkReal x2407=((5453.0)*cj4*r02);
CheckValue<IkReal> x2408=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((5453.0)*cj2)))),-1);
if(!x2408.valid){
continue;
}
CheckValue<IkReal> x2409 = IKatan2WithCheck(IkReal((((x2403*x2405))+(((-1.0)*x2407))+(((-1.0)*x2403*x2404))+((cj2*x2407))+((sj2*x2406))+(((-1.0)*cj2*x2403*x2405))+((cj2*x2403*x2404)))),IkReal((((sj2*x2403*x2404))+(((-1.0)*cj2*x2406))+(((-1.0)*sj2*x2403*x2405))+((sj2*x2407)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2409.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2408.value)))+(x2409.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2410=IKcos(j0);
IkReal x2411=IKsin(j0);
IkReal x2412=(cj5*r00);
IkReal x2413=((1.0)*cj4);
IkReal x2414=(cj5*r10);
IkReal x2415=(cj4*sj5);
IkReal x2416=(sj2*x2410);
IkReal x2417=(cj2*x2411);
IkReal x2418=((0.00043624)*x2410);
IkReal x2419=((1.0)*sj4*sj5);
IkReal x2420=(cj2*x2410);
IkReal x2421=(sj2*x2411);
IkReal x2422=(x2417+x2416);
evalcond[0]=((((-0.00043624)*x2421))+((cj2*x2418))+(((-1.0)*px))+(((-1.0)*x2418)));
evalcond[1]=((((-1.0)*py))+(((-0.00043624)*x2411))+(((0.00043624)*x2417))+(((0.00043624)*x2416)));
evalcond[2]=(x2422+((sj4*x2412))+(((-1.0)*r01*x2419))+((cj4*r02)));
evalcond[3]=(x2422+((r11*x2415))+((r12*sj4))+(((-1.0)*x2413*x2414)));
evalcond[4]=(x2421+(((-1.0)*r11*x2419))+((sj4*x2414))+(((-1.0)*x2420))+((cj4*r12)));
evalcond[5]=(x2420+((r01*x2415))+((r02*sj4))+(((-1.0)*x2421))+(((-1.0)*x2412*x2413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2423=((68162500000.0)*py);
IkReal x2424=((68162500000.0)*px);
CheckValue<IkReal> x2425=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((-59470418.0)*cj2)))),-1);
if(!x2425.valid){
continue;
}
CheckValue<IkReal> x2426 = IKatan2WithCheck(IkReal(((((-1.0)*x2423))+(((-1.0)*sj2*x2424))+((cj2*x2423)))),IkReal((((sj2*x2423))+(((-1.0)*x2424))+((cj2*x2424)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2426.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2425.value)))+(x2426.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2427=IKcos(j0);
IkReal x2428=IKsin(j0);
IkReal x2429=(cj5*r00);
IkReal x2430=((1.0)*cj4);
IkReal x2431=(cj5*r10);
IkReal x2432=(cj4*sj5);
IkReal x2433=(sj2*x2427);
IkReal x2434=(cj2*x2428);
IkReal x2435=((0.00043624)*x2427);
IkReal x2436=((1.0)*sj4*sj5);
IkReal x2437=(cj2*x2427);
IkReal x2438=(sj2*x2428);
IkReal x2439=(x2433+x2434);
evalcond[0]=((((-1.0)*x2435))+((cj2*x2435))+(((-1.0)*px))+(((-0.00043624)*x2438)));
evalcond[1]=((((-0.00043624)*x2428))+(((0.00043624)*x2433))+(((0.00043624)*x2434))+(((-1.0)*py)));
evalcond[2]=(x2439+((sj4*x2429))+(((-1.0)*r01*x2436))+((cj4*r02)));
evalcond[3]=(x2439+((r11*x2432))+(((-1.0)*x2430*x2431))+((r12*sj4)));
evalcond[4]=((((-1.0)*x2437))+x2438+(((-1.0)*r11*x2436))+((sj4*x2431))+((cj4*r12)));
evalcond[5]=((((-1.0)*x2438))+x2437+((r01*x2432))+((r02*sj4))+(((-1.0)*x2429*x2430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2441 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2441.valid){
continue;
}
IkReal x2440=x2441.value;
j4array[0]=((-1.0)*x2440);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x2440)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x2442=IKcos(j4);
evalcond[0]=(((r21*sj5*x2442))+(((-1.0)*cj5*r20*x2442))+((r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
IkReal x2443=((68162500000.0)*cj2);
IkReal x2444=((68162500000.0)*px);
IkReal x2445=((68162500000.0)*py);
j0eval[0]=((1.0)+(((-1.0)*cj2)));
j0eval[1]=IKsign(((59470418.0)+(((-59470418.0)*cj2))));
j0eval[2]=((IKabs((((py*x2443))+(((-1.0)*x2445))+(((-1.0)*sj2*x2444)))))+(IKabs((((px*x2443))+((sj2*x2445))+(((-1.0)*x2444))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=((-1.0)+cj2);
j0eval[1]=IKsign(((-5453.0)+(((5453.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2446=(r01*sj5);
IkReal x2447=((1.0)*cj4);
IkReal x2448=((1.0)*sj4);
IkReal x2449=(cj5*r00);
if( IKabs(((((-1.0)*x2448*x2449))+((sj4*x2446))+(((-1.0)*r02*x2447)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x2449))+(((-1.0)*x2446*x2447))+(((-1.0)*r02*x2448)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2448*x2449))+((sj4*x2446))+(((-1.0)*r02*x2447))))+IKsqr((((cj4*x2449))+(((-1.0)*x2446*x2447))+(((-1.0)*r02*x2448))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x2448*x2449))+((sj4*x2446))+(((-1.0)*r02*x2447))), (((cj4*x2449))+(((-1.0)*x2446*x2447))+(((-1.0)*r02*x2448))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2450=IKsin(j0);
IkReal x2451=IKcos(j0);
IkReal x2452=(cj5*r00);
IkReal x2453=((1.0)*cj4);
IkReal x2454=(cj4*sj5);
IkReal x2455=(cj5*r10);
IkReal x2456=((1.0)*sj4*sj5);
evalcond[0]=(x2450+((sj4*x2452))+(((-1.0)*r01*x2456))+((cj4*r02)));
evalcond[1]=((((-1.0)*x2453*x2455))+x2450+((r12*sj4))+((r11*x2454)));
evalcond[2]=(x2451+(((-1.0)*x2452*x2453))+((r01*x2454))+((r02*sj4)));
evalcond[3]=((((-1.0)*x2451))+(((-1.0)*r11*x2456))+((sj4*x2455))+((cj4*r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-1146.15807812213)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1146.15807812213)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1146.15807812213)*py))+IKsqr(((-1146.15807812213)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-1146.15807812213)*py), ((-1146.15807812213)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2457=IKcos(j0);
IkReal x2458=IKsin(j0);
IkReal x2459=(cj5*r00);
IkReal x2460=((1.0)*cj4);
IkReal x2461=(cj4*sj5);
IkReal x2462=(cj5*r10);
IkReal x2463=((1.0)*x2458);
IkReal x2464=((1.0)*sj4*sj5);
evalcond[0]=((((-1.0)*px))+(((-0.00087248)*x2457)));
evalcond[1]=((((-1.0)*py))+(((-0.00087248)*x2458)));
evalcond[2]=(x2457+(((-1.0)*r11*x2464))+((cj4*r12))+((sj4*x2462)));
evalcond[3]=((((-1.0)*r01*x2464))+((sj4*x2459))+(((-1.0)*x2463))+((cj4*r02)));
evalcond[4]=(((r11*x2461))+((r12*sj4))+(((-1.0)*x2460*x2462))+(((-1.0)*x2463)));
evalcond[5]=(((r01*x2461))+((r02*sj4))+(((-1.0)*x2457))+(((-1.0)*x2459*x2460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj2)))+(IKabs(((-1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2465=(r01*sj5);
IkReal x2466=((1.0)*cj4);
IkReal x2467=((1.0)*sj4);
IkReal x2468=(cj5*r00);
if( IKabs(((((-1.0)*x2467*x2468))+(((-1.0)*r02*x2466))+((sj4*x2465)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2465*x2466))+((cj4*x2468))+(((-1.0)*r02*x2467)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2467*x2468))+(((-1.0)*r02*x2466))+((sj4*x2465))))+IKsqr(((((-1.0)*x2465*x2466))+((cj4*x2468))+(((-1.0)*r02*x2467))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x2467*x2468))+(((-1.0)*r02*x2466))+((sj4*x2465))), ((((-1.0)*x2465*x2466))+((cj4*x2468))+(((-1.0)*r02*x2467))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2469=IKsin(j0);
IkReal x2470=IKcos(j0);
IkReal x2471=(cj5*r00);
IkReal x2472=((1.0)*cj4);
IkReal x2473=(cj4*sj5);
IkReal x2474=(cj5*r10);
IkReal x2475=((1.0)*sj4*sj5);
evalcond[0]=((((-1.0)*r01*x2475))+x2469+((sj4*x2471))+((cj4*r02)));
evalcond[1]=(x2469+(((-1.0)*x2472*x2474))+((r12*sj4))+((r11*x2473)));
evalcond[2]=(x2470+((r01*x2473))+((r02*sj4))+(((-1.0)*x2471*x2472)));
evalcond[3]=((((-1.0)*r11*x2475))+((sj4*x2474))+(((-1.0)*x2470))+((cj4*r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj2)))+(IKabs(((1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2476=(r01*sj5);
IkReal x2477=((1.0)*cj4);
IkReal x2478=((1.0)*sj4);
IkReal x2479=(cj5*r00);
if( IKabs((((sj4*x2476))+(((-1.0)*x2478*x2479))+(((-1.0)*r02*x2477)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x2479))+(((-1.0)*r02*x2478))+(((-1.0)*x2476*x2477)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x2476))+(((-1.0)*x2478*x2479))+(((-1.0)*r02*x2477))))+IKsqr((((cj4*x2479))+(((-1.0)*r02*x2478))+(((-1.0)*x2476*x2477))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((sj4*x2476))+(((-1.0)*x2478*x2479))+(((-1.0)*r02*x2477))), (((cj4*x2479))+(((-1.0)*r02*x2478))+(((-1.0)*x2476*x2477))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2480=IKsin(j0);
IkReal x2481=IKcos(j0);
IkReal x2482=(cj5*r00);
IkReal x2483=((1.0)*cj4);
IkReal x2484=(cj4*sj5);
IkReal x2485=(cj5*r10);
IkReal x2486=((1.0)*sj4*sj5);
evalcond[0]=(x2480+(((-1.0)*r01*x2486))+((sj4*x2482))+((cj4*r02)));
evalcond[1]=(x2480+((r11*x2484))+((r12*sj4))+(((-1.0)*x2483*x2485)));
evalcond[2]=(((r01*x2484))+x2481+((r02*sj4))+(((-1.0)*x2482*x2483)));
evalcond[3]=((((-1.0)*x2481))+((sj4*x2485))+(((-1.0)*r11*x2486))+((cj4*r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x2487=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2487);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2487);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2487);
rxp2_2=0;
j0eval[0]=((-1.0)+cj2);
j0eval[1]=IKsign(((-5453.0)+(((5453.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x2488=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2488);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2488);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2488);
rxp2_2=0;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2489=((5453.0)*cj4*r02);
IkReal x2490=(cj5*r00*sj4);
IkReal x2491=((5453.0)*r01*sj4*sj5);
CheckValue<IkReal> x2492=IKPowWithIntegerCheck(sj2,-1);
if(!x2492.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*x2490))+((r01*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.000183385292499542)*(x2492.value)*(((((-5453.0)*x2490))+(((5453.0)*cj2*x2490))+x2491+((cj2*x2489))+(((-1.0)*x2489))+(((-1.0)*cj2*x2491)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*x2490))+((r01*sj4*sj5))))+IKsqr(((0.000183385292499542)*(x2492.value)*(((((-5453.0)*x2490))+(((5453.0)*cj2*x2490))+x2491+((cj2*x2489))+(((-1.0)*x2489))+(((-1.0)*cj2*x2491))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*x2490))+((r01*sj4*sj5))), ((0.000183385292499542)*(x2492.value)*(((((-5453.0)*x2490))+(((5453.0)*cj2*x2490))+x2491+((cj2*x2489))+(((-1.0)*x2489))+(((-1.0)*cj2*x2491))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2493=IKcos(j0);
IkReal x2494=IKsin(j0);
IkReal x2495=(cj5*r00);
IkReal x2496=((1.0)*cj4);
IkReal x2497=(cj5*r10);
IkReal x2498=(cj4*sj5);
IkReal x2499=(sj2*x2493);
IkReal x2500=(cj2*x2494);
IkReal x2501=((0.00043624)*x2493);
IkReal x2502=((1.0)*sj4*sj5);
IkReal x2503=(cj2*x2493);
IkReal x2504=(sj2*x2494);
IkReal x2505=(x2500+x2499);
evalcond[0]=((((-1.0)*x2501))+(((-0.00043624)*x2504))+((cj2*x2501)));
evalcond[1]=((((0.00043624)*x2500))+(((0.00043624)*x2499))+(((-0.00043624)*x2494)));
evalcond[2]=(x2505+(((-1.0)*r01*x2502))+((sj4*x2495))+((cj4*r02)));
evalcond[3]=(x2505+(((-1.0)*x2496*x2497))+((r11*x2498))+((r12*sj4)));
evalcond[4]=(x2504+(((-1.0)*r11*x2502))+(((-1.0)*x2503))+((sj4*x2497))+((cj4*r12)));
evalcond[5]=(x2503+(((-1.0)*x2495*x2496))+((r02*sj4))+(((-1.0)*x2504))+((r01*x2498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2506=((5453.0)*sj4);
IkReal x2507=(cj5*r00);
IkReal x2508=(r01*sj5);
IkReal x2509=((5453.0)*cj4*r02);
CheckValue<IkReal> x2510=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((5453.0)*cj2)))),-1);
if(!x2510.valid){
continue;
}
CheckValue<IkReal> x2511 = IKatan2WithCheck(IkReal(((((-1.0)*x2509))+((x2506*x2508))+(((-1.0)*cj2*x2506*x2508))+((cj2*x2506*x2507))+((cj2*x2509))+(((-1.0)*x2506*x2507)))),IkReal((((sj2*x2506*x2507))+(((-1.0)*sj2*x2506*x2508))+((sj2*x2509)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2511.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2510.value)))+(x2511.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2512=IKcos(j0);
IkReal x2513=IKsin(j0);
IkReal x2514=(cj5*r00);
IkReal x2515=((1.0)*cj4);
IkReal x2516=(cj5*r10);
IkReal x2517=(cj4*sj5);
IkReal x2518=(sj2*x2512);
IkReal x2519=(cj2*x2513);
IkReal x2520=((0.00043624)*x2512);
IkReal x2521=((1.0)*sj4*sj5);
IkReal x2522=(cj2*x2512);
IkReal x2523=(sj2*x2513);
IkReal x2524=(x2518+x2519);
evalcond[0]=((((-0.00043624)*x2523))+((cj2*x2520))+(((-1.0)*x2520)));
evalcond[1]=((((-0.00043624)*x2513))+(((0.00043624)*x2518))+(((0.00043624)*x2519)));
evalcond[2]=(x2524+((sj4*x2514))+(((-1.0)*r01*x2521))+((cj4*r02)));
evalcond[3]=(x2524+((r11*x2517))+(((-1.0)*x2515*x2516))+((r12*sj4)));
evalcond[4]=(x2523+(((-1.0)*r11*x2521))+(((-1.0)*x2522))+((sj4*x2516))+((cj4*r12)));
evalcond[5]=(x2522+(((-1.0)*x2523))+((r02*sj4))+(((-1.0)*x2514*x2515))+((r01*x2517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2525=((5453.0)*cj2);
IkReal x2526=(cj5*r00*sj4);
IkReal x2527=((5453.0)*cj4*r02);
IkReal x2528=(r01*sj4*sj5);
CheckValue<IkReal> x2529=IKPowWithIntegerCheck(sj2,-1);
if(!x2529.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*r02))+x2528+(((-1.0)*x2526))+(((-2292.31615624427)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.000183385292499542)*(x2529.value)*((((cj4*r02*x2525))+(((12500000.0)*cj2*py))+(((-5453.0)*x2526))+(((5453.0)*x2528))+(((-1.0)*x2525*x2528))+((x2525*x2526))+(((-1.0)*x2527)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+x2528+(((-1.0)*x2526))+(((-2292.31615624427)*py))))+IKsqr(((0.000183385292499542)*(x2529.value)*((((cj4*r02*x2525))+(((12500000.0)*cj2*py))+(((-5453.0)*x2526))+(((5453.0)*x2528))+(((-1.0)*x2525*x2528))+((x2525*x2526))+(((-1.0)*x2527))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+x2528+(((-1.0)*x2526))+(((-2292.31615624427)*py))), ((0.000183385292499542)*(x2529.value)*((((cj4*r02*x2525))+(((12500000.0)*cj2*py))+(((-5453.0)*x2526))+(((5453.0)*x2528))+(((-1.0)*x2525*x2528))+((x2525*x2526))+(((-1.0)*x2527))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2530=IKcos(j0);
IkReal x2531=IKsin(j0);
IkReal x2532=(cj5*r00);
IkReal x2533=((1.0)*cj4);
IkReal x2534=(cj5*r10);
IkReal x2535=(cj4*sj5);
IkReal x2536=(sj2*x2530);
IkReal x2537=(cj2*x2531);
IkReal x2538=((0.00043624)*x2530);
IkReal x2539=((1.0)*sj4*sj5);
IkReal x2540=(cj2*x2530);
IkReal x2541=(sj2*x2531);
IkReal x2542=(x2536+x2537);
evalcond[0]=((((-1.0)*x2538))+(((-1.0)*px))+((cj2*x2538))+(((-0.00043624)*x2541)));
evalcond[1]=((((-0.00043624)*x2531))+(((-1.0)*py))+(((0.00043624)*x2536))+(((0.00043624)*x2537)));
evalcond[2]=(x2542+(((-1.0)*r01*x2539))+((sj4*x2532))+((cj4*r02)));
evalcond[3]=((((-1.0)*x2533*x2534))+x2542+((r12*sj4))+((r11*x2535)));
evalcond[4]=(x2541+(((-1.0)*x2540))+((sj4*x2534))+(((-1.0)*r11*x2539))+((cj4*r12)));
evalcond[5]=(((r01*x2535))+x2540+(((-1.0)*x2541))+((r02*sj4))+(((-1.0)*x2532*x2533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2543=((5453.0)*sj4);
IkReal x2544=(cj5*r00);
IkReal x2545=(r01*sj5);
IkReal x2546=((12500000.0)*px);
IkReal x2547=((5453.0)*cj4*r02);
CheckValue<IkReal> x2548 = IKatan2WithCheck(IkReal((((cj2*x2547))+(((-1.0)*x2543*x2544))+((x2543*x2545))+((cj2*x2543*x2544))+((sj2*x2546))+(((-1.0)*x2547))+(((-1.0)*cj2*x2543*x2545)))),IkReal(((((-1.0)*sj2*x2543*x2545))+(((-1.0)*cj2*x2546))+((sj2*x2547))+((sj2*x2543*x2544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2548.valid){
continue;
}
CheckValue<IkReal> x2549=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((5453.0)*cj2)))),-1);
if(!x2549.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2548.value)+(((1.5707963267949)*(x2549.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2550=IKcos(j0);
IkReal x2551=IKsin(j0);
IkReal x2552=(cj5*r00);
IkReal x2553=((1.0)*cj4);
IkReal x2554=(cj5*r10);
IkReal x2555=(cj4*sj5);
IkReal x2556=(sj2*x2550);
IkReal x2557=(cj2*x2551);
IkReal x2558=((0.00043624)*x2550);
IkReal x2559=((1.0)*sj4*sj5);
IkReal x2560=(cj2*x2550);
IkReal x2561=(sj2*x2551);
IkReal x2562=(x2556+x2557);
evalcond[0]=((((-0.00043624)*x2561))+((cj2*x2558))+(((-1.0)*px))+(((-1.0)*x2558)));
evalcond[1]=((((-0.00043624)*x2551))+(((0.00043624)*x2557))+(((0.00043624)*x2556))+(((-1.0)*py)));
evalcond[2]=(((sj4*x2552))+x2562+(((-1.0)*r01*x2559))+((cj4*r02)));
evalcond[3]=(x2562+((r11*x2555))+((r12*sj4))+(((-1.0)*x2553*x2554)));
evalcond[4]=(((sj4*x2554))+x2561+(((-1.0)*r11*x2559))+(((-1.0)*x2560))+((cj4*r12)));
evalcond[5]=(x2560+(((-1.0)*x2561))+((r02*sj4))+((r01*x2555))+(((-1.0)*x2552*x2553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2563=((68162500000.0)*py);
IkReal x2564=((68162500000.0)*px);
CheckValue<IkReal> x2565 = IKatan2WithCheck(IkReal((((cj2*x2563))+(((-1.0)*x2563))+(((-1.0)*sj2*x2564)))),IkReal((((sj2*x2563))+((cj2*x2564))+(((-1.0)*x2564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2565.valid){
continue;
}
CheckValue<IkReal> x2566=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((-59470418.0)*cj2)))),-1);
if(!x2566.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2565.value)+(((1.5707963267949)*(x2566.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2567=IKcos(j0);
IkReal x2568=IKsin(j0);
IkReal x2569=(cj5*r00);
IkReal x2570=((1.0)*cj4);
IkReal x2571=(cj5*r10);
IkReal x2572=(cj4*sj5);
IkReal x2573=(sj2*x2567);
IkReal x2574=(cj2*x2568);
IkReal x2575=((0.00043624)*x2567);
IkReal x2576=((1.0)*sj4*sj5);
IkReal x2577=(cj2*x2567);
IkReal x2578=(sj2*x2568);
IkReal x2579=(x2574+x2573);
evalcond[0]=(((cj2*x2575))+(((-1.0)*px))+(((-1.0)*x2575))+(((-0.00043624)*x2578)));
evalcond[1]=((((-0.00043624)*x2568))+(((0.00043624)*x2574))+(((0.00043624)*x2573))+(((-1.0)*py)));
evalcond[2]=(x2579+((sj4*x2569))+(((-1.0)*r01*x2576))+((cj4*r02)));
evalcond[3]=(x2579+((r11*x2572))+(((-1.0)*x2570*x2571))+((r12*sj4)));
evalcond[4]=(x2578+(((-1.0)*x2577))+((sj4*x2571))+((cj4*r12))+(((-1.0)*r11*x2576)));
evalcond[5]=((((-1.0)*x2569*x2570))+x2577+((r02*sj4))+(((-1.0)*x2578))+((r01*x2572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2580=((68162500000.0)*py);
IkReal x2581=((68162500000.0)*px);
CheckValue<IkReal> x2582 = IKatan2WithCheck(IkReal((((cj2*x2580))+(((-1.0)*x2580))+(((-1.0)*sj2*x2581)))),IkReal((((cj2*x2581))+((sj2*x2580))+(((-1.0)*x2581)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2582.valid){
continue;
}
CheckValue<IkReal> x2583=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((-59470418.0)*cj2)))),-1);
if(!x2583.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2582.value)+(((1.5707963267949)*(x2583.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2584=IKcos(j0);
IkReal x2585=IKsin(j0);
IkReal x2586=((0.00043624)*x2584);
IkReal x2587=((0.00043624)*x2585);
evalcond[0]=(((cj2*x2586))+(((-1.0)*x2586))+(((-1.0)*px))+(((-1.0)*sj2*x2587)));
evalcond[1]=(((cj2*x2587))+((sj2*x2586))+(((-1.0)*x2587))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
IkReal x2588=((1.0)*cj5);
IkReal x2589=(cj0*sj2);
IkReal x2590=(cj2*sj0);
IkReal x2591=(r21*sj5);
IkReal x2592=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2588)));
j4eval[0]=x2592;
j4eval[1]=IKsign(x2592);
j4eval[2]=((IKabs((((r22*x2590))+((r22*x2589)))))+(IKabs(((((-1.0)*r20*x2588*x2589))+((x2589*x2591))+(((-1.0)*r20*x2588*x2590))+((x2590*x2591))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
IkReal x2593=(cj2*sj0);
IkReal x2594=(r21*sj5);
IkReal x2595=(cj0*sj2);
IkReal x2596=((1.0)*r22);
IkReal x2597=((1.0)*cj5*r20);
IkReal x2598=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2598;
j4eval[1]=IKsign(x2598);
j4eval[2]=((IKabs((((x2594*x2595))+(((-1.0)*x2593*x2597))+(((-1.0)*x2595*x2597))+((x2593*x2594)))))+(IKabs(((((-1.0)*x2593*x2596))+(((-1.0)*x2595*x2596))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
IkReal x2599=cj5*cj5;
IkReal x2600=(r11*r21);
IkReal x2601=(cj0*sj2);
IkReal x2602=((1.0)*r20);
IkReal x2603=(cj2*sj0);
IkReal x2604=(r21*sj5);
IkReal x2605=((((-1.0)*x2600))+(((-1.0)*r12*r22))+((cj5*r10*x2604))+((x2599*x2600))+(((-1.0)*r10*x2599*x2602))+((cj5*r11*r20*sj5)));
j4eval[0]=x2605;
j4eval[1]=((IKabs((((x2603*x2604))+(((-1.0)*cj5*x2601*x2602))+(((-1.0)*cj5*x2602*x2603))+((x2601*x2604)))))+(IKabs((((r22*x2601))+((r22*x2603))))));
j4eval[2]=IKsign(x2605);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=0;
sj2=0;
cj2=1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x2606=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2606;
j4eval[1]=IKsign(x2606);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=0;
sj2=0;
cj2=1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x2607=((1.0)*cj5);
IkReal x2608=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2607)));
j4eval[0]=x2608;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2607)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2608);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=0;
sj2=0;
cj2=1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x2609=cj5*cj5;
IkReal x2610=(r21*sj5);
IkReal x2611=((1.0)*r20);
IkReal x2612=(r01*r21);
IkReal x2613=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x2609*x2611))+(((-1.0)*r02*r22))+(((-1.0)*x2612))+((cj5*r00*x2610))+((x2609*x2612)));
j4eval[0]=x2613;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x2611))+x2610))));
j4eval[2]=IKsign(x2613);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2614=cj5*cj5;
IkReal x2615=((1.0)*r20);
IkReal x2616=(r21*sj5);
IkReal x2617=(r01*r21);
CheckValue<IkReal> x2618 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*x2615))+x2616)),IKFAST_ATAN2_MAGTHRESH);
if(!x2618.valid){
continue;
}
CheckValue<IkReal> x2619=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x2614*x2615))+(((-1.0)*x2617))+((x2614*x2617))+((cj5*r00*x2616)))),-1);
if(!x2619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2618.value)+(((1.5707963267949)*(x2619.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2620=IKsin(j4);
IkReal x2621=IKcos(j4);
IkReal x2622=(cj5*r00);
IkReal x2623=(cj5*r20);
IkReal x2624=(cj5*r10);
IkReal x2625=((1.0)*x2621);
IkReal x2626=(sj5*x2621);
IkReal x2627=((1.0)*sj5*x2620);
evalcond[0]=(((x2620*x2623))+((r22*x2621))+(((-1.0)*r21*x2627)));
evalcond[1]=((((-1.0)*r01*x2627))+((r02*x2621))+((x2620*x2622)));
evalcond[2]=((((-1.0)*x2623*x2625))+((r22*x2620))+((r21*x2626)));
evalcond[3]=((((-1.0)*x2624*x2625))+((r11*x2626))+((r12*x2620)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x2627))+((x2620*x2624))+((r12*x2621)));
evalcond[5]=((1.0)+((r01*x2626))+(((-1.0)*x2622*x2625))+((r02*x2620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2628=((1.0)*cj5);
CheckValue<IkReal> x2629 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2628)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2629.valid){
continue;
}
CheckValue<IkReal> x2630=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2628))+(((-1.0)*r00*sj5)))),-1);
if(!x2630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2629.value)+(((1.5707963267949)*(x2630.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2631=IKsin(j4);
IkReal x2632=IKcos(j4);
IkReal x2633=(cj5*r00);
IkReal x2634=(cj5*r20);
IkReal x2635=(cj5*r10);
IkReal x2636=((1.0)*x2632);
IkReal x2637=(sj5*x2632);
IkReal x2638=((1.0)*sj5*x2631);
evalcond[0]=(((r22*x2632))+(((-1.0)*r21*x2638))+((x2631*x2634)));
evalcond[1]=((((-1.0)*r01*x2638))+((x2631*x2633))+((r02*x2632)));
evalcond[2]=(((r22*x2631))+((r21*x2637))+(((-1.0)*x2634*x2636)));
evalcond[3]=(((r11*x2637))+((r12*x2631))+(((-1.0)*x2635*x2636)));
evalcond[4]=((-1.0)+((r12*x2632))+(((-1.0)*r11*x2638))+((x2631*x2635)));
evalcond[5]=((1.0)+((r01*x2637))+(((-1.0)*x2633*x2636))+((r02*x2631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2639=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2639.valid){
continue;
}
CheckValue<IkReal> x2640 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2640.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2639.value)))+(x2640.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2641=IKsin(j4);
IkReal x2642=IKcos(j4);
IkReal x2643=(cj5*r00);
IkReal x2644=(cj5*r20);
IkReal x2645=(cj5*r10);
IkReal x2646=((1.0)*x2642);
IkReal x2647=(sj5*x2642);
IkReal x2648=((1.0)*sj5*x2641);
evalcond[0]=((((-1.0)*r21*x2648))+((r22*x2642))+((x2641*x2644)));
evalcond[1]=((((-1.0)*r01*x2648))+((r02*x2642))+((x2641*x2643)));
evalcond[2]=(((r21*x2647))+(((-1.0)*x2644*x2646))+((r22*x2641)));
evalcond[3]=(((r12*x2641))+((r11*x2647))+(((-1.0)*x2645*x2646)));
evalcond[4]=((-1.0)+((r12*x2642))+(((-1.0)*r11*x2648))+((x2641*x2645)));
evalcond[5]=((1.0)+((r02*x2641))+(((-1.0)*x2643*x2646))+((r01*x2647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=0;
sj2=0;
cj2=1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x2649=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2649;
j4eval[1]=IKsign(x2649);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=0;
sj2=0;
cj2=1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x2650=((1.0)*cj5);
IkReal x2651=((((-1.0)*r21*x2650))+(((-1.0)*r20*sj5)));
j4eval[0]=x2651;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2650))))));
j4eval[2]=IKsign(x2651);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=0;
sj2=0;
cj2=1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x2652=cj5*cj5;
IkReal x2653=r01*r01;
IkReal x2654=(cj5*r00);
IkReal x2655=(r01*sj5);
IkReal x2656=((((-1.0)*x2652*x2653))+((x2652*(r00*r00)))+(((-2.0)*x2654*x2655))+(r02*r02)+x2653);
j4eval[0]=x2656;
j4eval[1]=IKsign(x2656);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2654))+x2655))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2657=cj5*cj5;
IkReal x2658=r01*r01;
IkReal x2659=(r01*sj5);
IkReal x2660=(cj5*r00);
CheckValue<IkReal> x2661=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2657*x2658))+((x2657*(r00*r00)))+(r02*r02)+(((-2.0)*x2659*x2660))+x2658)),-1);
if(!x2661.valid){
continue;
}
CheckValue<IkReal> x2662 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x2660))+x2659)),IKFAST_ATAN2_MAGTHRESH);
if(!x2662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2661.value)))+(x2662.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2663=IKsin(j4);
IkReal x2664=IKcos(j4);
IkReal x2665=(cj5*r00);
IkReal x2666=(cj5*r20);
IkReal x2667=(cj5*r10);
IkReal x2668=((1.0)*x2664);
IkReal x2669=(sj5*x2664);
IkReal x2670=((1.0)*sj5*x2663);
evalcond[0]=(((x2663*x2666))+((r22*x2664))+(((-1.0)*r21*x2670)));
evalcond[1]=(((x2663*x2665))+(((-1.0)*r01*x2670))+((r02*x2664)));
evalcond[2]=(((r21*x2669))+((r22*x2663))+(((-1.0)*x2666*x2668)));
evalcond[3]=(((r12*x2663))+(((-1.0)*x2667*x2668))+((r11*x2669)));
evalcond[4]=((1.0)+(((-1.0)*r11*x2670))+((r12*x2664))+((x2663*x2667)));
evalcond[5]=((-1.0)+((r02*x2663))+(((-1.0)*x2665*x2668))+((r01*x2669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2671=((1.0)*cj5);
CheckValue<IkReal> x2672=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2671))+(((-1.0)*r20*sj5)))),-1);
if(!x2672.valid){
continue;
}
CheckValue<IkReal> x2673 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2671)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2672.value)))+(x2673.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2674=IKsin(j4);
IkReal x2675=IKcos(j4);
IkReal x2676=(cj5*r00);
IkReal x2677=(cj5*r20);
IkReal x2678=(cj5*r10);
IkReal x2679=((1.0)*x2675);
IkReal x2680=(sj5*x2675);
IkReal x2681=((1.0)*sj5*x2674);
evalcond[0]=(((r22*x2675))+(((-1.0)*r21*x2681))+((x2674*x2677)));
evalcond[1]=(((r02*x2675))+(((-1.0)*r01*x2681))+((x2674*x2676)));
evalcond[2]=(((r22*x2674))+((r21*x2680))+(((-1.0)*x2677*x2679)));
evalcond[3]=(((r11*x2680))+((r12*x2674))+(((-1.0)*x2678*x2679)));
evalcond[4]=((1.0)+((r12*x2675))+(((-1.0)*r11*x2681))+((x2674*x2678)));
evalcond[5]=((-1.0)+((r02*x2674))+((r01*x2680))+(((-1.0)*x2676*x2679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2682 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2682.valid){
continue;
}
CheckValue<IkReal> x2683=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2682.value)+(((1.5707963267949)*(x2683.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2684=IKsin(j4);
IkReal x2685=IKcos(j4);
IkReal x2686=(cj5*r00);
IkReal x2687=(cj5*r20);
IkReal x2688=(cj5*r10);
IkReal x2689=((1.0)*x2685);
IkReal x2690=(sj5*x2685);
IkReal x2691=((1.0)*sj5*x2684);
evalcond[0]=(((r22*x2685))+((x2684*x2687))+(((-1.0)*r21*x2691)));
evalcond[1]=(((r02*x2685))+((x2684*x2686))+(((-1.0)*r01*x2691)));
evalcond[2]=(((r22*x2684))+(((-1.0)*x2687*x2689))+((r21*x2690)));
evalcond[3]=((((-1.0)*x2688*x2689))+((r12*x2684))+((r11*x2690)));
evalcond[4]=((1.0)+((x2684*x2688))+(((-1.0)*r11*x2691))+((r12*x2685)));
evalcond[5]=((-1.0)+((r02*x2684))+((r01*x2690))+(((-1.0)*x2686*x2689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x2692=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2692;
j4eval[1]=IKsign(x2692);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x2693=((1.0)*cj5);
IkReal x2694=((((-1.0)*r21*x2693))+(((-1.0)*r20*sj5)));
j4eval[0]=x2694;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2693))))));
j4eval[2]=IKsign(x2694);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x2695=cj5*cj5;
IkReal x2696=r01*r01;
IkReal x2697=(cj5*r00);
IkReal x2698=(r01*sj5);
IkReal x2699=(((x2695*(r00*r00)))+(((-1.0)*x2695*x2696))+(((-2.0)*x2697*x2698))+(r02*r02)+x2696);
j4eval[0]=x2699;
j4eval[1]=IKsign(x2699);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2697))+x2698))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2700=cj5*cj5;
IkReal x2701=r01*r01;
IkReal x2702=(r01*sj5);
IkReal x2703=(cj5*r00);
CheckValue<IkReal> x2704=IKPowWithIntegerCheck(IKsign((x2701+(((-2.0)*x2702*x2703))+(((-1.0)*x2700*x2701))+((x2700*(r00*r00)))+(r02*r02))),-1);
if(!x2704.valid){
continue;
}
CheckValue<IkReal> x2705 = IKatan2WithCheck(IkReal(r02),IkReal((x2702+(((-1.0)*x2703)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2704.value)))+(x2705.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2706=IKsin(j4);
IkReal x2707=IKcos(j4);
IkReal x2708=(cj5*r00);
IkReal x2709=(cj5*r20);
IkReal x2710=(cj5*r10);
IkReal x2711=((1.0)*x2707);
IkReal x2712=(sj5*x2707);
IkReal x2713=((1.0)*sj5*x2706);
evalcond[0]=(((r22*x2707))+(((-1.0)*r21*x2713))+((x2706*x2709)));
evalcond[1]=(((x2706*x2708))+(((-1.0)*r01*x2713))+((r02*x2707)));
evalcond[2]=(((r22*x2706))+(((-1.0)*x2709*x2711))+((r21*x2712)));
evalcond[3]=(((r12*x2706))+((r11*x2712))+(((-1.0)*x2710*x2711)));
evalcond[4]=((1.0)+((r12*x2707))+((x2706*x2710))+(((-1.0)*r11*x2713)));
evalcond[5]=((-1.0)+(((-1.0)*x2708*x2711))+((r02*x2706))+((r01*x2712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2714=((1.0)*cj5);
CheckValue<IkReal> x2715=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2714))+(((-1.0)*r20*sj5)))),-1);
if(!x2715.valid){
continue;
}
CheckValue<IkReal> x2716 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2714)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2715.value)))+(x2716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2717=IKsin(j4);
IkReal x2718=IKcos(j4);
IkReal x2719=(cj5*r00);
IkReal x2720=(cj5*r20);
IkReal x2721=(cj5*r10);
IkReal x2722=((1.0)*x2718);
IkReal x2723=(sj5*x2718);
IkReal x2724=((1.0)*sj5*x2717);
evalcond[0]=((((-1.0)*r21*x2724))+((x2717*x2720))+((r22*x2718)));
evalcond[1]=((((-1.0)*r01*x2724))+((r02*x2718))+((x2717*x2719)));
evalcond[2]=(((r22*x2717))+(((-1.0)*x2720*x2722))+((r21*x2723)));
evalcond[3]=(((r12*x2717))+(((-1.0)*x2721*x2722))+((r11*x2723)));
evalcond[4]=((1.0)+((r12*x2718))+((x2717*x2721))+(((-1.0)*r11*x2724)));
evalcond[5]=((-1.0)+(((-1.0)*x2719*x2722))+((r02*x2717))+((r01*x2723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2725 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2725.valid){
continue;
}
CheckValue<IkReal> x2726=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2725.value)+(((1.5707963267949)*(x2726.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2727=IKsin(j4);
IkReal x2728=IKcos(j4);
IkReal x2729=(cj5*r00);
IkReal x2730=(cj5*r20);
IkReal x2731=(cj5*r10);
IkReal x2732=((1.0)*x2728);
IkReal x2733=(sj5*x2728);
IkReal x2734=((1.0)*sj5*x2727);
evalcond[0]=(((r22*x2728))+((x2727*x2730))+(((-1.0)*r21*x2734)));
evalcond[1]=(((r02*x2728))+((x2727*x2729))+(((-1.0)*r01*x2734)));
evalcond[2]=((((-1.0)*x2730*x2732))+((r22*x2727))+((r21*x2733)));
evalcond[3]=((((-1.0)*x2731*x2732))+((r12*x2727))+((r11*x2733)));
evalcond[4]=((1.0)+(((-1.0)*r11*x2734))+((x2727*x2731))+((r12*x2728)));
evalcond[5]=((-1.0)+((r02*x2727))+((r01*x2733))+(((-1.0)*x2729*x2732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x2735=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2735;
j4eval[1]=IKsign(x2735);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x2736=((1.0)*cj5);
IkReal x2737=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2736)));
j4eval[0]=x2737;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2736))))));
j4eval[2]=IKsign(x2737);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x2738=cj5*cj5;
IkReal x2739=(r21*sj5);
IkReal x2740=((1.0)*r20);
IkReal x2741=(r01*r21);
IkReal x2742=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x2738*x2741))+((cj5*r00*x2739))+(((-1.0)*r00*x2738*x2740))+(((-1.0)*x2741)));
j4eval[0]=x2742;
j4eval[1]=((IKabs((x2739+(((-1.0)*cj5*x2740)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2742);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2743=cj5*cj5;
IkReal x2744=((1.0)*r20);
IkReal x2745=(r21*sj5);
IkReal x2746=(r01*r21);
CheckValue<IkReal> x2747=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x2743*x2744))+(((-1.0)*r02*r22))+((x2743*x2746))+(((-1.0)*x2746))+((cj5*r00*x2745)))),-1);
if(!x2747.valid){
continue;
}
CheckValue<IkReal> x2748 = IKatan2WithCheck(IkReal(r22),IkReal((x2745+(((-1.0)*cj5*x2744)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2747.value)))+(x2748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2749=IKsin(j4);
IkReal x2750=IKcos(j4);
IkReal x2751=(cj5*r00);
IkReal x2752=(cj5*r20);
IkReal x2753=(cj5*r10);
IkReal x2754=((1.0)*x2750);
IkReal x2755=(sj5*x2750);
IkReal x2756=((1.0)*sj5*x2749);
evalcond[0]=(((x2749*x2752))+((r22*x2750))+(((-1.0)*r21*x2756)));
evalcond[1]=(((x2749*x2751))+(((-1.0)*r01*x2756))+((r02*x2750)));
evalcond[2]=(((r22*x2749))+(((-1.0)*x2752*x2754))+((r21*x2755)));
evalcond[3]=(((r11*x2755))+((r12*x2749))+(((-1.0)*x2753*x2754)));
evalcond[4]=((-1.0)+((x2749*x2753))+((r12*x2750))+(((-1.0)*r11*x2756)));
evalcond[5]=((1.0)+((r01*x2755))+(((-1.0)*x2751*x2754))+((r02*x2749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2757=((1.0)*cj5);
CheckValue<IkReal> x2758=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2757))+(((-1.0)*r00*sj5)))),-1);
if(!x2758.valid){
continue;
}
CheckValue<IkReal> x2759 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2757)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2758.value)))+(x2759.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2760=IKsin(j4);
IkReal x2761=IKcos(j4);
IkReal x2762=(cj5*r00);
IkReal x2763=(cj5*r20);
IkReal x2764=(cj5*r10);
IkReal x2765=((1.0)*x2761);
IkReal x2766=(sj5*x2761);
IkReal x2767=((1.0)*sj5*x2760);
evalcond[0]=(((x2760*x2763))+(((-1.0)*r21*x2767))+((r22*x2761)));
evalcond[1]=((((-1.0)*r01*x2767))+((x2760*x2762))+((r02*x2761)));
evalcond[2]=(((r21*x2766))+((r22*x2760))+(((-1.0)*x2763*x2765)));
evalcond[3]=((((-1.0)*x2764*x2765))+((r12*x2760))+((r11*x2766)));
evalcond[4]=((-1.0)+((r12*x2761))+(((-1.0)*r11*x2767))+((x2760*x2764)));
evalcond[5]=((1.0)+((r01*x2766))+(((-1.0)*x2762*x2765))+((r02*x2760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2768=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2768.valid){
continue;
}
CheckValue<IkReal> x2769 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2769.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2768.value)))+(x2769.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2770=IKsin(j4);
IkReal x2771=IKcos(j4);
IkReal x2772=(cj5*r00);
IkReal x2773=(cj5*r20);
IkReal x2774=(cj5*r10);
IkReal x2775=((1.0)*x2771);
IkReal x2776=(sj5*x2771);
IkReal x2777=((1.0)*sj5*x2770);
evalcond[0]=(((x2770*x2773))+((r22*x2771))+(((-1.0)*r21*x2777)));
evalcond[1]=(((x2770*x2772))+(((-1.0)*r01*x2777))+((r02*x2771)));
evalcond[2]=(((r22*x2770))+(((-1.0)*x2773*x2775))+((r21*x2776)));
evalcond[3]=(((r11*x2776))+(((-1.0)*x2774*x2775))+((r12*x2770)));
evalcond[4]=((-1.0)+((x2770*x2774))+(((-1.0)*r11*x2777))+((r12*x2771)));
evalcond[5]=((1.0)+((r01*x2776))+(((-1.0)*x2772*x2775))+((r02*x2770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x2778=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2778;
j4eval[1]=IKsign(x2778);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x2779=((1.0)*cj5);
IkReal x2780=((((-1.0)*r21*x2779))+(((-1.0)*r20*sj5)));
j4eval[0]=x2780;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2779))))));
j4eval[2]=IKsign(x2780);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x2781=cj5*cj5;
IkReal x2782=r01*r01;
IkReal x2783=(cj5*r00);
IkReal x2784=(r01*sj5);
IkReal x2785=(x2782+(((-1.0)*x2781*x2782))+((x2781*(r00*r00)))+(((-2.0)*x2783*x2784))+(r02*r02));
j4eval[0]=x2785;
j4eval[1]=IKsign(x2785);
j4eval[2]=((IKabs(r02))+(IKabs((x2784+(((-1.0)*x2783))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2786=cj5*cj5;
IkReal x2787=r01*r01;
IkReal x2788=(r01*sj5);
IkReal x2789=(cj5*r00);
CheckValue<IkReal> x2790 = IKatan2WithCheck(IkReal(r02),IkReal((x2788+(((-1.0)*x2789)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2790.valid){
continue;
}
CheckValue<IkReal> x2791=IKPowWithIntegerCheck(IKsign((x2787+(((-1.0)*x2786*x2787))+(r02*r02)+((x2786*(r00*r00)))+(((-2.0)*x2788*x2789)))),-1);
if(!x2791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2790.value)+(((1.5707963267949)*(x2791.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2792=IKsin(j4);
IkReal x2793=IKcos(j4);
IkReal x2794=(cj5*r00);
IkReal x2795=(cj5*r20);
IkReal x2796=(cj5*r10);
IkReal x2797=((1.0)*x2793);
IkReal x2798=(sj5*x2793);
IkReal x2799=((1.0)*sj5*x2792);
evalcond[0]=((((-1.0)*r21*x2799))+((x2792*x2795))+((r22*x2793)));
evalcond[1]=(((r02*x2793))+((x2792*x2794))+(((-1.0)*r01*x2799)));
evalcond[2]=((((-1.0)*x2795*x2797))+((r21*x2798))+((r22*x2792)));
evalcond[3]=((((-1.0)*x2796*x2797))+((r12*x2792))+((r11*x2798)));
evalcond[4]=((1.0)+((r12*x2793))+((x2792*x2796))+(((-1.0)*r11*x2799)));
evalcond[5]=((-1.0)+((r02*x2792))+((r01*x2798))+(((-1.0)*x2794*x2797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2800=((1.0)*cj5);
CheckValue<IkReal> x2801 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2800)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2801.valid){
continue;
}
CheckValue<IkReal> x2802=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2800))+(((-1.0)*r20*sj5)))),-1);
if(!x2802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2801.value)+(((1.5707963267949)*(x2802.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2803=IKsin(j4);
IkReal x2804=IKcos(j4);
IkReal x2805=(cj5*r00);
IkReal x2806=(cj5*r20);
IkReal x2807=(cj5*r10);
IkReal x2808=((1.0)*x2804);
IkReal x2809=(sj5*x2804);
IkReal x2810=((1.0)*sj5*x2803);
evalcond[0]=(((x2803*x2806))+(((-1.0)*r21*x2810))+((r22*x2804)));
evalcond[1]=(((r02*x2804))+((x2803*x2805))+(((-1.0)*r01*x2810)));
evalcond[2]=((((-1.0)*x2806*x2808))+((r21*x2809))+((r22*x2803)));
evalcond[3]=(((r12*x2803))+(((-1.0)*x2807*x2808))+((r11*x2809)));
evalcond[4]=((1.0)+((r12*x2804))+(((-1.0)*r11*x2810))+((x2803*x2807)));
evalcond[5]=((-1.0)+(((-1.0)*x2805*x2808))+((r02*x2803))+((r01*x2809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2811 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2811.valid){
continue;
}
CheckValue<IkReal> x2812=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2811.value)+(((1.5707963267949)*(x2812.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2813=IKsin(j4);
IkReal x2814=IKcos(j4);
IkReal x2815=(cj5*r00);
IkReal x2816=(cj5*r20);
IkReal x2817=(cj5*r10);
IkReal x2818=((1.0)*x2814);
IkReal x2819=(sj5*x2814);
IkReal x2820=((1.0)*sj5*x2813);
evalcond[0]=(((x2813*x2816))+((r22*x2814))+(((-1.0)*r21*x2820)));
evalcond[1]=(((x2813*x2815))+(((-1.0)*r01*x2820))+((r02*x2814)));
evalcond[2]=(((r22*x2813))+((r21*x2819))+(((-1.0)*x2816*x2818)));
evalcond[3]=(((r12*x2813))+((r11*x2819))+(((-1.0)*x2817*x2818)));
evalcond[4]=((1.0)+((x2813*x2817))+(((-1.0)*r11*x2820))+((r12*x2814)));
evalcond[5]=((-1.0)+((r01*x2819))+(((-1.0)*x2815*x2818))+((r02*x2813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x2821=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2821;
j4eval[1]=IKsign(x2821);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x2822=((1.0)*cj5);
IkReal x2823=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2822)));
j4eval[0]=x2823;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2822))))));
j4eval[2]=IKsign(x2823);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x2824=cj5*cj5;
IkReal x2825=(r21*sj5);
IkReal x2826=((1.0)*r20);
IkReal x2827=(r01*r21);
IkReal x2828=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x2824*x2827))+((cj5*r00*x2825))+(((-1.0)*x2827))+(((-1.0)*r00*x2824*x2826)));
j4eval[0]=x2828;
j4eval[1]=((IKabs(((((-1.0)*cj5*x2826))+x2825)))+(IKabs(r22)));
j4eval[2]=IKsign(x2828);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2829=cj5*cj5;
IkReal x2830=((1.0)*r20);
IkReal x2831=(r21*sj5);
IkReal x2832=(r01*r21);
CheckValue<IkReal> x2833=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x2829*x2832))+(((-1.0)*x2832))+(((-1.0)*r02*r22))+((cj5*r00*x2831))+(((-1.0)*r00*x2829*x2830)))),-1);
if(!x2833.valid){
continue;
}
CheckValue<IkReal> x2834 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*x2830))+x2831)),IKFAST_ATAN2_MAGTHRESH);
if(!x2834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2833.value)))+(x2834.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2835=IKsin(j4);
IkReal x2836=IKcos(j4);
IkReal x2837=(cj5*r00);
IkReal x2838=(cj5*r20);
IkReal x2839=(cj5*r10);
IkReal x2840=((1.0)*x2836);
IkReal x2841=(sj5*x2836);
IkReal x2842=((1.0)*sj5*x2835);
evalcond[0]=((((-1.0)*r21*x2842))+((r22*x2836))+((x2835*x2838)));
evalcond[1]=(((r02*x2836))+(((-1.0)*r01*x2842))+((x2835*x2837)));
evalcond[2]=(((r21*x2841))+(((-1.0)*x2838*x2840))+((r22*x2835)));
evalcond[3]=(((r12*x2835))+((r11*x2841))+(((-1.0)*x2839*x2840)));
evalcond[4]=((-1.0)+((r12*x2836))+(((-1.0)*r11*x2842))+((x2835*x2839)));
evalcond[5]=((1.0)+((r02*x2835))+((r01*x2841))+(((-1.0)*x2837*x2840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2843=((1.0)*cj5);
CheckValue<IkReal> x2844 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2843))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2844.valid){
continue;
}
CheckValue<IkReal> x2845=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2843))+(((-1.0)*r00*sj5)))),-1);
if(!x2845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2844.value)+(((1.5707963267949)*(x2845.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2846=IKsin(j4);
IkReal x2847=IKcos(j4);
IkReal x2848=(cj5*r00);
IkReal x2849=(cj5*r20);
IkReal x2850=(cj5*r10);
IkReal x2851=((1.0)*x2847);
IkReal x2852=(sj5*x2847);
IkReal x2853=((1.0)*sj5*x2846);
evalcond[0]=((((-1.0)*r21*x2853))+((x2846*x2849))+((r22*x2847)));
evalcond[1]=((((-1.0)*r01*x2853))+((x2846*x2848))+((r02*x2847)));
evalcond[2]=(((r21*x2852))+(((-1.0)*x2849*x2851))+((r22*x2846)));
evalcond[3]=(((r11*x2852))+(((-1.0)*x2850*x2851))+((r12*x2846)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x2853))+((r12*x2847))+((x2846*x2850)));
evalcond[5]=((1.0)+(((-1.0)*x2848*x2851))+((r01*x2852))+((r02*x2846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2854=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2854.valid){
continue;
}
CheckValue<IkReal> x2855 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2854.value)))+(x2855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2856=IKsin(j4);
IkReal x2857=IKcos(j4);
IkReal x2858=(cj5*r00);
IkReal x2859=(cj5*r20);
IkReal x2860=(cj5*r10);
IkReal x2861=((1.0)*x2857);
IkReal x2862=(sj5*x2857);
IkReal x2863=((1.0)*sj5*x2856);
evalcond[0]=((((-1.0)*r21*x2863))+((r22*x2857))+((x2856*x2859)));
evalcond[1]=((((-1.0)*r01*x2863))+((x2856*x2858))+((r02*x2857)));
evalcond[2]=(((r21*x2862))+(((-1.0)*x2859*x2861))+((r22*x2856)));
evalcond[3]=(((r12*x2856))+(((-1.0)*x2860*x2861))+((r11*x2862)));
evalcond[4]=((-1.0)+((r12*x2857))+((x2856*x2860))+(((-1.0)*r11*x2863)));
evalcond[5]=((1.0)+(((-1.0)*x2858*x2861))+((r02*x2856))+((r01*x2862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x2864=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2864;
j4eval[1]=IKsign(x2864);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x2865=((1.0)*cj5);
IkReal x2866=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2865)));
j4eval[0]=x2866;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2865)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2866);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x2867=cj5*cj5;
IkReal x2868=(r21*sj5);
IkReal x2869=((1.0)*r20);
IkReal x2870=(r01*r21);
IkReal x2871=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x2870))+((x2867*x2870))+((cj5*r00*x2868))+(((-1.0)*r00*x2867*x2869)));
j4eval[0]=x2871;
j4eval[1]=((IKabs(((((-1.0)*cj5*x2869))+x2868)))+(IKabs(r22)));
j4eval[2]=IKsign(x2871);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2872=cj5*cj5;
IkReal x2873=((1.0)*r20);
IkReal x2874=(r21*sj5);
IkReal x2875=(r01*r21);
CheckValue<IkReal> x2876=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x2872*x2873))+(((-1.0)*x2875))+((x2872*x2875))+((cj5*r00*x2874)))),-1);
if(!x2876.valid){
continue;
}
CheckValue<IkReal> x2877 = IKatan2WithCheck(IkReal(r22),IkReal((x2874+(((-1.0)*cj5*x2873)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2876.value)))+(x2877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2878=IKsin(j4);
IkReal x2879=IKcos(j4);
IkReal x2880=(cj5*r00);
IkReal x2881=(cj5*r20);
IkReal x2882=(cj5*r10);
IkReal x2883=((1.0)*x2879);
IkReal x2884=(sj5*x2879);
IkReal x2885=((1.0)*sj5*x2878);
evalcond[0]=(((r22*x2879))+((x2878*x2881))+(((-1.0)*r21*x2885)));
evalcond[1]=(((r02*x2879))+((x2878*x2880))+(((-1.0)*r01*x2885)));
evalcond[2]=(((r22*x2878))+((r21*x2884))+(((-1.0)*x2881*x2883)));
evalcond[3]=((((-1.0)*x2882*x2883))+((r11*x2884))+((r12*x2878)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x2885))+((x2878*x2882))+((r12*x2879)));
evalcond[5]=((1.0)+((r01*x2884))+((r02*x2878))+(((-1.0)*x2880*x2883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2886=((1.0)*cj5);
CheckValue<IkReal> x2887=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2886)))),-1);
if(!x2887.valid){
continue;
}
CheckValue<IkReal> x2888 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2886)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2887.value)))+(x2888.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2889=IKsin(j4);
IkReal x2890=IKcos(j4);
IkReal x2891=(cj5*r00);
IkReal x2892=(cj5*r20);
IkReal x2893=(cj5*r10);
IkReal x2894=((1.0)*x2890);
IkReal x2895=(sj5*x2890);
IkReal x2896=((1.0)*sj5*x2889);
evalcond[0]=(((r22*x2890))+((x2889*x2892))+(((-1.0)*r21*x2896)));
evalcond[1]=(((x2889*x2891))+(((-1.0)*r01*x2896))+((r02*x2890)));
evalcond[2]=(((r22*x2889))+((r21*x2895))+(((-1.0)*x2892*x2894)));
evalcond[3]=((((-1.0)*x2893*x2894))+((r11*x2895))+((r12*x2889)));
evalcond[4]=((-1.0)+((x2889*x2893))+((r12*x2890))+(((-1.0)*r11*x2896)));
evalcond[5]=((1.0)+(((-1.0)*x2891*x2894))+((r01*x2895))+((r02*x2889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2897=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2897.valid){
continue;
}
CheckValue<IkReal> x2898 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2897.value)))+(x2898.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2899=IKsin(j4);
IkReal x2900=IKcos(j4);
IkReal x2901=(cj5*r00);
IkReal x2902=(cj5*r20);
IkReal x2903=(cj5*r10);
IkReal x2904=((1.0)*x2900);
IkReal x2905=(sj5*x2900);
IkReal x2906=((1.0)*sj5*x2899);
evalcond[0]=((((-1.0)*r21*x2906))+((x2899*x2902))+((r22*x2900)));
evalcond[1]=(((r02*x2900))+((x2899*x2901))+(((-1.0)*r01*x2906)));
evalcond[2]=((((-1.0)*x2902*x2904))+((r21*x2905))+((r22*x2899)));
evalcond[3]=(((r12*x2899))+(((-1.0)*x2903*x2904))+((r11*x2905)));
evalcond[4]=((-1.0)+((x2899*x2903))+((r12*x2900))+(((-1.0)*r11*x2906)));
evalcond[5]=((1.0)+(((-1.0)*x2901*x2904))+((r01*x2905))+((r02*x2899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x2907=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2907;
j4eval[1]=IKsign(x2907);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x2908=((1.0)*cj5);
IkReal x2909=((((-1.0)*r21*x2908))+(((-1.0)*r20*sj5)));
j4eval[0]=x2909;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2908))))));
j4eval[2]=IKsign(x2909);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x2910=cj5*cj5;
IkReal x2911=r01*r01;
IkReal x2912=(cj5*r00);
IkReal x2913=(r01*sj5);
IkReal x2914=((((-2.0)*x2912*x2913))+((x2910*(r00*r00)))+(r02*r02)+(((-1.0)*x2910*x2911))+x2911);
j4eval[0]=x2914;
j4eval[1]=IKsign(x2914);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2912))+x2913))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2915=cj5*cj5;
IkReal x2916=r01*r01;
IkReal x2917=(r01*sj5);
IkReal x2918=(cj5*r00);
CheckValue<IkReal> x2919 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x2918))+x2917)),IKFAST_ATAN2_MAGTHRESH);
if(!x2919.valid){
continue;
}
CheckValue<IkReal> x2920=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2915*x2916))+(((-2.0)*x2917*x2918))+((x2915*(r00*r00)))+(r02*r02)+x2916)),-1);
if(!x2920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2919.value)+(((1.5707963267949)*(x2920.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2921=IKsin(j4);
IkReal x2922=IKcos(j4);
IkReal x2923=(cj5*r00);
IkReal x2924=(cj5*r20);
IkReal x2925=(cj5*r10);
IkReal x2926=((1.0)*x2922);
IkReal x2927=(sj5*x2922);
IkReal x2928=((1.0)*sj5*x2921);
evalcond[0]=(((x2921*x2924))+((r22*x2922))+(((-1.0)*r21*x2928)));
evalcond[1]=(((x2921*x2923))+(((-1.0)*r01*x2928))+((r02*x2922)));
evalcond[2]=(((r22*x2921))+((r21*x2927))+(((-1.0)*x2924*x2926)));
evalcond[3]=((((-1.0)*x2925*x2926))+((r11*x2927))+((r12*x2921)));
evalcond[4]=((1.0)+((x2921*x2925))+(((-1.0)*r11*x2928))+((r12*x2922)));
evalcond[5]=((-1.0)+(((-1.0)*x2923*x2926))+((r01*x2927))+((r02*x2921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2929=((1.0)*cj5);
CheckValue<IkReal> x2930=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2929))+(((-1.0)*r20*sj5)))),-1);
if(!x2930.valid){
continue;
}
CheckValue<IkReal> x2931 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2929)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2930.value)))+(x2931.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2932=IKsin(j4);
IkReal x2933=IKcos(j4);
IkReal x2934=(cj5*r00);
IkReal x2935=(cj5*r20);
IkReal x2936=(cj5*r10);
IkReal x2937=((1.0)*x2933);
IkReal x2938=(sj5*x2933);
IkReal x2939=((1.0)*sj5*x2932);
evalcond[0]=(((r22*x2933))+((x2932*x2935))+(((-1.0)*r21*x2939)));
evalcond[1]=(((r02*x2933))+((x2932*x2934))+(((-1.0)*r01*x2939)));
evalcond[2]=(((r21*x2938))+((r22*x2932))+(((-1.0)*x2935*x2937)));
evalcond[3]=((((-1.0)*x2936*x2937))+((r12*x2932))+((r11*x2938)));
evalcond[4]=((1.0)+((x2932*x2936))+((r12*x2933))+(((-1.0)*r11*x2939)));
evalcond[5]=((-1.0)+((r02*x2932))+((r01*x2938))+(((-1.0)*x2934*x2937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2940 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2940.valid){
continue;
}
CheckValue<IkReal> x2941=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2940.value)+(((1.5707963267949)*(x2941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2942=IKsin(j4);
IkReal x2943=IKcos(j4);
IkReal x2944=(cj5*r00);
IkReal x2945=(cj5*r20);
IkReal x2946=(cj5*r10);
IkReal x2947=((1.0)*x2943);
IkReal x2948=(sj5*x2943);
IkReal x2949=((1.0)*sj5*x2942);
evalcond[0]=((((-1.0)*r21*x2949))+((r22*x2943))+((x2942*x2945)));
evalcond[1]=(((r02*x2943))+(((-1.0)*r01*x2949))+((x2942*x2944)));
evalcond[2]=(((r21*x2948))+((r22*x2942))+(((-1.0)*x2945*x2947)));
evalcond[3]=(((r12*x2942))+((r11*x2948))+(((-1.0)*x2946*x2947)));
evalcond[4]=((1.0)+(((-1.0)*r11*x2949))+((r12*x2943))+((x2942*x2946)));
evalcond[5]=((-1.0)+((r02*x2942))+((r01*x2948))+(((-1.0)*x2944*x2947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2950=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2950);
rxp0_2=(py*r00);
rxp1_0=(r21*x2950);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x2951=((1.0)*sj0);
j4eval[0]=r12;
j4eval[1]=IKsign(r12);
j4eval[2]=((IKabs(((((-1.0)*cj2*x2951))+(((-1.0)*cj0*sj2)))))+(IKabs((((cj0*cj2))+(((-1.0)*sj2*x2951))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2952=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2952);
rxp0_2=(py*r00);
rxp1_0=(r21*x2952);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x2953=((1.0)*sj0);
IkReal x2954=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x2954;
j4eval[1]=IKsign(x2954);
j4eval[2]=((IKabs(((((-1.0)*cj2*x2953))+(((-1.0)*cj0*sj2)))))+(IKabs((((cj0*cj2))+(((-1.0)*sj2*x2953))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2955=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2955);
rxp0_2=(py*r00);
rxp1_0=(r21*x2955);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2956=((1.0)*cj2);
CheckValue<IkReal> x2957=IKPowWithIntegerCheck(r12,-1);
if(!x2957.valid){
continue;
}
CheckValue<IkReal> x2958=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x2958.valid){
continue;
}
if( IKabs(((x2957.value)*(((((-1.0)*sj0*x2956))+(((-1.0)*cj0*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2958.value)*(((((-1.0)*cj0*x2956))+((sj0*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2957.value)*(((((-1.0)*sj0*x2956))+(((-1.0)*cj0*sj2))))))+IKsqr(((x2958.value)*(((((-1.0)*cj0*x2956))+((sj0*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x2957.value)*(((((-1.0)*sj0*x2956))+(((-1.0)*cj0*sj2))))), ((x2958.value)*(((((-1.0)*cj0*x2956))+((sj0*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2959=IKsin(j4);
IkReal x2960=IKcos(j4);
IkReal x2961=(cj2*sj0);
IkReal x2962=(cj0*sj2);
IkReal x2963=(cj0*cj2);
IkReal x2964=(r01*sj5);
IkReal x2965=(r21*sj5);
IkReal x2966=(sj0*sj2);
IkReal x2967=((1.0)*x2959);
IkReal x2968=(cj5*x2959);
IkReal x2969=(x2961+x2962);
IkReal x2970=((1.0)*cj5*x2960);
evalcond[0]=(((r12*x2959))+x2969);
evalcond[1]=((((-1.0)*x2963))+((r12*x2960))+x2966);
evalcond[2]=((((-1.0)*x2965*x2967))+((r20*x2968)));
evalcond[3]=((((-1.0)*r20*x2970))+((x2960*x2965)));
evalcond[4]=(((r00*x2968))+(((-1.0)*x2964*x2967))+x2969);
evalcond[5]=((((-1.0)*x2966))+(((-1.0)*r00*x2970))+((x2960*x2964))+x2963);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2971=((1.0)*sj0);
CheckValue<IkReal> x2972=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x2972.valid){
continue;
}
CheckValue<IkReal> x2973 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x2971))+(((-1.0)*cj0*sj2)))),IkReal((((cj0*cj2))+(((-1.0)*sj2*x2971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2972.value)))+(x2973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2974=IKsin(j4);
IkReal x2975=IKcos(j4);
IkReal x2976=(cj2*sj0);
IkReal x2977=(cj0*sj2);
IkReal x2978=(cj0*cj2);
IkReal x2979=(r01*sj5);
IkReal x2980=(r21*sj5);
IkReal x2981=(sj0*sj2);
IkReal x2982=((1.0)*x2974);
IkReal x2983=(cj5*x2974);
IkReal x2984=(x2976+x2977);
IkReal x2985=((1.0)*cj5*x2975);
evalcond[0]=(((r12*x2974))+x2984);
evalcond[1]=((((-1.0)*x2978))+((r12*x2975))+x2981);
evalcond[2]=(((r20*x2983))+(((-1.0)*x2980*x2982)));
evalcond[3]=((((-1.0)*r20*x2985))+((x2975*x2980)));
evalcond[4]=((((-1.0)*x2979*x2982))+((r00*x2983))+x2984);
evalcond[5]=((((-1.0)*r00*x2985))+(((-1.0)*x2981))+((x2975*x2979))+x2978);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2986=((1.0)*sj0);
CheckValue<IkReal> x2987 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x2986))+(((-1.0)*cj0*sj2)))),IkReal((((cj0*cj2))+(((-1.0)*sj2*x2986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2987.valid){
continue;
}
CheckValue<IkReal> x2988=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x2988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2987.value)+(((1.5707963267949)*(x2988.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2989=IKsin(j4);
IkReal x2990=IKcos(j4);
IkReal x2991=(cj2*sj0);
IkReal x2992=(cj0*sj2);
IkReal x2993=(cj0*cj2);
IkReal x2994=(r01*sj5);
IkReal x2995=(r21*sj5);
IkReal x2996=(sj0*sj2);
IkReal x2997=((1.0)*x2989);
IkReal x2998=(cj5*x2989);
IkReal x2999=(x2991+x2992);
IkReal x3000=((1.0)*cj5*x2990);
evalcond[0]=(((r12*x2989))+x2999);
evalcond[1]=(((r12*x2990))+(((-1.0)*x2993))+x2996);
evalcond[2]=((((-1.0)*x2995*x2997))+((r20*x2998)));
evalcond[3]=(((x2990*x2995))+(((-1.0)*r20*x3000)));
evalcond[4]=(((r00*x2998))+(((-1.0)*x2994*x2997))+x2999);
evalcond[5]=(((x2990*x2994))+(((-1.0)*r00*x3000))+(((-1.0)*x2996))+x2993);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3001=cj5*cj5;
IkReal x3002=(r11*r21);
IkReal x3003=(cj0*sj2);
IkReal x3004=(cj2*sj0);
IkReal x3005=(r21*sj5);
IkReal x3006=(cj5*r20);
CheckValue<IkReal> x3007=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3002))+(((-1.0)*r12*r22))+((x3001*x3002))+(((-1.0)*r10*r20*x3001))+((r11*sj5*x3006))+((cj5*r10*x3005)))),-1);
if(!x3007.valid){
continue;
}
CheckValue<IkReal> x3008 = IKatan2WithCheck(IkReal((((r22*x3004))+((r22*x3003)))),IkReal(((((-1.0)*x3003*x3006))+((x3003*x3005))+((x3004*x3005))+(((-1.0)*x3004*x3006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3007.value)))+(x3008.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3009=IKsin(j4);
IkReal x3010=IKcos(j4);
IkReal x3011=(cj2*sj0);
IkReal x3012=(cj0*sj2);
IkReal x3013=(cj5*r00);
IkReal x3014=(cj0*cj2);
IkReal x3015=(sj0*sj2);
IkReal x3016=((1.0)*x3010);
IkReal x3017=(sj5*x3010);
IkReal x3018=(cj5*x3009);
IkReal x3019=(x3012+x3011);
IkReal x3020=((1.0)*sj5*x3009);
evalcond[0]=(((r22*x3010))+(((-1.0)*r21*x3020))+((r20*x3018)));
evalcond[1]=(((r22*x3009))+((r21*x3017))+(((-1.0)*cj5*r20*x3016)));
evalcond[2]=(((x3009*x3013))+x3019+(((-1.0)*r01*x3020))+((r02*x3010)));
evalcond[3]=(x3019+(((-1.0)*cj5*r10*x3016))+((r12*x3009))+((r11*x3017)));
evalcond[4]=(x3015+(((-1.0)*r11*x3020))+((r10*x3018))+((r12*x3010))+(((-1.0)*x3014)));
evalcond[5]=(((r01*x3017))+x3014+((r02*x3009))+(((-1.0)*x3015))+(((-1.0)*x3013*x3016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3021=(cj2*sj0);
IkReal x3022=(r21*sj5);
IkReal x3023=(cj0*sj2);
IkReal x3024=((1.0)*r22);
IkReal x3025=((1.0)*cj5*r20);
CheckValue<IkReal> x3026 = IKatan2WithCheck(IkReal(((((-1.0)*x3021*x3025))+((x3021*x3022))+(((-1.0)*x3023*x3025))+((x3022*x3023)))),IkReal(((((-1.0)*x3021*x3024))+(((-1.0)*x3023*x3024)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3026.valid){
continue;
}
CheckValue<IkReal> x3027=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3026.value)+(((1.5707963267949)*(x3027.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3028=IKsin(j4);
IkReal x3029=IKcos(j4);
IkReal x3030=(cj2*sj0);
IkReal x3031=(cj0*sj2);
IkReal x3032=(cj5*r00);
IkReal x3033=(cj0*cj2);
IkReal x3034=(sj0*sj2);
IkReal x3035=((1.0)*x3029);
IkReal x3036=(sj5*x3029);
IkReal x3037=(cj5*x3028);
IkReal x3038=(x3030+x3031);
IkReal x3039=((1.0)*sj5*x3028);
evalcond[0]=((((-1.0)*r21*x3039))+((r22*x3029))+((r20*x3037)));
evalcond[1]=((((-1.0)*cj5*r20*x3035))+((r21*x3036))+((r22*x3028)));
evalcond[2]=(((x3028*x3032))+(((-1.0)*r01*x3039))+x3038+((r02*x3029)));
evalcond[3]=(((r12*x3028))+x3038+((r11*x3036))+(((-1.0)*cj5*r10*x3035)));
evalcond[4]=(((r12*x3029))+x3034+(((-1.0)*x3033))+(((-1.0)*r11*x3039))+((r10*x3037)));
evalcond[5]=(x3033+((r02*x3028))+(((-1.0)*x3034))+((r01*x3036))+(((-1.0)*x3032*x3035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3040=((1.0)*cj5);
IkReal x3041=(cj0*sj2);
IkReal x3042=(cj2*sj0);
IkReal x3043=(r21*sj5);
CheckValue<IkReal> x3044=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3040)))),-1);
if(!x3044.valid){
continue;
}
CheckValue<IkReal> x3045 = IKatan2WithCheck(IkReal((((r22*x3041))+((r22*x3042)))),IkReal((((x3042*x3043))+(((-1.0)*r20*x3040*x3041))+(((-1.0)*r20*x3040*x3042))+((x3041*x3043)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3044.value)))+(x3045.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3046=IKsin(j4);
IkReal x3047=IKcos(j4);
IkReal x3048=(cj2*sj0);
IkReal x3049=(cj0*sj2);
IkReal x3050=(cj5*r00);
IkReal x3051=(cj0*cj2);
IkReal x3052=(sj0*sj2);
IkReal x3053=((1.0)*x3047);
IkReal x3054=(sj5*x3047);
IkReal x3055=(cj5*x3046);
IkReal x3056=(x3049+x3048);
IkReal x3057=((1.0)*sj5*x3046);
evalcond[0]=(((r22*x3047))+(((-1.0)*r21*x3057))+((r20*x3055)));
evalcond[1]=(((r22*x3046))+(((-1.0)*cj5*r20*x3053))+((r21*x3054)));
evalcond[2]=((((-1.0)*r01*x3057))+x3056+((r02*x3047))+((x3046*x3050)));
evalcond[3]=((((-1.0)*cj5*r10*x3053))+x3056+((r11*x3054))+((r12*x3046)));
evalcond[4]=(x3052+(((-1.0)*x3051))+((r10*x3055))+(((-1.0)*r11*x3057))+((r12*x3047)));
evalcond[5]=(x3051+(((-1.0)*x3052))+((r01*x3054))+((r02*x3046))+(((-1.0)*x3050*x3053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x3058=((68162500000.0)*py);
IkReal x3059=((68162500000.0)*px);
j0eval[0]=((1.0)+cj2);
j0eval[1]=IKsign(((59470418.0)+(((59470418.0)*cj2))));
j0eval[2]=((IKabs(((((-1.0)*cj2*x3059))+(((-1.0)*x3059))+((sj2*x3058)))))+(IKabs(((((-1.0)*sj2*x3059))+(((-1.0)*cj2*x3058))+(((-1.0)*x3058))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j4eval[0]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j4eval[0]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3061 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x3061.valid){
continue;
}
IkReal x3060=x3061.value;
j4array[0]=((-1.0)*x3060);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x3060)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x3062=IKsin(j4);
evalcond[0]=(((cj5*r20*x3062))+(((-1.0)*r21*sj5*x3062))+((r22*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x3063=((68162500000.0)*py);
IkReal x3064=((68162500000.0)*px);
j0eval[0]=((1.0)+cj2);
j0eval[1]=IKsign(((59470418.0)+(((59470418.0)*cj2))));
j0eval[2]=((IKabs(((((-1.0)*x3064))+((sj2*x3063))+(((-1.0)*cj2*x3064)))))+(IKabs(((((-1.0)*x3063))+(((-1.0)*cj2*x3063))+(((-1.0)*sj2*x3064))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=((-1.0)+(((-1.0)*cj2)));
j0eval[1]=IKsign(((-5453.0)+(((-5453.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3065=(r01*sj5);
IkReal x3066=(cj5*r00);
IkReal x3067=((5453.0)*sj4);
IkReal x3068=((5453.0)*cj4*r02);
IkReal x3069=(cj2*x3067);
CheckValue<IkReal> x3070=IKPowWithIntegerCheck(sj2,-1);
if(!x3070.valid){
continue;
}
if( IKabs(((((-1.0)*sj4*x3065))+(((-2292.31615624427)*py))+((sj4*x3066))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.000183385292499542)*(x3070.value)*(((((-1.0)*x3066*x3069))+(((-1.0)*x3066*x3067))+(((12500000.0)*cj2*py))+((x3065*x3067))+((x3065*x3069))+(((-1.0)*x3068))+(((-1.0)*cj2*x3068)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x3065))+(((-2292.31615624427)*py))+((sj4*x3066))+((cj4*r02))))+IKsqr(((-0.000183385292499542)*(x3070.value)*(((((-1.0)*x3066*x3069))+(((-1.0)*x3066*x3067))+(((12500000.0)*cj2*py))+((x3065*x3067))+((x3065*x3069))+(((-1.0)*x3068))+(((-1.0)*cj2*x3068))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*sj4*x3065))+(((-2292.31615624427)*py))+((sj4*x3066))+((cj4*r02))), ((-0.000183385292499542)*(x3070.value)*(((((-1.0)*x3066*x3069))+(((-1.0)*x3066*x3067))+(((12500000.0)*cj2*py))+((x3065*x3067))+((x3065*x3069))+(((-1.0)*x3068))+(((-1.0)*cj2*x3068))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x3071=IKcos(j0);
IkReal x3072=IKsin(j0);
IkReal x3073=(cj5*r00);
IkReal x3074=((1.0)*cj4);
IkReal x3075=(cj5*r10);
IkReal x3076=(cj4*sj5);
IkReal x3077=((0.00043624)*x3071);
IkReal x3078=((1.0)*sj4*sj5);
IkReal x3079=((1.0)*x3071);
IkReal x3080=((0.00043624)*x3072);
IkReal x3081=(cj2*x3072);
IkReal x3082=(cj2*x3079);
IkReal x3083=((1.0)*sj2*x3072);
IkReal x3084=(x3083+x3082);
evalcond[0]=((((-1.0)*sj2*x3080))+(((-1.0)*x3077))+(((-1.0)*px))+(((-1.0)*cj2*x3077)));
evalcond[1]=((((-1.0)*cj2*x3080))+(((-1.0)*x3080))+((sj2*x3077))+(((-1.0)*py)));
evalcond[2]=(x3081+(((-1.0)*r01*x3078))+(((-1.0)*sj2*x3079))+((sj4*x3073))+((cj4*r02)));
evalcond[3]=((((-1.0)*x3074*x3075))+(((-1.0)*x3081))+((sj2*x3071))+((r12*sj4))+((r11*x3076)));
evalcond[4]=((((-1.0)*x3084))+(((-1.0)*r11*x3078))+((cj4*r12))+((sj4*x3075)));
evalcond[5]=((((-1.0)*x3084))+((r01*x3076))+(((-1.0)*x3073*x3074))+((r02*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3085=((12500000.0)*px);
IkReal x3086=((5453.0)*cj2);
IkReal x3087=((5453.0)*cj4*r02);
IkReal x3088=(r01*sj4*sj5);
IkReal x3089=((5453.0)*cj5*r00*sj4);
CheckValue<IkReal> x3090=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((-1.0)*x3086)))),-1);
if(!x3090.valid){
continue;
}
CheckValue<IkReal> x3091 = IKatan2WithCheck(IkReal(((((-5453.0)*x3088))+x3089+x3087+((cj4*r02*x3086))+((cj5*r00*sj4*x3086))+((sj2*x3085))+(((-1.0)*x3086*x3088)))),IkReal((((cj2*x3085))+(((-1.0)*sj2*x3087))+(((-1.0)*sj2*x3089))+(((5453.0)*sj2*x3088)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3091.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3090.value)))+(x3091.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x3092=IKcos(j0);
IkReal x3093=IKsin(j0);
IkReal x3094=(cj5*r00);
IkReal x3095=((1.0)*cj4);
IkReal x3096=(cj5*r10);
IkReal x3097=(cj4*sj5);
IkReal x3098=((0.00043624)*x3092);
IkReal x3099=((1.0)*sj4*sj5);
IkReal x3100=((1.0)*x3092);
IkReal x3101=((0.00043624)*x3093);
IkReal x3102=(cj2*x3093);
IkReal x3103=(cj2*x3100);
IkReal x3104=((1.0)*sj2*x3093);
IkReal x3105=(x3104+x3103);
evalcond[0]=((((-1.0)*sj2*x3101))+(((-1.0)*x3098))+(((-1.0)*px))+(((-1.0)*cj2*x3098)));
evalcond[1]=(((sj2*x3098))+(((-1.0)*x3101))+(((-1.0)*py))+(((-1.0)*cj2*x3101)));
evalcond[2]=(x3102+(((-1.0)*sj2*x3100))+(((-1.0)*r01*x3099))+((sj4*x3094))+((cj4*r02)));
evalcond[3]=(((sj2*x3092))+(((-1.0)*x3102))+((r12*sj4))+((r11*x3097))+(((-1.0)*x3095*x3096)));
evalcond[4]=((((-1.0)*r11*x3099))+(((-1.0)*x3105))+((sj4*x3096))+((cj4*r12)));
evalcond[5]=(((r01*x3097))+(((-1.0)*x3105))+((r02*sj4))+(((-1.0)*x3094*x3095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3106=((68162500000.0)*py);
IkReal x3107=((68162500000.0)*px);
CheckValue<IkReal> x3108 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x3107))+(((-1.0)*x3106))+(((-1.0)*cj2*x3106)))),IkReal(((((-1.0)*x3107))+((sj2*x3106))+(((-1.0)*cj2*x3107)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3108.valid){
continue;
}
CheckValue<IkReal> x3109=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((59470418.0)*cj2)))),-1);
if(!x3109.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3108.value)+(((1.5707963267949)*(x3109.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x3110=IKcos(j0);
IkReal x3111=IKsin(j0);
IkReal x3112=(cj5*r00);
IkReal x3113=((1.0)*cj4);
IkReal x3114=(cj5*r10);
IkReal x3115=(cj4*sj5);
IkReal x3116=((0.00043624)*x3110);
IkReal x3117=((1.0)*sj4*sj5);
IkReal x3118=((1.0)*x3110);
IkReal x3119=((0.00043624)*x3111);
IkReal x3120=(cj2*x3111);
IkReal x3121=(cj2*x3118);
IkReal x3122=((1.0)*sj2*x3111);
IkReal x3123=(x3122+x3121);
evalcond[0]=((((-1.0)*x3116))+(((-1.0)*px))+(((-1.0)*cj2*x3116))+(((-1.0)*sj2*x3119)));
evalcond[1]=((((-1.0)*x3119))+((sj2*x3116))+(((-1.0)*py))+(((-1.0)*cj2*x3119)));
evalcond[2]=(x3120+(((-1.0)*r01*x3117))+((sj4*x3112))+(((-1.0)*sj2*x3118))+((cj4*r02)));
evalcond[3]=((((-1.0)*x3113*x3114))+(((-1.0)*x3120))+((sj2*x3110))+((r12*sj4))+((r11*x3115)));
evalcond[4]=((((-1.0)*r11*x3117))+((sj4*x3114))+(((-1.0)*x3123))+((cj4*r12)));
evalcond[5]=(((r02*sj4))+(((-1.0)*x3112*x3113))+(((-1.0)*x3123))+((r01*x3115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3125 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3125.valid){
continue;
}
IkReal x3124=x3125.value;
j4array[0]=((-1.0)*x3124);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x3124)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x3126=IKcos(j4);
evalcond[0]=(((r21*sj5*x3126))+((r22*(IKsin(j4))))+(((-1.0)*cj5*r20*x3126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x3127=((68162500000.0)*py);
IkReal x3128=((68162500000.0)*px);
j0eval[0]=((1.0)+cj2);
j0eval[1]=IKsign(((59470418.0)+(((59470418.0)*cj2))));
j0eval[2]=((IKabs(((((-1.0)*sj2*x3128))+(((-1.0)*cj2*x3127))+(((-1.0)*x3127)))))+(IKabs(((((-1.0)*cj2*x3128))+((sj2*x3127))+(((-1.0)*x3128))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=((-1.0)+(((-1.0)*cj2)));
j0eval[1]=IKsign(((-5453.0)+(((-5453.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3129=(r01*sj5);
IkReal x3130=(cj5*r00);
IkReal x3131=((5453.0)*sj4);
IkReal x3132=((5453.0)*cj4*r02);
IkReal x3133=(cj2*x3131);
CheckValue<IkReal> x3134=IKPowWithIntegerCheck(sj2,-1);
if(!x3134.valid){
continue;
}
if( IKabs((((sj4*x3130))+(((-2292.31615624427)*py))+(((-1.0)*sj4*x3129))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.000183385292499542)*(x3134.value)*(((((-1.0)*x3130*x3133))+(((-1.0)*x3130*x3131))+(((12500000.0)*cj2*py))+(((-1.0)*cj2*x3132))+(((-1.0)*x3132))+((x3129*x3131))+((x3129*x3133)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x3130))+(((-2292.31615624427)*py))+(((-1.0)*sj4*x3129))+((cj4*r02))))+IKsqr(((-0.000183385292499542)*(x3134.value)*(((((-1.0)*x3130*x3133))+(((-1.0)*x3130*x3131))+(((12500000.0)*cj2*py))+(((-1.0)*cj2*x3132))+(((-1.0)*x3132))+((x3129*x3131))+((x3129*x3133))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((sj4*x3130))+(((-2292.31615624427)*py))+(((-1.0)*sj4*x3129))+((cj4*r02))), ((-0.000183385292499542)*(x3134.value)*(((((-1.0)*x3130*x3133))+(((-1.0)*x3130*x3131))+(((12500000.0)*cj2*py))+(((-1.0)*cj2*x3132))+(((-1.0)*x3132))+((x3129*x3131))+((x3129*x3133))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x3135=IKcos(j0);
IkReal x3136=IKsin(j0);
IkReal x3137=(cj5*r00);
IkReal x3138=((1.0)*cj4);
IkReal x3139=(cj5*r10);
IkReal x3140=(cj4*sj5);
IkReal x3141=((0.00043624)*x3135);
IkReal x3142=((1.0)*sj4*sj5);
IkReal x3143=((1.0)*x3135);
IkReal x3144=((0.00043624)*x3136);
IkReal x3145=(cj2*x3136);
IkReal x3146=(cj2*x3143);
IkReal x3147=((1.0)*sj2*x3136);
IkReal x3148=(x3146+x3147);
evalcond[0]=((((-1.0)*x3141))+(((-1.0)*px))+(((-1.0)*sj2*x3144))+(((-1.0)*cj2*x3141)));
evalcond[1]=((((-1.0)*x3144))+((sj2*x3141))+(((-1.0)*py))+(((-1.0)*cj2*x3144)));
evalcond[2]=(x3145+((sj4*x3137))+(((-1.0)*r01*x3142))+(((-1.0)*sj2*x3143))+((cj4*r02)));
evalcond[3]=((((-1.0)*x3145))+(((-1.0)*x3138*x3139))+((r11*x3140))+((r12*sj4))+((sj2*x3135)));
evalcond[4]=((((-1.0)*x3148))+(((-1.0)*r11*x3142))+((sj4*x3139))+((cj4*r12)));
evalcond[5]=((((-1.0)*x3148))+((r01*x3140))+((r02*sj4))+(((-1.0)*x3137*x3138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3149=((12500000.0)*px);
IkReal x3150=((5453.0)*cj2);
IkReal x3151=((5453.0)*cj4*r02);
IkReal x3152=(r01*sj4*sj5);
IkReal x3153=((5453.0)*cj5*r00*sj4);
CheckValue<IkReal> x3154=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((-1.0)*x3150)))),-1);
if(!x3154.valid){
continue;
}
CheckValue<IkReal> x3155 = IKatan2WithCheck(IkReal((x3153+x3151+((cj5*r00*sj4*x3150))+((sj2*x3149))+(((-1.0)*x3150*x3152))+((cj4*r02*x3150))+(((-5453.0)*x3152)))),IkReal(((((5453.0)*sj2*x3152))+((cj2*x3149))+(((-1.0)*sj2*x3153))+(((-1.0)*sj2*x3151)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3155.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3154.value)))+(x3155.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x3156=IKcos(j0);
IkReal x3157=IKsin(j0);
IkReal x3158=(cj5*r00);
IkReal x3159=((1.0)*cj4);
IkReal x3160=(cj5*r10);
IkReal x3161=(cj4*sj5);
IkReal x3162=((0.00043624)*x3156);
IkReal x3163=((1.0)*sj4*sj5);
IkReal x3164=((1.0)*x3156);
IkReal x3165=((0.00043624)*x3157);
IkReal x3166=(cj2*x3157);
IkReal x3167=(cj2*x3164);
IkReal x3168=((1.0)*sj2*x3157);
IkReal x3169=(x3168+x3167);
evalcond[0]=((((-1.0)*px))+(((-1.0)*sj2*x3165))+(((-1.0)*cj2*x3162))+(((-1.0)*x3162)));
evalcond[1]=(((sj2*x3162))+(((-1.0)*py))+(((-1.0)*cj2*x3165))+(((-1.0)*x3165)));
evalcond[2]=(x3166+((sj4*x3158))+(((-1.0)*sj2*x3164))+(((-1.0)*r01*x3163))+((cj4*r02)));
evalcond[3]=(((sj2*x3156))+((r11*x3161))+(((-1.0)*x3166))+((r12*sj4))+(((-1.0)*x3159*x3160)));
evalcond[4]=(((sj4*x3160))+(((-1.0)*r11*x3163))+((cj4*r12))+(((-1.0)*x3169)));
evalcond[5]=((((-1.0)*x3158*x3159))+((r02*sj4))+((r01*x3161))+(((-1.0)*x3169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3170=((68162500000.0)*py);
IkReal x3171=((68162500000.0)*px);
CheckValue<IkReal> x3172 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x3171))+(((-1.0)*x3170))+(((-1.0)*cj2*x3170)))),IkReal(((((-1.0)*x3171))+((sj2*x3170))+(((-1.0)*cj2*x3171)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3172.valid){
continue;
}
CheckValue<IkReal> x3173=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((59470418.0)*cj2)))),-1);
if(!x3173.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3172.value)+(((1.5707963267949)*(x3173.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x3174=IKcos(j0);
IkReal x3175=IKsin(j0);
IkReal x3176=(cj5*r00);
IkReal x3177=((1.0)*cj4);
IkReal x3178=(cj5*r10);
IkReal x3179=(cj4*sj5);
IkReal x3180=((0.00043624)*x3174);
IkReal x3181=((1.0)*sj4*sj5);
IkReal x3182=((1.0)*x3174);
IkReal x3183=((0.00043624)*x3175);
IkReal x3184=(cj2*x3175);
IkReal x3185=(cj2*x3182);
IkReal x3186=((1.0)*sj2*x3175);
IkReal x3187=(x3185+x3186);
evalcond[0]=((((-1.0)*cj2*x3180))+(((-1.0)*px))+(((-1.0)*sj2*x3183))+(((-1.0)*x3180)));
evalcond[1]=((((-1.0)*cj2*x3183))+(((-1.0)*py))+((sj2*x3180))+(((-1.0)*x3183)));
evalcond[2]=(x3184+(((-1.0)*r01*x3181))+(((-1.0)*sj2*x3182))+((sj4*x3176))+((cj4*r02)));
evalcond[3]=(((r11*x3179))+((sj2*x3174))+(((-1.0)*x3177*x3178))+((r12*sj4))+(((-1.0)*x3184)));
evalcond[4]=((((-1.0)*r11*x3181))+((sj4*x3178))+(((-1.0)*x3187))+((cj4*r12)));
evalcond[5]=(((r02*sj4))+(((-1.0)*x3176*x3177))+((r01*x3179))+(((-1.0)*x3187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3188=((68162500000.0)*py);
IkReal x3189=((68162500000.0)*px);
CheckValue<IkReal> x3190 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x3188))+(((-1.0)*sj2*x3189))+(((-1.0)*x3188)))),IkReal(((((-1.0)*cj2*x3189))+((sj2*x3188))+(((-1.0)*x3189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3190.valid){
continue;
}
CheckValue<IkReal> x3191=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((59470418.0)*cj2)))),-1);
if(!x3191.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3190.value)+(((1.5707963267949)*(x3191.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3192=IKcos(j0);
IkReal x3193=IKsin(j0);
IkReal x3194=((0.00043624)*x3192);
IkReal x3195=((0.00043624)*x3193);
evalcond[0]=((((-1.0)*cj2*x3194))+(((-1.0)*px))+(((-1.0)*sj2*x3195))+(((-1.0)*x3194)));
evalcond[1]=((((-1.0)*cj2*x3195))+(((-1.0)*py))+((sj2*x3194))+(((-1.0)*x3195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x3196=(cj2*sj0);
IkReal x3197=(r21*sj5);
IkReal x3198=(cj5*r20);
IkReal x3199=((1.0)*cj0*sj2);
IkReal x3200=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3200;
j4eval[1]=IKsign(x3200);
j4eval[2]=((IKabs(((((-1.0)*r22*x3199))+((r22*x3196)))))+(IKabs((((cj0*sj2*x3197))+(((-1.0)*x3198*x3199))+((x3196*x3198))+(((-1.0)*x3196*x3197))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x3201=((1.0)*cj5);
IkReal x3202=(r21*sj5);
IkReal x3203=(cj2*sj0);
IkReal x3204=(cj0*sj2);
IkReal x3205=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3201)));
j4eval[0]=x3205;
j4eval[1]=IKsign(x3205);
j4eval[2]=((IKabs(((((-1.0)*x3202*x3204))+((cj5*r20*x3204))+((x3202*x3203))+(((-1.0)*r20*x3201*x3203)))))+(IKabs(((((-1.0)*r22*x3204))+((r22*x3203))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x3206=cj5*cj5;
IkReal x3207=(r11*r21);
IkReal x3208=(cj0*sj2);
IkReal x3209=((1.0)*r22);
IkReal x3210=((1.0)*r20);
IkReal x3211=(cj2*sj0);
IkReal x3212=(r21*sj5);
IkReal x3213=(cj5*r20);
IkReal x3214=(((r11*sj5*x3213))+((cj5*r10*x3212))+((x3206*x3207))+(((-1.0)*x3207))+(((-1.0)*r12*x3209))+(((-1.0)*r10*x3206*x3210)));
j4eval[0]=x3214;
j4eval[1]=((IKabs((((r22*x3208))+(((-1.0)*x3209*x3211)))))+(IKabs((((x3211*x3213))+((x3208*x3212))+(((-1.0)*cj5*x3208*x3210))+(((-1.0)*x3211*x3212))))));
j4eval[2]=IKsign(x3214);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3215=cj5*cj5;
IkReal x3216=(r11*r21);
IkReal x3217=(cj0*sj2);
IkReal x3218=((1.0)*r22);
IkReal x3219=(r21*sj5);
IkReal x3220=(cj2*sj0);
IkReal x3221=(cj5*r20);
CheckValue<IkReal> x3222 = IKatan2WithCheck(IkReal((((r22*x3217))+(((-1.0)*x3218*x3220)))),IkReal(((((-1.0)*x3219*x3220))+(((-1.0)*x3217*x3221))+((x3220*x3221))+((x3217*x3219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3222.valid){
continue;
}
CheckValue<IkReal> x3223=IKPowWithIntegerCheck(IKsign((((cj5*r10*x3219))+((x3215*x3216))+(((-1.0)*x3216))+(((-1.0)*r10*r20*x3215))+(((-1.0)*r12*x3218))+((r11*sj5*x3221)))),-1);
if(!x3223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3222.value)+(((1.5707963267949)*(x3223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3224=IKsin(j4);
IkReal x3225=IKcos(j4);
IkReal x3226=(cj5*r00);
IkReal x3227=((1.0)*cj0);
IkReal x3228=((1.0)*sj0);
IkReal x3229=(cj2*x3227);
IkReal x3230=(sj2*x3228);
IkReal x3231=((1.0)*x3225);
IkReal x3232=(sj5*x3225);
IkReal x3233=(cj5*x3224);
IkReal x3234=((1.0)*sj5*x3224);
IkReal x3235=(x3230+x3229);
evalcond[0]=(((r20*x3233))+(((-1.0)*r21*x3234))+((r22*x3225)));
evalcond[1]=((((-1.0)*cj5*r20*x3231))+((r22*x3224))+((r21*x3232)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*sj2*x3227))+((r02*x3225))+(((-1.0)*r01*x3234))+((x3224*x3226)));
evalcond[3]=(((r12*x3224))+(((-1.0)*cj2*x3228))+((r11*x3232))+((cj0*sj2))+(((-1.0)*cj5*r10*x3231)));
evalcond[4]=(((r12*x3225))+(((-1.0)*r11*x3234))+(((-1.0)*x3235))+((r10*x3233)));
evalcond[5]=(((r02*x3224))+((r01*x3232))+(((-1.0)*x3226*x3231))+(((-1.0)*x3235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3236=((1.0)*cj5);
IkReal x3237=(r21*sj5);
IkReal x3238=(cj2*sj0);
IkReal x3239=(cj0*sj2);
CheckValue<IkReal> x3240=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3236)))),-1);
if(!x3240.valid){
continue;
}
CheckValue<IkReal> x3241 = IKatan2WithCheck(IkReal((((r22*x3238))+(((-1.0)*r22*x3239)))),IkReal(((((-1.0)*r20*x3236*x3238))+(((-1.0)*x3237*x3239))+((x3237*x3238))+((cj5*r20*x3239)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3240.value)))+(x3241.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3242=IKsin(j4);
IkReal x3243=IKcos(j4);
IkReal x3244=(cj5*r00);
IkReal x3245=((1.0)*cj0);
IkReal x3246=((1.0)*sj0);
IkReal x3247=(cj2*x3245);
IkReal x3248=(sj2*x3246);
IkReal x3249=((1.0)*x3243);
IkReal x3250=(sj5*x3243);
IkReal x3251=(cj5*x3242);
IkReal x3252=((1.0)*sj5*x3242);
IkReal x3253=(x3248+x3247);
evalcond[0]=(((r22*x3243))+(((-1.0)*r21*x3252))+((r20*x3251)));
evalcond[1]=(((r22*x3242))+(((-1.0)*cj5*r20*x3249))+((r21*x3250)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*sj2*x3245))+((r02*x3243))+((x3242*x3244))+(((-1.0)*r01*x3252)));
evalcond[3]=((((-1.0)*cj5*r10*x3249))+((r11*x3250))+(((-1.0)*cj2*x3246))+((r12*x3242))+((cj0*sj2)));
evalcond[4]=(((r10*x3251))+((r12*x3243))+(((-1.0)*r11*x3252))+(((-1.0)*x3253)));
evalcond[5]=((((-1.0)*x3244*x3249))+((r01*x3250))+((r02*x3242))+(((-1.0)*x3253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3254=(cj2*sj0);
IkReal x3255=(r21*sj5);
IkReal x3256=(cj5*r20);
IkReal x3257=((1.0)*cj0*sj2);
CheckValue<IkReal> x3258=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3258.valid){
continue;
}
CheckValue<IkReal> x3259 = IKatan2WithCheck(IkReal((((cj0*sj2*x3255))+(((-1.0)*x3256*x3257))+(((-1.0)*x3254*x3255))+((x3254*x3256)))),IkReal(((((-1.0)*r22*x3257))+((r22*x3254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3258.value)))+(x3259.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3260=IKsin(j4);
IkReal x3261=IKcos(j4);
IkReal x3262=(cj5*r00);
IkReal x3263=((1.0)*cj0);
IkReal x3264=((1.0)*sj0);
IkReal x3265=(cj2*x3263);
IkReal x3266=(sj2*x3264);
IkReal x3267=((1.0)*x3261);
IkReal x3268=(sj5*x3261);
IkReal x3269=(cj5*x3260);
IkReal x3270=((1.0)*sj5*x3260);
IkReal x3271=(x3265+x3266);
evalcond[0]=(((r20*x3269))+(((-1.0)*r21*x3270))+((r22*x3261)));
evalcond[1]=(((r21*x3268))+(((-1.0)*cj5*r20*x3267))+((r22*x3260)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*sj2*x3263))+(((-1.0)*r01*x3270))+((r02*x3261))+((x3260*x3262)));
evalcond[3]=((((-1.0)*cj5*r10*x3267))+(((-1.0)*cj2*x3264))+((r11*x3268))+((r12*x3260))+((cj0*sj2)));
evalcond[4]=((((-1.0)*r11*x3270))+(((-1.0)*x3271))+((r12*x3261))+((r10*x3269)));
evalcond[5]=(((r01*x3268))+(((-1.0)*x3271))+((r02*x3260))+(((-1.0)*x3262*x3267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3272=(r00*sj5);
IkReal x3273=((5000000.0)*sj1);
IkReal x3274=(cj5*r01);
IkReal x3275=((5453.0)*sj2);
IkReal x3276=((5453.0)*sj1);
CheckValue<IkReal> x3277=IKPowWithIntegerCheck(((5250000.0)+(((-1.0)*x3276))+((cj1*cj2*x3276))+(((-5250000.0)*(cj1*cj1)))),-1);
if(!x3277.valid){
continue;
}
CheckValue<IkReal> x3278=IKPowWithIntegerCheck(sj1,-1);
if(!x3278.valid){
continue;
}
if( IKabs(((x3277.value)*((((r10*sj5*x3273))+((x3272*x3275))+((x3274*x3275))+(((12500000.0)*py*sj1))+((cj5*r11*x3273)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3278.value)*(((((-1.0)*x3274))+(((-1.0)*x3272)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3277.value)*((((r10*sj5*x3273))+((x3272*x3275))+((x3274*x3275))+(((12500000.0)*py*sj1))+((cj5*r11*x3273))))))+IKsqr(((x3278.value)*(((((-1.0)*x3274))+(((-1.0)*x3272))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3277.value)*((((r10*sj5*x3273))+((x3272*x3275))+((x3274*x3275))+(((12500000.0)*py*sj1))+((cj5*r11*x3273))))), ((x3278.value)*(((((-1.0)*x3274))+(((-1.0)*x3272))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3279=IKcos(j0);
IkReal x3280=IKsin(j0);
IkReal x3281=(r00*sj5);
IkReal x3282=(r10*sj5);
IkReal x3283=(cj5*r11);
IkReal x3284=(cj5*r01);
IkReal x3285=(cj1*cj2);
IkReal x3286=((0.00043624)*x3279);
IkReal x3287=((0.00043624)*x3280);
IkReal x3288=(sj1*x3279);
IkReal x3289=(sj1*x3280);
evalcond[0]=(x3288+x3284+x3281);
evalcond[1]=(x3289+x3283+x3282);
evalcond[2]=(((x3285*x3286))+(((-1.0)*sj2*x3287))+(((-1.0)*x3286))+(((0.42)*x3288))+(((-1.0)*px))+(((-0.4)*x3281))+(((-0.4)*x3284)));
evalcond[3]=(((x3285*x3287))+((sj2*x3286))+(((-1.0)*x3287))+(((0.42)*x3289))+(((-1.0)*py))+(((-0.4)*x3282))+(((-0.4)*x3283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x3290=((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)));
j4eval[0]=x3290;
j4eval[1]=IKsign(x3290);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x3291=cj5*cj5;
IkReal x3292=r21*r21;
IkReal x3293=((1.0)*sj1);
IkReal x3294=(cj5*r20);
IkReal x3295=(r21*sj5);
IkReal x3296=(r22*sj1);
IkReal x3297=((((-1.0)*x3291*x3292))+(r22*r22)+x3292+(((-2.0)*x3294*x3295))+((x3291*(r20*r20))));
j4eval[0]=x3297;
j4eval[1]=IKsign(x3297);
j4eval[2]=((IKabs((((sj1*sj2*x3294))+((cj2*x3296))+(((-1.0)*sj2*x3293*x3295)))))+(IKabs((((sj2*x3296))+(((-1.0)*cj2*x3293*x3294))+((cj2*sj1*x3295))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x3298=cj5*cj5;
IkReal x3299=(r11*r21);
IkReal x3300=(cj5*sj5);
IkReal x3301=(((r10*r21*x3300))+((r11*r20*x3300))+(((-1.0)*r12*r22))+((x3298*x3299))+(((-1.0)*r10*r20*x3298))+(((-1.0)*x3299)));
j4eval[0]=x3301;
j4eval[1]=IKsign(x3301);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
IkReal x3302=((1.0)*cj5);
IkReal x3303=(cj0*sj2);
IkReal x3304=(cj2*sj0);
IkReal x3305=(r21*sj5);
IkReal x3306=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3302)));
j4eval[0]=x3306;
j4eval[1]=IKsign(x3306);
j4eval[2]=((IKabs((((r22*x3304))+((r22*x3303)))))+(IKabs((((x3303*x3305))+((x3304*x3305))+(((-1.0)*r20*x3302*x3304))+(((-1.0)*r20*x3302*x3303))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
IkReal x3307=(cj2*sj0);
IkReal x3308=(r21*sj5);
IkReal x3309=(cj0*sj2);
IkReal x3310=((1.0)*r22);
IkReal x3311=((1.0)*cj5*r20);
IkReal x3312=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3312;
j4eval[1]=IKsign(x3312);
j4eval[2]=((IKabs(((((-1.0)*x3309*x3311))+((x3307*x3308))+(((-1.0)*x3307*x3311))+((x3308*x3309)))))+(IKabs(((((-1.0)*x3309*x3310))+(((-1.0)*x3307*x3310))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
IkReal x3313=cj5*cj5;
IkReal x3314=(r11*r21);
IkReal x3315=(cj0*sj2);
IkReal x3316=((1.0)*r20);
IkReal x3317=(cj2*sj0);
IkReal x3318=(r21*sj5);
IkReal x3319=((((-1.0)*r10*x3313*x3316))+(((-1.0)*r12*r22))+((x3313*x3314))+((cj5*r10*x3318))+(((-1.0)*x3314))+((cj5*r11*r20*sj5)));
j4eval[0]=x3319;
j4eval[1]=((IKabs((((x3317*x3318))+((x3315*x3318))+(((-1.0)*cj5*x3315*x3316))+(((-1.0)*cj5*x3316*x3317)))))+(IKabs((((r22*x3315))+((r22*x3317))))));
j4eval[2]=IKsign(x3319);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=0;
sj2=0;
cj2=1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x3320=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3320;
j4eval[1]=IKsign(x3320);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=0;
sj2=0;
cj2=1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x3321=((1.0)*cj5);
IkReal x3322=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3321)));
j4eval[0]=x3322;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3321)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3322);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=0;
sj2=0;
cj2=1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x3323=cj5*cj5;
IkReal x3324=(r21*sj5);
IkReal x3325=((1.0)*r20);
IkReal x3326=(r01*r21);
IkReal x3327=(((cj5*r01*r20*sj5))+(((-1.0)*x3326))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3323*x3325))+((cj5*r00*x3324))+((x3323*x3326)));
j4eval[0]=x3327;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x3325))+x3324))));
j4eval[2]=IKsign(x3327);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3328=cj5*cj5;
IkReal x3329=((1.0)*r20);
IkReal x3330=(r21*sj5);
IkReal x3331=(r01*r21);
CheckValue<IkReal> x3332=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3330))+((x3328*x3331))+(((-1.0)*x3331))+(((-1.0)*r00*x3328*x3329)))),-1);
if(!x3332.valid){
continue;
}
CheckValue<IkReal> x3333 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*x3329))+x3330)),IKFAST_ATAN2_MAGTHRESH);
if(!x3333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3332.value)))+(x3333.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3334=IKsin(j4);
IkReal x3335=IKcos(j4);
IkReal x3336=(cj5*r00);
IkReal x3337=(cj5*r20);
IkReal x3338=(cj5*r10);
IkReal x3339=((1.0)*x3335);
IkReal x3340=(sj5*x3335);
IkReal x3341=((1.0)*sj5*x3334);
evalcond[0]=(((x3334*x3337))+(((-1.0)*r21*x3341))+((r22*x3335)));
evalcond[1]=(((x3334*x3336))+((r02*x3335))+(((-1.0)*r01*x3341)));
evalcond[2]=((((-1.0)*x3337*x3339))+((r21*x3340))+((r22*x3334)));
evalcond[3]=((((-1.0)*x3338*x3339))+((r12*x3334))+((r11*x3340)));
evalcond[4]=((-1.0)+((x3334*x3338))+((r12*x3335))+(((-1.0)*r11*x3341)));
evalcond[5]=((1.0)+((r02*x3334))+(((-1.0)*x3336*x3339))+((r01*x3340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3342=((1.0)*cj5);
CheckValue<IkReal> x3343 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3343.valid){
continue;
}
CheckValue<IkReal> x3344=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3342)))),-1);
if(!x3344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3343.value)+(((1.5707963267949)*(x3344.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3345=IKsin(j4);
IkReal x3346=IKcos(j4);
IkReal x3347=(cj5*r00);
IkReal x3348=(cj5*r20);
IkReal x3349=(cj5*r10);
IkReal x3350=((1.0)*x3346);
IkReal x3351=(sj5*x3346);
IkReal x3352=((1.0)*sj5*x3345);
evalcond[0]=(((r22*x3346))+(((-1.0)*r21*x3352))+((x3345*x3348)));
evalcond[1]=(((r02*x3346))+((x3345*x3347))+(((-1.0)*r01*x3352)));
evalcond[2]=((((-1.0)*x3348*x3350))+((r22*x3345))+((r21*x3351)));
evalcond[3]=(((r11*x3351))+(((-1.0)*x3349*x3350))+((r12*x3345)));
evalcond[4]=((-1.0)+((x3345*x3349))+(((-1.0)*r11*x3352))+((r12*x3346)));
evalcond[5]=((1.0)+((r01*x3351))+((r02*x3345))+(((-1.0)*x3347*x3350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3353=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3353.valid){
continue;
}
CheckValue<IkReal> x3354 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3353.value)))+(x3354.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3355=IKsin(j4);
IkReal x3356=IKcos(j4);
IkReal x3357=(cj5*r00);
IkReal x3358=(cj5*r20);
IkReal x3359=(cj5*r10);
IkReal x3360=((1.0)*x3356);
IkReal x3361=(sj5*x3356);
IkReal x3362=((1.0)*sj5*x3355);
evalcond[0]=((((-1.0)*r21*x3362))+((x3355*x3358))+((r22*x3356)));
evalcond[1]=((((-1.0)*r01*x3362))+((x3355*x3357))+((r02*x3356)));
evalcond[2]=(((r21*x3361))+((r22*x3355))+(((-1.0)*x3358*x3360)));
evalcond[3]=((((-1.0)*x3359*x3360))+((r12*x3355))+((r11*x3361)));
evalcond[4]=((-1.0)+((r12*x3356))+((x3355*x3359))+(((-1.0)*r11*x3362)));
evalcond[5]=((1.0)+(((-1.0)*x3357*x3360))+((r01*x3361))+((r02*x3355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=0;
sj2=0;
cj2=1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x3363=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3363;
j4eval[1]=IKsign(x3363);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=0;
sj2=0;
cj2=1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x3364=((1.0)*cj5);
IkReal x3365=((((-1.0)*r21*x3364))+(((-1.0)*r20*sj5)));
j4eval[0]=x3365;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3364))))));
j4eval[2]=IKsign(x3365);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=0;
sj2=0;
cj2=1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x3366=cj5*cj5;
IkReal x3367=r01*r01;
IkReal x3368=(cj5*r00);
IkReal x3369=(r01*sj5);
IkReal x3370=((((-1.0)*x3366*x3367))+x3367+((x3366*(r00*r00)))+(r02*r02)+(((-2.0)*x3368*x3369)));
j4eval[0]=x3370;
j4eval[1]=IKsign(x3370);
j4eval[2]=((IKabs(r02))+(IKabs((x3369+(((-1.0)*x3368))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3371=cj5*cj5;
IkReal x3372=r01*r01;
IkReal x3373=(r01*sj5);
IkReal x3374=(cj5*r00);
CheckValue<IkReal> x3375=IKPowWithIntegerCheck(IKsign((x3372+(((-2.0)*x3373*x3374))+(r02*r02)+(((-1.0)*x3371*x3372))+((x3371*(r00*r00))))),-1);
if(!x3375.valid){
continue;
}
CheckValue<IkReal> x3376 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x3374))+x3373)),IKFAST_ATAN2_MAGTHRESH);
if(!x3376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3375.value)))+(x3376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3377=IKsin(j4);
IkReal x3378=IKcos(j4);
IkReal x3379=(cj5*r00);
IkReal x3380=(cj5*r20);
IkReal x3381=(cj5*r10);
IkReal x3382=((1.0)*x3378);
IkReal x3383=(sj5*x3378);
IkReal x3384=((1.0)*sj5*x3377);
evalcond[0]=(((r22*x3378))+(((-1.0)*r21*x3384))+((x3377*x3380)));
evalcond[1]=(((x3377*x3379))+((r02*x3378))+(((-1.0)*r01*x3384)));
evalcond[2]=(((r22*x3377))+(((-1.0)*x3380*x3382))+((r21*x3383)));
evalcond[3]=(((r12*x3377))+(((-1.0)*x3381*x3382))+((r11*x3383)));
evalcond[4]=((1.0)+((r12*x3378))+((x3377*x3381))+(((-1.0)*r11*x3384)));
evalcond[5]=((-1.0)+((r01*x3383))+((r02*x3377))+(((-1.0)*x3379*x3382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3385=((1.0)*cj5);
CheckValue<IkReal> x3386 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3385)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3386.valid){
continue;
}
CheckValue<IkReal> x3387=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3385))+(((-1.0)*r20*sj5)))),-1);
if(!x3387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3386.value)+(((1.5707963267949)*(x3387.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3388=IKsin(j4);
IkReal x3389=IKcos(j4);
IkReal x3390=(cj5*r00);
IkReal x3391=(cj5*r20);
IkReal x3392=(cj5*r10);
IkReal x3393=((1.0)*x3389);
IkReal x3394=(sj5*x3389);
IkReal x3395=((1.0)*sj5*x3388);
evalcond[0]=(((x3388*x3391))+((r22*x3389))+(((-1.0)*r21*x3395)));
evalcond[1]=((((-1.0)*r01*x3395))+((x3388*x3390))+((r02*x3389)));
evalcond[2]=(((r21*x3394))+((r22*x3388))+(((-1.0)*x3391*x3393)));
evalcond[3]=((((-1.0)*x3392*x3393))+((r11*x3394))+((r12*x3388)));
evalcond[4]=((1.0)+((x3388*x3392))+((r12*x3389))+(((-1.0)*r11*x3395)));
evalcond[5]=((-1.0)+((r01*x3394))+((r02*x3388))+(((-1.0)*x3390*x3393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3396 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3396.valid){
continue;
}
CheckValue<IkReal> x3397=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3396.value)+(((1.5707963267949)*(x3397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3398=IKsin(j4);
IkReal x3399=IKcos(j4);
IkReal x3400=(cj5*r00);
IkReal x3401=(cj5*r20);
IkReal x3402=(cj5*r10);
IkReal x3403=((1.0)*x3399);
IkReal x3404=(sj5*x3399);
IkReal x3405=((1.0)*sj5*x3398);
evalcond[0]=((((-1.0)*r21*x3405))+((x3398*x3401))+((r22*x3399)));
evalcond[1]=((((-1.0)*r01*x3405))+((x3398*x3400))+((r02*x3399)));
evalcond[2]=((((-1.0)*x3401*x3403))+((r21*x3404))+((r22*x3398)));
evalcond[3]=(((r11*x3404))+(((-1.0)*x3402*x3403))+((r12*x3398)));
evalcond[4]=((1.0)+((x3398*x3402))+(((-1.0)*r11*x3405))+((r12*x3399)));
evalcond[5]=((-1.0)+(((-1.0)*x3400*x3403))+((r02*x3398))+((r01*x3404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x3406=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3406;
j4eval[1]=IKsign(x3406);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x3407=((1.0)*cj5);
IkReal x3408=((((-1.0)*r21*x3407))+(((-1.0)*r20*sj5)));
j4eval[0]=x3408;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x3407))+((r01*sj5))))));
j4eval[2]=IKsign(x3408);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x3409=cj5*cj5;
IkReal x3410=r01*r01;
IkReal x3411=(cj5*r00);
IkReal x3412=(r01*sj5);
IkReal x3413=((((-1.0)*x3409*x3410))+x3410+((x3409*(r00*r00)))+(r02*r02)+(((-2.0)*x3411*x3412)));
j4eval[0]=x3413;
j4eval[1]=IKsign(x3413);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x3411))+x3412))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3414=cj5*cj5;
IkReal x3415=r01*r01;
IkReal x3416=(r01*sj5);
IkReal x3417=(cj5*r00);
CheckValue<IkReal> x3418=IKPowWithIntegerCheck(IKsign((x3415+((x3414*(r00*r00)))+(((-2.0)*x3416*x3417))+(((-1.0)*x3414*x3415))+(r02*r02))),-1);
if(!x3418.valid){
continue;
}
CheckValue<IkReal> x3419 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x3417))+x3416)),IKFAST_ATAN2_MAGTHRESH);
if(!x3419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3418.value)))+(x3419.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3420=IKsin(j4);
IkReal x3421=IKcos(j4);
IkReal x3422=(cj5*r00);
IkReal x3423=(cj5*r20);
IkReal x3424=(cj5*r10);
IkReal x3425=((1.0)*x3421);
IkReal x3426=(sj5*x3421);
IkReal x3427=((1.0)*sj5*x3420);
evalcond[0]=(((x3420*x3423))+(((-1.0)*r21*x3427))+((r22*x3421)));
evalcond[1]=(((x3420*x3422))+(((-1.0)*r01*x3427))+((r02*x3421)));
evalcond[2]=(((r21*x3426))+(((-1.0)*x3423*x3425))+((r22*x3420)));
evalcond[3]=((((-1.0)*x3424*x3425))+((r12*x3420))+((r11*x3426)));
evalcond[4]=((1.0)+(((-1.0)*r11*x3427))+((x3420*x3424))+((r12*x3421)));
evalcond[5]=((-1.0)+(((-1.0)*x3422*x3425))+((r02*x3420))+((r01*x3426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3428=((1.0)*cj5);
CheckValue<IkReal> x3429=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3428))+(((-1.0)*r20*sj5)))),-1);
if(!x3429.valid){
continue;
}
CheckValue<IkReal> x3430 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3429.value)))+(x3430.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3431=IKsin(j4);
IkReal x3432=IKcos(j4);
IkReal x3433=(cj5*r00);
IkReal x3434=(cj5*r20);
IkReal x3435=(cj5*r10);
IkReal x3436=((1.0)*x3432);
IkReal x3437=(sj5*x3432);
IkReal x3438=((1.0)*sj5*x3431);
evalcond[0]=(((r22*x3432))+((x3431*x3434))+(((-1.0)*r21*x3438)));
evalcond[1]=((((-1.0)*r01*x3438))+((x3431*x3433))+((r02*x3432)));
evalcond[2]=((((-1.0)*x3434*x3436))+((r21*x3437))+((r22*x3431)));
evalcond[3]=((((-1.0)*x3435*x3436))+((r12*x3431))+((r11*x3437)));
evalcond[4]=((1.0)+(((-1.0)*r11*x3438))+((r12*x3432))+((x3431*x3435)));
evalcond[5]=((-1.0)+((r01*x3437))+(((-1.0)*x3433*x3436))+((r02*x3431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3439 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3439.valid){
continue;
}
CheckValue<IkReal> x3440=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3439.value)+(((1.5707963267949)*(x3440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3441=IKsin(j4);
IkReal x3442=IKcos(j4);
IkReal x3443=(cj5*r00);
IkReal x3444=(cj5*r20);
IkReal x3445=(cj5*r10);
IkReal x3446=((1.0)*x3442);
IkReal x3447=(sj5*x3442);
IkReal x3448=((1.0)*sj5*x3441);
evalcond[0]=(((r22*x3442))+(((-1.0)*r21*x3448))+((x3441*x3444)));
evalcond[1]=(((r02*x3442))+((x3441*x3443))+(((-1.0)*r01*x3448)));
evalcond[2]=(((r21*x3447))+((r22*x3441))+(((-1.0)*x3444*x3446)));
evalcond[3]=(((r11*x3447))+((r12*x3441))+(((-1.0)*x3445*x3446)));
evalcond[4]=((1.0)+((r12*x3442))+(((-1.0)*r11*x3448))+((x3441*x3445)));
evalcond[5]=((-1.0)+((r02*x3441))+(((-1.0)*x3443*x3446))+((r01*x3447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x3449=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3449;
j4eval[1]=IKsign(x3449);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x3450=((1.0)*cj5);
IkReal x3451=((((-1.0)*r01*x3450))+(((-1.0)*r00*sj5)));
j4eval[0]=x3451;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3450))))));
j4eval[2]=IKsign(x3451);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x3452=cj5*cj5;
IkReal x3453=(r21*sj5);
IkReal x3454=((1.0)*r20);
IkReal x3455=(r01*r21);
IkReal x3456=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3452*x3454))+(((-1.0)*x3455))+((cj5*r00*x3453))+((x3452*x3455)));
j4eval[0]=x3456;
j4eval[1]=((IKabs((x3453+(((-1.0)*cj5*x3454)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3456);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3457=cj5*cj5;
IkReal x3458=((1.0)*r20);
IkReal x3459=(r21*sj5);
IkReal x3460=(r01*r21);
CheckValue<IkReal> x3461 = IKatan2WithCheck(IkReal(r22),IkReal((x3459+(((-1.0)*cj5*x3458)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3461.valid){
continue;
}
CheckValue<IkReal> x3462=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3457*x3458))+((x3457*x3460))+(((-1.0)*x3460))+((cj5*r00*x3459)))),-1);
if(!x3462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3461.value)+(((1.5707963267949)*(x3462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3463=IKsin(j4);
IkReal x3464=IKcos(j4);
IkReal x3465=(cj5*r00);
IkReal x3466=(cj5*r20);
IkReal x3467=(cj5*r10);
IkReal x3468=((1.0)*x3464);
IkReal x3469=(sj5*x3464);
IkReal x3470=((1.0)*sj5*x3463);
evalcond[0]=((((-1.0)*r21*x3470))+((x3463*x3466))+((r22*x3464)));
evalcond[1]=(((x3463*x3465))+((r02*x3464))+(((-1.0)*r01*x3470)));
evalcond[2]=(((r21*x3469))+((r22*x3463))+(((-1.0)*x3466*x3468)));
evalcond[3]=((((-1.0)*x3467*x3468))+((r12*x3463))+((r11*x3469)));
evalcond[4]=((-1.0)+((x3463*x3467))+((r12*x3464))+(((-1.0)*r11*x3470)));
evalcond[5]=((1.0)+(((-1.0)*x3465*x3468))+((r01*x3469))+((r02*x3463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3471=((1.0)*cj5);
CheckValue<IkReal> x3472 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3471))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3472.valid){
continue;
}
CheckValue<IkReal> x3473=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3471)))),-1);
if(!x3473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3472.value)+(((1.5707963267949)*(x3473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3474=IKsin(j4);
IkReal x3475=IKcos(j4);
IkReal x3476=(cj5*r00);
IkReal x3477=(cj5*r20);
IkReal x3478=(cj5*r10);
IkReal x3479=((1.0)*x3475);
IkReal x3480=(sj5*x3475);
IkReal x3481=((1.0)*sj5*x3474);
evalcond[0]=((((-1.0)*r21*x3481))+((x3474*x3477))+((r22*x3475)));
evalcond[1]=((((-1.0)*r01*x3481))+((x3474*x3476))+((r02*x3475)));
evalcond[2]=(((r21*x3480))+(((-1.0)*x3477*x3479))+((r22*x3474)));
evalcond[3]=(((r12*x3474))+((r11*x3480))+(((-1.0)*x3478*x3479)));
evalcond[4]=((-1.0)+((x3474*x3478))+((r12*x3475))+(((-1.0)*r11*x3481)));
evalcond[5]=((1.0)+((r01*x3480))+((r02*x3474))+(((-1.0)*x3476*x3479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3482=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3482.valid){
continue;
}
CheckValue<IkReal> x3483 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3482.value)))+(x3483.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3484=IKsin(j4);
IkReal x3485=IKcos(j4);
IkReal x3486=(cj5*r00);
IkReal x3487=(cj5*r20);
IkReal x3488=(cj5*r10);
IkReal x3489=((1.0)*x3485);
IkReal x3490=(sj5*x3485);
IkReal x3491=((1.0)*sj5*x3484);
evalcond[0]=(((x3484*x3487))+((r22*x3485))+(((-1.0)*r21*x3491)));
evalcond[1]=(((x3484*x3486))+(((-1.0)*r01*x3491))+((r02*x3485)));
evalcond[2]=((((-1.0)*x3487*x3489))+((r21*x3490))+((r22*x3484)));
evalcond[3]=(((r12*x3484))+((r11*x3490))+(((-1.0)*x3488*x3489)));
evalcond[4]=((-1.0)+((x3484*x3488))+((r12*x3485))+(((-1.0)*r11*x3491)));
evalcond[5]=((1.0)+((r01*x3490))+((r02*x3484))+(((-1.0)*x3486*x3489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x3492=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3492;
j4eval[1]=IKsign(x3492);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x3493=((1.0)*cj5);
IkReal x3494=((((-1.0)*r21*x3493))+(((-1.0)*r20*sj5)));
j4eval[0]=x3494;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3493))))));
j4eval[2]=IKsign(x3494);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x3495=cj5*cj5;
IkReal x3496=r01*r01;
IkReal x3497=(cj5*r00);
IkReal x3498=(r01*sj5);
IkReal x3499=((((-1.0)*x3495*x3496))+(((-2.0)*x3497*x3498))+((x3495*(r00*r00)))+x3496+(r02*r02));
j4eval[0]=x3499;
j4eval[1]=IKsign(x3499);
j4eval[2]=((IKabs(r02))+(IKabs((x3498+(((-1.0)*x3497))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3500=cj5*cj5;
IkReal x3501=r01*r01;
IkReal x3502=(r01*sj5);
IkReal x3503=(cj5*r00);
CheckValue<IkReal> x3504=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3500*x3501))+(((-2.0)*x3502*x3503))+x3501+((x3500*(r00*r00)))+(r02*r02))),-1);
if(!x3504.valid){
continue;
}
CheckValue<IkReal> x3505 = IKatan2WithCheck(IkReal(r02),IkReal((x3502+(((-1.0)*x3503)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3504.value)))+(x3505.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3506=IKsin(j4);
IkReal x3507=IKcos(j4);
IkReal x3508=(cj5*r00);
IkReal x3509=(cj5*r20);
IkReal x3510=(cj5*r10);
IkReal x3511=((1.0)*x3507);
IkReal x3512=(sj5*x3507);
IkReal x3513=((1.0)*sj5*x3506);
evalcond[0]=(((x3506*x3509))+((r22*x3507))+(((-1.0)*r21*x3513)));
evalcond[1]=(((x3506*x3508))+((r02*x3507))+(((-1.0)*r01*x3513)));
evalcond[2]=(((r21*x3512))+(((-1.0)*x3509*x3511))+((r22*x3506)));
evalcond[3]=((((-1.0)*x3510*x3511))+((r12*x3506))+((r11*x3512)));
evalcond[4]=((1.0)+((x3506*x3510))+((r12*x3507))+(((-1.0)*r11*x3513)));
evalcond[5]=((-1.0)+((r01*x3512))+(((-1.0)*x3508*x3511))+((r02*x3506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3514=((1.0)*cj5);
CheckValue<IkReal> x3515 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3514)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3515.valid){
continue;
}
CheckValue<IkReal> x3516=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3514))+(((-1.0)*r20*sj5)))),-1);
if(!x3516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3515.value)+(((1.5707963267949)*(x3516.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3517=IKsin(j4);
IkReal x3518=IKcos(j4);
IkReal x3519=(cj5*r00);
IkReal x3520=(cj5*r20);
IkReal x3521=(cj5*r10);
IkReal x3522=((1.0)*x3518);
IkReal x3523=(sj5*x3518);
IkReal x3524=((1.0)*sj5*x3517);
evalcond[0]=(((x3517*x3520))+((r22*x3518))+(((-1.0)*r21*x3524)));
evalcond[1]=(((x3517*x3519))+((r02*x3518))+(((-1.0)*r01*x3524)));
evalcond[2]=(((r21*x3523))+((r22*x3517))+(((-1.0)*x3520*x3522)));
evalcond[3]=(((r11*x3523))+(((-1.0)*x3521*x3522))+((r12*x3517)));
evalcond[4]=((1.0)+((x3517*x3521))+((r12*x3518))+(((-1.0)*r11*x3524)));
evalcond[5]=((-1.0)+(((-1.0)*x3519*x3522))+((r01*x3523))+((r02*x3517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3525 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3525.valid){
continue;
}
CheckValue<IkReal> x3526=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3525.value)+(((1.5707963267949)*(x3526.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3527=IKsin(j4);
IkReal x3528=IKcos(j4);
IkReal x3529=(cj5*r00);
IkReal x3530=(cj5*r20);
IkReal x3531=(cj5*r10);
IkReal x3532=((1.0)*x3528);
IkReal x3533=(sj5*x3528);
IkReal x3534=((1.0)*sj5*x3527);
evalcond[0]=((((-1.0)*r21*x3534))+((r22*x3528))+((x3527*x3530)));
evalcond[1]=(((x3527*x3529))+((r02*x3528))+(((-1.0)*r01*x3534)));
evalcond[2]=(((r21*x3533))+((r22*x3527))+(((-1.0)*x3530*x3532)));
evalcond[3]=(((r11*x3533))+(((-1.0)*x3531*x3532))+((r12*x3527)));
evalcond[4]=((1.0)+(((-1.0)*r11*x3534))+((r12*x3528))+((x3527*x3531)));
evalcond[5]=((-1.0)+((r02*x3527))+(((-1.0)*x3529*x3532))+((r01*x3533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x3535=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3535;
j4eval[1]=IKsign(x3535);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x3536=((1.0)*cj5);
IkReal x3537=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3536)));
j4eval[0]=x3537;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3536))))));
j4eval[2]=IKsign(x3537);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x3538=cj5*cj5;
IkReal x3539=(r21*sj5);
IkReal x3540=((1.0)*r20);
IkReal x3541=(r01*r21);
IkReal x3542=(((cj5*r01*r20*sj5))+((cj5*r00*x3539))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3538*x3540))+((x3538*x3541))+(((-1.0)*x3541)));
j4eval[0]=x3542;
j4eval[1]=((IKabs(r22))+(IKabs((x3539+(((-1.0)*cj5*x3540))))));
j4eval[2]=IKsign(x3542);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3543=cj5*cj5;
IkReal x3544=((1.0)*r20);
IkReal x3545=(r21*sj5);
IkReal x3546=(r01*r21);
CheckValue<IkReal> x3547=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3543*x3544))+((x3543*x3546))+(((-1.0)*x3546))+((cj5*r00*x3545)))),-1);
if(!x3547.valid){
continue;
}
CheckValue<IkReal> x3548 = IKatan2WithCheck(IkReal(r22),IkReal((x3545+(((-1.0)*cj5*x3544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3547.value)))+(x3548.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3549=IKsin(j4);
IkReal x3550=IKcos(j4);
IkReal x3551=(cj5*r00);
IkReal x3552=(cj5*r20);
IkReal x3553=(cj5*r10);
IkReal x3554=((1.0)*x3550);
IkReal x3555=(sj5*x3550);
IkReal x3556=((1.0)*sj5*x3549);
evalcond[0]=((((-1.0)*r21*x3556))+((r22*x3550))+((x3549*x3552)));
evalcond[1]=((((-1.0)*r01*x3556))+((x3549*x3551))+((r02*x3550)));
evalcond[2]=(((r21*x3555))+((r22*x3549))+(((-1.0)*x3552*x3554)));
evalcond[3]=(((r12*x3549))+(((-1.0)*x3553*x3554))+((r11*x3555)));
evalcond[4]=((-1.0)+((r12*x3550))+(((-1.0)*r11*x3556))+((x3549*x3553)));
evalcond[5]=((1.0)+((r02*x3549))+((r01*x3555))+(((-1.0)*x3551*x3554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3557=((1.0)*cj5);
CheckValue<IkReal> x3558=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3557))+(((-1.0)*r00*sj5)))),-1);
if(!x3558.valid){
continue;
}
CheckValue<IkReal> x3559 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3557))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3558.value)))+(x3559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3560=IKsin(j4);
IkReal x3561=IKcos(j4);
IkReal x3562=(cj5*r00);
IkReal x3563=(cj5*r20);
IkReal x3564=(cj5*r10);
IkReal x3565=((1.0)*x3561);
IkReal x3566=(sj5*x3561);
IkReal x3567=((1.0)*sj5*x3560);
evalcond[0]=((((-1.0)*r21*x3567))+((r22*x3561))+((x3560*x3563)));
evalcond[1]=((((-1.0)*r01*x3567))+((r02*x3561))+((x3560*x3562)));
evalcond[2]=(((r21*x3566))+(((-1.0)*x3563*x3565))+((r22*x3560)));
evalcond[3]=(((r11*x3566))+(((-1.0)*x3564*x3565))+((r12*x3560)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x3567))+((r12*x3561))+((x3560*x3564)));
evalcond[5]=((1.0)+((r01*x3566))+(((-1.0)*x3562*x3565))+((r02*x3560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3568=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3568.valid){
continue;
}
CheckValue<IkReal> x3569 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3568.value)))+(x3569.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3570=IKsin(j4);
IkReal x3571=IKcos(j4);
IkReal x3572=(cj5*r00);
IkReal x3573=(cj5*r20);
IkReal x3574=(cj5*r10);
IkReal x3575=((1.0)*x3571);
IkReal x3576=(sj5*x3571);
IkReal x3577=((1.0)*sj5*x3570);
evalcond[0]=(((x3570*x3573))+((r22*x3571))+(((-1.0)*r21*x3577)));
evalcond[1]=(((x3570*x3572))+(((-1.0)*r01*x3577))+((r02*x3571)));
evalcond[2]=(((r21*x3576))+(((-1.0)*x3573*x3575))+((r22*x3570)));
evalcond[3]=(((r12*x3570))+((r11*x3576))+(((-1.0)*x3574*x3575)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x3577))+((x3570*x3574))+((r12*x3571)));
evalcond[5]=((1.0)+((r01*x3576))+(((-1.0)*x3572*x3575))+((r02*x3570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x3578=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3578;
j4eval[1]=IKsign(x3578);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x3579=((1.0)*cj5);
IkReal x3580=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3579)));
j4eval[0]=x3580;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3579)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3580);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x3581=cj5*cj5;
IkReal x3582=(r21*sj5);
IkReal x3583=((1.0)*r20);
IkReal x3584=(r01*r21);
IkReal x3585=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3581*x3583))+((cj5*r00*x3582))+(((-1.0)*x3584))+((x3581*x3584)));
j4eval[0]=x3585;
j4eval[1]=((IKabs(r22))+(IKabs((x3582+(((-1.0)*cj5*x3583))))));
j4eval[2]=IKsign(x3585);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3586=cj5*cj5;
IkReal x3587=((1.0)*r20);
IkReal x3588=(r21*sj5);
IkReal x3589=(r01*r21);
CheckValue<IkReal> x3590 = IKatan2WithCheck(IkReal(r22),IkReal((x3588+(((-1.0)*cj5*x3587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3590.valid){
continue;
}
CheckValue<IkReal> x3591=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3586*x3589))+((cj5*r00*x3588))+(((-1.0)*x3589))+(((-1.0)*r00*x3586*x3587)))),-1);
if(!x3591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3590.value)+(((1.5707963267949)*(x3591.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3592=IKsin(j4);
IkReal x3593=IKcos(j4);
IkReal x3594=(cj5*r00);
IkReal x3595=(cj5*r20);
IkReal x3596=(cj5*r10);
IkReal x3597=((1.0)*x3593);
IkReal x3598=(sj5*x3593);
IkReal x3599=((1.0)*sj5*x3592);
evalcond[0]=(((x3592*x3595))+(((-1.0)*r21*x3599))+((r22*x3593)));
evalcond[1]=(((r02*x3593))+(((-1.0)*r01*x3599))+((x3592*x3594)));
evalcond[2]=(((r21*x3598))+(((-1.0)*x3595*x3597))+((r22*x3592)));
evalcond[3]=(((r11*x3598))+((r12*x3592))+(((-1.0)*x3596*x3597)));
evalcond[4]=((-1.0)+((x3592*x3596))+((r12*x3593))+(((-1.0)*r11*x3599)));
evalcond[5]=((1.0)+(((-1.0)*x3594*x3597))+((r02*x3592))+((r01*x3598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3600=((1.0)*cj5);
CheckValue<IkReal> x3601 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3601.valid){
continue;
}
CheckValue<IkReal> x3602=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3600))+(((-1.0)*r00*sj5)))),-1);
if(!x3602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3601.value)+(((1.5707963267949)*(x3602.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3603=IKsin(j4);
IkReal x3604=IKcos(j4);
IkReal x3605=(cj5*r00);
IkReal x3606=(cj5*r20);
IkReal x3607=(cj5*r10);
IkReal x3608=((1.0)*x3604);
IkReal x3609=(sj5*x3604);
IkReal x3610=((1.0)*sj5*x3603);
evalcond[0]=(((r22*x3604))+((x3603*x3606))+(((-1.0)*r21*x3610)));
evalcond[1]=((((-1.0)*r01*x3610))+((r02*x3604))+((x3603*x3605)));
evalcond[2]=((((-1.0)*x3606*x3608))+((r22*x3603))+((r21*x3609)));
evalcond[3]=(((r11*x3609))+(((-1.0)*x3607*x3608))+((r12*x3603)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x3610))+((x3603*x3607))+((r12*x3604)));
evalcond[5]=((1.0)+((r02*x3603))+((r01*x3609))+(((-1.0)*x3605*x3608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3611=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3611.valid){
continue;
}
CheckValue<IkReal> x3612 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3611.value)))+(x3612.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3613=IKsin(j4);
IkReal x3614=IKcos(j4);
IkReal x3615=(cj5*r00);
IkReal x3616=(cj5*r20);
IkReal x3617=(cj5*r10);
IkReal x3618=((1.0)*x3614);
IkReal x3619=(sj5*x3614);
IkReal x3620=((1.0)*sj5*x3613);
evalcond[0]=(((x3613*x3616))+(((-1.0)*r21*x3620))+((r22*x3614)));
evalcond[1]=(((x3613*x3615))+((r02*x3614))+(((-1.0)*r01*x3620)));
evalcond[2]=((((-1.0)*x3616*x3618))+((r22*x3613))+((r21*x3619)));
evalcond[3]=(((r11*x3619))+(((-1.0)*x3617*x3618))+((r12*x3613)));
evalcond[4]=((-1.0)+((x3613*x3617))+(((-1.0)*r11*x3620))+((r12*x3614)));
evalcond[5]=((1.0)+((r02*x3613))+(((-1.0)*x3615*x3618))+((r01*x3619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x3621=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3621;
j4eval[1]=IKsign(x3621);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x3622=((1.0)*cj5);
IkReal x3623=((((-1.0)*r21*x3622))+(((-1.0)*r20*sj5)));
j4eval[0]=x3623;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x3622)))))+(IKabs(r02)));
j4eval[2]=IKsign(x3623);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x3624=cj5*cj5;
IkReal x3625=r01*r01;
IkReal x3626=(cj5*r00);
IkReal x3627=(r01*sj5);
IkReal x3628=(((x3624*(r00*r00)))+(((-2.0)*x3626*x3627))+x3625+(r02*r02)+(((-1.0)*x3624*x3625)));
j4eval[0]=x3628;
j4eval[1]=IKsign(x3628);
j4eval[2]=((IKabs((x3627+(((-1.0)*x3626)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3629=cj5*cj5;
IkReal x3630=r01*r01;
IkReal x3631=(r01*sj5);
IkReal x3632=(cj5*r00);
CheckValue<IkReal> x3633 = IKatan2WithCheck(IkReal(r02),IkReal((x3631+(((-1.0)*x3632)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3633.valid){
continue;
}
CheckValue<IkReal> x3634=IKPowWithIntegerCheck(IKsign((((x3629*(r00*r00)))+(((-1.0)*x3629*x3630))+x3630+(((-2.0)*x3631*x3632))+(r02*r02))),-1);
if(!x3634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3633.value)+(((1.5707963267949)*(x3634.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3635=IKsin(j4);
IkReal x3636=IKcos(j4);
IkReal x3637=(cj5*r00);
IkReal x3638=(cj5*r20);
IkReal x3639=(cj5*r10);
IkReal x3640=((1.0)*x3636);
IkReal x3641=(sj5*x3636);
IkReal x3642=((1.0)*sj5*x3635);
evalcond[0]=(((r22*x3636))+((x3635*x3638))+(((-1.0)*r21*x3642)));
evalcond[1]=(((r02*x3636))+((x3635*x3637))+(((-1.0)*r01*x3642)));
evalcond[2]=(((r22*x3635))+((r21*x3641))+(((-1.0)*x3638*x3640)));
evalcond[3]=(((r12*x3635))+((r11*x3641))+(((-1.0)*x3639*x3640)));
evalcond[4]=((1.0)+((r12*x3636))+((x3635*x3639))+(((-1.0)*r11*x3642)));
evalcond[5]=((-1.0)+((r02*x3635))+((r01*x3641))+(((-1.0)*x3637*x3640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3643=((1.0)*cj5);
CheckValue<IkReal> x3644 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3643)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3644.valid){
continue;
}
CheckValue<IkReal> x3645=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3643))+(((-1.0)*r20*sj5)))),-1);
if(!x3645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3644.value)+(((1.5707963267949)*(x3645.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3646=IKsin(j4);
IkReal x3647=IKcos(j4);
IkReal x3648=(cj5*r00);
IkReal x3649=(cj5*r20);
IkReal x3650=(cj5*r10);
IkReal x3651=((1.0)*x3647);
IkReal x3652=(sj5*x3647);
IkReal x3653=((1.0)*sj5*x3646);
evalcond[0]=((((-1.0)*r21*x3653))+((r22*x3647))+((x3646*x3649)));
evalcond[1]=((((-1.0)*r01*x3653))+((r02*x3647))+((x3646*x3648)));
evalcond[2]=(((r21*x3652))+(((-1.0)*x3649*x3651))+((r22*x3646)));
evalcond[3]=(((r12*x3646))+((r11*x3652))+(((-1.0)*x3650*x3651)));
evalcond[4]=((1.0)+((x3646*x3650))+((r12*x3647))+(((-1.0)*r11*x3653)));
evalcond[5]=((-1.0)+((r02*x3646))+(((-1.0)*x3648*x3651))+((r01*x3652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3654 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3654.valid){
continue;
}
CheckValue<IkReal> x3655=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3654.value)+(((1.5707963267949)*(x3655.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3656=IKsin(j4);
IkReal x3657=IKcos(j4);
IkReal x3658=(cj5*r00);
IkReal x3659=(cj5*r20);
IkReal x3660=(cj5*r10);
IkReal x3661=((1.0)*x3657);
IkReal x3662=(sj5*x3657);
IkReal x3663=((1.0)*sj5*x3656);
evalcond[0]=((((-1.0)*r21*x3663))+((x3656*x3659))+((r22*x3657)));
evalcond[1]=((((-1.0)*r01*x3663))+((r02*x3657))+((x3656*x3658)));
evalcond[2]=((((-1.0)*x3659*x3661))+((r21*x3662))+((r22*x3656)));
evalcond[3]=((((-1.0)*x3660*x3661))+((r12*x3656))+((r11*x3662)));
evalcond[4]=((1.0)+((r12*x3657))+((x3656*x3660))+(((-1.0)*r11*x3663)));
evalcond[5]=((-1.0)+((r01*x3662))+(((-1.0)*x3658*x3661))+((r02*x3656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3664=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3664);
rxp0_2=(py*r00);
rxp1_0=(r21*x3664);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x3665=((1.0)*sj0);
j4eval[0]=r12;
j4eval[1]=IKsign(r12);
j4eval[2]=((IKabs((((cj0*cj2))+(((-1.0)*sj2*x3665)))))+(IKabs(((((-1.0)*cj2*x3665))+(((-1.0)*cj0*sj2))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3666=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3666);
rxp0_2=(py*r00);
rxp1_0=(r21*x3666);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x3667=((1.0)*sj0);
IkReal x3668=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x3668;
j4eval[1]=IKsign(x3668);
j4eval[2]=((IKabs((((cj0*cj2))+(((-1.0)*sj2*x3667)))))+(IKabs(((((-1.0)*cj2*x3667))+(((-1.0)*cj0*sj2))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3669=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3669);
rxp0_2=(py*r00);
rxp1_0=(r21*x3669);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3670=((1.0)*cj2);
CheckValue<IkReal> x3671=IKPowWithIntegerCheck(r12,-1);
if(!x3671.valid){
continue;
}
CheckValue<IkReal> x3672=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x3672.valid){
continue;
}
if( IKabs(((x3671.value)*(((((-1.0)*sj0*x3670))+(((-1.0)*cj0*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3672.value)*(((((-1.0)*cj0*x3670))+((sj0*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3671.value)*(((((-1.0)*sj0*x3670))+(((-1.0)*cj0*sj2))))))+IKsqr(((x3672.value)*(((((-1.0)*cj0*x3670))+((sj0*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x3671.value)*(((((-1.0)*sj0*x3670))+(((-1.0)*cj0*sj2))))), ((x3672.value)*(((((-1.0)*cj0*x3670))+((sj0*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3673=IKsin(j4);
IkReal x3674=IKcos(j4);
IkReal x3675=(cj2*sj0);
IkReal x3676=(cj0*sj2);
IkReal x3677=(cj0*cj2);
IkReal x3678=(r01*sj5);
IkReal x3679=(r21*sj5);
IkReal x3680=(sj0*sj2);
IkReal x3681=((1.0)*x3673);
IkReal x3682=(cj5*x3673);
IkReal x3683=(x3676+x3675);
IkReal x3684=((1.0)*cj5*x3674);
evalcond[0]=(((r12*x3673))+x3683);
evalcond[1]=(((r12*x3674))+x3680+(((-1.0)*x3677)));
evalcond[2]=(((r20*x3682))+(((-1.0)*x3679*x3681)));
evalcond[3]=((((-1.0)*r20*x3684))+((x3674*x3679)));
evalcond[4]=(((r00*x3682))+x3683+(((-1.0)*x3678*x3681)));
evalcond[5]=(((x3674*x3678))+x3677+(((-1.0)*r00*x3684))+(((-1.0)*x3680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3685=((1.0)*sj0);
CheckValue<IkReal> x3686=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x3686.valid){
continue;
}
CheckValue<IkReal> x3687 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x3685))+(((-1.0)*cj0*sj2)))),IkReal((((cj0*cj2))+(((-1.0)*sj2*x3685)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3686.value)))+(x3687.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3688=IKsin(j4);
IkReal x3689=IKcos(j4);
IkReal x3690=(cj2*sj0);
IkReal x3691=(cj0*sj2);
IkReal x3692=(cj0*cj2);
IkReal x3693=(r01*sj5);
IkReal x3694=(r21*sj5);
IkReal x3695=(sj0*sj2);
IkReal x3696=((1.0)*x3688);
IkReal x3697=(cj5*x3688);
IkReal x3698=(x3690+x3691);
IkReal x3699=((1.0)*cj5*x3689);
evalcond[0]=(x3698+((r12*x3688)));
evalcond[1]=(x3695+((r12*x3689))+(((-1.0)*x3692)));
evalcond[2]=(((r20*x3697))+(((-1.0)*x3694*x3696)));
evalcond[3]=((((-1.0)*r20*x3699))+((x3689*x3694)));
evalcond[4]=(((r00*x3697))+x3698+(((-1.0)*x3693*x3696)));
evalcond[5]=(((x3689*x3693))+x3692+(((-1.0)*x3695))+(((-1.0)*r00*x3699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3700=((1.0)*sj0);
CheckValue<IkReal> x3701 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x3700))+(((-1.0)*cj0*sj2)))),IkReal((((cj0*cj2))+(((-1.0)*sj2*x3700)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3701.valid){
continue;
}
CheckValue<IkReal> x3702=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x3702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3701.value)+(((1.5707963267949)*(x3702.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3703=IKsin(j4);
IkReal x3704=IKcos(j4);
IkReal x3705=(cj2*sj0);
IkReal x3706=(cj0*sj2);
IkReal x3707=(cj0*cj2);
IkReal x3708=(r01*sj5);
IkReal x3709=(r21*sj5);
IkReal x3710=(sj0*sj2);
IkReal x3711=((1.0)*x3703);
IkReal x3712=(cj5*x3703);
IkReal x3713=(x3706+x3705);
IkReal x3714=((1.0)*cj5*x3704);
evalcond[0]=(((r12*x3703))+x3713);
evalcond[1]=(((r12*x3704))+x3710+(((-1.0)*x3707)));
evalcond[2]=(((r20*x3712))+(((-1.0)*x3709*x3711)));
evalcond[3]=((((-1.0)*r20*x3714))+((x3704*x3709)));
evalcond[4]=(((r00*x3712))+x3713+(((-1.0)*x3708*x3711)));
evalcond[5]=((((-1.0)*r00*x3714))+x3707+((x3704*x3708))+(((-1.0)*x3710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3715=cj5*cj5;
IkReal x3716=(r11*r21);
IkReal x3717=(cj0*sj2);
IkReal x3718=(cj2*sj0);
IkReal x3719=(r21*sj5);
IkReal x3720=(cj5*r20);
CheckValue<IkReal> x3721=IKPowWithIntegerCheck(IKsign((((cj5*r10*x3719))+((r11*sj5*x3720))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x3715))+((x3715*x3716))+(((-1.0)*x3716)))),-1);
if(!x3721.valid){
continue;
}
CheckValue<IkReal> x3722 = IKatan2WithCheck(IkReal((((r22*x3717))+((r22*x3718)))),IkReal(((((-1.0)*x3717*x3720))+(((-1.0)*x3718*x3720))+((x3717*x3719))+((x3718*x3719)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3721.value)))+(x3722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3723=IKsin(j4);
IkReal x3724=IKcos(j4);
IkReal x3725=(cj2*sj0);
IkReal x3726=(cj0*sj2);
IkReal x3727=(cj5*r00);
IkReal x3728=(cj0*cj2);
IkReal x3729=(sj0*sj2);
IkReal x3730=((1.0)*x3724);
IkReal x3731=(sj5*x3724);
IkReal x3732=(cj5*x3723);
IkReal x3733=(x3725+x3726);
IkReal x3734=((1.0)*sj5*x3723);
evalcond[0]=(((r22*x3724))+(((-1.0)*r21*x3734))+((r20*x3732)));
evalcond[1]=(((r22*x3723))+((r21*x3731))+(((-1.0)*cj5*r20*x3730)));
evalcond[2]=((((-1.0)*r01*x3734))+((r02*x3724))+x3733+((x3723*x3727)));
evalcond[3]=(((r11*x3731))+x3733+((r12*x3723))+(((-1.0)*cj5*r10*x3730)));
evalcond[4]=((((-1.0)*r11*x3734))+x3729+((r12*x3724))+(((-1.0)*x3728))+((r10*x3732)));
evalcond[5]=(((r01*x3731))+(((-1.0)*x3727*x3730))+((r02*x3723))+x3728+(((-1.0)*x3729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3735=(cj2*sj0);
IkReal x3736=(r21*sj5);
IkReal x3737=(cj0*sj2);
IkReal x3738=((1.0)*r22);
IkReal x3739=((1.0)*cj5*r20);
CheckValue<IkReal> x3740 = IKatan2WithCheck(IkReal((((x3735*x3736))+(((-1.0)*x3737*x3739))+((x3736*x3737))+(((-1.0)*x3735*x3739)))),IkReal(((((-1.0)*x3737*x3738))+(((-1.0)*x3735*x3738)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3740.valid){
continue;
}
CheckValue<IkReal> x3741=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3740.value)+(((1.5707963267949)*(x3741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3742=IKsin(j4);
IkReal x3743=IKcos(j4);
IkReal x3744=(cj2*sj0);
IkReal x3745=(cj0*sj2);
IkReal x3746=(cj5*r00);
IkReal x3747=(cj0*cj2);
IkReal x3748=(sj0*sj2);
IkReal x3749=((1.0)*x3743);
IkReal x3750=(sj5*x3743);
IkReal x3751=(cj5*x3742);
IkReal x3752=(x3744+x3745);
IkReal x3753=((1.0)*sj5*x3742);
evalcond[0]=(((r20*x3751))+(((-1.0)*r21*x3753))+((r22*x3743)));
evalcond[1]=(((r22*x3742))+((r21*x3750))+(((-1.0)*cj5*r20*x3749)));
evalcond[2]=(((x3742*x3746))+(((-1.0)*r01*x3753))+x3752+((r02*x3743)));
evalcond[3]=(((r12*x3742))+((r11*x3750))+x3752+(((-1.0)*cj5*r10*x3749)));
evalcond[4]=(((r12*x3743))+(((-1.0)*r11*x3753))+((r10*x3751))+x3748+(((-1.0)*x3747)));
evalcond[5]=(((r01*x3750))+(((-1.0)*x3746*x3749))+x3747+(((-1.0)*x3748))+((r02*x3742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3754=((1.0)*cj5);
IkReal x3755=(cj0*sj2);
IkReal x3756=(cj2*sj0);
IkReal x3757=(r21*sj5);
CheckValue<IkReal> x3758 = IKatan2WithCheck(IkReal((((r22*x3755))+((r22*x3756)))),IkReal((((x3755*x3757))+((x3756*x3757))+(((-1.0)*r20*x3754*x3755))+(((-1.0)*r20*x3754*x3756)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3758.valid){
continue;
}
CheckValue<IkReal> x3759=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3754)))),-1);
if(!x3759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3758.value)+(((1.5707963267949)*(x3759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3760=IKsin(j4);
IkReal x3761=IKcos(j4);
IkReal x3762=(cj2*sj0);
IkReal x3763=(cj0*sj2);
IkReal x3764=(cj5*r00);
IkReal x3765=(cj0*cj2);
IkReal x3766=(sj0*sj2);
IkReal x3767=((1.0)*x3761);
IkReal x3768=(sj5*x3761);
IkReal x3769=(cj5*x3760);
IkReal x3770=(x3762+x3763);
IkReal x3771=((1.0)*sj5*x3760);
evalcond[0]=((((-1.0)*r21*x3771))+((r22*x3761))+((r20*x3769)));
evalcond[1]=(((r22*x3760))+((r21*x3768))+(((-1.0)*cj5*r20*x3767)));
evalcond[2]=(((r02*x3761))+x3770+(((-1.0)*r01*x3771))+((x3760*x3764)));
evalcond[3]=((((-1.0)*cj5*r10*x3767))+x3770+((r11*x3768))+((r12*x3760)));
evalcond[4]=(((r10*x3769))+(((-1.0)*x3765))+x3766+((r12*x3761))+(((-1.0)*r11*x3771)));
evalcond[5]=(((r02*x3760))+(((-1.0)*x3764*x3767))+(((-1.0)*x3766))+x3765+((r01*x3768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x3772=(cj2*sj0);
IkReal x3773=(r21*sj5);
IkReal x3774=(cj5*r20);
IkReal x3775=((1.0)*cj0*sj2);
IkReal x3776=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3776;
j4eval[1]=IKsign(x3776);
j4eval[2]=((IKabs((((r22*x3772))+(((-1.0)*r22*x3775)))))+(IKabs(((((-1.0)*x3774*x3775))+((x3772*x3774))+(((-1.0)*x3772*x3773))+((cj0*sj2*x3773))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x3777=((1.0)*cj5);
IkReal x3778=(r21*sj5);
IkReal x3779=(cj2*sj0);
IkReal x3780=(cj0*sj2);
IkReal x3781=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3777)));
j4eval[0]=x3781;
j4eval[1]=IKsign(x3781);
j4eval[2]=((IKabs((((r22*x3779))+(((-1.0)*r22*x3780)))))+(IKabs((((cj5*r20*x3780))+((x3778*x3779))+(((-1.0)*x3778*x3780))+(((-1.0)*r20*x3777*x3779))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x3782=cj5*cj5;
IkReal x3783=(r11*r21);
IkReal x3784=(cj0*sj2);
IkReal x3785=((1.0)*r22);
IkReal x3786=((1.0)*r20);
IkReal x3787=(cj2*sj0);
IkReal x3788=(r21*sj5);
IkReal x3789=(cj5*r20);
IkReal x3790=(((cj5*r10*x3788))+(((-1.0)*r10*x3782*x3786))+((x3782*x3783))+(((-1.0)*x3783))+((r11*sj5*x3789))+(((-1.0)*r12*x3785)));
j4eval[0]=x3790;
j4eval[1]=((IKabs((((x3784*x3788))+(((-1.0)*x3787*x3788))+((x3787*x3789))+(((-1.0)*cj5*x3784*x3786)))))+(IKabs((((r22*x3784))+(((-1.0)*x3785*x3787))))));
j4eval[2]=IKsign(x3790);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=0;
sj2=0;
cj2=1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x3791=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3791;
j4eval[1]=IKsign(x3791);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=0;
sj2=0;
cj2=1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x3792=((1.0)*cj5);
IkReal x3793=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3792)));
j4eval[0]=x3793;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3792)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3793);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=0;
sj2=0;
cj2=1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x3794=cj5*cj5;
IkReal x3795=r01*r01;
IkReal x3796=(cj5*r00);
IkReal x3797=(r01*sj5);
IkReal x3798=(((x3794*(r00*r00)))+(((-2.0)*x3796*x3797))+x3795+(((-1.0)*x3794*x3795))+(r02*r02));
j4eval[0]=x3798;
j4eval[1]=IKsign(x3798);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x3796))+x3797))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3799=cj5*cj5;
IkReal x3800=r01*r01;
IkReal x3801=(r01*sj5);
IkReal x3802=(cj5*r00);
CheckValue<IkReal> x3803 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x3802))+x3801)),IKFAST_ATAN2_MAGTHRESH);
if(!x3803.valid){
continue;
}
CheckValue<IkReal> x3804=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3801*x3802))+((x3799*(r00*r00)))+x3800+(((-1.0)*x3799*x3800))+(r02*r02))),-1);
if(!x3804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3803.value)+(((1.5707963267949)*(x3804.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3805=IKsin(j4);
IkReal x3806=IKcos(j4);
IkReal x3807=(cj5*r00);
IkReal x3808=(cj5*r20);
IkReal x3809=(cj5*r10);
IkReal x3810=((1.0)*x3806);
IkReal x3811=(sj5*x3806);
IkReal x3812=((1.0)*sj5*x3805);
evalcond[0]=(((r22*x3806))+((x3805*x3808))+(((-1.0)*r21*x3812)));
evalcond[1]=((((-1.0)*r01*x3812))+((x3805*x3807))+((r02*x3806)));
evalcond[2]=(((r21*x3811))+((r22*x3805))+(((-1.0)*x3808*x3810)));
evalcond[3]=(((r11*x3811))+((r12*x3805))+(((-1.0)*x3809*x3810)));
evalcond[4]=((-1.0)+((r12*x3806))+((x3805*x3809))+(((-1.0)*r11*x3812)));
evalcond[5]=((-1.0)+(((-1.0)*x3807*x3810))+((r02*x3805))+((r01*x3811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3813=((1.0)*cj5);
CheckValue<IkReal> x3814=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3813))+(((-1.0)*r00*sj5)))),-1);
if(!x3814.valid){
continue;
}
CheckValue<IkReal> x3815 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3813)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3814.value)))+(x3815.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3816=IKsin(j4);
IkReal x3817=IKcos(j4);
IkReal x3818=(cj5*r00);
IkReal x3819=(cj5*r20);
IkReal x3820=(cj5*r10);
IkReal x3821=((1.0)*x3817);
IkReal x3822=(sj5*x3817);
IkReal x3823=((1.0)*sj5*x3816);
evalcond[0]=(((r22*x3817))+(((-1.0)*r21*x3823))+((x3816*x3819)));
evalcond[1]=((((-1.0)*r01*x3823))+((r02*x3817))+((x3816*x3818)));
evalcond[2]=(((r22*x3816))+(((-1.0)*x3819*x3821))+((r21*x3822)));
evalcond[3]=(((r12*x3816))+((r11*x3822))+(((-1.0)*x3820*x3821)));
evalcond[4]=((-1.0)+((r12*x3817))+((x3816*x3820))+(((-1.0)*r11*x3823)));
evalcond[5]=((-1.0)+((r02*x3816))+((r01*x3822))+(((-1.0)*x3818*x3821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3824=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3824.valid){
continue;
}
CheckValue<IkReal> x3825 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3824.value)))+(x3825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3826=IKsin(j4);
IkReal x3827=IKcos(j4);
IkReal x3828=(cj5*r00);
IkReal x3829=(cj5*r20);
IkReal x3830=(cj5*r10);
IkReal x3831=((1.0)*x3827);
IkReal x3832=(sj5*x3827);
IkReal x3833=((1.0)*sj5*x3826);
evalcond[0]=(((x3826*x3829))+(((-1.0)*r21*x3833))+((r22*x3827)));
evalcond[1]=(((x3826*x3828))+((r02*x3827))+(((-1.0)*r01*x3833)));
evalcond[2]=((((-1.0)*x3829*x3831))+((r22*x3826))+((r21*x3832)));
evalcond[3]=(((r12*x3826))+(((-1.0)*x3830*x3831))+((r11*x3832)));
evalcond[4]=((-1.0)+((r12*x3827))+((x3826*x3830))+(((-1.0)*r11*x3833)));
evalcond[5]=((-1.0)+(((-1.0)*x3828*x3831))+((r01*x3832))+((r02*x3826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=0;
sj2=0;
cj2=1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x3834=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3834;
j4eval[1]=IKsign(x3834);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=0;
sj2=0;
cj2=1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x3835=((1.0)*cj5);
IkReal x3836=((((-1.0)*r21*x3835))+(((-1.0)*r20*sj5)));
j4eval[0]=x3836;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3835))))));
j4eval[2]=IKsign(x3836);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=0;
sj2=0;
cj2=1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x3837=cj5*cj5;
IkReal x3838=(r21*sj5);
IkReal x3839=((1.0)*r20);
IkReal x3840=(r01*r21);
IkReal x3841=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3837*x3840))+(((-1.0)*x3840))+(((-1.0)*r00*x3837*x3839))+((cj5*r00*x3838)));
j4eval[0]=x3841;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x3839))+x3838))));
j4eval[2]=IKsign(x3841);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3842=cj5*cj5;
IkReal x3843=((1.0)*r20);
IkReal x3844=(r21*sj5);
IkReal x3845=(r01*r21);
CheckValue<IkReal> x3846 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*x3843))+x3844)),IKFAST_ATAN2_MAGTHRESH);
if(!x3846.valid){
continue;
}
CheckValue<IkReal> x3847=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3842*x3843))+((x3842*x3845))+(((-1.0)*x3845))+((cj5*r00*x3844)))),-1);
if(!x3847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3846.value)+(((1.5707963267949)*(x3847.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3848=IKsin(j4);
IkReal x3849=IKcos(j4);
IkReal x3850=(cj5*r00);
IkReal x3851=(cj5*r20);
IkReal x3852=(cj5*r10);
IkReal x3853=((1.0)*x3849);
IkReal x3854=(sj5*x3849);
IkReal x3855=((1.0)*sj5*x3848);
evalcond[0]=((((-1.0)*r21*x3855))+((x3848*x3851))+((r22*x3849)));
evalcond[1]=(((x3848*x3850))+(((-1.0)*r01*x3855))+((r02*x3849)));
evalcond[2]=(((r21*x3854))+(((-1.0)*x3851*x3853))+((r22*x3848)));
evalcond[3]=(((r12*x3848))+((r11*x3854))+(((-1.0)*x3852*x3853)));
evalcond[4]=((1.0)+((r12*x3849))+((x3848*x3852))+(((-1.0)*r11*x3855)));
evalcond[5]=((1.0)+(((-1.0)*x3850*x3853))+((r01*x3854))+((r02*x3848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3856=((1.0)*cj5);
CheckValue<IkReal> x3857 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3857.valid){
continue;
}
CheckValue<IkReal> x3858=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3856))+(((-1.0)*r20*sj5)))),-1);
if(!x3858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3857.value)+(((1.5707963267949)*(x3858.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3859=IKsin(j4);
IkReal x3860=IKcos(j4);
IkReal x3861=(cj5*r00);
IkReal x3862=(cj5*r20);
IkReal x3863=(cj5*r10);
IkReal x3864=((1.0)*x3860);
IkReal x3865=(sj5*x3860);
IkReal x3866=((1.0)*sj5*x3859);
evalcond[0]=((((-1.0)*r21*x3866))+((x3859*x3862))+((r22*x3860)));
evalcond[1]=(((r02*x3860))+(((-1.0)*r01*x3866))+((x3859*x3861)));
evalcond[2]=(((r21*x3865))+(((-1.0)*x3862*x3864))+((r22*x3859)));
evalcond[3]=(((r11*x3865))+(((-1.0)*x3863*x3864))+((r12*x3859)));
evalcond[4]=((1.0)+((x3859*x3863))+(((-1.0)*r11*x3866))+((r12*x3860)));
evalcond[5]=((1.0)+((r02*x3859))+(((-1.0)*x3861*x3864))+((r01*x3865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3867 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3867.valid){
continue;
}
CheckValue<IkReal> x3868=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3867.value)+(((1.5707963267949)*(x3868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3869=IKsin(j4);
IkReal x3870=IKcos(j4);
IkReal x3871=(cj5*r00);
IkReal x3872=(cj5*r20);
IkReal x3873=(cj5*r10);
IkReal x3874=((1.0)*x3870);
IkReal x3875=(sj5*x3870);
IkReal x3876=((1.0)*sj5*x3869);
evalcond[0]=(((x3869*x3872))+((r22*x3870))+(((-1.0)*r21*x3876)));
evalcond[1]=(((x3869*x3871))+(((-1.0)*r01*x3876))+((r02*x3870)));
evalcond[2]=(((r21*x3875))+((r22*x3869))+(((-1.0)*x3872*x3874)));
evalcond[3]=((((-1.0)*x3873*x3874))+((r11*x3875))+((r12*x3869)));
evalcond[4]=((1.0)+(((-1.0)*r11*x3876))+((x3869*x3873))+((r12*x3870)));
evalcond[5]=((1.0)+((r02*x3869))+((r01*x3875))+(((-1.0)*x3871*x3874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x3877=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3877;
j4eval[1]=IKsign(x3877);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x3878=((1.0)*cj5);
IkReal x3879=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3878)));
j4eval[0]=x3879;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3878))))));
j4eval[2]=IKsign(x3879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x3880=cj5*cj5;
IkReal x3881=r01*r01;
IkReal x3882=(cj5*r00);
IkReal x3883=(r01*sj5);
IkReal x3884=(((x3880*(r00*r00)))+(((-2.0)*x3882*x3883))+x3881+(r02*r02)+(((-1.0)*x3880*x3881)));
j4eval[0]=x3884;
j4eval[1]=IKsign(x3884);
j4eval[2]=((IKabs(((((-1.0)*x3882))+x3883)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3885=cj5*cj5;
IkReal x3886=r01*r01;
IkReal x3887=(r01*sj5);
IkReal x3888=(cj5*r00);
CheckValue<IkReal> x3889=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3887*x3888))+(((-1.0)*x3885*x3886))+((x3885*(r00*r00)))+x3886+(r02*r02))),-1);
if(!x3889.valid){
continue;
}
CheckValue<IkReal> x3890 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x3888))+x3887)),IKFAST_ATAN2_MAGTHRESH);
if(!x3890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3889.value)))+(x3890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3891=IKsin(j4);
IkReal x3892=IKcos(j4);
IkReal x3893=(cj5*r00);
IkReal x3894=(cj5*r20);
IkReal x3895=(cj5*r10);
IkReal x3896=((1.0)*x3892);
IkReal x3897=(sj5*x3892);
IkReal x3898=((1.0)*sj5*x3891);
evalcond[0]=((((-1.0)*r21*x3898))+((x3891*x3894))+((r22*x3892)));
evalcond[1]=(((x3891*x3893))+(((-1.0)*r01*x3898))+((r02*x3892)));
evalcond[2]=((((-1.0)*x3894*x3896))+((r21*x3897))+((r22*x3891)));
evalcond[3]=((((-1.0)*x3895*x3896))+((r11*x3897))+((r12*x3891)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x3898))+((x3891*x3895))+((r12*x3892)));
evalcond[5]=((-1.0)+((r01*x3897))+(((-1.0)*x3893*x3896))+((r02*x3891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3899=((1.0)*cj5);
CheckValue<IkReal> x3900 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3899)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3900.valid){
continue;
}
CheckValue<IkReal> x3901=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3899)))),-1);
if(!x3901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3900.value)+(((1.5707963267949)*(x3901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3902=IKsin(j4);
IkReal x3903=IKcos(j4);
IkReal x3904=(cj5*r00);
IkReal x3905=(cj5*r20);
IkReal x3906=(cj5*r10);
IkReal x3907=((1.0)*x3903);
IkReal x3908=(sj5*x3903);
IkReal x3909=((1.0)*sj5*x3902);
evalcond[0]=(((r22*x3903))+((x3902*x3905))+(((-1.0)*r21*x3909)));
evalcond[1]=(((x3902*x3904))+(((-1.0)*r01*x3909))+((r02*x3903)));
evalcond[2]=(((r22*x3902))+(((-1.0)*x3905*x3907))+((r21*x3908)));
evalcond[3]=((((-1.0)*x3906*x3907))+((r12*x3902))+((r11*x3908)));
evalcond[4]=((-1.0)+((x3902*x3906))+((r12*x3903))+(((-1.0)*r11*x3909)));
evalcond[5]=((-1.0)+(((-1.0)*x3904*x3907))+((r01*x3908))+((r02*x3902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3910=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3910.valid){
continue;
}
CheckValue<IkReal> x3911 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3910.value)))+(x3911.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3912=IKsin(j4);
IkReal x3913=IKcos(j4);
IkReal x3914=(cj5*r00);
IkReal x3915=(cj5*r20);
IkReal x3916=(cj5*r10);
IkReal x3917=((1.0)*x3913);
IkReal x3918=(sj5*x3913);
IkReal x3919=((1.0)*sj5*x3912);
evalcond[0]=((((-1.0)*r21*x3919))+((x3912*x3915))+((r22*x3913)));
evalcond[1]=((((-1.0)*r01*x3919))+((x3912*x3914))+((r02*x3913)));
evalcond[2]=((((-1.0)*x3915*x3917))+((r21*x3918))+((r22*x3912)));
evalcond[3]=((((-1.0)*x3916*x3917))+((r11*x3918))+((r12*x3912)));
evalcond[4]=((-1.0)+((r12*x3913))+((x3912*x3916))+(((-1.0)*r11*x3919)));
evalcond[5]=((-1.0)+(((-1.0)*x3914*x3917))+((r01*x3918))+((r02*x3912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x3920=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3920;
j4eval[1]=IKsign(x3920);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x3921=((1.0)*cj5);
IkReal x3922=((((-1.0)*r21*x3921))+(((-1.0)*r20*sj5)));
j4eval[0]=x3922;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3921))))));
j4eval[2]=IKsign(x3922);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x3923=cj5*cj5;
IkReal x3924=(r21*sj5);
IkReal x3925=((1.0)*r20);
IkReal x3926=(r01*r21);
IkReal x3927=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x3923*x3925))+(((-1.0)*r02*r22))+(((-1.0)*x3926))+((cj5*r00*x3924))+((x3923*x3926)));
j4eval[0]=x3927;
j4eval[1]=((IKabs(((((-1.0)*cj5*x3925))+x3924)))+(IKabs(r22)));
j4eval[2]=IKsign(x3927);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3928=cj5*cj5;
IkReal x3929=((1.0)*r20);
IkReal x3930=(r21*sj5);
IkReal x3931=(r01*r21);
CheckValue<IkReal> x3932 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*x3929))+x3930)),IKFAST_ATAN2_MAGTHRESH);
if(!x3932.valid){
continue;
}
CheckValue<IkReal> x3933=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3928*x3929))+((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3931))+((cj5*r00*x3930))+((x3928*x3931)))),-1);
if(!x3933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3932.value)+(((1.5707963267949)*(x3933.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3934=IKsin(j4);
IkReal x3935=IKcos(j4);
IkReal x3936=(cj5*r00);
IkReal x3937=(cj5*r20);
IkReal x3938=(cj5*r10);
IkReal x3939=((1.0)*x3935);
IkReal x3940=(sj5*x3935);
IkReal x3941=((1.0)*sj5*x3934);
evalcond[0]=(((r22*x3935))+(((-1.0)*r21*x3941))+((x3934*x3937)));
evalcond[1]=((((-1.0)*r01*x3941))+((x3934*x3936))+((r02*x3935)));
evalcond[2]=(((r22*x3934))+(((-1.0)*x3937*x3939))+((r21*x3940)));
evalcond[3]=((((-1.0)*x3938*x3939))+((r12*x3934))+((r11*x3940)));
evalcond[4]=((1.0)+((x3934*x3938))+(((-1.0)*r11*x3941))+((r12*x3935)));
evalcond[5]=((1.0)+(((-1.0)*x3936*x3939))+((r01*x3940))+((r02*x3934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3942=((1.0)*cj5);
CheckValue<IkReal> x3943=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3942))+(((-1.0)*r20*sj5)))),-1);
if(!x3943.valid){
continue;
}
CheckValue<IkReal> x3944 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3942)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3944.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3943.value)))+(x3944.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3945=IKsin(j4);
IkReal x3946=IKcos(j4);
IkReal x3947=(cj5*r00);
IkReal x3948=(cj5*r20);
IkReal x3949=(cj5*r10);
IkReal x3950=((1.0)*x3946);
IkReal x3951=(sj5*x3946);
IkReal x3952=((1.0)*sj5*x3945);
evalcond[0]=(((r22*x3946))+((x3945*x3948))+(((-1.0)*r21*x3952)));
evalcond[1]=((((-1.0)*r01*x3952))+((x3945*x3947))+((r02*x3946)));
evalcond[2]=((((-1.0)*x3948*x3950))+((r22*x3945))+((r21*x3951)));
evalcond[3]=((((-1.0)*x3949*x3950))+((r11*x3951))+((r12*x3945)));
evalcond[4]=((1.0)+(((-1.0)*r11*x3952))+((x3945*x3949))+((r12*x3946)));
evalcond[5]=((1.0)+((r01*x3951))+((r02*x3945))+(((-1.0)*x3947*x3950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3953 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3953.valid){
continue;
}
CheckValue<IkReal> x3954=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3953.value)+(((1.5707963267949)*(x3954.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3955=IKsin(j4);
IkReal x3956=IKcos(j4);
IkReal x3957=(cj5*r00);
IkReal x3958=(cj5*r20);
IkReal x3959=(cj5*r10);
IkReal x3960=((1.0)*x3956);
IkReal x3961=(sj5*x3956);
IkReal x3962=((1.0)*sj5*x3955);
evalcond[0]=((((-1.0)*r21*x3962))+((x3955*x3958))+((r22*x3956)));
evalcond[1]=(((r02*x3956))+((x3955*x3957))+(((-1.0)*r01*x3962)));
evalcond[2]=((((-1.0)*x3958*x3960))+((r21*x3961))+((r22*x3955)));
evalcond[3]=(((r11*x3961))+(((-1.0)*x3959*x3960))+((r12*x3955)));
evalcond[4]=((1.0)+((x3955*x3959))+((r12*x3956))+(((-1.0)*r11*x3962)));
evalcond[5]=((1.0)+(((-1.0)*x3957*x3960))+((r02*x3955))+((r01*x3961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x3963=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3963;
j4eval[1]=IKsign(x3963);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x3964=((1.0)*cj5);
IkReal x3965=((((-1.0)*r21*x3964))+(((-1.0)*r20*sj5)));
j4eval[0]=x3965;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3964))))));
j4eval[2]=IKsign(x3965);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x3966=cj5*cj5;
IkReal x3967=(r21*sj5);
IkReal x3968=((1.0)*r20);
IkReal x3969=(r01*r21);
IkReal x3970=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3969))+(((-1.0)*r00*x3966*x3968))+((x3966*x3969))+((cj5*r00*x3967)));
j4eval[0]=x3970;
j4eval[1]=((IKabs(((((-1.0)*cj5*x3968))+x3967)))+(IKabs(r22)));
j4eval[2]=IKsign(x3970);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3971=cj5*cj5;
IkReal x3972=((1.0)*r20);
IkReal x3973=(r21*sj5);
IkReal x3974=(r01*r21);
CheckValue<IkReal> x3975=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x3973))+(((-1.0)*r02*r22))+((x3971*x3974))+(((-1.0)*r00*x3971*x3972))+(((-1.0)*x3974)))),-1);
if(!x3975.valid){
continue;
}
CheckValue<IkReal> x3976 = IKatan2WithCheck(IkReal(r22),IkReal((x3973+(((-1.0)*cj5*x3972)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3975.value)))+(x3976.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3977=IKsin(j4);
IkReal x3978=IKcos(j4);
IkReal x3979=(cj5*r00);
IkReal x3980=(cj5*r20);
IkReal x3981=(cj5*r10);
IkReal x3982=((1.0)*x3978);
IkReal x3983=(sj5*x3978);
IkReal x3984=((1.0)*sj5*x3977);
evalcond[0]=(((x3977*x3980))+((r22*x3978))+(((-1.0)*r21*x3984)));
evalcond[1]=(((r02*x3978))+((x3977*x3979))+(((-1.0)*r01*x3984)));
evalcond[2]=(((r21*x3983))+((r22*x3977))+(((-1.0)*x3980*x3982)));
evalcond[3]=(((r11*x3983))+(((-1.0)*x3981*x3982))+((r12*x3977)));
evalcond[4]=((1.0)+(((-1.0)*r11*x3984))+((x3977*x3981))+((r12*x3978)));
evalcond[5]=((1.0)+((r02*x3977))+((r01*x3983))+(((-1.0)*x3979*x3982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3985=((1.0)*cj5);
CheckValue<IkReal> x3986 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3985)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3986.valid){
continue;
}
CheckValue<IkReal> x3987=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3985))+(((-1.0)*r20*sj5)))),-1);
if(!x3987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3986.value)+(((1.5707963267949)*(x3987.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3988=IKsin(j4);
IkReal x3989=IKcos(j4);
IkReal x3990=(cj5*r00);
IkReal x3991=(cj5*r20);
IkReal x3992=(cj5*r10);
IkReal x3993=((1.0)*x3989);
IkReal x3994=(sj5*x3989);
IkReal x3995=((1.0)*sj5*x3988);
evalcond[0]=(((x3988*x3991))+((r22*x3989))+(((-1.0)*r21*x3995)));
evalcond[1]=(((x3988*x3990))+(((-1.0)*r01*x3995))+((r02*x3989)));
evalcond[2]=(((r21*x3994))+(((-1.0)*x3991*x3993))+((r22*x3988)));
evalcond[3]=((((-1.0)*x3992*x3993))+((r11*x3994))+((r12*x3988)));
evalcond[4]=((1.0)+((x3988*x3992))+(((-1.0)*r11*x3995))+((r12*x3989)));
evalcond[5]=((1.0)+(((-1.0)*x3990*x3993))+((r01*x3994))+((r02*x3988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3996 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3996.valid){
continue;
}
CheckValue<IkReal> x3997=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3996.value)+(((1.5707963267949)*(x3997.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3998=IKsin(j4);
IkReal x3999=IKcos(j4);
IkReal x4000=(cj5*r00);
IkReal x4001=(cj5*r20);
IkReal x4002=(cj5*r10);
IkReal x4003=((1.0)*x3999);
IkReal x4004=(sj5*x3999);
IkReal x4005=((1.0)*sj5*x3998);
evalcond[0]=(((r22*x3999))+(((-1.0)*r21*x4005))+((x3998*x4001)));
evalcond[1]=((((-1.0)*r01*x4005))+((r02*x3999))+((x3998*x4000)));
evalcond[2]=((((-1.0)*x4001*x4003))+((r22*x3998))+((r21*x4004)));
evalcond[3]=((((-1.0)*x4002*x4003))+((r12*x3998))+((r11*x4004)));
evalcond[4]=((1.0)+((r12*x3999))+(((-1.0)*r11*x4005))+((x3998*x4002)));
evalcond[5]=((1.0)+((r01*x4004))+(((-1.0)*x4000*x4003))+((r02*x3998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x4006=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4006;
j4eval[1]=IKsign(x4006);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x4007=((1.0)*cj5);
IkReal x4008=((((-1.0)*r01*x4007))+(((-1.0)*r00*sj5)));
j4eval[0]=x4008;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4007))))));
j4eval[2]=IKsign(x4008);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x4009=cj5*cj5;
IkReal x4010=r01*r01;
IkReal x4011=(cj5*r00);
IkReal x4012=(r01*sj5);
IkReal x4013=((((-1.0)*x4009*x4010))+x4010+(((-2.0)*x4011*x4012))+(r02*r02)+((x4009*(r00*r00))));
j4eval[0]=x4013;
j4eval[1]=IKsign(x4013);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4011))+x4012))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4014=cj5*cj5;
IkReal x4015=r01*r01;
IkReal x4016=(r01*sj5);
IkReal x4017=(cj5*r00);
CheckValue<IkReal> x4018=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4014*x4015))+((x4014*(r00*r00)))+(((-2.0)*x4016*x4017))+x4015+(r02*r02))),-1);
if(!x4018.valid){
continue;
}
CheckValue<IkReal> x4019 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x4017))+x4016)),IKFAST_ATAN2_MAGTHRESH);
if(!x4019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4018.value)))+(x4019.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4020=IKsin(j4);
IkReal x4021=IKcos(j4);
IkReal x4022=(cj5*r00);
IkReal x4023=(cj5*r20);
IkReal x4024=(cj5*r10);
IkReal x4025=((1.0)*x4021);
IkReal x4026=(sj5*x4021);
IkReal x4027=((1.0)*sj5*x4020);
evalcond[0]=(((x4020*x4023))+(((-1.0)*r21*x4027))+((r22*x4021)));
evalcond[1]=(((x4020*x4022))+(((-1.0)*r01*x4027))+((r02*x4021)));
evalcond[2]=((((-1.0)*x4023*x4025))+((r21*x4026))+((r22*x4020)));
evalcond[3]=((((-1.0)*x4024*x4025))+((r12*x4020))+((r11*x4026)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x4027))+((x4020*x4024))+((r12*x4021)));
evalcond[5]=((-1.0)+(((-1.0)*x4022*x4025))+((r01*x4026))+((r02*x4020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4028=((1.0)*cj5);
CheckValue<IkReal> x4029 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4029.valid){
continue;
}
CheckValue<IkReal> x4030=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4028)))),-1);
if(!x4030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4029.value)+(((1.5707963267949)*(x4030.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4031=IKsin(j4);
IkReal x4032=IKcos(j4);
IkReal x4033=(cj5*r00);
IkReal x4034=(cj5*r20);
IkReal x4035=(cj5*r10);
IkReal x4036=((1.0)*x4032);
IkReal x4037=(sj5*x4032);
IkReal x4038=((1.0)*sj5*x4031);
evalcond[0]=((((-1.0)*r21*x4038))+((x4031*x4034))+((r22*x4032)));
evalcond[1]=((((-1.0)*r01*x4038))+((r02*x4032))+((x4031*x4033)));
evalcond[2]=(((r21*x4037))+(((-1.0)*x4034*x4036))+((r22*x4031)));
evalcond[3]=((((-1.0)*x4035*x4036))+((r12*x4031))+((r11*x4037)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x4038))+((r12*x4032))+((x4031*x4035)));
evalcond[5]=((-1.0)+((r02*x4031))+((r01*x4037))+(((-1.0)*x4033*x4036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4039=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4039.valid){
continue;
}
CheckValue<IkReal> x4040 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4039.value)))+(x4040.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4041=IKsin(j4);
IkReal x4042=IKcos(j4);
IkReal x4043=(cj5*r00);
IkReal x4044=(cj5*r20);
IkReal x4045=(cj5*r10);
IkReal x4046=((1.0)*x4042);
IkReal x4047=(sj5*x4042);
IkReal x4048=((1.0)*sj5*x4041);
evalcond[0]=(((r22*x4042))+((x4041*x4044))+(((-1.0)*r21*x4048)));
evalcond[1]=(((x4041*x4043))+((r02*x4042))+(((-1.0)*r01*x4048)));
evalcond[2]=(((r22*x4041))+((r21*x4047))+(((-1.0)*x4044*x4046)));
evalcond[3]=((((-1.0)*x4045*x4046))+((r12*x4041))+((r11*x4047)));
evalcond[4]=((-1.0)+((x4041*x4045))+(((-1.0)*r11*x4048))+((r12*x4042)));
evalcond[5]=((-1.0)+(((-1.0)*x4043*x4046))+((r02*x4041))+((r01*x4047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x4049=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4049;
j4eval[1]=IKsign(x4049);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x4050=((1.0)*cj5);
IkReal x4051=((((-1.0)*r21*x4050))+(((-1.0)*r20*sj5)));
j4eval[0]=x4051;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4050))))));
j4eval[2]=IKsign(x4051);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x4052=cj5*cj5;
IkReal x4053=(r21*sj5);
IkReal x4054=((1.0)*r20);
IkReal x4055=(r01*r21);
IkReal x4056=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x4052*x4054))+(((-1.0)*r02*r22))+((cj5*r00*x4053))+(((-1.0)*x4055))+((x4052*x4055)));
j4eval[0]=x4056;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x4054))+x4053))));
j4eval[2]=IKsign(x4056);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4057=cj5*cj5;
IkReal x4058=((1.0)*r20);
IkReal x4059=(r21*sj5);
IkReal x4060=(r01*r21);
CheckValue<IkReal> x4061=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4057*x4058))+((cj5*r00*x4059))+(((-1.0)*x4060))+((x4057*x4060)))),-1);
if(!x4061.valid){
continue;
}
CheckValue<IkReal> x4062 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*x4058))+x4059)),IKFAST_ATAN2_MAGTHRESH);
if(!x4062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4061.value)))+(x4062.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4063=IKsin(j4);
IkReal x4064=IKcos(j4);
IkReal x4065=(cj5*r00);
IkReal x4066=(cj5*r20);
IkReal x4067=(cj5*r10);
IkReal x4068=((1.0)*x4064);
IkReal x4069=(sj5*x4064);
IkReal x4070=((1.0)*sj5*x4063);
evalcond[0]=(((x4063*x4066))+(((-1.0)*r21*x4070))+((r22*x4064)));
evalcond[1]=((((-1.0)*r01*x4070))+((r02*x4064))+((x4063*x4065)));
evalcond[2]=((((-1.0)*x4066*x4068))+((r21*x4069))+((r22*x4063)));
evalcond[3]=(((r11*x4069))+(((-1.0)*x4067*x4068))+((r12*x4063)));
evalcond[4]=((1.0)+((x4063*x4067))+((r12*x4064))+(((-1.0)*r11*x4070)));
evalcond[5]=((1.0)+(((-1.0)*x4065*x4068))+((r02*x4063))+((r01*x4069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4071=((1.0)*cj5);
CheckValue<IkReal> x4072=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4071))+(((-1.0)*r20*sj5)))),-1);
if(!x4072.valid){
continue;
}
CheckValue<IkReal> x4073 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x4071))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4072.value)))+(x4073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4074=IKsin(j4);
IkReal x4075=IKcos(j4);
IkReal x4076=(cj5*r00);
IkReal x4077=(cj5*r20);
IkReal x4078=(cj5*r10);
IkReal x4079=((1.0)*x4075);
IkReal x4080=(sj5*x4075);
IkReal x4081=((1.0)*sj5*x4074);
evalcond[0]=((((-1.0)*r21*x4081))+((x4074*x4077))+((r22*x4075)));
evalcond[1]=(((x4074*x4076))+(((-1.0)*r01*x4081))+((r02*x4075)));
evalcond[2]=(((r21*x4080))+((r22*x4074))+(((-1.0)*x4077*x4079)));
evalcond[3]=(((r12*x4074))+((r11*x4080))+(((-1.0)*x4078*x4079)));
evalcond[4]=((1.0)+((r12*x4075))+((x4074*x4078))+(((-1.0)*r11*x4081)));
evalcond[5]=((1.0)+((r01*x4080))+((r02*x4074))+(((-1.0)*x4076*x4079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4082 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4082.valid){
continue;
}
CheckValue<IkReal> x4083=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4082.value)+(((1.5707963267949)*(x4083.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4084=IKsin(j4);
IkReal x4085=IKcos(j4);
IkReal x4086=(cj5*r00);
IkReal x4087=(cj5*r20);
IkReal x4088=(cj5*r10);
IkReal x4089=((1.0)*x4085);
IkReal x4090=(sj5*x4085);
IkReal x4091=((1.0)*sj5*x4084);
evalcond[0]=(((x4084*x4087))+(((-1.0)*r21*x4091))+((r22*x4085)));
evalcond[1]=(((x4084*x4086))+(((-1.0)*r01*x4091))+((r02*x4085)));
evalcond[2]=(((r21*x4090))+(((-1.0)*x4087*x4089))+((r22*x4084)));
evalcond[3]=(((r11*x4090))+((r12*x4084))+(((-1.0)*x4088*x4089)));
evalcond[4]=((1.0)+(((-1.0)*r11*x4091))+((x4084*x4088))+((r12*x4085)));
evalcond[5]=((1.0)+((r01*x4090))+(((-1.0)*x4086*x4089))+((r02*x4084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x4092=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4092;
j4eval[1]=IKsign(x4092);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x4093=((1.0)*cj5);
IkReal x4094=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4093)));
j4eval[0]=x4094;
j4eval[1]=((IKabs(((((-1.0)*r20*x4093))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4094);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x4095=cj5*cj5;
IkReal x4096=r01*r01;
IkReal x4097=(cj5*r00);
IkReal x4098=(r01*sj5);
IkReal x4099=((((-1.0)*x4095*x4096))+((x4095*(r00*r00)))+x4096+(((-2.0)*x4097*x4098))+(r02*r02));
j4eval[0]=x4099;
j4eval[1]=IKsign(x4099);
j4eval[2]=((IKabs((x4098+(((-1.0)*x4097)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4100=cj5*cj5;
IkReal x4101=r01*r01;
IkReal x4102=(r01*sj5);
IkReal x4103=(cj5*r00);
CheckValue<IkReal> x4104 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x4103))+x4102)),IKFAST_ATAN2_MAGTHRESH);
if(!x4104.valid){
continue;
}
CheckValue<IkReal> x4105=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4102*x4103))+x4101+(r02*r02)+(((-1.0)*x4100*x4101))+((x4100*(r00*r00))))),-1);
if(!x4105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4104.value)+(((1.5707963267949)*(x4105.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4106=IKsin(j4);
IkReal x4107=IKcos(j4);
IkReal x4108=(cj5*r00);
IkReal x4109=(cj5*r20);
IkReal x4110=(cj5*r10);
IkReal x4111=((1.0)*x4107);
IkReal x4112=(sj5*x4107);
IkReal x4113=((1.0)*sj5*x4106);
evalcond[0]=(((r22*x4107))+(((-1.0)*r21*x4113))+((x4106*x4109)));
evalcond[1]=((((-1.0)*r01*x4113))+((x4106*x4108))+((r02*x4107)));
evalcond[2]=((((-1.0)*x4109*x4111))+((r21*x4112))+((r22*x4106)));
evalcond[3]=((((-1.0)*x4110*x4111))+((r12*x4106))+((r11*x4112)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x4113))+((x4106*x4110))+((r12*x4107)));
evalcond[5]=((-1.0)+(((-1.0)*x4108*x4111))+((r02*x4106))+((r01*x4112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4114=((1.0)*cj5);
CheckValue<IkReal> x4115=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4114))+(((-1.0)*r00*sj5)))),-1);
if(!x4115.valid){
continue;
}
CheckValue<IkReal> x4116 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4115.value)))+(x4116.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4117=IKsin(j4);
IkReal x4118=IKcos(j4);
IkReal x4119=(cj5*r00);
IkReal x4120=(cj5*r20);
IkReal x4121=(cj5*r10);
IkReal x4122=((1.0)*x4118);
IkReal x4123=(sj5*x4118);
IkReal x4124=((1.0)*sj5*x4117);
evalcond[0]=(((x4117*x4120))+(((-1.0)*r21*x4124))+((r22*x4118)));
evalcond[1]=((((-1.0)*r01*x4124))+((r02*x4118))+((x4117*x4119)));
evalcond[2]=(((r21*x4123))+((r22*x4117))+(((-1.0)*x4120*x4122)));
evalcond[3]=(((r12*x4117))+(((-1.0)*x4121*x4122))+((r11*x4123)));
evalcond[4]=((-1.0)+((r12*x4118))+(((-1.0)*r11*x4124))+((x4117*x4121)));
evalcond[5]=((-1.0)+(((-1.0)*x4119*x4122))+((r02*x4117))+((r01*x4123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4125=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4125.valid){
continue;
}
CheckValue<IkReal> x4126 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4125.value)))+(x4126.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4127=IKsin(j4);
IkReal x4128=IKcos(j4);
IkReal x4129=(cj5*r00);
IkReal x4130=(cj5*r20);
IkReal x4131=(cj5*r10);
IkReal x4132=((1.0)*x4128);
IkReal x4133=(sj5*x4128);
IkReal x4134=((1.0)*sj5*x4127);
evalcond[0]=((((-1.0)*r21*x4134))+((x4127*x4130))+((r22*x4128)));
evalcond[1]=(((x4127*x4129))+((r02*x4128))+(((-1.0)*r01*x4134)));
evalcond[2]=((((-1.0)*x4130*x4132))+((r21*x4133))+((r22*x4127)));
evalcond[3]=(((r12*x4127))+(((-1.0)*x4131*x4132))+((r11*x4133)));
evalcond[4]=((-1.0)+((r12*x4128))+((x4127*x4131))+(((-1.0)*r11*x4134)));
evalcond[5]=((-1.0)+((r02*x4127))+((r01*x4133))+(((-1.0)*x4129*x4132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4135=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4135);
rxp1_1=(px*r21);
rxp1_2=(r11*x4135);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=((IKabs((((cj0*cj2))+((sj0*sj2)))))+(IKabs(((((-1.0)*cj2*sj0))+((cj0*sj2))))));
j4eval[2]=IKsign(r02);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4136=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4136);
rxp1_1=(px*r21);
rxp1_2=(r11*x4136);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x4137=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x4137;
j4eval[1]=((IKabs((((cj0*cj2))+((sj0*sj2)))))+(IKabs(((((-1.0)*cj2*sj0))+((cj0*sj2))))));
j4eval[2]=IKsign(x4137);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4138=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4138);
rxp1_1=(px*r21);
rxp1_2=(r11*x4138);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4139=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x4139.valid){
continue;
}
CheckValue<IkReal> x4140=IKPowWithIntegerCheck(r02,-1);
if(!x4140.valid){
continue;
}
if( IKabs(((x4139.value)*((((cj0*cj2))+((sj0*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4140.value)*(((((-1.0)*cj2*sj0))+((cj0*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4139.value)*((((cj0*cj2))+((sj0*sj2))))))+IKsqr(((x4140.value)*(((((-1.0)*cj2*sj0))+((cj0*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x4139.value)*((((cj0*cj2))+((sj0*sj2))))), ((x4140.value)*(((((-1.0)*cj2*sj0))+((cj0*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4141=IKsin(j4);
IkReal x4142=IKcos(j4);
IkReal x4143=(cj2*sj0);
IkReal x4144=(cj5*r10);
IkReal x4145=(cj5*r20);
IkReal x4146=(cj0*sj2);
IkReal x4147=((1.0)*cj0*cj2);
IkReal x4148=((1.0)*sj0*sj2);
IkReal x4149=((1.0)*x4142);
IkReal x4150=(sj5*x4142);
IkReal x4151=((1.0)*sj5*x4141);
IkReal x4152=(x4148+x4147);
evalcond[0]=(((r02*x4142))+(((-1.0)*x4146))+x4143);
evalcond[1]=((((-1.0)*r21*x4151))+((x4141*x4145)));
evalcond[2]=(((r21*x4150))+(((-1.0)*x4145*x4149)));
evalcond[3]=(((r02*x4141))+(((-1.0)*x4152)));
evalcond[4]=((((-1.0)*x4144*x4149))+(((-1.0)*x4143))+((r11*x4150))+x4146);
evalcond[5]=(((x4141*x4144))+(((-1.0)*x4152))+(((-1.0)*r11*x4151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4153=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x4153.valid){
continue;
}
CheckValue<IkReal> x4154 = IKatan2WithCheck(IkReal((((cj0*cj2))+((sj0*sj2)))),IkReal(((((-1.0)*cj2*sj0))+((cj0*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4153.value)))+(x4154.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4155=IKsin(j4);
IkReal x4156=IKcos(j4);
IkReal x4157=(cj2*sj0);
IkReal x4158=(cj5*r10);
IkReal x4159=(cj5*r20);
IkReal x4160=(cj0*sj2);
IkReal x4161=((1.0)*cj0*cj2);
IkReal x4162=((1.0)*sj0*sj2);
IkReal x4163=((1.0)*x4156);
IkReal x4164=(sj5*x4156);
IkReal x4165=((1.0)*sj5*x4155);
IkReal x4166=(x4162+x4161);
evalcond[0]=(((r02*x4156))+(((-1.0)*x4160))+x4157);
evalcond[1]=(((x4155*x4159))+(((-1.0)*r21*x4165)));
evalcond[2]=((((-1.0)*x4159*x4163))+((r21*x4164)));
evalcond[3]=(((r02*x4155))+(((-1.0)*x4166)));
evalcond[4]=((((-1.0)*x4157))+(((-1.0)*x4158*x4163))+x4160+((r11*x4164)));
evalcond[5]=(((x4155*x4158))+(((-1.0)*r11*x4165))+(((-1.0)*x4166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4167=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x4167.valid){
continue;
}
CheckValue<IkReal> x4168 = IKatan2WithCheck(IkReal((((cj0*cj2))+((sj0*sj2)))),IkReal(((((-1.0)*cj2*sj0))+((cj0*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4167.value)))+(x4168.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4169=IKsin(j4);
IkReal x4170=IKcos(j4);
IkReal x4171=(cj2*sj0);
IkReal x4172=(cj5*r10);
IkReal x4173=(cj5*r20);
IkReal x4174=(cj0*sj2);
IkReal x4175=((1.0)*cj0*cj2);
IkReal x4176=((1.0)*sj0*sj2);
IkReal x4177=((1.0)*x4170);
IkReal x4178=(sj5*x4170);
IkReal x4179=((1.0)*sj5*x4169);
IkReal x4180=(x4175+x4176);
evalcond[0]=((((-1.0)*x4174))+x4171+((r02*x4170)));
evalcond[1]=(((x4169*x4173))+(((-1.0)*r21*x4179)));
evalcond[2]=(((r21*x4178))+(((-1.0)*x4173*x4177)));
evalcond[3]=((((-1.0)*x4180))+((r02*x4169)));
evalcond[4]=(((r11*x4178))+(((-1.0)*x4172*x4177))+(((-1.0)*x4171))+x4174);
evalcond[5]=(((x4169*x4172))+(((-1.0)*x4180))+(((-1.0)*r11*x4179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4181=cj5*cj5;
IkReal x4182=(r11*r21);
IkReal x4183=(cj0*sj2);
IkReal x4184=((1.0)*r22);
IkReal x4185=(r21*sj5);
IkReal x4186=(cj2*sj0);
IkReal x4187=(cj5*r20);
CheckValue<IkReal> x4188=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*x4184))+(((-1.0)*r10*r20*x4181))+(((-1.0)*x4182))+((cj5*r10*x4185))+((r11*sj5*x4187))+((x4181*x4182)))),-1);
if(!x4188.valid){
continue;
}
CheckValue<IkReal> x4189 = IKatan2WithCheck(IkReal((((r22*x4183))+(((-1.0)*x4184*x4186)))),IkReal((((x4186*x4187))+(((-1.0)*x4185*x4186))+((x4183*x4185))+(((-1.0)*x4183*x4187)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4188.value)))+(x4189.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4190=IKsin(j4);
IkReal x4191=IKcos(j4);
IkReal x4192=(cj5*r00);
IkReal x4193=((1.0)*cj0);
IkReal x4194=((1.0)*sj0);
IkReal x4195=(cj2*x4193);
IkReal x4196=(sj2*x4194);
IkReal x4197=((1.0)*x4191);
IkReal x4198=(sj5*x4191);
IkReal x4199=(cj5*x4190);
IkReal x4200=((1.0)*sj5*x4190);
IkReal x4201=(x4196+x4195);
evalcond[0]=(((r20*x4199))+((r22*x4191))+(((-1.0)*r21*x4200)));
evalcond[1]=(((r21*x4198))+(((-1.0)*cj5*r20*x4197))+((r22*x4190)));
evalcond[2]=(((cj2*sj0))+((r02*x4191))+(((-1.0)*r01*x4200))+((x4190*x4192))+(((-1.0)*sj2*x4193)));
evalcond[3]=(((r12*x4190))+((r11*x4198))+(((-1.0)*cj2*x4194))+(((-1.0)*cj5*r10*x4197))+((cj0*sj2)));
evalcond[4]=(((r12*x4191))+(((-1.0)*r11*x4200))+(((-1.0)*x4201))+((r10*x4199)));
evalcond[5]=(((r02*x4190))+(((-1.0)*x4201))+((r01*x4198))+(((-1.0)*x4192*x4197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4202=((1.0)*cj5);
IkReal x4203=(r21*sj5);
IkReal x4204=(cj2*sj0);
IkReal x4205=(cj0*sj2);
CheckValue<IkReal> x4206=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4202)))),-1);
if(!x4206.valid){
continue;
}
CheckValue<IkReal> x4207 = IKatan2WithCheck(IkReal((((r22*x4204))+(((-1.0)*r22*x4205)))),IkReal(((((-1.0)*x4203*x4205))+((x4203*x4204))+((cj5*r20*x4205))+(((-1.0)*r20*x4202*x4204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4206.value)))+(x4207.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4208=IKsin(j4);
IkReal x4209=IKcos(j4);
IkReal x4210=(cj5*r00);
IkReal x4211=((1.0)*cj0);
IkReal x4212=((1.0)*sj0);
IkReal x4213=(cj2*x4211);
IkReal x4214=(sj2*x4212);
IkReal x4215=((1.0)*x4209);
IkReal x4216=(sj5*x4209);
IkReal x4217=(cj5*x4208);
IkReal x4218=((1.0)*sj5*x4208);
IkReal x4219=(x4214+x4213);
evalcond[0]=(((r22*x4209))+(((-1.0)*r21*x4218))+((r20*x4217)));
evalcond[1]=(((r22*x4208))+(((-1.0)*cj5*r20*x4215))+((r21*x4216)));
evalcond[2]=(((cj2*sj0))+((r02*x4209))+(((-1.0)*sj2*x4211))+(((-1.0)*r01*x4218))+((x4208*x4210)));
evalcond[3]=(((r11*x4216))+(((-1.0)*cj5*r10*x4215))+(((-1.0)*cj2*x4212))+((cj0*sj2))+((r12*x4208)));
evalcond[4]=((((-1.0)*r11*x4218))+((r10*x4217))+(((-1.0)*x4219))+((r12*x4209)));
evalcond[5]=(((r02*x4208))+(((-1.0)*x4210*x4215))+((r01*x4216))+(((-1.0)*x4219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4220=(cj2*sj0);
IkReal x4221=(r21*sj5);
IkReal x4222=(cj5*r20);
IkReal x4223=((1.0)*cj0*sj2);
CheckValue<IkReal> x4224 = IKatan2WithCheck(IkReal((((x4220*x4222))+((cj0*sj2*x4221))+(((-1.0)*x4222*x4223))+(((-1.0)*x4220*x4221)))),IkReal((((r22*x4220))+(((-1.0)*r22*x4223)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4224.valid){
continue;
}
CheckValue<IkReal> x4225=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4224.value)+(((1.5707963267949)*(x4225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4226=IKsin(j4);
IkReal x4227=IKcos(j4);
IkReal x4228=(cj5*r00);
IkReal x4229=((1.0)*cj0);
IkReal x4230=((1.0)*sj0);
IkReal x4231=(cj2*x4229);
IkReal x4232=(sj2*x4230);
IkReal x4233=((1.0)*x4227);
IkReal x4234=(sj5*x4227);
IkReal x4235=(cj5*x4226);
IkReal x4236=((1.0)*sj5*x4226);
IkReal x4237=(x4232+x4231);
evalcond[0]=(((r22*x4227))+((r20*x4235))+(((-1.0)*r21*x4236)));
evalcond[1]=(((r22*x4226))+((r21*x4234))+(((-1.0)*cj5*r20*x4233)));
evalcond[2]=((((-1.0)*sj2*x4229))+((cj2*sj0))+((r02*x4227))+(((-1.0)*r01*x4236))+((x4226*x4228)));
evalcond[3]=((((-1.0)*cj5*r10*x4233))+((cj0*sj2))+((r11*x4234))+((r12*x4226))+(((-1.0)*cj2*x4230)));
evalcond[4]=((((-1.0)*x4237))+((r10*x4235))+(((-1.0)*r11*x4236))+((r12*x4227)));
evalcond[5]=((((-1.0)*x4237))+((r01*x4234))+((r02*x4226))+(((-1.0)*x4228*x4233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4238=((-1.0)*r10);
IkReal x4240 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4240)==0){
continue;
}
IkReal x4239=pow(x4240,-0.5);
CheckValue<IkReal> x4241 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4238),IKFAST_ATAN2_MAGTHRESH);
if(!x4241.valid){
continue;
}
IkReal gconst24=((-1.0)*(x4241.value));
IkReal gconst25=(r11*x4239);
IkReal gconst26=(x4238*x4239);
CheckValue<IkReal> x4242 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4242.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4242.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4243=(sj1*sj2);
IkReal x4244=(gconst25*r21);
IkReal x4245=(cj2*sj1);
IkReal x4246=(gconst26*r20*sj1);
CheckValue<IkReal> x4247=IKPowWithIntegerCheck(IKsign(((x4244*x4244)+(r22*r22)+(((-2.0)*gconst26*r20*x4244))+(((gconst26*gconst26)*(r20*r20))))),-1);
if(!x4247.valid){
continue;
}
CheckValue<IkReal> x4248 = IKatan2WithCheck(IkReal(((((-1.0)*x4243*x4244))+((r22*x4245))+((gconst26*r20*x4243)))),IkReal(((((-1.0)*gconst26*r20*x4245))+((r22*x4243))+((x4244*x4245)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4247.value)))+(x4248.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4249=IKsin(j4);
IkReal x4250=IKcos(j4);
IkReal x4251=(gconst26*r10);
IkReal x4252=(cj1*cj2);
IkReal x4253=((1.0)*sj1);
IkReal x4254=(gconst26*r20);
IkReal x4255=(cj0*sj2);
IkReal x4256=(sj0*sj2);
IkReal x4257=(gconst26*r00);
IkReal x4258=(gconst25*x4250);
IkReal x4259=((1.0)*x4250);
IkReal x4260=((1.0)*gconst25*x4249);
evalcond[0]=((((-1.0)*sj2*x4253))+((r22*x4250))+(((-1.0)*r21*x4260))+((x4249*x4254)));
evalcond[1]=(((r22*x4249))+(((-1.0)*x4254*x4259))+(((-1.0)*cj2*x4253))+((r21*x4258)));
evalcond[2]=(((cj2*sj0))+((r02*x4250))+(((-1.0)*r01*x4260))+((x4249*x4257))+((cj1*x4255)));
evalcond[3]=((((-1.0)*x4251*x4259))+((r11*x4258))+x4255+((sj0*x4252))+((r12*x4249)));
evalcond[4]=((((-1.0)*r11*x4260))+((r12*x4250))+((x4249*x4251))+(((-1.0)*cj0*cj2))+((cj1*x4256)));
evalcond[5]=(((cj0*x4252))+(((-1.0)*x4257*x4259))+((r01*x4258))+((r02*x4249))+(((-1.0)*x4256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4261=((-1.0)*r11);
IkReal x4263 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4263)==0){
continue;
}
IkReal x4262=pow(x4263,-0.5);
CheckValue<IkReal> x4264 = IKatan2WithCheck(IkReal(x4261),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4264.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x4264.value))));
IkReal gconst28=(x4261*x4262);
IkReal gconst29=((1.0)*r10*x4262);
CheckValue<IkReal> x4265 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4265.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4265.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4266=(r22*sj1);
IkReal x4267=(gconst28*r21);
IkReal x4268=(gconst29*r20);
IkReal x4269=(sj1*sj2);
IkReal x4270=(cj2*sj1);
CheckValue<IkReal> x4271 = IKatan2WithCheck(IkReal(((((-1.0)*x4267*x4269))+((x4268*x4269))+((cj2*x4266)))),IkReal((((x4267*x4270))+(((-1.0)*x4268*x4270))+((sj2*x4266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4271.valid){
continue;
}
CheckValue<IkReal> x4272=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x4267*x4268))+(x4268*x4268)+(x4267*x4267))),-1);
if(!x4272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4271.value)+(((1.5707963267949)*(x4272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4273=IKsin(j4);
IkReal x4274=IKcos(j4);
IkReal x4275=(gconst29*r10);
IkReal x4276=(cj1*cj2);
IkReal x4277=((1.0)*sj1);
IkReal x4278=(gconst29*r20);
IkReal x4279=(cj0*sj2);
IkReal x4280=(sj0*sj2);
IkReal x4281=(gconst29*r00);
IkReal x4282=((1.0)*x4274);
IkReal x4283=(gconst28*x4274);
IkReal x4284=((1.0)*gconst28*x4273);
evalcond[0]=((((-1.0)*sj2*x4277))+(((-1.0)*r21*x4284))+((x4273*x4278))+((r22*x4274)));
evalcond[1]=((((-1.0)*x4278*x4282))+(((-1.0)*cj2*x4277))+((r21*x4283))+((r22*x4273)));
evalcond[2]=(((cj2*sj0))+((cj1*x4279))+((r02*x4274))+(((-1.0)*r01*x4284))+((x4273*x4281)));
evalcond[3]=((((-1.0)*x4275*x4282))+((r11*x4283))+((r12*x4273))+x4279+((sj0*x4276)));
evalcond[4]=(((r12*x4274))+(((-1.0)*r11*x4284))+(((-1.0)*cj0*cj2))+((cj1*x4280))+((x4273*x4275)));
evalcond[5]=(((r02*x4273))+((cj0*x4276))+(((-1.0)*x4280))+((r01*x4283))+(((-1.0)*x4281*x4282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4285=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4285);
rxp0_2=(py*r00);
rxp1_0=(r21*x4285);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=IKsign(r12);
j4eval[2]=((IKabs((cj0*cj2)))+(IKabs((cj0*sj2))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4286=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4286);
rxp0_2=(py*r00);
rxp1_0=(r21*x4286);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x4287=(cj0*cj1);
IkReal x4288=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x4288;
j4eval[1]=((IKabs((sj2*x4287)))+(IKabs((cj2*x4287))));
j4eval[2]=IKsign(x4288);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4289=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4289);
rxp0_2=(py*r00);
rxp1_0=(r21*x4289);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4290=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4290);
rxp0_2=(py*r00);
rxp1_0=(r21*x4290);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4291=IKPowWithIntegerCheck(r12,-1);
if(!x4291.valid){
continue;
}
sj4array[0]=((-2292.31615624427)*py*(x4291.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4292=IKsin(j4);
IkReal x4293=IKcos(j4);
IkReal x4294=(r01*sj5);
IkReal x4295=(r21*sj5);
IkReal x4296=((1.0)*x4292);
IkReal x4297=(cj5*x4292);
IkReal x4298=((1.0)*cj5*x4293);
evalcond[0]=(r12*x4293);
evalcond[1]=(((r20*x4297))+(((-1.0)*x4295*x4296)));
evalcond[2]=(((r00*x4297))+(((-1.0)*x4294*x4296)));
evalcond[3]=(((x4293*x4295))+(((-1.0)*r20*x4298)));
evalcond[4]=((((-1.0)*r00*x4298))+((x4293*x4294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4299=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4299);
rxp0_2=(py*r00);
rxp1_0=(r21*x4299);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4300=IKPowWithIntegerCheck(r12,-1);
if(!x4300.valid){
continue;
}
sj4array[0]=((-2292.31615624427)*py*(x4300.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4301=IKsin(j4);
IkReal x4302=IKcos(j4);
IkReal x4303=(r01*sj5);
IkReal x4304=(r21*sj5);
IkReal x4305=((1.0)*x4301);
IkReal x4306=(cj5*x4301);
IkReal x4307=((1.0)*cj5*x4302);
evalcond[0]=(r12*x4302);
evalcond[1]=(((r20*x4306))+(((-1.0)*x4304*x4305)));
evalcond[2]=((((-1.0)*x4303*x4305))+((r00*x4306)));
evalcond[3]=((((-1.0)*r20*x4307))+((x4302*x4304)));
evalcond[4]=((((-1.0)*r00*x4307))+((x4302*x4303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4308=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x4308.valid){
continue;
}
CheckValue<IkReal> x4309=IKPowWithIntegerCheck(r12,-1);
if(!x4309.valid){
continue;
}
if( IKabs(((-1.0)*cj0*cj1*sj2*(x4308.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj0*cj2*(x4309.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*cj1*sj2*(x4308.value)))+IKsqr((cj0*cj2*(x4309.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*cj1*sj2*(x4308.value)), (cj0*cj2*(x4309.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4310=IKsin(j4);
IkReal x4311=IKcos(j4);
IkReal x4312=(cj0*sj2);
IkReal x4313=(r01*sj5);
IkReal x4314=(r21*sj5);
IkReal x4315=(cj0*cj2);
IkReal x4316=((1.0)*x4310);
IkReal x4317=(cj5*x4310);
IkReal x4318=((1.0)*cj5*x4311);
evalcond[0]=(((r12*x4310))+x4312);
evalcond[1]=(((r12*x4311))+(((-1.0)*x4315)));
evalcond[2]=(((r20*x4317))+(((-1.0)*x4314*x4316)));
evalcond[3]=(((x4311*x4314))+(((-1.0)*r20*x4318)));
evalcond[4]=(((cj1*x4312))+((r00*x4317))+(((-1.0)*x4313*x4316)));
evalcond[5]=(((x4311*x4313))+((cj1*x4315))+(((-1.0)*r00*x4318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4319=(cj0*cj1);
CheckValue<IkReal> x4320=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x4320.valid){
continue;
}
CheckValue<IkReal> x4321 = IKatan2WithCheck(IkReal(((-1.0)*sj2*x4319)),IkReal((cj2*x4319)),IKFAST_ATAN2_MAGTHRESH);
if(!x4321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4320.value)))+(x4321.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4322=IKsin(j4);
IkReal x4323=IKcos(j4);
IkReal x4324=(cj0*sj2);
IkReal x4325=(r01*sj5);
IkReal x4326=(r21*sj5);
IkReal x4327=(cj0*cj2);
IkReal x4328=((1.0)*x4322);
IkReal x4329=(cj5*x4322);
IkReal x4330=((1.0)*cj5*x4323);
evalcond[0]=(((r12*x4322))+x4324);
evalcond[1]=((((-1.0)*x4327))+((r12*x4323)));
evalcond[2]=(((r20*x4329))+(((-1.0)*x4326*x4328)));
evalcond[3]=((((-1.0)*r20*x4330))+((x4323*x4326)));
evalcond[4]=(((r00*x4329))+(((-1.0)*x4325*x4328))+((cj1*x4324)));
evalcond[5]=((((-1.0)*r00*x4330))+((x4323*x4325))+((cj1*x4327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4331 = IKatan2WithCheck(IkReal(((-1.0)*cj0*sj2)),IkReal((cj0*cj2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4331.valid){
continue;
}
CheckValue<IkReal> x4332=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x4332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4331.value)+(((1.5707963267949)*(x4332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4333=IKsin(j4);
IkReal x4334=IKcos(j4);
IkReal x4335=(cj0*sj2);
IkReal x4336=(r01*sj5);
IkReal x4337=(r21*sj5);
IkReal x4338=(cj0*cj2);
IkReal x4339=((1.0)*x4333);
IkReal x4340=(cj5*x4333);
IkReal x4341=((1.0)*cj5*x4334);
evalcond[0]=(((r12*x4333))+x4335);
evalcond[1]=((((-1.0)*x4338))+((r12*x4334)));
evalcond[2]=((((-1.0)*x4337*x4339))+((r20*x4340)));
evalcond[3]=((((-1.0)*r20*x4341))+((x4334*x4337)));
evalcond[4]=(((r00*x4340))+((cj1*x4335))+(((-1.0)*x4336*x4339)));
evalcond[5]=(((x4334*x4336))+((cj1*x4338))+(((-1.0)*r00*x4341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4342=cj5*cj5;
IkReal x4343=(sj1*sj2);
IkReal x4344=((1.0)*cj5);
IkReal x4345=(r11*sj5);
IkReal x4346=(cj0*sj2);
IkReal x4347=((1.0)*r12);
IkReal x4348=(r21*sj5);
IkReal x4349=(r11*r21);
IkReal x4350=(cj1*cj2*sj0);
CheckValue<IkReal> x4351=IKPowWithIntegerCheck(IKsign((((x4342*x4349))+((cj5*r10*x4348))+((cj5*r20*x4345))+(((-1.0)*r10*r20*x4342))+(((-1.0)*r22*x4347))+(((-1.0)*x4349)))),-1);
if(!x4351.valid){
continue;
}
CheckValue<IkReal> x4352 = IKatan2WithCheck(IkReal((((x4343*x4345))+((r22*x4350))+((r22*x4346))+(((-1.0)*r10*x4343*x4344)))),IkReal((((x4348*x4350))+(((-1.0)*x4343*x4347))+(((-1.0)*r20*x4344*x4346))+(((-1.0)*r20*x4344*x4350))+((x4346*x4348)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4351.value)))+(x4352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4353=IKsin(j4);
IkReal x4354=IKcos(j4);
IkReal x4355=(cj5*r00);
IkReal x4356=(cj1*cj2);
IkReal x4357=((1.0)*sj1);
IkReal x4358=(cj0*sj2);
IkReal x4359=(sj0*sj2);
IkReal x4360=((1.0)*x4354);
IkReal x4361=(sj5*x4354);
IkReal x4362=(cj5*x4353);
IkReal x4363=((1.0)*sj5*x4353);
evalcond[0]=(((r20*x4362))+((r22*x4354))+(((-1.0)*r21*x4363))+(((-1.0)*sj2*x4357)));
evalcond[1]=((((-1.0)*cj2*x4357))+(((-1.0)*cj5*r20*x4360))+((r21*x4361))+((r22*x4353)));
evalcond[2]=(((cj2*sj0))+((cj1*x4358))+((x4353*x4355))+((r02*x4354))+(((-1.0)*r01*x4363)));
evalcond[3]=((((-1.0)*cj5*r10*x4360))+((r11*x4361))+x4358+((r12*x4353))+((sj0*x4356)));
evalcond[4]=(((cj1*x4359))+((r10*x4362))+(((-1.0)*r11*x4363))+((r12*x4354))+(((-1.0)*cj0*cj2)));
evalcond[5]=(((cj0*x4356))+(((-1.0)*x4355*x4360))+((r01*x4361))+((r02*x4353))+(((-1.0)*x4359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4364=cj5*cj5;
IkReal x4365=r21*r21;
IkReal x4366=((1.0)*sj1);
IkReal x4367=(cj5*r20);
IkReal x4368=(r21*sj5);
IkReal x4369=(r22*sj1);
CheckValue<IkReal> x4370=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x4367*x4368))+x4365+((x4364*(r20*r20)))+(((-1.0)*x4364*x4365)))),-1);
if(!x4370.valid){
continue;
}
CheckValue<IkReal> x4371 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x4366*x4368))+((cj2*x4369))+((sj1*sj2*x4367)))),IkReal(((((-1.0)*cj2*x4366*x4367))+((sj2*x4369))+((cj2*sj1*x4368)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4370.value)))+(x4371.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4372=IKsin(j4);
IkReal x4373=IKcos(j4);
IkReal x4374=(cj5*r00);
IkReal x4375=(cj1*cj2);
IkReal x4376=((1.0)*sj1);
IkReal x4377=(cj0*sj2);
IkReal x4378=(sj0*sj2);
IkReal x4379=((1.0)*x4373);
IkReal x4380=(sj5*x4373);
IkReal x4381=(cj5*x4372);
IkReal x4382=((1.0)*sj5*x4372);
evalcond[0]=(((r22*x4373))+(((-1.0)*sj2*x4376))+((r20*x4381))+(((-1.0)*r21*x4382)));
evalcond[1]=(((r22*x4372))+(((-1.0)*cj2*x4376))+((r21*x4380))+(((-1.0)*cj5*r20*x4379)));
evalcond[2]=(((cj1*x4377))+((cj2*sj0))+((r02*x4373))+(((-1.0)*r01*x4382))+((x4372*x4374)));
evalcond[3]=(((sj0*x4375))+((r12*x4372))+(((-1.0)*cj5*r10*x4379))+x4377+((r11*x4380)));
evalcond[4]=((((-1.0)*r11*x4382))+((cj1*x4378))+((r12*x4373))+(((-1.0)*cj0*cj2))+((r10*x4381)));
evalcond[5]=(((r02*x4372))+((cj0*x4375))+(((-1.0)*x4374*x4379))+(((-1.0)*x4378))+((r01*x4380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4383=((1.0)*cj5);
IkReal x4384=(r21*sj5);
IkReal x4385=(cj2*sj0);
IkReal x4386=(sj1*sj2);
IkReal x4387=(cj0*cj1*sj2);
CheckValue<IkReal> x4388=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4383))+(((-1.0)*r10*sj5)))),-1);
if(!x4388.valid){
continue;
}
CheckValue<IkReal> x4389 = IKatan2WithCheck(IkReal((((r22*x4387))+((r22*x4385))+((r02*x4386)))),IkReal((((r01*sj5*x4386))+(((-1.0)*r00*x4383*x4386))+((x4384*x4385))+((x4384*x4387))+(((-1.0)*r20*x4383*x4385))+(((-1.0)*r20*x4383*x4387)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4388.value)))+(x4389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4390=IKsin(j4);
IkReal x4391=IKcos(j4);
IkReal x4392=(cj5*r00);
IkReal x4393=(cj1*cj2);
IkReal x4394=((1.0)*sj1);
IkReal x4395=(cj0*sj2);
IkReal x4396=(sj0*sj2);
IkReal x4397=((1.0)*x4391);
IkReal x4398=(sj5*x4391);
IkReal x4399=(cj5*x4390);
IkReal x4400=((1.0)*sj5*x4390);
evalcond[0]=(((r22*x4391))+(((-1.0)*r21*x4400))+((r20*x4399))+(((-1.0)*sj2*x4394)));
evalcond[1]=(((r22*x4390))+((r21*x4398))+(((-1.0)*cj2*x4394))+(((-1.0)*cj5*r20*x4397)));
evalcond[2]=(((cj2*sj0))+((r02*x4391))+(((-1.0)*r01*x4400))+((cj1*x4395))+((x4390*x4392)));
evalcond[3]=((((-1.0)*cj5*r10*x4397))+x4395+((r11*x4398))+((sj0*x4393))+((r12*x4390)));
evalcond[4]=((((-1.0)*r11*x4400))+((cj1*x4396))+(((-1.0)*cj0*cj2))+((r10*x4399))+((r12*x4391)));
evalcond[5]=(((r01*x4398))+((cj0*x4393))+(((-1.0)*x4396))+((r02*x4390))+(((-1.0)*x4392*x4397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4401=cj5*cj5;
IkReal x4402=r21*r21;
IkReal x4403=((1.0)*sj1);
IkReal x4404=(cj5*r20);
IkReal x4405=(r21*sj5);
IkReal x4406=(r22*sj1);
CheckValue<IkReal> x4407=IKPowWithIntegerCheck(IKsign((x4402+(r22*r22)+(((-2.0)*x4404*x4405))+(((-1.0)*x4401*x4402))+((x4401*(r20*r20))))),-1);
if(!x4407.valid){
continue;
}
CheckValue<IkReal> x4408 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x4403*x4405))+((sj1*sj2*x4404))+((cj2*x4406)))),IkReal(((((-1.0)*cj2*x4403*x4404))+((sj2*x4406))+((cj2*sj1*x4405)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4407.value)))+(x4408.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4409=IKsin(j4);
IkReal x4410=IKcos(j4);
IkReal x4411=((1.0)*sj1);
IkReal x4412=(r21*sj5);
IkReal x4413=(cj5*r20);
evalcond[0]=(((r22*x4410))+(((-1.0)*sj2*x4411))+(((-1.0)*x4409*x4412))+((x4409*x4413)));
evalcond[1]=(((r22*x4409))+(((-1.0)*x4410*x4413))+((x4410*x4412))+(((-1.0)*cj2*x4411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4414=((1.0)*sj5);
IkReal x4415=((1.0)*cj5);
j0eval[0]=sj1;
j0eval[1]=((IKabs(((((-1.0)*r10*x4414))+(((-1.0)*r11*x4415)))))+(IKabs(((((-1.0)*r01*x4415))+(((-1.0)*r00*x4414))))));
j0eval[2]=IKsign(sj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=cj2;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=cj1;
j0eval[1]=cj2;
j0eval[2]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4416=((1.0)*sj5);
IkReal x4417=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x4416))+(((-1.0)*r11*x4417)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x4417))+(((-1.0)*r00*x4416)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x4416))+(((-1.0)*r11*x4417))))+IKsqr(((((-1.0)*r01*x4417))+(((-1.0)*r00*x4416))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x4416))+(((-1.0)*r11*x4417))), ((((-1.0)*r01*x4417))+(((-1.0)*r00*x4416))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4418=IKsin(j0);
IkReal x4419=IKcos(j0);
IkReal x4420=(cj5*r00);
IkReal x4421=(cj5*r01);
IkReal x4422=((1.0)*cj4);
IkReal x4423=(cj5*r10);
IkReal x4424=(r00*sj5);
IkReal x4425=(cj5*r11);
IkReal x4426=(cj4*sj5);
IkReal x4427=(r10*sj5);
IkReal x4428=((1.0)*sj4*sj5);
IkReal x4429=(sj2*x4419);
IkReal x4430=(sj2*x4418);
evalcond[0]=(x4419+x4421+x4424);
evalcond[1]=(x4418+x4427+x4425);
evalcond[2]=((((-1.0)*r01*x4428))+((sj4*x4420))+((cj2*x4418))+((cj4*r02)));
evalcond[3]=((((-1.0)*x4422*x4423))+x4429+((r12*sj4))+((r11*x4426)));
evalcond[4]=(((sj4*x4423))+(((-1.0)*cj2*x4419))+(((-1.0)*r11*x4428))+((cj4*r12)));
evalcond[5]=((((-1.0)*x4420*x4422))+(((-1.0)*x4430))+((r02*sj4))+((r01*x4426)));
evalcond[6]=((((0.41956376)*x4419))+(((-0.4)*x4424))+(((-0.4)*x4421))+(((-1.0)*px))+(((-0.00043624)*x4430)));
evalcond[7]=((((0.41956376)*x4418))+(((-0.4)*x4427))+(((-0.4)*x4425))+(((-1.0)*py))+(((0.00043624)*x4429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4431=IKsin(j0);
IkReal x4432=IKcos(j0);
IkReal x4433=(cj5*r00);
IkReal x4434=(cj5*r01);
IkReal x4435=((1.0)*cj4);
IkReal x4436=(cj5*r10);
IkReal x4437=(r00*sj5);
IkReal x4438=(cj5*r11);
IkReal x4439=(cj4*sj5);
IkReal x4440=(r10*sj5);
IkReal x4441=((1.0)*sj4*sj5);
IkReal x4442=(sj2*x4432);
IkReal x4443=((1.0)*x4431);
IkReal x4444=((1.0)*x4432);
evalcond[0]=(x4434+x4437+(((-1.0)*x4444)));
evalcond[1]=(x4438+x4440+(((-1.0)*x4443)));
evalcond[2]=(((cj2*x4431))+(((-1.0)*r01*x4441))+((sj4*x4433))+((cj4*r02)));
evalcond[3]=(x4442+(((-1.0)*x4435*x4436))+((r12*sj4))+((r11*x4439)));
evalcond[4]=((((-1.0)*r11*x4441))+((sj4*x4436))+(((-1.0)*cj2*x4444))+((cj4*r12)));
evalcond[5]=((((-1.0)*x4433*x4435))+(((-1.0)*sj2*x4443))+((r02*sj4))+((r01*x4439)));
evalcond[6]=((((-1.0)*px))+(((-0.42043624)*x4432))+(((-0.00043624)*sj2*x4431))+(((-0.4)*x4437))+(((-0.4)*x4434)));
evalcond[7]=((((0.00043624)*x4442))+(((-1.0)*py))+(((-0.42043624)*x4431))+(((-0.4)*x4440))+(((-0.4)*x4438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x4445=((1.0)*sj5);
IkReal x4446=((1.0)*cj5);
j0eval[0]=sj1;
j0eval[1]=((IKabs(((((-1.0)*r11*x4446))+(((-1.0)*r10*x4445)))))+(IKabs(((((-1.0)*r00*x4445))+(((-1.0)*r01*x4446))))));
j0eval[2]=IKsign(sj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4447=((1.0)*sj5);
IkReal x4448=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x4448))+(((-1.0)*r10*x4447)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x4447))+(((-1.0)*r01*x4448)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x4448))+(((-1.0)*r10*x4447))))+IKsqr(((((-1.0)*r00*x4447))+(((-1.0)*r01*x4448))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x4448))+(((-1.0)*r10*x4447))), ((((-1.0)*r00*x4447))+(((-1.0)*r01*x4448))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4449=IKcos(j0);
IkReal x4450=IKsin(j0);
IkReal x4451=(cj4*sj5);
IkReal x4452=(r00*sj5);
IkReal x4453=(r10*sj5);
IkReal x4454=(cj5*r11);
IkReal x4455=(cj5*r01);
IkReal x4456=((1.0)*cj4*cj5);
evalcond[0]=(x4449+x4452+x4455);
evalcond[1]=(x4453+x4450+x4454);
evalcond[2]=(x4449+(((-1.0)*r10*x4456))+((r11*x4451))+((r12*sj4)));
evalcond[3]=(((r01*x4451))+(((-1.0)*x4450))+((r02*sj4))+(((-1.0)*r00*x4456)));
evalcond[4]=((((0.41956376)*x4449))+(((-1.0)*px))+(((-0.00043624)*x4450))+(((-0.4)*x4455))+(((-0.4)*x4452)));
evalcond[5]=((((0.41956376)*x4450))+(((0.00043624)*x4449))+(((-1.0)*py))+(((-0.4)*x4453))+(((-0.4)*x4454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4457=IKcos(j0);
IkReal x4458=IKsin(j0);
IkReal x4459=(cj5*r01);
IkReal x4460=(r00*sj5);
IkReal x4461=(cj5*r11);
IkReal x4462=(cj4*sj5);
IkReal x4463=(r10*sj5);
IkReal x4464=((1.0)*x4458);
IkReal x4465=((1.0)*cj4*cj5);
evalcond[0]=(x4459+x4460+(((-1.0)*x4457)));
evalcond[1]=(x4463+x4461+(((-1.0)*x4464)));
evalcond[2]=(x4457+((r11*x4462))+(((-1.0)*r10*x4465))+((r12*sj4)));
evalcond[3]=(((r02*sj4))+((r01*x4462))+(((-1.0)*x4464))+(((-1.0)*r00*x4465)));
evalcond[4]=((((-1.0)*px))+(((-0.00043624)*x4458))+(((-0.4)*x4459))+(((-0.4)*x4460))+(((-0.42043624)*x4457)));
evalcond[5]=((((0.00043624)*x4457))+(((-1.0)*py))+(((-0.4)*x4463))+(((-0.4)*x4461))+(((-0.42043624)*x4458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4466=((1146.15807812213)*py);
IkReal x4467=((1146.15807812213)*px);
if( IKabs(((((-1.0)*x4466))+(((-1.0)*x4467)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4466+(((-1.0)*x4467)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4466))+(((-1.0)*x4467))))+IKsqr((x4466+(((-1.0)*x4467))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x4466))+(((-1.0)*x4467))), (x4466+(((-1.0)*x4467))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4468=IKcos(j0);
IkReal x4469=IKsin(j0);
IkReal x4470=(cj5*r00);
IkReal x4471=((1.0)*cj4);
IkReal x4472=(cj4*sj5);
IkReal x4473=(cj5*r10);
IkReal x4474=((0.00043624)*x4468);
IkReal x4475=((0.00043624)*x4469);
IkReal x4476=((1.0)*sj4*sj5);
evalcond[0]=((((-1.0)*x4474))+(((-1.0)*x4475))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*x4475))+x4474+(((-1.0)*py)));
evalcond[2]=(x4468+((sj4*x4470))+(((-1.0)*r01*x4476))+((cj4*r02)));
evalcond[3]=((((-1.0)*r11*x4476))+x4469+((sj4*x4473))+((cj4*r12)));
evalcond[4]=(x4468+(((-1.0)*x4471*x4473))+((r12*sj4))+((r11*x4472)));
evalcond[5]=((((-1.0)*x4469))+((r02*sj4))+(((-1.0)*x4470*x4471))+((r01*x4472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4477=((1146.15807812213)*py);
IkReal x4478=((1146.15807812213)*px);
if( IKabs(((((-1.0)*x4478))+(((-1.0)*x4477)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4478))+x4477)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4478))+(((-1.0)*x4477))))+IKsqr(((((-1.0)*x4478))+x4477))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x4478))+(((-1.0)*x4477))), ((((-1.0)*x4478))+x4477));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4479=IKcos(j0);
IkReal x4480=IKsin(j0);
IkReal x4481=(cj5*r00);
IkReal x4482=((1.0)*cj4);
IkReal x4483=(r11*sj5);
IkReal x4484=((1.0)*sj4);
IkReal x4485=(cj5*r10);
IkReal x4486=(r01*sj5);
IkReal x4487=((0.00043624)*x4479);
IkReal x4488=((0.00043624)*x4480);
IkReal x4489=((1.0)*x4480);
evalcond[0]=((((-1.0)*px))+(((-1.0)*x4487))+(((-1.0)*x4488)));
evalcond[1]=(x4487+(((-1.0)*py))+(((-1.0)*x4488)));
evalcond[2]=(((cj4*x4483))+x4479+((r12*sj4))+(((-1.0)*x4482*x4485)));
evalcond[3]=((((-1.0)*x4484*x4486))+((sj4*x4481))+(((-1.0)*x4479))+((cj4*r02)));
evalcond[4]=(((sj4*x4485))+(((-1.0)*x4483*x4484))+((cj4*r12))+(((-1.0)*x4489)));
evalcond[5]=((((-1.0)*x4481*x4482))+((cj4*x4486))+((r02*sj4))+(((-1.0)*x4489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4490=((1.0)*cj5);
CheckValue<IkReal> x4491=IKPowWithIntegerCheck(cj1,-1);
if(!x4491.valid){
continue;
}
CheckValue<IkReal> x4492=IKPowWithIntegerCheck(sj1,-1);
if(!x4492.valid){
continue;
}
if( IKabs(((x4491.value)*((((r11*sj4*sj5))+(((-1.0)*r10*sj4*x4490))+(((-1.0)*cj4*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4492.value)*(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4490)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4491.value)*((((r11*sj4*sj5))+(((-1.0)*r10*sj4*x4490))+(((-1.0)*cj4*r12))))))+IKsqr(((x4492.value)*(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4490))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x4491.value)*((((r11*sj4*sj5))+(((-1.0)*r10*sj4*x4490))+(((-1.0)*cj4*r12))))), ((x4492.value)*(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4490))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4493=IKcos(j0);
IkReal x4494=IKsin(j0);
IkReal x4495=(cj5*r00);
IkReal x4496=(cj5*r01);
IkReal x4497=(r00*sj5);
IkReal x4498=((1.0)*cj4);
IkReal x4499=(cj5*r10);
IkReal x4500=(cj5*r11);
IkReal x4501=(cj4*sj5);
IkReal x4502=(r10*sj5);
IkReal x4503=((0.00043624)*x4493);
IkReal x4504=((0.00043624)*x4494);
IkReal x4505=((1.0)*sj4*sj5);
IkReal x4506=(sj1*x4494);
IkReal x4507=(sj1*x4493);
evalcond[0]=(x4497+x4496+x4507);
evalcond[1]=(x4506+x4500+x4502);
evalcond[2]=(x4493+(((-1.0)*x4498*x4499))+((r11*x4501))+((r12*sj4)));
evalcond[3]=((((-1.0)*r01*x4505))+((sj4*x4495))+((cj1*x4493))+((cj4*r02)));
evalcond[4]=(((sj4*x4499))+(((-1.0)*r11*x4505))+((cj1*x4494))+((cj4*r12)));
evalcond[5]=((((-1.0)*x4494))+(((-1.0)*x4495*x4498))+((r02*sj4))+((r01*x4501)));
evalcond[6]=((((-1.0)*x4504))+(((-1.0)*x4503))+(((0.42)*x4507))+(((-1.0)*px))+(((-0.4)*x4496))+(((-0.4)*x4497)));
evalcond[7]=((((-1.0)*x4504))+x4503+(((-0.4)*x4502))+(((-0.4)*x4500))+(((0.42)*x4506))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4508=((1.0)*cj5);
CheckValue<IkReal> x4509=IKPowWithIntegerCheck(sj1,-1);
if(!x4509.valid){
continue;
}
if( IKabs((((r02*sj4))+(((-1.0)*cj4*r00*x4508))+((cj4*r01*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4509.value)*(((((-1.0)*r01*x4508))+(((-1.0)*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*sj4))+(((-1.0)*cj4*r00*x4508))+((cj4*r01*sj5))))+IKsqr(((x4509.value)*(((((-1.0)*r01*x4508))+(((-1.0)*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r02*sj4))+(((-1.0)*cj4*r00*x4508))+((cj4*r01*sj5))), ((x4509.value)*(((((-1.0)*r01*x4508))+(((-1.0)*r00*sj5))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4510=IKcos(j0);
IkReal x4511=IKsin(j0);
IkReal x4512=(cj5*r00);
IkReal x4513=(cj5*r01);
IkReal x4514=(r00*sj5);
IkReal x4515=((1.0)*cj4);
IkReal x4516=(cj5*r10);
IkReal x4517=(cj5*r11);
IkReal x4518=(cj4*sj5);
IkReal x4519=(r10*sj5);
IkReal x4520=((0.00043624)*x4510);
IkReal x4521=((0.00043624)*x4511);
IkReal x4522=((1.0)*sj4*sj5);
IkReal x4523=(sj1*x4511);
IkReal x4524=(sj1*x4510);
evalcond[0]=(x4513+x4514+x4524);
evalcond[1]=(x4519+x4517+x4523);
evalcond[2]=(x4510+(((-1.0)*x4515*x4516))+((r11*x4518))+((r12*sj4)));
evalcond[3]=((((-1.0)*r01*x4522))+((cj1*x4510))+((sj4*x4512))+((cj4*r02)));
evalcond[4]=(((cj1*x4511))+((sj4*x4516))+(((-1.0)*r11*x4522))+((cj4*r12)));
evalcond[5]=((((-1.0)*x4512*x4515))+((r02*sj4))+((r01*x4518))+(((-1.0)*x4511)));
evalcond[6]=((((-1.0)*x4520))+(((-1.0)*x4521))+(((0.42)*x4524))+(((-1.0)*px))+(((-0.4)*x4514))+(((-0.4)*x4513)));
evalcond[7]=((((-1.0)*x4521))+x4520+(((0.42)*x4523))+(((-1.0)*py))+(((-0.4)*x4517))+(((-0.4)*x4519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4525=((1.0)*sj5);
IkReal x4526=((1.0)*cj5);
CheckValue<IkReal> x4527 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4525))+(((-1.0)*r11*x4526)))),IkReal(((((-1.0)*r01*x4526))+(((-1.0)*r00*x4525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4527.valid){
continue;
}
CheckValue<IkReal> x4528=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x4528.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4527.value)+(((1.5707963267949)*(x4528.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4529=IKcos(j0);
IkReal x4530=IKsin(j0);
IkReal x4531=(cj5*r00);
IkReal x4532=(cj5*r01);
IkReal x4533=(r00*sj5);
IkReal x4534=((1.0)*cj4);
IkReal x4535=(cj5*r10);
IkReal x4536=(cj5*r11);
IkReal x4537=(cj4*sj5);
IkReal x4538=(r10*sj5);
IkReal x4539=((0.00043624)*x4529);
IkReal x4540=((0.00043624)*x4530);
IkReal x4541=((1.0)*sj4*sj5);
IkReal x4542=(sj1*x4530);
IkReal x4543=(sj1*x4529);
evalcond[0]=(x4543+x4532+x4533);
evalcond[1]=(x4542+x4538+x4536);
evalcond[2]=(x4529+((r12*sj4))+(((-1.0)*x4534*x4535))+((r11*x4537)));
evalcond[3]=(((cj1*x4529))+((sj4*x4531))+(((-1.0)*r01*x4541))+((cj4*r02)));
evalcond[4]=(((sj4*x4535))+(((-1.0)*r11*x4541))+((cj4*r12))+((cj1*x4530)));
evalcond[5]=(((r01*x4537))+(((-1.0)*x4530))+(((-1.0)*x4531*x4534))+((r02*sj4)));
evalcond[6]=((((-0.4)*x4533))+(((-0.4)*x4532))+(((-1.0)*x4539))+(((-1.0)*px))+(((0.42)*x4543))+(((-1.0)*x4540)));
evalcond[7]=((((-0.4)*x4536))+(((-0.4)*x4538))+x4539+(((-1.0)*py))+(((0.42)*x4542))+(((-1.0)*x4540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x4544=((1.0)*sj5);
IkReal x4545=((1.0)*cj5);
j0eval[0]=sj1;
j0eval[1]=((IKabs(((((-1.0)*r00*x4544))+(((-1.0)*r01*x4545)))))+(IKabs(((((-1.0)*r10*x4544))+(((-1.0)*r11*x4545))))));
j0eval[2]=IKsign(sj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4546=((1.0)*sj5);
IkReal x4547=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x4546))+(((-1.0)*r11*x4547)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x4546))+(((-1.0)*r01*x4547)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x4546))+(((-1.0)*r11*x4547))))+IKsqr(((((-1.0)*r00*x4546))+(((-1.0)*r01*x4547))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x4546))+(((-1.0)*r11*x4547))), ((((-1.0)*r00*x4546))+(((-1.0)*r01*x4547))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4548=IKsin(j0);
IkReal x4549=IKcos(j0);
IkReal x4550=(cj4*sj5);
IkReal x4551=(r00*sj5);
IkReal x4552=(r10*sj5);
IkReal x4553=(cj5*r11);
IkReal x4554=(cj5*r01);
IkReal x4555=((1.0)*cj4*cj5);
evalcond[0]=(x4554+x4551+x4549);
evalcond[1]=(x4552+x4553+x4548);
evalcond[2]=((((-1.0)*r00*x4555))+((r01*x4550))+x4548+((r02*sj4)));
evalcond[3]=((((-1.0)*r10*x4555))+((r11*x4550))+(((-1.0)*x4549))+((r12*sj4)));
evalcond[4]=((((-0.4)*x4551))+(((-0.4)*x4554))+(((-1.0)*px))+(((0.41956376)*x4549))+(((0.00043624)*x4548)));
evalcond[5]=((((-0.00043624)*x4549))+(((-0.4)*x4552))+(((-0.4)*x4553))+(((-1.0)*py))+(((0.41956376)*x4548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4556=IKsin(j0);
IkReal x4557=IKcos(j0);
IkReal x4558=(cj5*r01);
IkReal x4559=(r00*sj5);
IkReal x4560=(cj5*r11);
IkReal x4561=(cj4*sj5);
IkReal x4562=(r10*sj5);
IkReal x4563=((1.0)*x4557);
IkReal x4564=((1.0)*cj4*cj5);
evalcond[0]=(x4558+x4559+(((-1.0)*x4563)));
evalcond[1]=(x4562+x4560+(((-1.0)*x4556)));
evalcond[2]=(x4556+(((-1.0)*r00*x4564))+((r02*sj4))+((r01*x4561)));
evalcond[3]=((((-1.0)*r10*x4564))+((r11*x4561))+((r12*sj4))+(((-1.0)*x4563)));
evalcond[4]=((((-0.4)*x4559))+(((-0.4)*x4558))+(((0.00043624)*x4556))+(((-1.0)*px))+(((-0.42043624)*x4557)));
evalcond[5]=((((-0.4)*x4562))+(((-0.4)*x4560))+(((-0.00043624)*x4557))+(((-1.0)*py))+(((-0.42043624)*x4556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4565=((1146.15807812213)*px);
IkReal x4566=((1146.15807812213)*py);
if( IKabs((x4565+(((-1.0)*x4566)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4565))+(((-1.0)*x4566)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4565+(((-1.0)*x4566))))+IKsqr(((((-1.0)*x4565))+(((-1.0)*x4566))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4565+(((-1.0)*x4566))), ((((-1.0)*x4565))+(((-1.0)*x4566))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4567=IKsin(j0);
IkReal x4568=IKcos(j0);
IkReal x4569=(cj5*r00);
IkReal x4570=((1.0)*cj4);
IkReal x4571=(cj4*sj5);
IkReal x4572=(cj5*r10);
IkReal x4573=((0.00043624)*x4567);
IkReal x4574=((0.00043624)*x4568);
IkReal x4575=((1.0)*x4568);
IkReal x4576=((1.0)*sj4*sj5);
evalcond[0]=((((-1.0)*x4574))+x4573+(((-1.0)*px)));
evalcond[1]=((((-1.0)*x4574))+(((-1.0)*x4573))+(((-1.0)*py)));
evalcond[2]=((((-1.0)*x4569*x4570))+x4567+((r02*sj4))+((r01*x4571)));
evalcond[3]=((((-1.0)*r01*x4576))+(((-1.0)*x4575))+((sj4*x4569))+((cj4*r02)));
evalcond[4]=(((sj4*x4572))+(((-1.0)*r11*x4576))+((cj4*r12))+(((-1.0)*x4567)));
evalcond[5]=((((-1.0)*x4575))+(((-1.0)*x4570*x4572))+((r11*x4571))+((r12*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4577=((1146.15807812213)*px);
IkReal x4578=((1146.15807812213)*py);
if( IKabs(((((-1.0)*x4578))+x4577)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4578))+(((-1.0)*x4577)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4578))+x4577))+IKsqr(((((-1.0)*x4578))+(((-1.0)*x4577))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x4578))+x4577), ((((-1.0)*x4578))+(((-1.0)*x4577))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4579=IKcos(j0);
IkReal x4580=IKsin(j0);
IkReal x4581=(cj5*r00);
IkReal x4582=((1.0)*cj4);
IkReal x4583=(cj4*sj5);
IkReal x4584=(cj5*r10);
IkReal x4585=((0.00043624)*x4580);
IkReal x4586=((0.00043624)*x4579);
IkReal x4587=((1.0)*sj4*sj5);
evalcond[0]=((((-1.0)*x4586))+x4585+(((-1.0)*px)));
evalcond[1]=((((-1.0)*x4586))+(((-1.0)*x4585))+(((-1.0)*py)));
evalcond[2]=(((sj4*x4581))+x4579+(((-1.0)*r01*x4587))+((cj4*r02)));
evalcond[3]=(((sj4*x4584))+x4580+(((-1.0)*r11*x4587))+((cj4*r12)));
evalcond[4]=(x4580+((r02*sj4))+(((-1.0)*x4581*x4582))+((r01*x4583)));
evalcond[5]=(((r12*sj4))+((r11*x4583))+(((-1.0)*x4579))+(((-1.0)*x4582*x4584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4588=((1.0)*sj5);
CheckValue<IkReal> x4589=IKPowWithIntegerCheck(cj1,-1);
if(!x4589.valid){
continue;
}
CheckValue<IkReal> x4590=IKPowWithIntegerCheck(sj1,-1);
if(!x4590.valid){
continue;
}
if( IKabs(((x4589.value)*((((cj5*r10*sj4))+(((-1.0)*r11*sj4*x4588))+((cj4*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4590.value)*(((((-1.0)*r00*x4588))+(((-1.0)*cj5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4589.value)*((((cj5*r10*sj4))+(((-1.0)*r11*sj4*x4588))+((cj4*r12))))))+IKsqr(((x4590.value)*(((((-1.0)*r00*x4588))+(((-1.0)*cj5*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x4589.value)*((((cj5*r10*sj4))+(((-1.0)*r11*sj4*x4588))+((cj4*r12))))), ((x4590.value)*(((((-1.0)*r00*x4588))+(((-1.0)*cj5*r01))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4591=IKsin(j0);
IkReal x4592=IKcos(j0);
IkReal x4593=(cj5*r00);
IkReal x4594=(cj5*r01);
IkReal x4595=(r00*sj5);
IkReal x4596=((1.0)*cj4);
IkReal x4597=(cj5*r10);
IkReal x4598=(cj5*r11);
IkReal x4599=(cj4*sj5);
IkReal x4600=(r10*sj5);
IkReal x4601=((0.00043624)*x4591);
IkReal x4602=((0.00043624)*x4592);
IkReal x4603=((1.0)*sj4*sj5);
IkReal x4604=(sj1*x4591);
IkReal x4605=((1.0)*x4592);
IkReal x4606=(sj1*x4592);
evalcond[0]=(x4594+x4595+x4606);
evalcond[1]=(x4598+x4604+x4600);
evalcond[2]=(x4591+(((-1.0)*x4593*x4596))+((r02*sj4))+((r01*x4599)));
evalcond[3]=((((-1.0)*x4605))+(((-1.0)*x4596*x4597))+((r11*x4599))+((r12*sj4)));
evalcond[4]=(((sj4*x4593))+(((-1.0)*cj1*x4605))+(((-1.0)*r01*x4603))+((cj4*r02)));
evalcond[5]=((((-1.0)*cj1*x4591))+((sj4*x4597))+(((-1.0)*r11*x4603))+((cj4*r12)));
evalcond[6]=((((-1.0)*x4602))+x4601+(((-0.4)*x4594))+(((-0.4)*x4595))+(((-1.0)*px))+(((0.42)*x4606)));
evalcond[7]=((((-1.0)*x4602))+(((-1.0)*x4601))+(((-0.4)*x4600))+(((-0.4)*x4598))+(((-1.0)*py))+(((0.42)*x4604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4607=((1.0)*cj5);
CheckValue<IkReal> x4608=IKPowWithIntegerCheck(sj1,-1);
if(!x4608.valid){
continue;
}
if( IKabs(((x4608.value)*(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4607)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r10*x4607))+((r12*sj4))+((cj4*r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4608.value)*(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4607))))))+IKsqr(((((-1.0)*cj4*r10*x4607))+((r12*sj4))+((cj4*r11*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x4608.value)*(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4607))))), ((((-1.0)*cj4*r10*x4607))+((r12*sj4))+((cj4*r11*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4609=IKsin(j0);
IkReal x4610=IKcos(j0);
IkReal x4611=(cj5*r00);
IkReal x4612=(cj5*r01);
IkReal x4613=(r00*sj5);
IkReal x4614=((1.0)*cj4);
IkReal x4615=(cj5*r10);
IkReal x4616=(cj5*r11);
IkReal x4617=(cj4*sj5);
IkReal x4618=(r10*sj5);
IkReal x4619=((0.00043624)*x4609);
IkReal x4620=((0.00043624)*x4610);
IkReal x4621=((1.0)*sj4*sj5);
IkReal x4622=(sj1*x4609);
IkReal x4623=((1.0)*x4610);
IkReal x4624=(sj1*x4610);
evalcond[0]=(x4613+x4612+x4624);
evalcond[1]=(x4618+x4616+x4622);
evalcond[2]=(x4609+((r02*sj4))+((r01*x4617))+(((-1.0)*x4611*x4614)));
evalcond[3]=(((r11*x4617))+(((-1.0)*x4614*x4615))+((r12*sj4))+(((-1.0)*x4623)));
evalcond[4]=((((-1.0)*cj1*x4623))+(((-1.0)*r01*x4621))+((sj4*x4611))+((cj4*r02)));
evalcond[5]=((((-1.0)*cj1*x4609))+((sj4*x4615))+(((-1.0)*r11*x4621))+((cj4*r12)));
evalcond[6]=((((0.42)*x4624))+x4619+(((-1.0)*px))+(((-0.4)*x4613))+(((-0.4)*x4612))+(((-1.0)*x4620)));
evalcond[7]=((((0.42)*x4622))+(((-1.0)*py))+(((-1.0)*x4619))+(((-0.4)*x4616))+(((-0.4)*x4618))+(((-1.0)*x4620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4625=((1.0)*sj5);
IkReal x4626=((1.0)*cj5);
CheckValue<IkReal> x4627 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x4626))+(((-1.0)*r10*x4625)))),IkReal(((((-1.0)*r01*x4626))+(((-1.0)*r00*x4625)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4627.valid){
continue;
}
CheckValue<IkReal> x4628=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x4628.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4627.value)+(((1.5707963267949)*(x4628.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4629=IKsin(j0);
IkReal x4630=IKcos(j0);
IkReal x4631=(cj5*r00);
IkReal x4632=(cj5*r01);
IkReal x4633=(r00*sj5);
IkReal x4634=((1.0)*cj4);
IkReal x4635=(cj5*r10);
IkReal x4636=(cj5*r11);
IkReal x4637=(cj4*sj5);
IkReal x4638=(r10*sj5);
IkReal x4639=((0.00043624)*x4629);
IkReal x4640=((0.00043624)*x4630);
IkReal x4641=((1.0)*sj4*sj5);
IkReal x4642=(sj1*x4629);
IkReal x4643=((1.0)*x4630);
IkReal x4644=(sj1*x4630);
evalcond[0]=(x4633+x4632+x4644);
evalcond[1]=(x4636+x4638+x4642);
evalcond[2]=(((r01*x4637))+x4629+((r02*sj4))+(((-1.0)*x4631*x4634)));
evalcond[3]=((((-1.0)*x4634*x4635))+((r11*x4637))+(((-1.0)*x4643))+((r12*sj4)));
evalcond[4]=((((-1.0)*cj1*x4643))+((sj4*x4631))+(((-1.0)*r01*x4641))+((cj4*r02)));
evalcond[5]=(((sj4*x4635))+(((-1.0)*r11*x4641))+(((-1.0)*cj1*x4629))+((cj4*r12)));
evalcond[6]=(x4639+(((-0.4)*x4632))+(((-0.4)*x4633))+(((-1.0)*px))+(((-1.0)*x4640))+(((0.42)*x4644)));
evalcond[7]=((((-1.0)*x4639))+(((-0.4)*x4636))+(((-0.4)*x4638))+(((-1.0)*py))+(((-1.0)*x4640))+(((0.42)*x4642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
IkReal x4645=((68162500000.0)*cj2);
IkReal x4646=((68162500000.0)*px);
IkReal x4647=((68162500000.0)*py);
j0eval[0]=((1.0)+(((-1.0)*cj2)));
j0eval[1]=IKsign(((59470418.0)+(((-59470418.0)*cj2))));
j0eval[2]=((IKabs(((((-1.0)*sj2*x4646))+(((-1.0)*x4647))+((py*x4645)))))+(IKabs(((((-1.0)*x4646))+((px*x4645))+((sj2*x4647))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=((-1.0)+cj2);
j0eval[1]=IKsign(((-5453.0)+(((5453.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4648=(r01*sj5);
IkReal x4649=((1.0)*cj4);
IkReal x4650=((1.0)*sj4);
IkReal x4651=(cj5*r00);
if( IKabs(((((-1.0)*r02*x4649))+((sj4*x4648))+(((-1.0)*x4650*x4651)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4648*x4649))+(((-1.0)*r02*x4650))+((cj4*x4651)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x4649))+((sj4*x4648))+(((-1.0)*x4650*x4651))))+IKsqr(((((-1.0)*x4648*x4649))+(((-1.0)*r02*x4650))+((cj4*x4651))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r02*x4649))+((sj4*x4648))+(((-1.0)*x4650*x4651))), ((((-1.0)*x4648*x4649))+(((-1.0)*r02*x4650))+((cj4*x4651))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4652=IKsin(j0);
IkReal x4653=IKcos(j0);
IkReal x4654=(cj5*r00);
IkReal x4655=((1.0)*cj4);
IkReal x4656=(cj4*sj5);
IkReal x4657=(cj5*r10);
IkReal x4658=((1.0)*sj4*sj5);
evalcond[0]=(x4652+(((-1.0)*r01*x4658))+((sj4*x4654))+((cj4*r02)));
evalcond[1]=(((r11*x4656))+(((-1.0)*x4655*x4657))+x4652+((r12*sj4)));
evalcond[2]=((((-1.0)*x4654*x4655))+x4653+((r02*sj4))+((r01*x4656)));
evalcond[3]=((((-1.0)*x4653))+(((-1.0)*r11*x4658))+((sj4*x4657))+((cj4*r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-1146.15807812213)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1146.15807812213)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1146.15807812213)*py))+IKsqr(((-1146.15807812213)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-1146.15807812213)*py), ((-1146.15807812213)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4659=IKcos(j0);
IkReal x4660=IKsin(j0);
IkReal x4661=(cj5*r00);
IkReal x4662=((1.0)*cj4);
IkReal x4663=(cj4*sj5);
IkReal x4664=(cj5*r10);
IkReal x4665=((1.0)*x4660);
IkReal x4666=((1.0)*sj4*sj5);
evalcond[0]=((((-1.0)*px))+(((-0.00087248)*x4659)));
evalcond[1]=((((-0.00087248)*x4660))+(((-1.0)*py)));
evalcond[2]=(x4659+(((-1.0)*r11*x4666))+((sj4*x4664))+((cj4*r12)));
evalcond[3]=((((-1.0)*r01*x4666))+((sj4*x4661))+(((-1.0)*x4665))+((cj4*r02)));
evalcond[4]=((((-1.0)*x4662*x4664))+((r11*x4663))+((r12*sj4))+(((-1.0)*x4665)));
evalcond[5]=((((-1.0)*x4661*x4662))+(((-1.0)*x4659))+((r02*sj4))+((r01*x4663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj2)))+(IKabs(((-1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4667=(r01*sj5);
IkReal x4668=((1.0)*cj4);
IkReal x4669=((1.0)*sj4);
IkReal x4670=(cj5*r00);
if( IKabs(((((-1.0)*x4669*x4670))+((sj4*x4667))+(((-1.0)*r02*x4668)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4667*x4668))+((cj4*x4670))+(((-1.0)*r02*x4669)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4669*x4670))+((sj4*x4667))+(((-1.0)*r02*x4668))))+IKsqr(((((-1.0)*x4667*x4668))+((cj4*x4670))+(((-1.0)*r02*x4669))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x4669*x4670))+((sj4*x4667))+(((-1.0)*r02*x4668))), ((((-1.0)*x4667*x4668))+((cj4*x4670))+(((-1.0)*r02*x4669))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4671=IKsin(j0);
IkReal x4672=IKcos(j0);
IkReal x4673=(cj5*r00);
IkReal x4674=((1.0)*cj4);
IkReal x4675=(cj4*sj5);
IkReal x4676=(cj5*r10);
IkReal x4677=((1.0)*sj4*sj5);
evalcond[0]=(x4671+((sj4*x4673))+(((-1.0)*r01*x4677))+((cj4*r02)));
evalcond[1]=((((-1.0)*x4674*x4676))+x4671+((r11*x4675))+((r12*sj4)));
evalcond[2]=(x4672+((r02*sj4))+((r01*x4675))+(((-1.0)*x4673*x4674)));
evalcond[3]=((((-1.0)*x4672))+(((-1.0)*r11*x4677))+((sj4*x4676))+((cj4*r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+cj2)))+(IKabs(((1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4678=(r01*sj5);
IkReal x4679=((1.0)*cj4);
IkReal x4680=((1.0)*sj4);
IkReal x4681=(cj5*r00);
if( IKabs(((((-1.0)*r02*x4679))+(((-1.0)*x4680*x4681))+((sj4*x4678)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x4680))+(((-1.0)*x4678*x4679))+((cj4*x4681)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x4679))+(((-1.0)*x4680*x4681))+((sj4*x4678))))+IKsqr(((((-1.0)*r02*x4680))+(((-1.0)*x4678*x4679))+((cj4*x4681))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r02*x4679))+(((-1.0)*x4680*x4681))+((sj4*x4678))), ((((-1.0)*r02*x4680))+(((-1.0)*x4678*x4679))+((cj4*x4681))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4682=IKsin(j0);
IkReal x4683=IKcos(j0);
IkReal x4684=(cj5*r00);
IkReal x4685=((1.0)*cj4);
IkReal x4686=(cj4*sj5);
IkReal x4687=(cj5*r10);
IkReal x4688=((1.0)*sj4*sj5);
evalcond[0]=(x4682+(((-1.0)*r01*x4688))+((sj4*x4684))+((cj4*r02)));
evalcond[1]=(x4682+(((-1.0)*x4685*x4687))+((r12*sj4))+((r11*x4686)));
evalcond[2]=((((-1.0)*x4684*x4685))+x4683+((r02*sj4))+((r01*x4686)));
evalcond[3]=((((-1.0)*r11*x4688))+((sj4*x4687))+(((-1.0)*x4683))+((cj4*r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x4689=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4689);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x4689);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x4689);
rxp2_2=0;
j0eval[0]=((-1.0)+cj2);
j0eval[1]=IKsign(((-5453.0)+(((5453.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x4690=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4690);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x4690);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x4690);
rxp2_2=0;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4691=((5453.0)*cj4*r02);
IkReal x4692=(cj5*r00*sj4);
IkReal x4693=((5453.0)*r01*sj4*sj5);
CheckValue<IkReal> x4694=IKPowWithIntegerCheck(sj2,-1);
if(!x4694.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*r02))+((r01*sj4*sj5))+(((-1.0)*x4692)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.000183385292499542)*(x4694.value)*((x4693+((cj2*x4691))+(((-1.0)*x4691))+(((-1.0)*cj2*x4693))+(((-5453.0)*x4692))+(((5453.0)*cj2*x4692)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*sj4*sj5))+(((-1.0)*x4692))))+IKsqr(((0.000183385292499542)*(x4694.value)*((x4693+((cj2*x4691))+(((-1.0)*x4691))+(((-1.0)*cj2*x4693))+(((-5453.0)*x4692))+(((5453.0)*cj2*x4692))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*sj4*sj5))+(((-1.0)*x4692))), ((0.000183385292499542)*(x4694.value)*((x4693+((cj2*x4691))+(((-1.0)*x4691))+(((-1.0)*cj2*x4693))+(((-5453.0)*x4692))+(((5453.0)*cj2*x4692))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4695=IKcos(j0);
IkReal x4696=IKsin(j0);
IkReal x4697=(cj5*r00);
IkReal x4698=((1.0)*cj4);
IkReal x4699=(cj5*r10);
IkReal x4700=(cj4*sj5);
IkReal x4701=(sj2*x4695);
IkReal x4702=(cj2*x4696);
IkReal x4703=((0.00043624)*x4695);
IkReal x4704=((1.0)*sj4*sj5);
IkReal x4705=(cj2*x4695);
IkReal x4706=(sj2*x4696);
IkReal x4707=(x4702+x4701);
evalcond[0]=(((cj2*x4703))+(((-1.0)*x4703))+(((-0.00043624)*x4706)));
evalcond[1]=((((0.00043624)*x4701))+(((0.00043624)*x4702))+(((-0.00043624)*x4696)));
evalcond[2]=((((-1.0)*r01*x4704))+x4707+((sj4*x4697))+((cj4*r02)));
evalcond[3]=((((-1.0)*x4698*x4699))+x4707+((r12*sj4))+((r11*x4700)));
evalcond[4]=((((-1.0)*x4705))+x4706+(((-1.0)*r11*x4704))+((sj4*x4699))+((cj4*r12)));
evalcond[5]=((((-1.0)*x4706))+x4705+((r02*sj4))+((r01*x4700))+(((-1.0)*x4697*x4698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4708=((5453.0)*sj4);
IkReal x4709=(cj5*r00);
IkReal x4710=(r01*sj5);
IkReal x4711=((5453.0)*cj4*r02);
CheckValue<IkReal> x4712 = IKatan2WithCheck(IkReal((((cj2*x4711))+(((-1.0)*x4708*x4709))+((x4708*x4710))+((cj2*x4708*x4709))+(((-1.0)*cj2*x4708*x4710))+(((-1.0)*x4711)))),IkReal((((sj2*x4711))+((sj2*x4708*x4709))+(((-1.0)*sj2*x4708*x4710)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4712.valid){
continue;
}
CheckValue<IkReal> x4713=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((5453.0)*cj2)))),-1);
if(!x4713.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4712.value)+(((1.5707963267949)*(x4713.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4714=IKcos(j0);
IkReal x4715=IKsin(j0);
IkReal x4716=(cj5*r00);
IkReal x4717=((1.0)*cj4);
IkReal x4718=(cj5*r10);
IkReal x4719=(cj4*sj5);
IkReal x4720=(sj2*x4714);
IkReal x4721=(cj2*x4715);
IkReal x4722=((0.00043624)*x4714);
IkReal x4723=((1.0)*sj4*sj5);
IkReal x4724=(cj2*x4714);
IkReal x4725=(sj2*x4715);
IkReal x4726=(x4721+x4720);
evalcond[0]=((((-1.0)*x4722))+((cj2*x4722))+(((-0.00043624)*x4725)));
evalcond[1]=((((-0.00043624)*x4715))+(((0.00043624)*x4721))+(((0.00043624)*x4720)));
evalcond[2]=(((sj4*x4716))+x4726+(((-1.0)*r01*x4723))+((cj4*r02)));
evalcond[3]=(x4726+((r12*sj4))+(((-1.0)*x4717*x4718))+((r11*x4719)));
evalcond[4]=((((-1.0)*x4724))+((sj4*x4718))+(((-1.0)*r11*x4723))+x4725+((cj4*r12)));
evalcond[5]=((((-1.0)*x4725))+((r01*x4719))+x4724+((r02*sj4))+(((-1.0)*x4716*x4717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4727=((5453.0)*cj2);
IkReal x4728=(cj5*r00*sj4);
IkReal x4729=((5453.0)*cj4*r02);
IkReal x4730=(r01*sj4*sj5);
CheckValue<IkReal> x4731=IKPowWithIntegerCheck(sj2,-1);
if(!x4731.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*x4728))+x4730+(((-2292.31615624427)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.000183385292499542)*(x4731.value)*((((cj4*r02*x4727))+(((12500000.0)*cj2*py))+(((-1.0)*x4729))+(((-1.0)*x4727*x4730))+((x4727*x4728))+(((5453.0)*x4730))+(((-5453.0)*x4728)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*x4728))+x4730+(((-2292.31615624427)*py))))+IKsqr(((0.000183385292499542)*(x4731.value)*((((cj4*r02*x4727))+(((12500000.0)*cj2*py))+(((-1.0)*x4729))+(((-1.0)*x4727*x4730))+((x4727*x4728))+(((5453.0)*x4730))+(((-5453.0)*x4728))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*x4728))+x4730+(((-2292.31615624427)*py))), ((0.000183385292499542)*(x4731.value)*((((cj4*r02*x4727))+(((12500000.0)*cj2*py))+(((-1.0)*x4729))+(((-1.0)*x4727*x4730))+((x4727*x4728))+(((5453.0)*x4730))+(((-5453.0)*x4728))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4732=IKcos(j0);
IkReal x4733=IKsin(j0);
IkReal x4734=(cj5*r00);
IkReal x4735=((1.0)*cj4);
IkReal x4736=(cj5*r10);
IkReal x4737=(cj4*sj5);
IkReal x4738=(sj2*x4732);
IkReal x4739=(cj2*x4733);
IkReal x4740=((0.00043624)*x4732);
IkReal x4741=((1.0)*sj4*sj5);
IkReal x4742=(cj2*x4732);
IkReal x4743=(sj2*x4733);
IkReal x4744=(x4738+x4739);
evalcond[0]=((((-0.00043624)*x4743))+((cj2*x4740))+(((-1.0)*px))+(((-1.0)*x4740)));
evalcond[1]=((((-1.0)*py))+(((-0.00043624)*x4733))+(((0.00043624)*x4739))+(((0.00043624)*x4738)));
evalcond[2]=((((-1.0)*r01*x4741))+x4744+((sj4*x4734))+((cj4*r02)));
evalcond[3]=(((r11*x4737))+(((-1.0)*x4735*x4736))+x4744+((r12*sj4)));
evalcond[4]=((((-1.0)*r11*x4741))+x4743+((sj4*x4736))+(((-1.0)*x4742))+((cj4*r12)));
evalcond[5]=((((-1.0)*x4734*x4735))+x4742+((r02*sj4))+((r01*x4737))+(((-1.0)*x4743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4745=((5453.0)*sj4);
IkReal x4746=(cj5*r00);
IkReal x4747=(r01*sj5);
IkReal x4748=((12500000.0)*px);
IkReal x4749=((5453.0)*cj4*r02);
CheckValue<IkReal> x4750 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x4745*x4747))+((cj2*x4749))+(((-1.0)*x4745*x4746))+((sj2*x4748))+(((-1.0)*x4749))+((cj2*x4745*x4746))+((x4745*x4747)))),IkReal(((((-1.0)*cj2*x4748))+((sj2*x4745*x4746))+((sj2*x4749))+(((-1.0)*sj2*x4745*x4747)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4750.valid){
continue;
}
CheckValue<IkReal> x4751=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((5453.0)*cj2)))),-1);
if(!x4751.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4750.value)+(((1.5707963267949)*(x4751.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4752=IKcos(j0);
IkReal x4753=IKsin(j0);
IkReal x4754=(cj5*r00);
IkReal x4755=((1.0)*cj4);
IkReal x4756=(cj5*r10);
IkReal x4757=(cj4*sj5);
IkReal x4758=(sj2*x4752);
IkReal x4759=(cj2*x4753);
IkReal x4760=((0.00043624)*x4752);
IkReal x4761=((1.0)*sj4*sj5);
IkReal x4762=(cj2*x4752);
IkReal x4763=(sj2*x4753);
IkReal x4764=(x4758+x4759);
evalcond[0]=((((-1.0)*x4760))+(((-0.00043624)*x4763))+((cj2*x4760))+(((-1.0)*px)));
evalcond[1]=((((0.00043624)*x4758))+(((0.00043624)*x4759))+(((-0.00043624)*x4753))+(((-1.0)*py)));
evalcond[2]=(((sj4*x4754))+x4764+(((-1.0)*r01*x4761))+((cj4*r02)));
evalcond[3]=((((-1.0)*x4755*x4756))+((r11*x4757))+x4764+((r12*sj4)));
evalcond[4]=(((sj4*x4756))+(((-1.0)*x4762))+x4763+(((-1.0)*r11*x4761))+((cj4*r12)));
evalcond[5]=((((-1.0)*x4763))+((r01*x4757))+(((-1.0)*x4754*x4755))+x4762+((r02*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4765=((68162500000.0)*py);
IkReal x4766=((68162500000.0)*px);
CheckValue<IkReal> x4767 = IKatan2WithCheck(IkReal(((((-1.0)*x4765))+((cj2*x4765))+(((-1.0)*sj2*x4766)))),IkReal(((((-1.0)*x4766))+((cj2*x4766))+((sj2*x4765)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4767.valid){
continue;
}
CheckValue<IkReal> x4768=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((-59470418.0)*cj2)))),-1);
if(!x4768.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4767.value)+(((1.5707963267949)*(x4768.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4769=IKcos(j0);
IkReal x4770=IKsin(j0);
IkReal x4771=(cj5*r00);
IkReal x4772=((1.0)*cj4);
IkReal x4773=(cj5*r10);
IkReal x4774=(cj4*sj5);
IkReal x4775=(sj2*x4769);
IkReal x4776=(cj2*x4770);
IkReal x4777=((0.00043624)*x4769);
IkReal x4778=((1.0)*sj4*sj5);
IkReal x4779=(cj2*x4769);
IkReal x4780=(sj2*x4770);
IkReal x4781=(x4776+x4775);
evalcond[0]=((((-0.00043624)*x4780))+((cj2*x4777))+(((-1.0)*px))+(((-1.0)*x4777)));
evalcond[1]=((((-0.00043624)*x4770))+(((0.00043624)*x4776))+(((0.00043624)*x4775))+(((-1.0)*py)));
evalcond[2]=((((-1.0)*r01*x4778))+x4781+((sj4*x4771))+((cj4*r02)));
evalcond[3]=(((r11*x4774))+x4781+((r12*sj4))+(((-1.0)*x4772*x4773)));
evalcond[4]=((((-1.0)*x4779))+(((-1.0)*r11*x4778))+x4780+((sj4*x4773))+((cj4*r12)));
evalcond[5]=(((r01*x4774))+x4779+((r02*sj4))+(((-1.0)*x4771*x4772))+(((-1.0)*x4780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x4782=((68162500000.0)*py);
IkReal x4783=((68162500000.0)*px);
j0eval[0]=((1.0)+cj2);
j0eval[1]=IKsign(((59470418.0)+(((59470418.0)*cj2))));
j0eval[2]=((IKabs(((((-1.0)*cj2*x4783))+((sj2*x4782))+(((-1.0)*x4783)))))+(IKabs(((((-1.0)*sj2*x4783))+(((-1.0)*cj2*x4782))+(((-1.0)*x4782))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=((-1.0)+(((-1.0)*cj2)));
j0eval[1]=IKsign(((-5453.0)+(((-5453.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-1146.15807812213)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1146.15807812213)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1146.15807812213)*py))+IKsqr(((-1146.15807812213)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-1146.15807812213)*py), ((-1146.15807812213)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4784=IKsin(j0);
IkReal x4785=IKcos(j0);
IkReal x4786=(cj5*r00);
IkReal x4787=((1.0)*cj4);
IkReal x4788=(cj4*sj5);
IkReal x4789=(cj5*r10);
IkReal x4790=((1.0)*x4785);
IkReal x4791=((1.0)*sj4*sj5);
evalcond[0]=((((-0.00087248)*x4785))+(((-1.0)*px)));
evalcond[1]=((((-0.00087248)*x4784))+(((-1.0)*py)));
evalcond[2]=(((sj4*x4786))+x4784+(((-1.0)*r01*x4791))+((cj4*r02)));
evalcond[3]=(((sj4*x4789))+(((-1.0)*r11*x4791))+(((-1.0)*x4790))+((cj4*r12)));
evalcond[4]=((((-1.0)*x4787*x4789))+((r11*x4788))+((r12*sj4))+(((-1.0)*x4784)));
evalcond[5]=(((r01*x4788))+(((-1.0)*x4786*x4787))+((r02*sj4))+(((-1.0)*x4790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4792=(cj5*r10);
IkReal x4793=((1.0)*sj4);
IkReal x4794=(r11*sj5);
IkReal x4795=((1.0)*cj4);
if( IKabs(((((-1.0)*x4794*x4795))+((cj4*x4792))+(((-1.0)*r12*x4793)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x4795))+(((-1.0)*x4792*x4793))+((sj4*x4794)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4794*x4795))+((cj4*x4792))+(((-1.0)*r12*x4793))))+IKsqr(((((-1.0)*r12*x4795))+(((-1.0)*x4792*x4793))+((sj4*x4794))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x4794*x4795))+((cj4*x4792))+(((-1.0)*r12*x4793))), ((((-1.0)*r12*x4795))+(((-1.0)*x4792*x4793))+((sj4*x4794))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4796=IKcos(j0);
IkReal x4797=IKsin(j0);
IkReal x4798=(cj5*r00);
IkReal x4799=((1.0)*cj4);
IkReal x4800=(cj4*sj5);
IkReal x4801=(cj5*r10);
IkReal x4802=((1.0)*sj4*sj5);
evalcond[0]=(((sj4*x4801))+x4796+(((-1.0)*r11*x4802))+((cj4*r12)));
evalcond[1]=(x4797+(((-1.0)*x4799*x4801))+((r12*sj4))+((r11*x4800)));
evalcond[2]=(((r01*x4800))+x4796+((r02*sj4))+(((-1.0)*x4798*x4799)));
evalcond[3]=((((-1.0)*r01*x4802))+(((-1.0)*x4797))+((sj4*x4798))+((cj4*r02)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+cj2)))+(IKabs(((-1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4803=(cj5*r10);
IkReal x4804=((1.0)*sj4);
IkReal x4805=(r11*sj5);
IkReal x4806=((1.0)*cj4);
if( IKabs(((((-1.0)*x4805*x4806))+(((-1.0)*r12*x4804))+((cj4*x4803)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x4805))+(((-1.0)*x4803*x4804))+(((-1.0)*r12*x4806)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4805*x4806))+(((-1.0)*r12*x4804))+((cj4*x4803))))+IKsqr((((sj4*x4805))+(((-1.0)*x4803*x4804))+(((-1.0)*r12*x4806))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x4805*x4806))+(((-1.0)*r12*x4804))+((cj4*x4803))), (((sj4*x4805))+(((-1.0)*x4803*x4804))+(((-1.0)*r12*x4806))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4807=IKcos(j0);
IkReal x4808=IKsin(j0);
IkReal x4809=(cj5*r00);
IkReal x4810=((1.0)*cj4);
IkReal x4811=(cj4*sj5);
IkReal x4812=(cj5*r10);
IkReal x4813=((1.0)*sj4*sj5);
evalcond[0]=((((-1.0)*r11*x4813))+((sj4*x4812))+((cj4*r12))+x4807);
evalcond[1]=(((r11*x4811))+((r12*sj4))+(((-1.0)*x4810*x4812))+x4808);
evalcond[2]=((((-1.0)*x4809*x4810))+((r02*sj4))+x4807+((r01*x4811)));
evalcond[3]=((((-1.0)*r01*x4813))+((sj4*x4809))+(((-1.0)*x4808))+((cj4*r02)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+cj2)))+(IKabs(((1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4814=(cj5*r10);
IkReal x4815=((1.0)*sj4);
IkReal x4816=(r11*sj5);
IkReal x4817=((1.0)*cj4);
if( IKabs((((cj4*x4814))+(((-1.0)*x4816*x4817))+(((-1.0)*r12*x4815)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4814*x4815))+((sj4*x4816))+(((-1.0)*r12*x4817)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x4814))+(((-1.0)*x4816*x4817))+(((-1.0)*r12*x4815))))+IKsqr(((((-1.0)*x4814*x4815))+((sj4*x4816))+(((-1.0)*r12*x4817))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj4*x4814))+(((-1.0)*x4816*x4817))+(((-1.0)*r12*x4815))), ((((-1.0)*x4814*x4815))+((sj4*x4816))+(((-1.0)*r12*x4817))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4818=IKcos(j0);
IkReal x4819=IKsin(j0);
IkReal x4820=(cj5*r00);
IkReal x4821=((1.0)*cj4);
IkReal x4822=(cj4*sj5);
IkReal x4823=(cj5*r10);
IkReal x4824=((1.0)*sj4*sj5);
evalcond[0]=(((sj4*x4823))+(((-1.0)*r11*x4824))+((cj4*r12))+x4818);
evalcond[1]=(((r11*x4822))+(((-1.0)*x4821*x4823))+((r12*sj4))+x4819);
evalcond[2]=(((r02*sj4))+(((-1.0)*x4820*x4821))+((r01*x4822))+x4818);
evalcond[3]=((((-1.0)*r01*x4824))+(((-1.0)*x4819))+((sj4*x4820))+((cj4*r02)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x4825=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4825);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x4825);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x4825);
rxp2_2=0;
j0eval[0]=((1.0)+cj2);
j0eval[1]=IKsign(((5453.0)+(((5453.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x4826=((-1.0)*pz);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x4826);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x4826);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x4826);
rxp2_2=0;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4827=((5453.0)*cj2);
IkReal x4828=((5453.0)*cj4*r02);
IkReal x4829=(cj5*r00*sj4);
IkReal x4830=(r01*sj4*sj5);
CheckValue<IkReal> x4831=IKPowWithIntegerCheck(sj2,-1);
if(!x4831.valid){
continue;
}
if( IKabs(((((-1.0)*x4830))+x4829+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.000183385292499542)*(x4831.value)*(((((-1.0)*x4827*x4829))+(((-1.0)*x4828))+(((-1.0)*cj4*r02*x4827))+((x4827*x4830))+(((5453.0)*x4830))+(((-5453.0)*x4829)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4830))+x4829+((cj4*r02))))+IKsqr(((-0.000183385292499542)*(x4831.value)*(((((-1.0)*x4827*x4829))+(((-1.0)*x4828))+(((-1.0)*cj4*r02*x4827))+((x4827*x4830))+(((5453.0)*x4830))+(((-5453.0)*x4829))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x4830))+x4829+((cj4*r02))), ((-0.000183385292499542)*(x4831.value)*(((((-1.0)*x4827*x4829))+(((-1.0)*x4828))+(((-1.0)*cj4*r02*x4827))+((x4827*x4830))+(((5453.0)*x4830))+(((-5453.0)*x4829))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4832=IKcos(j0);
IkReal x4833=IKsin(j0);
IkReal x4834=(cj5*r00);
IkReal x4835=((1.0)*cj4);
IkReal x4836=(cj5*r10);
IkReal x4837=(cj4*sj5);
IkReal x4838=((0.00043624)*x4832);
IkReal x4839=((1.0)*sj4*sj5);
IkReal x4840=(sj2*x4832);
IkReal x4841=((0.00043624)*x4833);
IkReal x4842=(cj2*x4833);
IkReal x4843=((1.0)*cj2*x4832);
IkReal x4844=((1.0)*sj2*x4833);
IkReal x4845=(x4844+x4843);
evalcond[0]=((((-1.0)*sj2*x4841))+(((-1.0)*x4838))+(((-1.0)*cj2*x4838)));
evalcond[1]=((((-1.0)*cj2*x4841))+(((-1.0)*x4841))+((sj2*x4838)));
evalcond[2]=((((-1.0)*r01*x4839))+(((-1.0)*x4840))+x4842+((sj4*x4834))+((cj4*r02)));
evalcond[3]=(((r11*x4837))+(((-1.0)*x4835*x4836))+((r12*sj4))+(((-1.0)*x4842))+x4840);
evalcond[4]=((((-1.0)*x4845))+(((-1.0)*r11*x4839))+((cj4*r12))+((sj4*x4836)));
evalcond[5]=(((r01*x4837))+(((-1.0)*x4845))+(((-1.0)*x4834*x4835))+((r02*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4846=((5453.0)*sj4);
IkReal x4847=(cj5*r00);
IkReal x4848=(r01*sj5);
IkReal x4849=((5453.0)*cj4*r02);
CheckValue<IkReal> x4850=IKPowWithIntegerCheck(IKsign(((5453.0)+(((5453.0)*cj2)))),-1);
if(!x4850.valid){
continue;
}
CheckValue<IkReal> x4851 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x4849))+(((-1.0)*cj2*x4846*x4847))+(((-1.0)*x4849))+((x4846*x4848))+(((-1.0)*x4846*x4847))+((cj2*x4846*x4848)))),IkReal(((((-1.0)*sj2*x4846*x4848))+((sj2*x4846*x4847))+((sj2*x4849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4851.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4850.value)))+(x4851.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4852=IKcos(j0);
IkReal x4853=IKsin(j0);
IkReal x4854=(cj5*r00);
IkReal x4855=((1.0)*cj4);
IkReal x4856=(cj5*r10);
IkReal x4857=(cj4*sj5);
IkReal x4858=((0.00043624)*x4852);
IkReal x4859=((1.0)*sj4*sj5);
IkReal x4860=(sj2*x4852);
IkReal x4861=((0.00043624)*x4853);
IkReal x4862=(cj2*x4853);
IkReal x4863=((1.0)*cj2*x4852);
IkReal x4864=((1.0)*sj2*x4853);
IkReal x4865=(x4863+x4864);
evalcond[0]=((((-1.0)*x4858))+(((-1.0)*cj2*x4858))+(((-1.0)*sj2*x4861)));
evalcond[1]=(((sj2*x4858))+(((-1.0)*x4861))+(((-1.0)*cj2*x4861)));
evalcond[2]=((((-1.0)*r01*x4859))+(((-1.0)*x4860))+((sj4*x4854))+x4862+((cj4*r02)));
evalcond[3]=((((-1.0)*x4862))+((r12*sj4))+(((-1.0)*x4855*x4856))+x4860+((r11*x4857)));
evalcond[4]=((((-1.0)*r11*x4859))+(((-1.0)*x4865))+((sj4*x4856))+((cj4*r12)));
evalcond[5]=(((r01*x4857))+(((-1.0)*x4865))+((r02*sj4))+(((-1.0)*x4854*x4855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4866=(r01*sj5);
IkReal x4867=(cj5*r00);
IkReal x4868=((5453.0)*sj4);
IkReal x4869=((5453.0)*cj4*r02);
IkReal x4870=(cj2*x4868);
CheckValue<IkReal> x4871=IKPowWithIntegerCheck(sj2,-1);
if(!x4871.valid){
continue;
}
if( IKabs(((((-1.0)*sj4*x4866))+(((-2292.31615624427)*py))+((sj4*x4867))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.000183385292499542)*(x4871.value)*(((((12500000.0)*cj2*py))+(((-1.0)*x4869))+(((-1.0)*cj2*x4869))+(((-1.0)*x4867*x4868))+((x4866*x4870))+((x4866*x4868))+(((-1.0)*x4867*x4870)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x4866))+(((-2292.31615624427)*py))+((sj4*x4867))+((cj4*r02))))+IKsqr(((-0.000183385292499542)*(x4871.value)*(((((12500000.0)*cj2*py))+(((-1.0)*x4869))+(((-1.0)*cj2*x4869))+(((-1.0)*x4867*x4868))+((x4866*x4870))+((x4866*x4868))+(((-1.0)*x4867*x4870))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*sj4*x4866))+(((-2292.31615624427)*py))+((sj4*x4867))+((cj4*r02))), ((-0.000183385292499542)*(x4871.value)*(((((12500000.0)*cj2*py))+(((-1.0)*x4869))+(((-1.0)*cj2*x4869))+(((-1.0)*x4867*x4868))+((x4866*x4870))+((x4866*x4868))+(((-1.0)*x4867*x4870))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4872=IKcos(j0);
IkReal x4873=IKsin(j0);
IkReal x4874=(cj5*r00);
IkReal x4875=((1.0)*cj4);
IkReal x4876=(cj5*r10);
IkReal x4877=(cj4*sj5);
IkReal x4878=((0.00043624)*x4872);
IkReal x4879=((1.0)*sj4*sj5);
IkReal x4880=((1.0)*x4872);
IkReal x4881=((0.00043624)*x4873);
IkReal x4882=(cj2*x4873);
IkReal x4883=(cj2*x4880);
IkReal x4884=((1.0)*sj2*x4873);
IkReal x4885=(x4883+x4884);
evalcond[0]=((((-1.0)*sj2*x4881))+(((-1.0)*cj2*x4878))+(((-1.0)*px))+(((-1.0)*x4878)));
evalcond[1]=((((-1.0)*x4881))+(((-1.0)*py))+(((-1.0)*cj2*x4881))+((sj2*x4878)));
evalcond[2]=((((-1.0)*sj2*x4880))+((sj4*x4874))+(((-1.0)*r01*x4879))+x4882+((cj4*r02)));
evalcond[3]=((((-1.0)*x4882))+(((-1.0)*x4875*x4876))+((r12*sj4))+((sj2*x4872))+((r11*x4877)));
evalcond[4]=(((sj4*x4876))+(((-1.0)*x4885))+(((-1.0)*r11*x4879))+((cj4*r12)));
evalcond[5]=((((-1.0)*x4885))+((r01*x4877))+((r02*sj4))+(((-1.0)*x4874*x4875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4886=((12500000.0)*px);
IkReal x4887=((5453.0)*cj2);
IkReal x4888=((5453.0)*cj4*r02);
IkReal x4889=(r01*sj4*sj5);
IkReal x4890=((5453.0)*cj5*r00*sj4);
CheckValue<IkReal> x4891=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((-1.0)*x4887)))),-1);
if(!x4891.valid){
continue;
}
CheckValue<IkReal> x4892 = IKatan2WithCheck(IkReal((((sj2*x4886))+(((-5453.0)*x4889))+((cj5*r00*sj4*x4887))+(((-1.0)*x4887*x4889))+((cj4*r02*x4887))+x4888+x4890)),IkReal(((((-1.0)*sj2*x4890))+((cj2*x4886))+(((-1.0)*sj2*x4888))+(((5453.0)*sj2*x4889)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4892.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4891.value)))+(x4892.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4893=IKcos(j0);
IkReal x4894=IKsin(j0);
IkReal x4895=(cj5*r00);
IkReal x4896=((1.0)*cj4);
IkReal x4897=(cj5*r10);
IkReal x4898=(cj4*sj5);
IkReal x4899=((0.00043624)*x4893);
IkReal x4900=((1.0)*sj4*sj5);
IkReal x4901=((1.0)*x4893);
IkReal x4902=((0.00043624)*x4894);
IkReal x4903=(cj2*x4894);
IkReal x4904=(cj2*x4901);
IkReal x4905=((1.0)*sj2*x4894);
IkReal x4906=(x4905+x4904);
evalcond[0]=((((-1.0)*x4899))+(((-1.0)*sj2*x4902))+(((-1.0)*cj2*x4899))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*x4902))+(((-1.0)*py))+(((-1.0)*cj2*x4902))+((sj2*x4899)));
evalcond[2]=(x4903+(((-1.0)*sj2*x4901))+(((-1.0)*r01*x4900))+((sj4*x4895))+((cj4*r02)));
evalcond[3]=(((r11*x4898))+(((-1.0)*x4903))+((r12*sj4))+(((-1.0)*x4896*x4897))+((sj2*x4893)));
evalcond[4]=((((-1.0)*r11*x4900))+(((-1.0)*x4906))+((sj4*x4897))+((cj4*r12)));
evalcond[5]=((((-1.0)*x4906))+((r02*sj4))+(((-1.0)*x4895*x4896))+((r01*x4898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4907=((68162500000.0)*py);
IkReal x4908=((68162500000.0)*px);
CheckValue<IkReal> x4909 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x4908))+(((-1.0)*x4907))+(((-1.0)*cj2*x4907)))),IkReal(((((-1.0)*x4908))+((sj2*x4907))+(((-1.0)*cj2*x4908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4909.valid){
continue;
}
CheckValue<IkReal> x4910=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((59470418.0)*cj2)))),-1);
if(!x4910.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4909.value)+(((1.5707963267949)*(x4910.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4911=IKcos(j0);
IkReal x4912=IKsin(j0);
IkReal x4913=(cj5*r00);
IkReal x4914=((1.0)*cj4);
IkReal x4915=(cj5*r10);
IkReal x4916=(cj4*sj5);
IkReal x4917=((0.00043624)*x4911);
IkReal x4918=((1.0)*sj4*sj5);
IkReal x4919=((1.0)*x4911);
IkReal x4920=((0.00043624)*x4912);
IkReal x4921=(cj2*x4912);
IkReal x4922=(cj2*x4919);
IkReal x4923=((1.0)*sj2*x4912);
IkReal x4924=(x4923+x4922);
evalcond[0]=((((-1.0)*cj2*x4917))+(((-1.0)*x4917))+(((-1.0)*px))+(((-1.0)*sj2*x4920)));
evalcond[1]=((((-1.0)*cj2*x4920))+(((-1.0)*py))+((sj2*x4917))+(((-1.0)*x4920)));
evalcond[2]=(x4921+(((-1.0)*sj2*x4919))+((sj4*x4913))+(((-1.0)*r01*x4918))+((cj4*r02)));
evalcond[3]=((((-1.0)*x4921))+((r12*sj4))+((r11*x4916))+((sj2*x4911))+(((-1.0)*x4914*x4915)));
evalcond[4]=((((-1.0)*r11*x4918))+((sj4*x4915))+(((-1.0)*x4924))+((cj4*r12)));
evalcond[5]=((((-1.0)*x4913*x4914))+((r02*sj4))+((r01*x4916))+(((-1.0)*x4924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4929=IKPowWithIntegerCheck(sj1,-1);
if(!x4929.valid){
continue;
}
IkReal x4925=x4929.value;
IkReal x4926=((1.0)*sj1);
IkReal x4927=(cj5*r01);
IkReal x4928=(r00*sj5);
CheckValue<IkReal> x4930=IKPowWithIntegerCheck(cj1,-1);
if(!x4930.valid){
continue;
}
CheckValue<IkReal> x4931=IKPowWithIntegerCheck(cj2,-1);
if(!x4931.valid){
continue;
}
if( IKabs((x4925*(x4930.value)*(x4931.value)*((((sj2*x4927))+((sj2*x4928))+(((-1.0)*cj4*r11*sj5*x4926))+((cj4*cj5*r10*sj1))+(((-1.0)*r12*sj4*x4926)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4925*(((((-1.0)*x4927))+(((-1.0)*x4928)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4925*(x4930.value)*(x4931.value)*((((sj2*x4927))+((sj2*x4928))+(((-1.0)*cj4*r11*sj5*x4926))+((cj4*cj5*r10*sj1))+(((-1.0)*r12*sj4*x4926))))))+IKsqr((x4925*(((((-1.0)*x4927))+(((-1.0)*x4928))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4925*(x4930.value)*(x4931.value)*((((sj2*x4927))+((sj2*x4928))+(((-1.0)*cj4*r11*sj5*x4926))+((cj4*cj5*r10*sj1))+(((-1.0)*r12*sj4*x4926))))), (x4925*(((((-1.0)*x4927))+(((-1.0)*x4928))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4932=IKcos(j0);
IkReal x4933=IKsin(j0);
IkReal x4934=(cj1*cj2);
IkReal x4935=(cj5*r00);
IkReal x4936=(cj5*r01);
IkReal x4937=((1.0)*cj4);
IkReal x4938=(cj5*r10);
IkReal x4939=(r00*sj5);
IkReal x4940=(cj5*r11);
IkReal x4941=(cj4*sj5);
IkReal x4942=(r10*sj5);
IkReal x4943=((0.00043624)*x4932);
IkReal x4944=((0.00043624)*x4933);
IkReal x4945=((1.0)*sj4*sj5);
IkReal x4946=(sj1*x4933);
IkReal x4947=(sj2*x4932);
IkReal x4948=(sj1*x4932);
IkReal x4949=(sj2*x4933);
evalcond[0]=(x4936+x4939+x4948);
evalcond[1]=(x4946+x4940+x4942);
evalcond[2]=(((cj1*x4947))+((cj2*x4933))+(((-1.0)*r01*x4945))+((sj4*x4935))+((cj4*r02)));
evalcond[3]=(x4947+((r11*x4941))+((x4933*x4934))+((r12*sj4))+(((-1.0)*x4937*x4938)));
evalcond[4]=((((-1.0)*cj2*x4932))+(((-1.0)*r11*x4945))+((cj1*x4949))+((cj4*r12))+((sj4*x4938)));
evalcond[5]=(((r01*x4941))+((x4932*x4934))+(((-1.0)*x4935*x4937))+((r02*sj4))+(((-1.0)*x4949)));
evalcond[6]=((((-1.0)*sj2*x4944))+(((-1.0)*x4943))+(((-1.0)*px))+((x4934*x4943))+(((-0.4)*x4939))+(((-0.4)*x4936))+(((0.42)*x4948)));
evalcond[7]=(((sj2*x4943))+(((-1.0)*x4944))+(((-1.0)*py))+((x4934*x4944))+(((0.42)*x4946))+(((-0.4)*x4940))+(((-0.4)*x4942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4955=IKPowWithIntegerCheck(sj1,-1);
if(!x4955.valid){
continue;
}
IkReal x4950=x4955.value;
IkReal x4951=(sj1*sj4);
IkReal x4952=(cj5*r01);
IkReal x4953=(cj1*sj2);
IkReal x4954=((1.0)*r00);
CheckValue<IkReal> x4956=IKPowWithIntegerCheck(cj2,-1);
if(!x4956.valid){
continue;
}
if( IKabs((x4950*(x4956.value)*((((r00*sj5*x4953))+((r01*sj5*x4951))+(((-1.0)*cj4*r02*sj1))+(((-1.0)*cj5*x4951*x4954))+((x4952*x4953)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x4950*(((((-1.0)*sj5*x4954))+(((-1.0)*x4952)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x4950*(x4956.value)*((((r00*sj5*x4953))+((r01*sj5*x4951))+(((-1.0)*cj4*r02*sj1))+(((-1.0)*cj5*x4951*x4954))+((x4952*x4953))))))+IKsqr((x4950*(((((-1.0)*sj5*x4954))+(((-1.0)*x4952))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x4950*(x4956.value)*((((r00*sj5*x4953))+((r01*sj5*x4951))+(((-1.0)*cj4*r02*sj1))+(((-1.0)*cj5*x4951*x4954))+((x4952*x4953))))), (x4950*(((((-1.0)*sj5*x4954))+(((-1.0)*x4952))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4957=IKcos(j0);
IkReal x4958=IKsin(j0);
IkReal x4959=(cj1*cj2);
IkReal x4960=(cj5*r00);
IkReal x4961=(cj5*r01);
IkReal x4962=((1.0)*cj4);
IkReal x4963=(cj5*r10);
IkReal x4964=(r00*sj5);
IkReal x4965=(cj5*r11);
IkReal x4966=(cj4*sj5);
IkReal x4967=(r10*sj5);
IkReal x4968=((0.00043624)*x4957);
IkReal x4969=((0.00043624)*x4958);
IkReal x4970=((1.0)*sj4*sj5);
IkReal x4971=(sj1*x4958);
IkReal x4972=(sj2*x4957);
IkReal x4973=(sj1*x4957);
IkReal x4974=(sj2*x4958);
evalcond[0]=(x4973+x4964+x4961);
evalcond[1]=(x4971+x4967+x4965);
evalcond[2]=(((cj2*x4958))+((cj1*x4972))+((sj4*x4960))+(((-1.0)*r01*x4970))+((cj4*r02)));
evalcond[3]=(x4972+((r11*x4966))+(((-1.0)*x4962*x4963))+((r12*sj4))+((x4958*x4959)));
evalcond[4]=(((cj1*x4974))+(((-1.0)*r11*x4970))+((sj4*x4963))+(((-1.0)*cj2*x4957))+((cj4*r12)));
evalcond[5]=((((-1.0)*x4960*x4962))+((x4957*x4959))+(((-1.0)*x4974))+((r02*sj4))+((r01*x4966)));
evalcond[6]=(((x4959*x4968))+(((-0.4)*x4964))+(((-0.4)*x4961))+(((-1.0)*x4968))+(((-1.0)*sj2*x4969))+(((-1.0)*px))+(((0.42)*x4973)));
evalcond[7]=(((x4959*x4969))+((sj2*x4968))+(((-0.4)*x4967))+(((-0.4)*x4965))+(((-1.0)*x4969))+(((-1.0)*py))+(((0.42)*x4971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4975=((1.0)*sj5);
IkReal x4976=((1.0)*cj5);
CheckValue<IkReal> x4977=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x4977.valid){
continue;
}
CheckValue<IkReal> x4978 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4975))+(((-1.0)*r11*x4976)))),IkReal(((((-1.0)*r00*x4975))+(((-1.0)*r01*x4976)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4978.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4977.value)))+(x4978.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4979=IKcos(j0);
IkReal x4980=IKsin(j0);
IkReal x4981=(cj1*cj2);
IkReal x4982=(cj5*r00);
IkReal x4983=(cj5*r01);
IkReal x4984=((1.0)*cj4);
IkReal x4985=(cj5*r10);
IkReal x4986=(r00*sj5);
IkReal x4987=(cj5*r11);
IkReal x4988=(cj4*sj5);
IkReal x4989=(r10*sj5);
IkReal x4990=((0.00043624)*x4979);
IkReal x4991=((0.00043624)*x4980);
IkReal x4992=((1.0)*sj4*sj5);
IkReal x4993=(sj1*x4980);
IkReal x4994=(sj2*x4979);
IkReal x4995=(sj1*x4979);
IkReal x4996=(sj2*x4980);
evalcond[0]=(x4995+x4983+x4986);
evalcond[1]=(x4993+x4987+x4989);
evalcond[2]=((((-1.0)*r01*x4992))+((cj1*x4994))+((sj4*x4982))+((cj2*x4980))+((cj4*r02)));
evalcond[3]=(x4994+((r11*x4988))+((r12*sj4))+(((-1.0)*x4984*x4985))+((x4980*x4981)));
evalcond[4]=((((-1.0)*r11*x4992))+((cj1*x4996))+((sj4*x4985))+(((-1.0)*cj2*x4979))+((cj4*r12)));
evalcond[5]=(((r01*x4988))+(((-1.0)*x4982*x4984))+((x4979*x4981))+((r02*sj4))+(((-1.0)*x4996)));
evalcond[6]=((((-1.0)*x4990))+(((-1.0)*sj2*x4991))+(((-1.0)*px))+(((-0.4)*x4983))+(((-0.4)*x4986))+(((0.42)*x4995))+((x4981*x4990)));
evalcond[7]=((((-1.0)*x4991))+(((-1.0)*py))+(((-0.4)*x4987))+(((-0.4)*x4989))+(((0.42)*x4993))+((x4981*x4991))+((sj2*x4990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4997=((1.0)*sj5);
IkReal x4998=((1.0)*cj5);
CheckValue<IkReal> x4999 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x4998))+(((-1.0)*r10*x4997)))),IkReal(((((-1.0)*r01*x4998))+(((-1.0)*r00*x4997)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4999.valid){
continue;
}
CheckValue<IkReal> x5000=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x5000.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4999.value)+(((1.5707963267949)*(x5000.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5001=IKcos(j0);
IkReal x5002=IKsin(j0);
IkReal x5003=(r00*sj5);
IkReal x5004=(r10*sj5);
IkReal x5005=(cj5*r11);
IkReal x5006=(cj5*r01);
IkReal x5007=(cj1*cj2);
IkReal x5008=((0.00043624)*x5001);
IkReal x5009=((0.00043624)*x5002);
IkReal x5010=(sj1*x5001);
IkReal x5011=(sj1*x5002);
evalcond[0]=(x5003+x5006+x5010);
evalcond[1]=(x5005+x5004+x5011);
evalcond[2]=((((-0.4)*x5003))+(((-0.4)*x5006))+(((-1.0)*px))+(((0.42)*x5010))+(((-1.0)*sj2*x5009))+((x5007*x5008))+(((-1.0)*x5008)));
evalcond[3]=((((-0.4)*x5005))+(((-0.4)*x5004))+(((-1.0)*py))+(((0.42)*x5011))+((x5007*x5009))+((sj2*x5008))+(((-1.0)*x5009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5012=((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)));
j4eval[0]=x5012;
j4eval[1]=IKsign(x5012);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5013=cj5*cj5;
IkReal x5014=r21*r21;
IkReal x5015=((1.0)*sj1);
IkReal x5016=(cj5*r20);
IkReal x5017=(r21*sj5);
IkReal x5018=(r22*sj1);
IkReal x5019=((((-2.0)*x5016*x5017))+(r22*r22)+((x5013*(r20*r20)))+x5014+(((-1.0)*x5013*x5014)));
j4eval[0]=x5019;
j4eval[1]=IKsign(x5019);
j4eval[2]=((IKabs((((sj2*x5018))+((cj2*sj1*x5017))+(((-1.0)*cj2*x5015*x5016)))))+(IKabs((((cj2*x5018))+(((-1.0)*sj2*x5015*x5017))+((sj1*sj2*x5016))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5020=cj5*cj5;
IkReal x5021=(r11*r21);
IkReal x5022=(cj5*sj5);
IkReal x5023=(((r10*r21*x5022))+((r11*r20*x5022))+(((-1.0)*r12*r22))+((x5020*x5021))+(((-1.0)*x5021))+(((-1.0)*r10*r20*x5020)));
j4eval[0]=x5023;
j4eval[1]=IKsign(x5023);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
IkReal x5024=((1.0)*cj5);
IkReal x5025=(cj0*sj2);
IkReal x5026=(cj2*sj0);
IkReal x5027=(r21*sj5);
IkReal x5028=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5024)));
j4eval[0]=x5028;
j4eval[1]=IKsign(x5028);
j4eval[2]=((IKabs((((r22*x5025))+((r22*x5026)))))+(IKabs(((((-1.0)*r20*x5024*x5026))+(((-1.0)*r20*x5024*x5025))+((x5026*x5027))+((x5025*x5027))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
IkReal x5029=(cj2*sj0);
IkReal x5030=(r21*sj5);
IkReal x5031=(cj0*sj2);
IkReal x5032=((1.0)*r22);
IkReal x5033=((1.0)*cj5*r20);
IkReal x5034=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5034;
j4eval[1]=IKsign(x5034);
j4eval[2]=((IKabs(((((-1.0)*x5031*x5032))+(((-1.0)*x5029*x5032)))))+(IKabs(((((-1.0)*x5031*x5033))+(((-1.0)*x5029*x5033))+((x5030*x5031))+((x5029*x5030))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
IkReal x5035=cj5*cj5;
IkReal x5036=(r11*r21);
IkReal x5037=(cj0*sj2);
IkReal x5038=((1.0)*r20);
IkReal x5039=(cj2*sj0);
IkReal x5040=(r21*sj5);
IkReal x5041=((((-1.0)*r12*r22))+(((-1.0)*x5036))+((x5035*x5036))+(((-1.0)*r10*x5035*x5038))+((cj5*r10*x5040))+((cj5*r11*r20*sj5)));
j4eval[0]=x5041;
j4eval[1]=((IKabs((((r22*x5039))+((r22*x5037)))))+(IKabs((((x5037*x5040))+((x5039*x5040))+(((-1.0)*cj5*x5037*x5038))+(((-1.0)*cj5*x5038*x5039))))));
j4eval[2]=IKsign(x5041);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=0;
sj2=0;
cj2=1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x5042=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5042;
j4eval[1]=IKsign(x5042);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=0;
sj2=0;
cj2=1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x5043=((1.0)*cj5);
IkReal x5044=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5043)));
j4eval[0]=x5044;
j4eval[1]=((IKabs(((((-1.0)*r20*x5043))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=0;
sj2=0;
cj2=1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x5045=cj5*cj5;
IkReal x5046=(r21*sj5);
IkReal x5047=((1.0)*r20);
IkReal x5048=(r01*r21);
IkReal x5049=(((cj5*r01*r20*sj5))+((cj5*r00*x5046))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5045*x5047))+(((-1.0)*x5048))+((x5045*x5048)));
j4eval[0]=x5049;
j4eval[1]=((IKabs(((((-1.0)*cj5*x5047))+x5046)))+(IKabs(r22)));
j4eval[2]=IKsign(x5049);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5050=cj5*cj5;
IkReal x5051=((1.0)*r20);
IkReal x5052=(r21*sj5);
IkReal x5053=(r01*r21);
CheckValue<IkReal> x5054 = IKatan2WithCheck(IkReal(r22),IkReal((x5052+(((-1.0)*cj5*x5051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5054.valid){
continue;
}
CheckValue<IkReal> x5055=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5050*x5051))+((x5050*x5053))+((cj5*r00*x5052))+(((-1.0)*x5053)))),-1);
if(!x5055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5054.value)+(((1.5707963267949)*(x5055.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5056=IKsin(j4);
IkReal x5057=IKcos(j4);
IkReal x5058=(cj5*r00);
IkReal x5059=(cj5*r20);
IkReal x5060=(cj5*r10);
IkReal x5061=((1.0)*x5057);
IkReal x5062=(sj5*x5057);
IkReal x5063=((1.0)*sj5*x5056);
evalcond[0]=(((r22*x5057))+(((-1.0)*r21*x5063))+((x5056*x5059)));
evalcond[1]=(((x5056*x5058))+((r02*x5057))+(((-1.0)*r01*x5063)));
evalcond[2]=((((-1.0)*x5059*x5061))+((r22*x5056))+((r21*x5062)));
evalcond[3]=(((r12*x5056))+((r11*x5062))+(((-1.0)*x5060*x5061)));
evalcond[4]=((-1.0)+((r12*x5057))+(((-1.0)*r11*x5063))+((x5056*x5060)));
evalcond[5]=((1.0)+(((-1.0)*x5058*x5061))+((r01*x5062))+((r02*x5056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5064=((1.0)*cj5);
CheckValue<IkReal> x5065=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5064)))),-1);
if(!x5065.valid){
continue;
}
CheckValue<IkReal> x5066 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5064)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5065.value)))+(x5066.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5067=IKsin(j4);
IkReal x5068=IKcos(j4);
IkReal x5069=(cj5*r00);
IkReal x5070=(cj5*r20);
IkReal x5071=(cj5*r10);
IkReal x5072=((1.0)*x5068);
IkReal x5073=(sj5*x5068);
IkReal x5074=((1.0)*sj5*x5067);
evalcond[0]=((((-1.0)*r21*x5074))+((x5067*x5070))+((r22*x5068)));
evalcond[1]=(((r02*x5068))+((x5067*x5069))+(((-1.0)*r01*x5074)));
evalcond[2]=(((r21*x5073))+(((-1.0)*x5070*x5072))+((r22*x5067)));
evalcond[3]=(((r12*x5067))+(((-1.0)*x5071*x5072))+((r11*x5073)));
evalcond[4]=((-1.0)+((x5067*x5071))+(((-1.0)*r11*x5074))+((r12*x5068)));
evalcond[5]=((1.0)+(((-1.0)*x5069*x5072))+((r02*x5067))+((r01*x5073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5075=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5075.valid){
continue;
}
CheckValue<IkReal> x5076 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5075.value)))+(x5076.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5077=IKsin(j4);
IkReal x5078=IKcos(j4);
IkReal x5079=(cj5*r00);
IkReal x5080=(cj5*r20);
IkReal x5081=(cj5*r10);
IkReal x5082=((1.0)*x5078);
IkReal x5083=(sj5*x5078);
IkReal x5084=((1.0)*sj5*x5077);
evalcond[0]=(((x5077*x5080))+(((-1.0)*r21*x5084))+((r22*x5078)));
evalcond[1]=((((-1.0)*r01*x5084))+((r02*x5078))+((x5077*x5079)));
evalcond[2]=(((r21*x5083))+(((-1.0)*x5080*x5082))+((r22*x5077)));
evalcond[3]=(((r11*x5083))+(((-1.0)*x5081*x5082))+((r12*x5077)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x5084))+((x5077*x5081))+((r12*x5078)));
evalcond[5]=((1.0)+((r01*x5083))+(((-1.0)*x5079*x5082))+((r02*x5077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=0;
sj2=0;
cj2=1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x5085=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5085;
j4eval[1]=IKsign(x5085);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=0;
sj2=0;
cj2=1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x5086=((1.0)*cj5);
IkReal x5087=((((-1.0)*r21*x5086))+(((-1.0)*r20*sj5)));
j4eval[0]=x5087;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5086))))));
j4eval[2]=IKsign(x5087);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=0;
sj2=0;
cj2=1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x5088=cj5*cj5;
IkReal x5089=r01*r01;
IkReal x5090=(cj5*r00);
IkReal x5091=(r01*sj5);
IkReal x5092=((((-2.0)*x5090*x5091))+(((-1.0)*x5088*x5089))+x5089+((x5088*(r00*r00)))+(r02*r02));
j4eval[0]=x5092;
j4eval[1]=IKsign(x5092);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5090))+x5091))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5093=cj5*cj5;
IkReal x5094=r01*r01;
IkReal x5095=(r01*sj5);
IkReal x5096=(cj5*r00);
CheckValue<IkReal> x5097 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x5096))+x5095)),IKFAST_ATAN2_MAGTHRESH);
if(!x5097.valid){
continue;
}
CheckValue<IkReal> x5098=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5093*x5094))+x5094+((x5093*(r00*r00)))+(((-2.0)*x5095*x5096))+(r02*r02))),-1);
if(!x5098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5097.value)+(((1.5707963267949)*(x5098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5099=IKsin(j4);
IkReal x5100=IKcos(j4);
IkReal x5101=(cj5*r00);
IkReal x5102=(cj5*r20);
IkReal x5103=(cj5*r10);
IkReal x5104=((1.0)*x5100);
IkReal x5105=(sj5*x5100);
IkReal x5106=((1.0)*sj5*x5099);
evalcond[0]=((((-1.0)*r21*x5106))+((x5099*x5102))+((r22*x5100)));
evalcond[1]=(((r02*x5100))+((x5099*x5101))+(((-1.0)*r01*x5106)));
evalcond[2]=(((r22*x5099))+((r21*x5105))+(((-1.0)*x5102*x5104)));
evalcond[3]=((((-1.0)*x5103*x5104))+((r12*x5099))+((r11*x5105)));
evalcond[4]=((1.0)+((r12*x5100))+((x5099*x5103))+(((-1.0)*r11*x5106)));
evalcond[5]=((-1.0)+((r01*x5105))+(((-1.0)*x5101*x5104))+((r02*x5099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5107=((1.0)*cj5);
CheckValue<IkReal> x5108=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5107))+(((-1.0)*r20*sj5)))),-1);
if(!x5108.valid){
continue;
}
CheckValue<IkReal> x5109 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5107)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5108.value)))+(x5109.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5110=IKsin(j4);
IkReal x5111=IKcos(j4);
IkReal x5112=(cj5*r00);
IkReal x5113=(cj5*r20);
IkReal x5114=(cj5*r10);
IkReal x5115=((1.0)*x5111);
IkReal x5116=(sj5*x5111);
IkReal x5117=((1.0)*sj5*x5110);
evalcond[0]=(((r22*x5111))+((x5110*x5113))+(((-1.0)*r21*x5117)));
evalcond[1]=(((r02*x5111))+((x5110*x5112))+(((-1.0)*r01*x5117)));
evalcond[2]=(((r21*x5116))+((r22*x5110))+(((-1.0)*x5113*x5115)));
evalcond[3]=((((-1.0)*x5114*x5115))+((r11*x5116))+((r12*x5110)));
evalcond[4]=((1.0)+((x5110*x5114))+(((-1.0)*r11*x5117))+((r12*x5111)));
evalcond[5]=((-1.0)+(((-1.0)*x5112*x5115))+((r01*x5116))+((r02*x5110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5118 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5118.valid){
continue;
}
CheckValue<IkReal> x5119=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5118.value)+(((1.5707963267949)*(x5119.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5120=IKsin(j4);
IkReal x5121=IKcos(j4);
IkReal x5122=(cj5*r00);
IkReal x5123=(cj5*r20);
IkReal x5124=(cj5*r10);
IkReal x5125=((1.0)*x5121);
IkReal x5126=(sj5*x5121);
IkReal x5127=((1.0)*sj5*x5120);
evalcond[0]=(((r22*x5121))+(((-1.0)*r21*x5127))+((x5120*x5123)));
evalcond[1]=((((-1.0)*r01*x5127))+((x5120*x5122))+((r02*x5121)));
evalcond[2]=(((r22*x5120))+(((-1.0)*x5123*x5125))+((r21*x5126)));
evalcond[3]=((((-1.0)*x5124*x5125))+((r12*x5120))+((r11*x5126)));
evalcond[4]=((1.0)+((r12*x5121))+(((-1.0)*r11*x5127))+((x5120*x5124)));
evalcond[5]=((-1.0)+((r01*x5126))+(((-1.0)*x5122*x5125))+((r02*x5120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x5128=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5128;
j4eval[1]=IKsign(x5128);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x5129=((1.0)*cj5);
IkReal x5130=((((-1.0)*r21*x5129))+(((-1.0)*r20*sj5)));
j4eval[0]=x5130;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x5129)))))+(IKabs(r02)));
j4eval[2]=IKsign(x5130);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x5131=cj5*cj5;
IkReal x5132=r01*r01;
IkReal x5133=(cj5*r00);
IkReal x5134=(r01*sj5);
IkReal x5135=((((-1.0)*x5131*x5132))+x5132+(r02*r02)+((x5131*(r00*r00)))+(((-2.0)*x5133*x5134)));
j4eval[0]=x5135;
j4eval[1]=IKsign(x5135);
j4eval[2]=((IKabs((x5134+(((-1.0)*x5133)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5136=cj5*cj5;
IkReal x5137=r01*r01;
IkReal x5138=(r01*sj5);
IkReal x5139=(cj5*r00);
CheckValue<IkReal> x5140 = IKatan2WithCheck(IkReal(r02),IkReal((x5138+(((-1.0)*x5139)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5140.valid){
continue;
}
CheckValue<IkReal> x5141=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5136*x5137))+(((-2.0)*x5138*x5139))+x5137+((x5136*(r00*r00)))+(r02*r02))),-1);
if(!x5141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5140.value)+(((1.5707963267949)*(x5141.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5142=IKsin(j4);
IkReal x5143=IKcos(j4);
IkReal x5144=(cj5*r00);
IkReal x5145=(cj5*r20);
IkReal x5146=(cj5*r10);
IkReal x5147=((1.0)*x5143);
IkReal x5148=(sj5*x5143);
IkReal x5149=((1.0)*sj5*x5142);
evalcond[0]=(((x5142*x5145))+(((-1.0)*r21*x5149))+((r22*x5143)));
evalcond[1]=(((x5142*x5144))+(((-1.0)*r01*x5149))+((r02*x5143)));
evalcond[2]=(((r21*x5148))+((r22*x5142))+(((-1.0)*x5145*x5147)));
evalcond[3]=(((r12*x5142))+((r11*x5148))+(((-1.0)*x5146*x5147)));
evalcond[4]=((1.0)+((x5142*x5146))+(((-1.0)*r11*x5149))+((r12*x5143)));
evalcond[5]=((-1.0)+((r01*x5148))+((r02*x5142))+(((-1.0)*x5144*x5147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5150=((1.0)*cj5);
CheckValue<IkReal> x5151 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5150)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5151.valid){
continue;
}
CheckValue<IkReal> x5152=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5150))+(((-1.0)*r20*sj5)))),-1);
if(!x5152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5151.value)+(((1.5707963267949)*(x5152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5153=IKsin(j4);
IkReal x5154=IKcos(j4);
IkReal x5155=(cj5*r00);
IkReal x5156=(cj5*r20);
IkReal x5157=(cj5*r10);
IkReal x5158=((1.0)*x5154);
IkReal x5159=(sj5*x5154);
IkReal x5160=((1.0)*sj5*x5153);
evalcond[0]=(((x5153*x5156))+(((-1.0)*r21*x5160))+((r22*x5154)));
evalcond[1]=(((x5153*x5155))+((r02*x5154))+(((-1.0)*r01*x5160)));
evalcond[2]=(((r21*x5159))+((r22*x5153))+(((-1.0)*x5156*x5158)));
evalcond[3]=(((r11*x5159))+((r12*x5153))+(((-1.0)*x5157*x5158)));
evalcond[4]=((1.0)+((x5153*x5157))+((r12*x5154))+(((-1.0)*r11*x5160)));
evalcond[5]=((-1.0)+((r01*x5159))+((r02*x5153))+(((-1.0)*x5155*x5158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5161 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5161.valid){
continue;
}
CheckValue<IkReal> x5162=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5161.value)+(((1.5707963267949)*(x5162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5163=IKsin(j4);
IkReal x5164=IKcos(j4);
IkReal x5165=(cj5*r00);
IkReal x5166=(cj5*r20);
IkReal x5167=(cj5*r10);
IkReal x5168=((1.0)*x5164);
IkReal x5169=(sj5*x5164);
IkReal x5170=((1.0)*sj5*x5163);
evalcond[0]=((((-1.0)*r21*x5170))+((r22*x5164))+((x5163*x5166)));
evalcond[1]=((((-1.0)*r01*x5170))+((r02*x5164))+((x5163*x5165)));
evalcond[2]=(((r21*x5169))+((r22*x5163))+(((-1.0)*x5166*x5168)));
evalcond[3]=(((r12*x5163))+((r11*x5169))+(((-1.0)*x5167*x5168)));
evalcond[4]=((1.0)+(((-1.0)*r11*x5170))+((r12*x5164))+((x5163*x5167)));
evalcond[5]=((-1.0)+((r01*x5169))+(((-1.0)*x5165*x5168))+((r02*x5163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x5171=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5171;
j4eval[1]=IKsign(x5171);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x5172=((1.0)*cj5);
IkReal x5173=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5172)));
j4eval[0]=x5173;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x5172))+((r21*sj5))))));
j4eval[2]=IKsign(x5173);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x5174=cj5*cj5;
IkReal x5175=(r21*sj5);
IkReal x5176=((1.0)*r20);
IkReal x5177=(r01*r21);
IkReal x5178=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5175))+(((-1.0)*x5177))+(((-1.0)*r00*x5174*x5176))+((x5174*x5177)));
j4eval[0]=x5178;
j4eval[1]=((IKabs((x5175+(((-1.0)*cj5*x5176)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5178);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5179=cj5*cj5;
IkReal x5180=((1.0)*r20);
IkReal x5181=(r21*sj5);
IkReal x5182=(r01*r21);
CheckValue<IkReal> x5183 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*x5180))+x5181)),IKFAST_ATAN2_MAGTHRESH);
if(!x5183.valid){
continue;
}
CheckValue<IkReal> x5184=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5181))+((x5179*x5182))+(((-1.0)*x5182))+(((-1.0)*r00*x5179*x5180)))),-1);
if(!x5184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5183.value)+(((1.5707963267949)*(x5184.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5185=IKsin(j4);
IkReal x5186=IKcos(j4);
IkReal x5187=(cj5*r00);
IkReal x5188=(cj5*r20);
IkReal x5189=(cj5*r10);
IkReal x5190=((1.0)*x5186);
IkReal x5191=(sj5*x5186);
IkReal x5192=((1.0)*sj5*x5185);
evalcond[0]=(((r22*x5186))+(((-1.0)*r21*x5192))+((x5185*x5188)));
evalcond[1]=((((-1.0)*r01*x5192))+((r02*x5186))+((x5185*x5187)));
evalcond[2]=(((r22*x5185))+((r21*x5191))+(((-1.0)*x5188*x5190)));
evalcond[3]=((((-1.0)*x5189*x5190))+((r11*x5191))+((r12*x5185)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x5192))+((x5185*x5189))+((r12*x5186)));
evalcond[5]=((1.0)+(((-1.0)*x5187*x5190))+((r02*x5185))+((r01*x5191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5193=((1.0)*cj5);
CheckValue<IkReal> x5194 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5194.valid){
continue;
}
CheckValue<IkReal> x5195=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5193))+(((-1.0)*r00*sj5)))),-1);
if(!x5195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5194.value)+(((1.5707963267949)*(x5195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5196=IKsin(j4);
IkReal x5197=IKcos(j4);
IkReal x5198=(cj5*r00);
IkReal x5199=(cj5*r20);
IkReal x5200=(cj5*r10);
IkReal x5201=((1.0)*x5197);
IkReal x5202=(sj5*x5197);
IkReal x5203=((1.0)*sj5*x5196);
evalcond[0]=(((r22*x5197))+((x5196*x5199))+(((-1.0)*r21*x5203)));
evalcond[1]=(((r02*x5197))+(((-1.0)*r01*x5203))+((x5196*x5198)));
evalcond[2]=((((-1.0)*x5199*x5201))+((r22*x5196))+((r21*x5202)));
evalcond[3]=((((-1.0)*x5200*x5201))+((r11*x5202))+((r12*x5196)));
evalcond[4]=((-1.0)+((x5196*x5200))+((r12*x5197))+(((-1.0)*r11*x5203)));
evalcond[5]=((1.0)+((r01*x5202))+((r02*x5196))+(((-1.0)*x5198*x5201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5204=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5204.valid){
continue;
}
CheckValue<IkReal> x5205 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5204.value)))+(x5205.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5206=IKsin(j4);
IkReal x5207=IKcos(j4);
IkReal x5208=(cj5*r00);
IkReal x5209=(cj5*r20);
IkReal x5210=(cj5*r10);
IkReal x5211=((1.0)*x5207);
IkReal x5212=(sj5*x5207);
IkReal x5213=((1.0)*sj5*x5206);
evalcond[0]=(((x5206*x5209))+((r22*x5207))+(((-1.0)*r21*x5213)));
evalcond[1]=(((x5206*x5208))+(((-1.0)*r01*x5213))+((r02*x5207)));
evalcond[2]=(((r22*x5206))+(((-1.0)*x5209*x5211))+((r21*x5212)));
evalcond[3]=(((r11*x5212))+((r12*x5206))+(((-1.0)*x5210*x5211)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x5213))+((x5206*x5210))+((r12*x5207)));
evalcond[5]=((1.0)+((r01*x5212))+((r02*x5206))+(((-1.0)*x5208*x5211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x5214=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5214;
j4eval[1]=IKsign(x5214);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x5215=((1.0)*cj5);
IkReal x5216=((((-1.0)*r21*x5215))+(((-1.0)*r20*sj5)));
j4eval[0]=x5216;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5215))))));
j4eval[2]=IKsign(x5216);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x5217=cj5*cj5;
IkReal x5218=r01*r01;
IkReal x5219=(cj5*r00);
IkReal x5220=(r01*sj5);
IkReal x5221=(x5218+((x5217*(r00*r00)))+(((-1.0)*x5217*x5218))+(r02*r02)+(((-2.0)*x5219*x5220)));
j4eval[0]=x5221;
j4eval[1]=IKsign(x5221);
j4eval[2]=((IKabs(r02))+(IKabs((x5220+(((-1.0)*x5219))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5222=cj5*cj5;
IkReal x5223=r01*r01;
IkReal x5224=(r01*sj5);
IkReal x5225=(cj5*r00);
CheckValue<IkReal> x5226=IKPowWithIntegerCheck(IKsign((x5223+(((-1.0)*x5222*x5223))+(((-2.0)*x5224*x5225))+((x5222*(r00*r00)))+(r02*r02))),-1);
if(!x5226.valid){
continue;
}
CheckValue<IkReal> x5227 = IKatan2WithCheck(IkReal(r02),IkReal((x5224+(((-1.0)*x5225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5226.value)))+(x5227.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5228=IKsin(j4);
IkReal x5229=IKcos(j4);
IkReal x5230=(cj5*r00);
IkReal x5231=(cj5*r20);
IkReal x5232=(cj5*r10);
IkReal x5233=((1.0)*x5229);
IkReal x5234=(sj5*x5229);
IkReal x5235=((1.0)*sj5*x5228);
evalcond[0]=((((-1.0)*r21*x5235))+((r22*x5229))+((x5228*x5231)));
evalcond[1]=(((r02*x5229))+((x5228*x5230))+(((-1.0)*r01*x5235)));
evalcond[2]=(((r22*x5228))+(((-1.0)*x5231*x5233))+((r21*x5234)));
evalcond[3]=(((r11*x5234))+(((-1.0)*x5232*x5233))+((r12*x5228)));
evalcond[4]=((1.0)+(((-1.0)*r11*x5235))+((x5228*x5232))+((r12*x5229)));
evalcond[5]=((-1.0)+((r02*x5228))+((r01*x5234))+(((-1.0)*x5230*x5233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5236=((1.0)*cj5);
CheckValue<IkReal> x5237 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5236)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5237.valid){
continue;
}
CheckValue<IkReal> x5238=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5236))+(((-1.0)*r20*sj5)))),-1);
if(!x5238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5237.value)+(((1.5707963267949)*(x5238.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5239=IKsin(j4);
IkReal x5240=IKcos(j4);
IkReal x5241=(cj5*r00);
IkReal x5242=(cj5*r20);
IkReal x5243=(cj5*r10);
IkReal x5244=((1.0)*x5240);
IkReal x5245=(sj5*x5240);
IkReal x5246=((1.0)*sj5*x5239);
evalcond[0]=(((x5239*x5242))+(((-1.0)*r21*x5246))+((r22*x5240)));
evalcond[1]=(((x5239*x5241))+(((-1.0)*r01*x5246))+((r02*x5240)));
evalcond[2]=((((-1.0)*x5242*x5244))+((r21*x5245))+((r22*x5239)));
evalcond[3]=(((r11*x5245))+(((-1.0)*x5243*x5244))+((r12*x5239)));
evalcond[4]=((1.0)+((x5239*x5243))+(((-1.0)*r11*x5246))+((r12*x5240)));
evalcond[5]=((-1.0)+((r01*x5245))+(((-1.0)*x5241*x5244))+((r02*x5239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5247 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5247.valid){
continue;
}
CheckValue<IkReal> x5248=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5247.value)+(((1.5707963267949)*(x5248.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5249=IKsin(j4);
IkReal x5250=IKcos(j4);
IkReal x5251=(cj5*r00);
IkReal x5252=(cj5*r20);
IkReal x5253=(cj5*r10);
IkReal x5254=((1.0)*x5250);
IkReal x5255=(sj5*x5250);
IkReal x5256=((1.0)*sj5*x5249);
evalcond[0]=(((r22*x5250))+((x5249*x5252))+(((-1.0)*r21*x5256)));
evalcond[1]=((((-1.0)*r01*x5256))+((x5249*x5251))+((r02*x5250)));
evalcond[2]=(((r21*x5255))+((r22*x5249))+(((-1.0)*x5252*x5254)));
evalcond[3]=(((r12*x5249))+((r11*x5255))+(((-1.0)*x5253*x5254)));
evalcond[4]=((1.0)+((r12*x5250))+(((-1.0)*r11*x5256))+((x5249*x5253)));
evalcond[5]=((-1.0)+((r01*x5255))+(((-1.0)*x5251*x5254))+((r02*x5249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x5257=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5257;
j4eval[1]=IKsign(x5257);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x5258=((1.0)*cj5);
IkReal x5259=((((-1.0)*r01*x5258))+(((-1.0)*r00*sj5)));
j4eval[0]=x5259;
j4eval[1]=((IKabs(((((-1.0)*r20*x5258))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5259);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x5260=cj5*cj5;
IkReal x5261=(r21*sj5);
IkReal x5262=((1.0)*r20);
IkReal x5263=(r01*r21);
IkReal x5264=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x5260*x5262))+(((-1.0)*x5263))+(((-1.0)*r02*r22))+((x5260*x5263))+((cj5*r00*x5261)));
j4eval[0]=x5264;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x5262))+x5261))));
j4eval[2]=IKsign(x5264);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5265=cj5*cj5;
IkReal x5266=((1.0)*r20);
IkReal x5267=(r21*sj5);
IkReal x5268=(r01*r21);
CheckValue<IkReal> x5269=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x5268))+(((-1.0)*r02*r22))+((x5265*x5268))+(((-1.0)*r00*x5265*x5266))+((cj5*r00*x5267)))),-1);
if(!x5269.valid){
continue;
}
CheckValue<IkReal> x5270 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*x5266))+x5267)),IKFAST_ATAN2_MAGTHRESH);
if(!x5270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5269.value)))+(x5270.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5271=IKsin(j4);
IkReal x5272=IKcos(j4);
IkReal x5273=(cj5*r00);
IkReal x5274=(cj5*r20);
IkReal x5275=(cj5*r10);
IkReal x5276=((1.0)*x5272);
IkReal x5277=(sj5*x5272);
IkReal x5278=((1.0)*sj5*x5271);
evalcond[0]=(((r22*x5272))+(((-1.0)*r21*x5278))+((x5271*x5274)));
evalcond[1]=(((r02*x5272))+(((-1.0)*r01*x5278))+((x5271*x5273)));
evalcond[2]=(((r22*x5271))+(((-1.0)*x5274*x5276))+((r21*x5277)));
evalcond[3]=((((-1.0)*x5275*x5276))+((r11*x5277))+((r12*x5271)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x5278))+((x5271*x5275))+((r12*x5272)));
evalcond[5]=((1.0)+((r02*x5271))+((r01*x5277))+(((-1.0)*x5273*x5276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5279=((1.0)*cj5);
CheckValue<IkReal> x5280 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5279)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5280.valid){
continue;
}
CheckValue<IkReal> x5281=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5279))+(((-1.0)*r00*sj5)))),-1);
if(!x5281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5280.value)+(((1.5707963267949)*(x5281.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5282=IKsin(j4);
IkReal x5283=IKcos(j4);
IkReal x5284=(cj5*r00);
IkReal x5285=(cj5*r20);
IkReal x5286=(cj5*r10);
IkReal x5287=((1.0)*x5283);
IkReal x5288=(sj5*x5283);
IkReal x5289=((1.0)*sj5*x5282);
evalcond[0]=(((r22*x5283))+((x5282*x5285))+(((-1.0)*r21*x5289)));
evalcond[1]=(((r02*x5283))+(((-1.0)*r01*x5289))+((x5282*x5284)));
evalcond[2]=(((r22*x5282))+((r21*x5288))+(((-1.0)*x5285*x5287)));
evalcond[3]=(((r12*x5282))+(((-1.0)*x5286*x5287))+((r11*x5288)));
evalcond[4]=((-1.0)+((r12*x5283))+((x5282*x5286))+(((-1.0)*r11*x5289)));
evalcond[5]=((1.0)+(((-1.0)*x5284*x5287))+((r02*x5282))+((r01*x5288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5290=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5290.valid){
continue;
}
CheckValue<IkReal> x5291 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5290.value)))+(x5291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5292=IKsin(j4);
IkReal x5293=IKcos(j4);
IkReal x5294=(cj5*r00);
IkReal x5295=(cj5*r20);
IkReal x5296=(cj5*r10);
IkReal x5297=((1.0)*x5293);
IkReal x5298=(sj5*x5293);
IkReal x5299=((1.0)*sj5*x5292);
evalcond[0]=(((r22*x5293))+(((-1.0)*r21*x5299))+((x5292*x5295)));
evalcond[1]=(((r02*x5293))+(((-1.0)*r01*x5299))+((x5292*x5294)));
evalcond[2]=(((r22*x5292))+((r21*x5298))+(((-1.0)*x5295*x5297)));
evalcond[3]=(((r12*x5292))+(((-1.0)*x5296*x5297))+((r11*x5298)));
evalcond[4]=((-1.0)+((r12*x5293))+(((-1.0)*r11*x5299))+((x5292*x5296)));
evalcond[5]=((1.0)+((r02*x5292))+(((-1.0)*x5294*x5297))+((r01*x5298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x5300=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5300;
j4eval[1]=IKsign(x5300);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x5301=((1.0)*cj5);
IkReal x5302=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5301)));
j4eval[0]=x5302;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5301)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5302);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x5303=cj5*cj5;
IkReal x5304=(r21*sj5);
IkReal x5305=((1.0)*r20);
IkReal x5306=(r01*r21);
IkReal x5307=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5303*x5305))+(((-1.0)*x5306))+((cj5*r00*x5304))+((x5303*x5306)));
j4eval[0]=x5307;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x5305))+x5304))));
j4eval[2]=IKsign(x5307);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5308=cj5*cj5;
IkReal x5309=((1.0)*r20);
IkReal x5310=(r21*sj5);
IkReal x5311=(r01*r21);
CheckValue<IkReal> x5312=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5310))+((x5308*x5311))+(((-1.0)*x5311))+(((-1.0)*r00*x5308*x5309)))),-1);
if(!x5312.valid){
continue;
}
CheckValue<IkReal> x5313 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*x5309))+x5310)),IKFAST_ATAN2_MAGTHRESH);
if(!x5313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5312.value)))+(x5313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5314=IKsin(j4);
IkReal x5315=IKcos(j4);
IkReal x5316=(cj5*r00);
IkReal x5317=(cj5*r20);
IkReal x5318=(cj5*r10);
IkReal x5319=((1.0)*x5315);
IkReal x5320=(sj5*x5315);
IkReal x5321=((1.0)*sj5*x5314);
evalcond[0]=(((r22*x5315))+(((-1.0)*r21*x5321))+((x5314*x5317)));
evalcond[1]=(((r02*x5315))+((x5314*x5316))+(((-1.0)*r01*x5321)));
evalcond[2]=(((r22*x5314))+((r21*x5320))+(((-1.0)*x5317*x5319)));
evalcond[3]=(((r11*x5320))+(((-1.0)*x5318*x5319))+((r12*x5314)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x5321))+((x5314*x5318))+((r12*x5315)));
evalcond[5]=((1.0)+((r02*x5314))+(((-1.0)*x5316*x5319))+((r01*x5320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5322=((1.0)*cj5);
CheckValue<IkReal> x5323=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5322)))),-1);
if(!x5323.valid){
continue;
}
CheckValue<IkReal> x5324 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5322))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5323.value)))+(x5324.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5325=IKsin(j4);
IkReal x5326=IKcos(j4);
IkReal x5327=(cj5*r00);
IkReal x5328=(cj5*r20);
IkReal x5329=(cj5*r10);
IkReal x5330=((1.0)*x5326);
IkReal x5331=(sj5*x5326);
IkReal x5332=((1.0)*sj5*x5325);
evalcond[0]=(((x5325*x5328))+(((-1.0)*r21*x5332))+((r22*x5326)));
evalcond[1]=(((x5325*x5327))+((r02*x5326))+(((-1.0)*r01*x5332)));
evalcond[2]=((((-1.0)*x5328*x5330))+((r22*x5325))+((r21*x5331)));
evalcond[3]=(((r11*x5331))+((r12*x5325))+(((-1.0)*x5329*x5330)));
evalcond[4]=((-1.0)+((x5325*x5329))+((r12*x5326))+(((-1.0)*r11*x5332)));
evalcond[5]=((1.0)+((r01*x5331))+((r02*x5325))+(((-1.0)*x5327*x5330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5333=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5333.valid){
continue;
}
CheckValue<IkReal> x5334 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5333.value)))+(x5334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5335=IKsin(j4);
IkReal x5336=IKcos(j4);
IkReal x5337=(cj5*r00);
IkReal x5338=(cj5*r20);
IkReal x5339=(cj5*r10);
IkReal x5340=((1.0)*x5336);
IkReal x5341=(sj5*x5336);
IkReal x5342=((1.0)*sj5*x5335);
evalcond[0]=(((r22*x5336))+((x5335*x5338))+(((-1.0)*r21*x5342)));
evalcond[1]=((((-1.0)*r01*x5342))+((x5335*x5337))+((r02*x5336)));
evalcond[2]=((((-1.0)*x5338*x5340))+((r22*x5335))+((r21*x5341)));
evalcond[3]=(((r12*x5335))+(((-1.0)*x5339*x5340))+((r11*x5341)));
evalcond[4]=((-1.0)+((r12*x5336))+(((-1.0)*r11*x5342))+((x5335*x5339)));
evalcond[5]=((1.0)+((r01*x5341))+((r02*x5335))+(((-1.0)*x5337*x5340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x5343=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5343;
j4eval[1]=IKsign(x5343);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x5344=((1.0)*cj5);
IkReal x5345=((((-1.0)*r21*x5344))+(((-1.0)*r20*sj5)));
j4eval[0]=x5345;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5344))))));
j4eval[2]=IKsign(x5345);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x5346=cj5*cj5;
IkReal x5347=r01*r01;
IkReal x5348=(cj5*r00);
IkReal x5349=(r01*sj5);
IkReal x5350=(x5347+((x5346*(r00*r00)))+(((-1.0)*x5346*x5347))+(((-2.0)*x5348*x5349))+(r02*r02));
j4eval[0]=x5350;
j4eval[1]=IKsign(x5350);
j4eval[2]=((IKabs(r02))+(IKabs((x5349+(((-1.0)*x5348))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5351=cj5*cj5;
IkReal x5352=r01*r01;
IkReal x5353=(r01*sj5);
IkReal x5354=(cj5*r00);
CheckValue<IkReal> x5355 = IKatan2WithCheck(IkReal(r02),IkReal((x5353+(((-1.0)*x5354)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5355.valid){
continue;
}
CheckValue<IkReal> x5356=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5351*x5352))+((x5351*(r00*r00)))+x5352+(((-2.0)*x5353*x5354))+(r02*r02))),-1);
if(!x5356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5355.value)+(((1.5707963267949)*(x5356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5357=IKsin(j4);
IkReal x5358=IKcos(j4);
IkReal x5359=(cj5*r00);
IkReal x5360=(cj5*r20);
IkReal x5361=(cj5*r10);
IkReal x5362=((1.0)*x5358);
IkReal x5363=(sj5*x5358);
IkReal x5364=((1.0)*sj5*x5357);
evalcond[0]=((((-1.0)*r21*x5364))+((r22*x5358))+((x5357*x5360)));
evalcond[1]=(((x5357*x5359))+((r02*x5358))+(((-1.0)*r01*x5364)));
evalcond[2]=((((-1.0)*x5360*x5362))+((r22*x5357))+((r21*x5363)));
evalcond[3]=(((r12*x5357))+(((-1.0)*x5361*x5362))+((r11*x5363)));
evalcond[4]=((1.0)+((r12*x5358))+((x5357*x5361))+(((-1.0)*r11*x5364)));
evalcond[5]=((-1.0)+(((-1.0)*x5359*x5362))+((r02*x5357))+((r01*x5363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5365=((1.0)*cj5);
CheckValue<IkReal> x5366 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5365)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5366.valid){
continue;
}
CheckValue<IkReal> x5367=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5365))+(((-1.0)*r20*sj5)))),-1);
if(!x5367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5366.value)+(((1.5707963267949)*(x5367.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5368=IKsin(j4);
IkReal x5369=IKcos(j4);
IkReal x5370=(cj5*r00);
IkReal x5371=(cj5*r20);
IkReal x5372=(cj5*r10);
IkReal x5373=((1.0)*x5369);
IkReal x5374=(sj5*x5369);
IkReal x5375=((1.0)*sj5*x5368);
evalcond[0]=(((r22*x5369))+((x5368*x5371))+(((-1.0)*r21*x5375)));
evalcond[1]=(((r02*x5369))+((x5368*x5370))+(((-1.0)*r01*x5375)));
evalcond[2]=(((r22*x5368))+((r21*x5374))+(((-1.0)*x5371*x5373)));
evalcond[3]=(((r12*x5368))+(((-1.0)*x5372*x5373))+((r11*x5374)));
evalcond[4]=((1.0)+((r12*x5369))+((x5368*x5372))+(((-1.0)*r11*x5375)));
evalcond[5]=((-1.0)+((r02*x5368))+(((-1.0)*x5370*x5373))+((r01*x5374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5376 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5376.valid){
continue;
}
CheckValue<IkReal> x5377=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5376.value)+(((1.5707963267949)*(x5377.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5378=IKsin(j4);
IkReal x5379=IKcos(j4);
IkReal x5380=(cj5*r00);
IkReal x5381=(cj5*r20);
IkReal x5382=(cj5*r10);
IkReal x5383=((1.0)*x5379);
IkReal x5384=(sj5*x5379);
IkReal x5385=((1.0)*sj5*x5378);
evalcond[0]=(((r22*x5379))+((x5378*x5381))+(((-1.0)*r21*x5385)));
evalcond[1]=(((x5378*x5380))+((r02*x5379))+(((-1.0)*r01*x5385)));
evalcond[2]=(((r22*x5378))+((r21*x5384))+(((-1.0)*x5381*x5383)));
evalcond[3]=((((-1.0)*x5382*x5383))+((r11*x5384))+((r12*x5378)));
evalcond[4]=((1.0)+((x5378*x5382))+((r12*x5379))+(((-1.0)*r11*x5385)));
evalcond[5]=((-1.0)+((r02*x5378))+(((-1.0)*x5380*x5383))+((r01*x5384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5386=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5386);
rxp0_2=(py*r00);
rxp1_0=(r21*x5386);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x5387=((1.0)*sj0);
j4eval[0]=r12;
j4eval[1]=IKsign(r12);
j4eval[2]=((IKabs(((((-1.0)*cj2*x5387))+(((-1.0)*cj0*sj2)))))+(IKabs((((cj0*cj2))+(((-1.0)*sj2*x5387))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5388=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5388);
rxp0_2=(py*r00);
rxp1_0=(r21*x5388);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x5389=((1.0)*sj0);
IkReal x5390=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x5390;
j4eval[1]=IKsign(x5390);
j4eval[2]=((IKabs(((((-1.0)*cj2*x5389))+(((-1.0)*cj0*sj2)))))+(IKabs((((cj0*cj2))+(((-1.0)*sj2*x5389))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5391=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=1.0;
j1=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5391);
rxp0_2=(py*r00);
rxp1_0=(r21*x5391);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5392=((1.0)*cj2);
CheckValue<IkReal> x5393=IKPowWithIntegerCheck(r12,-1);
if(!x5393.valid){
continue;
}
CheckValue<IkReal> x5394=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x5394.valid){
continue;
}
if( IKabs(((x5393.value)*(((((-1.0)*sj0*x5392))+(((-1.0)*cj0*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5394.value)*(((((-1.0)*cj0*x5392))+((sj0*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5393.value)*(((((-1.0)*sj0*x5392))+(((-1.0)*cj0*sj2))))))+IKsqr(((x5394.value)*(((((-1.0)*cj0*x5392))+((sj0*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x5393.value)*(((((-1.0)*sj0*x5392))+(((-1.0)*cj0*sj2))))), ((x5394.value)*(((((-1.0)*cj0*x5392))+((sj0*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5395=IKsin(j4);
IkReal x5396=IKcos(j4);
IkReal x5397=(cj2*sj0);
IkReal x5398=(cj0*sj2);
IkReal x5399=(cj0*cj2);
IkReal x5400=(r01*sj5);
IkReal x5401=(r21*sj5);
IkReal x5402=(sj0*sj2);
IkReal x5403=((1.0)*x5395);
IkReal x5404=(cj5*x5395);
IkReal x5405=(x5397+x5398);
IkReal x5406=((1.0)*cj5*x5396);
evalcond[0]=(x5405+((r12*x5395)));
evalcond[1]=(x5402+((r12*x5396))+(((-1.0)*x5399)));
evalcond[2]=(((r20*x5404))+(((-1.0)*x5401*x5403)));
evalcond[3]=((((-1.0)*r20*x5406))+((x5396*x5401)));
evalcond[4]=((((-1.0)*x5400*x5403))+x5405+((r00*x5404)));
evalcond[5]=((((-1.0)*r00*x5406))+(((-1.0)*x5402))+x5399+((x5396*x5400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5407=((1.0)*sj0);
CheckValue<IkReal> x5408=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x5408.valid){
continue;
}
CheckValue<IkReal> x5409 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x5407))+(((-1.0)*cj0*sj2)))),IkReal(((((-1.0)*sj2*x5407))+((cj0*cj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5408.value)))+(x5409.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5410=IKsin(j4);
IkReal x5411=IKcos(j4);
IkReal x5412=(cj2*sj0);
IkReal x5413=(cj0*sj2);
IkReal x5414=(cj0*cj2);
IkReal x5415=(r01*sj5);
IkReal x5416=(r21*sj5);
IkReal x5417=(sj0*sj2);
IkReal x5418=((1.0)*x5410);
IkReal x5419=(cj5*x5410);
IkReal x5420=(x5412+x5413);
IkReal x5421=((1.0)*cj5*x5411);
evalcond[0]=(x5420+((r12*x5410)));
evalcond[1]=((((-1.0)*x5414))+x5417+((r12*x5411)));
evalcond[2]=((((-1.0)*x5416*x5418))+((r20*x5419)));
evalcond[3]=(((x5411*x5416))+(((-1.0)*r20*x5421)));
evalcond[4]=((((-1.0)*x5415*x5418))+x5420+((r00*x5419)));
evalcond[5]=((((-1.0)*x5417))+x5414+((x5411*x5415))+(((-1.0)*r00*x5421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5422=((1.0)*sj0);
CheckValue<IkReal> x5423=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x5423.valid){
continue;
}
CheckValue<IkReal> x5424 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*sj2))+(((-1.0)*cj2*x5422)))),IkReal(((((-1.0)*sj2*x5422))+((cj0*cj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5423.value)))+(x5424.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5425=IKsin(j4);
IkReal x5426=IKcos(j4);
IkReal x5427=(cj2*sj0);
IkReal x5428=(cj0*sj2);
IkReal x5429=(cj0*cj2);
IkReal x5430=(r01*sj5);
IkReal x5431=(r21*sj5);
IkReal x5432=(sj0*sj2);
IkReal x5433=((1.0)*x5425);
IkReal x5434=(cj5*x5425);
IkReal x5435=(x5428+x5427);
IkReal x5436=((1.0)*cj5*x5426);
evalcond[0]=(((r12*x5425))+x5435);
evalcond[1]=(((r12*x5426))+x5432+(((-1.0)*x5429)));
evalcond[2]=((((-1.0)*x5431*x5433))+((r20*x5434)));
evalcond[3]=(((x5426*x5431))+(((-1.0)*r20*x5436)));
evalcond[4]=(x5435+(((-1.0)*x5430*x5433))+((r00*x5434)));
evalcond[5]=(x5429+(((-1.0)*r00*x5436))+(((-1.0)*x5432))+((x5426*x5430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5437=cj5*cj5;
IkReal x5438=(r11*r21);
IkReal x5439=(cj0*sj2);
IkReal x5440=(cj2*sj0);
IkReal x5441=(r21*sj5);
IkReal x5442=(cj5*r20);
CheckValue<IkReal> x5443 = IKatan2WithCheck(IkReal((((r22*x5439))+((r22*x5440)))),IkReal((((x5440*x5441))+(((-1.0)*x5440*x5442))+((x5439*x5441))+(((-1.0)*x5439*x5442)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5443.valid){
continue;
}
CheckValue<IkReal> x5444=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5438))+(((-1.0)*r12*r22))+((cj5*r10*x5441))+(((-1.0)*r10*r20*x5437))+((r11*sj5*x5442))+((x5437*x5438)))),-1);
if(!x5444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5443.value)+(((1.5707963267949)*(x5444.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5445=IKsin(j4);
IkReal x5446=IKcos(j4);
IkReal x5447=(cj2*sj0);
IkReal x5448=(cj0*sj2);
IkReal x5449=(cj5*r00);
IkReal x5450=(cj0*cj2);
IkReal x5451=(sj0*sj2);
IkReal x5452=((1.0)*x5446);
IkReal x5453=(sj5*x5446);
IkReal x5454=(cj5*x5445);
IkReal x5455=(x5448+x5447);
IkReal x5456=((1.0)*sj5*x5445);
evalcond[0]=((((-1.0)*r21*x5456))+((r22*x5446))+((r20*x5454)));
evalcond[1]=(((r21*x5453))+(((-1.0)*cj5*r20*x5452))+((r22*x5445)));
evalcond[2]=(x5455+((x5445*x5449))+(((-1.0)*r01*x5456))+((r02*x5446)));
evalcond[3]=(x5455+((r12*x5445))+(((-1.0)*cj5*r10*x5452))+((r11*x5453)));
evalcond[4]=(x5451+((r10*x5454))+((r12*x5446))+(((-1.0)*x5450))+(((-1.0)*r11*x5456)));
evalcond[5]=(x5450+((r01*x5453))+(((-1.0)*x5449*x5452))+(((-1.0)*x5451))+((r02*x5445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5457=(cj2*sj0);
IkReal x5458=(r21*sj5);
IkReal x5459=(cj0*sj2);
IkReal x5460=((1.0)*r22);
IkReal x5461=((1.0)*cj5*r20);
CheckValue<IkReal> x5462=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5462.valid){
continue;
}
CheckValue<IkReal> x5463 = IKatan2WithCheck(IkReal(((((-1.0)*x5459*x5461))+((x5458*x5459))+(((-1.0)*x5457*x5461))+((x5457*x5458)))),IkReal(((((-1.0)*x5459*x5460))+(((-1.0)*x5457*x5460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5462.value)))+(x5463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5464=IKsin(j4);
IkReal x5465=IKcos(j4);
IkReal x5466=(cj2*sj0);
IkReal x5467=(cj0*sj2);
IkReal x5468=(cj5*r00);
IkReal x5469=(cj0*cj2);
IkReal x5470=(sj0*sj2);
IkReal x5471=((1.0)*x5465);
IkReal x5472=(sj5*x5465);
IkReal x5473=(cj5*x5464);
IkReal x5474=(x5467+x5466);
IkReal x5475=((1.0)*sj5*x5464);
evalcond[0]=(((r22*x5465))+((r20*x5473))+(((-1.0)*r21*x5475)));
evalcond[1]=(((r22*x5464))+(((-1.0)*cj5*r20*x5471))+((r21*x5472)));
evalcond[2]=(x5474+((r02*x5465))+(((-1.0)*r01*x5475))+((x5464*x5468)));
evalcond[3]=(x5474+((r12*x5464))+(((-1.0)*cj5*r10*x5471))+((r11*x5472)));
evalcond[4]=(x5470+((r10*x5473))+(((-1.0)*r11*x5475))+((r12*x5465))+(((-1.0)*x5469)));
evalcond[5]=((((-1.0)*x5470))+(((-1.0)*x5468*x5471))+x5469+((r02*x5464))+((r01*x5472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5476=((1.0)*cj5);
IkReal x5477=(cj0*sj2);
IkReal x5478=(cj2*sj0);
IkReal x5479=(r21*sj5);
CheckValue<IkReal> x5480 = IKatan2WithCheck(IkReal((((r22*x5477))+((r22*x5478)))),IkReal((((x5477*x5479))+(((-1.0)*r20*x5476*x5478))+(((-1.0)*r20*x5476*x5477))+((x5478*x5479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5480.valid){
continue;
}
CheckValue<IkReal> x5481=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5476)))),-1);
if(!x5481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5480.value)+(((1.5707963267949)*(x5481.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5482=IKsin(j4);
IkReal x5483=IKcos(j4);
IkReal x5484=(cj2*sj0);
IkReal x5485=(cj0*sj2);
IkReal x5486=(cj5*r00);
IkReal x5487=(cj0*cj2);
IkReal x5488=(sj0*sj2);
IkReal x5489=((1.0)*x5483);
IkReal x5490=(sj5*x5483);
IkReal x5491=(cj5*x5482);
IkReal x5492=(x5485+x5484);
IkReal x5493=((1.0)*sj5*x5482);
evalcond[0]=(((r20*x5491))+((r22*x5483))+(((-1.0)*r21*x5493)));
evalcond[1]=(((r21*x5490))+(((-1.0)*cj5*r20*x5489))+((r22*x5482)));
evalcond[2]=(x5492+((x5482*x5486))+(((-1.0)*r01*x5493))+((r02*x5483)));
evalcond[3]=(x5492+((r12*x5482))+((r11*x5490))+(((-1.0)*cj5*r10*x5489)));
evalcond[4]=(x5488+(((-1.0)*r11*x5493))+((r12*x5483))+(((-1.0)*x5487))+((r10*x5491)));
evalcond[5]=(((r01*x5490))+x5487+(((-1.0)*x5486*x5489))+(((-1.0)*x5488))+((r02*x5482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x5494=(cj2*sj0);
IkReal x5495=(r21*sj5);
IkReal x5496=(cj5*r20);
IkReal x5497=((1.0)*cj0*sj2);
IkReal x5498=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5498;
j4eval[1]=IKsign(x5498);
j4eval[2]=((IKabs((((x5494*x5496))+((cj0*sj2*x5495))+(((-1.0)*x5496*x5497))+(((-1.0)*x5494*x5495)))))+(IKabs(((((-1.0)*r22*x5497))+((r22*x5494))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x5499=((1.0)*cj5);
IkReal x5500=(r21*sj5);
IkReal x5501=(cj2*sj0);
IkReal x5502=(cj0*sj2);
IkReal x5503=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5499)));
j4eval[0]=x5503;
j4eval[1]=IKsign(x5503);
j4eval[2]=((IKabs((((r22*x5501))+(((-1.0)*r22*x5502)))))+(IKabs(((((-1.0)*r20*x5499*x5501))+(((-1.0)*x5500*x5502))+((cj5*r20*x5502))+((x5500*x5501))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x5504=cj5*cj5;
IkReal x5505=(r11*r21);
IkReal x5506=(cj0*sj2);
IkReal x5507=((1.0)*r22);
IkReal x5508=((1.0)*r20);
IkReal x5509=(cj2*sj0);
IkReal x5510=(r21*sj5);
IkReal x5511=(cj5*r20);
IkReal x5512=((((-1.0)*r12*x5507))+(((-1.0)*x5505))+((r11*sj5*x5511))+((x5504*x5505))+((cj5*r10*x5510))+(((-1.0)*r10*x5504*x5508)));
j4eval[0]=x5512;
j4eval[1]=((IKabs((((r22*x5506))+(((-1.0)*x5507*x5509)))))+(IKabs((((x5509*x5511))+(((-1.0)*x5509*x5510))+((x5506*x5510))+(((-1.0)*cj5*x5506*x5508))))));
j4eval[2]=IKsign(x5512);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=0;
sj2=0;
cj2=1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x5513=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5513;
j4eval[1]=IKsign(x5513);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=0;
sj2=0;
cj2=1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x5514=((1.0)*cj5);
IkReal x5515=((((-1.0)*r01*x5514))+(((-1.0)*r00*sj5)));
j4eval[0]=x5515;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x5514))))));
j4eval[2]=IKsign(x5515);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=0;
sj2=0;
cj2=1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x5516=cj5*cj5;
IkReal x5517=r01*r01;
IkReal x5518=(cj5*r00);
IkReal x5519=(r01*sj5);
IkReal x5520=(x5517+(((-2.0)*x5518*x5519))+(r02*r02)+((x5516*(r00*r00)))+(((-1.0)*x5516*x5517)));
j4eval[0]=x5520;
j4eval[1]=IKsign(x5520);
j4eval[2]=((IKabs(r02))+(IKabs((x5519+(((-1.0)*x5518))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5521=cj5*cj5;
IkReal x5522=r01*r01;
IkReal x5523=(r01*sj5);
IkReal x5524=(cj5*r00);
CheckValue<IkReal> x5525 = IKatan2WithCheck(IkReal(r02),IkReal((x5523+(((-1.0)*x5524)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5525.valid){
continue;
}
CheckValue<IkReal> x5526=IKPowWithIntegerCheck(IKsign((x5522+(((-1.0)*x5521*x5522))+((x5521*(r00*r00)))+(r02*r02)+(((-2.0)*x5523*x5524)))),-1);
if(!x5526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5525.value)+(((1.5707963267949)*(x5526.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5527=IKsin(j4);
IkReal x5528=IKcos(j4);
IkReal x5529=(cj5*r00);
IkReal x5530=(cj5*r20);
IkReal x5531=(cj5*r10);
IkReal x5532=((1.0)*x5528);
IkReal x5533=(sj5*x5528);
IkReal x5534=((1.0)*sj5*x5527);
evalcond[0]=(((x5527*x5530))+((r22*x5528))+(((-1.0)*r21*x5534)));
evalcond[1]=(((r02*x5528))+((x5527*x5529))+(((-1.0)*r01*x5534)));
evalcond[2]=(((r22*x5527))+(((-1.0)*x5530*x5532))+((r21*x5533)));
evalcond[3]=(((r11*x5533))+(((-1.0)*x5531*x5532))+((r12*x5527)));
evalcond[4]=((-1.0)+((x5527*x5531))+((r12*x5528))+(((-1.0)*r11*x5534)));
evalcond[5]=((-1.0)+((r02*x5527))+((r01*x5533))+(((-1.0)*x5529*x5532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5535=((1.0)*cj5);
CheckValue<IkReal> x5536 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5535)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5536.valid){
continue;
}
CheckValue<IkReal> x5537=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5535)))),-1);
if(!x5537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5536.value)+(((1.5707963267949)*(x5537.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5538=IKsin(j4);
IkReal x5539=IKcos(j4);
IkReal x5540=(cj5*r00);
IkReal x5541=(cj5*r20);
IkReal x5542=(cj5*r10);
IkReal x5543=((1.0)*x5539);
IkReal x5544=(sj5*x5539);
IkReal x5545=((1.0)*sj5*x5538);
evalcond[0]=(((x5538*x5541))+((r22*x5539))+(((-1.0)*r21*x5545)));
evalcond[1]=(((x5538*x5540))+(((-1.0)*r01*x5545))+((r02*x5539)));
evalcond[2]=((((-1.0)*x5541*x5543))+((r22*x5538))+((r21*x5544)));
evalcond[3]=((((-1.0)*x5542*x5543))+((r11*x5544))+((r12*x5538)));
evalcond[4]=((-1.0)+((x5538*x5542))+(((-1.0)*r11*x5545))+((r12*x5539)));
evalcond[5]=((-1.0)+(((-1.0)*x5540*x5543))+((r02*x5538))+((r01*x5544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5546=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5546.valid){
continue;
}
CheckValue<IkReal> x5547 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5546.value)))+(x5547.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5548=IKsin(j4);
IkReal x5549=IKcos(j4);
IkReal x5550=(cj5*r00);
IkReal x5551=(cj5*r20);
IkReal x5552=(cj5*r10);
IkReal x5553=((1.0)*x5549);
IkReal x5554=(sj5*x5549);
IkReal x5555=((1.0)*sj5*x5548);
evalcond[0]=((((-1.0)*r21*x5555))+((x5548*x5551))+((r22*x5549)));
evalcond[1]=((((-1.0)*r01*x5555))+((r02*x5549))+((x5548*x5550)));
evalcond[2]=(((r21*x5554))+(((-1.0)*x5551*x5553))+((r22*x5548)));
evalcond[3]=(((r12*x5548))+((r11*x5554))+(((-1.0)*x5552*x5553)));
evalcond[4]=((-1.0)+((r12*x5549))+(((-1.0)*r11*x5555))+((x5548*x5552)));
evalcond[5]=((-1.0)+(((-1.0)*x5550*x5553))+((r01*x5554))+((r02*x5548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=0;
sj2=0;
cj2=1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x5556=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5556;
j4eval[1]=IKsign(x5556);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=0;
sj2=0;
cj2=1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x5557=((1.0)*cj5);
IkReal x5558=((((-1.0)*r21*x5557))+(((-1.0)*r20*sj5)));
j4eval[0]=x5558;
j4eval[1]=((IKabs(((((-1.0)*r00*x5557))+((r01*sj5)))))+(IKabs(r02)));
j4eval[2]=IKsign(x5558);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=0;
sj2=0;
cj2=1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x5559=cj5*cj5;
IkReal x5560=(r21*sj5);
IkReal x5561=((1.0)*r20);
IkReal x5562=(r01*r21);
IkReal x5563=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5559*x5561))+((cj5*r00*x5560))+(((-1.0)*x5562))+((x5559*x5562)));
j4eval[0]=x5563;
j4eval[1]=((IKabs(((((-1.0)*cj5*x5561))+x5560)))+(IKabs(r22)));
j4eval[2]=IKsign(x5563);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5564=cj5*cj5;
IkReal x5565=((1.0)*r20);
IkReal x5566=(r21*sj5);
IkReal x5567=(r01*r21);
CheckValue<IkReal> x5568 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*x5565))+x5566)),IKFAST_ATAN2_MAGTHRESH);
if(!x5568.valid){
continue;
}
CheckValue<IkReal> x5569=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5564*x5567))+(((-1.0)*r00*x5564*x5565))+((cj5*r00*x5566))+(((-1.0)*x5567)))),-1);
if(!x5569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5568.value)+(((1.5707963267949)*(x5569.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5570=IKsin(j4);
IkReal x5571=IKcos(j4);
IkReal x5572=(cj5*r00);
IkReal x5573=(cj5*r20);
IkReal x5574=(cj5*r10);
IkReal x5575=((1.0)*x5571);
IkReal x5576=(sj5*x5571);
IkReal x5577=((1.0)*sj5*x5570);
evalcond[0]=(((r22*x5571))+(((-1.0)*r21*x5577))+((x5570*x5573)));
evalcond[1]=(((r02*x5571))+(((-1.0)*r01*x5577))+((x5570*x5572)));
evalcond[2]=(((r22*x5570))+((r21*x5576))+(((-1.0)*x5573*x5575)));
evalcond[3]=(((r11*x5576))+((r12*x5570))+(((-1.0)*x5574*x5575)));
evalcond[4]=((1.0)+(((-1.0)*r11*x5577))+((r12*x5571))+((x5570*x5574)));
evalcond[5]=((1.0)+((r02*x5570))+(((-1.0)*x5572*x5575))+((r01*x5576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5578=((1.0)*cj5);
CheckValue<IkReal> x5579=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5578))+(((-1.0)*r20*sj5)))),-1);
if(!x5579.valid){
continue;
}
CheckValue<IkReal> x5580 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5578)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5579.value)))+(x5580.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5581=IKsin(j4);
IkReal x5582=IKcos(j4);
IkReal x5583=(cj5*r00);
IkReal x5584=(cj5*r20);
IkReal x5585=(cj5*r10);
IkReal x5586=((1.0)*x5582);
IkReal x5587=(sj5*x5582);
IkReal x5588=((1.0)*sj5*x5581);
evalcond[0]=((((-1.0)*r21*x5588))+((x5581*x5584))+((r22*x5582)));
evalcond[1]=(((r02*x5582))+(((-1.0)*r01*x5588))+((x5581*x5583)));
evalcond[2]=(((r21*x5587))+(((-1.0)*x5584*x5586))+((r22*x5581)));
evalcond[3]=(((r11*x5587))+(((-1.0)*x5585*x5586))+((r12*x5581)));
evalcond[4]=((1.0)+(((-1.0)*r11*x5588))+((r12*x5582))+((x5581*x5585)));
evalcond[5]=((1.0)+((r02*x5581))+(((-1.0)*x5583*x5586))+((r01*x5587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5589 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5589.valid){
continue;
}
CheckValue<IkReal> x5590=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5589.value)+(((1.5707963267949)*(x5590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5591=IKsin(j4);
IkReal x5592=IKcos(j4);
IkReal x5593=(cj5*r00);
IkReal x5594=(cj5*r20);
IkReal x5595=(cj5*r10);
IkReal x5596=((1.0)*x5592);
IkReal x5597=(sj5*x5592);
IkReal x5598=((1.0)*sj5*x5591);
evalcond[0]=((((-1.0)*r21*x5598))+((x5591*x5594))+((r22*x5592)));
evalcond[1]=(((r02*x5592))+(((-1.0)*r01*x5598))+((x5591*x5593)));
evalcond[2]=(((r21*x5597))+(((-1.0)*x5594*x5596))+((r22*x5591)));
evalcond[3]=((((-1.0)*x5595*x5596))+((r11*x5597))+((r12*x5591)));
evalcond[4]=((1.0)+(((-1.0)*r11*x5598))+((r12*x5592))+((x5591*x5595)));
evalcond[5]=((1.0)+(((-1.0)*x5593*x5596))+((r02*x5591))+((r01*x5597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x5599=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5599;
j4eval[1]=IKsign(x5599);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x5600=((1.0)*cj5);
IkReal x5601=((((-1.0)*r01*x5600))+(((-1.0)*r00*sj5)));
j4eval[0]=x5601;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5600)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5601);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x5602=cj5*cj5;
IkReal x5603=r01*r01;
IkReal x5604=(cj5*r00);
IkReal x5605=(r01*sj5);
IkReal x5606=(x5603+((x5602*(r00*r00)))+(((-1.0)*x5602*x5603))+(((-2.0)*x5604*x5605))+(r02*r02));
j4eval[0]=x5606;
j4eval[1]=IKsign(x5606);
j4eval[2]=((IKabs(r02))+(IKabs((x5605+(((-1.0)*x5604))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5607=cj5*cj5;
IkReal x5608=r01*r01;
IkReal x5609=(r01*sj5);
IkReal x5610=(cj5*r00);
CheckValue<IkReal> x5611=IKPowWithIntegerCheck(IKsign((x5608+(((-1.0)*x5607*x5608))+(((-2.0)*x5609*x5610))+((x5607*(r00*r00)))+(r02*r02))),-1);
if(!x5611.valid){
continue;
}
CheckValue<IkReal> x5612 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x5610))+x5609)),IKFAST_ATAN2_MAGTHRESH);
if(!x5612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5611.value)))+(x5612.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5613=IKsin(j4);
IkReal x5614=IKcos(j4);
IkReal x5615=(cj5*r00);
IkReal x5616=(cj5*r20);
IkReal x5617=(cj5*r10);
IkReal x5618=((1.0)*x5614);
IkReal x5619=(sj5*x5614);
IkReal x5620=((1.0)*sj5*x5613);
evalcond[0]=(((x5613*x5616))+(((-1.0)*r21*x5620))+((r22*x5614)));
evalcond[1]=(((x5613*x5615))+(((-1.0)*r01*x5620))+((r02*x5614)));
evalcond[2]=(((r21*x5619))+(((-1.0)*x5616*x5618))+((r22*x5613)));
evalcond[3]=((((-1.0)*x5617*x5618))+((r12*x5613))+((r11*x5619)));
evalcond[4]=((-1.0)+((x5613*x5617))+(((-1.0)*r11*x5620))+((r12*x5614)));
evalcond[5]=((-1.0)+((r02*x5613))+((r01*x5619))+(((-1.0)*x5615*x5618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5621=((1.0)*cj5);
CheckValue<IkReal> x5622=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5621))+(((-1.0)*r00*sj5)))),-1);
if(!x5622.valid){
continue;
}
CheckValue<IkReal> x5623 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5621)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5622.value)))+(x5623.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5624=IKsin(j4);
IkReal x5625=IKcos(j4);
IkReal x5626=(cj5*r00);
IkReal x5627=(cj5*r20);
IkReal x5628=(cj5*r10);
IkReal x5629=((1.0)*x5625);
IkReal x5630=(sj5*x5625);
IkReal x5631=((1.0)*sj5*x5624);
evalcond[0]=(((x5624*x5627))+(((-1.0)*r21*x5631))+((r22*x5625)));
evalcond[1]=(((x5624*x5626))+((r02*x5625))+(((-1.0)*r01*x5631)));
evalcond[2]=((((-1.0)*x5627*x5629))+((r22*x5624))+((r21*x5630)));
evalcond[3]=(((r11*x5630))+((r12*x5624))+(((-1.0)*x5628*x5629)));
evalcond[4]=((-1.0)+((x5624*x5628))+(((-1.0)*r11*x5631))+((r12*x5625)));
evalcond[5]=((-1.0)+((r01*x5630))+((r02*x5624))+(((-1.0)*x5626*x5629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5632=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5632.valid){
continue;
}
CheckValue<IkReal> x5633 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5632.value)))+(x5633.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5634=IKsin(j4);
IkReal x5635=IKcos(j4);
IkReal x5636=(cj5*r00);
IkReal x5637=(cj5*r20);
IkReal x5638=(cj5*r10);
IkReal x5639=((1.0)*x5635);
IkReal x5640=(sj5*x5635);
IkReal x5641=((1.0)*sj5*x5634);
evalcond[0]=((((-1.0)*r21*x5641))+((r22*x5635))+((x5634*x5637)));
evalcond[1]=((((-1.0)*r01*x5641))+((x5634*x5636))+((r02*x5635)));
evalcond[2]=((((-1.0)*x5637*x5639))+((r22*x5634))+((r21*x5640)));
evalcond[3]=(((r12*x5634))+(((-1.0)*x5638*x5639))+((r11*x5640)));
evalcond[4]=((-1.0)+((r12*x5635))+(((-1.0)*r11*x5641))+((x5634*x5638)));
evalcond[5]=((-1.0)+((r01*x5640))+(((-1.0)*x5636*x5639))+((r02*x5634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x5642=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5642;
j4eval[1]=IKsign(x5642);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x5643=((1.0)*cj5);
IkReal x5644=((((-1.0)*r21*x5643))+(((-1.0)*r20*sj5)));
j4eval[0]=x5644;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5643))))));
j4eval[2]=IKsign(x5644);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x5645=cj5*cj5;
IkReal x5646=(r21*sj5);
IkReal x5647=((1.0)*r20);
IkReal x5648=(r01*r21);
IkReal x5649=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5646))+((x5645*x5648))+(((-1.0)*r00*x5645*x5647))+(((-1.0)*x5648)));
j4eval[0]=x5649;
j4eval[1]=((IKabs(((((-1.0)*cj5*x5647))+x5646)))+(IKabs(r22)));
j4eval[2]=IKsign(x5649);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5650=cj5*cj5;
IkReal x5651=((1.0)*r20);
IkReal x5652=(r21*sj5);
IkReal x5653=(r01*r21);
CheckValue<IkReal> x5654 = IKatan2WithCheck(IkReal(r22),IkReal((x5652+(((-1.0)*cj5*x5651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5654.valid){
continue;
}
CheckValue<IkReal> x5655=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x5652))+(((-1.0)*r02*r22))+((x5650*x5653))+(((-1.0)*x5653))+(((-1.0)*r00*x5650*x5651)))),-1);
if(!x5655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5654.value)+(((1.5707963267949)*(x5655.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5656=IKsin(j4);
IkReal x5657=IKcos(j4);
IkReal x5658=(cj5*r00);
IkReal x5659=(cj5*r20);
IkReal x5660=(cj5*r10);
IkReal x5661=((1.0)*x5657);
IkReal x5662=(sj5*x5657);
IkReal x5663=((1.0)*sj5*x5656);
evalcond[0]=((((-1.0)*r21*x5663))+((x5656*x5659))+((r22*x5657)));
evalcond[1]=((((-1.0)*r01*x5663))+((x5656*x5658))+((r02*x5657)));
evalcond[2]=((((-1.0)*x5659*x5661))+((r22*x5656))+((r21*x5662)));
evalcond[3]=(((r12*x5656))+((r11*x5662))+(((-1.0)*x5660*x5661)));
evalcond[4]=((1.0)+((x5656*x5660))+((r12*x5657))+(((-1.0)*r11*x5663)));
evalcond[5]=((1.0)+((r01*x5662))+((r02*x5656))+(((-1.0)*x5658*x5661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5664=((1.0)*cj5);
CheckValue<IkReal> x5665 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x5664))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5665.valid){
continue;
}
CheckValue<IkReal> x5666=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5664))+(((-1.0)*r20*sj5)))),-1);
if(!x5666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5665.value)+(((1.5707963267949)*(x5666.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5667=IKsin(j4);
IkReal x5668=IKcos(j4);
IkReal x5669=(cj5*r00);
IkReal x5670=(cj5*r20);
IkReal x5671=(cj5*r10);
IkReal x5672=((1.0)*x5668);
IkReal x5673=(sj5*x5668);
IkReal x5674=((1.0)*sj5*x5667);
evalcond[0]=(((r22*x5668))+((x5667*x5670))+(((-1.0)*r21*x5674)));
evalcond[1]=((((-1.0)*r01*x5674))+((r02*x5668))+((x5667*x5669)));
evalcond[2]=(((r22*x5667))+(((-1.0)*x5670*x5672))+((r21*x5673)));
evalcond[3]=((((-1.0)*x5671*x5672))+((r11*x5673))+((r12*x5667)));
evalcond[4]=((1.0)+(((-1.0)*r11*x5674))+((x5667*x5671))+((r12*x5668)));
evalcond[5]=((1.0)+(((-1.0)*x5669*x5672))+((r02*x5667))+((r01*x5673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5675 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5675.valid){
continue;
}
CheckValue<IkReal> x5676=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5675.value)+(((1.5707963267949)*(x5676.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5677=IKsin(j4);
IkReal x5678=IKcos(j4);
IkReal x5679=(cj5*r00);
IkReal x5680=(cj5*r20);
IkReal x5681=(cj5*r10);
IkReal x5682=((1.0)*x5678);
IkReal x5683=(sj5*x5678);
IkReal x5684=((1.0)*sj5*x5677);
evalcond[0]=(((r22*x5678))+(((-1.0)*r21*x5684))+((x5677*x5680)));
evalcond[1]=(((r02*x5678))+((x5677*x5679))+(((-1.0)*r01*x5684)));
evalcond[2]=((((-1.0)*x5680*x5682))+((r22*x5677))+((r21*x5683)));
evalcond[3]=((((-1.0)*x5681*x5682))+((r12*x5677))+((r11*x5683)));
evalcond[4]=((1.0)+((r12*x5678))+(((-1.0)*r11*x5684))+((x5677*x5681)));
evalcond[5]=((1.0)+((r02*x5677))+(((-1.0)*x5679*x5682))+((r01*x5683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x5685=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5685;
j4eval[1]=IKsign(x5685);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x5686=((1.0)*cj5);
IkReal x5687=((((-1.0)*r21*x5686))+(((-1.0)*r20*sj5)));
j4eval[0]=x5687;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5686))))));
j4eval[2]=IKsign(x5687);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x5688=cj5*cj5;
IkReal x5689=(r21*sj5);
IkReal x5690=((1.0)*r20);
IkReal x5691=(r01*r21);
IkReal x5692=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x5688*x5690))+(((-1.0)*r02*r22))+(((-1.0)*x5691))+((x5688*x5691))+((cj5*r00*x5689)));
j4eval[0]=x5692;
j4eval[1]=((IKabs((x5689+(((-1.0)*cj5*x5690)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5692);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5693=cj5*cj5;
IkReal x5694=((1.0)*r20);
IkReal x5695=(r21*sj5);
IkReal x5696=(r01*r21);
CheckValue<IkReal> x5697 = IKatan2WithCheck(IkReal(r22),IkReal((x5695+(((-1.0)*cj5*x5694)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5697.valid){
continue;
}
CheckValue<IkReal> x5698=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5693*x5696))+(((-1.0)*x5696))+((cj5*r00*x5695))+(((-1.0)*r00*x5693*x5694)))),-1);
if(!x5698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5697.value)+(((1.5707963267949)*(x5698.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5699=IKsin(j4);
IkReal x5700=IKcos(j4);
IkReal x5701=(cj5*r00);
IkReal x5702=(cj5*r20);
IkReal x5703=(cj5*r10);
IkReal x5704=((1.0)*x5700);
IkReal x5705=(sj5*x5700);
IkReal x5706=((1.0)*sj5*x5699);
evalcond[0]=(((r22*x5700))+(((-1.0)*r21*x5706))+((x5699*x5702)));
evalcond[1]=(((r02*x5700))+(((-1.0)*r01*x5706))+((x5699*x5701)));
evalcond[2]=(((r22*x5699))+(((-1.0)*x5702*x5704))+((r21*x5705)));
evalcond[3]=((((-1.0)*x5703*x5704))+((r11*x5705))+((r12*x5699)));
evalcond[4]=((1.0)+((r12*x5700))+((x5699*x5703))+(((-1.0)*r11*x5706)));
evalcond[5]=((1.0)+(((-1.0)*x5701*x5704))+((r02*x5699))+((r01*x5705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5707=((1.0)*cj5);
CheckValue<IkReal> x5708 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5707)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5708.valid){
continue;
}
CheckValue<IkReal> x5709=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5707))+(((-1.0)*r20*sj5)))),-1);
if(!x5709.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5708.value)+(((1.5707963267949)*(x5709.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5710=IKsin(j4);
IkReal x5711=IKcos(j4);
IkReal x5712=(cj5*r00);
IkReal x5713=(cj5*r20);
IkReal x5714=(cj5*r10);
IkReal x5715=((1.0)*x5711);
IkReal x5716=(sj5*x5711);
IkReal x5717=((1.0)*sj5*x5710);
evalcond[0]=(((r22*x5711))+((x5710*x5713))+(((-1.0)*r21*x5717)));
evalcond[1]=(((r02*x5711))+(((-1.0)*r01*x5717))+((x5710*x5712)));
evalcond[2]=(((r22*x5710))+(((-1.0)*x5713*x5715))+((r21*x5716)));
evalcond[3]=((((-1.0)*x5714*x5715))+((r11*x5716))+((r12*x5710)));
evalcond[4]=((1.0)+((x5710*x5714))+((r12*x5711))+(((-1.0)*r11*x5717)));
evalcond[5]=((1.0)+((r02*x5710))+(((-1.0)*x5712*x5715))+((r01*x5716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5718 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5718.valid){
continue;
}
CheckValue<IkReal> x5719=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5718.value)+(((1.5707963267949)*(x5719.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5720=IKsin(j4);
IkReal x5721=IKcos(j4);
IkReal x5722=(cj5*r00);
IkReal x5723=(cj5*r20);
IkReal x5724=(cj5*r10);
IkReal x5725=((1.0)*x5721);
IkReal x5726=(sj5*x5721);
IkReal x5727=((1.0)*sj5*x5720);
evalcond[0]=((((-1.0)*r21*x5727))+((r22*x5721))+((x5720*x5723)));
evalcond[1]=(((r02*x5721))+(((-1.0)*r01*x5727))+((x5720*x5722)));
evalcond[2]=((((-1.0)*x5723*x5725))+((r21*x5726))+((r22*x5720)));
evalcond[3]=(((r11*x5726))+((r12*x5720))+(((-1.0)*x5724*x5725)));
evalcond[4]=((1.0)+((r12*x5721))+(((-1.0)*r11*x5727))+((x5720*x5724)));
evalcond[5]=((1.0)+((r01*x5726))+(((-1.0)*x5722*x5725))+((r02*x5720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x5728=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5728;
j4eval[1]=IKsign(x5728);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x5729=((1.0)*cj5);
IkReal x5730=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5729)));
j4eval[0]=x5730;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x5729))+((r21*sj5))))));
j4eval[2]=IKsign(x5730);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x5731=cj5*cj5;
IkReal x5732=r01*r01;
IkReal x5733=(cj5*r00);
IkReal x5734=(r01*sj5);
IkReal x5735=(((x5731*(r00*r00)))+(((-1.0)*x5731*x5732))+(r02*r02)+(((-2.0)*x5733*x5734))+x5732);
j4eval[0]=x5735;
j4eval[1]=IKsign(x5735);
j4eval[2]=((IKabs(((((-1.0)*x5733))+x5734)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5736=cj5*cj5;
IkReal x5737=r01*r01;
IkReal x5738=(r01*sj5);
IkReal x5739=(cj5*r00);
CheckValue<IkReal> x5740 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x5739))+x5738)),IKFAST_ATAN2_MAGTHRESH);
if(!x5740.valid){
continue;
}
CheckValue<IkReal> x5741=IKPowWithIntegerCheck(IKsign(((((-2.0)*x5738*x5739))+((x5736*(r00*r00)))+(r02*r02)+(((-1.0)*x5736*x5737))+x5737)),-1);
if(!x5741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5740.value)+(((1.5707963267949)*(x5741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5742=IKsin(j4);
IkReal x5743=IKcos(j4);
IkReal x5744=(cj5*r00);
IkReal x5745=(cj5*r20);
IkReal x5746=(cj5*r10);
IkReal x5747=((1.0)*x5743);
IkReal x5748=(sj5*x5743);
IkReal x5749=((1.0)*sj5*x5742);
evalcond[0]=(((x5742*x5745))+(((-1.0)*r21*x5749))+((r22*x5743)));
evalcond[1]=(((x5742*x5744))+(((-1.0)*r01*x5749))+((r02*x5743)));
evalcond[2]=(((r22*x5742))+(((-1.0)*x5745*x5747))+((r21*x5748)));
evalcond[3]=(((r11*x5748))+(((-1.0)*x5746*x5747))+((r12*x5742)));
evalcond[4]=((-1.0)+((x5742*x5746))+(((-1.0)*r11*x5749))+((r12*x5743)));
evalcond[5]=((-1.0)+((r01*x5748))+(((-1.0)*x5744*x5747))+((r02*x5742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5750=((1.0)*cj5);
CheckValue<IkReal> x5751=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5750)))),-1);
if(!x5751.valid){
continue;
}
CheckValue<IkReal> x5752 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5750)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5751.value)))+(x5752.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5753=IKsin(j4);
IkReal x5754=IKcos(j4);
IkReal x5755=(cj5*r00);
IkReal x5756=(cj5*r20);
IkReal x5757=(cj5*r10);
IkReal x5758=((1.0)*x5754);
IkReal x5759=(sj5*x5754);
IkReal x5760=((1.0)*sj5*x5753);
evalcond[0]=((((-1.0)*r21*x5760))+((x5753*x5756))+((r22*x5754)));
evalcond[1]=((((-1.0)*r01*x5760))+((x5753*x5755))+((r02*x5754)));
evalcond[2]=(((r21*x5759))+(((-1.0)*x5756*x5758))+((r22*x5753)));
evalcond[3]=(((r11*x5759))+(((-1.0)*x5757*x5758))+((r12*x5753)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x5760))+((x5753*x5757))+((r12*x5754)));
evalcond[5]=((-1.0)+((r01*x5759))+((r02*x5753))+(((-1.0)*x5755*x5758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5761=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5761.valid){
continue;
}
CheckValue<IkReal> x5762 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5761.value)))+(x5762.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5763=IKsin(j4);
IkReal x5764=IKcos(j4);
IkReal x5765=(cj5*r00);
IkReal x5766=(cj5*r20);
IkReal x5767=(cj5*r10);
IkReal x5768=((1.0)*x5764);
IkReal x5769=(sj5*x5764);
IkReal x5770=((1.0)*sj5*x5763);
evalcond[0]=((((-1.0)*r21*x5770))+((r22*x5764))+((x5763*x5766)));
evalcond[1]=(((r02*x5764))+((x5763*x5765))+(((-1.0)*r01*x5770)));
evalcond[2]=((((-1.0)*x5766*x5768))+((r22*x5763))+((r21*x5769)));
evalcond[3]=((((-1.0)*x5767*x5768))+((r11*x5769))+((r12*x5763)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x5770))+((r12*x5764))+((x5763*x5767)));
evalcond[5]=((-1.0)+((r01*x5769))+((r02*x5763))+(((-1.0)*x5765*x5768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x5771=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5771;
j4eval[1]=IKsign(x5771);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x5772=((1.0)*cj5);
IkReal x5773=((((-1.0)*r21*x5772))+(((-1.0)*r20*sj5)));
j4eval[0]=x5773;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x5772))+((r01*sj5))))));
j4eval[2]=IKsign(x5773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x5774=cj5*cj5;
IkReal x5775=(r21*sj5);
IkReal x5776=((1.0)*r20);
IkReal x5777=(r01*r21);
IkReal x5778=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x5774*x5776))+(((-1.0)*r02*r22))+((x5774*x5777))+((cj5*r00*x5775))+(((-1.0)*x5777)));
j4eval[0]=x5778;
j4eval[1]=((IKabs(((((-1.0)*cj5*x5776))+x5775)))+(IKabs(r22)));
j4eval[2]=IKsign(x5778);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5779=cj5*cj5;
IkReal x5780=((1.0)*r20);
IkReal x5781=(r21*sj5);
IkReal x5782=(r01*r21);
CheckValue<IkReal> x5783=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x5781))+(((-1.0)*r02*r22))+((x5779*x5782))+(((-1.0)*x5782))+(((-1.0)*r00*x5779*x5780)))),-1);
if(!x5783.valid){
continue;
}
CheckValue<IkReal> x5784 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*x5780))+x5781)),IKFAST_ATAN2_MAGTHRESH);
if(!x5784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5783.value)))+(x5784.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5785=IKsin(j4);
IkReal x5786=IKcos(j4);
IkReal x5787=(cj5*r00);
IkReal x5788=(cj5*r20);
IkReal x5789=(cj5*r10);
IkReal x5790=((1.0)*x5786);
IkReal x5791=(sj5*x5786);
IkReal x5792=((1.0)*sj5*x5785);
evalcond[0]=((((-1.0)*r21*x5792))+((x5785*x5788))+((r22*x5786)));
evalcond[1]=((((-1.0)*r01*x5792))+((x5785*x5787))+((r02*x5786)));
evalcond[2]=(((r21*x5791))+((r22*x5785))+(((-1.0)*x5788*x5790)));
evalcond[3]=(((r12*x5785))+((r11*x5791))+(((-1.0)*x5789*x5790)));
evalcond[4]=((1.0)+((r12*x5786))+((x5785*x5789))+(((-1.0)*r11*x5792)));
evalcond[5]=((1.0)+((r01*x5791))+(((-1.0)*x5787*x5790))+((r02*x5785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5793=((1.0)*cj5);
CheckValue<IkReal> x5794 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5793)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5794.valid){
continue;
}
CheckValue<IkReal> x5795=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5793))+(((-1.0)*r20*sj5)))),-1);
if(!x5795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5794.value)+(((1.5707963267949)*(x5795.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5796=IKsin(j4);
IkReal x5797=IKcos(j4);
IkReal x5798=(cj5*r00);
IkReal x5799=(cj5*r20);
IkReal x5800=(cj5*r10);
IkReal x5801=((1.0)*x5797);
IkReal x5802=(sj5*x5797);
IkReal x5803=((1.0)*sj5*x5796);
evalcond[0]=(((x5796*x5799))+((r22*x5797))+(((-1.0)*r21*x5803)));
evalcond[1]=(((x5796*x5798))+(((-1.0)*r01*x5803))+((r02*x5797)));
evalcond[2]=(((r21*x5802))+((r22*x5796))+(((-1.0)*x5799*x5801)));
evalcond[3]=((((-1.0)*x5800*x5801))+((r12*x5796))+((r11*x5802)));
evalcond[4]=((1.0)+((x5796*x5800))+((r12*x5797))+(((-1.0)*r11*x5803)));
evalcond[5]=((1.0)+((r01*x5802))+(((-1.0)*x5798*x5801))+((r02*x5796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5804 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5804.valid){
continue;
}
CheckValue<IkReal> x5805=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5804.value)+(((1.5707963267949)*(x5805.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5806=IKsin(j4);
IkReal x5807=IKcos(j4);
IkReal x5808=(cj5*r00);
IkReal x5809=(cj5*r20);
IkReal x5810=(cj5*r10);
IkReal x5811=((1.0)*x5807);
IkReal x5812=(sj5*x5807);
IkReal x5813=((1.0)*sj5*x5806);
evalcond[0]=(((x5806*x5809))+((r22*x5807))+(((-1.0)*r21*x5813)));
evalcond[1]=(((x5806*x5808))+((r02*x5807))+(((-1.0)*r01*x5813)));
evalcond[2]=(((r21*x5812))+((r22*x5806))+(((-1.0)*x5809*x5811)));
evalcond[3]=((((-1.0)*x5810*x5811))+((r11*x5812))+((r12*x5806)));
evalcond[4]=((1.0)+(((-1.0)*r11*x5813))+((x5806*x5810))+((r12*x5807)));
evalcond[5]=((1.0)+(((-1.0)*x5808*x5811))+((r02*x5806))+((r01*x5812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x5814=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5814;
j4eval[1]=IKsign(x5814);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x5815=((1.0)*cj5);
IkReal x5816=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5815)));
j4eval[0]=x5816;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x5815))))));
j4eval[2]=IKsign(x5816);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x5817=cj5*cj5;
IkReal x5818=r01*r01;
IkReal x5819=(cj5*r00);
IkReal x5820=(r01*sj5);
IkReal x5821=(((x5817*(r00*r00)))+(((-2.0)*x5819*x5820))+(((-1.0)*x5817*x5818))+(r02*r02)+x5818);
j4eval[0]=x5821;
j4eval[1]=IKsign(x5821);
j4eval[2]=((IKabs(((((-1.0)*x5819))+x5820)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5822=cj5*cj5;
IkReal x5823=r01*r01;
IkReal x5824=(r01*sj5);
IkReal x5825=(cj5*r00);
CheckValue<IkReal> x5826 = IKatan2WithCheck(IkReal(r02),IkReal((x5824+(((-1.0)*x5825)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5826.valid){
continue;
}
CheckValue<IkReal> x5827=IKPowWithIntegerCheck(IKsign(((((-2.0)*x5824*x5825))+(((-1.0)*x5822*x5823))+((x5822*(r00*r00)))+(r02*r02)+x5823)),-1);
if(!x5827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5826.value)+(((1.5707963267949)*(x5827.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5828=IKsin(j4);
IkReal x5829=IKcos(j4);
IkReal x5830=(cj5*r00);
IkReal x5831=(cj5*r20);
IkReal x5832=(cj5*r10);
IkReal x5833=((1.0)*x5829);
IkReal x5834=(sj5*x5829);
IkReal x5835=((1.0)*sj5*x5828);
evalcond[0]=((((-1.0)*r21*x5835))+((r22*x5829))+((x5828*x5831)));
evalcond[1]=(((r02*x5829))+(((-1.0)*r01*x5835))+((x5828*x5830)));
evalcond[2]=(((r21*x5834))+(((-1.0)*x5831*x5833))+((r22*x5828)));
evalcond[3]=((((-1.0)*x5832*x5833))+((r12*x5828))+((r11*x5834)));
evalcond[4]=((-1.0)+((r12*x5829))+(((-1.0)*r11*x5835))+((x5828*x5832)));
evalcond[5]=((-1.0)+((r02*x5828))+(((-1.0)*x5830*x5833))+((r01*x5834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5836=((1.0)*cj5);
CheckValue<IkReal> x5837 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5836))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5837.valid){
continue;
}
CheckValue<IkReal> x5838=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5836))+(((-1.0)*r00*sj5)))),-1);
if(!x5838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5837.value)+(((1.5707963267949)*(x5838.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5839=IKsin(j4);
IkReal x5840=IKcos(j4);
IkReal x5841=(cj5*r00);
IkReal x5842=(cj5*r20);
IkReal x5843=(cj5*r10);
IkReal x5844=((1.0)*x5840);
IkReal x5845=(sj5*x5840);
IkReal x5846=((1.0)*sj5*x5839);
evalcond[0]=((((-1.0)*r21*x5846))+((r22*x5840))+((x5839*x5842)));
evalcond[1]=((((-1.0)*r01*x5846))+((x5839*x5841))+((r02*x5840)));
evalcond[2]=(((r21*x5845))+(((-1.0)*x5842*x5844))+((r22*x5839)));
evalcond[3]=(((r11*x5845))+((r12*x5839))+(((-1.0)*x5843*x5844)));
evalcond[4]=((-1.0)+((r12*x5840))+(((-1.0)*r11*x5846))+((x5839*x5843)));
evalcond[5]=((-1.0)+((r02*x5839))+((r01*x5845))+(((-1.0)*x5841*x5844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5847=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5847.valid){
continue;
}
CheckValue<IkReal> x5848 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5847.value)))+(x5848.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5849=IKsin(j4);
IkReal x5850=IKcos(j4);
IkReal x5851=(cj5*r00);
IkReal x5852=(cj5*r20);
IkReal x5853=(cj5*r10);
IkReal x5854=((1.0)*x5850);
IkReal x5855=(sj5*x5850);
IkReal x5856=((1.0)*sj5*x5849);
evalcond[0]=((((-1.0)*r21*x5856))+((r22*x5850))+((x5849*x5852)));
evalcond[1]=((((-1.0)*r01*x5856))+((r02*x5850))+((x5849*x5851)));
evalcond[2]=((((-1.0)*x5852*x5854))+((r22*x5849))+((r21*x5855)));
evalcond[3]=((((-1.0)*x5853*x5854))+((r11*x5855))+((r12*x5849)));
evalcond[4]=((-1.0)+((r12*x5850))+(((-1.0)*r11*x5856))+((x5849*x5853)));
evalcond[5]=((-1.0)+((r01*x5855))+(((-1.0)*x5851*x5854))+((r02*x5849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5857=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5857);
rxp1_1=(px*r21);
rxp1_2=(r11*x5857);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=((IKabs((((cj0*cj2))+((sj0*sj2)))))+(IKabs(((((-1.0)*cj2*sj0))+((cj0*sj2))))));
j4eval[2]=IKsign(r02);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5858=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5858);
rxp1_1=(px*r21);
rxp1_2=(r11*x5858);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x5859=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x5859;
j4eval[1]=((IKabs((((cj0*cj2))+((sj0*sj2)))))+(IKabs(((((-1.0)*cj2*sj0))+((cj0*sj2))))));
j4eval[2]=IKsign(x5859);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5860=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5860);
rxp1_1=(px*r21);
rxp1_2=(r11*x5860);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5861=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x5861.valid){
continue;
}
CheckValue<IkReal> x5862=IKPowWithIntegerCheck(r02,-1);
if(!x5862.valid){
continue;
}
if( IKabs(((x5861.value)*((((cj0*cj2))+((sj0*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5862.value)*(((((-1.0)*cj2*sj0))+((cj0*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5861.value)*((((cj0*cj2))+((sj0*sj2))))))+IKsqr(((x5862.value)*(((((-1.0)*cj2*sj0))+((cj0*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x5861.value)*((((cj0*cj2))+((sj0*sj2))))), ((x5862.value)*(((((-1.0)*cj2*sj0))+((cj0*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5863=IKsin(j4);
IkReal x5864=IKcos(j4);
IkReal x5865=(cj2*sj0);
IkReal x5866=(cj5*r10);
IkReal x5867=(cj5*r20);
IkReal x5868=(cj0*sj2);
IkReal x5869=((1.0)*cj0*cj2);
IkReal x5870=((1.0)*sj0*sj2);
IkReal x5871=((1.0)*x5864);
IkReal x5872=(sj5*x5864);
IkReal x5873=((1.0)*sj5*x5863);
IkReal x5874=(x5870+x5869);
evalcond[0]=((((-1.0)*x5868))+((r02*x5864))+x5865);
evalcond[1]=((((-1.0)*r21*x5873))+((x5863*x5867)));
evalcond[2]=((((-1.0)*x5867*x5871))+((r21*x5872)));
evalcond[3]=(((r02*x5863))+(((-1.0)*x5874)));
evalcond[4]=((((-1.0)*x5865))+(((-1.0)*x5866*x5871))+((r11*x5872))+x5868);
evalcond[5]=((((-1.0)*r11*x5873))+(((-1.0)*x5874))+((x5863*x5866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5875=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x5875.valid){
continue;
}
CheckValue<IkReal> x5876 = IKatan2WithCheck(IkReal((((cj0*cj2))+((sj0*sj2)))),IkReal(((((-1.0)*cj2*sj0))+((cj0*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5875.value)))+(x5876.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5877=IKsin(j4);
IkReal x5878=IKcos(j4);
IkReal x5879=(cj2*sj0);
IkReal x5880=(cj5*r10);
IkReal x5881=(cj5*r20);
IkReal x5882=(cj0*sj2);
IkReal x5883=((1.0)*cj0*cj2);
IkReal x5884=((1.0)*sj0*sj2);
IkReal x5885=((1.0)*x5878);
IkReal x5886=(sj5*x5878);
IkReal x5887=((1.0)*sj5*x5877);
IkReal x5888=(x5883+x5884);
evalcond[0]=((((-1.0)*x5882))+((r02*x5878))+x5879);
evalcond[1]=(((x5877*x5881))+(((-1.0)*r21*x5887)));
evalcond[2]=(((r21*x5886))+(((-1.0)*x5881*x5885)));
evalcond[3]=(((r02*x5877))+(((-1.0)*x5888)));
evalcond[4]=(((r11*x5886))+(((-1.0)*x5880*x5885))+x5882+(((-1.0)*x5879)));
evalcond[5]=((((-1.0)*r11*x5887))+(((-1.0)*x5888))+((x5877*x5880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5889=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x5889.valid){
continue;
}
CheckValue<IkReal> x5890 = IKatan2WithCheck(IkReal((((cj0*cj2))+((sj0*sj2)))),IkReal(((((-1.0)*cj2*sj0))+((cj0*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5889.value)))+(x5890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5891=IKsin(j4);
IkReal x5892=IKcos(j4);
IkReal x5893=(cj2*sj0);
IkReal x5894=(cj5*r10);
IkReal x5895=(cj5*r20);
IkReal x5896=(cj0*sj2);
IkReal x5897=((1.0)*cj0*cj2);
IkReal x5898=((1.0)*sj0*sj2);
IkReal x5899=((1.0)*x5892);
IkReal x5900=(sj5*x5892);
IkReal x5901=((1.0)*sj5*x5891);
IkReal x5902=(x5897+x5898);
evalcond[0]=((((-1.0)*x5896))+((r02*x5892))+x5893);
evalcond[1]=((((-1.0)*r21*x5901))+((x5891*x5895)));
evalcond[2]=((((-1.0)*x5895*x5899))+((r21*x5900)));
evalcond[3]=(((r02*x5891))+(((-1.0)*x5902)));
evalcond[4]=((((-1.0)*x5893))+(((-1.0)*x5894*x5899))+x5896+((r11*x5900)));
evalcond[5]=((((-1.0)*r11*x5901))+((x5891*x5894))+(((-1.0)*x5902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5903=cj5*cj5;
IkReal x5904=(r11*r21);
IkReal x5905=(cj0*sj2);
IkReal x5906=((1.0)*r22);
IkReal x5907=(r21*sj5);
IkReal x5908=(cj2*sj0);
IkReal x5909=(cj5*r20);
CheckValue<IkReal> x5910=IKPowWithIntegerCheck(IKsign((((x5903*x5904))+(((-1.0)*r10*r20*x5903))+(((-1.0)*r12*x5906))+((r11*sj5*x5909))+((cj5*r10*x5907))+(((-1.0)*x5904)))),-1);
if(!x5910.valid){
continue;
}
CheckValue<IkReal> x5911 = IKatan2WithCheck(IkReal((((r22*x5905))+(((-1.0)*x5906*x5908)))),IkReal(((((-1.0)*x5907*x5908))+((x5908*x5909))+(((-1.0)*x5905*x5909))+((x5905*x5907)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5910.value)))+(x5911.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5912=IKsin(j4);
IkReal x5913=IKcos(j4);
IkReal x5914=(cj5*r00);
IkReal x5915=((1.0)*cj0);
IkReal x5916=((1.0)*sj0);
IkReal x5917=(cj2*x5915);
IkReal x5918=(sj2*x5916);
IkReal x5919=((1.0)*x5913);
IkReal x5920=(sj5*x5913);
IkReal x5921=(cj5*x5912);
IkReal x5922=((1.0)*sj5*x5912);
IkReal x5923=(x5918+x5917);
evalcond[0]=(((r22*x5913))+((r20*x5921))+(((-1.0)*r21*x5922)));
evalcond[1]=(((r22*x5912))+((r21*x5920))+(((-1.0)*cj5*r20*x5919)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*sj2*x5915))+(((-1.0)*r01*x5922))+((x5912*x5914))+((r02*x5913)));
evalcond[3]=(((r12*x5912))+(((-1.0)*cj2*x5916))+((r11*x5920))+(((-1.0)*cj5*r10*x5919))+((cj0*sj2)));
evalcond[4]=(((r12*x5913))+((r10*x5921))+(((-1.0)*x5923))+(((-1.0)*r11*x5922)));
evalcond[5]=(((r02*x5912))+(((-1.0)*x5923))+((r01*x5920))+(((-1.0)*x5914*x5919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5924=((1.0)*cj5);
IkReal x5925=(r21*sj5);
IkReal x5926=(cj2*sj0);
IkReal x5927=(cj0*sj2);
CheckValue<IkReal> x5928 = IKatan2WithCheck(IkReal((((r22*x5926))+(((-1.0)*r22*x5927)))),IkReal((((x5925*x5926))+(((-1.0)*x5925*x5927))+(((-1.0)*r20*x5924*x5926))+((cj5*r20*x5927)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5928.valid){
continue;
}
CheckValue<IkReal> x5929=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5924)))),-1);
if(!x5929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5928.value)+(((1.5707963267949)*(x5929.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5930=IKsin(j4);
IkReal x5931=IKcos(j4);
IkReal x5932=(cj5*r00);
IkReal x5933=((1.0)*cj0);
IkReal x5934=((1.0)*sj0);
IkReal x5935=(cj2*x5933);
IkReal x5936=(sj2*x5934);
IkReal x5937=((1.0)*x5931);
IkReal x5938=(sj5*x5931);
IkReal x5939=(cj5*x5930);
IkReal x5940=((1.0)*sj5*x5930);
IkReal x5941=(x5936+x5935);
evalcond[0]=(((r20*x5939))+((r22*x5931))+(((-1.0)*r21*x5940)));
evalcond[1]=(((r21*x5938))+((r22*x5930))+(((-1.0)*cj5*r20*x5937)));
evalcond[2]=(((cj2*sj0))+((x5930*x5932))+(((-1.0)*sj2*x5933))+(((-1.0)*r01*x5940))+((r02*x5931)));
evalcond[3]=((((-1.0)*cj5*r10*x5937))+((r11*x5938))+((r12*x5930))+(((-1.0)*cj2*x5934))+((cj0*sj2)));
evalcond[4]=((((-1.0)*x5941))+((r10*x5939))+(((-1.0)*r11*x5940))+((r12*x5931)));
evalcond[5]=((((-1.0)*x5941))+(((-1.0)*x5932*x5937))+((r01*x5938))+((r02*x5930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5942=(cj2*sj0);
IkReal x5943=(r21*sj5);
IkReal x5944=(cj5*r20);
IkReal x5945=((1.0)*cj0*sj2);
CheckValue<IkReal> x5946 = IKatan2WithCheck(IkReal(((((-1.0)*x5944*x5945))+((x5942*x5944))+((cj0*sj2*x5943))+(((-1.0)*x5942*x5943)))),IkReal(((((-1.0)*r22*x5945))+((r22*x5942)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5946.valid){
continue;
}
CheckValue<IkReal> x5947=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5946.value)+(((1.5707963267949)*(x5947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5948=IKsin(j4);
IkReal x5949=IKcos(j4);
IkReal x5950=(cj5*r00);
IkReal x5951=((1.0)*cj0);
IkReal x5952=((1.0)*sj0);
IkReal x5953=(cj2*x5951);
IkReal x5954=(sj2*x5952);
IkReal x5955=((1.0)*x5949);
IkReal x5956=(sj5*x5949);
IkReal x5957=(cj5*x5948);
IkReal x5958=((1.0)*sj5*x5948);
IkReal x5959=(x5953+x5954);
evalcond[0]=(((r20*x5957))+((r22*x5949))+(((-1.0)*r21*x5958)));
evalcond[1]=(((r21*x5956))+((r22*x5948))+(((-1.0)*cj5*r20*x5955)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r01*x5958))+(((-1.0)*sj2*x5951))+((x5948*x5950))+((r02*x5949)));
evalcond[3]=(((r11*x5956))+(((-1.0)*cj2*x5952))+(((-1.0)*cj5*r10*x5955))+((r12*x5948))+((cj0*sj2)));
evalcond[4]=(((r10*x5957))+(((-1.0)*x5959))+((r12*x5949))+(((-1.0)*r11*x5958)));
evalcond[5]=((((-1.0)*x5950*x5955))+(((-1.0)*x5959))+((r02*x5948))+((r01*x5956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5960=((-1.0)*r10);
IkReal x5962 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5962)==0){
continue;
}
IkReal x5961=pow(x5962,-0.5);
CheckValue<IkReal> x5963 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5960),IKFAST_ATAN2_MAGTHRESH);
if(!x5963.valid){
continue;
}
IkReal gconst24=((-1.0)*(x5963.value));
IkReal gconst25=(r11*x5961);
IkReal gconst26=(x5960*x5961);
CheckValue<IkReal> x5964 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5964.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5964.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5965=(sj1*sj2);
IkReal x5966=(gconst25*r21);
IkReal x5967=(cj2*sj1);
IkReal x5968=(gconst26*r20*sj1);
CheckValue<IkReal> x5969=IKPowWithIntegerCheck(IKsign(((x5966*x5966)+(r22*r22)+(((gconst26*gconst26)*(r20*r20)))+(((-2.0)*gconst26*r20*x5966)))),-1);
if(!x5969.valid){
continue;
}
CheckValue<IkReal> x5970 = IKatan2WithCheck(IkReal(((((-1.0)*x5965*x5966))+((gconst26*r20*x5965))+((r22*x5967)))),IkReal((((r22*x5965))+((x5966*x5967))+(((-1.0)*gconst26*r20*x5967)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5969.value)))+(x5970.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5971=IKsin(j4);
IkReal x5972=IKcos(j4);
IkReal x5973=(gconst26*r10);
IkReal x5974=(cj1*cj2);
IkReal x5975=((1.0)*sj1);
IkReal x5976=(gconst26*r20);
IkReal x5977=(cj0*sj2);
IkReal x5978=(sj0*sj2);
IkReal x5979=(gconst26*r00);
IkReal x5980=(gconst25*x5972);
IkReal x5981=((1.0)*x5972);
IkReal x5982=((1.0)*gconst25*x5971);
evalcond[0]=(((r22*x5972))+(((-1.0)*sj2*x5975))+((x5971*x5976))+(((-1.0)*r21*x5982)));
evalcond[1]=((((-1.0)*cj2*x5975))+((r21*x5980))+((r22*x5971))+(((-1.0)*x5976*x5981)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r01*x5982))+((cj1*x5977))+((r02*x5972))+((x5971*x5979)));
evalcond[3]=(((r11*x5980))+(((-1.0)*x5973*x5981))+((r12*x5971))+x5977+((sj0*x5974)));
evalcond[4]=((((-1.0)*r11*x5982))+(((-1.0)*cj0*cj2))+((r12*x5972))+((cj1*x5978))+((x5971*x5973)));
evalcond[5]=((((-1.0)*x5979*x5981))+(((-1.0)*x5978))+((cj0*x5974))+((r02*x5971))+((r01*x5980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5983=((-1.0)*r11);
IkReal x5985 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5985)==0){
continue;
}
IkReal x5984=pow(x5985,-0.5);
CheckValue<IkReal> x5986 = IKatan2WithCheck(IkReal(x5983),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5986.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x5986.value))));
IkReal gconst28=(x5983*x5984);
IkReal gconst29=((1.0)*r10*x5984);
CheckValue<IkReal> x5987 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5987.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5987.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5988=(r22*sj1);
IkReal x5989=(gconst28*r21);
IkReal x5990=(gconst29*r20);
IkReal x5991=(sj1*sj2);
IkReal x5992=(cj2*sj1);
CheckValue<IkReal> x5993 = IKatan2WithCheck(IkReal((((x5990*x5991))+(((-1.0)*x5989*x5991))+((cj2*x5988)))),IkReal((((x5989*x5992))+(((-1.0)*x5990*x5992))+((sj2*x5988)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5993.valid){
continue;
}
CheckValue<IkReal> x5994=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x5989*x5990))+(x5990*x5990)+(x5989*x5989))),-1);
if(!x5994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5993.value)+(((1.5707963267949)*(x5994.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5995=IKsin(j4);
IkReal x5996=IKcos(j4);
IkReal x5997=(gconst29*r10);
IkReal x5998=(cj1*cj2);
IkReal x5999=((1.0)*sj1);
IkReal x6000=(gconst29*r20);
IkReal x6001=(cj0*sj2);
IkReal x6002=(sj0*sj2);
IkReal x6003=(gconst29*r00);
IkReal x6004=((1.0)*x5996);
IkReal x6005=(gconst28*x5996);
IkReal x6006=((1.0)*gconst28*x5995);
evalcond[0]=((((-1.0)*sj2*x5999))+((x5995*x6000))+(((-1.0)*r21*x6006))+((r22*x5996)));
evalcond[1]=(((r21*x6005))+(((-1.0)*cj2*x5999))+(((-1.0)*x6000*x6004))+((r22*x5995)));
evalcond[2]=(((cj2*sj0))+((r02*x5996))+((x5995*x6003))+(((-1.0)*r01*x6006))+((cj1*x6001)));
evalcond[3]=(((r12*x5995))+x6001+((sj0*x5998))+((r11*x6005))+(((-1.0)*x5997*x6004)));
evalcond[4]=(((r12*x5996))+(((-1.0)*r11*x6006))+((x5995*x5997))+((cj1*x6002))+(((-1.0)*cj0*cj2)));
evalcond[5]=(((r02*x5995))+((cj0*x5998))+((r01*x6005))+(((-1.0)*x6003*x6004))+(((-1.0)*x6002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6007=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6007);
rxp0_2=(py*r00);
rxp1_0=(r21*x6007);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=IKsign(r12);
j4eval[2]=((IKabs((cj0*cj2)))+(IKabs((cj0*sj2))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6008=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6008);
rxp0_2=(py*r00);
rxp1_0=(r21*x6008);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x6009=(cj0*cj1);
IkReal x6010=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x6010;
j4eval[1]=((IKabs((sj2*x6009)))+(IKabs((cj2*x6009))));
j4eval[2]=IKsign(x6010);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6011=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6011);
rxp0_2=(py*r00);
rxp1_0=(r21*x6011);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6012=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6012);
rxp0_2=(py*r00);
rxp1_0=(r21*x6012);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6013=IKPowWithIntegerCheck(r12,-1);
if(!x6013.valid){
continue;
}
sj4array[0]=((-2292.31615624427)*py*(x6013.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6014=IKsin(j4);
IkReal x6015=IKcos(j4);
IkReal x6016=(r01*sj5);
IkReal x6017=(r21*sj5);
IkReal x6018=((1.0)*x6014);
IkReal x6019=(cj5*x6014);
IkReal x6020=((1.0)*cj5*x6015);
evalcond[0]=(r12*x6015);
evalcond[1]=((((-1.0)*x6017*x6018))+((r20*x6019)));
evalcond[2]=((((-1.0)*x6016*x6018))+((r00*x6019)));
evalcond[3]=((((-1.0)*r20*x6020))+((x6015*x6017)));
evalcond[4]=((((-1.0)*r00*x6020))+((x6015*x6016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6021=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6021);
rxp0_2=(py*r00);
rxp1_0=(r21*x6021);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6022=IKPowWithIntegerCheck(r12,-1);
if(!x6022.valid){
continue;
}
sj4array[0]=((-2292.31615624427)*py*(x6022.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6023=IKsin(j4);
IkReal x6024=IKcos(j4);
IkReal x6025=(r01*sj5);
IkReal x6026=(r21*sj5);
IkReal x6027=((1.0)*x6023);
IkReal x6028=(cj5*x6023);
IkReal x6029=((1.0)*cj5*x6024);
evalcond[0]=(r12*x6024);
evalcond[1]=((((-1.0)*x6026*x6027))+((r20*x6028)));
evalcond[2]=((((-1.0)*x6025*x6027))+((r00*x6028)));
evalcond[3]=((((-1.0)*r20*x6029))+((x6024*x6026)));
evalcond[4]=((((-1.0)*r00*x6029))+((x6024*x6025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6030=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x6030.valid){
continue;
}
CheckValue<IkReal> x6031=IKPowWithIntegerCheck(r12,-1);
if(!x6031.valid){
continue;
}
if( IKabs(((-1.0)*cj0*cj1*sj2*(x6030.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj0*cj2*(x6031.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*cj1*sj2*(x6030.value)))+IKsqr((cj0*cj2*(x6031.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*cj1*sj2*(x6030.value)), (cj0*cj2*(x6031.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6032=IKsin(j4);
IkReal x6033=IKcos(j4);
IkReal x6034=(cj0*sj2);
IkReal x6035=(r01*sj5);
IkReal x6036=(r21*sj5);
IkReal x6037=(cj0*cj2);
IkReal x6038=((1.0)*x6032);
IkReal x6039=(cj5*x6032);
IkReal x6040=((1.0)*cj5*x6033);
evalcond[0]=(((r12*x6032))+x6034);
evalcond[1]=(((r12*x6033))+(((-1.0)*x6037)));
evalcond[2]=((((-1.0)*x6036*x6038))+((r20*x6039)));
evalcond[3]=((((-1.0)*r20*x6040))+((x6033*x6036)));
evalcond[4]=((((-1.0)*x6035*x6038))+((cj1*x6034))+((r00*x6039)));
evalcond[5]=((((-1.0)*r00*x6040))+((x6033*x6035))+((cj1*x6037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6041=(cj0*cj1);
CheckValue<IkReal> x6042 = IKatan2WithCheck(IkReal(((-1.0)*sj2*x6041)),IkReal((cj2*x6041)),IKFAST_ATAN2_MAGTHRESH);
if(!x6042.valid){
continue;
}
CheckValue<IkReal> x6043=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x6043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6042.value)+(((1.5707963267949)*(x6043.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6044=IKsin(j4);
IkReal x6045=IKcos(j4);
IkReal x6046=(cj0*sj2);
IkReal x6047=(r01*sj5);
IkReal x6048=(r21*sj5);
IkReal x6049=(cj0*cj2);
IkReal x6050=((1.0)*x6044);
IkReal x6051=(cj5*x6044);
IkReal x6052=((1.0)*cj5*x6045);
evalcond[0]=(x6046+((r12*x6044)));
evalcond[1]=((((-1.0)*x6049))+((r12*x6045)));
evalcond[2]=((((-1.0)*x6048*x6050))+((r20*x6051)));
evalcond[3]=((((-1.0)*r20*x6052))+((x6045*x6048)));
evalcond[4]=(((r00*x6051))+(((-1.0)*x6047*x6050))+((cj1*x6046)));
evalcond[5]=((((-1.0)*r00*x6052))+((x6045*x6047))+((cj1*x6049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6053 = IKatan2WithCheck(IkReal(((-1.0)*cj0*sj2)),IkReal((cj0*cj2)),IKFAST_ATAN2_MAGTHRESH);
if(!x6053.valid){
continue;
}
CheckValue<IkReal> x6054=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x6054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6053.value)+(((1.5707963267949)*(x6054.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6055=IKsin(j4);
IkReal x6056=IKcos(j4);
IkReal x6057=(cj0*sj2);
IkReal x6058=(r01*sj5);
IkReal x6059=(r21*sj5);
IkReal x6060=(cj0*cj2);
IkReal x6061=((1.0)*x6055);
IkReal x6062=(cj5*x6055);
IkReal x6063=((1.0)*cj5*x6056);
evalcond[0]=(((r12*x6055))+x6057);
evalcond[1]=(((r12*x6056))+(((-1.0)*x6060)));
evalcond[2]=((((-1.0)*x6059*x6061))+((r20*x6062)));
evalcond[3]=(((x6056*x6059))+(((-1.0)*r20*x6063)));
evalcond[4]=(((r00*x6062))+(((-1.0)*x6058*x6061))+((cj1*x6057)));
evalcond[5]=((((-1.0)*r00*x6063))+((x6056*x6058))+((cj1*x6060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6064=cj5*cj5;
IkReal x6065=(sj1*sj2);
IkReal x6066=((1.0)*cj5);
IkReal x6067=(r11*sj5);
IkReal x6068=(cj0*sj2);
IkReal x6069=((1.0)*r12);
IkReal x6070=(r21*sj5);
IkReal x6071=(r11*r21);
IkReal x6072=(cj1*cj2*sj0);
CheckValue<IkReal> x6073=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x6069))+(((-1.0)*x6071))+((cj5*r20*x6067))+((cj5*r10*x6070))+((x6064*x6071))+(((-1.0)*r10*r20*x6064)))),-1);
if(!x6073.valid){
continue;
}
CheckValue<IkReal> x6074 = IKatan2WithCheck(IkReal((((r22*x6072))+((r22*x6068))+(((-1.0)*r10*x6065*x6066))+((x6065*x6067)))),IkReal(((((-1.0)*r20*x6066*x6068))+((x6068*x6070))+((x6070*x6072))+(((-1.0)*r20*x6066*x6072))+(((-1.0)*x6065*x6069)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6073.value)))+(x6074.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6075=IKsin(j4);
IkReal x6076=IKcos(j4);
IkReal x6077=(cj5*r00);
IkReal x6078=(cj1*cj2);
IkReal x6079=((1.0)*sj1);
IkReal x6080=(cj0*sj2);
IkReal x6081=(sj0*sj2);
IkReal x6082=((1.0)*x6076);
IkReal x6083=(sj5*x6076);
IkReal x6084=(cj5*x6075);
IkReal x6085=((1.0)*sj5*x6075);
evalcond[0]=(((r22*x6076))+(((-1.0)*r21*x6085))+(((-1.0)*sj2*x6079))+((r20*x6084)));
evalcond[1]=(((r22*x6075))+(((-1.0)*cj2*x6079))+(((-1.0)*cj5*r20*x6082))+((r21*x6083)));
evalcond[2]=(((cj2*sj0))+((x6075*x6077))+((cj1*x6080))+((r02*x6076))+(((-1.0)*r01*x6085)));
evalcond[3]=(x6080+(((-1.0)*cj5*r10*x6082))+((sj0*x6078))+((r11*x6083))+((r12*x6075)));
evalcond[4]=(((r10*x6084))+((cj1*x6081))+(((-1.0)*cj0*cj2))+((r12*x6076))+(((-1.0)*r11*x6085)));
evalcond[5]=(((r01*x6083))+((cj0*x6078))+(((-1.0)*x6081))+(((-1.0)*x6077*x6082))+((r02*x6075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6086=cj5*cj5;
IkReal x6087=r21*r21;
IkReal x6088=((1.0)*sj1);
IkReal x6089=(cj5*r20);
IkReal x6090=(r21*sj5);
IkReal x6091=(r22*sj1);
CheckValue<IkReal> x6092 = IKatan2WithCheck(IkReal((((cj2*x6091))+((sj1*sj2*x6089))+(((-1.0)*sj2*x6088*x6090)))),IkReal(((((-1.0)*cj2*x6088*x6089))+((sj2*x6091))+((cj2*sj1*x6090)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6092.valid){
continue;
}
CheckValue<IkReal> x6093=IKPowWithIntegerCheck(IKsign((((x6086*(r20*r20)))+(r22*r22)+(((-1.0)*x6086*x6087))+x6087+(((-2.0)*x6089*x6090)))),-1);
if(!x6093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6092.value)+(((1.5707963267949)*(x6093.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6094=IKsin(j4);
IkReal x6095=IKcos(j4);
IkReal x6096=(cj5*r00);
IkReal x6097=(cj1*cj2);
IkReal x6098=((1.0)*sj1);
IkReal x6099=(cj0*sj2);
IkReal x6100=(sj0*sj2);
IkReal x6101=((1.0)*x6095);
IkReal x6102=(sj5*x6095);
IkReal x6103=(cj5*x6094);
IkReal x6104=((1.0)*sj5*x6094);
evalcond[0]=(((r20*x6103))+((r22*x6095))+(((-1.0)*r21*x6104))+(((-1.0)*sj2*x6098)));
evalcond[1]=(((r21*x6102))+(((-1.0)*cj5*r20*x6101))+((r22*x6094))+(((-1.0)*cj2*x6098)));
evalcond[2]=(((cj2*sj0))+((cj1*x6099))+((x6094*x6096))+(((-1.0)*r01*x6104))+((r02*x6095)));
evalcond[3]=(((r11*x6102))+((sj0*x6097))+x6099+(((-1.0)*cj5*r10*x6101))+((r12*x6094)));
evalcond[4]=(((r10*x6103))+(((-1.0)*r11*x6104))+((cj1*x6100))+((r12*x6095))+(((-1.0)*cj0*cj2)));
evalcond[5]=((((-1.0)*x6096*x6101))+((cj0*x6097))+(((-1.0)*x6100))+((r01*x6102))+((r02*x6094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6105=((1.0)*cj5);
IkReal x6106=(r21*sj5);
IkReal x6107=(cj2*sj0);
IkReal x6108=(sj1*sj2);
IkReal x6109=(cj0*cj1*sj2);
CheckValue<IkReal> x6110 = IKatan2WithCheck(IkReal((((r22*x6109))+((r22*x6107))+((r02*x6108)))),IkReal((((x6106*x6107))+((x6106*x6109))+(((-1.0)*r00*x6105*x6108))+((r01*sj5*x6108))+(((-1.0)*r20*x6105*x6107))+(((-1.0)*r20*x6105*x6109)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6110.valid){
continue;
}
CheckValue<IkReal> x6111=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6105)))),-1);
if(!x6111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6110.value)+(((1.5707963267949)*(x6111.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6112=IKsin(j4);
IkReal x6113=IKcos(j4);
IkReal x6114=(cj5*r00);
IkReal x6115=(cj1*cj2);
IkReal x6116=((1.0)*sj1);
IkReal x6117=(cj0*sj2);
IkReal x6118=(sj0*sj2);
IkReal x6119=((1.0)*x6113);
IkReal x6120=(sj5*x6113);
IkReal x6121=(cj5*x6112);
IkReal x6122=((1.0)*sj5*x6112);
evalcond[0]=(((r20*x6121))+((r22*x6113))+(((-1.0)*sj2*x6116))+(((-1.0)*r21*x6122)));
evalcond[1]=(((r21*x6120))+((r22*x6112))+(((-1.0)*cj5*r20*x6119))+(((-1.0)*cj2*x6116)));
evalcond[2]=(((cj2*sj0))+((r02*x6113))+((cj1*x6117))+((x6112*x6114))+(((-1.0)*r01*x6122)));
evalcond[3]=((((-1.0)*cj5*r10*x6119))+x6117+((r12*x6112))+((sj0*x6115))+((r11*x6120)));
evalcond[4]=(((cj1*x6118))+((r12*x6113))+((r10*x6121))+(((-1.0)*r11*x6122))+(((-1.0)*cj0*cj2)));
evalcond[5]=(((r01*x6120))+((r02*x6112))+(((-1.0)*x6118))+(((-1.0)*x6114*x6119))+((cj0*x6115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=sj1;
j0eval[1]=IKsign(sj1);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6123=cj5*cj5;
IkReal x6124=r21*r21;
IkReal x6125=(sj1*sj2);
IkReal x6126=(r21*sj5);
IkReal x6127=(cj5*r20);
IkReal x6128=(cj2*sj1);
IkReal x6129=((r22*r22)+x6124+(((-1.0)*x6123*x6124))+(((-2.0)*x6126*x6127))+((x6123*(r20*r20))));
j4eval[0]=x6129;
j4eval[1]=IKsign(x6129);
j4eval[2]=((IKabs(((((-1.0)*x6126*x6128))+((x6127*x6128))+((r22*x6125)))))+(IKabs((((x6125*x6127))+(((-1.0)*r22*x6128))+(((-1.0)*x6125*x6126))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=((962.772785622593)+((cj1*cj2*sj1))+(((-1.0)*sj1))+(((-962.772785622593)*(cj1*cj1))));
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=1.0;
j1=0;
IkReal x6130=((68162500000.0)*cj2);
IkReal x6131=((68162500000.0)*px);
IkReal x6132=((68162500000.0)*py);
j0eval[0]=((1.0)+(((-1.0)*cj2)));
j0eval[1]=IKsign(((59470418.0)+(((-59470418.0)*cj2))));
j0eval[2]=((IKabs((((px*x6130))+((sj2*x6132))+(((-1.0)*x6131)))))+(IKabs((((py*x6130))+(((-1.0)*sj2*x6131))+(((-1.0)*x6132))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=1.0;
j1=0;
j4eval[0]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6134 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6134.valid){
continue;
}
IkReal x6133=x6134.value;
j4array[0]=((-1.0)*x6133);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x6133)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x6135=IKcos(j4);
evalcond[0]=((((-1.0)*r22*(IKsin(j4))))+((cj5*r20*x6135))+(((-1.0)*r21*sj5*x6135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=1.0;
j1=0;
IkReal x6136=((68162500000.0)*cj2);
IkReal x6137=((68162500000.0)*px);
IkReal x6138=((68162500000.0)*py);
j0eval[0]=((1.0)+(((-1.0)*cj2)));
j0eval[1]=IKsign(((59470418.0)+(((-59470418.0)*cj2))));
j0eval[2]=((IKabs((((py*x6136))+(((-1.0)*sj2*x6137))+(((-1.0)*x6138)))))+(IKabs((((px*x6136))+((sj2*x6138))+(((-1.0)*x6137))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=((-1.0)+cj2);
j0eval[1]=IKsign(((-5453.0)+(((5453.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6139=((5453.0)*sj4);
IkReal x6140=(cj5*r10);
IkReal x6141=(r11*sj5);
IkReal x6142=((5453.0)*cj4*r12);
CheckValue<IkReal> x6143=IKPowWithIntegerCheck(sj2,-1);
if(!x6143.valid){
continue;
}
if( IKabs(((0.000183385292499542)*(x6143.value)*((((x6139*x6141))+(((-1.0)*x6139*x6140))+(((-1.0)*x6142))+((cj2*x6142))+((cj2*x6139*x6140))+(((-12500000.0)*cj2*px))+(((-1.0)*cj2*x6139*x6141)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x6140))+(((-1.0)*sj4*x6141))+(((-2292.31615624427)*px))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.000183385292499542)*(x6143.value)*((((x6139*x6141))+(((-1.0)*x6139*x6140))+(((-1.0)*x6142))+((cj2*x6142))+((cj2*x6139*x6140))+(((-12500000.0)*cj2*px))+(((-1.0)*cj2*x6139*x6141))))))+IKsqr((((sj4*x6140))+(((-1.0)*sj4*x6141))+(((-2292.31615624427)*px))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.000183385292499542)*(x6143.value)*((((x6139*x6141))+(((-1.0)*x6139*x6140))+(((-1.0)*x6142))+((cj2*x6142))+((cj2*x6139*x6140))+(((-12500000.0)*cj2*px))+(((-1.0)*cj2*x6139*x6141))))), (((sj4*x6140))+(((-1.0)*sj4*x6141))+(((-2292.31615624427)*px))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6144=IKcos(j0);
IkReal x6145=IKsin(j0);
IkReal x6146=(cj5*r10);
IkReal x6147=(cj5*r00);
IkReal x6148=((1.0)*sj4);
IkReal x6149=(r01*sj5);
IkReal x6150=(r11*sj5);
IkReal x6151=((1.0)*cj4);
IkReal x6152=(sj2*x6144);
IkReal x6153=(cj2*x6145);
IkReal x6154=((0.00043624)*x6144);
IkReal x6155=(cj2*x6144);
IkReal x6156=((0.00043624)*x6145);
IkReal x6157=(sj2*x6145);
IkReal x6158=(x6152+x6153);
evalcond[0]=((((-1.0)*sj2*x6156))+(((-1.0)*x6154))+(((-1.0)*px))+((cj2*x6154)));
evalcond[1]=((((-1.0)*x6156))+(((-1.0)*py))+(((0.00043624)*x6152))+(((0.00043624)*x6153)));
evalcond[2]=(x6158+(((-1.0)*x6148*x6149))+((sj4*x6147))+((cj4*r02)));
evalcond[3]=(x6157+((sj4*x6146))+(((-1.0)*x6148*x6150))+((cj4*r12))+(((-1.0)*x6155)));
evalcond[4]=((((-1.0)*x6150*x6151))+x6158+(((-1.0)*r12*x6148))+((cj4*x6146)));
evalcond[5]=(x6155+(((-1.0)*r02*x6148))+(((-1.0)*x6149*x6151))+((cj4*x6147))+(((-1.0)*x6157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6159=((5453.0)*sj4);
IkReal x6160=(cj5*r00);
IkReal x6161=(r01*sj5);
IkReal x6162=((12500000.0)*px);
IkReal x6163=((5453.0)*cj4*r02);
CheckValue<IkReal> x6164=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((5453.0)*cj2)))),-1);
if(!x6164.valid){
continue;
}
CheckValue<IkReal> x6165 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x6159*x6161))+((sj2*x6162))+((x6159*x6161))+((cj2*x6163))+(((-1.0)*x6163))+(((-1.0)*x6159*x6160))+((cj2*x6159*x6160)))),IkReal((((sj2*x6163))+(((-1.0)*cj2*x6162))+((sj2*x6159*x6160))+(((-1.0)*sj2*x6159*x6161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6165.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6164.value)))+(x6165.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6166=IKcos(j0);
IkReal x6167=IKsin(j0);
IkReal x6168=(cj5*r10);
IkReal x6169=(cj5*r00);
IkReal x6170=((1.0)*sj4);
IkReal x6171=(r01*sj5);
IkReal x6172=(r11*sj5);
IkReal x6173=((1.0)*cj4);
IkReal x6174=(sj2*x6166);
IkReal x6175=(cj2*x6167);
IkReal x6176=((0.00043624)*x6166);
IkReal x6177=(cj2*x6166);
IkReal x6178=((0.00043624)*x6167);
IkReal x6179=(sj2*x6167);
IkReal x6180=(x6174+x6175);
evalcond[0]=(((cj2*x6176))+(((-1.0)*x6176))+(((-1.0)*px))+(((-1.0)*sj2*x6178)));
evalcond[1]=((((0.00043624)*x6174))+(((0.00043624)*x6175))+(((-1.0)*x6178))+(((-1.0)*py)));
evalcond[2]=(x6180+(((-1.0)*x6170*x6171))+((sj4*x6169))+((cj4*r02)));
evalcond[3]=(x6179+(((-1.0)*x6170*x6172))+(((-1.0)*x6177))+((sj4*x6168))+((cj4*r12)));
evalcond[4]=(x6180+(((-1.0)*r12*x6170))+(((-1.0)*x6172*x6173))+((cj4*x6168)));
evalcond[5]=(x6177+(((-1.0)*x6179))+(((-1.0)*x6171*x6173))+(((-1.0)*r02*x6170))+((cj4*x6169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6181=((68162500000.0)*py);
IkReal x6182=((68162500000.0)*px);
CheckValue<IkReal> x6183 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x6182))+((cj2*x6181))+(((-1.0)*x6181)))),IkReal((((sj2*x6181))+((cj2*x6182))+(((-1.0)*x6182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6183.valid){
continue;
}
CheckValue<IkReal> x6184=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((-59470418.0)*cj2)))),-1);
if(!x6184.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6183.value)+(((1.5707963267949)*(x6184.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6185=IKcos(j0);
IkReal x6186=IKsin(j0);
IkReal x6187=(cj5*r10);
IkReal x6188=(cj5*r00);
IkReal x6189=((1.0)*sj4);
IkReal x6190=(r01*sj5);
IkReal x6191=(r11*sj5);
IkReal x6192=((1.0)*cj4);
IkReal x6193=(sj2*x6185);
IkReal x6194=(cj2*x6186);
IkReal x6195=((0.00043624)*x6185);
IkReal x6196=(cj2*x6185);
IkReal x6197=((0.00043624)*x6186);
IkReal x6198=(sj2*x6186);
IkReal x6199=(x6194+x6193);
evalcond[0]=(((cj2*x6195))+(((-1.0)*x6195))+(((-1.0)*px))+(((-1.0)*sj2*x6197)));
evalcond[1]=((((0.00043624)*x6193))+(((0.00043624)*x6194))+(((-1.0)*x6197))+(((-1.0)*py)));
evalcond[2]=(x6199+(((-1.0)*x6189*x6190))+((sj4*x6188))+((cj4*r02)));
evalcond[3]=(x6198+(((-1.0)*x6189*x6191))+(((-1.0)*x6196))+((cj4*r12))+((sj4*x6187)));
evalcond[4]=(((cj4*x6187))+x6199+(((-1.0)*x6191*x6192))+(((-1.0)*r12*x6189)));
evalcond[5]=(((cj4*x6188))+(((-1.0)*r02*x6189))+x6196+(((-1.0)*x6190*x6192))+(((-1.0)*x6198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6200=((68162500000.0)*py);
IkReal x6201=((68162500000.0)*px);
CheckValue<IkReal> x6202=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((-59470418.0)*cj2)))),-1);
if(!x6202.valid){
continue;
}
CheckValue<IkReal> x6203 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x6201))+((cj2*x6200))+(((-1.0)*x6200)))),IkReal((((sj2*x6200))+((cj2*x6201))+(((-1.0)*x6201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6203.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6202.value)))+(x6203.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6204=IKcos(j0);
IkReal x6205=IKsin(j0);
IkReal x6206=((0.00043624)*x6204);
IkReal x6207=((0.00043624)*x6205);
evalcond[0]=((((-1.0)*sj2*x6207))+((cj2*x6206))+(((-1.0)*px))+(((-1.0)*x6206)));
evalcond[1]=(((sj2*x6206))+((cj2*x6207))+(((-1.0)*py))+(((-1.0)*x6207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=1.0;
j1=0;
IkReal x6208=(cj0*cj2);
IkReal x6209=(sj0*sj2);
IkReal x6210=(r21*sj5);
IkReal x6211=(cj5*r20);
IkReal x6212=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6212;
j4eval[1]=IKsign(x6212);
j4eval[2]=((IKabs((((x6209*x6210))+(((-1.0)*x6209*x6211))+((x6208*x6211))+(((-1.0)*x6208*x6210)))))+(IKabs((((r22*x6209))+(((-1.0)*r22*x6208))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=1.0;
j1=0;
IkReal x6213=((1.0)*cj5);
IkReal x6214=(cj0*sj2);
IkReal x6215=(cj2*sj0);
IkReal x6216=(r21*sj5);
IkReal x6217=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6213)));
j4eval[0]=x6217;
j4eval[1]=IKsign(x6217);
j4eval[2]=((IKabs((((r22*x6215))+((r22*x6214)))))+(IKabs(((((-1.0)*r20*x6213*x6215))+(((-1.0)*r20*x6213*x6214))+((x6215*x6216))+((x6214*x6216))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=1.0;
j1=0;
IkReal x6218=cj5*cj5;
IkReal x6219=(cj0*sj2);
IkReal x6220=(cj2*sj0);
IkReal x6221=(r21*sj5);
IkReal x6222=(r11*r21);
IkReal x6223=((1.0)*cj5*r20);
IkReal x6224=((((-1.0)*x6218*x6222))+x6222+(((-1.0)*cj5*r10*x6221))+((r12*r22))+((r10*r20*x6218))+(((-1.0)*r11*sj5*x6223)));
j4eval[0]=x6224;
j4eval[1]=IKsign(x6224);
j4eval[2]=((IKabs((((r22*x6219))+((r22*x6220)))))+(IKabs((((x6219*x6221))+(((-1.0)*x6219*x6223))+(((-1.0)*x6220*x6223))+((x6220*x6221))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6225=cj5*cj5;
IkReal x6226=(cj0*sj2);
IkReal x6227=(cj2*sj0);
IkReal x6228=(r21*sj5);
IkReal x6229=(r11*r21);
IkReal x6230=((1.0)*cj5*r20);
CheckValue<IkReal> x6231 = IKatan2WithCheck(IkReal((((r22*x6227))+((r22*x6226)))),IkReal(((((-1.0)*x6226*x6230))+((x6227*x6228))+(((-1.0)*x6227*x6230))+((x6226*x6228)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6231.valid){
continue;
}
CheckValue<IkReal> x6232=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6225*x6229))+x6229+(((-1.0)*cj5*r10*x6228))+((r12*r22))+(((-1.0)*r11*sj5*x6230))+((r10*r20*x6225)))),-1);
if(!x6232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6231.value)+(((1.5707963267949)*(x6232.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6233=IKsin(j4);
IkReal x6234=IKcos(j4);
IkReal x6235=(cj2*sj0);
IkReal x6236=(cj0*sj2);
IkReal x6237=((1.0)*sj5);
IkReal x6238=(cj0*cj2);
IkReal x6239=(cj5*r10);
IkReal x6240=(sj0*sj2);
IkReal x6241=(cj5*x6233);
IkReal x6242=((1.0)*x6233);
IkReal x6243=(cj5*x6234);
IkReal x6244=(x6235+x6236);
evalcond[0]=(((r20*x6241))+((r22*x6234))+(((-1.0)*r21*x6233*x6237)));
evalcond[1]=(((r20*x6243))+(((-1.0)*r21*x6234*x6237))+(((-1.0)*r22*x6242)));
evalcond[2]=(((r02*x6234))+x6244+(((-1.0)*r01*x6233*x6237))+((r00*x6241)));
evalcond[3]=(((x6233*x6239))+x6240+((r12*x6234))+(((-1.0)*x6238))+(((-1.0)*r11*x6233*x6237)));
evalcond[4]=(x6244+((x6234*x6239))+(((-1.0)*r11*x6234*x6237))+(((-1.0)*r12*x6242)));
evalcond[5]=((((-1.0)*r02*x6242))+(((-1.0)*r01*x6234*x6237))+x6238+(((-1.0)*x6240))+((r00*x6243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6245=((1.0)*cj5);
IkReal x6246=(cj0*sj2);
IkReal x6247=(cj2*sj0);
IkReal x6248=(r21*sj5);
CheckValue<IkReal> x6249 = IKatan2WithCheck(IkReal((((r22*x6246))+((r22*x6247)))),IkReal((((x6246*x6248))+((x6247*x6248))+(((-1.0)*r20*x6245*x6246))+(((-1.0)*r20*x6245*x6247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6249.valid){
continue;
}
CheckValue<IkReal> x6250=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6245)))),-1);
if(!x6250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6249.value)+(((1.5707963267949)*(x6250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6251=IKsin(j4);
IkReal x6252=IKcos(j4);
IkReal x6253=(cj2*sj0);
IkReal x6254=(cj0*sj2);
IkReal x6255=((1.0)*sj5);
IkReal x6256=(cj0*cj2);
IkReal x6257=(cj5*r10);
IkReal x6258=(sj0*sj2);
IkReal x6259=(cj5*x6251);
IkReal x6260=((1.0)*x6251);
IkReal x6261=(cj5*x6252);
IkReal x6262=(x6253+x6254);
evalcond[0]=(((r22*x6252))+(((-1.0)*r21*x6251*x6255))+((r20*x6259)));
evalcond[1]=((((-1.0)*r21*x6252*x6255))+(((-1.0)*r22*x6260))+((r20*x6261)));
evalcond[2]=(((r00*x6259))+x6262+(((-1.0)*r01*x6251*x6255))+((r02*x6252)));
evalcond[3]=(x6258+((x6251*x6257))+(((-1.0)*x6256))+(((-1.0)*r11*x6251*x6255))+((r12*x6252)));
evalcond[4]=(x6262+((x6252*x6257))+(((-1.0)*r11*x6252*x6255))+(((-1.0)*r12*x6260)));
evalcond[5]=(x6256+((r00*x6261))+(((-1.0)*r02*x6260))+(((-1.0)*r01*x6252*x6255))+(((-1.0)*x6258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6263=(cj0*cj2);
IkReal x6264=(sj0*sj2);
IkReal x6265=(r21*sj5);
IkReal x6266=(cj5*r20);
CheckValue<IkReal> x6267 = IKatan2WithCheck(IkReal((((r22*x6264))+(((-1.0)*r22*x6263)))),IkReal((((x6263*x6266))+(((-1.0)*x6264*x6266))+((x6264*x6265))+(((-1.0)*x6263*x6265)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6267.valid){
continue;
}
CheckValue<IkReal> x6268=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6267.value)+(((1.5707963267949)*(x6268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6269=IKsin(j4);
IkReal x6270=IKcos(j4);
IkReal x6271=(cj2*sj0);
IkReal x6272=(cj0*sj2);
IkReal x6273=((1.0)*sj5);
IkReal x6274=(cj0*cj2);
IkReal x6275=(cj5*r10);
IkReal x6276=(sj0*sj2);
IkReal x6277=(cj5*x6269);
IkReal x6278=((1.0)*x6269);
IkReal x6279=(cj5*x6270);
IkReal x6280=(x6271+x6272);
evalcond[0]=(((r22*x6270))+(((-1.0)*r21*x6269*x6273))+((r20*x6277)));
evalcond[1]=((((-1.0)*r21*x6270*x6273))+(((-1.0)*r22*x6278))+((r20*x6279)));
evalcond[2]=(x6280+((r00*x6277))+(((-1.0)*r01*x6269*x6273))+((r02*x6270)));
evalcond[3]=(((r12*x6270))+x6276+((x6269*x6275))+(((-1.0)*x6274))+(((-1.0)*r11*x6269*x6273)));
evalcond[4]=(x6280+(((-1.0)*r11*x6270*x6273))+(((-1.0)*r12*x6278))+((x6270*x6275)));
evalcond[5]=(x6274+((r00*x6279))+(((-1.0)*r02*x6278))+(((-1.0)*x6276))+(((-1.0)*r01*x6270*x6273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x6281=((68162500000.0)*py);
IkReal x6282=((68162500000.0)*px);
j0eval[0]=((1.0)+cj2);
j0eval[1]=IKsign(((59470418.0)+(((59470418.0)*cj2))));
j0eval[2]=((IKabs(((((-1.0)*cj2*x6282))+((sj2*x6281))+(((-1.0)*x6282)))))+(IKabs(((((-1.0)*cj2*x6281))+(((-1.0)*sj2*x6282))+(((-1.0)*x6281))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j4eval[0]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6284 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6284.valid){
continue;
}
IkReal x6283=x6284.value;
j4array[0]=((-1.0)*x6283);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x6283)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x6285=IKcos(j4);
evalcond[0]=(((cj5*r20*x6285))+(((-1.0)*r21*sj5*x6285))+(((-1.0)*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x6286=((68162500000.0)*py);
IkReal x6287=((68162500000.0)*px);
j0eval[0]=((1.0)+cj2);
j0eval[1]=IKsign(((59470418.0)+(((59470418.0)*cj2))));
j0eval[2]=((IKabs(((((-1.0)*cj2*x6286))+(((-1.0)*sj2*x6287))+(((-1.0)*x6286)))))+(IKabs(((((-1.0)*cj2*x6287))+((sj2*x6286))+(((-1.0)*x6287))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=((-1.0)+(((-1.0)*cj2)));
j0eval[1]=IKsign(((-5453.0)+(((-5453.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6288=(r01*sj5);
IkReal x6289=(cj5*r00);
IkReal x6290=((5453.0)*sj4);
IkReal x6291=((5453.0)*cj4*r02);
IkReal x6292=(cj2*x6290);
CheckValue<IkReal> x6293=IKPowWithIntegerCheck(sj2,-1);
if(!x6293.valid){
continue;
}
if( IKabs(((((-2292.31615624427)*py))+((sj4*x6289))+(((-1.0)*sj4*x6288))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.000183385292499542)*(x6293.value)*(((((12500000.0)*cj2*py))+(((-1.0)*x6289*x6292))+(((-1.0)*x6289*x6290))+(((-1.0)*x6291))+((x6288*x6292))+((x6288*x6290))+(((-1.0)*cj2*x6291)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2292.31615624427)*py))+((sj4*x6289))+(((-1.0)*sj4*x6288))+((cj4*r02))))+IKsqr(((-0.000183385292499542)*(x6293.value)*(((((12500000.0)*cj2*py))+(((-1.0)*x6289*x6292))+(((-1.0)*x6289*x6290))+(((-1.0)*x6291))+((x6288*x6292))+((x6288*x6290))+(((-1.0)*cj2*x6291))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2292.31615624427)*py))+((sj4*x6289))+(((-1.0)*sj4*x6288))+((cj4*r02))), ((-0.000183385292499542)*(x6293.value)*(((((12500000.0)*cj2*py))+(((-1.0)*x6289*x6292))+(((-1.0)*x6289*x6290))+(((-1.0)*x6291))+((x6288*x6292))+((x6288*x6290))+(((-1.0)*cj2*x6291))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6294=IKcos(j0);
IkReal x6295=IKsin(j0);
IkReal x6296=(cj5*r10);
IkReal x6297=(cj5*r00);
IkReal x6298=((1.0)*sj4);
IkReal x6299=(r01*sj5);
IkReal x6300=(r11*sj5);
IkReal x6301=((1.0)*cj4);
IkReal x6302=((0.00043624)*x6294);
IkReal x6303=((1.0)*x6294);
IkReal x6304=((0.00043624)*x6295);
IkReal x6305=(cj2*x6295);
IkReal x6306=(cj2*x6303);
IkReal x6307=((1.0)*sj2*x6295);
IkReal x6308=(x6307+x6306);
evalcond[0]=((((-1.0)*sj2*x6304))+(((-1.0)*x6302))+(((-1.0)*px))+(((-1.0)*cj2*x6302)));
evalcond[1]=((((-1.0)*x6304))+((sj2*x6302))+(((-1.0)*py))+(((-1.0)*cj2*x6304)));
evalcond[2]=(x6305+(((-1.0)*sj2*x6303))+((sj4*x6297))+(((-1.0)*x6298*x6299))+((cj4*r02)));
evalcond[3]=((((-1.0)*x6308))+(((-1.0)*x6298*x6300))+((sj4*x6296))+((cj4*r12)));
evalcond[4]=(((cj4*x6296))+(((-1.0)*x6300*x6301))+((sj2*x6294))+(((-1.0)*x6305))+(((-1.0)*r12*x6298)));
evalcond[5]=(((cj4*x6297))+(((-1.0)*x6308))+(((-1.0)*r02*x6298))+(((-1.0)*x6299*x6301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6309=((12500000.0)*px);
IkReal x6310=((5453.0)*cj2);
IkReal x6311=((5453.0)*cj4*r02);
IkReal x6312=(r01*sj4*sj5);
IkReal x6313=((5453.0)*cj5*r00*sj4);
CheckValue<IkReal> x6314 = IKatan2WithCheck(IkReal((x6313+x6311+(((-1.0)*x6310*x6312))+((cj5*r00*sj4*x6310))+((sj2*x6309))+(((-5453.0)*x6312))+((cj4*r02*x6310)))),IkReal(((((-1.0)*sj2*x6311))+(((-1.0)*sj2*x6313))+((cj2*x6309))+(((5453.0)*sj2*x6312)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6314.valid){
continue;
}
CheckValue<IkReal> x6315=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((-1.0)*x6310)))),-1);
if(!x6315.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6314.value)+(((1.5707963267949)*(x6315.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6316=IKcos(j0);
IkReal x6317=IKsin(j0);
IkReal x6318=(cj5*r10);
IkReal x6319=(cj5*r00);
IkReal x6320=((1.0)*sj4);
IkReal x6321=(r01*sj5);
IkReal x6322=(r11*sj5);
IkReal x6323=((1.0)*cj4);
IkReal x6324=((0.00043624)*x6316);
IkReal x6325=((1.0)*x6316);
IkReal x6326=((0.00043624)*x6317);
IkReal x6327=(cj2*x6317);
IkReal x6328=(cj2*x6325);
IkReal x6329=((1.0)*sj2*x6317);
IkReal x6330=(x6329+x6328);
evalcond[0]=((((-1.0)*px))+(((-1.0)*cj2*x6324))+(((-1.0)*sj2*x6326))+(((-1.0)*x6324)));
evalcond[1]=(((sj2*x6324))+(((-1.0)*py))+(((-1.0)*cj2*x6326))+(((-1.0)*x6326)));
evalcond[2]=(((sj4*x6319))+x6327+(((-1.0)*x6320*x6321))+(((-1.0)*sj2*x6325))+((cj4*r02)));
evalcond[3]=(((sj4*x6318))+(((-1.0)*x6320*x6322))+(((-1.0)*x6330))+((cj4*r12)));
evalcond[4]=((((-1.0)*x6327))+((cj4*x6318))+((sj2*x6316))+(((-1.0)*x6322*x6323))+(((-1.0)*r12*x6320)));
evalcond[5]=(((cj4*x6319))+(((-1.0)*x6321*x6323))+(((-1.0)*r02*x6320))+(((-1.0)*x6330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6331=((68162500000.0)*py);
IkReal x6332=((68162500000.0)*px);
CheckValue<IkReal> x6333 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x6331))+(((-1.0)*sj2*x6332))+(((-1.0)*x6331)))),IkReal((((sj2*x6331))+(((-1.0)*cj2*x6332))+(((-1.0)*x6332)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6333.valid){
continue;
}
CheckValue<IkReal> x6334=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((59470418.0)*cj2)))),-1);
if(!x6334.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6333.value)+(((1.5707963267949)*(x6334.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6335=IKcos(j0);
IkReal x6336=IKsin(j0);
IkReal x6337=(cj5*r10);
IkReal x6338=(cj5*r00);
IkReal x6339=((1.0)*sj4);
IkReal x6340=(r01*sj5);
IkReal x6341=(r11*sj5);
IkReal x6342=((1.0)*cj4);
IkReal x6343=((0.00043624)*x6335);
IkReal x6344=((1.0)*x6335);
IkReal x6345=((0.00043624)*x6336);
IkReal x6346=(cj2*x6336);
IkReal x6347=(cj2*x6344);
IkReal x6348=((1.0)*sj2*x6336);
IkReal x6349=(x6347+x6348);
evalcond[0]=((((-1.0)*sj2*x6345))+(((-1.0)*cj2*x6343))+(((-1.0)*px))+(((-1.0)*x6343)));
evalcond[1]=((((-1.0)*cj2*x6345))+((sj2*x6343))+(((-1.0)*py))+(((-1.0)*x6345)));
evalcond[2]=((((-1.0)*sj2*x6344))+x6346+(((-1.0)*x6339*x6340))+((sj4*x6338))+((cj4*r02)));
evalcond[3]=((((-1.0)*x6339*x6341))+((sj4*x6337))+(((-1.0)*x6349))+((cj4*r12)));
evalcond[4]=((((-1.0)*r12*x6339))+(((-1.0)*x6341*x6342))+((sj2*x6335))+(((-1.0)*x6346))+((cj4*x6337)));
evalcond[5]=((((-1.0)*x6340*x6342))+(((-1.0)*r02*x6339))+((cj4*x6338))+(((-1.0)*x6349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6350=((68162500000.0)*py);
IkReal x6351=((68162500000.0)*px);
CheckValue<IkReal> x6352 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x6351))+(((-1.0)*x6350))+(((-1.0)*cj2*x6350)))),IkReal(((((-1.0)*x6351))+(((-1.0)*cj2*x6351))+((sj2*x6350)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6352.valid){
continue;
}
CheckValue<IkReal> x6353=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((59470418.0)*cj2)))),-1);
if(!x6353.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6352.value)+(((1.5707963267949)*(x6353.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6354=IKcos(j0);
IkReal x6355=IKsin(j0);
IkReal x6356=((0.00043624)*x6354);
IkReal x6357=((0.00043624)*x6355);
evalcond[0]=((((-1.0)*sj2*x6357))+(((-1.0)*px))+(((-1.0)*x6356))+(((-1.0)*cj2*x6356)));
evalcond[1]=((((-1.0)*py))+(((-1.0)*x6357))+(((-1.0)*cj2*x6357))+((sj2*x6356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x6358=((1.0)*r22);
IkReal x6359=(cj0*cj2);
IkReal x6360=(sj0*sj2);
IkReal x6361=(cj5*r20);
IkReal x6362=((1.0)*r21*sj5);
IkReal x6363=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6363;
j4eval[1]=IKsign(x6363);
j4eval[2]=((IKabs(((((-1.0)*x6358*x6359))+(((-1.0)*x6358*x6360)))))+(IKabs((((x6359*x6361))+(((-1.0)*x6360*x6362))+((x6360*x6361))+(((-1.0)*x6359*x6362))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x6364=((1.0)*cj5);
IkReal x6365=(r21*sj5);
IkReal x6366=(cj2*sj0);
IkReal x6367=(cj0*sj2);
IkReal x6368=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6364)));
j4eval[0]=x6368;
j4eval[1]=IKsign(x6368);
j4eval[2]=((IKabs(((((-1.0)*r20*x6364*x6366))+(((-1.0)*x6365*x6367))+((cj5*r20*x6367))+((x6365*x6366)))))+(IKabs(((((-1.0)*r22*x6367))+((r22*x6366))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x6369=cj5*cj5;
IkReal x6370=(cj0*sj2);
IkReal x6371=((1.0)*sj5);
IkReal x6372=(cj5*r20);
IkReal x6373=(cj2*sj0);
IkReal x6374=(r11*r21);
IkReal x6375=(x6374+(((-1.0)*r11*x6371*x6372))+((r12*r22))+(((-1.0)*cj5*r10*r21*x6371))+((r10*r20*x6369))+(((-1.0)*x6369*x6374)));
j4eval[0]=x6375;
j4eval[1]=IKsign(x6375);
j4eval[2]=((IKabs(((((-1.0)*x6370*x6372))+((x6372*x6373))+(((-1.0)*r21*x6371*x6373))+((r21*sj5*x6370)))))+(IKabs(((((-1.0)*r22*x6373))+((r22*x6370))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6376=cj5*cj5;
IkReal x6377=(cj0*sj2);
IkReal x6378=((1.0)*sj5);
IkReal x6379=(cj5*r20);
IkReal x6380=(cj2*sj0);
IkReal x6381=(r11*r21);
CheckValue<IkReal> x6382=IKPowWithIntegerCheck(IKsign((x6381+((r12*r22))+(((-1.0)*r11*x6378*x6379))+(((-1.0)*cj5*r10*r21*x6378))+((r10*r20*x6376))+(((-1.0)*x6376*x6381)))),-1);
if(!x6382.valid){
continue;
}
CheckValue<IkReal> x6383 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6380))+((r22*x6377)))),IkReal(((((-1.0)*x6377*x6379))+(((-1.0)*r21*x6378*x6380))+((x6379*x6380))+((r21*sj5*x6377)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6382.value)))+(x6383.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6384=IKsin(j4);
IkReal x6385=IKcos(j4);
IkReal x6386=((1.0)*sj5);
IkReal x6387=((1.0)*cj0);
IkReal x6388=(cj5*r10);
IkReal x6389=((1.0)*sj0);
IkReal x6390=(cj2*x6387);
IkReal x6391=(sj2*x6389);
IkReal x6392=(cj5*x6384);
IkReal x6393=((1.0)*x6384);
IkReal x6394=(cj5*x6385);
IkReal x6395=(x6390+x6391);
evalcond[0]=(((r22*x6385))+((r20*x6392))+(((-1.0)*r21*x6384*x6386)));
evalcond[1]=((((-1.0)*r21*x6385*x6386))+((r20*x6394))+(((-1.0)*r22*x6393)));
evalcond[2]=((((-1.0)*sj2*x6387))+((cj2*sj0))+(((-1.0)*r01*x6384*x6386))+((r02*x6385))+((r00*x6392)));
evalcond[3]=(((x6384*x6388))+(((-1.0)*r11*x6384*x6386))+(((-1.0)*x6395))+((r12*x6385)));
evalcond[4]=(((x6385*x6388))+(((-1.0)*cj2*x6389))+(((-1.0)*r11*x6385*x6386))+(((-1.0)*r12*x6393))+((cj0*sj2)));
evalcond[5]=((((-1.0)*r01*x6385*x6386))+((r00*x6394))+(((-1.0)*x6395))+(((-1.0)*r02*x6393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6396=((1.0)*cj5);
IkReal x6397=(r21*sj5);
IkReal x6398=(cj2*sj0);
IkReal x6399=(cj0*sj2);
CheckValue<IkReal> x6400=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6396)))),-1);
if(!x6400.valid){
continue;
}
CheckValue<IkReal> x6401 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6399))+((r22*x6398)))),IkReal(((((-1.0)*x6397*x6399))+((x6397*x6398))+((cj5*r20*x6399))+(((-1.0)*r20*x6396*x6398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6400.value)))+(x6401.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6402=IKsin(j4);
IkReal x6403=IKcos(j4);
IkReal x6404=((1.0)*sj5);
IkReal x6405=((1.0)*cj0);
IkReal x6406=(cj5*r10);
IkReal x6407=((1.0)*sj0);
IkReal x6408=(cj2*x6405);
IkReal x6409=(sj2*x6407);
IkReal x6410=(cj5*x6402);
IkReal x6411=((1.0)*x6402);
IkReal x6412=(cj5*x6403);
IkReal x6413=(x6408+x6409);
evalcond[0]=(((r20*x6410))+(((-1.0)*r21*x6402*x6404))+((r22*x6403)));
evalcond[1]=(((r20*x6412))+(((-1.0)*r22*x6411))+(((-1.0)*r21*x6403*x6404)));
evalcond[2]=(((cj2*sj0))+((r02*x6403))+((r00*x6410))+(((-1.0)*r01*x6402*x6404))+(((-1.0)*sj2*x6405)));
evalcond[3]=((((-1.0)*r11*x6402*x6404))+(((-1.0)*x6413))+((r12*x6403))+((x6402*x6406)));
evalcond[4]=((((-1.0)*cj2*x6407))+(((-1.0)*r11*x6403*x6404))+(((-1.0)*r12*x6411))+((x6403*x6406))+((cj0*sj2)));
evalcond[5]=(((r00*x6412))+(((-1.0)*r02*x6411))+(((-1.0)*x6413))+(((-1.0)*r01*x6403*x6404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6414=((1.0)*r22);
IkReal x6415=(cj0*cj2);
IkReal x6416=(sj0*sj2);
IkReal x6417=(cj5*r20);
IkReal x6418=((1.0)*r21*sj5);
CheckValue<IkReal> x6419=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6419.valid){
continue;
}
CheckValue<IkReal> x6420 = IKatan2WithCheck(IkReal(((((-1.0)*x6414*x6416))+(((-1.0)*x6414*x6415)))),IkReal(((((-1.0)*x6415*x6418))+((x6416*x6417))+((x6415*x6417))+(((-1.0)*x6416*x6418)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6419.value)))+(x6420.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6421=IKsin(j4);
IkReal x6422=IKcos(j4);
IkReal x6423=((1.0)*sj5);
IkReal x6424=((1.0)*cj0);
IkReal x6425=(cj5*r10);
IkReal x6426=((1.0)*sj0);
IkReal x6427=(cj2*x6424);
IkReal x6428=(sj2*x6426);
IkReal x6429=(cj5*x6421);
IkReal x6430=((1.0)*x6421);
IkReal x6431=(cj5*x6422);
IkReal x6432=(x6427+x6428);
evalcond[0]=(((r20*x6429))+(((-1.0)*r21*x6421*x6423))+((r22*x6422)));
evalcond[1]=((((-1.0)*r21*x6422*x6423))+(((-1.0)*r22*x6430))+((r20*x6431)));
evalcond[2]=(((cj2*sj0))+((r02*x6422))+((r00*x6429))+(((-1.0)*r01*x6421*x6423))+(((-1.0)*sj2*x6424)));
evalcond[3]=((((-1.0)*x6432))+((r12*x6422))+(((-1.0)*r11*x6421*x6423))+((x6421*x6425)));
evalcond[4]=((((-1.0)*r12*x6430))+(((-1.0)*r11*x6422*x6423))+(((-1.0)*cj2*x6426))+((x6422*x6425))+((cj0*sj2)));
evalcond[5]=((((-1.0)*r02*x6430))+(((-1.0)*x6432))+(((-1.0)*r01*x6422*x6423))+((r00*x6431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6433=(r00*sj5);
IkReal x6434=((5000000.0)*sj1);
IkReal x6435=((5453.0)*sj2);
IkReal x6436=(cj5*r01);
IkReal x6437=((5453.0)*sj1);
CheckValue<IkReal> x6438=IKPowWithIntegerCheck(((5250000.0)+(((-1.0)*x6437))+(((-5250000.0)*(cj1*cj1)))+((cj1*cj2*x6437))),-1);
if(!x6438.valid){
continue;
}
CheckValue<IkReal> x6439=IKPowWithIntegerCheck(sj1,-1);
if(!x6439.valid){
continue;
}
if( IKabs(((x6438.value)*(((((-1.0)*x6435*x6436))+(((-1.0)*x6433*x6435))+(((12500000.0)*py*sj1))+((cj5*r11*x6434))+((r10*sj5*x6434)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6439.value)*((x6436+x6433)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6438.value)*(((((-1.0)*x6435*x6436))+(((-1.0)*x6433*x6435))+(((12500000.0)*py*sj1))+((cj5*r11*x6434))+((r10*sj5*x6434))))))+IKsqr(((x6439.value)*((x6436+x6433))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x6438.value)*(((((-1.0)*x6435*x6436))+(((-1.0)*x6433*x6435))+(((12500000.0)*py*sj1))+((cj5*r11*x6434))+((r10*sj5*x6434))))), ((x6439.value)*((x6436+x6433))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6440=IKcos(j0);
IkReal x6441=IKsin(j0);
IkReal x6442=((1.0)*cj5);
IkReal x6443=((0.4)*sj5);
IkReal x6444=((1.0)*sj5);
IkReal x6445=(cj1*cj2);
IkReal x6446=((0.4)*cj5);
IkReal x6447=((0.00043624)*x6440);
IkReal x6448=((0.00043624)*x6441);
IkReal x6449=(sj1*x6440);
IkReal x6450=(sj1*x6441);
evalcond[0]=((((-1.0)*r01*x6442))+x6449+(((-1.0)*r00*x6444)));
evalcond[1]=(x6450+(((-1.0)*r11*x6442))+(((-1.0)*r10*x6444)));
evalcond[2]=((((-1.0)*r01*x6446))+((x6445*x6447))+(((0.42)*x6449))+(((-1.0)*x6447))+(((-1.0)*px))+(((-1.0)*sj2*x6448))+(((-1.0)*r00*x6443)));
evalcond[3]=(((x6445*x6448))+(((-1.0)*x6448))+(((-1.0)*py))+(((-1.0)*r11*x6446))+(((0.42)*x6450))+(((-1.0)*r10*x6443))+((sj2*x6447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6451=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6451;
j4eval[1]=IKsign(x6451);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6452=((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)));
j4eval[0]=x6452;
j4eval[1]=IKsign(x6452);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6453=cj5*cj5;
IkReal x6454=r21*r21;
IkReal x6455=(sj1*sj2);
IkReal x6456=(r21*sj5);
IkReal x6457=(cj5*r20);
IkReal x6458=(cj2*sj1);
IkReal x6459=((((-1.0)*x6453*x6454))+(r22*r22)+((x6453*(r20*r20)))+x6454+(((-2.0)*x6456*x6457)));
j4eval[0]=x6459;
j4eval[1]=IKsign(x6459);
j4eval[2]=((IKabs((((x6457*x6458))+((r22*x6455))+(((-1.0)*x6456*x6458)))))+(IKabs((((x6455*x6457))+(((-1.0)*r22*x6458))+(((-1.0)*x6455*x6456))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=1.0;
j1=0;
IkReal x6460=(cj0*cj2);
IkReal x6461=(sj0*sj2);
IkReal x6462=(r21*sj5);
IkReal x6463=(cj5*r20);
IkReal x6464=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6464;
j4eval[1]=IKsign(x6464);
j4eval[2]=((IKabs(((((-1.0)*r22*x6460))+((r22*x6461)))))+(IKabs((((x6461*x6462))+((x6460*x6463))+(((-1.0)*x6460*x6462))+(((-1.0)*x6461*x6463))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=1.0;
j1=0;
IkReal x6465=((1.0)*cj5);
IkReal x6466=(cj0*sj2);
IkReal x6467=(cj2*sj0);
IkReal x6468=(r21*sj5);
IkReal x6469=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6465)));
j4eval[0]=x6469;
j4eval[1]=IKsign(x6469);
j4eval[2]=((IKabs((((x6467*x6468))+((x6466*x6468))+(((-1.0)*r20*x6465*x6467))+(((-1.0)*r20*x6465*x6466)))))+(IKabs((((r22*x6466))+((r22*x6467))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=1.0;
j1=0;
IkReal x6470=cj5*cj5;
IkReal x6471=(cj0*sj2);
IkReal x6472=(cj2*sj0);
IkReal x6473=(r21*sj5);
IkReal x6474=(r11*r21);
IkReal x6475=((1.0)*cj5*r20);
IkReal x6476=((((-1.0)*x6470*x6474))+(((-1.0)*cj5*r10*x6473))+x6474+(((-1.0)*r11*sj5*x6475))+((r12*r22))+((r10*r20*x6470)));
j4eval[0]=x6476;
j4eval[1]=IKsign(x6476);
j4eval[2]=((IKabs((((x6471*x6473))+(((-1.0)*x6472*x6475))+((x6472*x6473))+(((-1.0)*x6471*x6475)))))+(IKabs((((r22*x6472))+((r22*x6471))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6477=cj5*cj5;
IkReal x6478=(cj0*sj2);
IkReal x6479=(cj2*sj0);
IkReal x6480=(r21*sj5);
IkReal x6481=(r11*r21);
IkReal x6482=((1.0)*cj5*r20);
CheckValue<IkReal> x6483=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6477*x6481))+x6481+((r12*r22))+(((-1.0)*r11*sj5*x6482))+((r10*r20*x6477))+(((-1.0)*cj5*r10*x6480)))),-1);
if(!x6483.valid){
continue;
}
CheckValue<IkReal> x6484 = IKatan2WithCheck(IkReal((((r22*x6479))+((r22*x6478)))),IkReal(((((-1.0)*x6478*x6482))+((x6479*x6480))+(((-1.0)*x6479*x6482))+((x6478*x6480)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6483.value)))+(x6484.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6485=IKsin(j4);
IkReal x6486=IKcos(j4);
IkReal x6487=(cj2*sj0);
IkReal x6488=(cj0*sj2);
IkReal x6489=((1.0)*sj5);
IkReal x6490=(cj0*cj2);
IkReal x6491=(cj5*r10);
IkReal x6492=(sj0*sj2);
IkReal x6493=(cj5*x6485);
IkReal x6494=((1.0)*x6485);
IkReal x6495=(cj5*x6486);
IkReal x6496=(x6488+x6487);
evalcond[0]=((((-1.0)*r21*x6485*x6489))+((r20*x6493))+((r22*x6486)));
evalcond[1]=((((-1.0)*r22*x6494))+(((-1.0)*r21*x6486*x6489))+((r20*x6495)));
evalcond[2]=(((r00*x6493))+((r02*x6486))+x6496+(((-1.0)*r01*x6485*x6489)));
evalcond[3]=((((-1.0)*x6490))+(((-1.0)*r11*x6485*x6489))+((r12*x6486))+x6492+((x6485*x6491)));
evalcond[4]=((((-1.0)*r12*x6494))+x6496+(((-1.0)*r11*x6486*x6489))+((x6486*x6491)));
evalcond[5]=(((r00*x6495))+(((-1.0)*x6492))+(((-1.0)*r02*x6494))+x6490+(((-1.0)*r01*x6486*x6489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6497=((1.0)*cj5);
IkReal x6498=(cj0*sj2);
IkReal x6499=(cj2*sj0);
IkReal x6500=(r21*sj5);
CheckValue<IkReal> x6501=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6497)))),-1);
if(!x6501.valid){
continue;
}
CheckValue<IkReal> x6502 = IKatan2WithCheck(IkReal((((r22*x6499))+((r22*x6498)))),IkReal((((x6498*x6500))+(((-1.0)*r20*x6497*x6499))+(((-1.0)*r20*x6497*x6498))+((x6499*x6500)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6501.value)))+(x6502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6503=IKsin(j4);
IkReal x6504=IKcos(j4);
IkReal x6505=(cj2*sj0);
IkReal x6506=(cj0*sj2);
IkReal x6507=((1.0)*sj5);
IkReal x6508=(cj0*cj2);
IkReal x6509=(cj5*r10);
IkReal x6510=(sj0*sj2);
IkReal x6511=(cj5*x6503);
IkReal x6512=((1.0)*x6503);
IkReal x6513=(cj5*x6504);
IkReal x6514=(x6506+x6505);
evalcond[0]=(((r20*x6511))+((r22*x6504))+(((-1.0)*r21*x6503*x6507)));
evalcond[1]=((((-1.0)*r22*x6512))+((r20*x6513))+(((-1.0)*r21*x6504*x6507)));
evalcond[2]=(((r02*x6504))+((r00*x6511))+(((-1.0)*r01*x6503*x6507))+x6514);
evalcond[3]=(((r12*x6504))+(((-1.0)*r11*x6503*x6507))+(((-1.0)*x6508))+x6510+((x6503*x6509)));
evalcond[4]=((((-1.0)*r11*x6504*x6507))+x6514+((x6504*x6509))+(((-1.0)*r12*x6512)));
evalcond[5]=((((-1.0)*r02*x6512))+((r00*x6513))+x6508+(((-1.0)*r01*x6504*x6507))+(((-1.0)*x6510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6515=(cj0*cj2);
IkReal x6516=(sj0*sj2);
IkReal x6517=(r21*sj5);
IkReal x6518=(cj5*r20);
CheckValue<IkReal> x6519=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6519.valid){
continue;
}
CheckValue<IkReal> x6520 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6515))+((r22*x6516)))),IkReal((((x6515*x6518))+(((-1.0)*x6515*x6517))+(((-1.0)*x6516*x6518))+((x6516*x6517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6519.value)))+(x6520.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6521=IKsin(j4);
IkReal x6522=IKcos(j4);
IkReal x6523=(cj2*sj0);
IkReal x6524=(cj0*sj2);
IkReal x6525=((1.0)*sj5);
IkReal x6526=(cj0*cj2);
IkReal x6527=(cj5*r10);
IkReal x6528=(sj0*sj2);
IkReal x6529=(cj5*x6521);
IkReal x6530=((1.0)*x6521);
IkReal x6531=(cj5*x6522);
IkReal x6532=(x6523+x6524);
evalcond[0]=(((r20*x6529))+((r22*x6522))+(((-1.0)*r21*x6521*x6525)));
evalcond[1]=((((-1.0)*r21*x6522*x6525))+(((-1.0)*r22*x6530))+((r20*x6531)));
evalcond[2]=(x6532+((r02*x6522))+(((-1.0)*r01*x6521*x6525))+((r00*x6529)));
evalcond[3]=((((-1.0)*r11*x6521*x6525))+((x6521*x6527))+x6528+((r12*x6522))+(((-1.0)*x6526)));
evalcond[4]=((((-1.0)*r12*x6530))+x6532+((x6522*x6527))+(((-1.0)*r11*x6522*x6525)));
evalcond[5]=((((-1.0)*r02*x6530))+(((-1.0)*r01*x6522*x6525))+x6526+(((-1.0)*x6528))+((r00*x6531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x6533=((1.0)*r22);
IkReal x6534=(cj0*cj2);
IkReal x6535=(sj0*sj2);
IkReal x6536=(cj5*r20);
IkReal x6537=((1.0)*r21*sj5);
IkReal x6538=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6538;
j4eval[1]=IKsign(x6538);
j4eval[2]=((IKabs(((((-1.0)*x6533*x6535))+(((-1.0)*x6533*x6534)))))+(IKabs(((((-1.0)*x6535*x6537))+(((-1.0)*x6534*x6537))+((x6535*x6536))+((x6534*x6536))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x6539=((1.0)*cj5);
IkReal x6540=(r21*sj5);
IkReal x6541=(cj2*sj0);
IkReal x6542=(cj0*sj2);
IkReal x6543=((((-1.0)*r11*x6539))+(((-1.0)*r10*sj5)));
j4eval[0]=x6543;
j4eval[1]=IKsign(x6543);
j4eval[2]=((IKabs((((x6540*x6541))+(((-1.0)*r20*x6539*x6541))+(((-1.0)*x6540*x6542))+((cj5*r20*x6542)))))+(IKabs(((((-1.0)*r22*x6542))+((r22*x6541))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x6544=cj5*cj5;
IkReal x6545=(cj0*sj2);
IkReal x6546=((1.0)*sj5);
IkReal x6547=(cj5*r20);
IkReal x6548=(cj2*sj0);
IkReal x6549=(r11*r21);
IkReal x6550=(((r12*r22))+x6549+((r10*r20*x6544))+(((-1.0)*x6544*x6549))+(((-1.0)*r11*x6546*x6547))+(((-1.0)*cj5*r10*r21*x6546)));
j4eval[0]=x6550;
j4eval[1]=IKsign(x6550);
j4eval[2]=((IKabs(((((-1.0)*r22*x6548))+((r22*x6545)))))+(IKabs(((((-1.0)*r21*x6546*x6548))+((r21*sj5*x6545))+(((-1.0)*x6545*x6547))+((x6547*x6548))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6551=cj5*cj5;
IkReal x6552=(cj0*sj2);
IkReal x6553=((1.0)*sj5);
IkReal x6554=(cj5*r20);
IkReal x6555=(cj2*sj0);
IkReal x6556=(r11*r21);
CheckValue<IkReal> x6557 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6555))+((r22*x6552)))),IkReal((((r21*sj5*x6552))+(((-1.0)*r21*x6553*x6555))+(((-1.0)*x6552*x6554))+((x6554*x6555)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6557.valid){
continue;
}
CheckValue<IkReal> x6558=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6551*x6556))+(((-1.0)*r11*x6553*x6554))+((r12*r22))+x6556+((r10*r20*x6551))+(((-1.0)*cj5*r10*r21*x6553)))),-1);
if(!x6558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6557.value)+(((1.5707963267949)*(x6558.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6559=IKsin(j4);
IkReal x6560=IKcos(j4);
IkReal x6561=((1.0)*sj5);
IkReal x6562=((1.0)*cj0);
IkReal x6563=(cj5*r10);
IkReal x6564=((1.0)*sj0);
IkReal x6565=(cj2*x6562);
IkReal x6566=(sj2*x6564);
IkReal x6567=(cj5*x6559);
IkReal x6568=((1.0)*x6559);
IkReal x6569=(cj5*x6560);
IkReal x6570=(x6565+x6566);
evalcond[0]=(((r22*x6560))+(((-1.0)*r21*x6559*x6561))+((r20*x6567)));
evalcond[1]=((((-1.0)*r22*x6568))+((r20*x6569))+(((-1.0)*r21*x6560*x6561)));
evalcond[2]=(((r00*x6567))+((cj2*sj0))+(((-1.0)*sj2*x6562))+((r02*x6560))+(((-1.0)*r01*x6559*x6561)));
evalcond[3]=(((r12*x6560))+(((-1.0)*r11*x6559*x6561))+(((-1.0)*x6570))+((x6559*x6563)));
evalcond[4]=(((x6560*x6563))+(((-1.0)*cj2*x6564))+(((-1.0)*r11*x6560*x6561))+((cj0*sj2))+(((-1.0)*r12*x6568)));
evalcond[5]=(((r00*x6569))+(((-1.0)*r01*x6560*x6561))+(((-1.0)*x6570))+(((-1.0)*r02*x6568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6571=((1.0)*cj5);
IkReal x6572=(r21*sj5);
IkReal x6573=(cj2*sj0);
IkReal x6574=(cj0*sj2);
CheckValue<IkReal> x6575=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6571)))),-1);
if(!x6575.valid){
continue;
}
CheckValue<IkReal> x6576 = IKatan2WithCheck(IkReal((((r22*x6573))+(((-1.0)*r22*x6574)))),IkReal((((cj5*r20*x6574))+(((-1.0)*x6572*x6574))+((x6572*x6573))+(((-1.0)*r20*x6571*x6573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6575.value)))+(x6576.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6577=IKsin(j4);
IkReal x6578=IKcos(j4);
IkReal x6579=((1.0)*sj5);
IkReal x6580=((1.0)*cj0);
IkReal x6581=(cj5*r10);
IkReal x6582=((1.0)*sj0);
IkReal x6583=(cj2*x6580);
IkReal x6584=(sj2*x6582);
IkReal x6585=(cj5*x6577);
IkReal x6586=((1.0)*x6577);
IkReal x6587=(cj5*x6578);
IkReal x6588=(x6583+x6584);
evalcond[0]=(((r22*x6578))+(((-1.0)*r21*x6577*x6579))+((r20*x6585)));
evalcond[1]=((((-1.0)*r21*x6578*x6579))+(((-1.0)*r22*x6586))+((r20*x6587)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*sj2*x6580))+((r00*x6585))+(((-1.0)*r01*x6577*x6579))+((r02*x6578)));
evalcond[3]=(((r12*x6578))+((x6577*x6581))+(((-1.0)*r11*x6577*x6579))+(((-1.0)*x6588)));
evalcond[4]=((((-1.0)*cj2*x6582))+(((-1.0)*r12*x6586))+((x6578*x6581))+(((-1.0)*r11*x6578*x6579))+((cj0*sj2)));
evalcond[5]=((((-1.0)*r02*x6586))+((r00*x6587))+(((-1.0)*x6588))+(((-1.0)*r01*x6578*x6579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6589=((1.0)*r22);
IkReal x6590=(cj0*cj2);
IkReal x6591=(sj0*sj2);
IkReal x6592=(cj5*r20);
IkReal x6593=((1.0)*r21*sj5);
CheckValue<IkReal> x6594 = IKatan2WithCheck(IkReal(((((-1.0)*x6589*x6591))+(((-1.0)*x6589*x6590)))),IkReal(((((-1.0)*x6590*x6593))+(((-1.0)*x6591*x6593))+((x6591*x6592))+((x6590*x6592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6594.valid){
continue;
}
CheckValue<IkReal> x6595=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6594.value)+(((1.5707963267949)*(x6595.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6596=IKsin(j4);
IkReal x6597=IKcos(j4);
IkReal x6598=((1.0)*sj5);
IkReal x6599=((1.0)*cj0);
IkReal x6600=(cj5*r10);
IkReal x6601=((1.0)*sj0);
IkReal x6602=(cj2*x6599);
IkReal x6603=(sj2*x6601);
IkReal x6604=(cj5*x6596);
IkReal x6605=((1.0)*x6596);
IkReal x6606=(cj5*x6597);
IkReal x6607=(x6602+x6603);
evalcond[0]=(((r22*x6597))+(((-1.0)*r21*x6596*x6598))+((r20*x6604)));
evalcond[1]=((((-1.0)*r21*x6597*x6598))+(((-1.0)*r22*x6605))+((r20*x6606)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*sj2*x6599))+((r02*x6597))+((r00*x6604))+(((-1.0)*r01*x6596*x6598)));
evalcond[3]=(((r12*x6597))+(((-1.0)*r11*x6596*x6598))+(((-1.0)*x6607))+((x6596*x6600)));
evalcond[4]=(((x6597*x6600))+(((-1.0)*r11*x6597*x6598))+(((-1.0)*r12*x6605))+(((-1.0)*cj2*x6601))+((cj0*sj2)));
evalcond[5]=(((r00*x6606))+(((-1.0)*r02*x6605))+(((-1.0)*r01*x6597*x6598))+(((-1.0)*x6607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6608=((-1.0)*r10);
IkReal x6610 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6610)==0){
continue;
}
IkReal x6609=pow(x6610,-0.5);
CheckValue<IkReal> x6611 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6608),IKFAST_ATAN2_MAGTHRESH);
if(!x6611.valid){
continue;
}
IkReal gconst30=((-1.0)*(x6611.value));
IkReal gconst31=(r11*x6609);
IkReal gconst32=(x6608*x6609);
CheckValue<IkReal> x6612 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6612.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6612.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6613=(gconst31*r21);
IkReal x6614=(sj1*sj2);
IkReal x6615=(gconst32*r20);
IkReal x6616=(cj2*sj1);
CheckValue<IkReal> x6617 = IKatan2WithCheck(IkReal(((((-1.0)*x6613*x6614))+(((-1.0)*r22*x6616))+((x6614*x6615)))),IkReal(((((-1.0)*x6613*x6616))+((r22*x6614))+((x6615*x6616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6617.valid){
continue;
}
CheckValue<IkReal> x6618=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x6613*x6613)+(((-2.0)*x6613*x6615))+(x6615*x6615))),-1);
if(!x6618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6617.value)+(((1.5707963267949)*(x6618.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6619=IKsin(j4);
IkReal x6620=IKcos(j4);
IkReal x6621=(cj1*cj2);
IkReal x6622=((1.0)*sj1);
IkReal x6623=(gconst31*r01);
IkReal x6624=(cj0*sj2);
IkReal x6625=(sj0*sj2);
IkReal x6626=(gconst31*r11);
IkReal x6627=((1.0)*gconst31*r21);
IkReal x6628=(gconst32*x6619);
IkReal x6629=(gconst32*x6620);
IkReal x6630=((1.0)*x6619);
IkReal x6631=((1.0)*x6620);
evalcond[0]=((((-1.0)*x6619*x6627))+(((-1.0)*sj2*x6622))+((r22*x6620))+((r20*x6628)));
evalcond[1]=((((-1.0)*r22*x6630))+(((-1.0)*x6620*x6627))+(((-1.0)*cj2*x6622))+((r20*x6629)));
evalcond[2]=(((r02*x6620))+((cj2*sj0))+((r00*x6628))+((cj1*x6624))+(((-1.0)*x6623*x6630)));
evalcond[3]=(((cj1*x6625))+((r10*x6628))+((r12*x6620))+(((-1.0)*cj0*cj2))+(((-1.0)*x6626*x6630)));
evalcond[4]=(x6624+((r10*x6629))+((sj0*x6621))+(((-1.0)*x6626*x6631))+(((-1.0)*r12*x6630)));
evalcond[5]=((((-1.0)*x6625))+((r00*x6629))+((cj0*x6621))+(((-1.0)*r02*x6630))+(((-1.0)*x6623*x6631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6632=((-1.0)*r11);
IkReal x6634 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6634)==0){
continue;
}
IkReal x6633=pow(x6634,-0.5);
CheckValue<IkReal> x6635 = IKatan2WithCheck(IkReal(x6632),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6635.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x6635.value))));
IkReal gconst34=(x6632*x6633);
IkReal gconst35=((1.0)*r10*x6633);
CheckValue<IkReal> x6636 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6636.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6636.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6637=(cj2*sj1);
IkReal x6638=(gconst35*r20);
IkReal x6639=(sj1*sj2);
IkReal x6640=((1.0)*gconst34*r21);
CheckValue<IkReal> x6641=IKPowWithIntegerCheck(IKsign(((((gconst34*gconst34)*(r21*r21)))+(r22*r22)+(((-2.0)*gconst34*r21*x6638))+(x6638*x6638))),-1);
if(!x6641.valid){
continue;
}
CheckValue<IkReal> x6642 = IKatan2WithCheck(IkReal(((((-1.0)*x6639*x6640))+(((-1.0)*r22*x6637))+((x6638*x6639)))),IkReal(((((-1.0)*x6637*x6640))+((x6637*x6638))+((r22*x6639)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6641.value)))+(x6642.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6643=IKsin(j4);
IkReal x6644=IKcos(j4);
IkReal x6645=(cj1*cj2);
IkReal x6646=((1.0)*gconst34);
IkReal x6647=(sj0*sj2);
IkReal x6648=((1.0)*cj2);
IkReal x6649=(cj0*sj2);
IkReal x6650=(gconst35*x6643);
IkReal x6651=((1.0)*x6643);
IkReal x6652=(gconst35*x6644);
evalcond[0]=(((r20*x6650))+(((-1.0)*sj1*sj2))+((r22*x6644))+(((-1.0)*r21*x6643*x6646)));
evalcond[1]=((((-1.0)*r22*x6651))+((r20*x6652))+(((-1.0)*sj1*x6648))+(((-1.0)*r21*x6644*x6646)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r01*x6643*x6646))+((cj1*x6649))+((r00*x6650))+((r02*x6644)));
evalcond[3]=(((cj1*x6647))+(((-1.0)*r11*x6643*x6646))+((r10*x6650))+((r12*x6644))+(((-1.0)*cj0*x6648)));
evalcond[4]=(x6649+(((-1.0)*r12*x6651))+((r10*x6652))+(((-1.0)*r11*x6644*x6646))+((sj0*x6645)));
evalcond[5]=((((-1.0)*x6647))+((r00*x6652))+(((-1.0)*r01*x6644*x6646))+((cj0*x6645))+(((-1.0)*r02*x6651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6654 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6654)==0){
continue;
}
IkReal x6653=pow(x6654,-0.5);
CheckValue<IkReal> x6655 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6655.valid){
continue;
}
IkReal gconst36=((-1.0)*(x6655.value));
IkReal gconst37=((-1.0)*r01*x6653);
IkReal gconst38=(r00*x6653);
CheckValue<IkReal> x6656 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6656.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6656.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6657=(r22*sj1);
IkReal x6658=(gconst38*r20);
IkReal x6659=(gconst37*r21);
IkReal x6660=(cj2*sj1);
IkReal x6661=(sj1*sj2);
CheckValue<IkReal> x6662=IKPowWithIntegerCheck(IKsign(((x6659*x6659)+(r22*r22)+(((-2.0)*x6658*x6659))+(x6658*x6658))),-1);
if(!x6662.valid){
continue;
}
CheckValue<IkReal> x6663 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x6657))+((x6658*x6661))+(((-1.0)*x6659*x6661)))),IkReal((((x6658*x6660))+(((-1.0)*x6659*x6660))+((sj2*x6657)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6662.value)))+(x6663.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6664=IKsin(j4);
IkReal x6665=IKcos(j4);
IkReal x6666=(gconst38*r10);
IkReal x6667=(cj2*sj0);
IkReal x6668=((1.0)*sj1);
IkReal x6669=(cj0*cj2);
IkReal x6670=(cj0*sj2);
IkReal x6671=(sj0*sj2);
IkReal x6672=(gconst38*x6665);
IkReal x6673=(gconst38*x6664);
IkReal x6674=((1.0)*x6664);
IkReal x6675=(gconst37*x6674);
IkReal x6676=((1.0)*gconst37*x6665);
evalcond[0]=(((r20*x6673))+(((-1.0)*r21*x6675))+(((-1.0)*sj2*x6668))+((r22*x6665)));
evalcond[1]=(((r20*x6672))+(((-1.0)*r21*x6676))+(((-1.0)*cj2*x6668))+(((-1.0)*r22*x6674)));
evalcond[2]=(x6667+((r02*x6665))+(((-1.0)*r01*x6675))+((r00*x6673))+((cj1*x6670)));
evalcond[3]=(((x6664*x6666))+((r12*x6665))+(((-1.0)*r11*x6675))+(((-1.0)*x6669))+((cj1*x6671)));
evalcond[4]=(x6670+(((-1.0)*r12*x6674))+(((-1.0)*r11*x6676))+((cj1*x6667))+((x6665*x6666)));
evalcond[5]=((((-1.0)*r02*x6674))+(((-1.0)*r01*x6676))+(((-1.0)*x6671))+((cj1*x6669))+((r00*x6672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6678 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6678)==0){
continue;
}
IkReal x6677=pow(x6678,-0.5);
CheckValue<IkReal> x6679 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6679.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x6679.value))));
IkReal gconst40=((1.0)*r01*x6677);
IkReal gconst41=((-1.0)*r00*x6677);
CheckValue<IkReal> x6680 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6680.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6680.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6681=(r22*sj1);
IkReal x6682=(cj2*sj1);
IkReal x6683=(gconst41*r20);
IkReal x6684=(sj1*sj2);
IkReal x6685=((1.0)*gconst40*r21);
CheckValue<IkReal> x6686 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x6681))+((x6683*x6684))+(((-1.0)*x6684*x6685)))),IkReal((((sj2*x6681))+((x6682*x6683))+(((-1.0)*x6682*x6685)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6686.valid){
continue;
}
CheckValue<IkReal> x6687=IKPowWithIntegerCheck(IKsign(((((gconst40*gconst40)*(r21*r21)))+(r22*r22)+(x6683*x6683)+(((-2.0)*gconst40*r21*x6683)))),-1);
if(!x6687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6686.value)+(((1.5707963267949)*(x6687.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6688=IKsin(j4);
IkReal x6689=IKcos(j4);
IkReal x6690=((1.0)*gconst40);
IkReal x6691=(cj1*cj2);
IkReal x6692=((1.0)*sj1);
IkReal x6693=(cj0*sj2);
IkReal x6694=(sj0*sj2);
IkReal x6695=(gconst41*x6688);
IkReal x6696=((1.0)*x6688);
IkReal x6697=(gconst41*x6689);
evalcond[0]=(((r22*x6689))+(((-1.0)*sj2*x6692))+((r20*x6695))+(((-1.0)*r21*x6688*x6690)));
evalcond[1]=((((-1.0)*cj2*x6692))+(((-1.0)*r21*x6689*x6690))+((r20*x6697))+(((-1.0)*r22*x6696)));
evalcond[2]=(((cj2*sj0))+((r02*x6689))+((cj1*x6693))+((r00*x6695))+(((-1.0)*r01*x6688*x6690)));
evalcond[3]=(((r12*x6689))+(((-1.0)*r11*x6688*x6690))+((r10*x6695))+((cj1*x6694))+(((-1.0)*cj0*cj2)));
evalcond[4]=(x6693+((sj0*x6691))+((r10*x6697))+(((-1.0)*r11*x6689*x6690))+(((-1.0)*r12*x6696)));
evalcond[5]=((((-1.0)*x6694))+((cj0*x6691))+(((-1.0)*r02*x6696))+(((-1.0)*r01*x6689*x6690))+((r00*x6697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6698=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6698);
rxp1_1=(px*r21);
rxp1_2=(r11*x6698);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=IKsign(r02);
j4eval[2]=((IKabs((sj0*sj2)))+(IKabs((cj2*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6699=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6699);
rxp1_1=(px*r21);
rxp1_2=(r11*x6699);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x6700=(cj1*sj0);
IkReal x6701=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x6701;
j4eval[1]=((IKabs((sj2*x6700)))+(IKabs((cj2*x6700))));
j4eval[2]=IKsign(x6701);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6702=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6702);
rxp1_1=(px*r21);
rxp1_2=(r11*x6702);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6703=((-1.0)*sj0);
CheckValue<IkReal> x6704=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x6704.valid){
continue;
}
CheckValue<IkReal> x6705=IKPowWithIntegerCheck(r02,-1);
if(!x6705.valid){
continue;
}
if( IKabs((cj1*sj2*x6703*(x6704.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj2*x6703*(x6705.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*sj2*x6703*(x6704.value)))+IKsqr((cj2*x6703*(x6705.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj1*sj2*x6703*(x6704.value)), (cj2*x6703*(x6705.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6706=IKsin(j4);
IkReal x6707=IKcos(j4);
IkReal x6708=(cj2*sj0);
IkReal x6709=(sj0*sj2);
IkReal x6710=((1.0)*x6706);
IkReal x6711=(cj5*x6707);
IkReal x6712=(cj5*x6706);
IkReal x6713=((1.0)*sj5*x6707);
evalcond[0]=(x6708+((r02*x6707)));
evalcond[1]=((((-1.0)*r02*x6710))+(((-1.0)*x6709)));
evalcond[2]=((((-1.0)*r21*sj5*x6710))+((r20*x6712)));
evalcond[3]=(((r20*x6711))+(((-1.0)*r21*x6713)));
evalcond[4]=(((cj1*x6709))+(((-1.0)*r11*sj5*x6710))+((r10*x6712)));
evalcond[5]=(((cj1*x6708))+(((-1.0)*r11*x6713))+((r10*x6711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6714=((-1.0)*cj1*sj0);
CheckValue<IkReal> x6715=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x6715.valid){
continue;
}
CheckValue<IkReal> x6716 = IKatan2WithCheck(IkReal((sj2*x6714)),IkReal((cj2*x6714)),IKFAST_ATAN2_MAGTHRESH);
if(!x6716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6715.value)))+(x6716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6717=IKsin(j4);
IkReal x6718=IKcos(j4);
IkReal x6719=(cj2*sj0);
IkReal x6720=(sj0*sj2);
IkReal x6721=((1.0)*x6717);
IkReal x6722=(cj5*x6718);
IkReal x6723=(cj5*x6717);
IkReal x6724=((1.0)*sj5*x6718);
evalcond[0]=(x6719+((r02*x6718)));
evalcond[1]=((((-1.0)*x6720))+(((-1.0)*r02*x6721)));
evalcond[2]=(((r20*x6723))+(((-1.0)*r21*sj5*x6721)));
evalcond[3]=(((r20*x6722))+(((-1.0)*r21*x6724)));
evalcond[4]=((((-1.0)*r11*sj5*x6721))+((cj1*x6720))+((r10*x6723)));
evalcond[5]=(((cj1*x6719))+(((-1.0)*r11*x6724))+((r10*x6722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6725=((-1.0)*sj0);
CheckValue<IkReal> x6726=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x6726.valid){
continue;
}
CheckValue<IkReal> x6727 = IKatan2WithCheck(IkReal((sj2*x6725)),IkReal((cj2*x6725)),IKFAST_ATAN2_MAGTHRESH);
if(!x6727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6726.value)))+(x6727.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6728=IKsin(j4);
IkReal x6729=IKcos(j4);
IkReal x6730=(cj2*sj0);
IkReal x6731=(sj0*sj2);
IkReal x6732=((1.0)*x6728);
IkReal x6733=(cj5*x6729);
IkReal x6734=(cj5*x6728);
IkReal x6735=((1.0)*sj5*x6729);
evalcond[0]=(x6730+((r02*x6729)));
evalcond[1]=((((-1.0)*x6731))+(((-1.0)*r02*x6732)));
evalcond[2]=((((-1.0)*r21*sj5*x6732))+((r20*x6734)));
evalcond[3]=(((r20*x6733))+(((-1.0)*r21*x6735)));
evalcond[4]=(((cj1*x6731))+(((-1.0)*r11*sj5*x6732))+((r10*x6734)));
evalcond[5]=((((-1.0)*r11*x6735))+((cj1*x6730))+((r10*x6733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6736=cj5*cj5;
IkReal x6737=r21*r21;
IkReal x6738=(sj1*sj2);
IkReal x6739=(r21*sj5);
IkReal x6740=(cj5*r20);
IkReal x6741=(cj2*sj1);
CheckValue<IkReal> x6742=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6739*x6740))+(r22*r22)+((x6736*(r20*r20)))+x6737+(((-1.0)*x6736*x6737)))),-1);
if(!x6742.valid){
continue;
}
CheckValue<IkReal> x6743 = IKatan2WithCheck(IkReal((((x6738*x6740))+(((-1.0)*r22*x6741))+(((-1.0)*x6738*x6739)))),IkReal((((r22*x6738))+(((-1.0)*x6739*x6741))+((x6740*x6741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6742.value)))+(x6743.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6744=IKsin(j4);
IkReal x6745=IKcos(j4);
IkReal x6746=((1.0)*sj5);
IkReal x6747=(cj1*cj2);
IkReal x6748=(cj5*r10);
IkReal x6749=((1.0)*sj1);
IkReal x6750=(cj0*sj2);
IkReal x6751=(cj5*r00);
IkReal x6752=(cj5*r20);
IkReal x6753=(sj0*sj2);
IkReal x6754=((1.0)*x6744);
evalcond[0]=((((-1.0)*sj2*x6749))+(((-1.0)*r21*x6744*x6746))+((x6744*x6752))+((r22*x6745)));
evalcond[1]=((((-1.0)*r21*x6745*x6746))+(((-1.0)*r22*x6754))+(((-1.0)*cj2*x6749))+((x6745*x6752)));
evalcond[2]=(((r02*x6745))+((cj2*sj0))+((x6744*x6751))+((cj1*x6750))+(((-1.0)*r01*x6744*x6746)));
evalcond[3]=((((-1.0)*r11*x6744*x6746))+((x6744*x6748))+((r12*x6745))+((cj1*x6753))+(((-1.0)*cj0*cj2)));
evalcond[4]=(x6750+(((-1.0)*r11*x6745*x6746))+((sj0*x6747))+((x6745*x6748))+(((-1.0)*r12*x6754)));
evalcond[5]=(((cj0*x6747))+(((-1.0)*x6753))+((x6745*x6751))+(((-1.0)*r02*x6754))+(((-1.0)*r01*x6745*x6746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6755=((1.0)*cj5);
IkReal x6756=(r21*sj5);
IkReal x6757=(cj2*sj0);
IkReal x6758=(sj1*sj2);
IkReal x6759=(cj0*cj1*sj2);
CheckValue<IkReal> x6760 = IKatan2WithCheck(IkReal((((r22*x6759))+((r22*x6757))+((r02*x6758)))),IkReal((((x6756*x6757))+((x6756*x6759))+((r01*sj5*x6758))+(((-1.0)*r00*x6755*x6758))+(((-1.0)*r20*x6755*x6759))+(((-1.0)*r20*x6755*x6757)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6760.valid){
continue;
}
CheckValue<IkReal> x6761=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6755)))),-1);
if(!x6761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6760.value)+(((1.5707963267949)*(x6761.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6762=IKsin(j4);
IkReal x6763=IKcos(j4);
IkReal x6764=((1.0)*sj5);
IkReal x6765=(cj1*cj2);
IkReal x6766=(cj5*r10);
IkReal x6767=((1.0)*sj1);
IkReal x6768=(cj0*sj2);
IkReal x6769=(cj5*r00);
IkReal x6770=(cj5*r20);
IkReal x6771=(sj0*sj2);
IkReal x6772=((1.0)*x6762);
evalcond[0]=(((r22*x6763))+(((-1.0)*sj2*x6767))+(((-1.0)*r21*x6762*x6764))+((x6762*x6770)));
evalcond[1]=(((x6763*x6770))+(((-1.0)*r22*x6772))+(((-1.0)*cj2*x6767))+(((-1.0)*r21*x6763*x6764)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r01*x6762*x6764))+((cj1*x6768))+((r02*x6763))+((x6762*x6769)));
evalcond[3]=(((r12*x6763))+(((-1.0)*r11*x6762*x6764))+((cj1*x6771))+(((-1.0)*cj0*cj2))+((x6762*x6766)));
evalcond[4]=(x6768+(((-1.0)*r12*x6772))+(((-1.0)*r11*x6763*x6764))+((sj0*x6765))+((x6763*x6766)));
evalcond[5]=(((cj0*x6765))+(((-1.0)*x6771))+(((-1.0)*r02*x6772))+(((-1.0)*r01*x6763*x6764))+((x6763*x6769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6773=(sj1*sj2);
IkReal x6774=((1.0)*cj5);
IkReal x6775=(cj0*cj2);
IkReal x6776=(r21*sj5);
IkReal x6777=(cj1*sj0*sj2);
CheckValue<IkReal> x6778=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6778.valid){
continue;
}
CheckValue<IkReal> x6779 = IKatan2WithCheck(IkReal((((r12*x6773))+((r22*x6777))+(((-1.0)*r22*x6775)))),IkReal((((x6776*x6777))+(((-1.0)*x6775*x6776))+((r11*sj5*x6773))+(((-1.0)*r10*x6773*x6774))+(((-1.0)*r20*x6774*x6777))+((cj5*r20*x6775)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6778.value)))+(x6779.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6780=IKsin(j4);
IkReal x6781=IKcos(j4);
IkReal x6782=((1.0)*sj5);
IkReal x6783=(cj1*cj2);
IkReal x6784=(cj5*r10);
IkReal x6785=((1.0)*sj1);
IkReal x6786=(cj0*sj2);
IkReal x6787=(cj5*r00);
IkReal x6788=(cj5*r20);
IkReal x6789=(sj0*sj2);
IkReal x6790=((1.0)*x6780);
evalcond[0]=(((r22*x6781))+(((-1.0)*r21*x6780*x6782))+(((-1.0)*sj2*x6785))+((x6780*x6788)));
evalcond[1]=((((-1.0)*r21*x6781*x6782))+(((-1.0)*cj2*x6785))+((x6781*x6788))+(((-1.0)*r22*x6790)));
evalcond[2]=(((cj2*sj0))+((r02*x6781))+((cj1*x6786))+(((-1.0)*r01*x6780*x6782))+((x6780*x6787)));
evalcond[3]=(((r12*x6781))+((cj1*x6789))+(((-1.0)*r11*x6780*x6782))+(((-1.0)*cj0*cj2))+((x6780*x6784)));
evalcond[4]=(((x6781*x6784))+x6786+((sj0*x6783))+(((-1.0)*r12*x6790))+(((-1.0)*r11*x6781*x6782)));
evalcond[5]=(((cj0*x6783))+(((-1.0)*r01*x6781*x6782))+(((-1.0)*x6789))+((x6781*x6787))+(((-1.0)*r02*x6790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6791=cj5*cj5;
IkReal x6792=r21*r21;
IkReal x6793=(sj1*sj2);
IkReal x6794=(r21*sj5);
IkReal x6795=(cj5*r20);
IkReal x6796=(cj2*sj1);
CheckValue<IkReal> x6797=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6791*x6792))+(r22*r22)+(((-2.0)*x6794*x6795))+x6792+((x6791*(r20*r20))))),-1);
if(!x6797.valid){
continue;
}
CheckValue<IkReal> x6798 = IKatan2WithCheck(IkReal(((((-1.0)*x6793*x6794))+((x6793*x6795))+(((-1.0)*r22*x6796)))),IkReal((((r22*x6793))+(((-1.0)*x6794*x6796))+((x6795*x6796)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6797.value)))+(x6798.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6799=IKsin(j4);
IkReal x6800=IKcos(j4);
IkReal x6801=(cj5*r20);
IkReal x6802=((1.0)*sj1);
IkReal x6803=((1.0)*r21*sj5);
evalcond[0]=(((r22*x6800))+(((-1.0)*sj2*x6802))+((x6799*x6801))+(((-1.0)*x6799*x6803)));
evalcond[1]=((((-1.0)*cj2*x6802))+((x6800*x6801))+(((-1.0)*r22*x6799))+(((-1.0)*x6800*x6803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=sj1;
j0eval[1]=IKsign(sj1);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=cj2;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=cj1;
j0eval[1]=sj1;
j0eval[2]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6804=IKsin(j0);
IkReal x6805=IKcos(j0);
IkReal x6806=(cj5*r10);
IkReal x6807=(cj5*r00);
IkReal x6808=((1.0)*sj4);
IkReal x6809=(r01*sj5);
IkReal x6810=(r00*sj5);
IkReal x6811=((1.0)*cj5);
IkReal x6812=(r10*sj5);
IkReal x6813=((0.4)*cj5);
IkReal x6814=(r11*sj5);
IkReal x6815=((1.0)*cj4);
IkReal x6816=(sj2*x6805);
IkReal x6817=(sj2*x6804);
evalcond[0]=((((-1.0)*x6810))+x6805+(((-1.0)*r01*x6811)));
evalcond[1]=((((-1.0)*x6812))+x6804+(((-1.0)*r11*x6811)));
evalcond[2]=(((cj2*x6804))+((sj4*x6807))+(((-1.0)*x6808*x6809))+((cj4*r02)));
evalcond[3]=((((-1.0)*cj2*x6805))+(((-1.0)*x6808*x6814))+((sj4*x6806))+((cj4*r12)));
evalcond[4]=(((cj4*x6806))+(((-1.0)*r12*x6808))+x6816+(((-1.0)*x6814*x6815)));
evalcond[5]=((((-1.0)*x6817))+((cj4*x6807))+(((-1.0)*r02*x6808))+(((-1.0)*x6809*x6815)));
evalcond[6]=((((-0.4)*x6810))+(((0.41956376)*x6805))+(((-0.00043624)*x6817))+(((-1.0)*px))+(((-1.0)*r01*x6813)));
evalcond[7]=((((-0.4)*x6812))+(((0.41956376)*x6804))+(((0.00043624)*x6816))+(((-1.0)*py))+(((-1.0)*r11*x6813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6818=((1.0)*sj5);
IkReal x6819=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x6818))+(((-1.0)*r11*x6819)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6818))+(((-1.0)*r01*x6819)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x6818))+(((-1.0)*r11*x6819))))+IKsqr(((((-1.0)*r00*x6818))+(((-1.0)*r01*x6819))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x6818))+(((-1.0)*r11*x6819))), ((((-1.0)*r00*x6818))+(((-1.0)*r01*x6819))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6820=IKsin(j0);
IkReal x6821=IKcos(j0);
IkReal x6822=(cj5*r10);
IkReal x6823=(cj5*r00);
IkReal x6824=((1.0)*sj4);
IkReal x6825=(r01*sj5);
IkReal x6826=(r00*sj5);
IkReal x6827=((1.0)*cj5);
IkReal x6828=(r10*sj5);
IkReal x6829=((0.4)*cj5);
IkReal x6830=(r11*sj5);
IkReal x6831=((1.0)*cj4);
IkReal x6832=((1.0)*x6820);
IkReal x6833=((1.0)*x6821);
IkReal x6834=(sj2*x6821);
evalcond[0]=((((-1.0)*x6826))+(((-1.0)*r01*x6827))+(((-1.0)*x6833)));
evalcond[1]=((((-1.0)*x6828))+(((-1.0)*r11*x6827))+(((-1.0)*x6832)));
evalcond[2]=((((-1.0)*x6824*x6825))+((cj2*x6820))+((sj4*x6823))+((cj4*r02)));
evalcond[3]=((((-1.0)*cj2*x6833))+(((-1.0)*x6824*x6830))+((sj4*x6822))+((cj4*r12)));
evalcond[4]=(((cj4*x6822))+(((-1.0)*r12*x6824))+x6834+(((-1.0)*x6830*x6831)));
evalcond[5]=((((-1.0)*x6825*x6831))+(((-1.0)*r02*x6824))+(((-1.0)*sj2*x6832))+((cj4*x6823)));
evalcond[6]=((((-0.00043624)*sj2*x6820))+(((-0.42043624)*x6821))+(((-1.0)*r01*x6829))+(((-1.0)*px))+(((-0.4)*x6826)));
evalcond[7]=((((-0.42043624)*x6820))+(((-1.0)*r11*x6829))+(((-1.0)*py))+(((-0.4)*x6828))+(((0.00043624)*x6834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=1.0;
j1=0;
IkReal x6835=((68162500000.0)*cj2);
IkReal x6836=((68162500000.0)*px);
IkReal x6837=((68162500000.0)*py);
j0eval[0]=((1.0)+(((-1.0)*cj2)));
j0eval[1]=IKsign(((59470418.0)+(((-59470418.0)*cj2))));
j0eval[2]=((IKabs(((((-1.0)*sj2*x6836))+((py*x6835))+(((-1.0)*x6837)))))+(IKabs((((sj2*x6837))+((px*x6835))+(((-1.0)*x6836))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=((-1.0)+cj2);
j0eval[1]=IKsign(((-5453.0)+(((5453.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6838=((5453.0)*sj4);
IkReal x6839=(cj5*r10);
IkReal x6840=(r11*sj5);
IkReal x6841=((5453.0)*cj4*r12);
CheckValue<IkReal> x6842=IKPowWithIntegerCheck(sj2,-1);
if(!x6842.valid){
continue;
}
if( IKabs(((0.000183385292499542)*(x6842.value)*(((((-1.0)*x6838*x6839))+((x6838*x6840))+(((-1.0)*x6841))+((cj2*x6841))+((cj2*x6838*x6839))+(((-12500000.0)*cj2*px))+(((-1.0)*cj2*x6838*x6840)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x6840))+(((-2292.31615624427)*px))+((sj4*x6839))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.000183385292499542)*(x6842.value)*(((((-1.0)*x6838*x6839))+((x6838*x6840))+(((-1.0)*x6841))+((cj2*x6841))+((cj2*x6838*x6839))+(((-12500000.0)*cj2*px))+(((-1.0)*cj2*x6838*x6840))))))+IKsqr(((((-1.0)*sj4*x6840))+(((-2292.31615624427)*px))+((sj4*x6839))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.000183385292499542)*(x6842.value)*(((((-1.0)*x6838*x6839))+((x6838*x6840))+(((-1.0)*x6841))+((cj2*x6841))+((cj2*x6838*x6839))+(((-12500000.0)*cj2*px))+(((-1.0)*cj2*x6838*x6840))))), ((((-1.0)*sj4*x6840))+(((-2292.31615624427)*px))+((sj4*x6839))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6843=IKcos(j0);
IkReal x6844=IKsin(j0);
IkReal x6845=(cj5*r10);
IkReal x6846=(cj5*r00);
IkReal x6847=((1.0)*sj4);
IkReal x6848=(r01*sj5);
IkReal x6849=(r11*sj5);
IkReal x6850=((1.0)*cj4);
IkReal x6851=(sj2*x6843);
IkReal x6852=(cj2*x6844);
IkReal x6853=((0.00043624)*x6843);
IkReal x6854=(cj2*x6843);
IkReal x6855=((0.00043624)*x6844);
IkReal x6856=(sj2*x6844);
IkReal x6857=(x6851+x6852);
evalcond[0]=((((-1.0)*x6853))+(((-1.0)*sj2*x6855))+(((-1.0)*px))+((cj2*x6853)));
evalcond[1]=((((-1.0)*x6855))+(((-1.0)*py))+(((0.00043624)*x6852))+(((0.00043624)*x6851)));
evalcond[2]=(((sj4*x6846))+(((-1.0)*x6847*x6848))+x6857+((cj4*r02)));
evalcond[3]=(((sj4*x6845))+(((-1.0)*x6854))+(((-1.0)*x6847*x6849))+x6856+((cj4*r12)));
evalcond[4]=((((-1.0)*r12*x6847))+x6857+((cj4*x6845))+(((-1.0)*x6849*x6850)));
evalcond[5]=((((-1.0)*x6856))+x6854+(((-1.0)*r02*x6847))+((cj4*x6846))+(((-1.0)*x6848*x6850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6858=((5453.0)*sj4);
IkReal x6859=(cj5*r00);
IkReal x6860=(r01*sj5);
IkReal x6861=((12500000.0)*px);
IkReal x6862=((5453.0)*cj4*r02);
CheckValue<IkReal> x6863 = IKatan2WithCheck(IkReal(((((-1.0)*x6862))+(((-1.0)*x6858*x6859))+((cj2*x6862))+((sj2*x6861))+((x6858*x6860))+(((-1.0)*cj2*x6858*x6860))+((cj2*x6858*x6859)))),IkReal(((((-1.0)*cj2*x6861))+(((-1.0)*sj2*x6858*x6860))+((sj2*x6858*x6859))+((sj2*x6862)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6863.valid){
continue;
}
CheckValue<IkReal> x6864=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((5453.0)*cj2)))),-1);
if(!x6864.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6863.value)+(((1.5707963267949)*(x6864.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6865=IKcos(j0);
IkReal x6866=IKsin(j0);
IkReal x6867=(cj5*r10);
IkReal x6868=(cj5*r00);
IkReal x6869=((1.0)*sj4);
IkReal x6870=(r01*sj5);
IkReal x6871=(r11*sj5);
IkReal x6872=((1.0)*cj4);
IkReal x6873=(sj2*x6865);
IkReal x6874=(cj2*x6866);
IkReal x6875=((0.00043624)*x6865);
IkReal x6876=(cj2*x6865);
IkReal x6877=((0.00043624)*x6866);
IkReal x6878=(sj2*x6866);
IkReal x6879=(x6874+x6873);
evalcond[0]=((((-1.0)*sj2*x6877))+(((-1.0)*x6875))+((cj2*x6875))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*x6877))+(((-1.0)*py))+(((0.00043624)*x6874))+(((0.00043624)*x6873)));
evalcond[2]=(((sj4*x6868))+(((-1.0)*x6869*x6870))+x6879+((cj4*r02)));
evalcond[3]=(((sj4*x6867))+(((-1.0)*x6869*x6871))+(((-1.0)*x6876))+x6878+((cj4*r12)));
evalcond[4]=((((-1.0)*x6871*x6872))+(((-1.0)*r12*x6869))+x6879+((cj4*x6867)));
evalcond[5]=((((-1.0)*x6870*x6872))+(((-1.0)*x6878))+x6876+(((-1.0)*r02*x6869))+((cj4*x6868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6880=((68162500000.0)*py);
IkReal x6881=((68162500000.0)*px);
CheckValue<IkReal> x6882 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x6881))+((cj2*x6880))+(((-1.0)*x6880)))),IkReal((((cj2*x6881))+(((-1.0)*x6881))+((sj2*x6880)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6882.valid){
continue;
}
CheckValue<IkReal> x6883=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((-59470418.0)*cj2)))),-1);
if(!x6883.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6882.value)+(((1.5707963267949)*(x6883.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6884=IKcos(j0);
IkReal x6885=IKsin(j0);
IkReal x6886=(cj5*r10);
IkReal x6887=(cj5*r00);
IkReal x6888=((1.0)*sj4);
IkReal x6889=(r01*sj5);
IkReal x6890=(r11*sj5);
IkReal x6891=((1.0)*cj4);
IkReal x6892=(sj2*x6884);
IkReal x6893=(cj2*x6885);
IkReal x6894=((0.00043624)*x6884);
IkReal x6895=(cj2*x6884);
IkReal x6896=((0.00043624)*x6885);
IkReal x6897=(sj2*x6885);
IkReal x6898=(x6893+x6892);
evalcond[0]=(((cj2*x6894))+(((-1.0)*px))+(((-1.0)*x6894))+(((-1.0)*sj2*x6896)));
evalcond[1]=((((0.00043624)*x6893))+(((0.00043624)*x6892))+(((-1.0)*py))+(((-1.0)*x6896)));
evalcond[2]=((((-1.0)*x6888*x6889))+((sj4*x6887))+x6898+((cj4*r02)));
evalcond[3]=((((-1.0)*x6895))+(((-1.0)*x6888*x6890))+((sj4*x6886))+x6897+((cj4*r12)));
evalcond[4]=((((-1.0)*x6890*x6891))+x6898+((cj4*x6886))+(((-1.0)*r12*x6888)));
evalcond[5]=((((-1.0)*x6897))+(((-1.0)*x6889*x6891))+(((-1.0)*r02*x6888))+x6895+((cj4*x6887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x6899=((68162500000.0)*py);
IkReal x6900=((68162500000.0)*px);
j0eval[0]=((1.0)+cj2);
j0eval[1]=IKsign(((59470418.0)+(((59470418.0)*cj2))));
j0eval[2]=((IKabs(((((-1.0)*cj2*x6899))+(((-1.0)*x6899))+(((-1.0)*sj2*x6900)))))+(IKabs(((((-1.0)*cj2*x6900))+(((-1.0)*x6900))+((sj2*x6899))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=((-1.0)+(((-1.0)*cj2)));
j0eval[1]=IKsign(((-5453.0)+(((-5453.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6901=(r01*sj5);
IkReal x6902=(cj5*r00);
IkReal x6903=((5453.0)*sj4);
IkReal x6904=((5453.0)*cj4*r02);
IkReal x6905=(cj2*x6903);
CheckValue<IkReal> x6906=IKPowWithIntegerCheck(sj2,-1);
if(!x6906.valid){
continue;
}
if( IKabs(((((-1.0)*sj4*x6901))+((sj4*x6902))+(((-2292.31615624427)*py))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.000183385292499542)*(x6906.value)*(((((-1.0)*cj2*x6904))+(((12500000.0)*cj2*py))+(((-1.0)*x6904))+((x6901*x6905))+((x6901*x6903))+(((-1.0)*x6902*x6903))+(((-1.0)*x6902*x6905)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x6901))+((sj4*x6902))+(((-2292.31615624427)*py))+((cj4*r02))))+IKsqr(((-0.000183385292499542)*(x6906.value)*(((((-1.0)*cj2*x6904))+(((12500000.0)*cj2*py))+(((-1.0)*x6904))+((x6901*x6905))+((x6901*x6903))+(((-1.0)*x6902*x6903))+(((-1.0)*x6902*x6905))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*sj4*x6901))+((sj4*x6902))+(((-2292.31615624427)*py))+((cj4*r02))), ((-0.000183385292499542)*(x6906.value)*(((((-1.0)*cj2*x6904))+(((12500000.0)*cj2*py))+(((-1.0)*x6904))+((x6901*x6905))+((x6901*x6903))+(((-1.0)*x6902*x6903))+(((-1.0)*x6902*x6905))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6907=IKcos(j0);
IkReal x6908=IKsin(j0);
IkReal x6909=(cj5*r10);
IkReal x6910=(cj5*r00);
IkReal x6911=((1.0)*sj4);
IkReal x6912=(r01*sj5);
IkReal x6913=(r11*sj5);
IkReal x6914=((1.0)*cj4);
IkReal x6915=((0.00043624)*x6907);
IkReal x6916=((1.0)*x6907);
IkReal x6917=((0.00043624)*x6908);
IkReal x6918=(cj2*x6908);
IkReal x6919=(cj2*x6916);
IkReal x6920=((1.0)*sj2*x6908);
IkReal x6921=(x6920+x6919);
evalcond[0]=((((-1.0)*sj2*x6917))+(((-1.0)*cj2*x6915))+(((-1.0)*px))+(((-1.0)*x6915)));
evalcond[1]=((((-1.0)*cj2*x6917))+(((-1.0)*py))+(((-1.0)*x6917))+((sj2*x6915)));
evalcond[2]=((((-1.0)*sj2*x6916))+(((-1.0)*x6911*x6912))+((sj4*x6910))+x6918+((cj4*r02)));
evalcond[3]=((((-1.0)*x6911*x6913))+((sj4*x6909))+(((-1.0)*x6921))+((cj4*r12)));
evalcond[4]=(((cj4*x6909))+(((-1.0)*r12*x6911))+(((-1.0)*x6918))+((sj2*x6907))+(((-1.0)*x6913*x6914)));
evalcond[5]=((((-1.0)*x6912*x6914))+((cj4*x6910))+(((-1.0)*x6921))+(((-1.0)*r02*x6911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6922=((12500000.0)*px);
IkReal x6923=((5453.0)*cj2);
IkReal x6924=((5453.0)*cj4*r02);
IkReal x6925=(r01*sj4*sj5);
IkReal x6926=((5453.0)*cj5*r00*sj4);
CheckValue<IkReal> x6927 = IKatan2WithCheck(IkReal(((((-5453.0)*x6925))+((sj2*x6922))+((cj5*r00*sj4*x6923))+x6924+x6926+(((-1.0)*x6923*x6925))+((cj4*r02*x6923)))),IkReal(((((5453.0)*sj2*x6925))+((cj2*x6922))+(((-1.0)*sj2*x6924))+(((-1.0)*sj2*x6926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6927.valid){
continue;
}
CheckValue<IkReal> x6928=IKPowWithIntegerCheck(IKsign(((-5453.0)+(((-1.0)*x6923)))),-1);
if(!x6928.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6927.value)+(((1.5707963267949)*(x6928.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6929=IKcos(j0);
IkReal x6930=IKsin(j0);
IkReal x6931=(cj5*r10);
IkReal x6932=(cj5*r00);
IkReal x6933=((1.0)*sj4);
IkReal x6934=(r01*sj5);
IkReal x6935=(r11*sj5);
IkReal x6936=((1.0)*cj4);
IkReal x6937=((0.00043624)*x6929);
IkReal x6938=((1.0)*x6929);
IkReal x6939=((0.00043624)*x6930);
IkReal x6940=(cj2*x6930);
IkReal x6941=(cj2*x6938);
IkReal x6942=((1.0)*sj2*x6930);
IkReal x6943=(x6942+x6941);
evalcond[0]=((((-1.0)*cj2*x6937))+(((-1.0)*px))+(((-1.0)*sj2*x6939))+(((-1.0)*x6937)));
evalcond[1]=((((-1.0)*cj2*x6939))+((sj2*x6937))+(((-1.0)*py))+(((-1.0)*x6939)));
evalcond[2]=((((-1.0)*sj2*x6938))+x6940+((sj4*x6932))+(((-1.0)*x6933*x6934))+((cj4*r02)));
evalcond[3]=((((-1.0)*x6943))+((sj4*x6931))+((cj4*r12))+(((-1.0)*x6933*x6935)));
evalcond[4]=((((-1.0)*x6940))+((sj2*x6929))+(((-1.0)*x6935*x6936))+(((-1.0)*r12*x6933))+((cj4*x6931)));
evalcond[5]=((((-1.0)*x6943))+(((-1.0)*r02*x6933))+(((-1.0)*x6934*x6936))+((cj4*x6932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6944=((68162500000.0)*py);
IkReal x6945=((68162500000.0)*px);
CheckValue<IkReal> x6946 = IKatan2WithCheck(IkReal(((((-1.0)*x6944))+(((-1.0)*cj2*x6944))+(((-1.0)*sj2*x6945)))),IkReal(((((-1.0)*x6945))+(((-1.0)*cj2*x6945))+((sj2*x6944)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6946.valid){
continue;
}
CheckValue<IkReal> x6947=IKPowWithIntegerCheck(IKsign(((59470418.0)+(((59470418.0)*cj2)))),-1);
if(!x6947.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6946.value)+(((1.5707963267949)*(x6947.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6948=IKcos(j0);
IkReal x6949=IKsin(j0);
IkReal x6950=(cj5*r10);
IkReal x6951=(cj5*r00);
IkReal x6952=((1.0)*sj4);
IkReal x6953=(r01*sj5);
IkReal x6954=(r11*sj5);
IkReal x6955=((1.0)*cj4);
IkReal x6956=((0.00043624)*x6948);
IkReal x6957=((1.0)*x6948);
IkReal x6958=((0.00043624)*x6949);
IkReal x6959=(cj2*x6949);
IkReal x6960=(cj2*x6957);
IkReal x6961=((1.0)*sj2*x6949);
IkReal x6962=(x6961+x6960);
evalcond[0]=((((-1.0)*x6956))+(((-1.0)*cj2*x6956))+(((-1.0)*px))+(((-1.0)*sj2*x6958)));
evalcond[1]=((((-1.0)*x6958))+(((-1.0)*cj2*x6958))+(((-1.0)*py))+((sj2*x6956)));
evalcond[2]=((((-1.0)*x6952*x6953))+((sj4*x6951))+x6959+(((-1.0)*sj2*x6957))+((cj4*r02)));
evalcond[3]=((((-1.0)*x6952*x6954))+((sj4*x6950))+(((-1.0)*x6962))+((cj4*r12)));
evalcond[4]=((((-1.0)*r12*x6952))+(((-1.0)*x6959))+((cj4*x6950))+((sj2*x6948))+(((-1.0)*x6954*x6955)));
evalcond[5]=(((cj4*x6951))+(((-1.0)*x6962))+(((-1.0)*r02*x6952))+(((-1.0)*x6953*x6955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
j0eval[1]=IKsign(sj1);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=cj1;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x6963=IKPowWithIntegerCheck(cj1,-1);
if(!x6963.valid){
continue;
}
CheckValue<IkReal> x6964=IKPowWithIntegerCheck(sj1,-1);
if(!x6964.valid){
continue;
}
if( IKabs(((x6963.value)*(((((-1.0)*cj4*cj5*r10))+((r12*sj4))+((cj4*r11*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6964.value)*((((r00*sj5))+((cj5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6963.value)*(((((-1.0)*cj4*cj5*r10))+((r12*sj4))+((cj4*r11*sj5))))))+IKsqr(((x6964.value)*((((r00*sj5))+((cj5*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x6963.value)*(((((-1.0)*cj4*cj5*r10))+((r12*sj4))+((cj4*r11*sj5))))), ((x6964.value)*((((r00*sj5))+((cj5*r01))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6965=IKsin(j0);
IkReal x6966=IKcos(j0);
IkReal x6967=(cj5*r10);
IkReal x6968=(cj5*r00);
IkReal x6969=((1.0)*sj4);
IkReal x6970=(r01*sj5);
IkReal x6971=(r00*sj5);
IkReal x6972=((1.0)*cj5);
IkReal x6973=(r10*sj5);
IkReal x6974=((0.4)*cj5);
IkReal x6975=(r11*sj5);
IkReal x6976=((1.0)*cj4);
IkReal x6977=((0.00043624)*x6966);
IkReal x6978=(sj1*x6965);
IkReal x6979=((0.00043624)*x6965);
IkReal x6980=(sj1*x6966);
evalcond[0]=((((-1.0)*x6971))+x6980+(((-1.0)*r01*x6972)));
evalcond[1]=((((-1.0)*x6973))+(((-1.0)*r11*x6972))+x6978);
evalcond[2]=((((-1.0)*x6969*x6970))+((sj4*x6968))+x6965+((cj4*r02)));
evalcond[3]=((((-1.0)*x6966))+(((-1.0)*x6969*x6975))+((sj4*x6967))+((cj4*r12)));
evalcond[4]=((((-1.0)*x6975*x6976))+(((-1.0)*r12*x6969))+((cj1*x6965))+((cj4*x6967)));
evalcond[5]=((((-1.0)*r02*x6969))+(((-1.0)*x6970*x6976))+((cj1*x6966))+((cj4*x6968)));
evalcond[6]=((((0.42)*x6980))+(((-1.0)*px))+(((-1.0)*x6977))+((cj1*x6977))+(((-0.4)*x6971))+(((-1.0)*r01*x6974)));
evalcond[7]=((((0.42)*x6978))+(((-1.0)*r11*x6974))+(((-1.0)*py))+(((-1.0)*x6979))+((cj1*x6979))+(((-0.4)*x6973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x6981=IKPowWithIntegerCheck(sj1,-1);
if(!x6981.valid){
continue;
}
if( IKabs(((x6981.value)*((((cj5*r11))+((r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r10*sj4))+(((-1.0)*r11*sj4*sj5))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6981.value)*((((cj5*r11))+((r10*sj5))))))+IKsqr((((cj5*r10*sj4))+(((-1.0)*r11*sj4*sj5))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x6981.value)*((((cj5*r11))+((r10*sj5))))), (((cj5*r10*sj4))+(((-1.0)*r11*sj4*sj5))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6982=IKsin(j0);
IkReal x6983=IKcos(j0);
IkReal x6984=(cj5*r10);
IkReal x6985=(cj5*r00);
IkReal x6986=((1.0)*sj4);
IkReal x6987=(r01*sj5);
IkReal x6988=(r00*sj5);
IkReal x6989=((1.0)*cj5);
IkReal x6990=(r10*sj5);
IkReal x6991=((0.4)*cj5);
IkReal x6992=(r11*sj5);
IkReal x6993=((1.0)*cj4);
IkReal x6994=((0.00043624)*x6983);
IkReal x6995=(sj1*x6982);
IkReal x6996=((0.00043624)*x6982);
IkReal x6997=(sj1*x6983);
evalcond[0]=((((-1.0)*x6988))+x6997+(((-1.0)*r01*x6989)));
evalcond[1]=((((-1.0)*x6990))+(((-1.0)*r11*x6989))+x6995);
evalcond[2]=(((sj4*x6985))+(((-1.0)*x6986*x6987))+x6982+((cj4*r02)));
evalcond[3]=(((sj4*x6984))+(((-1.0)*x6983))+(((-1.0)*x6986*x6992))+((cj4*r12)));
evalcond[4]=(((cj1*x6982))+(((-1.0)*r12*x6986))+((cj4*x6984))+(((-1.0)*x6992*x6993)));
evalcond[5]=(((cj1*x6983))+(((-1.0)*x6987*x6993))+((cj4*x6985))+(((-1.0)*r02*x6986)));
evalcond[6]=((((-0.4)*x6988))+((cj1*x6994))+(((-1.0)*px))+(((0.42)*x6997))+(((-1.0)*x6994))+(((-1.0)*r01*x6991)));
evalcond[7]=((((-1.0)*r11*x6991))+((cj1*x6996))+(((-0.4)*x6990))+(((-1.0)*py))+(((0.42)*x6995))+(((-1.0)*x6996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x6998=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x6998.valid){
continue;
}
CheckValue<IkReal> x6999 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6999.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6998.value)))+(x6999.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7000=IKsin(j0);
IkReal x7001=IKcos(j0);
IkReal x7002=(cj5*r10);
IkReal x7003=(cj5*r00);
IkReal x7004=((1.0)*sj4);
IkReal x7005=(r01*sj5);
IkReal x7006=(r00*sj5);
IkReal x7007=((1.0)*cj5);
IkReal x7008=(r10*sj5);
IkReal x7009=((0.4)*cj5);
IkReal x7010=(r11*sj5);
IkReal x7011=((1.0)*cj4);
IkReal x7012=((0.00043624)*x7001);
IkReal x7013=(sj1*x7000);
IkReal x7014=((0.00043624)*x7000);
IkReal x7015=(sj1*x7001);
evalcond[0]=((((-1.0)*x7006))+x7015+(((-1.0)*r01*x7007)));
evalcond[1]=((((-1.0)*x7008))+x7013+(((-1.0)*r11*x7007)));
evalcond[2]=(x7000+((sj4*x7003))+(((-1.0)*x7004*x7005))+((cj4*r02)));
evalcond[3]=((((-1.0)*x7001))+((sj4*x7002))+(((-1.0)*x7004*x7010))+((cj4*r12)));
evalcond[4]=((((-1.0)*r12*x7004))+(((-1.0)*x7010*x7011))+((cj4*x7002))+((cj1*x7000)));
evalcond[5]=((((-1.0)*r02*x7004))+((cj4*x7003))+(((-1.0)*x7005*x7011))+((cj1*x7001)));
evalcond[6]=((((0.42)*x7015))+(((-0.4)*x7006))+(((-1.0)*x7012))+(((-1.0)*px))+(((-1.0)*r01*x7009))+((cj1*x7012)));
evalcond[7]=((((0.42)*x7013))+(((-1.0)*r11*x7009))+(((-0.4)*x7008))+(((-1.0)*x7014))+(((-1.0)*py))+((cj1*x7014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
j0eval[1]=IKsign(sj1);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=cj1;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7016=IKPowWithIntegerCheck(cj1,-1);
if(!x7016.valid){
continue;
}
CheckValue<IkReal> x7017=IKPowWithIntegerCheck(sj1,-1);
if(!x7017.valid){
continue;
}
if( IKabs(((x7016.value)*(((((-1.0)*cj4*r11*sj5))+((cj4*cj5*r10))+(((-1.0)*r12*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7017.value)*((((r00*sj5))+((cj5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7016.value)*(((((-1.0)*cj4*r11*sj5))+((cj4*cj5*r10))+(((-1.0)*r12*sj4))))))+IKsqr(((x7017.value)*((((r00*sj5))+((cj5*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7016.value)*(((((-1.0)*cj4*r11*sj5))+((cj4*cj5*r10))+(((-1.0)*r12*sj4))))), ((x7017.value)*((((r00*sj5))+((cj5*r01))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7018=IKcos(j0);
IkReal x7019=IKsin(j0);
IkReal x7020=(cj5*r10);
IkReal x7021=(cj5*r00);
IkReal x7022=((1.0)*sj4);
IkReal x7023=(r01*sj5);
IkReal x7024=(r00*sj5);
IkReal x7025=((1.0)*cj5);
IkReal x7026=(r10*sj5);
IkReal x7027=((0.4)*cj5);
IkReal x7028=(r11*sj5);
IkReal x7029=((1.0)*cj4);
IkReal x7030=((0.00043624)*x7018);
IkReal x7031=(sj1*x7019);
IkReal x7032=((1.0)*x7019);
IkReal x7033=((0.00043624)*x7019);
IkReal x7034=(sj1*x7018);
evalcond[0]=(x7034+(((-1.0)*x7024))+(((-1.0)*r01*x7025)));
evalcond[1]=((((-1.0)*r11*x7025))+x7031+(((-1.0)*x7026)));
evalcond[2]=(x7018+((sj4*x7020))+(((-1.0)*x7022*x7028))+((cj4*r12)));
evalcond[3]=(((sj4*x7021))+(((-1.0)*x7022*x7023))+(((-1.0)*x7032))+((cj4*r02)));
evalcond[4]=((((-1.0)*r12*x7022))+((cj4*x7020))+(((-1.0)*cj1*x7032))+(((-1.0)*x7028*x7029)));
evalcond[5]=((((-1.0)*r02*x7022))+((cj4*x7021))+(((-1.0)*x7023*x7029))+(((-1.0)*cj1*x7018)));
evalcond[6]=((((-1.0)*cj1*x7030))+(((0.42)*x7034))+(((-1.0)*px))+(((-1.0)*r01*x7027))+(((-0.4)*x7024))+(((-1.0)*x7030)));
evalcond[7]=((((-1.0)*r11*x7027))+(((-1.0)*cj1*x7033))+(((0.42)*x7031))+(((-1.0)*py))+(((-0.4)*x7026))+(((-1.0)*x7033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7035=IKPowWithIntegerCheck(sj1,-1);
if(!x7035.valid){
continue;
}
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7035.value)*((((r00*sj5))+((cj5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5))+((cj4*r02))))+IKsqr(((x7035.value)*((((r00*sj5))+((cj5*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5))+((cj4*r02))), ((x7035.value)*((((r00*sj5))+((cj5*r01))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7036=IKcos(j0);
IkReal x7037=IKsin(j0);
IkReal x7038=(cj5*r10);
IkReal x7039=(cj5*r00);
IkReal x7040=((1.0)*sj4);
IkReal x7041=(r01*sj5);
IkReal x7042=(r00*sj5);
IkReal x7043=((1.0)*cj5);
IkReal x7044=(r10*sj5);
IkReal x7045=((0.4)*cj5);
IkReal x7046=(r11*sj5);
IkReal x7047=((1.0)*cj4);
IkReal x7048=((0.00043624)*x7036);
IkReal x7049=(sj1*x7037);
IkReal x7050=((1.0)*x7037);
IkReal x7051=((0.00043624)*x7037);
IkReal x7052=(sj1*x7036);
evalcond[0]=(x7052+(((-1.0)*x7042))+(((-1.0)*r01*x7043)));
evalcond[1]=(x7049+(((-1.0)*r11*x7043))+(((-1.0)*x7044)));
evalcond[2]=(x7036+(((-1.0)*x7040*x7046))+((sj4*x7038))+((cj4*r12)));
evalcond[3]=((((-1.0)*x7040*x7041))+(((-1.0)*x7050))+((sj4*x7039))+((cj4*r02)));
evalcond[4]=((((-1.0)*cj1*x7050))+(((-1.0)*r12*x7040))+((cj4*x7038))+(((-1.0)*x7046*x7047)));
evalcond[5]=((((-1.0)*cj1*x7036))+(((-1.0)*r02*x7040))+((cj4*x7039))+(((-1.0)*x7041*x7047)));
evalcond[6]=((((-1.0)*x7048))+(((-0.4)*x7042))+(((-1.0)*cj1*x7048))+(((-1.0)*r01*x7045))+(((-1.0)*px))+(((0.42)*x7052)));
evalcond[7]=((((-0.4)*x7044))+(((-1.0)*cj1*x7051))+(((-1.0)*r11*x7045))+(((0.42)*x7049))+(((-1.0)*x7051))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7053=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x7053.valid){
continue;
}
CheckValue<IkReal> x7054 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7054.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7053.value)))+(x7054.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7055=IKcos(j0);
IkReal x7056=IKsin(j0);
IkReal x7057=(cj5*r10);
IkReal x7058=(cj5*r00);
IkReal x7059=((1.0)*sj4);
IkReal x7060=(r01*sj5);
IkReal x7061=(r00*sj5);
IkReal x7062=((1.0)*cj5);
IkReal x7063=(r10*sj5);
IkReal x7064=((0.4)*cj5);
IkReal x7065=(r11*sj5);
IkReal x7066=((1.0)*cj4);
IkReal x7067=((0.00043624)*x7055);
IkReal x7068=(sj1*x7056);
IkReal x7069=((1.0)*x7056);
IkReal x7070=((0.00043624)*x7056);
IkReal x7071=(sj1*x7055);
evalcond[0]=(x7071+(((-1.0)*r01*x7062))+(((-1.0)*x7061)));
evalcond[1]=(x7068+(((-1.0)*r11*x7062))+(((-1.0)*x7063)));
evalcond[2]=((((-1.0)*x7059*x7065))+((sj4*x7057))+x7055+((cj4*r12)));
evalcond[3]=((((-1.0)*x7059*x7060))+((sj4*x7058))+(((-1.0)*x7069))+((cj4*r02)));
evalcond[4]=((((-1.0)*x7065*x7066))+(((-1.0)*r12*x7059))+((cj4*x7057))+(((-1.0)*cj1*x7069)));
evalcond[5]=((((-1.0)*x7060*x7066))+(((-1.0)*cj1*x7055))+((cj4*x7058))+(((-1.0)*r02*x7059)));
evalcond[6]=((((-1.0)*x7067))+(((0.42)*x7071))+(((-1.0)*r01*x7064))+(((-1.0)*px))+(((-0.4)*x7061))+(((-1.0)*cj1*x7067)));
evalcond[7]=((((-1.0)*x7070))+(((-1.0)*r11*x7064))+(((0.42)*x7068))+(((-1.0)*py))+(((-0.4)*x7063))+(((-1.0)*cj1*x7070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=sj1;
j0eval[1]=IKsign(sj1);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7072=IKPowWithIntegerCheck(cj1,-1);
if(!x7072.valid){
continue;
}
CheckValue<IkReal> x7073=IKPowWithIntegerCheck(sj1,-1);
if(!x7073.valid){
continue;
}
if( IKabs(((x7072.value)*((((r11*sj4*sj5))+(((-1.0)*cj5*r10*sj4))+(((-1.0)*cj4*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7073.value)*((((r00*sj5))+((cj5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7072.value)*((((r11*sj4*sj5))+(((-1.0)*cj5*r10*sj4))+(((-1.0)*cj4*r12))))))+IKsqr(((x7073.value)*((((r00*sj5))+((cj5*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7072.value)*((((r11*sj4*sj5))+(((-1.0)*cj5*r10*sj4))+(((-1.0)*cj4*r12))))), ((x7073.value)*((((r00*sj5))+((cj5*r01))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7074=IKcos(j0);
IkReal x7075=IKsin(j0);
IkReal x7076=(cj5*r10);
IkReal x7077=(cj5*r00);
IkReal x7078=((1.0)*sj4);
IkReal x7079=(r01*sj5);
IkReal x7080=(r00*sj5);
IkReal x7081=((1.0)*cj5);
IkReal x7082=(r10*sj5);
IkReal x7083=((0.4)*cj5);
IkReal x7084=(r11*sj5);
IkReal x7085=((1.0)*cj4);
IkReal x7086=((0.00043624)*x7074);
IkReal x7087=((0.00043624)*x7075);
IkReal x7088=(sj1*x7075);
IkReal x7089=(sj1*x7074);
evalcond[0]=((((-1.0)*x7080))+x7089+(((-1.0)*r01*x7081)));
evalcond[1]=((((-1.0)*x7082))+x7088+(((-1.0)*r11*x7081)));
evalcond[2]=(x7074+(((-1.0)*x7084*x7085))+((cj4*x7076))+(((-1.0)*r12*x7078)));
evalcond[3]=((((-1.0)*x7078*x7079))+((cj1*x7074))+((sj4*x7077))+((cj4*r02)));
evalcond[4]=(((cj1*x7075))+(((-1.0)*x7078*x7084))+((sj4*x7076))+((cj4*r12)));
evalcond[5]=(((cj4*x7077))+(((-1.0)*x7079*x7085))+(((-1.0)*r02*x7078))+(((-1.0)*x7075)));
evalcond[6]=((((-1.0)*r01*x7083))+(((-1.0)*px))+(((-0.4)*x7080))+(((0.42)*x7089))+(((-1.0)*x7086))+(((-1.0)*x7087)));
evalcond[7]=(x7086+(((-1.0)*py))+(((-1.0)*r11*x7083))+(((-0.4)*x7082))+(((0.42)*x7088))+(((-1.0)*x7087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7090=IKPowWithIntegerCheck(sj1,-1);
if(!x7090.valid){
continue;
}
if( IKabs(((x7090.value)*((((cj5*r11))+((r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*cj5*r10))+((r12*sj4))+((cj4*r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7090.value)*((((cj5*r11))+((r10*sj5))))))+IKsqr(((((-1.0)*cj4*cj5*r10))+((r12*sj4))+((cj4*r11*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7090.value)*((((cj5*r11))+((r10*sj5))))), ((((-1.0)*cj4*cj5*r10))+((r12*sj4))+((cj4*r11*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7091=IKcos(j0);
IkReal x7092=IKsin(j0);
IkReal x7093=(cj5*r10);
IkReal x7094=(cj5*r00);
IkReal x7095=((1.0)*sj4);
IkReal x7096=(r01*sj5);
IkReal x7097=(r00*sj5);
IkReal x7098=((1.0)*cj5);
IkReal x7099=(r10*sj5);
IkReal x7100=((0.4)*cj5);
IkReal x7101=(r11*sj5);
IkReal x7102=((1.0)*cj4);
IkReal x7103=((0.00043624)*x7091);
IkReal x7104=((0.00043624)*x7092);
IkReal x7105=(sj1*x7092);
IkReal x7106=(sj1*x7091);
evalcond[0]=(x7106+(((-1.0)*x7097))+(((-1.0)*r01*x7098)));
evalcond[1]=(x7105+(((-1.0)*x7099))+(((-1.0)*r11*x7098)));
evalcond[2]=(x7091+(((-1.0)*x7101*x7102))+((cj4*x7093))+(((-1.0)*r12*x7095)));
evalcond[3]=(((cj1*x7091))+(((-1.0)*x7095*x7096))+((sj4*x7094))+((cj4*r02)));
evalcond[4]=(((cj1*x7092))+(((-1.0)*x7095*x7101))+((sj4*x7093))+((cj4*r12)));
evalcond[5]=((((-1.0)*x7092))+((cj4*x7094))+(((-1.0)*r02*x7095))+(((-1.0)*x7096*x7102)));
evalcond[6]=((((-1.0)*x7104))+(((-1.0)*x7103))+(((0.42)*x7106))+(((-0.4)*x7097))+(((-1.0)*px))+(((-1.0)*r01*x7100)));
evalcond[7]=(x7103+(((-1.0)*x7104))+(((0.42)*x7105))+(((-1.0)*r11*x7100))+(((-0.4)*x7099))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7107=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x7107.valid){
continue;
}
CheckValue<IkReal> x7108 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7108.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7107.value)))+(x7108.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7109=IKcos(j0);
IkReal x7110=IKsin(j0);
IkReal x7111=(cj5*r10);
IkReal x7112=(cj5*r00);
IkReal x7113=((1.0)*sj4);
IkReal x7114=(r01*sj5);
IkReal x7115=(r00*sj5);
IkReal x7116=((1.0)*cj5);
IkReal x7117=(r10*sj5);
IkReal x7118=((0.4)*cj5);
IkReal x7119=(r11*sj5);
IkReal x7120=((1.0)*cj4);
IkReal x7121=((0.00043624)*x7109);
IkReal x7122=((0.00043624)*x7110);
IkReal x7123=(sj1*x7110);
IkReal x7124=(sj1*x7109);
evalcond[0]=(x7124+(((-1.0)*x7115))+(((-1.0)*r01*x7116)));
evalcond[1]=(x7123+(((-1.0)*r11*x7116))+(((-1.0)*x7117)));
evalcond[2]=(x7109+(((-1.0)*x7119*x7120))+(((-1.0)*r12*x7113))+((cj4*x7111)));
evalcond[3]=(((sj4*x7112))+((cj1*x7109))+(((-1.0)*x7113*x7114))+((cj4*r02)));
evalcond[4]=(((sj4*x7111))+((cj1*x7110))+(((-1.0)*x7113*x7119))+((cj4*r12)));
evalcond[5]=((((-1.0)*x7114*x7120))+(((-1.0)*x7110))+(((-1.0)*r02*x7113))+((cj4*x7112)));
evalcond[6]=((((-1.0)*x7122))+(((-1.0)*x7121))+(((-1.0)*px))+(((0.42)*x7124))+(((-1.0)*r01*x7118))+(((-0.4)*x7115)));
evalcond[7]=(x7121+(((-1.0)*r11*x7118))+(((-1.0)*x7122))+(((-1.0)*py))+(((0.42)*x7123))+(((-0.4)*x7117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=sj1;
j0eval[1]=IKsign(sj1);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7125=IKPowWithIntegerCheck(cj1,-1);
if(!x7125.valid){
continue;
}
CheckValue<IkReal> x7126=IKPowWithIntegerCheck(sj1,-1);
if(!x7126.valid){
continue;
}
if( IKabs(((x7125.value)*((((cj5*r10*sj4))+(((-1.0)*r11*sj4*sj5))+((cj4*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7126.value)*((((r00*sj5))+((cj5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7125.value)*((((cj5*r10*sj4))+(((-1.0)*r11*sj4*sj5))+((cj4*r12))))))+IKsqr(((x7126.value)*((((r00*sj5))+((cj5*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7125.value)*((((cj5*r10*sj4))+(((-1.0)*r11*sj4*sj5))+((cj4*r12))))), ((x7126.value)*((((r00*sj5))+((cj5*r01))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7127=IKsin(j0);
IkReal x7128=IKcos(j0);
IkReal x7129=(cj5*r10);
IkReal x7130=(cj5*r00);
IkReal x7131=((1.0)*sj4);
IkReal x7132=(r01*sj5);
IkReal x7133=(r00*sj5);
IkReal x7134=((1.0)*cj5);
IkReal x7135=(r10*sj5);
IkReal x7136=((0.4)*cj5);
IkReal x7137=(r11*sj5);
IkReal x7138=((1.0)*cj4);
IkReal x7139=((0.00043624)*x7127);
IkReal x7140=((0.00043624)*x7128);
IkReal x7141=(sj1*x7127);
IkReal x7142=((1.0)*x7128);
IkReal x7143=(sj1*x7128);
evalcond[0]=(x7143+(((-1.0)*r01*x7134))+(((-1.0)*x7133)));
evalcond[1]=(x7141+(((-1.0)*r11*x7134))+(((-1.0)*x7135)));
evalcond[2]=(x7127+(((-1.0)*x7132*x7138))+((cj4*x7130))+(((-1.0)*r02*x7131)));
evalcond[3]=(((sj4*x7130))+(((-1.0)*x7131*x7132))+(((-1.0)*cj1*x7142))+((cj4*r02)));
evalcond[4]=((((-1.0)*cj1*x7127))+((sj4*x7129))+(((-1.0)*x7131*x7137))+((cj4*r12)));
evalcond[5]=((((-1.0)*r12*x7131))+(((-1.0)*x7142))+(((-1.0)*x7137*x7138))+((cj4*x7129)));
evalcond[6]=(x7139+(((-1.0)*r01*x7136))+(((-1.0)*x7140))+(((-1.0)*px))+(((-0.4)*x7133))+(((0.42)*x7143)));
evalcond[7]=((((-1.0)*r11*x7136))+(((-1.0)*x7140))+(((-1.0)*py))+(((-0.4)*x7135))+(((-1.0)*x7139))+(((0.42)*x7141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7144=IKPowWithIntegerCheck(sj1,-1);
if(!x7144.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*cj5*r00))+((r02*sj4))+((cj4*r01*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7144.value)*((((r00*sj5))+((cj5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*cj5*r00))+((r02*sj4))+((cj4*r01*sj5))))+IKsqr(((x7144.value)*((((r00*sj5))+((cj5*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*cj5*r00))+((r02*sj4))+((cj4*r01*sj5))), ((x7144.value)*((((r00*sj5))+((cj5*r01))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7145=IKsin(j0);
IkReal x7146=IKcos(j0);
IkReal x7147=(cj5*r10);
IkReal x7148=(cj5*r00);
IkReal x7149=((1.0)*sj4);
IkReal x7150=(r01*sj5);
IkReal x7151=(r00*sj5);
IkReal x7152=((1.0)*cj5);
IkReal x7153=(r10*sj5);
IkReal x7154=((0.4)*cj5);
IkReal x7155=(r11*sj5);
IkReal x7156=((1.0)*cj4);
IkReal x7157=((0.00043624)*x7145);
IkReal x7158=((0.00043624)*x7146);
IkReal x7159=(sj1*x7145);
IkReal x7160=((1.0)*x7146);
IkReal x7161=(sj1*x7146);
evalcond[0]=(x7161+(((-1.0)*r01*x7152))+(((-1.0)*x7151)));
evalcond[1]=(x7159+(((-1.0)*x7153))+(((-1.0)*r11*x7152)));
evalcond[2]=(x7145+((cj4*x7148))+(((-1.0)*r02*x7149))+(((-1.0)*x7150*x7156)));
evalcond[3]=((((-1.0)*cj1*x7160))+(((-1.0)*x7149*x7150))+((sj4*x7148))+((cj4*r02)));
evalcond[4]=((((-1.0)*cj1*x7145))+(((-1.0)*x7149*x7155))+((sj4*x7147))+((cj4*r12)));
evalcond[5]=((((-1.0)*x7155*x7156))+(((-1.0)*x7160))+((cj4*x7147))+(((-1.0)*r12*x7149)));
evalcond[6]=(x7157+(((-1.0)*r01*x7154))+(((-1.0)*x7158))+(((-1.0)*px))+(((-0.4)*x7151))+(((0.42)*x7161)));
evalcond[7]=((((-1.0)*x7158))+(((-1.0)*x7157))+(((-1.0)*py))+(((-0.4)*x7153))+(((0.42)*x7159))+(((-1.0)*r11*x7154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7162=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x7162.valid){
continue;
}
CheckValue<IkReal> x7163 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7163.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7162.value)))+(x7163.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7164=IKsin(j0);
IkReal x7165=IKcos(j0);
IkReal x7166=(cj5*r10);
IkReal x7167=(cj5*r00);
IkReal x7168=((1.0)*sj4);
IkReal x7169=(r01*sj5);
IkReal x7170=(r00*sj5);
IkReal x7171=((1.0)*cj5);
IkReal x7172=(r10*sj5);
IkReal x7173=((0.4)*cj5);
IkReal x7174=(r11*sj5);
IkReal x7175=((1.0)*cj4);
IkReal x7176=((0.00043624)*x7164);
IkReal x7177=((0.00043624)*x7165);
IkReal x7178=(sj1*x7164);
IkReal x7179=((1.0)*x7165);
IkReal x7180=(sj1*x7165);
evalcond[0]=(x7180+(((-1.0)*x7170))+(((-1.0)*r01*x7171)));
evalcond[1]=(x7178+(((-1.0)*x7172))+(((-1.0)*r11*x7171)));
evalcond[2]=(x7164+(((-1.0)*x7169*x7175))+(((-1.0)*r02*x7168))+((cj4*x7167)));
evalcond[3]=((((-1.0)*cj1*x7179))+(((-1.0)*x7168*x7169))+((sj4*x7167))+((cj4*r02)));
evalcond[4]=((((-1.0)*x7168*x7174))+((sj4*x7166))+(((-1.0)*cj1*x7164))+((cj4*r12)));
evalcond[5]=((((-1.0)*x7174*x7175))+(((-1.0)*x7179))+((cj4*x7166))+(((-1.0)*r12*x7168)));
evalcond[6]=(x7176+(((-0.4)*x7170))+(((-1.0)*x7177))+(((-1.0)*px))+(((0.42)*x7180))+(((-1.0)*r01*x7173)));
evalcond[7]=((((-0.4)*x7172))+(((0.42)*x7178))+(((-1.0)*x7177))+(((-1.0)*x7176))+(((-1.0)*r11*x7173))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7185=IKPowWithIntegerCheck(sj1,-1);
if(!x7185.valid){
continue;
}
IkReal x7181=x7185.value;
IkReal x7182=(r00*sj5);
IkReal x7183=(sj1*sj4);
IkReal x7184=(cj5*r01);
CheckValue<IkReal> x7186=IKPowWithIntegerCheck(cj1,-1);
if(!x7186.valid){
continue;
}
CheckValue<IkReal> x7187=IKPowWithIntegerCheck(sj2,-1);
if(!x7187.valid){
continue;
}
if( IKabs((x7181*(x7186.value)*(x7187.value)*((((cj2*x7184))+((cj2*x7182))+((r11*sj5*x7183))+(((-1.0)*cj4*r12*sj1))+(((-1.0)*cj5*r10*x7183)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x7181*((x7182+x7184)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x7181*(x7186.value)*(x7187.value)*((((cj2*x7184))+((cj2*x7182))+((r11*sj5*x7183))+(((-1.0)*cj4*r12*sj1))+(((-1.0)*cj5*r10*x7183))))))+IKsqr((x7181*((x7182+x7184))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x7181*(x7186.value)*(x7187.value)*((((cj2*x7184))+((cj2*x7182))+((r11*sj5*x7183))+(((-1.0)*cj4*r12*sj1))+(((-1.0)*cj5*r10*x7183))))), (x7181*((x7182+x7184))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7188=IKcos(j0);
IkReal x7189=IKsin(j0);
IkReal x7190=(cj5*r10);
IkReal x7191=(cj5*r00);
IkReal x7192=((1.0)*sj4);
IkReal x7193=(r01*sj5);
IkReal x7194=(r00*sj5);
IkReal x7195=(cj1*cj2);
IkReal x7196=((1.0)*cj5);
IkReal x7197=(r10*sj5);
IkReal x7198=((0.4)*cj5);
IkReal x7199=(r11*sj5);
IkReal x7200=((1.0)*cj4);
IkReal x7201=((0.00043624)*x7188);
IkReal x7202=((0.00043624)*x7189);
IkReal x7203=(sj1*x7189);
IkReal x7204=(sj2*x7188);
IkReal x7205=(sj1*x7188);
IkReal x7206=(sj2*x7189);
evalcond[0]=(x7205+(((-1.0)*r01*x7196))+(((-1.0)*x7194)));
evalcond[1]=(x7203+(((-1.0)*r11*x7196))+(((-1.0)*x7197)));
evalcond[2]=(((cj2*x7189))+((cj1*x7204))+((sj4*x7191))+(((-1.0)*x7192*x7193))+((cj4*r02)));
evalcond[3]=(((cj1*x7206))+(((-1.0)*cj2*x7188))+((sj4*x7190))+(((-1.0)*x7192*x7199))+((cj4*r12)));
evalcond[4]=(x7204+((x7189*x7195))+(((-1.0)*x7199*x7200))+((cj4*x7190))+(((-1.0)*r12*x7192)));
evalcond[5]=((((-1.0)*x7193*x7200))+((cj4*x7191))+((x7188*x7195))+(((-1.0)*x7206))+(((-1.0)*r02*x7192)));
evalcond[6]=((((-1.0)*sj2*x7202))+(((0.42)*x7205))+(((-1.0)*px))+(((-1.0)*r01*x7198))+(((-0.4)*x7194))+((x7195*x7201))+(((-1.0)*x7201)));
evalcond[7]=((((0.42)*x7203))+((sj2*x7201))+(((-1.0)*py))+(((-1.0)*r11*x7198))+(((-0.4)*x7197))+((x7195*x7202))+(((-1.0)*x7202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7212=IKPowWithIntegerCheck(sj1,-1);
if(!x7212.valid){
continue;
}
IkReal x7207=x7212.value;
IkReal x7208=(sj1*sj4);
IkReal x7209=(r00*sj5);
IkReal x7210=((1.0)*cj5);
IkReal x7211=(cj1*sj2);
CheckValue<IkReal> x7213=IKPowWithIntegerCheck(cj2,-1);
if(!x7213.valid){
continue;
}
if( IKabs((x7207*(x7213.value)*(((((-1.0)*x7209*x7211))+(((-1.0)*cj4*r02*sj1))+((r01*sj5*x7208))+(((-1.0)*r01*x7210*x7211))+(((-1.0)*r00*x7208*x7210)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x7207*((x7209+((cj5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x7207*(x7213.value)*(((((-1.0)*x7209*x7211))+(((-1.0)*cj4*r02*sj1))+((r01*sj5*x7208))+(((-1.0)*r01*x7210*x7211))+(((-1.0)*r00*x7208*x7210))))))+IKsqr((x7207*((x7209+((cj5*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x7207*(x7213.value)*(((((-1.0)*x7209*x7211))+(((-1.0)*cj4*r02*sj1))+((r01*sj5*x7208))+(((-1.0)*r01*x7210*x7211))+(((-1.0)*r00*x7208*x7210))))), (x7207*((x7209+((cj5*r01))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7214=IKcos(j0);
IkReal x7215=IKsin(j0);
IkReal x7216=(cj5*r10);
IkReal x7217=(cj5*r00);
IkReal x7218=((1.0)*sj4);
IkReal x7219=(r01*sj5);
IkReal x7220=(r00*sj5);
IkReal x7221=(cj1*cj2);
IkReal x7222=((1.0)*cj5);
IkReal x7223=(r10*sj5);
IkReal x7224=((0.4)*cj5);
IkReal x7225=(r11*sj5);
IkReal x7226=((1.0)*cj4);
IkReal x7227=((0.00043624)*x7214);
IkReal x7228=((0.00043624)*x7215);
IkReal x7229=(sj1*x7215);
IkReal x7230=(sj2*x7214);
IkReal x7231=(sj1*x7214);
IkReal x7232=(sj2*x7215);
evalcond[0]=((((-1.0)*r01*x7222))+x7231+(((-1.0)*x7220)));
evalcond[1]=(x7229+(((-1.0)*r11*x7222))+(((-1.0)*x7223)));
evalcond[2]=(((cj1*x7230))+((sj4*x7217))+((cj2*x7215))+(((-1.0)*x7218*x7219))+((cj4*r02)));
evalcond[3]=(((cj1*x7232))+((sj4*x7216))+(((-1.0)*cj2*x7214))+(((-1.0)*x7218*x7225))+((cj4*r12)));
evalcond[4]=((((-1.0)*x7225*x7226))+((cj4*x7216))+x7230+((x7215*x7221))+(((-1.0)*r12*x7218)));
evalcond[5]=(((cj4*x7217))+((x7214*x7221))+(((-1.0)*r02*x7218))+(((-1.0)*x7232))+(((-1.0)*x7219*x7226)));
evalcond[6]=((((-1.0)*r01*x7224))+((x7221*x7227))+(((0.42)*x7231))+(((-0.4)*x7220))+(((-1.0)*px))+(((-1.0)*x7227))+(((-1.0)*sj2*x7228)));
evalcond[7]=(((sj2*x7227))+((x7221*x7228))+(((0.42)*x7229))+(((-0.4)*x7223))+(((-1.0)*py))+(((-1.0)*x7228))+(((-1.0)*r11*x7224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7233=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x7233.valid){
continue;
}
CheckValue<IkReal> x7234 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7234.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7233.value)))+(x7234.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7235=IKcos(j0);
IkReal x7236=IKsin(j0);
IkReal x7237=(cj5*r10);
IkReal x7238=(cj5*r00);
IkReal x7239=((1.0)*sj4);
IkReal x7240=(r01*sj5);
IkReal x7241=(r00*sj5);
IkReal x7242=(cj1*cj2);
IkReal x7243=((1.0)*cj5);
IkReal x7244=(r10*sj5);
IkReal x7245=((0.4)*cj5);
IkReal x7246=(r11*sj5);
IkReal x7247=((1.0)*cj4);
IkReal x7248=((0.00043624)*x7235);
IkReal x7249=((0.00043624)*x7236);
IkReal x7250=(sj1*x7236);
IkReal x7251=(sj2*x7235);
IkReal x7252=(sj1*x7235);
IkReal x7253=(sj2*x7236);
evalcond[0]=((((-1.0)*x7241))+x7252+(((-1.0)*r01*x7243)));
evalcond[1]=((((-1.0)*x7244))+x7250+(((-1.0)*r11*x7243)));
evalcond[2]=(((cj1*x7251))+((cj2*x7236))+(((-1.0)*x7239*x7240))+((sj4*x7238))+((cj4*r02)));
evalcond[3]=((((-1.0)*cj2*x7235))+((cj1*x7253))+(((-1.0)*x7239*x7246))+((sj4*x7237))+((cj4*r12)));
evalcond[4]=(((cj4*x7237))+(((-1.0)*x7246*x7247))+x7251+((x7236*x7242))+(((-1.0)*r12*x7239)));
evalcond[5]=(((cj4*x7238))+((x7235*x7242))+(((-1.0)*x7240*x7247))+(((-1.0)*r02*x7239))+(((-1.0)*x7253)));
evalcond[6]=((((0.42)*x7252))+((x7242*x7248))+(((-0.4)*x7241))+(((-1.0)*sj2*x7249))+(((-1.0)*px))+(((-1.0)*r01*x7245))+(((-1.0)*x7248)));
evalcond[7]=((((0.42)*x7250))+((x7242*x7249))+(((-0.4)*x7244))+(((-1.0)*r11*x7245))+((sj2*x7248))+(((-1.0)*py))+(((-1.0)*x7249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7254=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x7254.valid){
continue;
}
CheckValue<IkReal> x7255 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7255.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7254.value)))+(x7255.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7256=IKcos(j0);
IkReal x7257=IKsin(j0);
IkReal x7258=((1.0)*cj5);
IkReal x7259=((0.4)*sj5);
IkReal x7260=((1.0)*sj5);
IkReal x7261=(cj1*cj2);
IkReal x7262=((0.4)*cj5);
IkReal x7263=((0.00043624)*x7256);
IkReal x7264=((0.00043624)*x7257);
IkReal x7265=(sj1*x7256);
IkReal x7266=(sj1*x7257);
evalcond[0]=((((-1.0)*r00*x7260))+x7265+(((-1.0)*r01*x7258)));
evalcond[1]=(x7266+(((-1.0)*r11*x7258))+(((-1.0)*r10*x7260)));
evalcond[2]=((((-1.0)*r01*x7262))+(((-1.0)*x7263))+(((-1.0)*r00*x7259))+(((-1.0)*px))+((x7261*x7263))+(((0.42)*x7265))+(((-1.0)*sj2*x7264)));
evalcond[3]=((((-1.0)*r10*x7259))+(((-1.0)*x7264))+(((-1.0)*py))+((x7261*x7264))+(((-1.0)*r11*x7262))+((sj2*x7263))+(((0.42)*x7266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7267=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7267;
j4eval[1]=IKsign(x7267);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7268=((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)));
j4eval[0]=x7268;
j4eval[1]=IKsign(x7268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7269=cj5*cj5;
IkReal x7270=r21*r21;
IkReal x7271=(sj1*sj2);
IkReal x7272=(r21*sj5);
IkReal x7273=(cj5*r20);
IkReal x7274=(cj2*sj1);
IkReal x7275=((((-1.0)*x7269*x7270))+x7270+(r22*r22)+((x7269*(r20*r20)))+(((-2.0)*x7272*x7273)));
j4eval[0]=x7275;
j4eval[1]=IKsign(x7275);
j4eval[2]=((IKabs(((((-1.0)*x7272*x7274))+((x7273*x7274))+((r22*x7271)))))+(IKabs((((x7271*x7273))+(((-1.0)*x7271*x7272))+(((-1.0)*r22*x7274))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=1.0;
j1=0;
IkReal x7276=(cj0*cj2);
IkReal x7277=(sj0*sj2);
IkReal x7278=(r21*sj5);
IkReal x7279=(cj5*r20);
IkReal x7280=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7280;
j4eval[1]=IKsign(x7280);
j4eval[2]=((IKabs(((((-1.0)*r22*x7276))+((r22*x7277)))))+(IKabs((((x7277*x7278))+((x7276*x7279))+(((-1.0)*x7276*x7278))+(((-1.0)*x7277*x7279))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=1.0;
j1=0;
IkReal x7281=((1.0)*cj5);
IkReal x7282=(cj0*sj2);
IkReal x7283=(cj2*sj0);
IkReal x7284=(r21*sj5);
IkReal x7285=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7281)));
j4eval[0]=x7285;
j4eval[1]=IKsign(x7285);
j4eval[2]=((IKabs((((x7282*x7284))+((x7283*x7284))+(((-1.0)*r20*x7281*x7283))+(((-1.0)*r20*x7281*x7282)))))+(IKabs((((r22*x7283))+((r22*x7282))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=1.0;
j1=0;
IkReal x7286=cj5*cj5;
IkReal x7287=(cj0*sj2);
IkReal x7288=(cj2*sj0);
IkReal x7289=(r21*sj5);
IkReal x7290=(r11*r21);
IkReal x7291=((1.0)*cj5*r20);
IkReal x7292=((((-1.0)*r11*sj5*x7291))+x7290+(((-1.0)*cj5*r10*x7289))+(((-1.0)*x7286*x7290))+((r10*r20*x7286))+((r12*r22)));
j4eval[0]=x7292;
j4eval[1]=IKsign(x7292);
j4eval[2]=((IKabs((((r22*x7288))+((r22*x7287)))))+(IKabs((((x7287*x7289))+(((-1.0)*x7288*x7291))+(((-1.0)*x7287*x7291))+((x7288*x7289))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7293=cj5*cj5;
IkReal x7294=(cj0*sj2);
IkReal x7295=(cj2*sj0);
IkReal x7296=(r21*sj5);
IkReal x7297=(r11*r21);
IkReal x7298=((1.0)*cj5*r20);
CheckValue<IkReal> x7299=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7298))+(((-1.0)*cj5*r10*x7296))+x7297+((r10*r20*x7293))+((r12*r22))+(((-1.0)*x7293*x7297)))),-1);
if(!x7299.valid){
continue;
}
CheckValue<IkReal> x7300 = IKatan2WithCheck(IkReal((((r22*x7294))+((r22*x7295)))),IkReal(((((-1.0)*x7295*x7298))+(((-1.0)*x7294*x7298))+((x7295*x7296))+((x7294*x7296)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7299.value)))+(x7300.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7301=IKsin(j4);
IkReal x7302=IKcos(j4);
IkReal x7303=(cj2*sj0);
IkReal x7304=(cj0*sj2);
IkReal x7305=((1.0)*sj5);
IkReal x7306=(cj0*cj2);
IkReal x7307=(cj5*r10);
IkReal x7308=(sj0*sj2);
IkReal x7309=(cj5*x7301);
IkReal x7310=((1.0)*x7301);
IkReal x7311=(cj5*x7302);
IkReal x7312=(x7303+x7304);
evalcond[0]=((((-1.0)*r21*x7301*x7305))+((r22*x7302))+((r20*x7309)));
evalcond[1]=((((-1.0)*r21*x7302*x7305))+((r20*x7311))+(((-1.0)*r22*x7310)));
evalcond[2]=(x7312+(((-1.0)*r01*x7301*x7305))+((r02*x7302))+((r00*x7309)));
evalcond[3]=(x7308+(((-1.0)*x7306))+((r12*x7302))+((x7301*x7307))+(((-1.0)*r11*x7301*x7305)));
evalcond[4]=(x7312+(((-1.0)*r11*x7302*x7305))+((x7302*x7307))+(((-1.0)*r12*x7310)));
evalcond[5]=(x7306+(((-1.0)*x7308))+(((-1.0)*r01*x7302*x7305))+((r00*x7311))+(((-1.0)*r02*x7310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7313=((1.0)*cj5);
IkReal x7314=(cj0*sj2);
IkReal x7315=(cj2*sj0);
IkReal x7316=(r21*sj5);
CheckValue<IkReal> x7317 = IKatan2WithCheck(IkReal((((r22*x7315))+((r22*x7314)))),IkReal(((((-1.0)*r20*x7313*x7314))+(((-1.0)*r20*x7313*x7315))+((x7314*x7316))+((x7315*x7316)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7317.valid){
continue;
}
CheckValue<IkReal> x7318=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7313)))),-1);
if(!x7318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7317.value)+(((1.5707963267949)*(x7318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7319=IKsin(j4);
IkReal x7320=IKcos(j4);
IkReal x7321=(cj2*sj0);
IkReal x7322=(cj0*sj2);
IkReal x7323=((1.0)*sj5);
IkReal x7324=(cj0*cj2);
IkReal x7325=(cj5*r10);
IkReal x7326=(sj0*sj2);
IkReal x7327=(cj5*x7319);
IkReal x7328=((1.0)*x7319);
IkReal x7329=(cj5*x7320);
IkReal x7330=(x7321+x7322);
evalcond[0]=(((r22*x7320))+(((-1.0)*r21*x7319*x7323))+((r20*x7327)));
evalcond[1]=((((-1.0)*r22*x7328))+((r20*x7329))+(((-1.0)*r21*x7320*x7323)));
evalcond[2]=(x7330+((r00*x7327))+(((-1.0)*r01*x7319*x7323))+((r02*x7320)));
evalcond[3]=(x7326+(((-1.0)*r11*x7319*x7323))+(((-1.0)*x7324))+((x7319*x7325))+((r12*x7320)));
evalcond[4]=(x7330+((x7320*x7325))+(((-1.0)*r11*x7320*x7323))+(((-1.0)*r12*x7328)));
evalcond[5]=(x7324+(((-1.0)*x7326))+((r00*x7329))+(((-1.0)*r01*x7320*x7323))+(((-1.0)*r02*x7328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7331=(cj0*cj2);
IkReal x7332=(sj0*sj2);
IkReal x7333=(r21*sj5);
IkReal x7334=(cj5*r20);
CheckValue<IkReal> x7335 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7331))+((r22*x7332)))),IkReal(((((-1.0)*x7331*x7333))+((x7332*x7333))+((x7331*x7334))+(((-1.0)*x7332*x7334)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7335.valid){
continue;
}
CheckValue<IkReal> x7336=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7335.value)+(((1.5707963267949)*(x7336.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7337=IKsin(j4);
IkReal x7338=IKcos(j4);
IkReal x7339=(cj2*sj0);
IkReal x7340=(cj0*sj2);
IkReal x7341=((1.0)*sj5);
IkReal x7342=(cj0*cj2);
IkReal x7343=(cj5*r10);
IkReal x7344=(sj0*sj2);
IkReal x7345=(cj5*x7337);
IkReal x7346=((1.0)*x7337);
IkReal x7347=(cj5*x7338);
IkReal x7348=(x7340+x7339);
evalcond[0]=(((r22*x7338))+((r20*x7345))+(((-1.0)*r21*x7337*x7341)));
evalcond[1]=((((-1.0)*r22*x7346))+(((-1.0)*r21*x7338*x7341))+((r20*x7347)));
evalcond[2]=(x7348+(((-1.0)*r01*x7337*x7341))+((r02*x7338))+((r00*x7345)));
evalcond[3]=(x7344+((r12*x7338))+((x7337*x7343))+(((-1.0)*r11*x7337*x7341))+(((-1.0)*x7342)));
evalcond[4]=(x7348+(((-1.0)*r12*x7346))+(((-1.0)*r11*x7338*x7341))+((x7338*x7343)));
evalcond[5]=(x7342+((r00*x7347))+(((-1.0)*r01*x7338*x7341))+(((-1.0)*r02*x7346))+(((-1.0)*x7344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x7349=((1.0)*r22);
IkReal x7350=(cj0*cj2);
IkReal x7351=(sj0*sj2);
IkReal x7352=(cj5*r20);
IkReal x7353=((1.0)*r21*sj5);
IkReal x7354=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7354;
j4eval[1]=IKsign(x7354);
j4eval[2]=((IKabs(((((-1.0)*x7351*x7353))+((x7350*x7352))+(((-1.0)*x7350*x7353))+((x7351*x7352)))))+(IKabs(((((-1.0)*x7349*x7350))+(((-1.0)*x7349*x7351))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x7355=((1.0)*cj5);
IkReal x7356=(r21*sj5);
IkReal x7357=(cj2*sj0);
IkReal x7358=(cj0*sj2);
IkReal x7359=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7355)));
j4eval[0]=x7359;
j4eval[1]=IKsign(x7359);
j4eval[2]=((IKabs((((x7356*x7357))+(((-1.0)*r20*x7355*x7357))+((cj5*r20*x7358))+(((-1.0)*x7356*x7358)))))+(IKabs(((((-1.0)*r22*x7358))+((r22*x7357))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x7360=cj5*cj5;
IkReal x7361=(cj0*sj2);
IkReal x7362=((1.0)*sj5);
IkReal x7363=(cj5*r20);
IkReal x7364=(cj2*sj0);
IkReal x7365=(r11*r21);
IkReal x7366=((((-1.0)*x7360*x7365))+x7365+(((-1.0)*r11*x7362*x7363))+((r12*r22))+((r10*r20*x7360))+(((-1.0)*cj5*r10*r21*x7362)));
j4eval[0]=x7366;
j4eval[1]=IKsign(x7366);
j4eval[2]=((IKabs(((((-1.0)*r22*x7364))+((r22*x7361)))))+(IKabs((((x7363*x7364))+(((-1.0)*r21*x7362*x7364))+((r21*sj5*x7361))+(((-1.0)*x7361*x7363))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7367=cj5*cj5;
IkReal x7368=(cj0*sj2);
IkReal x7369=((1.0)*sj5);
IkReal x7370=(cj5*r20);
IkReal x7371=(cj2*sj0);
IkReal x7372=(r11*r21);
CheckValue<IkReal> x7373=IKPowWithIntegerCheck(IKsign((x7372+((r12*r22))+((r10*r20*x7367))+(((-1.0)*x7367*x7372))+(((-1.0)*r11*x7369*x7370))+(((-1.0)*cj5*r10*r21*x7369)))),-1);
if(!x7373.valid){
continue;
}
CheckValue<IkReal> x7374 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7371))+((r22*x7368)))),IkReal(((((-1.0)*r21*x7369*x7371))+((x7370*x7371))+((r21*sj5*x7368))+(((-1.0)*x7368*x7370)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7373.value)))+(x7374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7375=IKsin(j4);
IkReal x7376=IKcos(j4);
IkReal x7377=((1.0)*sj5);
IkReal x7378=((1.0)*cj0);
IkReal x7379=(cj5*r10);
IkReal x7380=((1.0)*sj0);
IkReal x7381=(cj2*x7378);
IkReal x7382=(sj2*x7380);
IkReal x7383=(cj5*x7375);
IkReal x7384=((1.0)*x7375);
IkReal x7385=(cj5*x7376);
IkReal x7386=(x7382+x7381);
evalcond[0]=(((r20*x7383))+(((-1.0)*r21*x7375*x7377))+((r22*x7376)));
evalcond[1]=((((-1.0)*r22*x7384))+((r20*x7385))+(((-1.0)*r21*x7376*x7377)));
evalcond[2]=((((-1.0)*sj2*x7378))+((r02*x7376))+((cj2*sj0))+(((-1.0)*r01*x7375*x7377))+((r00*x7383)));
evalcond[3]=(((r12*x7376))+((x7375*x7379))+(((-1.0)*x7386))+(((-1.0)*r11*x7375*x7377)));
evalcond[4]=(((x7376*x7379))+(((-1.0)*r11*x7376*x7377))+(((-1.0)*r12*x7384))+(((-1.0)*cj2*x7380))+((cj0*sj2)));
evalcond[5]=((((-1.0)*r02*x7384))+(((-1.0)*r01*x7376*x7377))+(((-1.0)*x7386))+((r00*x7385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7387=((1.0)*cj5);
IkReal x7388=(r21*sj5);
IkReal x7389=(cj2*sj0);
IkReal x7390=(cj0*sj2);
CheckValue<IkReal> x7391=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7387)))),-1);
if(!x7391.valid){
continue;
}
CheckValue<IkReal> x7392 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7390))+((r22*x7389)))),IkReal(((((-1.0)*r20*x7387*x7389))+(((-1.0)*x7388*x7390))+((cj5*r20*x7390))+((x7388*x7389)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7391.value)))+(x7392.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7393=IKsin(j4);
IkReal x7394=IKcos(j4);
IkReal x7395=((1.0)*sj5);
IkReal x7396=((1.0)*cj0);
IkReal x7397=(cj5*r10);
IkReal x7398=((1.0)*sj0);
IkReal x7399=(cj2*x7396);
IkReal x7400=(sj2*x7398);
IkReal x7401=(cj5*x7393);
IkReal x7402=((1.0)*x7393);
IkReal x7403=(cj5*x7394);
IkReal x7404=(x7399+x7400);
evalcond[0]=(((r20*x7401))+(((-1.0)*r21*x7393*x7395))+((r22*x7394)));
evalcond[1]=(((r20*x7403))+(((-1.0)*r21*x7394*x7395))+(((-1.0)*r22*x7402)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*sj2*x7396))+((r02*x7394))+((r00*x7401))+(((-1.0)*r01*x7393*x7395)));
evalcond[3]=((((-1.0)*r11*x7393*x7395))+(((-1.0)*x7404))+((r12*x7394))+((x7393*x7397)));
evalcond[4]=((((-1.0)*cj2*x7398))+(((-1.0)*r12*x7402))+(((-1.0)*r11*x7394*x7395))+((cj0*sj2))+((x7394*x7397)));
evalcond[5]=((((-1.0)*r01*x7394*x7395))+(((-1.0)*x7404))+((r00*x7403))+(((-1.0)*r02*x7402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7405=((1.0)*r22);
IkReal x7406=(cj0*cj2);
IkReal x7407=(sj0*sj2);
IkReal x7408=(cj5*r20);
IkReal x7409=((1.0)*r21*sj5);
CheckValue<IkReal> x7410 = IKatan2WithCheck(IkReal(((((-1.0)*x7405*x7407))+(((-1.0)*x7405*x7406)))),IkReal((((x7406*x7408))+(((-1.0)*x7407*x7409))+((x7407*x7408))+(((-1.0)*x7406*x7409)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7410.valid){
continue;
}
CheckValue<IkReal> x7411=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7410.value)+(((1.5707963267949)*(x7411.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7412=IKsin(j4);
IkReal x7413=IKcos(j4);
IkReal x7414=((1.0)*sj5);
IkReal x7415=((1.0)*cj0);
IkReal x7416=(cj5*r10);
IkReal x7417=((1.0)*sj0);
IkReal x7418=(cj2*x7415);
IkReal x7419=(sj2*x7417);
IkReal x7420=(cj5*x7412);
IkReal x7421=((1.0)*x7412);
IkReal x7422=(cj5*x7413);
IkReal x7423=(x7418+x7419);
evalcond[0]=((((-1.0)*r21*x7412*x7414))+((r20*x7420))+((r22*x7413)));
evalcond[1]=((((-1.0)*r22*x7421))+((r20*x7422))+(((-1.0)*r21*x7413*x7414)));
evalcond[2]=((((-1.0)*r01*x7412*x7414))+((cj2*sj0))+((r00*x7420))+((r02*x7413))+(((-1.0)*sj2*x7415)));
evalcond[3]=((((-1.0)*r11*x7412*x7414))+(((-1.0)*x7423))+((r12*x7413))+((x7412*x7416)));
evalcond[4]=(((x7413*x7416))+(((-1.0)*cj2*x7417))+(((-1.0)*r12*x7421))+(((-1.0)*r11*x7413*x7414))+((cj0*sj2)));
evalcond[5]=((((-1.0)*r01*x7413*x7414))+((r00*x7422))+(((-1.0)*r02*x7421))+(((-1.0)*x7423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7424=((-1.0)*r10);
IkReal x7426 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7426)==0){
continue;
}
IkReal x7425=pow(x7426,-0.5);
CheckValue<IkReal> x7427 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7424),IKFAST_ATAN2_MAGTHRESH);
if(!x7427.valid){
continue;
}
IkReal gconst30=((-1.0)*(x7427.value));
IkReal gconst31=(r11*x7425);
IkReal gconst32=(x7424*x7425);
CheckValue<IkReal> x7428 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7428.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7428.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7429=(gconst31*r21);
IkReal x7430=(sj1*sj2);
IkReal x7431=(gconst32*r20);
IkReal x7432=(cj2*sj1);
CheckValue<IkReal> x7433=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7429*x7429)+(x7431*x7431)+(((-2.0)*x7429*x7431)))),-1);
if(!x7433.valid){
continue;
}
CheckValue<IkReal> x7434 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7432))+((x7430*x7431))+(((-1.0)*x7429*x7430)))),IkReal((((x7431*x7432))+((r22*x7430))+(((-1.0)*x7429*x7432)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7433.value)))+(x7434.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7435=IKsin(j4);
IkReal x7436=IKcos(j4);
IkReal x7437=(cj1*cj2);
IkReal x7438=((1.0)*sj1);
IkReal x7439=(gconst31*r01);
IkReal x7440=(cj0*sj2);
IkReal x7441=(sj0*sj2);
IkReal x7442=(gconst31*r11);
IkReal x7443=((1.0)*gconst31*r21);
IkReal x7444=(gconst32*x7435);
IkReal x7445=(gconst32*x7436);
IkReal x7446=((1.0)*x7435);
IkReal x7447=((1.0)*x7436);
evalcond[0]=(((r20*x7444))+(((-1.0)*x7435*x7443))+(((-1.0)*sj2*x7438))+((r22*x7436)));
evalcond[1]=((((-1.0)*x7436*x7443))+((r20*x7445))+(((-1.0)*cj2*x7438))+(((-1.0)*r22*x7446)));
evalcond[2]=(((cj2*sj0))+((cj1*x7440))+((r02*x7436))+((r00*x7444))+(((-1.0)*x7439*x7446)));
evalcond[3]=(((cj1*x7441))+(((-1.0)*x7442*x7446))+((r12*x7436))+((r10*x7444))+(((-1.0)*cj0*cj2)));
evalcond[4]=((((-1.0)*x7442*x7447))+((r10*x7445))+x7440+((sj0*x7437))+(((-1.0)*r12*x7446)));
evalcond[5]=((((-1.0)*x7441))+((cj0*x7437))+((r00*x7445))+(((-1.0)*r02*x7446))+(((-1.0)*x7439*x7447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7448=((-1.0)*r11);
IkReal x7450 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7450)==0){
continue;
}
IkReal x7449=pow(x7450,-0.5);
CheckValue<IkReal> x7451 = IKatan2WithCheck(IkReal(x7448),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7451.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x7451.value))));
IkReal gconst34=(x7448*x7449);
IkReal gconst35=((1.0)*r10*x7449);
CheckValue<IkReal> x7452 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7452.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7452.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7453=(cj2*sj1);
IkReal x7454=(gconst35*r20);
IkReal x7455=(sj1*sj2);
IkReal x7456=((1.0)*gconst34*r21);
CheckValue<IkReal> x7457 = IKatan2WithCheck(IkReal((((x7454*x7455))+(((-1.0)*x7455*x7456))+(((-1.0)*r22*x7453)))),IkReal(((((-1.0)*x7453*x7456))+((r22*x7455))+((x7453*x7454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7457.valid){
continue;
}
CheckValue<IkReal> x7458=IKPowWithIntegerCheck(IKsign(((((gconst34*gconst34)*(r21*r21)))+(r22*r22)+(((-2.0)*gconst34*r21*x7454))+(x7454*x7454))),-1);
if(!x7458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7457.value)+(((1.5707963267949)*(x7458.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7459=IKsin(j4);
IkReal x7460=IKcos(j4);
IkReal x7461=(cj1*cj2);
IkReal x7462=((1.0)*gconst34);
IkReal x7463=(sj0*sj2);
IkReal x7464=((1.0)*cj2);
IkReal x7465=(cj0*sj2);
IkReal x7466=(gconst35*x7459);
IkReal x7467=((1.0)*x7459);
IkReal x7468=(gconst35*x7460);
evalcond[0]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x7459*x7462))+((r20*x7466))+((r22*x7460)));
evalcond[1]=((((-1.0)*r22*x7467))+((r20*x7468))+(((-1.0)*r21*x7460*x7462))+(((-1.0)*sj1*x7464)));
evalcond[2]=(((cj2*sj0))+((r02*x7460))+((cj1*x7465))+((r00*x7466))+(((-1.0)*r01*x7459*x7462)));
evalcond[3]=((((-1.0)*cj0*x7464))+((r10*x7466))+(((-1.0)*r11*x7459*x7462))+((r12*x7460))+((cj1*x7463)));
evalcond[4]=(((r10*x7468))+(((-1.0)*r12*x7467))+((sj0*x7461))+(((-1.0)*r11*x7460*x7462))+x7465);
evalcond[5]=((((-1.0)*r02*x7467))+((cj0*x7461))+(((-1.0)*r01*x7460*x7462))+(((-1.0)*x7463))+((r00*x7468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7470 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7470)==0){
continue;
}
IkReal x7469=pow(x7470,-0.5);
CheckValue<IkReal> x7471 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7471.valid){
continue;
}
IkReal gconst36=((-1.0)*(x7471.value));
IkReal gconst37=((-1.0)*r01*x7469);
IkReal gconst38=(r00*x7469);
CheckValue<IkReal> x7472 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7472.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7472.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7473=(r22*sj1);
IkReal x7474=(gconst38*r20);
IkReal x7475=(gconst37*r21);
IkReal x7476=(cj2*sj1);
IkReal x7477=(sj1*sj2);
CheckValue<IkReal> x7478 = IKatan2WithCheck(IkReal((((x7474*x7477))+(((-1.0)*cj2*x7473))+(((-1.0)*x7475*x7477)))),IkReal((((x7474*x7476))+(((-1.0)*x7475*x7476))+((sj2*x7473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7478.valid){
continue;
}
CheckValue<IkReal> x7479=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7475*x7475)+(x7474*x7474)+(((-2.0)*x7474*x7475)))),-1);
if(!x7479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7478.value)+(((1.5707963267949)*(x7479.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7480=IKsin(j4);
IkReal x7481=IKcos(j4);
IkReal x7482=(gconst38*r10);
IkReal x7483=(cj2*sj0);
IkReal x7484=((1.0)*sj1);
IkReal x7485=(cj0*cj2);
IkReal x7486=(cj0*sj2);
IkReal x7487=(sj0*sj2);
IkReal x7488=(gconst38*x7481);
IkReal x7489=(gconst38*x7480);
IkReal x7490=((1.0)*x7480);
IkReal x7491=(gconst37*x7490);
IkReal x7492=((1.0)*gconst37*x7481);
evalcond[0]=(((r22*x7481))+(((-1.0)*sj2*x7484))+((r20*x7489))+(((-1.0)*r21*x7491)));
evalcond[1]=(((r20*x7488))+(((-1.0)*r21*x7492))+(((-1.0)*r22*x7490))+(((-1.0)*cj2*x7484)));
evalcond[2]=(((cj1*x7486))+((r00*x7489))+(((-1.0)*r01*x7491))+((r02*x7481))+x7483);
evalcond[3]=(((x7480*x7482))+((cj1*x7487))+(((-1.0)*x7485))+((r12*x7481))+(((-1.0)*r11*x7491)));
evalcond[4]=(((cj1*x7483))+(((-1.0)*r11*x7492))+(((-1.0)*r12*x7490))+x7486+((x7481*x7482)));
evalcond[5]=(((cj1*x7485))+(((-1.0)*x7487))+((r00*x7488))+(((-1.0)*r01*x7492))+(((-1.0)*r02*x7490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7494 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7494)==0){
continue;
}
IkReal x7493=pow(x7494,-0.5);
CheckValue<IkReal> x7495 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7495.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x7495.value))));
IkReal gconst40=((1.0)*r01*x7493);
IkReal gconst41=((-1.0)*r00*x7493);
CheckValue<IkReal> x7496 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7496.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7496.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7497=(r22*sj1);
IkReal x7498=(cj2*sj1);
IkReal x7499=(gconst41*r20);
IkReal x7500=(sj1*sj2);
IkReal x7501=((1.0)*gconst40*r21);
CheckValue<IkReal> x7502 = IKatan2WithCheck(IkReal(((((-1.0)*x7500*x7501))+(((-1.0)*cj2*x7497))+((x7499*x7500)))),IkReal((((sj2*x7497))+(((-1.0)*x7498*x7501))+((x7498*x7499)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7502.valid){
continue;
}
CheckValue<IkReal> x7503=IKPowWithIntegerCheck(IKsign(((((gconst40*gconst40)*(r21*r21)))+(r22*r22)+(x7499*x7499)+(((-2.0)*gconst40*r21*x7499)))),-1);
if(!x7503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7502.value)+(((1.5707963267949)*(x7503.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7504=IKsin(j4);
IkReal x7505=IKcos(j4);
IkReal x7506=((1.0)*gconst40);
IkReal x7507=(cj1*cj2);
IkReal x7508=((1.0)*sj1);
IkReal x7509=(cj0*sj2);
IkReal x7510=(sj0*sj2);
IkReal x7511=(gconst41*x7504);
IkReal x7512=((1.0)*x7504);
IkReal x7513=(gconst41*x7505);
evalcond[0]=(((r20*x7511))+(((-1.0)*sj2*x7508))+(((-1.0)*r21*x7504*x7506))+((r22*x7505)));
evalcond[1]=(((r20*x7513))+(((-1.0)*r21*x7505*x7506))+(((-1.0)*cj2*x7508))+(((-1.0)*r22*x7512)));
evalcond[2]=(((cj2*sj0))+((r00*x7511))+((r02*x7505))+(((-1.0)*r01*x7504*x7506))+((cj1*x7509)));
evalcond[3]=(((cj1*x7510))+((r12*x7505))+((r10*x7511))+(((-1.0)*r11*x7504*x7506))+(((-1.0)*cj0*cj2)));
evalcond[4]=(((sj0*x7507))+((r10*x7513))+x7509+(((-1.0)*r12*x7512))+(((-1.0)*r11*x7505*x7506)));
evalcond[5]=(((r00*x7513))+(((-1.0)*r01*x7505*x7506))+((cj0*x7507))+(((-1.0)*r02*x7512))+(((-1.0)*x7510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7514=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7514);
rxp1_1=(px*r21);
rxp1_2=(r11*x7514);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=IKsign(r02);
j4eval[2]=((IKabs((sj0*sj2)))+(IKabs((cj2*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7515=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7515);
rxp1_1=(px*r21);
rxp1_2=(r11*x7515);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x7516=(cj1*sj0);
IkReal x7517=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x7517;
j4eval[1]=((IKabs((sj2*x7516)))+(IKabs((cj2*x7516))));
j4eval[2]=IKsign(x7517);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7518=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7518);
rxp1_1=(px*r21);
rxp1_2=(r11*x7518);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7519=((-1.0)*sj0);
CheckValue<IkReal> x7520=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x7520.valid){
continue;
}
CheckValue<IkReal> x7521=IKPowWithIntegerCheck(r02,-1);
if(!x7521.valid){
continue;
}
if( IKabs((cj1*sj2*x7519*(x7520.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj2*x7519*(x7521.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*sj2*x7519*(x7520.value)))+IKsqr((cj2*x7519*(x7521.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj1*sj2*x7519*(x7520.value)), (cj2*x7519*(x7521.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7522=IKsin(j4);
IkReal x7523=IKcos(j4);
IkReal x7524=(cj2*sj0);
IkReal x7525=(sj0*sj2);
IkReal x7526=((1.0)*x7522);
IkReal x7527=(cj5*x7523);
IkReal x7528=(cj5*x7522);
IkReal x7529=((1.0)*sj5*x7523);
evalcond[0]=(((r02*x7523))+x7524);
evalcond[1]=((((-1.0)*r02*x7526))+(((-1.0)*x7525)));
evalcond[2]=(((r20*x7528))+(((-1.0)*r21*sj5*x7526)));
evalcond[3]=(((r20*x7527))+(((-1.0)*r21*x7529)));
evalcond[4]=(((cj1*x7525))+((r10*x7528))+(((-1.0)*r11*sj5*x7526)));
evalcond[5]=(((cj1*x7524))+((r10*x7527))+(((-1.0)*r11*x7529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7530=((-1.0)*cj1*sj0);
CheckValue<IkReal> x7531 = IKatan2WithCheck(IkReal((sj2*x7530)),IkReal((cj2*x7530)),IKFAST_ATAN2_MAGTHRESH);
if(!x7531.valid){
continue;
}
CheckValue<IkReal> x7532=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x7532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7531.value)+(((1.5707963267949)*(x7532.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7533=IKsin(j4);
IkReal x7534=IKcos(j4);
IkReal x7535=(cj2*sj0);
IkReal x7536=(sj0*sj2);
IkReal x7537=((1.0)*x7533);
IkReal x7538=(cj5*x7534);
IkReal x7539=(cj5*x7533);
IkReal x7540=((1.0)*sj5*x7534);
evalcond[0]=(x7535+((r02*x7534)));
evalcond[1]=((((-1.0)*x7536))+(((-1.0)*r02*x7537)));
evalcond[2]=((((-1.0)*r21*sj5*x7537))+((r20*x7539)));
evalcond[3]=(((r20*x7538))+(((-1.0)*r21*x7540)));
evalcond[4]=(((r10*x7539))+(((-1.0)*r11*sj5*x7537))+((cj1*x7536)));
evalcond[5]=(((r10*x7538))+((cj1*x7535))+(((-1.0)*r11*x7540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7541=((-1.0)*sj0);
CheckValue<IkReal> x7542=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x7542.valid){
continue;
}
CheckValue<IkReal> x7543 = IKatan2WithCheck(IkReal((sj2*x7541)),IkReal((cj2*x7541)),IKFAST_ATAN2_MAGTHRESH);
if(!x7543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7542.value)))+(x7543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7544=IKsin(j4);
IkReal x7545=IKcos(j4);
IkReal x7546=(cj2*sj0);
IkReal x7547=(sj0*sj2);
IkReal x7548=((1.0)*x7544);
IkReal x7549=(cj5*x7545);
IkReal x7550=(cj5*x7544);
IkReal x7551=((1.0)*sj5*x7545);
evalcond[0]=(((r02*x7545))+x7546);
evalcond[1]=((((-1.0)*x7547))+(((-1.0)*r02*x7548)));
evalcond[2]=((((-1.0)*r21*sj5*x7548))+((r20*x7550)));
evalcond[3]=(((r20*x7549))+(((-1.0)*r21*x7551)));
evalcond[4]=((((-1.0)*r11*sj5*x7548))+((r10*x7550))+((cj1*x7547)));
evalcond[5]=(((r10*x7549))+(((-1.0)*r11*x7551))+((cj1*x7546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7552=cj5*cj5;
IkReal x7553=r21*r21;
IkReal x7554=(sj1*sj2);
IkReal x7555=(r21*sj5);
IkReal x7556=(cj5*r20);
IkReal x7557=(cj2*sj1);
CheckValue<IkReal> x7558 = IKatan2WithCheck(IkReal(((((-1.0)*x7554*x7555))+(((-1.0)*r22*x7557))+((x7554*x7556)))),IkReal((((x7556*x7557))+((r22*x7554))+(((-1.0)*x7555*x7557)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7558.valid){
continue;
}
CheckValue<IkReal> x7559=IKPowWithIntegerCheck(IKsign(((r22*r22)+x7553+((x7552*(r20*r20)))+(((-2.0)*x7555*x7556))+(((-1.0)*x7552*x7553)))),-1);
if(!x7559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7558.value)+(((1.5707963267949)*(x7559.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7560=IKsin(j4);
IkReal x7561=IKcos(j4);
IkReal x7562=((1.0)*sj5);
IkReal x7563=(cj1*cj2);
IkReal x7564=(cj5*r10);
IkReal x7565=((1.0)*sj1);
IkReal x7566=(cj0*sj2);
IkReal x7567=(cj5*r00);
IkReal x7568=(cj5*r20);
IkReal x7569=(sj0*sj2);
IkReal x7570=((1.0)*x7560);
evalcond[0]=((((-1.0)*sj2*x7565))+((r22*x7561))+(((-1.0)*r21*x7560*x7562))+((x7560*x7568)));
evalcond[1]=((((-1.0)*r21*x7561*x7562))+((x7561*x7568))+(((-1.0)*r22*x7570))+(((-1.0)*cj2*x7565)));
evalcond[2]=(((cj2*sj0))+((r02*x7561))+((x7560*x7567))+((cj1*x7566))+(((-1.0)*r01*x7560*x7562)));
evalcond[3]=(((x7560*x7564))+((r12*x7561))+((cj1*x7569))+(((-1.0)*r11*x7560*x7562))+(((-1.0)*cj0*cj2)));
evalcond[4]=(((sj0*x7563))+((x7561*x7564))+x7566+(((-1.0)*r12*x7570))+(((-1.0)*r11*x7561*x7562)));
evalcond[5]=(((cj0*x7563))+(((-1.0)*x7569))+(((-1.0)*r02*x7570))+((x7561*x7567))+(((-1.0)*r01*x7561*x7562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7571=((1.0)*cj5);
IkReal x7572=(r21*sj5);
IkReal x7573=(cj2*sj0);
IkReal x7574=(sj1*sj2);
IkReal x7575=(cj0*cj1*sj2);
CheckValue<IkReal> x7576=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7571)))),-1);
if(!x7576.valid){
continue;
}
CheckValue<IkReal> x7577 = IKatan2WithCheck(IkReal((((r02*x7574))+((r22*x7573))+((r22*x7575)))),IkReal((((r01*sj5*x7574))+(((-1.0)*r20*x7571*x7573))+(((-1.0)*r20*x7571*x7575))+(((-1.0)*r00*x7571*x7574))+((x7572*x7575))+((x7572*x7573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7576.value)))+(x7577.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7578=IKsin(j4);
IkReal x7579=IKcos(j4);
IkReal x7580=((1.0)*sj5);
IkReal x7581=(cj1*cj2);
IkReal x7582=(cj5*r10);
IkReal x7583=((1.0)*sj1);
IkReal x7584=(cj0*sj2);
IkReal x7585=(cj5*r00);
IkReal x7586=(cj5*r20);
IkReal x7587=(sj0*sj2);
IkReal x7588=((1.0)*x7578);
evalcond[0]=((((-1.0)*sj2*x7583))+((x7578*x7586))+(((-1.0)*r21*x7578*x7580))+((r22*x7579)));
evalcond[1]=((((-1.0)*cj2*x7583))+((x7579*x7586))+(((-1.0)*r22*x7588))+(((-1.0)*r21*x7579*x7580)));
evalcond[2]=(((cj2*sj0))+((cj1*x7584))+((x7578*x7585))+((r02*x7579))+(((-1.0)*r01*x7578*x7580)));
evalcond[3]=(((cj1*x7587))+((r12*x7579))+(((-1.0)*r11*x7578*x7580))+((x7578*x7582))+(((-1.0)*cj0*cj2)));
evalcond[4]=(((x7579*x7582))+x7584+(((-1.0)*r12*x7588))+((sj0*x7581))+(((-1.0)*r11*x7579*x7580)));
evalcond[5]=((((-1.0)*x7587))+((x7579*x7585))+(((-1.0)*r02*x7588))+((cj0*x7581))+(((-1.0)*r01*x7579*x7580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7589=(sj1*sj2);
IkReal x7590=((1.0)*cj5);
IkReal x7591=(cj0*cj2);
IkReal x7592=(r21*sj5);
IkReal x7593=(cj1*sj0*sj2);
CheckValue<IkReal> x7594=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7594.valid){
continue;
}
CheckValue<IkReal> x7595 = IKatan2WithCheck(IkReal((((r12*x7589))+(((-1.0)*r22*x7591))+((r22*x7593)))),IkReal(((((-1.0)*r10*x7589*x7590))+((r11*sj5*x7589))+((cj5*r20*x7591))+((x7592*x7593))+(((-1.0)*x7591*x7592))+(((-1.0)*r20*x7590*x7593)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7594.value)))+(x7595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7596=IKsin(j4);
IkReal x7597=IKcos(j4);
IkReal x7598=((1.0)*sj5);
IkReal x7599=(cj1*cj2);
IkReal x7600=(cj5*r10);
IkReal x7601=((1.0)*sj1);
IkReal x7602=(cj0*sj2);
IkReal x7603=(cj5*r00);
IkReal x7604=(cj5*r20);
IkReal x7605=(sj0*sj2);
IkReal x7606=((1.0)*x7596);
evalcond[0]=(((x7596*x7604))+(((-1.0)*sj2*x7601))+(((-1.0)*r21*x7596*x7598))+((r22*x7597)));
evalcond[1]=((((-1.0)*r22*x7606))+(((-1.0)*r21*x7597*x7598))+(((-1.0)*cj2*x7601))+((x7597*x7604)));
evalcond[2]=(((cj2*sj0))+((x7596*x7603))+((cj1*x7602))+(((-1.0)*r01*x7596*x7598))+((r02*x7597)));
evalcond[3]=(((x7596*x7600))+((cj1*x7605))+(((-1.0)*r11*x7596*x7598))+((r12*x7597))+(((-1.0)*cj0*cj2)));
evalcond[4]=((((-1.0)*r11*x7597*x7598))+((x7597*x7600))+((sj0*x7599))+(((-1.0)*r12*x7606))+x7602);
evalcond[5]=(((x7597*x7603))+((cj0*x7599))+(((-1.0)*r02*x7606))+(((-1.0)*x7605))+(((-1.0)*r01*x7597*x7598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x7607=cj2*cj2;
IkReal x7608=(cj1*cj2);
IkReal x7609=(r00*sj5);
IkReal x7610=(cj5*r01);
IkReal x7611=(r10*sj5);
IkReal x7612=((1.0)*sj2);
IkReal x7613=(cj5*r11);
IkReal x7614=((1.0)+((x7607*(cj1*cj1)))+(((-1.0)*x7607)));
j0eval[0]=x7614;
j0eval[1]=((IKabs(((((-1.0)*x7610*x7612))+((x7608*x7613))+((x7608*x7611))+(((-1.0)*x7609*x7612)))))+(IKabs((((x7608*x7610))+((sj2*x7613))+((sj2*x7611))+((x7608*x7609))))));
j0eval[2]=IKsign(x7614);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x7615=cj5*cj5;
IkReal x7616=r21*r21;
IkReal x7617=(sj1*sj2);
IkReal x7618=(r21*sj5);
IkReal x7619=(cj5*r20);
IkReal x7620=((1.0)*cj1);
IkReal x7621=((r22*r22)+((x7615*(r20*r20)))+(((-1.0)*x7615*x7616))+(((-2.0)*x7618*x7619))+x7616);
j4eval[0]=x7621;
j4eval[1]=IKsign(x7621);
j4eval[2]=((IKabs(((((-1.0)*x7617*x7618))+((x7617*x7619))+(((-1.0)*r22*x7620)))))+(IKabs((((cj1*x7619))+((r22*x7617))+(((-1.0)*x7618*x7620))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x7622=cj2*cj2;
IkReal x7623=cj1*cj1;
IkReal x7624=(cj1*cj2);
IkReal x7625=((5453.0)*x7622);
j0eval[0]=((1.0)+(((-1.0)*x7622))+(((-1.0)*x7624))+(((962.772785622593)*sj1*x7624))+((x7622*x7623)));
j0eval[1]=IKsign(((5453.0)+(((-5453.0)*x7624))+(((-1.0)*x7625))+(((5250000.0)*sj1*x7624))+((x7623*x7625))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-2.5)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.5)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.5)*py))+IKsqr(((-2.5)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-2.5)*py), ((-2.5)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IKsin(j0))+(((2.5)*py)));
evalcond[1]=((IKcos(j0))+(((2.5)*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7626=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7626;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x7626);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7627=((1.0)*cj5);
IkReal x7628=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7627)));
j4eval[0]=x7628;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7627))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7628);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7629=r21*r21;
IkReal x7630=cj5*cj5;
IkReal x7631=(r21*sj5);
IkReal x7632=(cj5*r20);
IkReal x7633=((((-1.0)*x7629))+(((2.0)*x7631*x7632))+((x7629*x7630))+(((-1.0)*(r22*r22)))+(((-1.0)*x7630*(r20*r20))));
j4eval[0]=x7633;
j4eval[1]=((IKabs(((((-1.0)*x7632))+x7631)))+(IKabs(r22)));
j4eval[2]=IKsign(x7633);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7634=r21*r21;
IkReal x7635=cj5*cj5;
IkReal x7636=(r21*sj5);
IkReal x7637=(cj5*r20);
CheckValue<IkReal> x7638 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7637))+x7636)),IKFAST_ATAN2_MAGTHRESH);
if(!x7638.valid){
continue;
}
CheckValue<IkReal> x7639=IKPowWithIntegerCheck(IKsign((((x7634*x7635))+(((2.0)*x7636*x7637))+(((-1.0)*(r22*r22)))+(((-1.0)*x7635*(r20*r20)))+(((-1.0)*x7634)))),-1);
if(!x7639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7638.value)+(((1.5707963267949)*(x7639.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7640=IKsin(j4);
IkReal x7641=IKcos(j4);
IkReal x7642=(cj5*r00);
IkReal x7643=(cj5*r10);
IkReal x7644=(cj5*r20);
IkReal x7645=((1.0)*x7641);
IkReal x7646=(sj5*x7641);
IkReal x7647=((1.0)*sj5*x7640);
evalcond[0]=(((r22*x7641))+((x7640*x7644))+(((-1.0)*r21*x7647)));
evalcond[1]=(((r02*x7640))+(((-1.0)*x7642*x7645))+((r01*x7646)));
evalcond[2]=(((r12*x7640))+(((-1.0)*x7643*x7645))+((r11*x7646)));
evalcond[3]=(sj0+(((-1.0)*r01*x7647))+((r02*x7641))+((x7640*x7642)));
evalcond[4]=((1.0)+((r22*x7640))+(((-1.0)*x7644*x7645))+((r21*x7646)));
evalcond[5]=(((r12*x7641))+((x7640*x7643))+(((-1.0)*r11*x7647))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7648=((1.0)*cj5);
CheckValue<IkReal> x7649=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7648)))),-1);
if(!x7649.valid){
continue;
}
CheckValue<IkReal> x7650 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7649.value)))+(x7650.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7651=IKsin(j4);
IkReal x7652=IKcos(j4);
IkReal x7653=(cj5*r00);
IkReal x7654=(cj5*r10);
IkReal x7655=(cj5*r20);
IkReal x7656=((1.0)*x7652);
IkReal x7657=(sj5*x7652);
IkReal x7658=((1.0)*sj5*x7651);
evalcond[0]=((((-1.0)*r21*x7658))+((r22*x7652))+((x7651*x7655)));
evalcond[1]=(((r02*x7651))+(((-1.0)*x7653*x7656))+((r01*x7657)));
evalcond[2]=(((r11*x7657))+(((-1.0)*x7654*x7656))+((r12*x7651)));
evalcond[3]=(sj0+((x7651*x7653))+((r02*x7652))+(((-1.0)*r01*x7658)));
evalcond[4]=((1.0)+((r22*x7651))+((r21*x7657))+(((-1.0)*x7655*x7656)));
evalcond[5]=(((x7651*x7654))+(((-1.0)*r11*x7658))+(((-1.0)*cj0))+((r12*x7652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7659 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7659.valid){
continue;
}
CheckValue<IkReal> x7660=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7659.value)+(((1.5707963267949)*(x7660.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7661=IKsin(j4);
IkReal x7662=IKcos(j4);
IkReal x7663=(cj5*r00);
IkReal x7664=(cj5*r10);
IkReal x7665=(cj5*r20);
IkReal x7666=((1.0)*x7662);
IkReal x7667=(sj5*x7662);
IkReal x7668=((1.0)*sj5*x7661);
evalcond[0]=(((x7661*x7665))+((r22*x7662))+(((-1.0)*r21*x7668)));
evalcond[1]=(((r01*x7667))+(((-1.0)*x7663*x7666))+((r02*x7661)));
evalcond[2]=(((r12*x7661))+((r11*x7667))+(((-1.0)*x7664*x7666)));
evalcond[3]=(sj0+(((-1.0)*r01*x7668))+((x7661*x7663))+((r02*x7662)));
evalcond[4]=((1.0)+((r21*x7667))+((r22*x7661))+(((-1.0)*x7665*x7666)));
evalcond[5]=((((-1.0)*r11*x7668))+((r12*x7662))+((x7661*x7664))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((2.38342796813528)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.38342796813528)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.38342796813528)*py))+IKsqr(((2.38342796813528)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((2.38342796813528)*py), ((2.38342796813528)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.41956376)*(IKcos(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.41956376)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7669=((1.0)*cj5);
IkReal x7670=((((-1.0)*r11*x7669))+(((-1.0)*r10*sj5)));
j4eval[0]=x7670;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7669))))));
j4eval[2]=IKsign(x7670);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7671=cj5*cj5;
IkReal x7672=((1.0)*r20);
IkReal x7673=(r01*r21);
IkReal x7674=(r21*sj5);
IkReal x7675=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x7671*x7672))+((x7671*x7673))+((cj5*r00*x7674))+(((-1.0)*x7673)));
j4eval[0]=x7675;
j4eval[1]=((IKabs((((cj0*x7674))+(((-1.0)*cj0*cj5*x7672)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7675);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7676=cj5*cj5;
IkReal x7677=(r11*r21);
IkReal x7678=((1.0)*r20);
IkReal x7679=(cj5*sj5);
IkReal x7680=((((-1.0)*r12*r22))+((r11*r20*x7679))+((r10*r21*x7679))+(((-1.0)*r10*x7676*x7678))+((x7676*x7677))+(((-1.0)*x7677)));
j4eval[0]=x7680;
j4eval[1]=((IKabs(((((-1.0)*cj5*sj0*x7678))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7680);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7681=cj5*cj5;
IkReal x7682=(r11*r21);
IkReal x7683=((1.0)*r20);
IkReal x7684=(cj5*sj5);
CheckValue<IkReal> x7685 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*sj0*x7683))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7685.valid){
continue;
}
CheckValue<IkReal> x7686=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7681*x7683))+((x7681*x7682))+((r10*r21*x7684))+((r11*r20*x7684))+(((-1.0)*r12*r22))+(((-1.0)*x7682)))),-1);
if(!x7686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7685.value)+(((1.5707963267949)*(x7686.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7687=IKsin(j4);
IkReal x7688=IKcos(j4);
IkReal x7689=(cj5*r00);
IkReal x7690=(r01*sj5);
IkReal x7691=(r11*sj5);
IkReal x7692=(cj5*r20);
IkReal x7693=(r21*sj5);
IkReal x7694=(cj5*r10);
IkReal x7695=((1.0)*x7688);
IkReal x7696=((1.0)*x7687);
evalcond[0]=((((-1.0)*x7693*x7696))+((x7687*x7692))+((r22*x7688)));
evalcond[1]=(((r22*x7687))+(((-1.0)*x7692*x7695))+((x7688*x7693)));
evalcond[2]=(((x7687*x7689))+sj0+(((-1.0)*x7690*x7696))+((r02*x7688)));
evalcond[3]=(cj0+(((-1.0)*x7689*x7695))+((r02*x7687))+((x7688*x7690)));
evalcond[4]=(sj0+((r12*x7687))+(((-1.0)*x7694*x7695))+((x7688*x7691)));
evalcond[5]=((((-1.0)*x7691*x7696))+((x7687*x7694))+((r12*x7688))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7697=cj5*cj5;
IkReal x7698=((1.0)*r20);
IkReal x7699=(r01*r21);
IkReal x7700=(r21*sj5);
CheckValue<IkReal> x7701=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x7700))+(((-1.0)*x7699))+((x7697*x7699))+(((-1.0)*r00*x7697*x7698)))),-1);
if(!x7701.valid){
continue;
}
CheckValue<IkReal> x7702 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x7698))+((cj0*x7700)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7701.value)))+(x7702.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7703=IKsin(j4);
IkReal x7704=IKcos(j4);
IkReal x7705=(cj5*r00);
IkReal x7706=(r01*sj5);
IkReal x7707=(r11*sj5);
IkReal x7708=(cj5*r20);
IkReal x7709=(r21*sj5);
IkReal x7710=(cj5*r10);
IkReal x7711=((1.0)*x7704);
IkReal x7712=((1.0)*x7703);
evalcond[0]=(((x7703*x7708))+((r22*x7704))+(((-1.0)*x7709*x7712)));
evalcond[1]=((((-1.0)*x7708*x7711))+((x7704*x7709))+((r22*x7703)));
evalcond[2]=(((x7703*x7705))+sj0+((r02*x7704))+(((-1.0)*x7706*x7712)));
evalcond[3]=(cj0+((r02*x7703))+(((-1.0)*x7705*x7711))+((x7704*x7706)));
evalcond[4]=(((r12*x7703))+sj0+((x7704*x7707))+(((-1.0)*x7710*x7711)));
evalcond[5]=(((x7703*x7710))+((r12*x7704))+(((-1.0)*x7707*x7712))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7713=((1.0)*cj5);
CheckValue<IkReal> x7714 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7713))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7714.valid){
continue;
}
CheckValue<IkReal> x7715=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7713))+(((-1.0)*r10*sj5)))),-1);
if(!x7715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7714.value)+(((1.5707963267949)*(x7715.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7716=IKsin(j4);
IkReal x7717=IKcos(j4);
IkReal x7718=(cj5*r00);
IkReal x7719=(r01*sj5);
IkReal x7720=(r11*sj5);
IkReal x7721=(cj5*r20);
IkReal x7722=(r21*sj5);
IkReal x7723=(cj5*r10);
IkReal x7724=((1.0)*x7717);
IkReal x7725=((1.0)*x7716);
evalcond[0]=(((x7716*x7721))+((r22*x7717))+(((-1.0)*x7722*x7725)));
evalcond[1]=(((x7717*x7722))+((r22*x7716))+(((-1.0)*x7721*x7724)));
evalcond[2]=(sj0+((r02*x7717))+(((-1.0)*x7719*x7725))+((x7716*x7718)));
evalcond[3]=(((r02*x7716))+cj0+(((-1.0)*x7718*x7724))+((x7717*x7719)));
evalcond[4]=(sj0+((r12*x7716))+((x7717*x7720))+(((-1.0)*x7723*x7724)));
evalcond[5]=(((r12*x7717))+((x7716*x7723))+(((-1.0)*x7720*x7725))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((2.38342796813528)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.38342796813528)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.38342796813528)*py))+IKsqr(((2.38342796813528)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((2.38342796813528)*py), ((2.38342796813528)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.41956376)*(IKcos(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.41956376)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7726=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7726;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7726);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7727=cj5*cj5;
IkReal x7728=((1.0)*r20);
IkReal x7729=(r01*r21);
IkReal x7730=(r21*sj5);
IkReal x7731=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x7730))+(((-1.0)*r00*x7727*x7728))+(((-1.0)*x7729))+((x7727*x7729)));
j4eval[0]=x7731;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x7728))+((cj0*x7730))))));
j4eval[2]=IKsign(x7731);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7732=cj5*cj5;
IkReal x7733=(r11*r21);
IkReal x7734=((1.0)*r20);
IkReal x7735=(cj5*sj5);
IkReal x7736=(((r11*r20*x7735))+(((-1.0)*x7733))+((r10*r21*x7735))+((x7732*x7733))+(((-1.0)*r12*r22))+(((-1.0)*r10*x7732*x7734)));
j4eval[0]=x7736;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x7734)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7736);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7737=cj5*cj5;
IkReal x7738=(r11*r21);
IkReal x7739=((1.0)*r20);
IkReal x7740=(cj5*sj5);
CheckValue<IkReal> x7741 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*cj5*sj0*x7739)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7741.valid){
continue;
}
CheckValue<IkReal> x7742=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7738))+((r11*r20*x7740))+(((-1.0)*r12*r22))+(((-1.0)*r10*x7737*x7739))+((r10*r21*x7740))+((x7737*x7738)))),-1);
if(!x7742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7741.value)+(((1.5707963267949)*(x7742.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7743=IKsin(j4);
IkReal x7744=IKcos(j4);
IkReal x7745=(cj5*r00);
IkReal x7746=(cj5*r10);
IkReal x7747=(cj5*r20);
IkReal x7748=((1.0)*x7744);
IkReal x7749=(sj5*x7744);
IkReal x7750=((1.0)*sj5*x7743);
evalcond[0]=(((x7743*x7747))+(((-1.0)*r21*x7750))+((r22*x7744)));
evalcond[1]=((((-1.0)*x7747*x7748))+((r22*x7743))+((r21*x7749)));
evalcond[2]=(((r12*x7744))+cj0+((x7743*x7746))+(((-1.0)*r11*x7750)));
evalcond[3]=(((r01*x7749))+cj0+((r02*x7743))+(((-1.0)*x7745*x7748)));
evalcond[4]=(((r12*x7743))+sj0+(((-1.0)*x7746*x7748))+((r11*x7749)));
evalcond[5]=((((-1.0)*sj0))+((x7743*x7745))+(((-1.0)*r01*x7750))+((r02*x7744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7751=cj5*cj5;
IkReal x7752=((1.0)*r20);
IkReal x7753=(r01*r21);
IkReal x7754=(r21*sj5);
CheckValue<IkReal> x7755=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x7754))+(((-1.0)*x7753))+((x7751*x7753))+(((-1.0)*r00*x7751*x7752)))),-1);
if(!x7755.valid){
continue;
}
CheckValue<IkReal> x7756 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x7752))+((cj0*x7754)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7755.value)))+(x7756.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7757=IKsin(j4);
IkReal x7758=IKcos(j4);
IkReal x7759=(cj5*r00);
IkReal x7760=(cj5*r10);
IkReal x7761=(cj5*r20);
IkReal x7762=((1.0)*x7758);
IkReal x7763=(sj5*x7758);
IkReal x7764=((1.0)*sj5*x7757);
evalcond[0]=(((x7757*x7761))+(((-1.0)*r21*x7764))+((r22*x7758)));
evalcond[1]=((((-1.0)*x7761*x7762))+((r21*x7763))+((r22*x7757)));
evalcond[2]=(cj0+(((-1.0)*r11*x7764))+((x7757*x7760))+((r12*x7758)));
evalcond[3]=(cj0+((r02*x7757))+(((-1.0)*x7759*x7762))+((r01*x7763)));
evalcond[4]=((((-1.0)*x7760*x7762))+sj0+((r11*x7763))+((r12*x7757)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x7764))+((r02*x7758))+((x7757*x7759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7765=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7765.valid){
continue;
}
CheckValue<IkReal> x7766 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7765.value)))+(x7766.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7767=IKsin(j4);
IkReal x7768=IKcos(j4);
IkReal x7769=(cj5*r00);
IkReal x7770=(cj5*r10);
IkReal x7771=(cj5*r20);
IkReal x7772=((1.0)*x7768);
IkReal x7773=(sj5*x7768);
IkReal x7774=((1.0)*sj5*x7767);
evalcond[0]=(((r22*x7768))+((x7767*x7771))+(((-1.0)*r21*x7774)));
evalcond[1]=((((-1.0)*x7771*x7772))+((r22*x7767))+((r21*x7773)));
evalcond[2]=(((x7767*x7770))+cj0+(((-1.0)*r11*x7774))+((r12*x7768)));
evalcond[3]=((((-1.0)*x7769*x7772))+cj0+((r02*x7767))+((r01*x7773)));
evalcond[4]=(((r11*x7773))+sj0+(((-1.0)*x7770*x7772))+((r12*x7767)));
evalcond[5]=(((x7767*x7769))+(((-1.0)*sj0))+(((-1.0)*r01*x7774))+((r02*x7768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-2.5)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.5)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.5)*py))+IKsqr(((-2.5)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-2.5)*py), ((-2.5)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((IKsin(j0))+(((2.5)*py)));
evalcond[1]=((IKcos(j0))+(((2.5)*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7775=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7775;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7775);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7776=((1.0)*cj5);
IkReal x7777=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7776)));
j4eval[0]=x7777;
j4eval[1]=IKsign(x7777);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7776))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7778=cj5*cj5;
IkReal x7779=r21*r21;
IkReal x7780=(r21*sj5);
IkReal x7781=(cj5*r20);
IkReal x7782=((r22*r22)+(((-2.0)*x7780*x7781))+(((-1.0)*x7778*x7779))+((x7778*(r20*r20)))+x7779);
j4eval[0]=x7782;
j4eval[1]=IKsign(x7782);
j4eval[2]=((IKabs((x7780+(((-1.0)*x7781)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7783=cj5*cj5;
IkReal x7784=r21*r21;
IkReal x7785=(r21*sj5);
IkReal x7786=(cj5*r20);
CheckValue<IkReal> x7787=IKPowWithIntegerCheck(IKsign((((x7783*(r20*r20)))+(r22*r22)+(((-2.0)*x7785*x7786))+(((-1.0)*x7783*x7784))+x7784)),-1);
if(!x7787.valid){
continue;
}
CheckValue<IkReal> x7788 = IKatan2WithCheck(IkReal(r22),IkReal((x7785+(((-1.0)*x7786)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7787.value)))+(x7788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7789=IKsin(j4);
IkReal x7790=IKcos(j4);
IkReal x7791=(cj5*r00);
IkReal x7792=(cj5*r10);
IkReal x7793=(cj5*r20);
IkReal x7794=((1.0)*x7790);
IkReal x7795=(sj5*x7790);
IkReal x7796=((1.0)*sj5*x7789);
evalcond[0]=(((x7789*x7793))+(((-1.0)*r21*x7796))+((r22*x7790)));
evalcond[1]=((((-1.0)*x7791*x7794))+((r01*x7795))+((r02*x7789)));
evalcond[2]=((((-1.0)*x7792*x7794))+((r12*x7789))+((r11*x7795)));
evalcond[3]=(cj0+((x7789*x7792))+(((-1.0)*r11*x7796))+((r12*x7790)));
evalcond[4]=((-1.0)+(((-1.0)*x7793*x7794))+((r22*x7789))+((r21*x7795)));
evalcond[5]=((((-1.0)*sj0))+((x7789*x7791))+((r02*x7790))+(((-1.0)*r01*x7796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7797=((1.0)*cj5);
CheckValue<IkReal> x7798=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7797)))),-1);
if(!x7798.valid){
continue;
}
CheckValue<IkReal> x7799 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x7797)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7798.value)))+(x7799.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7800=IKsin(j4);
IkReal x7801=IKcos(j4);
IkReal x7802=(cj5*r00);
IkReal x7803=(cj5*r10);
IkReal x7804=(cj5*r20);
IkReal x7805=((1.0)*x7801);
IkReal x7806=(sj5*x7801);
IkReal x7807=((1.0)*sj5*x7800);
evalcond[0]=(((x7800*x7804))+(((-1.0)*r21*x7807))+((r22*x7801)));
evalcond[1]=(((r01*x7806))+(((-1.0)*x7802*x7805))+((r02*x7800)));
evalcond[2]=(((r11*x7806))+((r12*x7800))+(((-1.0)*x7803*x7805)));
evalcond[3]=(((x7800*x7803))+cj0+(((-1.0)*r11*x7807))+((r12*x7801)));
evalcond[4]=((-1.0)+((r21*x7806))+((r22*x7800))+(((-1.0)*x7804*x7805)));
evalcond[5]=((((-1.0)*sj0))+((x7800*x7802))+((r02*x7801))+(((-1.0)*r01*x7807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7808=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7808.valid){
continue;
}
CheckValue<IkReal> x7809 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7808.value)))+(x7809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7810=IKsin(j4);
IkReal x7811=IKcos(j4);
IkReal x7812=(cj5*r00);
IkReal x7813=(cj5*r10);
IkReal x7814=(cj5*r20);
IkReal x7815=((1.0)*x7811);
IkReal x7816=(sj5*x7811);
IkReal x7817=((1.0)*sj5*x7810);
evalcond[0]=((((-1.0)*r21*x7817))+((x7810*x7814))+((r22*x7811)));
evalcond[1]=(((r02*x7810))+(((-1.0)*x7812*x7815))+((r01*x7816)));
evalcond[2]=(((r11*x7816))+((r12*x7810))+(((-1.0)*x7813*x7815)));
evalcond[3]=(cj0+((r12*x7811))+((x7810*x7813))+(((-1.0)*r11*x7817)));
evalcond[4]=((-1.0)+(((-1.0)*x7814*x7815))+((r21*x7816))+((r22*x7810)));
evalcond[5]=((((-1.0)*sj0))+((r02*x7811))+((x7810*x7812))+(((-1.0)*r01*x7817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-2.37848193105333)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.37848193105333)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.37848193105333)*py))+IKsqr(((-2.37848193105333)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-2.37848193105333)*py), ((-2.37848193105333)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.42043624)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((-0.42043624)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7818=((1.0)*cj5);
IkReal x7819=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7818)));
j4eval[0]=x7819;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7818))))));
j4eval[2]=IKsign(x7819);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7820=((1.0)*cj5);
IkReal x7821=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7820)));
j4eval[0]=x7821;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7820)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7821);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7822=cj5*cj5;
IkReal x7823=((1.0)*r21);
IkReal x7824=(cj5*sj5);
IkReal x7825=((1.0)*r20);
IkReal x7826=(((r00*r20*x7822))+(((-1.0)*r01*x7822*x7823))+(((-1.0)*r00*x7823*x7824))+((r01*r21))+(((-1.0)*r01*x7824*x7825))+((r02*r22)));
j4eval[0]=x7826;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7825)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7826);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7827=cj5*cj5;
IkReal x7828=((1.0)*r21);
IkReal x7829=(cj5*sj5);
IkReal x7830=((1.0)*r20);
CheckValue<IkReal> x7831=IKPowWithIntegerCheck(IKsign((((r00*r20*x7827))+((r01*r21))+(((-1.0)*r01*x7829*x7830))+(((-1.0)*r00*x7828*x7829))+(((-1.0)*r01*x7827*x7828))+((r02*r22)))),-1);
if(!x7831.valid){
continue;
}
CheckValue<IkReal> x7832 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7830)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7831.value)))+(x7832.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7833=IKsin(j4);
IkReal x7834=IKcos(j4);
IkReal x7835=((1.0)*cj0);
IkReal x7836=(cj5*r00);
IkReal x7837=(r01*sj5);
IkReal x7838=(r11*sj5);
IkReal x7839=(cj5*r20);
IkReal x7840=(r21*sj5);
IkReal x7841=(cj5*r10);
IkReal x7842=((1.0)*x7834);
IkReal x7843=((1.0)*x7833);
evalcond[0]=((((-1.0)*x7840*x7843))+((x7833*x7839))+((r22*x7834)));
evalcond[1]=((((-1.0)*x7839*x7842))+((x7834*x7840))+((r22*x7833)));
evalcond[2]=((((-1.0)*x7837*x7843))+sj0+((x7833*x7836))+((r02*x7834)));
evalcond[3]=(((r12*x7834))+(((-1.0)*x7838*x7843))+((x7833*x7841))+(((-1.0)*x7835)));
evalcond[4]=(((x7834*x7837))+(((-1.0)*x7836*x7842))+((r02*x7833))+(((-1.0)*x7835)));
evalcond[5]=(((r12*x7833))+(((-1.0)*sj0))+((x7834*x7838))+(((-1.0)*x7841*x7842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7844=((1.0)*cj5);
CheckValue<IkReal> x7845 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7845.valid){
continue;
}
CheckValue<IkReal> x7846=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7844)))),-1);
if(!x7846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7845.value)+(((1.5707963267949)*(x7846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7847=IKsin(j4);
IkReal x7848=IKcos(j4);
IkReal x7849=((1.0)*cj0);
IkReal x7850=(cj5*r00);
IkReal x7851=(r01*sj5);
IkReal x7852=(r11*sj5);
IkReal x7853=(cj5*r20);
IkReal x7854=(r21*sj5);
IkReal x7855=(cj5*r10);
IkReal x7856=((1.0)*x7848);
IkReal x7857=((1.0)*x7847);
evalcond[0]=((((-1.0)*x7854*x7857))+((r22*x7848))+((x7847*x7853)));
evalcond[1]=(((x7848*x7854))+((r22*x7847))+(((-1.0)*x7853*x7856)));
evalcond[2]=(sj0+(((-1.0)*x7851*x7857))+((x7847*x7850))+((r02*x7848)));
evalcond[3]=(((r12*x7848))+(((-1.0)*x7852*x7857))+((x7847*x7855))+(((-1.0)*x7849)));
evalcond[4]=(((x7848*x7851))+(((-1.0)*x7850*x7856))+((r02*x7847))+(((-1.0)*x7849)));
evalcond[5]=((((-1.0)*sj0))+((r12*x7847))+((x7848*x7852))+(((-1.0)*x7855*x7856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7858=((1.0)*cj5);
CheckValue<IkReal> x7859 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7858))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7859.valid){
continue;
}
CheckValue<IkReal> x7860=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7858))+(((-1.0)*r10*sj5)))),-1);
if(!x7860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7859.value)+(((1.5707963267949)*(x7860.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7861=IKsin(j4);
IkReal x7862=IKcos(j4);
IkReal x7863=((1.0)*cj0);
IkReal x7864=(cj5*r00);
IkReal x7865=(r01*sj5);
IkReal x7866=(r11*sj5);
IkReal x7867=(cj5*r20);
IkReal x7868=(r21*sj5);
IkReal x7869=(cj5*r10);
IkReal x7870=((1.0)*x7862);
IkReal x7871=((1.0)*x7861);
evalcond[0]=(((x7861*x7867))+(((-1.0)*x7868*x7871))+((r22*x7862)));
evalcond[1]=((((-1.0)*x7867*x7870))+((x7862*x7868))+((r22*x7861)));
evalcond[2]=(sj0+((x7861*x7864))+((r02*x7862))+(((-1.0)*x7865*x7871)));
evalcond[3]=(((x7861*x7869))+((r12*x7862))+(((-1.0)*x7863))+(((-1.0)*x7866*x7871)));
evalcond[4]=((((-1.0)*x7864*x7870))+(((-1.0)*x7863))+((x7862*x7865))+((r02*x7861)));
evalcond[5]=((((-1.0)*sj0))+((r12*x7861))+(((-1.0)*x7869*x7870))+((x7862*x7866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-2.37848193105333)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.37848193105333)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.37848193105333)*py))+IKsqr(((-2.37848193105333)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-2.37848193105333)*py), ((-2.37848193105333)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.42043624)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((-0.42043624)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7872=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7872;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7872);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7873=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7873;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7873);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7874=cj5*cj5;
IkReal x7875=((1.0)*r21);
IkReal x7876=(cj5*sj5);
IkReal x7877=((1.0)*r20);
IkReal x7878=((((-1.0)*r01*x7876*x7877))+((r00*r20*x7874))+((r01*r21))+(((-1.0)*r01*x7874*x7875))+((r02*r22))+(((-1.0)*r00*x7875*x7876)));
j4eval[0]=x7878;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7877))))));
j4eval[2]=IKsign(x7878);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7879=cj5*cj5;
IkReal x7880=((1.0)*r21);
IkReal x7881=(cj5*sj5);
IkReal x7882=((1.0)*r20);
CheckValue<IkReal> x7883 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x7882))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7883.valid){
continue;
}
CheckValue<IkReal> x7884=IKPowWithIntegerCheck(IKsign((((r00*r20*x7879))+((r01*r21))+(((-1.0)*r00*x7880*x7881))+(((-1.0)*r01*x7879*x7880))+((r02*r22))+(((-1.0)*r01*x7881*x7882)))),-1);
if(!x7884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7883.value)+(((1.5707963267949)*(x7884.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7885=IKsin(j4);
IkReal x7886=IKcos(j4);
IkReal x7887=((1.0)*sj0);
IkReal x7888=(r11*sj5);
IkReal x7889=(cj5*r00);
IkReal x7890=(r01*sj5);
IkReal x7891=(cj5*r10);
IkReal x7892=(cj5*r20);
IkReal x7893=(r21*sj5);
IkReal x7894=((1.0)*x7886);
IkReal x7895=((1.0)*x7885);
evalcond[0]=(((x7885*x7892))+(((-1.0)*x7893*x7895))+((r22*x7886)));
evalcond[1]=(((x7886*x7893))+(((-1.0)*x7892*x7894))+((r22*x7885)));
evalcond[2]=((((-1.0)*x7888*x7895))+cj0+((r12*x7886))+((x7885*x7891)));
evalcond[3]=(((x7885*x7889))+(((-1.0)*x7887))+(((-1.0)*x7890*x7895))+((r02*x7886)));
evalcond[4]=((((-1.0)*x7889*x7894))+((x7886*x7890))+((r02*x7885))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7891*x7894))+((r12*x7885))+((x7886*x7888))+(((-1.0)*x7887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7896=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7896.valid){
continue;
}
CheckValue<IkReal> x7897 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7896.value)))+(x7897.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7898=IKsin(j4);
IkReal x7899=IKcos(j4);
IkReal x7900=((1.0)*sj0);
IkReal x7901=(r11*sj5);
IkReal x7902=(cj5*r00);
IkReal x7903=(r01*sj5);
IkReal x7904=(cj5*r10);
IkReal x7905=(cj5*r20);
IkReal x7906=(r21*sj5);
IkReal x7907=((1.0)*x7899);
IkReal x7908=((1.0)*x7898);
evalcond[0]=(((x7898*x7905))+((r22*x7899))+(((-1.0)*x7906*x7908)));
evalcond[1]=((((-1.0)*x7905*x7907))+((x7899*x7906))+((r22*x7898)));
evalcond[2]=(cj0+((x7898*x7904))+((r12*x7899))+(((-1.0)*x7901*x7908)));
evalcond[3]=(((x7898*x7902))+((r02*x7899))+(((-1.0)*x7900))+(((-1.0)*x7903*x7908)));
evalcond[4]=(((x7899*x7903))+((r02*x7898))+(((-1.0)*x7902*x7907))+(((-1.0)*cj0)));
evalcond[5]=(((x7899*x7901))+(((-1.0)*x7904*x7907))+(((-1.0)*x7900))+((r12*x7898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7909=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7909.valid){
continue;
}
CheckValue<IkReal> x7910 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7909.value)))+(x7910.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7911=IKsin(j4);
IkReal x7912=IKcos(j4);
IkReal x7913=((1.0)*sj0);
IkReal x7914=(r11*sj5);
IkReal x7915=(cj5*r00);
IkReal x7916=(r01*sj5);
IkReal x7917=(cj5*r10);
IkReal x7918=(cj5*r20);
IkReal x7919=(r21*sj5);
IkReal x7920=((1.0)*x7912);
IkReal x7921=((1.0)*x7911);
evalcond[0]=(((r22*x7912))+((x7911*x7918))+(((-1.0)*x7919*x7921)));
evalcond[1]=(((r22*x7911))+((x7912*x7919))+(((-1.0)*x7918*x7920)));
evalcond[2]=(cj0+((x7911*x7917))+((r12*x7912))+(((-1.0)*x7914*x7921)));
evalcond[3]=((((-1.0)*x7913))+((x7911*x7915))+((r02*x7912))+(((-1.0)*x7916*x7921)));
evalcond[4]=(((x7912*x7916))+((r02*x7911))+(((-1.0)*x7915*x7920))+(((-1.0)*cj0)));
evalcond[5]=(((x7912*x7914))+(((-1.0)*x7913))+((r12*x7911))+(((-1.0)*x7917*x7920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7922=cj2*cj2;
IkReal x7923=((5250000.0)*sj1);
IkReal x7924=(cj5*r11);
IkReal x7925=((12500000.0)*px);
IkReal x7926=(cj5*r01);
IkReal x7927=(r00*sj5);
IkReal x7928=(cj1*cj2);
IkReal x7929=((5000000.0)*sj2);
IkReal x7930=((5453.0)*r10*sj5);
IkReal x7931=((5453.0)*x7928);
IkReal x7932=((5453.0)*x7922);
IkReal x7933=((5000000.0)*x7928);
CheckValue<IkReal> x7934=IKPowWithIntegerCheck(IKsign(((5453.0)+((x7932*(cj1*cj1)))+((x7923*x7928))+(((-1.0)*x7932))+(((-1.0)*x7931)))),-1);
if(!x7934.valid){
continue;
}
CheckValue<IkReal> x7935 = IKatan2WithCheck(IkReal((((r10*sj5*x7923))+(((-1.0)*x7927*x7929))+((x7923*x7924))+((x7928*x7930))+((x7924*x7931))+(((-5453.0)*x7924))+(((-1.0)*sj2*x7925))+(((-1.0)*x7926*x7929))+(((-1.0)*x7930)))),IkReal((((x7926*x7933))+((sj2*x7930))+((x7925*x7928))+((x7927*x7933))+(((5453.0)*sj2*x7924)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7935.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7934.value)))+(x7935.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7936=IKcos(j0);
IkReal x7937=IKsin(j0);
IkReal x7938=(cj1*cj2);
IkReal x7939=((1.0)*cj5);
IkReal x7940=((1.0)*sj5);
IkReal x7941=((0.42)*sj1);
IkReal x7942=((0.4)*cj5);
IkReal x7943=((0.4)*sj5);
IkReal x7944=((0.00043624)*x7936);
IkReal x7945=((0.00043624)*x7937);
evalcond[0]=(((sj2*x7936))+(((-1.0)*r11*x7939))+(((-1.0)*r10*x7940))+((x7937*x7938)));
evalcond[1]=((((-1.0)*sj2*x7937))+(((-1.0)*r00*x7940))+(((-1.0)*r01*x7939))+((x7936*x7938)));
evalcond[2]=((((-1.0)*r01*x7942))+(((-1.0)*r00*x7943))+(((-1.0)*px))+(((-1.0)*sj2*x7945))+((x7938*x7944))+((x7936*x7941))+(((-1.0)*x7944)));
evalcond[3]=(((sj2*x7944))+(((-1.0)*r11*x7942))+(((-1.0)*py))+(((-1.0)*r10*x7943))+((x7938*x7945))+((x7937*x7941))+(((-1.0)*x7945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x7946=((1.0)*cj1);
IkReal x7947=(cj0*sj1);
IkReal x7948=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7948;
j4eval[1]=((IKabs(((((-1.0)*r02*x7946))+((r22*x7947)))))+(IKabs((((cj1*r01*sj5))+(((-1.0)*cj5*r00*x7946))+(((-1.0)*r21*sj5*x7947))+((cj5*r20*x7947))))));
j4eval[2]=IKsign(x7948);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x7949=(sj0*sj1);
IkReal x7950=((1.0)*sj5);
IkReal x7951=((1.0)*cj5);
IkReal x7952=((((-1.0)*r01*x7951))+(((-1.0)*r00*x7950)));
j4eval[0]=x7952;
j4eval[1]=IKsign(x7952);
j4eval[2]=((IKabs(((((-1.0)*cj1*r12))+((r22*x7949)))))+(IKabs(((((-1.0)*r21*x7949*x7950))+(((-1.0)*cj1*r10*x7951))+((cj5*r20*x7949))+((cj1*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x7953=(cj5*sj1);
IkReal x7954=((1.0)*sj0);
IkReal x7955=(cj0*sj1);
IkReal x7956=((1.0)*sj5);
IkReal x7957=((((-1.0)*cj5*r21))+(((-1.0)*r20*x7956)));
j4eval[0]=x7957;
j4eval[1]=((IKabs((((r01*sj0*sj1*sj5))+(((-1.0)*r00*x7953*x7954))+((cj0*r10*x7953))+(((-1.0)*r11*x7955*x7956)))))+(IKabs((((r12*x7955))+(((-1.0)*r02*sj1*x7954))))));
j4eval[2]=IKsign(x7957);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7958=((-1.0)*r20);
IkReal x7960 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7960)==0){
continue;
}
IkReal x7959=pow(x7960,-0.5);
CheckValue<IkReal> x7961 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7958),IKFAST_ATAN2_MAGTHRESH);
if(!x7961.valid){
continue;
}
IkReal gconst42=((-1.0)*(x7961.value));
IkReal gconst43=(r21*x7959);
IkReal gconst44=(x7958*x7959);
CheckValue<IkReal> x7962 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7962.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7962.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7963=(cj0*sj1);
IkReal x7964=((1.0)*cj1);
CheckValue<IkReal> x7965 = IKatan2WithCheck(IkReal(((((-1.0)*gconst43*r21*x7963))+((cj1*gconst43*r01))+(((-1.0)*gconst44*r00*x7964))+((gconst44*r20*x7963)))),IkReal(((((-1.0)*r02*x7964))+((r22*x7963)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7965.valid){
continue;
}
CheckValue<IkReal> x7966=IKPowWithIntegerCheck(IKsign((((gconst43*r10))+((gconst44*r11)))),-1);
if(!x7966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7965.value)+(((1.5707963267949)*(x7966.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7967=IKcos(j4);
IkReal x7968=IKsin(j4);
IkReal x7969=(gconst44*r00);
IkReal x7970=(gconst43*r21);
IkReal x7971=(gconst43*r01);
IkReal x7972=(gconst43*r11);
IkReal x7973=(cj1*sj2);
IkReal x7974=((1.0)*x7967);
IkReal x7975=(gconst44*x7968);
IkReal x7976=((1.0)*x7968);
evalcond[0]=((((-1.0)*gconst44*r20*x7974))+cj1+((x7967*x7970))+((r22*x7968)));
evalcond[1]=(((r02*x7968))+((x7967*x7971))+(((-1.0)*x7969*x7974))+((cj0*sj1)));
evalcond[2]=(((r12*x7968))+(((-1.0)*gconst44*r10*x7974))+((sj0*sj1))+((x7967*x7972)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*x7970*x7976))+((r20*x7975))+((r22*x7967)));
evalcond[4]=(((cj2*sj0))+((r02*x7967))+((cj0*x7973))+((x7968*x7969))+(((-1.0)*x7971*x7976)));
evalcond[5]=(((r12*x7967))+(((-1.0)*cj0*cj2))+(((-1.0)*x7972*x7976))+((sj0*x7973))+((r10*x7975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7977=((-1.0)*r21);
IkReal x7979 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7979)==0){
continue;
}
IkReal x7978=pow(x7979,-0.5);
CheckValue<IkReal> x7980 = IKatan2WithCheck(IkReal(x7977),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7980.valid){
continue;
}
IkReal gconst45=((3.14159265358979)+(((-1.0)*(x7980.value))));
IkReal gconst46=(x7977*x7978);
IkReal gconst47=((1.0)*r20*x7978);
CheckValue<IkReal> x7981 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7981.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7981.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7982=((1.0)*cj1);
IkReal x7983=(cj0*sj1);
CheckValue<IkReal> x7984 = IKatan2WithCheck(IkReal(((((-1.0)*gconst46*r21*x7983))+(((-1.0)*gconst47*r00*x7982))+((cj1*gconst46*r01))+((gconst47*r20*x7983)))),IkReal((((r22*x7983))+(((-1.0)*r02*x7982)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7984.valid){
continue;
}
CheckValue<IkReal> x7985=IKPowWithIntegerCheck(IKsign((((gconst47*r11))+((gconst46*r10)))),-1);
if(!x7985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7984.value)+(((1.5707963267949)*(x7985.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7986=IKcos(j4);
IkReal x7987=IKsin(j4);
IkReal x7988=(gconst47*r20);
IkReal x7989=(cj1*sj2);
IkReal x7990=((1.0)*x7986);
IkReal x7991=(gconst47*x7987);
IkReal x7992=(gconst46*x7986);
IkReal x7993=((1.0)*gconst46*x7987);
evalcond[0]=(cj1+((r22*x7987))+((r21*x7992))+(((-1.0)*x7988*x7990)));
evalcond[1]=(((r01*x7992))+(((-1.0)*gconst47*r00*x7990))+((r02*x7987))+((cj0*sj1)));
evalcond[2]=(((r11*x7992))+((sj0*sj1))+(((-1.0)*gconst47*r10*x7990))+((r12*x7987)));
evalcond[3]=((((-1.0)*r21*x7993))+(((-1.0)*sj1*sj2))+((r22*x7986))+((x7987*x7988)));
evalcond[4]=(((cj2*sj0))+(((-1.0)*r01*x7993))+((r00*x7991))+((cj0*x7989))+((r02*x7986)));
evalcond[5]=(((r10*x7991))+(((-1.0)*r11*x7993))+((sj0*x7989))+(((-1.0)*cj0*cj2))+((r12*x7986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
IkReal x7994=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7994;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x7994);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
IkReal x7995=((1.0)*cj5);
IkReal x7996=((((-1.0)*r01*x7995))+(((-1.0)*r00*sj5)));
j4eval[0]=x7996;
j4eval[1]=((IKabs(((((-1.0)*r10*x7995))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
IkReal x7997=r21*r21;
IkReal x7998=cj5*cj5;
IkReal x7999=(r21*sj5);
IkReal x8000=(cj5*r20);
IkReal x8001=(((x7997*x7998))+(((-1.0)*x7998*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x7997))+(((2.0)*x7999*x8000)));
j4eval[0]=x8001;
j4eval[1]=((IKabs(r22))+(IKabs((x7999+(((-1.0)*x8000))))));
j4eval[2]=IKsign(x8001);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8002=r21*r21;
IkReal x8003=cj5*cj5;
IkReal x8004=(r21*sj5);
IkReal x8005=(cj5*r20);
CheckValue<IkReal> x8006=IKPowWithIntegerCheck(IKsign(((((2.0)*x8004*x8005))+(((-1.0)*x8003*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x8002))+((x8002*x8003)))),-1);
if(!x8006.valid){
continue;
}
CheckValue<IkReal> x8007 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x8005))+x8004)),IKFAST_ATAN2_MAGTHRESH);
if(!x8007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8006.value)))+(x8007.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8008=IKsin(j4);
IkReal x8009=IKcos(j4);
IkReal x8010=(cj5*r00);
IkReal x8011=((1.0)*x8009);
IkReal x8012=(sj5*x8009);
IkReal x8013=(cj5*x8008);
IkReal x8014=((1.0)*sj5*x8008);
evalcond[0]=((((-1.0)*r21*x8014))+((r22*x8009))+((r20*x8013)));
evalcond[1]=((((-1.0)*x8010*x8011))+((r01*x8012))+((r02*x8008)));
evalcond[2]=(((r12*x8008))+(((-1.0)*cj5*r10*x8011))+((r11*x8012)));
evalcond[3]=((1.0)+(((-1.0)*cj5*r20*x8011))+((r22*x8008))+((r21*x8012)));
evalcond[4]=((((-1.0)*r01*x8014))+((cj2*sj0))+((r02*x8009))+((x8008*x8010))+((cj0*sj2)));
evalcond[5]=(((r12*x8009))+((sj0*sj2))+((r10*x8013))+(((-1.0)*cj0*cj2))+(((-1.0)*r11*x8014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8015=((1.0)*cj5);
CheckValue<IkReal> x8016=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8015))+(((-1.0)*r00*sj5)))),-1);
if(!x8016.valid){
continue;
}
CheckValue<IkReal> x8017 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x8015)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8016.value)))+(x8017.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8018=IKsin(j4);
IkReal x8019=IKcos(j4);
IkReal x8020=(cj5*r00);
IkReal x8021=((1.0)*x8019);
IkReal x8022=(sj5*x8019);
IkReal x8023=(cj5*x8018);
IkReal x8024=((1.0)*sj5*x8018);
evalcond[0]=((((-1.0)*r21*x8024))+((r20*x8023))+((r22*x8019)));
evalcond[1]=(((r02*x8018))+(((-1.0)*x8020*x8021))+((r01*x8022)));
evalcond[2]=((((-1.0)*cj5*r10*x8021))+((r12*x8018))+((r11*x8022)));
evalcond[3]=((1.0)+((r22*x8018))+((r21*x8022))+(((-1.0)*cj5*r20*x8021)));
evalcond[4]=(((r02*x8019))+((x8018*x8020))+((cj2*sj0))+(((-1.0)*r01*x8024))+((cj0*sj2)));
evalcond[5]=(((r10*x8023))+(((-1.0)*r11*x8024))+((r12*x8019))+((sj0*sj2))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8025 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8025.valid){
continue;
}
CheckValue<IkReal> x8026=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8025.value)+(((1.5707963267949)*(x8026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8027=IKsin(j4);
IkReal x8028=IKcos(j4);
IkReal x8029=(cj5*r00);
IkReal x8030=((1.0)*x8028);
IkReal x8031=(sj5*x8028);
IkReal x8032=(cj5*x8027);
IkReal x8033=((1.0)*sj5*x8027);
evalcond[0]=((((-1.0)*r21*x8033))+((r20*x8032))+((r22*x8028)));
evalcond[1]=(((r02*x8027))+((r01*x8031))+(((-1.0)*x8029*x8030)));
evalcond[2]=((((-1.0)*cj5*r10*x8030))+((r12*x8027))+((r11*x8031)));
evalcond[3]=((1.0)+((r21*x8031))+(((-1.0)*cj5*r20*x8030))+((r22*x8027)));
evalcond[4]=(((cj2*sj0))+((x8027*x8029))+((r02*x8028))+(((-1.0)*r01*x8033))+((cj0*sj2)));
evalcond[5]=((((-1.0)*r11*x8033))+((r10*x8032))+((sj0*sj2))+((r12*x8028))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x8034=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8034;
j4eval[1]=IKsign(x8034);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x8035=((1.0)*cj5);
IkReal x8036=((((-1.0)*r11*x8035))+(((-1.0)*r10*sj5)));
j4eval[0]=x8036;
j4eval[1]=IKsign(x8036);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8035))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x8037=cj5*cj5;
IkReal x8038=r21*r21;
IkReal x8039=(r21*sj5);
IkReal x8040=(cj5*r20);
IkReal x8041=((r22*r22)+(((-1.0)*x8037*x8038))+((x8037*(r20*r20)))+x8038+(((-2.0)*x8039*x8040)));
j4eval[0]=x8041;
j4eval[1]=IKsign(x8041);
j4eval[2]=((IKabs(((((-1.0)*x8040))+x8039)))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8042=cj5*cj5;
IkReal x8043=r21*r21;
IkReal x8044=(r21*sj5);
IkReal x8045=(cj5*r20);
CheckValue<IkReal> x8046=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8042*x8043))+(r22*r22)+(((-2.0)*x8044*x8045))+x8043+((x8042*(r20*r20))))),-1);
if(!x8046.valid){
continue;
}
CheckValue<IkReal> x8047 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x8045))+x8044)),IKFAST_ATAN2_MAGTHRESH);
if(!x8047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8046.value)))+(x8047.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8048=IKsin(j4);
IkReal x8049=IKcos(j4);
IkReal x8050=(cj5*r00);
IkReal x8051=((1.0)*cj0);
IkReal x8052=((1.0)*x8049);
IkReal x8053=(sj5*x8049);
IkReal x8054=(cj5*x8048);
IkReal x8055=((1.0)*sj5*x8048);
evalcond[0]=(((r20*x8054))+(((-1.0)*r21*x8055))+((r22*x8049)));
evalcond[1]=((((-1.0)*x8050*x8052))+((r02*x8048))+((r01*x8053)));
evalcond[2]=((((-1.0)*cj5*r10*x8052))+((r11*x8053))+((r12*x8048)));
evalcond[3]=((-1.0)+((r21*x8053))+(((-1.0)*cj5*r20*x8052))+((r22*x8048)));
evalcond[4]=(((cj2*sj0))+((r02*x8049))+(((-1.0)*sj2*x8051))+(((-1.0)*r01*x8055))+((x8048*x8050)));
evalcond[5]=((((-1.0)*cj2*x8051))+((r10*x8054))+(((-1.0)*sj0*sj2))+((r12*x8049))+(((-1.0)*r11*x8055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8056=((1.0)*cj5);
CheckValue<IkReal> x8057 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x8056)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8057.valid){
continue;
}
CheckValue<IkReal> x8058=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8056)))),-1);
if(!x8058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8057.value)+(((1.5707963267949)*(x8058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8059=IKsin(j4);
IkReal x8060=IKcos(j4);
IkReal x8061=(cj5*r00);
IkReal x8062=((1.0)*cj0);
IkReal x8063=((1.0)*x8060);
IkReal x8064=(sj5*x8060);
IkReal x8065=(cj5*x8059);
IkReal x8066=((1.0)*sj5*x8059);
evalcond[0]=(((r22*x8060))+((r20*x8065))+(((-1.0)*r21*x8066)));
evalcond[1]=(((r01*x8064))+((r02*x8059))+(((-1.0)*x8061*x8063)));
evalcond[2]=((((-1.0)*cj5*r10*x8063))+((r12*x8059))+((r11*x8064)));
evalcond[3]=((-1.0)+((r21*x8064))+(((-1.0)*cj5*r20*x8063))+((r22*x8059)));
evalcond[4]=(((cj2*sj0))+((x8059*x8061))+((r02*x8060))+(((-1.0)*r01*x8066))+(((-1.0)*sj2*x8062)));
evalcond[5]=(((r10*x8065))+(((-1.0)*cj2*x8062))+(((-1.0)*r11*x8066))+(((-1.0)*sj0*sj2))+((r12*x8060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8067=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8067.valid){
continue;
}
CheckValue<IkReal> x8068 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8067.value)))+(x8068.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8069=IKsin(j4);
IkReal x8070=IKcos(j4);
IkReal x8071=(cj5*r00);
IkReal x8072=((1.0)*cj0);
IkReal x8073=((1.0)*x8070);
IkReal x8074=(sj5*x8070);
IkReal x8075=(cj5*x8069);
IkReal x8076=((1.0)*sj5*x8069);
evalcond[0]=(((r20*x8075))+((r22*x8070))+(((-1.0)*r21*x8076)));
evalcond[1]=((((-1.0)*x8071*x8073))+((r01*x8074))+((r02*x8069)));
evalcond[2]=((((-1.0)*cj5*r10*x8073))+((r11*x8074))+((r12*x8069)));
evalcond[3]=((-1.0)+((r22*x8069))+(((-1.0)*cj5*r20*x8073))+((r21*x8074)));
evalcond[4]=(((r02*x8070))+((cj2*sj0))+(((-1.0)*sj2*x8072))+((x8069*x8071))+(((-1.0)*r01*x8076)));
evalcond[5]=(((r10*x8075))+(((-1.0)*cj2*x8072))+((r12*x8070))+(((-1.0)*sj0*sj2))+(((-1.0)*r11*x8076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8077=((-1.0)*r00);
IkReal x8079 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8079)==0){
continue;
}
IkReal x8078=pow(x8079,-0.5);
CheckValue<IkReal> x8080 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8077),IKFAST_ATAN2_MAGTHRESH);
if(!x8080.valid){
continue;
}
IkReal gconst48=((-1.0)*(x8080.value));
IkReal gconst49=(r01*x8078);
IkReal gconst50=(x8077*x8078);
CheckValue<IkReal> x8081 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8081.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8081.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8082=(cj0*sj1);
IkReal x8083=((1.0)*cj1);
CheckValue<IkReal> x8084=IKPowWithIntegerCheck(IKsign((((gconst50*r11))+((gconst49*r10)))),-1);
if(!x8084.valid){
continue;
}
CheckValue<IkReal> x8085 = IKatan2WithCheck(IkReal(((((-1.0)*gconst50*r00*x8083))+((gconst50*r20*x8082))+(((-1.0)*gconst49*r21*x8082))+((cj1*gconst49*r01)))),IkReal(((((-1.0)*r02*x8083))+((r22*x8082)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8084.value)))+(x8085.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8086=IKcos(j4);
IkReal x8087=IKsin(j4);
IkReal x8088=(gconst50*r00);
IkReal x8089=(gconst50*r10);
IkReal x8090=(gconst50*r20);
IkReal x8091=(cj1*sj2);
IkReal x8092=(gconst49*x8086);
IkReal x8093=((1.0)*x8086);
IkReal x8094=((1.0)*gconst49*x8087);
evalcond[0]=(cj1+((r22*x8087))+(((-1.0)*x8090*x8093))+((r21*x8092)));
evalcond[1]=((((-1.0)*x8088*x8093))+((r01*x8092))+((cj0*sj1))+((r02*x8087)));
evalcond[2]=(((sj0*sj1))+((r11*x8092))+((r12*x8087))+(((-1.0)*x8089*x8093)));
evalcond[3]=(((x8087*x8090))+(((-1.0)*sj1*sj2))+((r22*x8086))+(((-1.0)*r21*x8094)));
evalcond[4]=(((cj2*sj0))+((x8087*x8088))+(((-1.0)*r01*x8094))+((cj0*x8091))+((r02*x8086)));
evalcond[5]=(((x8087*x8089))+((r12*x8086))+((sj0*x8091))+(((-1.0)*r11*x8094))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8095=((-1.0)*r01);
IkReal x8097 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8097)==0){
continue;
}
IkReal x8096=pow(x8097,-0.5);
CheckValue<IkReal> x8098 = IKatan2WithCheck(IkReal(x8095),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8098.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x8098.value))));
IkReal gconst52=(x8095*x8096);
IkReal gconst53=((1.0)*r00*x8096);
CheckValue<IkReal> x8099 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8099.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8099.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8100=(cj0*sj1);
IkReal x8101=((1.0)*cj1);
CheckValue<IkReal> x8102 = IKatan2WithCheck(IkReal((((cj1*gconst52*r01))+((gconst53*r20*x8100))+(((-1.0)*gconst52*r21*x8100))+(((-1.0)*gconst53*r00*x8101)))),IkReal((((r22*x8100))+(((-1.0)*r02*x8101)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8102.valid){
continue;
}
CheckValue<IkReal> x8103=IKPowWithIntegerCheck(IKsign((((gconst53*r11))+((gconst52*r10)))),-1);
if(!x8103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8102.value)+(((1.5707963267949)*(x8103.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8104=IKcos(j4);
IkReal x8105=IKsin(j4);
IkReal x8106=(cj1*sj2);
IkReal x8107=(gconst52*x8104);
IkReal x8108=(gconst53*x8105);
IkReal x8109=((1.0)*gconst52*x8105);
IkReal x8110=((1.0)*gconst53*x8104);
evalcond[0]=(cj1+(((-1.0)*r20*x8110))+((r21*x8107))+((r22*x8105)));
evalcond[1]=(((r02*x8105))+((r01*x8107))+(((-1.0)*r00*x8110))+((cj0*sj1)));
evalcond[2]=(((r11*x8107))+((sj0*sj1))+((r12*x8105))+(((-1.0)*r10*x8110)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r20*x8108))+(((-1.0)*r21*x8109))+((r22*x8104)));
evalcond[4]=(((cj2*sj0))+(((-1.0)*r01*x8109))+((r02*x8104))+((cj0*x8106))+((r00*x8108)));
evalcond[5]=((((-1.0)*r11*x8109))+((sj0*x8106))+((r10*x8108))+((r12*x8104))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8112 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8112)==0){
continue;
}
IkReal x8111=pow(x8112,-0.5);
CheckValue<IkReal> x8113 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8113.valid){
continue;
}
IkReal gconst54=((-1.0)*(x8113.value));
IkReal gconst55=((-1.0)*r11*x8111);
IkReal gconst56=(r10*x8111);
CheckValue<IkReal> x8114 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8114.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8114.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8115=(sj0*sj1);
IkReal x8116=((1.0)*cj1);
IkReal x8117=((1.0)*gconst55);
CheckValue<IkReal> x8118 = IKatan2WithCheck(IkReal((((gconst56*r20*x8115))+(((-1.0)*r21*x8115*x8117))+(((-1.0)*gconst56*r10*x8116))+((cj1*gconst55*r11)))),IkReal(((((-1.0)*r12*x8116))+((r22*x8115)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8118.valid){
continue;
}
CheckValue<IkReal> x8119=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst56*r01))+(((-1.0)*r00*x8117)))),-1);
if(!x8119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8118.value)+(((1.5707963267949)*(x8119.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8120=IKcos(j4);
IkReal x8121=IKsin(j4);
IkReal x8122=(cj1*sj2);
IkReal x8123=(gconst55*x8120);
IkReal x8124=(gconst56*x8121);
IkReal x8125=((1.0)*gconst56*x8120);
IkReal x8126=((1.0)*gconst55*x8121);
evalcond[0]=((((-1.0)*r20*x8125))+cj1+((r21*x8123))+((r22*x8121)));
evalcond[1]=(((r02*x8121))+((r01*x8123))+(((-1.0)*r00*x8125))+((cj0*sj1)));
evalcond[2]=(((r12*x8121))+((sj0*sj1))+((r11*x8123))+(((-1.0)*r10*x8125)));
evalcond[3]=((((-1.0)*r21*x8126))+(((-1.0)*sj1*sj2))+((r20*x8124))+((r22*x8120)));
evalcond[4]=(((cj2*sj0))+((r02*x8120))+((cj0*x8122))+((r00*x8124))+(((-1.0)*r01*x8126)));
evalcond[5]=((((-1.0)*r11*x8126))+((r10*x8124))+((r12*x8120))+(((-1.0)*cj0*cj2))+((sj0*x8122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8128 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8128)==0){
continue;
}
IkReal x8127=pow(x8128,-0.5);
CheckValue<IkReal> x8129 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8129.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x8129.value))));
IkReal gconst58=((1.0)*r11*x8127);
IkReal gconst59=((-1.0)*r10*x8127);
CheckValue<IkReal> x8130 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8130.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8130.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8133 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8133.valid){
continue;
}
IkReal x8131=((1.0)*(x8133.value));
IkReal x8132=x8127;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x8131)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x8131)));
IkReal gconst58=((1.0)*r11*x8132);
IkReal gconst59=((-1.0)*r10*x8132);
IkReal x8134=r12*r12;
IkReal x8135=(cj1*r02);
IkReal x8136=(cj0*r22*sj1);
CheckValue<IkReal> x8140=IKPowWithIntegerCheck(((-1.0)+x8134),-1);
if(!x8140.valid){
continue;
}
IkReal x8137=x8140.value;
if((((1.0)+(((-1.0)*x8134)))) < -0.00001)
continue;
IkReal x8138=IKsqrt(((1.0)+(((-1.0)*x8134))));
IkReal x8139=(r12*x8137*x8138);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x8135))+x8136)))+(IKabs(((((-1.0)*x8136*x8139))+((x8135*x8139))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8141=(sj0*sj1);
IkReal x8142=((1.0)*gconst58);
IkReal x8143=((1.0)*gconst59);
CheckValue<IkReal> x8144 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8141*x8142))+(((-1.0)*cj1*r10*x8143))+((cj1*gconst58*r11))+((gconst59*r20*x8141)))),IkReal((((r22*x8141))+(((-1.0)*cj1*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8144.valid){
continue;
}
CheckValue<IkReal> x8145=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8142))+(((-1.0)*r01*x8143)))),-1);
if(!x8145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8144.value)+(((1.5707963267949)*(x8145.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8146=IKcos(j4);
IkReal x8147=IKsin(j4);
IkReal x8148=(gconst58*r01);
IkReal x8149=(gconst58*r11);
IkReal x8150=(gconst58*r21);
IkReal x8151=(cj1*sj2);
IkReal x8152=((1.0)*x8147);
IkReal x8153=(gconst59*x8147);
IkReal x8154=((1.0)*gconst59*x8146);
evalcond[0]=(cj1+((r22*x8147))+(((-1.0)*r20*x8154))+((x8146*x8150)));
evalcond[1]=(((r02*x8147))+((x8146*x8148))+((cj0*sj1))+(((-1.0)*r00*x8154)));
evalcond[2]=((((-1.0)*r10*x8154))+((sj0*sj1))+((x8146*x8149))+((r12*x8147)));
evalcond[3]=((((-1.0)*x8150*x8152))+((r20*x8153))+(((-1.0)*sj1*sj2))+((r22*x8146)));
evalcond[4]=(((cj2*sj0))+((cj0*x8151))+(((-1.0)*x8148*x8152))+((r00*x8153))+((r02*x8146)));
evalcond[5]=(((sj0*x8151))+((r10*x8153))+(((-1.0)*cj0*cj2))+(((-1.0)*x8149*x8152))+((r12*x8146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8155=((1.0)*cj1);
IkReal x8156=(cj0*sj1);
CheckValue<IkReal> x8157=IKPowWithIntegerCheck(IKsign((((gconst58*r10))+((gconst59*r11)))),-1);
if(!x8157.valid){
continue;
}
CheckValue<IkReal> x8158 = IKatan2WithCheck(IkReal((((gconst59*r20*x8156))+(((-1.0)*gconst59*r00*x8155))+((cj1*gconst58*r01))+(((-1.0)*gconst58*r21*x8156)))),IkReal(((((-1.0)*r02*x8155))+((r22*x8156)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8157.value)))+(x8158.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8159=IKcos(j4);
IkReal x8160=IKsin(j4);
IkReal x8161=(gconst58*r01);
IkReal x8162=(gconst58*r11);
IkReal x8163=(gconst58*r21);
IkReal x8164=(cj1*sj2);
IkReal x8165=((1.0)*x8160);
IkReal x8166=(gconst59*x8160);
IkReal x8167=((1.0)*gconst59*x8159);
evalcond[0]=(((r22*x8160))+cj1+((x8159*x8163))+(((-1.0)*r20*x8167)));
evalcond[1]=(((r02*x8160))+(((-1.0)*r00*x8167))+((x8159*x8161))+((cj0*sj1)));
evalcond[2]=(((r12*x8160))+(((-1.0)*r10*x8167))+((sj0*sj1))+((x8159*x8162)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*x8163*x8165))+((r22*x8159))+((r20*x8166)));
evalcond[4]=(((cj0*x8164))+((cj2*sj0))+((r00*x8166))+(((-1.0)*x8161*x8165))+((r02*x8159)));
evalcond[5]=(((r10*x8166))+(((-1.0)*x8162*x8165))+((sj0*x8164))+((r12*x8159))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8168=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8168);
rxp0_2=(py*r00);
rxp1_0=(r21*x8168);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x8169=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x8169;
j4eval[1]=((IKabs((sj1*sj2)))+(IKabs(cj1)));
j4eval[2]=IKsign(x8169);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8170=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8170);
rxp0_2=(py*r00);
rxp1_0=(r21*x8170);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=IKsign(r12);
j4eval[2]=((IKabs((((cj0*cj2))+(((-1.0)*cj1*sj0*sj2)))))+(IKabs((sj0*sj1))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8171=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8171);
rxp0_2=(py*r00);
rxp1_0=(r21*x8171);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8172=IKPowWithIntegerCheck(r12,-1);
if(!x8172.valid){
continue;
}
CheckValue<IkReal> x8173=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x8173.valid){
continue;
}
if( IKabs(((-1.0)*sj0*sj1*(x8172.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj1*(x8173.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*sj1*(x8172.value)))+IKsqr(((-1.0)*cj1*(x8173.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*sj1*(x8172.value)), ((-1.0)*cj1*(x8173.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8174=IKcos(j4);
IkReal x8175=IKsin(j4);
IkReal x8176=(cj1*sj2);
IkReal x8177=(sj5*x8174);
IkReal x8178=(cj5*x8175);
IkReal x8179=((1.0)*cj5*x8174);
IkReal x8180=((1.0)*sj5*x8175);
evalcond[0]=(((sj0*sj1))+((r12*x8175)));
evalcond[1]=(((sj0*x8176))+((r12*x8174))+(((-1.0)*cj0*cj2)));
evalcond[2]=(cj1+(((-1.0)*r20*x8179))+((r21*x8177)));
evalcond[3]=((((-1.0)*r00*x8179))+((r01*x8177))+((cj0*sj1)));
evalcond[4]=(((r20*x8178))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x8180)));
evalcond[5]=(((cj2*sj0))+(((-1.0)*r01*x8180))+((cj0*x8176))+((r00*x8178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8181 = IKatan2WithCheck(IkReal(((-1.0)*sj0*sj1)),IkReal((((cj0*cj2))+(((-1.0)*cj1*sj0*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8181.valid){
continue;
}
CheckValue<IkReal> x8182=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x8182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8181.value)+(((1.5707963267949)*(x8182.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8183=IKcos(j4);
IkReal x8184=IKsin(j4);
IkReal x8185=(cj1*sj2);
IkReal x8186=(sj5*x8183);
IkReal x8187=(cj5*x8184);
IkReal x8188=((1.0)*cj5*x8183);
IkReal x8189=((1.0)*sj5*x8184);
evalcond[0]=(((r12*x8184))+((sj0*sj1)));
evalcond[1]=(((r12*x8183))+((sj0*x8185))+(((-1.0)*cj0*cj2)));
evalcond[2]=(((r21*x8186))+cj1+(((-1.0)*r20*x8188)));
evalcond[3]=(((r01*x8186))+(((-1.0)*r00*x8188))+((cj0*sj1)));
evalcond[4]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x8189))+((r20*x8187)));
evalcond[5]=(((cj2*sj0))+((r00*x8187))+(((-1.0)*r01*x8189))+((cj0*x8185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8190 = IKatan2WithCheck(IkReal((sj1*sj2)),IkReal(cj1),IKFAST_ATAN2_MAGTHRESH);
if(!x8190.valid){
continue;
}
CheckValue<IkReal> x8191=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x8191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8190.value)+(((1.5707963267949)*(x8191.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8192=IKcos(j4);
IkReal x8193=IKsin(j4);
IkReal x8194=(cj1*sj2);
IkReal x8195=(sj5*x8192);
IkReal x8196=(cj5*x8193);
IkReal x8197=((1.0)*cj5*x8192);
IkReal x8198=((1.0)*sj5*x8193);
evalcond[0]=(((r12*x8193))+((sj0*sj1)));
evalcond[1]=(((r12*x8192))+((sj0*x8194))+(((-1.0)*cj0*cj2)));
evalcond[2]=(((r21*x8195))+cj1+(((-1.0)*r20*x8197)));
evalcond[3]=(((r01*x8195))+(((-1.0)*r00*x8197))+((cj0*sj1)));
evalcond[4]=(((r20*x8196))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x8198)));
evalcond[5]=(((cj2*sj0))+((r00*x8196))+(((-1.0)*r01*x8198))+((cj0*x8194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x8199=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8199;
j4eval[1]=IKsign(x8199);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x8200=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8200;
j4eval[1]=((IKabs((((cj2*r11*sj5))+(((-1.0)*cj2*cj5*r10)))))+(IKabs((cj2*r12))));
j4eval[2]=IKsign(x8200);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x8201=cj5*cj5;
IkReal x8202=r11*r11;
IkReal x8203=(cj5*r10);
IkReal x8204=(r11*sj5);
IkReal x8205=((((2.0)*x8203*x8204))+((x8201*x8202))+(((-1.0)*x8202))+(((-1.0)*(r12*r12)))+(((-1.0)*x8201*(r10*r10))));
j4eval[0]=x8205;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x8203))+x8204))));
j4eval[2]=IKsign(x8205);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8206=cj5*cj5;
IkReal x8207=r11*r11;
IkReal x8208=(cj5*r10);
IkReal x8209=(r11*sj5);
CheckValue<IkReal> x8210 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x8208))+x8209)),IKFAST_ATAN2_MAGTHRESH);
if(!x8210.valid){
continue;
}
CheckValue<IkReal> x8211=IKPowWithIntegerCheck(IKsign((((x8206*x8207))+(((-1.0)*x8206*(r10*r10)))+(((-1.0)*x8207))+(((2.0)*x8208*x8209))+(((-1.0)*(r12*r12))))),-1);
if(!x8211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8210.value)+(((1.5707963267949)*(x8211.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8212=IKsin(j4);
IkReal x8213=IKcos(j4);
IkReal x8214=(sj5*x8213);
IkReal x8215=(cj5*x8212);
IkReal x8216=((1.0)*cj5*x8213);
IkReal x8217=((1.0)*sj5*x8212);
evalcond[0]=(((r12*x8213))+(((-1.0)*r11*x8217))+((r10*x8215)));
evalcond[1]=((((-1.0)*r20*x8216))+((r22*x8212))+((r21*x8214)));
evalcond[2]=((((-1.0)*r00*x8216))+((r01*x8214))+((r02*x8212)));
evalcond[3]=((((-1.0)*r01*x8217))+cj2+((r00*x8215))+((r02*x8213)));
evalcond[4]=((1.0)+((r11*x8214))+((r12*x8212))+(((-1.0)*r10*x8216)));
evalcond[5]=((((-1.0)*sj2))+((r22*x8213))+((r20*x8215))+(((-1.0)*r21*x8217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8218=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8218.valid){
continue;
}
CheckValue<IkReal> x8219 = IKatan2WithCheck(IkReal((cj2*r12)),IkReal((((cj2*r11*sj5))+(((-1.0)*cj2*cj5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8218.value)))+(x8219.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8220=IKsin(j4);
IkReal x8221=IKcos(j4);
IkReal x8222=(sj5*x8221);
IkReal x8223=(cj5*x8220);
IkReal x8224=((1.0)*cj5*x8221);
IkReal x8225=((1.0)*sj5*x8220);
evalcond[0]=(((r12*x8221))+((r10*x8223))+(((-1.0)*r11*x8225)));
evalcond[1]=(((r22*x8220))+((r21*x8222))+(((-1.0)*r20*x8224)));
evalcond[2]=(((r02*x8220))+((r01*x8222))+(((-1.0)*r00*x8224)));
evalcond[3]=(((r02*x8221))+cj2+((r00*x8223))+(((-1.0)*r01*x8225)));
evalcond[4]=((1.0)+((r12*x8220))+((r11*x8222))+(((-1.0)*r10*x8224)));
evalcond[5]=((((-1.0)*sj2))+((r20*x8223))+((r22*x8221))+(((-1.0)*r21*x8225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8226=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8226.valid){
continue;
}
CheckValue<IkReal> x8227 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8226.value)))+(x8227.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8228=IKsin(j4);
IkReal x8229=IKcos(j4);
IkReal x8230=(sj5*x8229);
IkReal x8231=(cj5*x8228);
IkReal x8232=((1.0)*cj5*x8229);
IkReal x8233=((1.0)*sj5*x8228);
evalcond[0]=(((r12*x8229))+(((-1.0)*r11*x8233))+((r10*x8231)));
evalcond[1]=(((r22*x8228))+((r21*x8230))+(((-1.0)*r20*x8232)));
evalcond[2]=(((r02*x8228))+((r01*x8230))+(((-1.0)*r00*x8232)));
evalcond[3]=(((r02*x8229))+cj2+((r00*x8231))+(((-1.0)*r01*x8233)));
evalcond[4]=((1.0)+((r12*x8228))+((r11*x8230))+(((-1.0)*r10*x8232)));
evalcond[5]=(((r20*x8231))+(((-1.0)*sj2))+((r22*x8229))+(((-1.0)*r21*x8233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x8234=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8234;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x8234);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x8235=((1.0)*cj5);
IkReal x8236=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8235)));
j4eval[0]=x8236;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8235))))));
j4eval[2]=IKsign(x8236);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x8237=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8237;
j4eval[1]=IKsign(x8237);
j4eval[2]=((IKabs((((r11*sj2*sj5))+(((-1.0)*cj5*r10*sj2)))))+(IKabs((r12*sj2))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8238=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8238.valid){
continue;
}
CheckValue<IkReal> x8239 = IKatan2WithCheck(IkReal((r12*sj2)),IkReal((((r11*sj2*sj5))+(((-1.0)*cj5*r10*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8238.value)))+(x8239.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8240=IKsin(j4);
IkReal x8241=IKcos(j4);
IkReal x8242=(cj5*r00);
IkReal x8243=(cj5*r20);
IkReal x8244=(cj5*r10);
IkReal x8245=((1.0)*x8241);
IkReal x8246=(sj5*x8241);
IkReal x8247=((1.0)*sj5*x8240);
evalcond[0]=(((x8240*x8244))+(((-1.0)*r11*x8247))+((r12*x8241)));
evalcond[1]=((((-1.0)*x8243*x8245))+((r21*x8246))+((r22*x8240)));
evalcond[2]=(((r02*x8240))+(((-1.0)*x8242*x8245))+((r01*x8246)));
evalcond[3]=((-1.0)+(((-1.0)*x8244*x8245))+((r11*x8246))+((r12*x8240)));
evalcond[4]=((((-1.0)*sj2))+((x8240*x8243))+(((-1.0)*r21*x8247))+((r22*x8241)));
evalcond[5]=(((x8240*x8242))+((r02*x8241))+(((-1.0)*r01*x8247))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8248=((1.0)*cj5);
CheckValue<IkReal> x8249 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x8248)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8249.valid){
continue;
}
CheckValue<IkReal> x8250=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8248)))),-1);
if(!x8250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8249.value)+(((1.5707963267949)*(x8250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8251=IKsin(j4);
IkReal x8252=IKcos(j4);
IkReal x8253=(cj5*r00);
IkReal x8254=(cj5*r20);
IkReal x8255=(cj5*r10);
IkReal x8256=((1.0)*x8252);
IkReal x8257=(sj5*x8252);
IkReal x8258=((1.0)*sj5*x8251);
evalcond[0]=(((x8251*x8255))+(((-1.0)*r11*x8258))+((r12*x8252)));
evalcond[1]=(((r21*x8257))+(((-1.0)*x8254*x8256))+((r22*x8251)));
evalcond[2]=(((r01*x8257))+((r02*x8251))+(((-1.0)*x8253*x8256)));
evalcond[3]=((-1.0)+(((-1.0)*x8255*x8256))+((r12*x8251))+((r11*x8257)));
evalcond[4]=((((-1.0)*sj2))+((x8251*x8254))+(((-1.0)*r21*x8258))+((r22*x8252)));
evalcond[5]=(((x8251*x8253))+(((-1.0)*r01*x8258))+((r02*x8252))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8259=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8259.valid){
continue;
}
CheckValue<IkReal> x8260 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8259.value)))+(x8260.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8261=IKsin(j4);
IkReal x8262=IKcos(j4);
IkReal x8263=(cj5*r00);
IkReal x8264=(cj5*r20);
IkReal x8265=(cj5*r10);
IkReal x8266=((1.0)*x8262);
IkReal x8267=(sj5*x8262);
IkReal x8268=((1.0)*sj5*x8261);
evalcond[0]=(((r12*x8262))+((x8261*x8265))+(((-1.0)*r11*x8268)));
evalcond[1]=(((r21*x8267))+(((-1.0)*x8264*x8266))+((r22*x8261)));
evalcond[2]=((((-1.0)*x8263*x8266))+((r02*x8261))+((r01*x8267)));
evalcond[3]=((-1.0)+(((-1.0)*x8265*x8266))+((r12*x8261))+((r11*x8267)));
evalcond[4]=((((-1.0)*sj2))+(((-1.0)*r21*x8268))+((r22*x8262))+((x8261*x8264)));
evalcond[5]=(((r02*x8262))+(((-1.0)*r01*x8268))+((x8261*x8263))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x8269=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8269;
j4eval[1]=((IKabs((((cj2*r11*sj5))+(((-1.0)*cj2*cj5*r10)))))+(IKabs((cj2*r12))));
j4eval[2]=IKsign(x8269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x8270=((1.0)*cj5);
IkReal x8271=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8270)));
j4eval[0]=x8271;
j4eval[1]=((IKabs((r12*sj2)))+(IKabs((((r11*sj2*sj5))+(((-1.0)*r10*sj2*x8270))))));
j4eval[2]=IKsign(x8271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x8272=cj5*cj5;
IkReal x8273=r11*r11;
IkReal x8274=(r11*sj5);
IkReal x8275=(cj5*r10);
IkReal x8276=((r12*r12)+(((-1.0)*x8272*x8273))+((x8272*(r10*r10)))+(((-2.0)*x8274*x8275))+x8273);
j4eval[0]=x8276;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x8275))+x8274))));
j4eval[2]=IKsign(x8276);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8277=cj5*cj5;
IkReal x8278=r11*r11;
IkReal x8279=(cj5*r10);
IkReal x8280=(r11*sj5);
CheckValue<IkReal> x8281=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x8277*x8278))+(((-2.0)*x8279*x8280))+((x8277*(r10*r10)))+x8278)),-1);
if(!x8281.valid){
continue;
}
CheckValue<IkReal> x8282 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x8279))+x8280)),IKFAST_ATAN2_MAGTHRESH);
if(!x8282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8281.value)))+(x8282.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8283=IKsin(j4);
IkReal x8284=IKcos(j4);
IkReal x8285=(cj5*r00);
IkReal x8286=(cj5*r20);
IkReal x8287=(cj5*r10);
IkReal x8288=((1.0)*x8284);
IkReal x8289=(sj5*x8284);
IkReal x8290=((1.0)*sj5*x8283);
evalcond[0]=((((-1.0)*r11*x8290))+((r12*x8284))+((x8283*x8287)));
evalcond[1]=(((r21*x8289))+(((-1.0)*x8286*x8288))+((r22*x8283)));
evalcond[2]=((((-1.0)*x8285*x8288))+((r01*x8289))+((r02*x8283)));
evalcond[3]=((((-1.0)*r21*x8290))+sj2+((r22*x8284))+((x8283*x8286)));
evalcond[4]=(cj2+(((-1.0)*r01*x8290))+((r02*x8284))+((x8283*x8285)));
evalcond[5]=((-1.0)+(((-1.0)*x8287*x8288))+((r11*x8289))+((r12*x8283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8291=((1.0)*cj5);
CheckValue<IkReal> x8292 = IKatan2WithCheck(IkReal((r12*sj2)),IkReal(((((-1.0)*r10*sj2*x8291))+((r11*sj2*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8292.valid){
continue;
}
CheckValue<IkReal> x8293=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8291)))),-1);
if(!x8293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8292.value)+(((1.5707963267949)*(x8293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8294=IKsin(j4);
IkReal x8295=IKcos(j4);
IkReal x8296=(cj5*r00);
IkReal x8297=(cj5*r20);
IkReal x8298=(cj5*r10);
IkReal x8299=((1.0)*x8295);
IkReal x8300=(sj5*x8295);
IkReal x8301=((1.0)*sj5*x8294);
evalcond[0]=((((-1.0)*r11*x8301))+((x8294*x8298))+((r12*x8295)));
evalcond[1]=((((-1.0)*x8297*x8299))+((r21*x8300))+((r22*x8294)));
evalcond[2]=(((r01*x8300))+((r02*x8294))+(((-1.0)*x8296*x8299)));
evalcond[3]=(sj2+(((-1.0)*r21*x8301))+((x8294*x8297))+((r22*x8295)));
evalcond[4]=(cj2+(((-1.0)*r01*x8301))+((r02*x8295))+((x8294*x8296)));
evalcond[5]=((-1.0)+((r11*x8300))+((r12*x8294))+(((-1.0)*x8298*x8299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8302=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8302.valid){
continue;
}
CheckValue<IkReal> x8303 = IKatan2WithCheck(IkReal((cj2*r12)),IkReal((((cj2*r11*sj5))+(((-1.0)*cj2*cj5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8302.value)))+(x8303.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8304=IKsin(j4);
IkReal x8305=IKcos(j4);
IkReal x8306=(cj5*r00);
IkReal x8307=(cj5*r20);
IkReal x8308=(cj5*r10);
IkReal x8309=((1.0)*x8305);
IkReal x8310=(sj5*x8305);
IkReal x8311=((1.0)*sj5*x8304);
evalcond[0]=(((x8304*x8308))+((r12*x8305))+(((-1.0)*r11*x8311)));
evalcond[1]=(((r22*x8304))+((r21*x8310))+(((-1.0)*x8307*x8309)));
evalcond[2]=(((r02*x8304))+((r01*x8310))+(((-1.0)*x8306*x8309)));
evalcond[3]=(((r22*x8305))+(((-1.0)*r21*x8311))+sj2+((x8304*x8307)));
evalcond[4]=(((r02*x8305))+cj2+((x8304*x8306))+(((-1.0)*r01*x8311)));
evalcond[5]=((-1.0)+((r12*x8304))+((r11*x8310))+(((-1.0)*x8308*x8309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x8312=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8312;
j4eval[1]=IKsign(x8312);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x8313=((1.0)*cj5);
IkReal x8314=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8313)));
j4eval[0]=x8314;
j4eval[1]=((IKabs((r12*sj2)))+(IKabs(((((-1.0)*r10*sj2*x8313))+((r11*sj2*sj5))))));
j4eval[2]=IKsign(x8314);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x8315=cj5*cj5;
IkReal x8316=r11*r11;
IkReal x8317=(cj5*r10);
IkReal x8318=(r11*sj5);
IkReal x8319=((((-1.0)*x8315*(r10*r10)))+(((2.0)*x8317*x8318))+((x8315*x8316))+(((-1.0)*(r12*r12)))+(((-1.0)*x8316)));
j4eval[0]=x8319;
j4eval[1]=((IKabs(r12))+(IKabs((x8318+(((-1.0)*x8317))))));
j4eval[2]=IKsign(x8319);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8320=cj5*cj5;
IkReal x8321=r11*r11;
IkReal x8322=(cj5*r10);
IkReal x8323=(r11*sj5);
CheckValue<IkReal> x8324 = IKatan2WithCheck(IkReal(r12),IkReal((x8323+(((-1.0)*x8322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8324.valid){
continue;
}
CheckValue<IkReal> x8325=IKPowWithIntegerCheck(IKsign(((((2.0)*x8322*x8323))+(((-1.0)*x8320*(r10*r10)))+(((-1.0)*x8321))+(((-1.0)*(r12*r12)))+((x8320*x8321)))),-1);
if(!x8325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8324.value)+(((1.5707963267949)*(x8325.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8326=IKsin(j4);
IkReal x8327=IKcos(j4);
IkReal x8328=(cj5*r00);
IkReal x8329=(cj5*r20);
IkReal x8330=(cj5*r10);
IkReal x8331=((1.0)*x8327);
IkReal x8332=(sj5*x8327);
IkReal x8333=((1.0)*sj5*x8326);
evalcond[0]=((((-1.0)*r11*x8333))+((r12*x8327))+((x8326*x8330)));
evalcond[1]=(((r21*x8332))+((r22*x8326))+(((-1.0)*x8329*x8331)));
evalcond[2]=(((r02*x8326))+((r01*x8332))+(((-1.0)*x8328*x8331)));
evalcond[3]=(sj2+(((-1.0)*r21*x8333))+((x8326*x8329))+((r22*x8327)));
evalcond[4]=((1.0)+((r12*x8326))+(((-1.0)*x8330*x8331))+((r11*x8332)));
evalcond[5]=(((r02*x8327))+(((-1.0)*r01*x8333))+((x8326*x8328))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8334=((1.0)*cj5);
CheckValue<IkReal> x8335=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8334))+(((-1.0)*r00*sj5)))),-1);
if(!x8335.valid){
continue;
}
CheckValue<IkReal> x8336 = IKatan2WithCheck(IkReal((r12*sj2)),IkReal(((((-1.0)*r10*sj2*x8334))+((r11*sj2*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8335.value)))+(x8336.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8337=IKsin(j4);
IkReal x8338=IKcos(j4);
IkReal x8339=(cj5*r00);
IkReal x8340=(cj5*r20);
IkReal x8341=(cj5*r10);
IkReal x8342=((1.0)*x8338);
IkReal x8343=(sj5*x8338);
IkReal x8344=((1.0)*sj5*x8337);
evalcond[0]=((((-1.0)*r11*x8344))+((x8337*x8341))+((r12*x8338)));
evalcond[1]=(((r22*x8337))+((r21*x8343))+(((-1.0)*x8340*x8342)));
evalcond[2]=((((-1.0)*x8339*x8342))+((r01*x8343))+((r02*x8337)));
evalcond[3]=((((-1.0)*r21*x8344))+sj2+((x8337*x8340))+((r22*x8338)));
evalcond[4]=((1.0)+((r12*x8337))+(((-1.0)*x8341*x8342))+((r11*x8343)));
evalcond[5]=((((-1.0)*r01*x8344))+((x8337*x8339))+(((-1.0)*cj2))+((r02*x8338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8345=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8345.valid){
continue;
}
CheckValue<IkReal> x8346 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8345.value)))+(x8346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8347=IKsin(j4);
IkReal x8348=IKcos(j4);
IkReal x8349=(cj5*r00);
IkReal x8350=(cj5*r20);
IkReal x8351=(cj5*r10);
IkReal x8352=((1.0)*x8348);
IkReal x8353=(sj5*x8348);
IkReal x8354=((1.0)*sj5*x8347);
evalcond[0]=((((-1.0)*r11*x8354))+((r12*x8348))+((x8347*x8351)));
evalcond[1]=(((r21*x8353))+(((-1.0)*x8350*x8352))+((r22*x8347)));
evalcond[2]=((((-1.0)*x8349*x8352))+((r02*x8347))+((r01*x8353)));
evalcond[3]=(sj2+(((-1.0)*r21*x8354))+((r22*x8348))+((x8347*x8350)));
evalcond[4]=((1.0)+((r11*x8353))+((r12*x8347))+(((-1.0)*x8351*x8352)));
evalcond[5]=((((-1.0)*r01*x8354))+((r02*x8348))+(((-1.0)*cj2))+((x8347*x8349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8355=(cj5*sj1);
IkReal x8356=((1.0)*sj0);
IkReal x8357=(cj0*sj1);
IkReal x8358=((1.0)*sj5);
CheckValue<IkReal> x8359 = IKatan2WithCheck(IkReal((((r01*sj0*sj1*sj5))+(((-1.0)*r00*x8355*x8356))+((cj0*r10*x8355))+(((-1.0)*r11*x8357*x8358)))),IkReal(((((-1.0)*r02*sj1*x8356))+((r12*x8357)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8359.valid){
continue;
}
CheckValue<IkReal> x8360=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8358))+(((-1.0)*cj5*r21)))),-1);
if(!x8360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8359.value)+(((1.5707963267949)*(x8360.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8361=IKcos(j4);
IkReal x8362=IKsin(j4);
IkReal x8363=(cj5*r00);
IkReal x8364=(cj1*sj2);
IkReal x8365=((1.0)*x8361);
IkReal x8366=(sj5*x8361);
IkReal x8367=(cj5*x8362);
IkReal x8368=((1.0)*sj5*x8362);
evalcond[0]=(((r22*x8362))+cj1+((r21*x8366))+(((-1.0)*cj5*r20*x8365)));
evalcond[1]=(((r01*x8366))+(((-1.0)*x8363*x8365))+((r02*x8362))+((cj0*sj1)));
evalcond[2]=((((-1.0)*cj5*r10*x8365))+((sj0*sj1))+((r12*x8362))+((r11*x8366)));
evalcond[3]=(((r22*x8361))+(((-1.0)*r21*x8368))+(((-1.0)*sj1*sj2))+((r20*x8367)));
evalcond[4]=(((cj2*sj0))+(((-1.0)*r01*x8368))+((r02*x8361))+((x8362*x8363))+((cj0*x8364)));
evalcond[5]=((((-1.0)*r11*x8368))+((r12*x8361))+((sj0*x8364))+(((-1.0)*cj0*cj2))+((r10*x8367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8369=(sj0*sj1);
IkReal x8370=((1.0)*sj5);
IkReal x8371=((1.0)*cj5);
CheckValue<IkReal> x8372=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8371))+(((-1.0)*r00*x8370)))),-1);
if(!x8372.valid){
continue;
}
CheckValue<IkReal> x8373 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*r10*x8371))+((cj5*r20*x8369))+((cj1*r11*sj5))+(((-1.0)*r21*x8369*x8370)))),IkReal((((r22*x8369))+(((-1.0)*cj1*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8372.value)))+(x8373.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8374=IKcos(j4);
IkReal x8375=IKsin(j4);
IkReal x8376=(cj5*r00);
IkReal x8377=(cj1*sj2);
IkReal x8378=((1.0)*x8374);
IkReal x8379=(sj5*x8374);
IkReal x8380=(cj5*x8375);
IkReal x8381=((1.0)*sj5*x8375);
evalcond[0]=(cj1+(((-1.0)*cj5*r20*x8378))+((r21*x8379))+((r22*x8375)));
evalcond[1]=((((-1.0)*x8376*x8378))+((r02*x8375))+((cj0*sj1))+((r01*x8379)));
evalcond[2]=(((sj0*sj1))+((r12*x8375))+(((-1.0)*cj5*r10*x8378))+((r11*x8379)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x8381))+((r22*x8374))+((r20*x8380)));
evalcond[4]=(((cj2*sj0))+((cj0*x8377))+((r02*x8374))+(((-1.0)*r01*x8381))+((x8375*x8376)));
evalcond[5]=(((sj0*x8377))+((r12*x8374))+(((-1.0)*cj0*cj2))+((r10*x8380))+(((-1.0)*r11*x8381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8382=((1.0)*cj1);
IkReal x8383=(cj0*sj1);
CheckValue<IkReal> x8384 = IKatan2WithCheck(IkReal((((cj1*r01*sj5))+(((-1.0)*r21*sj5*x8383))+(((-1.0)*cj5*r00*x8382))+((cj5*r20*x8383)))),IkReal(((((-1.0)*r02*x8382))+((r22*x8383)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8384.valid){
continue;
}
CheckValue<IkReal> x8385=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8384.value)+(((1.5707963267949)*(x8385.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8386=IKcos(j4);
IkReal x8387=IKsin(j4);
IkReal x8388=(cj5*r00);
IkReal x8389=(cj1*sj2);
IkReal x8390=((1.0)*x8386);
IkReal x8391=(sj5*x8386);
IkReal x8392=(cj5*x8387);
IkReal x8393=((1.0)*sj5*x8387);
evalcond[0]=((((-1.0)*cj5*r20*x8390))+cj1+((r21*x8391))+((r22*x8387)));
evalcond[1]=((((-1.0)*x8388*x8390))+((r02*x8387))+((r01*x8391))+((cj0*sj1)));
evalcond[2]=(((sj0*sj1))+((r12*x8387))+((r11*x8391))+(((-1.0)*cj5*r10*x8390)));
evalcond[3]=(((r20*x8392))+(((-1.0)*sj1*sj2))+((r22*x8386))+(((-1.0)*r21*x8393)));
evalcond[4]=(((cj2*sj0))+((r02*x8386))+((x8387*x8388))+(((-1.0)*r01*x8393))+((cj0*x8389)));
evalcond[5]=(((sj0*x8389))+((r10*x8392))+((r12*x8386))+(((-1.0)*cj0*cj2))+(((-1.0)*r11*x8393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8394=cj5*cj5;
IkReal x8395=r21*r21;
IkReal x8396=(sj1*sj2);
IkReal x8397=(r21*sj5);
IkReal x8398=(cj5*r20);
IkReal x8399=((1.0)*cj1);
CheckValue<IkReal> x8400=IKPowWithIntegerCheck(IKsign((x8395+(r22*r22)+(((-2.0)*x8397*x8398))+(((-1.0)*x8394*x8395))+((x8394*(r20*r20))))),-1);
if(!x8400.valid){
continue;
}
CheckValue<IkReal> x8401 = IKatan2WithCheck(IkReal(((((-1.0)*x8396*x8397))+((x8396*x8398))+(((-1.0)*r22*x8399)))),IkReal((((cj1*x8398))+((r22*x8396))+(((-1.0)*x8397*x8399)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8400.value)))+(x8401.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8402=IKcos(j4);
IkReal x8403=IKsin(j4);
IkReal x8404=(r21*sj5);
IkReal x8405=(cj5*r20);
evalcond[0]=(cj1+((r22*x8403))+(((-1.0)*x8402*x8405))+((x8402*x8404)));
evalcond[1]=(((r22*x8402))+(((-1.0)*sj1*sj2))+(((-1.0)*x8403*x8404))+((x8403*x8405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x8406=(cj4*cj5);
IkReal x8407=((1.0)*sj4);
IkReal x8408=((1.0)*cj4*sj5);
j0eval[0]=sj1;
j0eval[1]=IKsign(sj1);
j0eval[2]=((IKabs(((((-1.0)*r01*x8408))+((r00*x8406))+(((-1.0)*r02*x8407)))))+(IKabs(((((-1.0)*r12*x8407))+(((-1.0)*r11*x8408))+((r10*x8406))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=sj1;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=cj2;
j0eval[2]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j0eval[0]=sj2;
j0eval[1]=((IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(sj2);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j0eval[0]=cj2;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8409=IKPowWithIntegerCheck(cj2,-1);
if(!x8409.valid){
continue;
}
CheckValue<IkReal> x8410=IKPowWithIntegerCheck(sj2,-1);
if(!x8410.valid){
continue;
}
if( IKabs(((x8409.value)*(((((-1.0)*cj4*r02))+(((-1.0)*cj5*r00*sj4))+((r01*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8410.value)*((((cj5*r11))+((r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8409.value)*(((((-1.0)*cj4*r02))+(((-1.0)*cj5*r00*sj4))+((r01*sj4*sj5))))))+IKsqr(((x8410.value)*((((cj5*r11))+((r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x8409.value)*(((((-1.0)*cj4*r02))+(((-1.0)*cj5*r00*sj4))+((r01*sj4*sj5))))), ((x8410.value)*((((cj5*r11))+((r10*sj5))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8411=IKcos(j0);
IkReal x8412=IKsin(j0);
IkReal x8413=(cj5*r00);
IkReal x8414=((1.0)*sj5);
IkReal x8415=((1.0)*cj4);
IkReal x8416=((1.0)*cj5);
IkReal x8417=((0.4)*cj5);
IkReal x8418=(cj5*r10);
IkReal x8419=(cj4*sj5);
IkReal x8420=((0.4)*sj5);
IkReal x8421=(sj2*x8411);
IkReal x8422=(sj2*x8412);
evalcond[0]=(x8421+(((-1.0)*r11*x8416))+(((-1.0)*r10*x8414)));
evalcond[1]=((((-1.0)*r00*x8414))+(((-1.0)*r01*x8416))+(((-1.0)*x8422)));
evalcond[2]=(x8411+((r02*sj4))+(((-1.0)*x8413*x8415))+((r01*x8419)));
evalcond[3]=(x8412+((r11*x8419))+(((-1.0)*x8415*x8418))+((r12*sj4)));
evalcond[4]=(((sj4*x8413))+(((-1.0)*r01*sj4*x8414))+((cj2*x8412))+((cj4*r02)));
evalcond[5]=((((-1.0)*cj2*x8411))+((sj4*x8418))+(((-1.0)*r11*sj4*x8414))+((cj4*r12)));
evalcond[6]=((((0.41956376)*x8411))+(((-0.00043624)*x8422))+(((-1.0)*r01*x8417))+(((-1.0)*px))+(((-1.0)*r00*x8420)));
evalcond[7]=((((0.41956376)*x8412))+(((-1.0)*r10*x8420))+(((-1.0)*r11*x8417))+(((-1.0)*py))+(((0.00043624)*x8421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8423=IKPowWithIntegerCheck(sj2,-1);
if(!x8423.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*r11*sj5))+((cj4*cj5*r10))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8423.value)*((((cj5*r11))+((r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r11*sj5))+((cj4*cj5*r10))+(((-1.0)*r12*sj4))))+IKsqr(((x8423.value)*((((cj5*r11))+((r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r11*sj5))+((cj4*cj5*r10))+(((-1.0)*r12*sj4))), ((x8423.value)*((((cj5*r11))+((r10*sj5))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8424=IKcos(j0);
IkReal x8425=IKsin(j0);
IkReal x8426=(cj5*r00);
IkReal x8427=((1.0)*sj5);
IkReal x8428=((1.0)*cj4);
IkReal x8429=((1.0)*cj5);
IkReal x8430=((0.4)*cj5);
IkReal x8431=(cj5*r10);
IkReal x8432=(cj4*sj5);
IkReal x8433=((0.4)*sj5);
IkReal x8434=(sj2*x8424);
IkReal x8435=(sj2*x8425);
evalcond[0]=(x8434+(((-1.0)*r10*x8427))+(((-1.0)*r11*x8429)));
evalcond[1]=((((-1.0)*x8435))+(((-1.0)*r01*x8429))+(((-1.0)*r00*x8427)));
evalcond[2]=((((-1.0)*x8426*x8428))+((r01*x8432))+x8424+((r02*sj4)));
evalcond[3]=(x8425+((r12*sj4))+((r11*x8432))+(((-1.0)*x8428*x8431)));
evalcond[4]=((((-1.0)*r01*sj4*x8427))+((sj4*x8426))+((cj2*x8425))+((cj4*r02)));
evalcond[5]=((((-1.0)*cj2*x8424))+((sj4*x8431))+(((-1.0)*r11*sj4*x8427))+((cj4*r12)));
evalcond[6]=((((-1.0)*r00*x8433))+(((-1.0)*r01*x8430))+(((0.41956376)*x8424))+(((-1.0)*px))+(((-0.00043624)*x8435)));
evalcond[7]=((((-1.0)*r10*x8433))+(((0.41956376)*x8425))+(((0.00043624)*x8434))+(((-1.0)*r11*x8430))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8436=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x8436.valid){
continue;
}
CheckValue<IkReal> x8437 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8437.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8436.value)))+(x8437.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8438=IKcos(j0);
IkReal x8439=IKsin(j0);
IkReal x8440=(cj5*r00);
IkReal x8441=((1.0)*sj5);
IkReal x8442=((1.0)*cj4);
IkReal x8443=((1.0)*cj5);
IkReal x8444=((0.4)*cj5);
IkReal x8445=(cj5*r10);
IkReal x8446=(cj4*sj5);
IkReal x8447=((0.4)*sj5);
IkReal x8448=(sj2*x8438);
IkReal x8449=(sj2*x8439);
evalcond[0]=(x8448+(((-1.0)*r11*x8443))+(((-1.0)*r10*x8441)));
evalcond[1]=((((-1.0)*r00*x8441))+(((-1.0)*r01*x8443))+(((-1.0)*x8449)));
evalcond[2]=(x8438+(((-1.0)*x8440*x8442))+((r02*sj4))+((r01*x8446)));
evalcond[3]=(x8439+((r11*x8446))+(((-1.0)*x8442*x8445))+((r12*sj4)));
evalcond[4]=((((-1.0)*r01*sj4*x8441))+((cj2*x8439))+((sj4*x8440))+((cj4*r02)));
evalcond[5]=((((-1.0)*r11*sj4*x8441))+((sj4*x8445))+(((-1.0)*cj2*x8438))+((cj4*r12)));
evalcond[6]=((((-1.0)*r00*x8447))+(((-1.0)*r01*x8444))+(((-1.0)*px))+(((0.41956376)*x8438))+(((-0.00043624)*x8449)));
evalcond[7]=((((0.00043624)*x8448))+(((-1.0)*r11*x8444))+(((-1.0)*py))+(((-1.0)*r10*x8447))+(((0.41956376)*x8439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j0eval[0]=sj2;
j0eval[1]=((IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(sj2);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j0eval[0]=cj2;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8450=IKPowWithIntegerCheck(cj2,-1);
if(!x8450.valid){
continue;
}
CheckValue<IkReal> x8451=IKPowWithIntegerCheck(sj2,-1);
if(!x8451.valid){
continue;
}
if( IKabs(((x8450.value)*(((((-1.0)*cj4*r02))+(((-1.0)*cj5*r00*sj4))+((r01*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8451.value)*((((cj5*r11))+((r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8450.value)*(((((-1.0)*cj4*r02))+(((-1.0)*cj5*r00*sj4))+((r01*sj4*sj5))))))+IKsqr(((x8451.value)*((((cj5*r11))+((r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x8450.value)*(((((-1.0)*cj4*r02))+(((-1.0)*cj5*r00*sj4))+((r01*sj4*sj5))))), ((x8451.value)*((((cj5*r11))+((r10*sj5))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8452=IKsin(j0);
IkReal x8453=IKcos(j0);
IkReal x8454=(cj5*r00);
IkReal x8455=((1.0)*sj5);
IkReal x8456=((1.0)*cj4);
IkReal x8457=((1.0)*cj5);
IkReal x8458=((0.4)*cj5);
IkReal x8459=(cj5*r10);
IkReal x8460=(cj4*sj5);
IkReal x8461=((0.4)*sj5);
IkReal x8462=(sj2*x8453);
IkReal x8463=((1.0)*x8452);
IkReal x8464=((1.0)*x8453);
evalcond[0]=(x8462+(((-1.0)*r11*x8457))+(((-1.0)*r10*x8455)));
evalcond[1]=((((-1.0)*r01*x8457))+(((-1.0)*r00*x8455))+(((-1.0)*sj2*x8463)));
evalcond[2]=((((-1.0)*r01*sj4*x8455))+((sj4*x8454))+((cj2*x8452))+((cj4*r02)));
evalcond[3]=(((r01*x8460))+(((-1.0)*x8464))+(((-1.0)*x8454*x8456))+((r02*sj4)));
evalcond[4]=((((-1.0)*x8463))+((r11*x8460))+((r12*sj4))+(((-1.0)*x8456*x8459)));
evalcond[5]=(((sj4*x8459))+(((-1.0)*cj2*x8464))+((cj4*r12))+(((-1.0)*r11*sj4*x8455)));
evalcond[6]=((((-1.0)*r01*x8458))+(((-0.00043624)*sj2*x8452))+(((-1.0)*px))+(((-0.42043624)*x8453))+(((-1.0)*r00*x8461)));
evalcond[7]=((((-1.0)*r11*x8458))+(((-1.0)*py))+(((-1.0)*r10*x8461))+(((0.00043624)*x8462))+(((-0.42043624)*x8452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8465=IKPowWithIntegerCheck(sj2,-1);
if(!x8465.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*cj5*r10))+((r12*sj4))+((cj4*r11*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8465.value)*((((cj5*r11))+((r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*cj5*r10))+((r12*sj4))+((cj4*r11*sj5))))+IKsqr(((x8465.value)*((((cj5*r11))+((r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*cj5*r10))+((r12*sj4))+((cj4*r11*sj5))), ((x8465.value)*((((cj5*r11))+((r10*sj5))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8466=IKsin(j0);
IkReal x8467=IKcos(j0);
IkReal x8468=(cj5*r00);
IkReal x8469=((1.0)*sj5);
IkReal x8470=((1.0)*cj4);
IkReal x8471=((1.0)*cj5);
IkReal x8472=((0.4)*cj5);
IkReal x8473=(cj5*r10);
IkReal x8474=(cj4*sj5);
IkReal x8475=((0.4)*sj5);
IkReal x8476=(sj2*x8467);
IkReal x8477=((1.0)*x8466);
IkReal x8478=((1.0)*x8467);
evalcond[0]=(x8476+(((-1.0)*r10*x8469))+(((-1.0)*r11*x8471)));
evalcond[1]=((((-1.0)*sj2*x8477))+(((-1.0)*r01*x8471))+(((-1.0)*r00*x8469)));
evalcond[2]=((((-1.0)*r01*sj4*x8469))+((cj2*x8466))+((sj4*x8468))+((cj4*r02)));
evalcond[3]=(((r01*x8474))+(((-1.0)*x8478))+((r02*sj4))+(((-1.0)*x8468*x8470)));
evalcond[4]=((((-1.0)*x8477))+(((-1.0)*x8470*x8473))+((r11*x8474))+((r12*sj4)));
evalcond[5]=((((-1.0)*r11*sj4*x8469))+(((-1.0)*cj2*x8478))+((sj4*x8473))+((cj4*r12)));
evalcond[6]=((((-0.00043624)*sj2*x8466))+(((-1.0)*px))+(((-0.42043624)*x8467))+(((-1.0)*r01*x8472))+(((-1.0)*r00*x8475)));
evalcond[7]=((((-1.0)*py))+(((-0.42043624)*x8466))+(((-1.0)*r10*x8475))+(((-1.0)*r11*x8472))+(((0.00043624)*x8476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8479=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x8479.valid){
continue;
}
CheckValue<IkReal> x8480 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8480.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8479.value)))+(x8480.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8481=IKsin(j0);
IkReal x8482=IKcos(j0);
IkReal x8483=(cj5*r00);
IkReal x8484=((1.0)*sj5);
IkReal x8485=((1.0)*cj4);
IkReal x8486=((1.0)*cj5);
IkReal x8487=((0.4)*cj5);
IkReal x8488=(cj5*r10);
IkReal x8489=(cj4*sj5);
IkReal x8490=((0.4)*sj5);
IkReal x8491=(sj2*x8482);
IkReal x8492=((1.0)*x8481);
IkReal x8493=((1.0)*x8482);
evalcond[0]=(x8491+(((-1.0)*r10*x8484))+(((-1.0)*r11*x8486)));
evalcond[1]=((((-1.0)*r01*x8486))+(((-1.0)*sj2*x8492))+(((-1.0)*r00*x8484)));
evalcond[2]=(((cj2*x8481))+(((-1.0)*r01*sj4*x8484))+((sj4*x8483))+((cj4*r02)));
evalcond[3]=(((r01*x8489))+(((-1.0)*x8483*x8485))+((r02*sj4))+(((-1.0)*x8493)));
evalcond[4]=((((-1.0)*x8485*x8488))+((r12*sj4))+((r11*x8489))+(((-1.0)*x8492)));
evalcond[5]=((((-1.0)*cj2*x8493))+((sj4*x8488))+(((-1.0)*r11*sj4*x8484))+((cj4*r12)));
evalcond[6]=((((-0.42043624)*x8482))+(((-1.0)*r01*x8487))+(((-1.0)*r00*x8490))+(((-0.00043624)*sj2*x8481))+(((-1.0)*px)));
evalcond[7]=((((-0.42043624)*x8481))+(((0.00043624)*x8491))+(((-1.0)*r10*x8490))+(((-1.0)*py))+(((-1.0)*r11*x8487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))))+IKsqr((((cj5*r11))+((r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))), (((cj5*r11))+((r10*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8494=IKcos(j0);
IkReal x8495=IKsin(j0);
IkReal x8496=(cj5*r00);
IkReal x8497=((1.0)*sj5);
IkReal x8498=((0.4)*sj5);
IkReal x8499=((1.0)*cj4);
IkReal x8500=((1.0)*cj5);
IkReal x8501=((0.4)*cj5);
IkReal x8502=(cj5*r10);
IkReal x8503=(cj4*sj5);
IkReal x8504=((0.00043624)*x8494);
IkReal x8505=((0.00043624)*x8495);
IkReal x8506=(sj1*x8495);
IkReal x8507=(sj1*x8494);
evalcond[0]=(x8494+(((-1.0)*r10*x8497))+(((-1.0)*r11*x8500)));
evalcond[1]=((((-1.0)*r00*x8497))+(((-1.0)*r01*x8500))+(((-1.0)*x8495)));
evalcond[2]=((((-1.0)*r01*sj4*x8497))+((sj4*x8496))+((cj1*x8494))+((cj4*r02)));
evalcond[3]=(((sj4*x8502))+(((-1.0)*r11*sj4*x8497))+((cj1*x8495))+((cj4*r12)));
evalcond[4]=(x8507+((r02*sj4))+(((-1.0)*x8496*x8499))+((r01*x8503)));
evalcond[5]=(x8506+((r11*x8503))+(((-1.0)*x8499*x8502))+((r12*sj4)));
evalcond[6]=((((-1.0)*r00*x8498))+(((0.42)*x8507))+(((-1.0)*px))+(((-1.0)*x8505))+(((-1.0)*x8504))+(((-1.0)*r01*x8501)));
evalcond[7]=((((0.42)*x8506))+x8504+(((-1.0)*r10*x8498))+(((-1.0)*py))+(((-1.0)*x8505))+(((-1.0)*r11*x8501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj5))+((cj5*r01))))+IKsqr(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*sj5))+((cj5*r01))), ((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8508=IKcos(j0);
IkReal x8509=IKsin(j0);
IkReal x8510=(cj5*r00);
IkReal x8511=((1.0)*sj5);
IkReal x8512=((0.4)*sj5);
IkReal x8513=((1.0)*cj4);
IkReal x8514=(cj5*r10);
IkReal x8515=((1.0)*cj5);
IkReal x8516=((0.4)*cj5);
IkReal x8517=(cj4*sj5);
IkReal x8518=((0.00043624)*x8509);
IkReal x8519=((0.00043624)*x8508);
IkReal x8520=(sj1*x8509);
IkReal x8521=((1.0)*x8508);
IkReal x8522=(sj1*x8508);
evalcond[0]=(x8509+(((-1.0)*r00*x8511))+(((-1.0)*r01*x8515)));
evalcond[1]=((((-1.0)*x8521))+(((-1.0)*r11*x8515))+(((-1.0)*r10*x8511)));
evalcond[2]=(x8522+((r02*sj4))+(((-1.0)*x8510*x8513))+((r01*x8517)));
evalcond[3]=((((-1.0)*x8513*x8514))+x8520+((r11*x8517))+((r12*sj4)));
evalcond[4]=((((-1.0)*r01*sj4*x8511))+(((-1.0)*cj1*x8521))+((sj4*x8510))+((cj4*r02)));
evalcond[5]=(((sj4*x8514))+(((-1.0)*r11*sj4*x8511))+((cj4*r12))+(((-1.0)*cj1*x8509)));
evalcond[6]=((((0.42)*x8522))+x8518+(((-1.0)*px))+(((-1.0)*x8519))+(((-1.0)*r00*x8512))+(((-1.0)*r01*x8516)));
evalcond[7]=((((0.42)*x8520))+(((-1.0)*py))+(((-1.0)*x8518))+(((-1.0)*x8519))+(((-1.0)*r11*x8516))+(((-1.0)*r10*x8512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8523=(r00*sj5);
IkReal x8524=((1.0)*sj2);
IkReal x8525=(cj5*r11);
IkReal x8526=(r10*sj5);
IkReal x8527=(cj5*r01);
if( IKabs(((((-1.0)*x8523*x8524))+((cj2*x8526))+((cj2*x8525))+(((-1.0)*x8524*x8527)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj2*x8525))+((sj2*x8526))+((cj2*x8527))+((cj2*x8523)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x8523*x8524))+((cj2*x8526))+((cj2*x8525))+(((-1.0)*x8524*x8527))))+IKsqr((((sj2*x8525))+((sj2*x8526))+((cj2*x8527))+((cj2*x8523))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x8523*x8524))+((cj2*x8526))+((cj2*x8525))+(((-1.0)*x8524*x8527))), (((sj2*x8525))+((sj2*x8526))+((cj2*x8527))+((cj2*x8523))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x8528=IKcos(j0);
IkReal x8529=IKsin(j0);
IkReal x8530=(cj5*sj4);
IkReal x8531=((1.0)*sj5);
IkReal x8532=((1.0)*cj5);
IkReal x8533=((0.4)*cj5);
IkReal x8534=((0.4)*sj5);
IkReal x8535=(sj2*x8528);
IkReal x8536=(cj2*x8529);
IkReal x8537=((0.00043624)*x8528);
IkReal x8538=(cj2*x8528);
IkReal x8539=((0.00043624)*x8529);
IkReal x8540=(sj2*x8529);
IkReal x8541=(x8535+x8536);
evalcond[0]=(x8541+(((-1.0)*r11*x8532))+(((-1.0)*r10*x8531)));
evalcond[1]=((((-1.0)*r01*x8532))+(((-1.0)*r00*x8531))+x8538+(((-1.0)*x8540)));
evalcond[2]=(x8541+((r00*x8530))+(((-1.0)*r01*sj4*x8531))+((cj4*r02)));
evalcond[3]=((((-1.0)*x8538))+x8540+((r10*x8530))+((cj4*r12))+(((-1.0)*r11*sj4*x8531)));
evalcond[4]=((((-1.0)*x8537))+(((-1.0)*r01*x8533))+(((-1.0)*r00*x8534))+(((-1.0)*px))+((cj2*x8537))+(((-1.0)*sj2*x8539)));
evalcond[5]=((((-1.0)*x8539))+(((0.00043624)*x8536))+(((0.00043624)*x8535))+(((-1.0)*r11*x8533))+(((-1.0)*py))+(((-1.0)*r10*x8534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8542=((1.0)*sj2);
IkReal x8543=(r00*sj5);
IkReal x8544=((1.0)*cj2);
IkReal x8545=(r10*sj5);
IkReal x8546=(cj5*x8544);
if( IKabs(((((-1.0)*cj5*r01*x8542))+(((-1.0)*x8542*x8543))+(((-1.0)*r11*x8546))+(((-1.0)*x8544*x8545)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x8546))+((cj5*r11*sj2))+(((-1.0)*x8543*x8544))+((sj2*x8545)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r01*x8542))+(((-1.0)*x8542*x8543))+(((-1.0)*r11*x8546))+(((-1.0)*x8544*x8545))))+IKsqr(((((-1.0)*r01*x8546))+((cj5*r11*sj2))+(((-1.0)*x8543*x8544))+((sj2*x8545))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj5*r01*x8542))+(((-1.0)*x8542*x8543))+(((-1.0)*r11*x8546))+(((-1.0)*x8544*x8545))), ((((-1.0)*r01*x8546))+((cj5*r11*sj2))+(((-1.0)*x8543*x8544))+((sj2*x8545))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x8547=IKcos(j0);
IkReal x8548=IKsin(j0);
IkReal x8549=(cj5*sj4);
IkReal x8550=((1.0)*sj5);
IkReal x8551=((1.0)*cj5);
IkReal x8552=((0.4)*cj5);
IkReal x8553=((0.4)*sj5);
IkReal x8554=((0.00043624)*x8547);
IkReal x8555=((1.0)*x8547);
IkReal x8556=((0.00043624)*x8548);
IkReal x8557=(cj2*x8548);
IkReal x8558=(cj2*x8555);
IkReal x8559=((1.0)*sj2*x8548);
IkReal x8560=(x8558+x8559);
evalcond[0]=((((-1.0)*r10*x8550))+((sj2*x8547))+(((-1.0)*x8557))+(((-1.0)*r11*x8551)));
evalcond[1]=((((-1.0)*r01*x8551))+(((-1.0)*r00*x8550))+(((-1.0)*x8560)));
evalcond[2]=(((r00*x8549))+x8557+(((-1.0)*r01*sj4*x8550))+(((-1.0)*sj2*x8555))+((cj4*r02)));
evalcond[3]=(((r10*x8549))+(((-1.0)*r11*sj4*x8550))+(((-1.0)*x8560))+((cj4*r12)));
evalcond[4]=((((-1.0)*r01*x8552))+(((-1.0)*r00*x8553))+(((-1.0)*px))+(((-1.0)*cj2*x8554))+(((-1.0)*x8554))+(((-1.0)*sj2*x8556)));
evalcond[5]=(((sj2*x8554))+(((-1.0)*r10*x8553))+(((-1.0)*py))+(((-1.0)*cj2*x8556))+(((-1.0)*x8556))+(((-1.0)*r11*x8552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=cj1;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8561=IKPowWithIntegerCheck(cj1,-1);
if(!x8561.valid){
continue;
}
CheckValue<IkReal> x8562=IKPowWithIntegerCheck(sj1,-1);
if(!x8562.valid){
continue;
}
if( IKabs(((x8561.value)*((((cj5*r11))+((r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8562.value)*(((((-1.0)*r02*sj4))+((cj4*cj5*r00))+(((-1.0)*cj4*r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8561.value)*((((cj5*r11))+((r10*sj5))))))+IKsqr(((x8562.value)*(((((-1.0)*r02*sj4))+((cj4*cj5*r00))+(((-1.0)*cj4*r01*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x8561.value)*((((cj5*r11))+((r10*sj5))))), ((x8562.value)*(((((-1.0)*r02*sj4))+((cj4*cj5*r00))+(((-1.0)*cj4*r01*sj5))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8563=IKsin(j0);
IkReal x8564=IKcos(j0);
IkReal x8565=(cj5*r00);
IkReal x8566=((1.0)*sj5);
IkReal x8567=((1.0)*cj4);
IkReal x8568=((1.0)*cj5);
IkReal x8569=((0.4)*cj5);
IkReal x8570=(cj5*r10);
IkReal x8571=(cj4*sj5);
IkReal x8572=((0.4)*sj5);
IkReal x8573=((0.00043624)*x8564);
IkReal x8574=(sj1*x8563);
IkReal x8575=((0.00043624)*x8563);
IkReal x8576=(sj1*x8564);
evalcond[0]=((((-1.0)*r11*x8568))+(((-1.0)*r10*x8566))+((cj1*x8563)));
evalcond[1]=((((-1.0)*r01*x8568))+(((-1.0)*r00*x8566))+((cj1*x8564)));
evalcond[2]=(((sj4*x8565))+x8563+(((-1.0)*r01*sj4*x8566))+((cj4*r02)));
evalcond[3]=((((-1.0)*r11*sj4*x8566))+((sj4*x8570))+(((-1.0)*x8564))+((cj4*r12)));
evalcond[4]=(x8576+(((-1.0)*x8565*x8567))+((r01*x8571))+((r02*sj4)));
evalcond[5]=(x8574+(((-1.0)*x8567*x8570))+((r12*sj4))+((r11*x8571)));
evalcond[6]=(((cj1*x8573))+(((-1.0)*r01*x8569))+(((-1.0)*x8573))+(((0.42)*x8576))+(((-1.0)*px))+(((-1.0)*r00*x8572)));
evalcond[7]=(((cj1*x8575))+(((-1.0)*r11*x8569))+(((-1.0)*x8575))+(((0.42)*x8574))+(((-1.0)*py))+(((-1.0)*r10*x8572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8577=IKPowWithIntegerCheck(cj1,-1);
if(!x8577.valid){
continue;
}
if( IKabs(((x8577.value)*((((cj5*r11))+((r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r10*sj4))+(((-1.0)*r11*sj4*sj5))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8577.value)*((((cj5*r11))+((r10*sj5))))))+IKsqr((((cj5*r10*sj4))+(((-1.0)*r11*sj4*sj5))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x8577.value)*((((cj5*r11))+((r10*sj5))))), (((cj5*r10*sj4))+(((-1.0)*r11*sj4*sj5))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8578=IKsin(j0);
IkReal x8579=IKcos(j0);
IkReal x8580=(cj5*r00);
IkReal x8581=((1.0)*sj5);
IkReal x8582=((1.0)*cj4);
IkReal x8583=((1.0)*cj5);
IkReal x8584=((0.4)*cj5);
IkReal x8585=(cj5*r10);
IkReal x8586=(cj4*sj5);
IkReal x8587=((0.4)*sj5);
IkReal x8588=((0.00043624)*x8579);
IkReal x8589=(sj1*x8578);
IkReal x8590=((0.00043624)*x8578);
IkReal x8591=(sj1*x8579);
evalcond[0]=(((cj1*x8578))+(((-1.0)*r10*x8581))+(((-1.0)*r11*x8583)));
evalcond[1]=(((cj1*x8579))+(((-1.0)*r00*x8581))+(((-1.0)*r01*x8583)));
evalcond[2]=(x8578+((sj4*x8580))+(((-1.0)*r01*sj4*x8581))+((cj4*r02)));
evalcond[3]=((((-1.0)*x8579))+((sj4*x8585))+(((-1.0)*r11*sj4*x8581))+((cj4*r12)));
evalcond[4]=((((-1.0)*x8580*x8582))+x8591+((r02*sj4))+((r01*x8586)));
evalcond[5]=((((-1.0)*x8582*x8585))+x8589+((r11*x8586))+((r12*sj4)));
evalcond[6]=((((-1.0)*x8588))+(((-1.0)*px))+(((0.42)*x8591))+(((-1.0)*r00*x8587))+(((-1.0)*r01*x8584))+((cj1*x8588)));
evalcond[7]=((((0.42)*x8589))+(((-1.0)*py))+(((-1.0)*r10*x8587))+(((-1.0)*r11*x8584))+((cj1*x8590))+(((-1.0)*x8590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8592=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x8592.valid){
continue;
}
CheckValue<IkReal> x8593 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8593.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8592.value)))+(x8593.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8594=IKsin(j0);
IkReal x8595=IKcos(j0);
IkReal x8596=(cj5*r00);
IkReal x8597=((1.0)*sj5);
IkReal x8598=((1.0)*cj4);
IkReal x8599=((1.0)*cj5);
IkReal x8600=((0.4)*cj5);
IkReal x8601=(cj5*r10);
IkReal x8602=(cj4*sj5);
IkReal x8603=((0.4)*sj5);
IkReal x8604=((0.00043624)*x8595);
IkReal x8605=(sj1*x8594);
IkReal x8606=((0.00043624)*x8594);
IkReal x8607=(sj1*x8595);
evalcond[0]=((((-1.0)*r10*x8597))+(((-1.0)*r11*x8599))+((cj1*x8594)));
evalcond[1]=((((-1.0)*r01*x8599))+(((-1.0)*r00*x8597))+((cj1*x8595)));
evalcond[2]=(((sj4*x8596))+x8594+(((-1.0)*r01*sj4*x8597))+((cj4*r02)));
evalcond[3]=((((-1.0)*r11*sj4*x8597))+(((-1.0)*x8595))+((sj4*x8601))+((cj4*r12)));
evalcond[4]=(x8607+(((-1.0)*x8596*x8598))+((r01*x8602))+((r02*sj4)));
evalcond[5]=(x8605+((r11*x8602))+((r12*sj4))+(((-1.0)*x8598*x8601)));
evalcond[6]=((((-1.0)*r00*x8603))+(((-1.0)*r01*x8600))+((cj1*x8604))+(((0.42)*x8607))+(((-1.0)*px))+(((-1.0)*x8604)));
evalcond[7]=(((cj1*x8606))+(((0.42)*x8605))+(((-1.0)*r11*x8600))+(((-1.0)*py))+(((-1.0)*r10*x8603))+(((-1.0)*x8606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x8608=((1.0)*sj5);
IkReal x8609=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs(((((-1.0)*r11*x8609))+(((-1.0)*r10*x8608)))))+(IKabs(((((-1.0)*r00*x8608))+(((-1.0)*r01*x8609))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=cj1;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8610=((1.0)*sj5);
CheckValue<IkReal> x8611=IKPowWithIntegerCheck(cj1,-1);
if(!x8611.valid){
continue;
}
CheckValue<IkReal> x8612=IKPowWithIntegerCheck(sj1,-1);
if(!x8612.valid){
continue;
}
if( IKabs(((x8611.value)*(((((-1.0)*cj5*r11))+(((-1.0)*r10*x8610)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8612.value)*(((((-1.0)*cj4*r01*x8610))+(((-1.0)*r02*sj4))+((cj4*cj5*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8611.value)*(((((-1.0)*cj5*r11))+(((-1.0)*r10*x8610))))))+IKsqr(((x8612.value)*(((((-1.0)*cj4*r01*x8610))+(((-1.0)*r02*sj4))+((cj4*cj5*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x8611.value)*(((((-1.0)*cj5*r11))+(((-1.0)*r10*x8610))))), ((x8612.value)*(((((-1.0)*cj4*r01*x8610))+(((-1.0)*r02*sj4))+((cj4*cj5*r00))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8613=IKcos(j0);
IkReal x8614=IKsin(j0);
IkReal x8615=(cj5*r00);
IkReal x8616=((1.0)*sj5);
IkReal x8617=((1.0)*cj4);
IkReal x8618=((1.0)*cj5);
IkReal x8619=((0.4)*cj5);
IkReal x8620=(cj5*r10);
IkReal x8621=(cj4*sj5);
IkReal x8622=((0.4)*sj5);
IkReal x8623=((0.00043624)*x8613);
IkReal x8624=((1.0)*x8614);
IkReal x8625=(sj1*x8614);
IkReal x8626=((0.00043624)*x8614);
IkReal x8627=(sj1*x8613);
evalcond[0]=((((-1.0)*cj1*x8624))+(((-1.0)*r11*x8618))+(((-1.0)*r10*x8616)));
evalcond[1]=((((-1.0)*r01*x8618))+(((-1.0)*r00*x8616))+(((-1.0)*cj1*x8613)));
evalcond[2]=(x8613+(((-1.0)*r11*sj4*x8616))+((sj4*x8620))+((cj4*r12)));
evalcond[3]=((((-1.0)*x8624))+(((-1.0)*r01*sj4*x8616))+((sj4*x8615))+((cj4*r02)));
evalcond[4]=(x8627+((r02*sj4))+(((-1.0)*x8615*x8617))+((r01*x8621)));
evalcond[5]=(x8625+((r12*sj4))+(((-1.0)*x8617*x8620))+((r11*x8621)));
evalcond[6]=((((-1.0)*r01*x8619))+(((-1.0)*x8623))+(((-1.0)*r00*x8622))+(((-1.0)*cj1*x8623))+(((-1.0)*px))+(((0.42)*x8627)));
evalcond[7]=((((-1.0)*x8626))+(((-1.0)*cj1*x8626))+(((-1.0)*r10*x8622))+(((-1.0)*r11*x8619))+(((-1.0)*py))+(((0.42)*x8625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8628=((1.0)*r01);
CheckValue<IkReal> x8629=IKPowWithIntegerCheck(cj1,-1);
if(!x8629.valid){
continue;
}
if( IKabs(((((-1.0)*sj4*sj5*x8628))+((cj5*r00*sj4))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8629.value)*(((((-1.0)*cj5*x8628))+(((-1.0)*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*sj5*x8628))+((cj5*r00*sj4))+((cj4*r02))))+IKsqr(((x8629.value)*(((((-1.0)*cj5*x8628))+(((-1.0)*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*sj4*sj5*x8628))+((cj5*r00*sj4))+((cj4*r02))), ((x8629.value)*(((((-1.0)*cj5*x8628))+(((-1.0)*r00*sj5))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8630=IKcos(j0);
IkReal x8631=IKsin(j0);
IkReal x8632=(cj5*r00);
IkReal x8633=((1.0)*sj5);
IkReal x8634=((1.0)*cj4);
IkReal x8635=((1.0)*cj5);
IkReal x8636=((0.4)*cj5);
IkReal x8637=(cj5*r10);
IkReal x8638=(cj4*sj5);
IkReal x8639=((0.4)*sj5);
IkReal x8640=((0.00043624)*x8630);
IkReal x8641=((1.0)*x8631);
IkReal x8642=(sj1*x8631);
IkReal x8643=((0.00043624)*x8631);
IkReal x8644=(sj1*x8630);
evalcond[0]=((((-1.0)*r11*x8635))+(((-1.0)*r10*x8633))+(((-1.0)*cj1*x8641)));
evalcond[1]=((((-1.0)*r01*x8635))+(((-1.0)*r00*x8633))+(((-1.0)*cj1*x8630)));
evalcond[2]=(x8630+(((-1.0)*r11*sj4*x8633))+((sj4*x8637))+((cj4*r12)));
evalcond[3]=((((-1.0)*r01*sj4*x8633))+((sj4*x8632))+(((-1.0)*x8641))+((cj4*r02)));
evalcond[4]=(x8644+(((-1.0)*x8632*x8634))+((r02*sj4))+((r01*x8638)));
evalcond[5]=((((-1.0)*x8634*x8637))+x8642+((r12*sj4))+((r11*x8638)));
evalcond[6]=((((0.42)*x8644))+(((-1.0)*r01*x8636))+(((-1.0)*r00*x8639))+(((-1.0)*px))+(((-1.0)*cj1*x8640))+(((-1.0)*x8640)));
evalcond[7]=((((0.42)*x8642))+(((-1.0)*r11*x8636))+(((-1.0)*r10*x8639))+(((-1.0)*py))+(((-1.0)*cj1*x8643))+(((-1.0)*x8643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8645=((1.0)*sj5);
IkReal x8646=((1.0)*cj5);
CheckValue<IkReal> x8647=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x8647.valid){
continue;
}
CheckValue<IkReal> x8648 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x8645))+(((-1.0)*r11*x8646)))),IkReal(((((-1.0)*r01*x8646))+(((-1.0)*r00*x8645)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8648.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8647.value)))+(x8648.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8649=IKcos(j0);
IkReal x8650=IKsin(j0);
IkReal x8651=(cj5*r00);
IkReal x8652=((1.0)*sj5);
IkReal x8653=((1.0)*cj4);
IkReal x8654=((1.0)*cj5);
IkReal x8655=((0.4)*cj5);
IkReal x8656=(cj5*r10);
IkReal x8657=(cj4*sj5);
IkReal x8658=((0.4)*sj5);
IkReal x8659=((0.00043624)*x8649);
IkReal x8660=((1.0)*x8650);
IkReal x8661=(sj1*x8650);
IkReal x8662=((0.00043624)*x8650);
IkReal x8663=(sj1*x8649);
evalcond[0]=((((-1.0)*r11*x8654))+(((-1.0)*cj1*x8660))+(((-1.0)*r10*x8652)));
evalcond[1]=((((-1.0)*r00*x8652))+(((-1.0)*r01*x8654))+(((-1.0)*cj1*x8649)));
evalcond[2]=(x8649+((sj4*x8656))+(((-1.0)*r11*sj4*x8652))+((cj4*r12)));
evalcond[3]=((((-1.0)*x8660))+((sj4*x8651))+(((-1.0)*r01*sj4*x8652))+((cj4*r02)));
evalcond[4]=(((r01*x8657))+x8663+((r02*sj4))+(((-1.0)*x8651*x8653)));
evalcond[5]=(x8661+((r11*x8657))+((r12*sj4))+(((-1.0)*x8653*x8656)));
evalcond[6]=((((-1.0)*cj1*x8659))+(((-1.0)*r00*x8658))+(((0.42)*x8663))+(((-1.0)*x8659))+(((-1.0)*r01*x8655))+(((-1.0)*px)));
evalcond[7]=((((-1.0)*r11*x8655))+(((0.42)*x8661))+(((-1.0)*py))+(((-1.0)*x8662))+(((-1.0)*cj1*x8662))+(((-1.0)*r10*x8658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8669=IKPowWithIntegerCheck(sj1,-1);
if(!x8669.valid){
continue;
}
IkReal x8664=x8669.value;
IkReal x8665=((1.0)*cj4);
IkReal x8666=(cj5*r00);
IkReal x8667=(r01*sj5);
IkReal x8668=(r02*sj4);
CheckValue<IkReal> x8670=IKPowWithIntegerCheck(cj1,-1);
if(!x8670.valid){
continue;
}
CheckValue<IkReal> x8671=IKPowWithIntegerCheck(cj2,-1);
if(!x8671.valid){
continue;
}
if( IKabs((x8664*(x8670.value)*(x8671.value)*((((r10*sj1*sj5))+(((-1.0)*sj2*x8665*x8666))+((cj5*r11*sj1))+((sj2*x8668))+((cj4*sj2*x8667)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x8664*((((cj4*x8666))+(((-1.0)*x8665*x8667))+(((-1.0)*x8668)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x8664*(x8670.value)*(x8671.value)*((((r10*sj1*sj5))+(((-1.0)*sj2*x8665*x8666))+((cj5*r11*sj1))+((sj2*x8668))+((cj4*sj2*x8667))))))+IKsqr((x8664*((((cj4*x8666))+(((-1.0)*x8665*x8667))+(((-1.0)*x8668))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x8664*(x8670.value)*(x8671.value)*((((r10*sj1*sj5))+(((-1.0)*sj2*x8665*x8666))+((cj5*r11*sj1))+((sj2*x8668))+((cj4*sj2*x8667))))), (x8664*((((cj4*x8666))+(((-1.0)*x8665*x8667))+(((-1.0)*x8668))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8672=IKsin(j0);
IkReal x8673=IKcos(j0);
IkReal x8674=(cj5*r00);
IkReal x8675=((1.0)*sj5);
IkReal x8676=(cj1*cj2);
IkReal x8677=((1.0)*cj4);
IkReal x8678=((1.0)*cj5);
IkReal x8679=((0.4)*cj5);
IkReal x8680=(cj5*r10);
IkReal x8681=(cj4*sj5);
IkReal x8682=((0.4)*sj5);
IkReal x8683=((0.00043624)*x8673);
IkReal x8684=((0.00043624)*x8672);
IkReal x8685=(sj1*x8672);
IkReal x8686=(sj2*x8673);
IkReal x8687=(sj1*x8673);
IkReal x8688=(sj2*x8672);
evalcond[0]=(x8687+(((-1.0)*x8674*x8677))+((r01*x8681))+((r02*sj4)));
evalcond[1]=(x8685+((r11*x8681))+(((-1.0)*x8677*x8680))+((r12*sj4)));
evalcond[2]=(x8686+(((-1.0)*r11*x8678))+((x8672*x8676))+(((-1.0)*r10*x8675)));
evalcond[3]=((((-1.0)*r01*x8678))+(((-1.0)*r00*x8675))+((x8673*x8676))+(((-1.0)*x8688)));
evalcond[4]=(((cj1*x8686))+(((-1.0)*r01*sj4*x8675))+((cj2*x8672))+((sj4*x8674))+((cj4*r02)));
evalcond[5]=((((-1.0)*cj2*x8673))+((cj1*x8688))+(((-1.0)*r11*sj4*x8675))+((sj4*x8680))+((cj4*r12)));
evalcond[6]=((((-1.0)*r00*x8682))+(((0.42)*x8687))+(((-1.0)*r01*x8679))+(((-1.0)*sj2*x8684))+(((-1.0)*px))+((x8676*x8683))+(((-1.0)*x8683)));
evalcond[7]=((((0.42)*x8685))+(((-1.0)*r11*x8679))+((sj2*x8683))+(((-1.0)*py))+(((-1.0)*r10*x8682))+((x8676*x8684))+(((-1.0)*x8684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8694=IKPowWithIntegerCheck(sj1,-1);
if(!x8694.valid){
continue;
}
IkReal x8689=x8694.value;
IkReal x8690=(cj1*cj2);
IkReal x8691=(r12*sj4);
IkReal x8692=(cj4*cj5*r10);
IkReal x8693=(cj4*r11*sj5);
CheckValue<IkReal> x8695=IKPowWithIntegerCheck(sj2,-1);
if(!x8695.valid){
continue;
}
if( IKabs((x8689*((x8692+(((-1.0)*x8693))+(((-1.0)*x8691)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x8689*(x8695.value)*((((r10*sj1*sj5))+((cj5*r11*sj1))+((x8690*x8691))+((x8690*x8693))+(((-1.0)*x8690*x8692)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x8689*((x8692+(((-1.0)*x8693))+(((-1.0)*x8691))))))+IKsqr((x8689*(x8695.value)*((((r10*sj1*sj5))+((cj5*r11*sj1))+((x8690*x8691))+((x8690*x8693))+(((-1.0)*x8690*x8692))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x8689*((x8692+(((-1.0)*x8693))+(((-1.0)*x8691))))), (x8689*(x8695.value)*((((r10*sj1*sj5))+((cj5*r11*sj1))+((x8690*x8691))+((x8690*x8693))+(((-1.0)*x8690*x8692))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8696=IKsin(j0);
IkReal x8697=IKcos(j0);
IkReal x8698=(cj5*r00);
IkReal x8699=((1.0)*sj5);
IkReal x8700=(cj1*cj2);
IkReal x8701=((1.0)*cj4);
IkReal x8702=((1.0)*cj5);
IkReal x8703=((0.4)*cj5);
IkReal x8704=(cj5*r10);
IkReal x8705=(cj4*sj5);
IkReal x8706=((0.4)*sj5);
IkReal x8707=((0.00043624)*x8697);
IkReal x8708=((0.00043624)*x8696);
IkReal x8709=(sj1*x8696);
IkReal x8710=(sj2*x8697);
IkReal x8711=(sj1*x8697);
IkReal x8712=(sj2*x8696);
evalcond[0]=((((-1.0)*x8698*x8701))+x8711+((r02*sj4))+((r01*x8705)));
evalcond[1]=(((r11*x8705))+x8709+(((-1.0)*x8701*x8704))+((r12*sj4)));
evalcond[2]=(x8710+((x8696*x8700))+(((-1.0)*r10*x8699))+(((-1.0)*r11*x8702)));
evalcond[3]=(((x8697*x8700))+(((-1.0)*x8712))+(((-1.0)*r01*x8702))+(((-1.0)*r00*x8699)));
evalcond[4]=((((-1.0)*r01*sj4*x8699))+((cj2*x8696))+((sj4*x8698))+((cj1*x8710))+((cj4*r02)));
evalcond[5]=((((-1.0)*r11*sj4*x8699))+((cj1*x8712))+(((-1.0)*cj2*x8697))+((sj4*x8704))+((cj4*r12)));
evalcond[6]=((((0.42)*x8711))+(((-1.0)*sj2*x8708))+(((-1.0)*px))+(((-1.0)*x8707))+(((-1.0)*r00*x8706))+((x8700*x8707))+(((-1.0)*r01*x8703)));
evalcond[7]=((((-1.0)*py))+((sj2*x8707))+(((-1.0)*x8708))+(((0.42)*x8709))+(((-1.0)*r10*x8706))+((x8700*x8708))+(((-1.0)*r11*x8703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8713=(cj4*cj5);
IkReal x8714=((1.0)*sj4);
IkReal x8715=((1.0)*cj4*sj5);
CheckValue<IkReal> x8716=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x8716.valid){
continue;
}
CheckValue<IkReal> x8717 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8714))+(((-1.0)*r11*x8715))+((r10*x8713)))),IkReal(((((-1.0)*r01*x8715))+(((-1.0)*r02*x8714))+((r00*x8713)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8717.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8716.value)))+(x8717.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8718=IKsin(j0);
IkReal x8719=IKcos(j0);
IkReal x8720=(cj5*r00);
IkReal x8721=((1.0)*sj5);
IkReal x8722=(cj1*cj2);
IkReal x8723=((1.0)*cj4);
IkReal x8724=((1.0)*cj5);
IkReal x8725=((0.4)*cj5);
IkReal x8726=(cj5*r10);
IkReal x8727=(cj4*sj5);
IkReal x8728=((0.4)*sj5);
IkReal x8729=((0.00043624)*x8719);
IkReal x8730=((0.00043624)*x8718);
IkReal x8731=(sj1*x8718);
IkReal x8732=(sj2*x8719);
IkReal x8733=(sj1*x8719);
IkReal x8734=(sj2*x8718);
evalcond[0]=((((-1.0)*x8720*x8723))+x8733+((r02*sj4))+((r01*x8727)));
evalcond[1]=((((-1.0)*x8723*x8726))+x8731+((r11*x8727))+((r12*sj4)));
evalcond[2]=(x8732+((x8718*x8722))+(((-1.0)*r10*x8721))+(((-1.0)*r11*x8724)));
evalcond[3]=((((-1.0)*x8734))+(((-1.0)*r01*x8724))+(((-1.0)*r00*x8721))+((x8719*x8722)));
evalcond[4]=(((cj1*x8732))+(((-1.0)*r01*sj4*x8721))+((cj2*x8718))+((sj4*x8720))+((cj4*r02)));
evalcond[5]=(((cj1*x8734))+(((-1.0)*r11*sj4*x8721))+(((-1.0)*cj2*x8719))+((cj4*r12))+((sj4*x8726)));
evalcond[6]=((((-1.0)*sj2*x8730))+((x8722*x8729))+(((-1.0)*px))+(((-1.0)*x8729))+(((0.42)*x8733))+(((-1.0)*r01*x8725))+(((-1.0)*r00*x8728)));
evalcond[7]=(((x8722*x8730))+(((-1.0)*py))+((sj2*x8729))+(((-1.0)*r10*x8728))+(((-1.0)*x8730))+(((0.42)*x8731))+(((-1.0)*r11*x8725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8735=cj2*cj2;
IkReal x8736=(cj1*cj2);
IkReal x8737=(r00*sj5);
IkReal x8738=(cj5*r01);
IkReal x8739=((1.0)*sj2);
IkReal x8740=(r10*sj5);
IkReal x8741=(cj5*r11);
CheckValue<IkReal> x8742=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*x8735))+((x8735*(cj1*cj1))))),-1);
if(!x8742.valid){
continue;
}
CheckValue<IkReal> x8743 = IKatan2WithCheck(IkReal(((((-1.0)*x8738*x8739))+(((-1.0)*x8737*x8739))+((x8736*x8740))+((x8736*x8741)))),IkReal((((sj2*x8740))+((sj2*x8741))+((x8736*x8738))+((x8736*x8737)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8743.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8742.value)))+(x8743.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8744=IKcos(j0);
IkReal x8745=IKsin(j0);
IkReal x8746=(cj1*cj2);
IkReal x8747=((1.0)*cj5);
IkReal x8748=((1.0)*sj5);
IkReal x8749=((0.42)*sj1);
IkReal x8750=((0.4)*cj5);
IkReal x8751=((0.4)*sj5);
IkReal x8752=((0.00043624)*x8744);
IkReal x8753=((0.00043624)*x8745);
evalcond[0]=((((-1.0)*r11*x8747))+(((-1.0)*r10*x8748))+((x8745*x8746))+((sj2*x8744)));
evalcond[1]=((((-1.0)*sj2*x8745))+((x8744*x8746))+(((-1.0)*r01*x8747))+(((-1.0)*r00*x8748)));
evalcond[2]=(((x8744*x8749))+(((-1.0)*px))+(((-1.0)*x8752))+(((-1.0)*r00*x8751))+(((-1.0)*r01*x8750))+((x8746*x8752))+(((-1.0)*sj2*x8753)));
evalcond[3]=((((-1.0)*r10*x8751))+((sj2*x8752))+((x8745*x8749))+(((-1.0)*py))+(((-1.0)*x8753))+(((-1.0)*r11*x8750))+((x8746*x8753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x8754=((1.0)*cj1);
IkReal x8755=(cj0*sj1);
IkReal x8756=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8756;
j4eval[1]=((IKabs((((r22*x8755))+(((-1.0)*r02*x8754)))))+(IKabs((((cj1*r01*sj5))+(((-1.0)*r21*sj5*x8755))+(((-1.0)*cj5*r00*x8754))+((cj5*r20*x8755))))));
j4eval[2]=IKsign(x8756);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x8757=(sj0*sj1);
IkReal x8758=((1.0)*sj5);
IkReal x8759=((1.0)*cj5);
IkReal x8760=((((-1.0)*r00*x8758))+(((-1.0)*r01*x8759)));
j4eval[0]=x8760;
j4eval[1]=IKsign(x8760);
j4eval[2]=((IKabs(((((-1.0)*cj1*r10*x8759))+(((-1.0)*r21*x8757*x8758))+((cj1*r11*sj5))+((cj5*r20*x8757)))))+(IKabs((((r22*x8757))+(((-1.0)*cj1*r12))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x8761=(cj5*sj1);
IkReal x8762=((1.0)*sj0);
IkReal x8763=(cj0*sj1);
IkReal x8764=((1.0)*sj5);
IkReal x8765=((((-1.0)*r20*x8764))+(((-1.0)*cj5*r21)));
j4eval[0]=x8765;
j4eval[1]=((IKabs((((r12*x8763))+(((-1.0)*r02*sj1*x8762)))))+(IKabs(((((-1.0)*r00*x8761*x8762))+((r01*sj0*sj1*sj5))+(((-1.0)*r11*x8763*x8764))+((cj0*r10*x8761))))));
j4eval[2]=IKsign(x8765);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8766=((-1.0)*r20);
IkReal x8768 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8768)==0){
continue;
}
IkReal x8767=pow(x8768,-0.5);
CheckValue<IkReal> x8769 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8766),IKFAST_ATAN2_MAGTHRESH);
if(!x8769.valid){
continue;
}
IkReal gconst42=((-1.0)*(x8769.value));
IkReal gconst43=(r21*x8767);
IkReal gconst44=(x8766*x8767);
CheckValue<IkReal> x8770 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8770.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8770.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8771=(cj0*sj1);
IkReal x8772=((1.0)*cj1);
CheckValue<IkReal> x8773 = IKatan2WithCheck(IkReal(((((-1.0)*gconst44*r00*x8772))+((gconst44*r20*x8771))+((cj1*gconst43*r01))+(((-1.0)*gconst43*r21*x8771)))),IkReal(((((-1.0)*r02*x8772))+((r22*x8771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8773.valid){
continue;
}
CheckValue<IkReal> x8774=IKPowWithIntegerCheck(IKsign((((gconst43*r10))+((gconst44*r11)))),-1);
if(!x8774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8773.value)+(((1.5707963267949)*(x8774.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8775=IKcos(j4);
IkReal x8776=IKsin(j4);
IkReal x8777=(gconst44*r00);
IkReal x8778=(gconst43*r21);
IkReal x8779=(gconst43*r01);
IkReal x8780=(gconst43*r11);
IkReal x8781=(cj1*sj2);
IkReal x8782=((1.0)*x8775);
IkReal x8783=(gconst44*x8776);
IkReal x8784=((1.0)*x8776);
evalcond[0]=((((-1.0)*gconst44*r20*x8782))+cj1+((x8775*x8778))+((r22*x8776)));
evalcond[1]=((((-1.0)*x8777*x8782))+((x8775*x8779))+((r02*x8776))+((cj0*sj1)));
evalcond[2]=((((-1.0)*gconst44*r10*x8782))+((x8775*x8780))+((sj0*sj1))+((r12*x8776)));
evalcond[3]=((((-1.0)*x8778*x8784))+(((-1.0)*sj1*sj2))+((r20*x8783))+((r22*x8775)));
evalcond[4]=(((cj2*sj0))+((cj0*x8781))+(((-1.0)*x8779*x8784))+((x8776*x8777))+((r02*x8775)));
evalcond[5]=(((r10*x8783))+(((-1.0)*x8780*x8784))+((r12*x8775))+(((-1.0)*cj0*cj2))+((sj0*x8781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8785=((-1.0)*r21);
IkReal x8787 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8787)==0){
continue;
}
IkReal x8786=pow(x8787,-0.5);
CheckValue<IkReal> x8788 = IKatan2WithCheck(IkReal(x8785),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8788.valid){
continue;
}
IkReal gconst45=((3.14159265358979)+(((-1.0)*(x8788.value))));
IkReal gconst46=(x8785*x8786);
IkReal gconst47=((1.0)*r20*x8786);
CheckValue<IkReal> x8789 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8789.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8789.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8790=((1.0)*cj1);
IkReal x8791=(cj0*sj1);
CheckValue<IkReal> x8792 = IKatan2WithCheck(IkReal((((gconst47*r20*x8791))+((cj1*gconst46*r01))+(((-1.0)*gconst47*r00*x8790))+(((-1.0)*gconst46*r21*x8791)))),IkReal((((r22*x8791))+(((-1.0)*r02*x8790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8792.valid){
continue;
}
CheckValue<IkReal> x8793=IKPowWithIntegerCheck(IKsign((((gconst47*r11))+((gconst46*r10)))),-1);
if(!x8793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8792.value)+(((1.5707963267949)*(x8793.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8794=IKcos(j4);
IkReal x8795=IKsin(j4);
IkReal x8796=(gconst47*r20);
IkReal x8797=(cj1*sj2);
IkReal x8798=((1.0)*x8794);
IkReal x8799=(gconst47*x8795);
IkReal x8800=(gconst46*x8794);
IkReal x8801=((1.0)*gconst46*x8795);
evalcond[0]=(((r21*x8800))+(((-1.0)*x8796*x8798))+cj1+((r22*x8795)));
evalcond[1]=(((r02*x8795))+((r01*x8800))+(((-1.0)*gconst47*r00*x8798))+((cj0*sj1)));
evalcond[2]=(((r12*x8795))+((r11*x8800))+((sj0*sj1))+(((-1.0)*gconst47*r10*x8798)));
evalcond[3]=(((x8795*x8796))+(((-1.0)*r21*x8801))+(((-1.0)*sj1*sj2))+((r22*x8794)));
evalcond[4]=(((cj2*sj0))+((cj0*x8797))+((r02*x8794))+(((-1.0)*r01*x8801))+((r00*x8799)));
evalcond[5]=(((r10*x8799))+(((-1.0)*r11*x8801))+((r12*x8794))+(((-1.0)*cj0*cj2))+((sj0*x8797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
IkReal x8802=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8802;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x8802);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
IkReal x8803=((1.0)*cj5);
IkReal x8804=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8803)));
j4eval[0]=x8804;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x8803))+((r11*sj5))))));
j4eval[2]=IKsign(x8804);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
IkReal x8805=r21*r21;
IkReal x8806=cj5*cj5;
IkReal x8807=(r21*sj5);
IkReal x8808=(cj5*r20);
IkReal x8809=((((2.0)*x8807*x8808))+(((-1.0)*x8805))+(((-1.0)*x8806*(r20*r20)))+(((-1.0)*(r22*r22)))+((x8805*x8806)));
j4eval[0]=x8809;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*x8808))+x8807))));
j4eval[2]=IKsign(x8809);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8810=r21*r21;
IkReal x8811=cj5*cj5;
IkReal x8812=(r21*sj5);
IkReal x8813=(cj5*r20);
CheckValue<IkReal> x8814 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x8813))+x8812)),IKFAST_ATAN2_MAGTHRESH);
if(!x8814.valid){
continue;
}
CheckValue<IkReal> x8815=IKPowWithIntegerCheck(IKsign((((x8810*x8811))+(((-1.0)*x8810))+(((-1.0)*(r22*r22)))+(((-1.0)*x8811*(r20*r20)))+(((2.0)*x8812*x8813)))),-1);
if(!x8815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8814.value)+(((1.5707963267949)*(x8815.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8816=IKsin(j4);
IkReal x8817=IKcos(j4);
IkReal x8818=(cj5*r00);
IkReal x8819=((1.0)*x8817);
IkReal x8820=(sj5*x8817);
IkReal x8821=(cj5*x8816);
IkReal x8822=((1.0)*sj5*x8816);
evalcond[0]=((((-1.0)*r21*x8822))+((r22*x8817))+((r20*x8821)));
evalcond[1]=(((r02*x8816))+((r01*x8820))+(((-1.0)*x8818*x8819)));
evalcond[2]=((((-1.0)*cj5*r10*x8819))+((r12*x8816))+((r11*x8820)));
evalcond[3]=((1.0)+((r21*x8820))+((r22*x8816))+(((-1.0)*cj5*r20*x8819)));
evalcond[4]=(((cj2*sj0))+((r02*x8817))+(((-1.0)*r01*x8822))+((cj0*sj2))+((x8816*x8818)));
evalcond[5]=((((-1.0)*r11*x8822))+((r12*x8817))+((r10*x8821))+((sj0*sj2))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8823=((1.0)*cj5);
CheckValue<IkReal> x8824=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8823)))),-1);
if(!x8824.valid){
continue;
}
CheckValue<IkReal> x8825 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x8823)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8824.value)))+(x8825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8826=IKsin(j4);
IkReal x8827=IKcos(j4);
IkReal x8828=(cj5*r00);
IkReal x8829=((1.0)*x8827);
IkReal x8830=(sj5*x8827);
IkReal x8831=(cj5*x8826);
IkReal x8832=((1.0)*sj5*x8826);
evalcond[0]=(((r22*x8827))+((r20*x8831))+(((-1.0)*r21*x8832)));
evalcond[1]=(((r02*x8826))+((r01*x8830))+(((-1.0)*x8828*x8829)));
evalcond[2]=((((-1.0)*cj5*r10*x8829))+((r12*x8826))+((r11*x8830)));
evalcond[3]=((1.0)+((r22*x8826))+((r21*x8830))+(((-1.0)*cj5*r20*x8829)));
evalcond[4]=(((cj2*sj0))+((x8826*x8828))+((r02*x8827))+(((-1.0)*r01*x8832))+((cj0*sj2)));
evalcond[5]=(((r12*x8827))+((r10*x8831))+((sj0*sj2))+(((-1.0)*cj0*cj2))+(((-1.0)*r11*x8832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8833 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8833.valid){
continue;
}
CheckValue<IkReal> x8834=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8833.value)+(((1.5707963267949)*(x8834.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8835=IKsin(j4);
IkReal x8836=IKcos(j4);
IkReal x8837=(cj5*r00);
IkReal x8838=((1.0)*x8836);
IkReal x8839=(sj5*x8836);
IkReal x8840=(cj5*x8835);
IkReal x8841=((1.0)*sj5*x8835);
evalcond[0]=(((r20*x8840))+(((-1.0)*r21*x8841))+((r22*x8836)));
evalcond[1]=(((r02*x8835))+((r01*x8839))+(((-1.0)*x8837*x8838)));
evalcond[2]=(((r11*x8839))+((r12*x8835))+(((-1.0)*cj5*r10*x8838)));
evalcond[3]=((1.0)+(((-1.0)*cj5*r20*x8838))+((r21*x8839))+((r22*x8835)));
evalcond[4]=(((cj2*sj0))+((r02*x8836))+(((-1.0)*r01*x8841))+((x8835*x8837))+((cj0*sj2)));
evalcond[5]=(((r12*x8836))+((r10*x8840))+((sj0*sj2))+(((-1.0)*cj0*cj2))+(((-1.0)*r11*x8841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x8842=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8842;
j4eval[1]=IKsign(x8842);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x8843=((1.0)*cj5);
IkReal x8844=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8843)));
j4eval[0]=x8844;
j4eval[1]=IKsign(x8844);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8843))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x8845=cj5*cj5;
IkReal x8846=r21*r21;
IkReal x8847=(r21*sj5);
IkReal x8848=(cj5*r20);
IkReal x8849=(((x8845*(r20*r20)))+(r22*r22)+x8846+(((-2.0)*x8847*x8848))+(((-1.0)*x8845*x8846)));
j4eval[0]=x8849;
j4eval[1]=IKsign(x8849);
j4eval[2]=((IKabs(r22))+(IKabs((x8847+(((-1.0)*x8848))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8850=cj5*cj5;
IkReal x8851=r21*r21;
IkReal x8852=(r21*sj5);
IkReal x8853=(cj5*r20);
CheckValue<IkReal> x8854=IKPowWithIntegerCheck(IKsign(((r22*r22)+x8851+((x8850*(r20*r20)))+(((-2.0)*x8852*x8853))+(((-1.0)*x8850*x8851)))),-1);
if(!x8854.valid){
continue;
}
CheckValue<IkReal> x8855 = IKatan2WithCheck(IkReal(r22),IkReal((x8852+(((-1.0)*x8853)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8854.value)))+(x8855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8856=IKsin(j4);
IkReal x8857=IKcos(j4);
IkReal x8858=(cj5*r00);
IkReal x8859=((1.0)*cj0);
IkReal x8860=((1.0)*x8857);
IkReal x8861=(sj5*x8857);
IkReal x8862=(cj5*x8856);
IkReal x8863=((1.0)*sj5*x8856);
evalcond[0]=(((r20*x8862))+((r22*x8857))+(((-1.0)*r21*x8863)));
evalcond[1]=(((r01*x8861))+((r02*x8856))+(((-1.0)*x8858*x8860)));
evalcond[2]=((((-1.0)*cj5*r10*x8860))+((r11*x8861))+((r12*x8856)));
evalcond[3]=((-1.0)+((r21*x8861))+(((-1.0)*cj5*r20*x8860))+((r22*x8856)));
evalcond[4]=(((cj2*sj0))+(((-1.0)*sj2*x8859))+((r02*x8857))+(((-1.0)*r01*x8863))+((x8856*x8858)));
evalcond[5]=((((-1.0)*cj2*x8859))+(((-1.0)*sj0*sj2))+(((-1.0)*r11*x8863))+((r12*x8857))+((r10*x8862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8864=((1.0)*cj5);
CheckValue<IkReal> x8865=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8864)))),-1);
if(!x8865.valid){
continue;
}
CheckValue<IkReal> x8866 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x8864)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8865.value)))+(x8866.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8867=IKsin(j4);
IkReal x8868=IKcos(j4);
IkReal x8869=(cj5*r00);
IkReal x8870=((1.0)*cj0);
IkReal x8871=((1.0)*x8868);
IkReal x8872=(sj5*x8868);
IkReal x8873=(cj5*x8867);
IkReal x8874=((1.0)*sj5*x8867);
evalcond[0]=((((-1.0)*r21*x8874))+((r20*x8873))+((r22*x8868)));
evalcond[1]=(((r02*x8867))+(((-1.0)*x8869*x8871))+((r01*x8872)));
evalcond[2]=((((-1.0)*cj5*r10*x8871))+((r11*x8872))+((r12*x8867)));
evalcond[3]=((-1.0)+((r21*x8872))+(((-1.0)*cj5*r20*x8871))+((r22*x8867)));
evalcond[4]=(((cj2*sj0))+(((-1.0)*r01*x8874))+((r02*x8868))+(((-1.0)*sj2*x8870))+((x8867*x8869)));
evalcond[5]=(((r10*x8873))+((r12*x8868))+(((-1.0)*r11*x8874))+(((-1.0)*sj0*sj2))+(((-1.0)*cj2*x8870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8875=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8875.valid){
continue;
}
CheckValue<IkReal> x8876 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8875.value)))+(x8876.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8877=IKsin(j4);
IkReal x8878=IKcos(j4);
IkReal x8879=(cj5*r00);
IkReal x8880=((1.0)*cj0);
IkReal x8881=((1.0)*x8878);
IkReal x8882=(sj5*x8878);
IkReal x8883=(cj5*x8877);
IkReal x8884=((1.0)*sj5*x8877);
evalcond[0]=(((r20*x8883))+((r22*x8878))+(((-1.0)*r21*x8884)));
evalcond[1]=(((r02*x8877))+(((-1.0)*x8879*x8881))+((r01*x8882)));
evalcond[2]=((((-1.0)*cj5*r10*x8881))+((r12*x8877))+((r11*x8882)));
evalcond[3]=((-1.0)+((r21*x8882))+(((-1.0)*cj5*r20*x8881))+((r22*x8877)));
evalcond[4]=(((r02*x8878))+((cj2*sj0))+((x8877*x8879))+(((-1.0)*sj2*x8880))+(((-1.0)*r01*x8884)));
evalcond[5]=((((-1.0)*r11*x8884))+(((-1.0)*cj2*x8880))+((r10*x8883))+(((-1.0)*sj0*sj2))+((r12*x8878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8885=((-1.0)*r00);
IkReal x8887 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8887)==0){
continue;
}
IkReal x8886=pow(x8887,-0.5);
CheckValue<IkReal> x8888 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8885),IKFAST_ATAN2_MAGTHRESH);
if(!x8888.valid){
continue;
}
IkReal gconst48=((-1.0)*(x8888.value));
IkReal gconst49=(r01*x8886);
IkReal gconst50=(x8885*x8886);
CheckValue<IkReal> x8889 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8889.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8889.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8890=(cj0*sj1);
IkReal x8891=((1.0)*cj1);
CheckValue<IkReal> x8892 = IKatan2WithCheck(IkReal(((((-1.0)*gconst50*r00*x8891))+((gconst50*r20*x8890))+((cj1*gconst49*r01))+(((-1.0)*gconst49*r21*x8890)))),IkReal(((((-1.0)*r02*x8891))+((r22*x8890)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8892.valid){
continue;
}
CheckValue<IkReal> x8893=IKPowWithIntegerCheck(IKsign((((gconst50*r11))+((gconst49*r10)))),-1);
if(!x8893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8892.value)+(((1.5707963267949)*(x8893.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8894=IKcos(j4);
IkReal x8895=IKsin(j4);
IkReal x8896=(gconst50*r00);
IkReal x8897=(gconst50*r10);
IkReal x8898=(gconst50*r20);
IkReal x8899=(cj1*sj2);
IkReal x8900=(gconst49*x8894);
IkReal x8901=((1.0)*x8894);
IkReal x8902=((1.0)*gconst49*x8895);
evalcond[0]=(((r21*x8900))+cj1+((r22*x8895))+(((-1.0)*x8898*x8901)));
evalcond[1]=(((r01*x8900))+((r02*x8895))+(((-1.0)*x8896*x8901))+((cj0*sj1)));
evalcond[2]=(((r11*x8900))+((r12*x8895))+((sj0*sj1))+(((-1.0)*x8897*x8901)));
evalcond[3]=((((-1.0)*sj1*sj2))+((x8895*x8898))+((r22*x8894))+(((-1.0)*r21*x8902)));
evalcond[4]=(((cj2*sj0))+((x8895*x8896))+((r02*x8894))+((cj0*x8899))+(((-1.0)*r01*x8902)));
evalcond[5]=(((sj0*x8899))+((r12*x8894))+((x8895*x8897))+(((-1.0)*cj0*cj2))+(((-1.0)*r11*x8902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8903=((-1.0)*r01);
IkReal x8905 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8905)==0){
continue;
}
IkReal x8904=pow(x8905,-0.5);
CheckValue<IkReal> x8906 = IKatan2WithCheck(IkReal(x8903),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8906.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x8906.value))));
IkReal gconst52=(x8903*x8904);
IkReal gconst53=((1.0)*r00*x8904);
CheckValue<IkReal> x8907 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8907.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8907.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8908=(cj0*sj1);
IkReal x8909=((1.0)*cj1);
CheckValue<IkReal> x8910=IKPowWithIntegerCheck(IKsign((((gconst53*r11))+((gconst52*r10)))),-1);
if(!x8910.valid){
continue;
}
CheckValue<IkReal> x8911 = IKatan2WithCheck(IkReal((((cj1*gconst52*r01))+(((-1.0)*gconst52*r21*x8908))+((gconst53*r20*x8908))+(((-1.0)*gconst53*r00*x8909)))),IkReal(((((-1.0)*r02*x8909))+((r22*x8908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8910.value)))+(x8911.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8912=IKcos(j4);
IkReal x8913=IKsin(j4);
IkReal x8914=(cj1*sj2);
IkReal x8915=(gconst52*x8912);
IkReal x8916=(gconst53*x8913);
IkReal x8917=((1.0)*gconst52*x8913);
IkReal x8918=((1.0)*gconst53*x8912);
evalcond[0]=(cj1+((r22*x8913))+(((-1.0)*r20*x8918))+((r21*x8915)));
evalcond[1]=(((r01*x8915))+((r02*x8913))+((cj0*sj1))+(((-1.0)*r00*x8918)));
evalcond[2]=(((sj0*sj1))+((r11*x8915))+((r12*x8913))+(((-1.0)*r10*x8918)));
evalcond[3]=(((r22*x8912))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x8917))+((r20*x8916)));
evalcond[4]=(((r00*x8916))+((cj2*sj0))+(((-1.0)*r01*x8917))+((cj0*x8914))+((r02*x8912)));
evalcond[5]=((((-1.0)*r11*x8917))+((sj0*x8914))+((r12*x8912))+(((-1.0)*cj0*cj2))+((r10*x8916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8920 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8920)==0){
continue;
}
IkReal x8919=pow(x8920,-0.5);
CheckValue<IkReal> x8921 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8921.valid){
continue;
}
IkReal gconst54=((-1.0)*(x8921.value));
IkReal gconst55=((-1.0)*r11*x8919);
IkReal gconst56=(r10*x8919);
CheckValue<IkReal> x8922 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8922.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8922.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8923=(sj0*sj1);
IkReal x8924=((1.0)*cj1);
IkReal x8925=((1.0)*gconst55);
CheckValue<IkReal> x8926 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8923*x8925))+((gconst56*r20*x8923))+((cj1*gconst55*r11))+(((-1.0)*gconst56*r10*x8924)))),IkReal((((r22*x8923))+(((-1.0)*r12*x8924)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8926.valid){
continue;
}
CheckValue<IkReal> x8927=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst56*r01))+(((-1.0)*r00*x8925)))),-1);
if(!x8927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8926.value)+(((1.5707963267949)*(x8927.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8928=IKcos(j4);
IkReal x8929=IKsin(j4);
IkReal x8930=(cj1*sj2);
IkReal x8931=(gconst55*x8928);
IkReal x8932=(gconst56*x8929);
IkReal x8933=((1.0)*gconst56*x8928);
IkReal x8934=((1.0)*gconst55*x8929);
evalcond[0]=((((-1.0)*r20*x8933))+cj1+((r22*x8929))+((r21*x8931)));
evalcond[1]=((((-1.0)*r00*x8933))+((r02*x8929))+((r01*x8931))+((cj0*sj1)));
evalcond[2]=((((-1.0)*r10*x8933))+((sj0*sj1))+((r12*x8929))+((r11*x8931)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r22*x8928))+((r20*x8932))+(((-1.0)*r21*x8934)));
evalcond[4]=(((cj2*sj0))+(((-1.0)*r01*x8934))+((r02*x8928))+((r00*x8932))+((cj0*x8930)));
evalcond[5]=((((-1.0)*r11*x8934))+((r12*x8928))+((r10*x8932))+(((-1.0)*cj0*cj2))+((sj0*x8930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8936 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8936)==0){
continue;
}
IkReal x8935=pow(x8936,-0.5);
CheckValue<IkReal> x8937 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8937.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x8937.value))));
IkReal gconst58=((1.0)*r11*x8935);
IkReal gconst59=((-1.0)*r10*x8935);
CheckValue<IkReal> x8938 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8938.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8938.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8941 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x8941.valid){
continue;
}
IkReal x8939=((1.0)*(x8941.value));
IkReal x8940=x8935;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x8939)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x8939)));
IkReal gconst58=((1.0)*r11*x8940);
IkReal gconst59=((-1.0)*r10*x8940);
IkReal x8942=r12*r12;
IkReal x8943=(cj1*r02);
IkReal x8944=(cj0*r22*sj1);
CheckValue<IkReal> x8948=IKPowWithIntegerCheck(((-1.0)+x8942),-1);
if(!x8948.valid){
continue;
}
IkReal x8945=x8948.value;
if((((1.0)+(((-1.0)*x8942)))) < -0.00001)
continue;
IkReal x8946=IKsqrt(((1.0)+(((-1.0)*x8942))));
IkReal x8947=(r12*x8945*x8946);
j4eval[0]=0;
j4eval[1]=((IKabs((x8944+(((-1.0)*x8943)))))+(IKabs((((x8943*x8947))+(((-1.0)*x8944*x8947))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8949=(sj0*sj1);
IkReal x8950=((1.0)*gconst58);
IkReal x8951=((1.0)*gconst59);
CheckValue<IkReal> x8952=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8950))+(((-1.0)*r01*x8951)))),-1);
if(!x8952.valid){
continue;
}
CheckValue<IkReal> x8953 = IKatan2WithCheck(IkReal((((gconst59*r20*x8949))+(((-1.0)*r21*x8949*x8950))+(((-1.0)*cj1*r10*x8951))+((cj1*gconst58*r11)))),IkReal((((r22*x8949))+(((-1.0)*cj1*r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8952.value)))+(x8953.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8954=IKcos(j4);
IkReal x8955=IKsin(j4);
IkReal x8956=(gconst58*r01);
IkReal x8957=(gconst58*r11);
IkReal x8958=(gconst58*r21);
IkReal x8959=(cj1*sj2);
IkReal x8960=((1.0)*x8955);
IkReal x8961=(gconst59*x8955);
IkReal x8962=((1.0)*gconst59*x8954);
evalcond[0]=(((r22*x8955))+cj1+((x8954*x8958))+(((-1.0)*r20*x8962)));
evalcond[1]=(((r02*x8955))+(((-1.0)*r00*x8962))+((x8954*x8956))+((cj0*sj1)));
evalcond[2]=((((-1.0)*r10*x8962))+((x8954*x8957))+((sj0*sj1))+((r12*x8955)));
evalcond[3]=(((r22*x8954))+(((-1.0)*sj1*sj2))+(((-1.0)*x8958*x8960))+((r20*x8961)));
evalcond[4]=(((cj2*sj0))+((r02*x8954))+((r00*x8961))+((cj0*x8959))+(((-1.0)*x8956*x8960)));
evalcond[5]=(((r10*x8961))+(((-1.0)*x8957*x8960))+(((-1.0)*cj0*cj2))+((r12*x8954))+((sj0*x8959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8963=((1.0)*cj1);
IkReal x8964=(cj0*sj1);
CheckValue<IkReal> x8965=IKPowWithIntegerCheck(IKsign((((gconst58*r10))+((gconst59*r11)))),-1);
if(!x8965.valid){
continue;
}
CheckValue<IkReal> x8966 = IKatan2WithCheck(IkReal((((gconst59*r20*x8964))+(((-1.0)*gconst59*r00*x8963))+((cj1*gconst58*r01))+(((-1.0)*gconst58*r21*x8964)))),IkReal((((r22*x8964))+(((-1.0)*r02*x8963)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8965.value)))+(x8966.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8967=IKcos(j4);
IkReal x8968=IKsin(j4);
IkReal x8969=(gconst58*r01);
IkReal x8970=(gconst58*r11);
IkReal x8971=(gconst58*r21);
IkReal x8972=(cj1*sj2);
IkReal x8973=((1.0)*x8968);
IkReal x8974=(gconst59*x8968);
IkReal x8975=((1.0)*gconst59*x8967);
evalcond[0]=(((r22*x8968))+cj1+((x8967*x8971))+(((-1.0)*r20*x8975)));
evalcond[1]=(((r02*x8968))+((x8967*x8969))+(((-1.0)*r00*x8975))+((cj0*sj1)));
evalcond[2]=((((-1.0)*r10*x8975))+((x8967*x8970))+((sj0*sj1))+((r12*x8968)));
evalcond[3]=(((r22*x8967))+((r20*x8974))+(((-1.0)*sj1*sj2))+(((-1.0)*x8971*x8973)));
evalcond[4]=(((cj2*sj0))+((r02*x8967))+((r00*x8974))+((cj0*x8972))+(((-1.0)*x8969*x8973)));
evalcond[5]=(((sj0*x8972))+((r10*x8974))+(((-1.0)*cj0*cj2))+((r12*x8967))+(((-1.0)*x8970*x8973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8976=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8976);
rxp0_2=(py*r00);
rxp1_0=(r21*x8976);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x8977=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x8977;
j4eval[1]=((IKabs((sj1*sj2)))+(IKabs(cj1)));
j4eval[2]=IKsign(x8977);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8978=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8978);
rxp0_2=(py*r00);
rxp1_0=(r21*x8978);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=IKsign(r12);
j4eval[2]=((IKabs((((cj0*cj2))+(((-1.0)*cj1*sj0*sj2)))))+(IKabs((sj0*sj1))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8979=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8979);
rxp0_2=(py*r00);
rxp1_0=(r21*x8979);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8980=IKPowWithIntegerCheck(r12,-1);
if(!x8980.valid){
continue;
}
CheckValue<IkReal> x8981=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x8981.valid){
continue;
}
if( IKabs(((-1.0)*sj0*sj1*(x8980.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj1*(x8981.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*sj1*(x8980.value)))+IKsqr(((-1.0)*cj1*(x8981.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*sj1*(x8980.value)), ((-1.0)*cj1*(x8981.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8982=IKcos(j4);
IkReal x8983=IKsin(j4);
IkReal x8984=(cj1*sj2);
IkReal x8985=(sj5*x8982);
IkReal x8986=(cj5*x8983);
IkReal x8987=((1.0)*cj5*x8982);
IkReal x8988=((1.0)*sj5*x8983);
evalcond[0]=(((sj0*sj1))+((r12*x8983)));
evalcond[1]=(((r12*x8982))+(((-1.0)*cj0*cj2))+((sj0*x8984)));
evalcond[2]=(cj1+(((-1.0)*r20*x8987))+((r21*x8985)));
evalcond[3]=(((r01*x8985))+((cj0*sj1))+(((-1.0)*r00*x8987)));
evalcond[4]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x8988))+((r20*x8986)));
evalcond[5]=(((r00*x8986))+(((-1.0)*r01*x8988))+((cj2*sj0))+((cj0*x8984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8989 = IKatan2WithCheck(IkReal(((-1.0)*sj0*sj1)),IkReal((((cj0*cj2))+(((-1.0)*cj1*sj0*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8989.valid){
continue;
}
CheckValue<IkReal> x8990=IKPowWithIntegerCheck(IKsign(r12),-1);
if(!x8990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8989.value)+(((1.5707963267949)*(x8990.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8991=IKcos(j4);
IkReal x8992=IKsin(j4);
IkReal x8993=(cj1*sj2);
IkReal x8994=(sj5*x8991);
IkReal x8995=(cj5*x8992);
IkReal x8996=((1.0)*cj5*x8991);
IkReal x8997=((1.0)*sj5*x8992);
evalcond[0]=(((r12*x8992))+((sj0*sj1)));
evalcond[1]=(((r12*x8991))+((sj0*x8993))+(((-1.0)*cj0*cj2)));
evalcond[2]=(((r21*x8994))+cj1+(((-1.0)*r20*x8996)));
evalcond[3]=(((r01*x8994))+(((-1.0)*r00*x8996))+((cj0*sj1)));
evalcond[4]=((((-1.0)*sj1*sj2))+((r20*x8995))+(((-1.0)*r21*x8997)));
evalcond[5]=(((cj2*sj0))+((r00*x8995))+(((-1.0)*r01*x8997))+((cj0*x8993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8998 = IKatan2WithCheck(IkReal((sj1*sj2)),IkReal(cj1),IKFAST_ATAN2_MAGTHRESH);
if(!x8998.valid){
continue;
}
CheckValue<IkReal> x8999=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x8999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8998.value)+(((1.5707963267949)*(x8999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9000=IKcos(j4);
IkReal x9001=IKsin(j4);
IkReal x9002=(cj1*sj2);
IkReal x9003=(sj5*x9000);
IkReal x9004=(cj5*x9001);
IkReal x9005=((1.0)*cj5*x9000);
IkReal x9006=((1.0)*sj5*x9001);
evalcond[0]=(((sj0*sj1))+((r12*x9001)));
evalcond[1]=(((sj0*x9002))+(((-1.0)*cj0*cj2))+((r12*x9000)));
evalcond[2]=(((r21*x9003))+cj1+(((-1.0)*r20*x9005)));
evalcond[3]=((((-1.0)*r00*x9005))+((r01*x9003))+((cj0*sj1)));
evalcond[4]=((((-1.0)*r21*x9006))+(((-1.0)*sj1*sj2))+((r20*x9004)));
evalcond[5]=(((cj2*sj0))+(((-1.0)*r01*x9006))+((cj0*x9002))+((r00*x9004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x9007=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x9007;
j4eval[1]=IKsign(x9007);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x9008=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x9008;
j4eval[1]=((IKabs((((cj2*r11*sj5))+(((-1.0)*cj2*cj5*r10)))))+(IKabs((cj2*r12))));
j4eval[2]=IKsign(x9008);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x9009=cj5*cj5;
IkReal x9010=r11*r11;
IkReal x9011=(cj5*r10);
IkReal x9012=(r11*sj5);
IkReal x9013=((((-1.0)*x9010))+(((2.0)*x9011*x9012))+(((-1.0)*(r12*r12)))+(((-1.0)*x9009*(r10*r10)))+((x9009*x9010)));
j4eval[0]=x9013;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x9011))+x9012))));
j4eval[2]=IKsign(x9013);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9014=cj5*cj5;
IkReal x9015=r11*r11;
IkReal x9016=(cj5*r10);
IkReal x9017=(r11*sj5);
CheckValue<IkReal> x9018=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9015))+(((2.0)*x9016*x9017))+(((-1.0)*(r12*r12)))+((x9014*x9015))+(((-1.0)*x9014*(r10*r10))))),-1);
if(!x9018.valid){
continue;
}
CheckValue<IkReal> x9019 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9016))+x9017)),IKFAST_ATAN2_MAGTHRESH);
if(!x9019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9018.value)))+(x9019.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9020=IKsin(j4);
IkReal x9021=IKcos(j4);
IkReal x9022=(sj5*x9021);
IkReal x9023=(cj5*x9020);
IkReal x9024=((1.0)*cj5*x9021);
IkReal x9025=((1.0)*sj5*x9020);
evalcond[0]=((((-1.0)*r11*x9025))+((r10*x9023))+((r12*x9021)));
evalcond[1]=(((r21*x9022))+((r22*x9020))+(((-1.0)*r20*x9024)));
evalcond[2]=(((r01*x9022))+((r02*x9020))+(((-1.0)*r00*x9024)));
evalcond[3]=(cj2+((r00*x9023))+((r02*x9021))+(((-1.0)*r01*x9025)));
evalcond[4]=((1.0)+((r11*x9022))+((r12*x9020))+(((-1.0)*r10*x9024)));
evalcond[5]=((((-1.0)*sj2))+((r22*x9021))+(((-1.0)*r21*x9025))+((r20*x9023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9026=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x9026.valid){
continue;
}
CheckValue<IkReal> x9027 = IKatan2WithCheck(IkReal((cj2*r12)),IkReal((((cj2*r11*sj5))+(((-1.0)*cj2*cj5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9026.value)))+(x9027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9028=IKsin(j4);
IkReal x9029=IKcos(j4);
IkReal x9030=(sj5*x9029);
IkReal x9031=(cj5*x9028);
IkReal x9032=((1.0)*cj5*x9029);
IkReal x9033=((1.0)*sj5*x9028);
evalcond[0]=((((-1.0)*r11*x9033))+((r10*x9031))+((r12*x9029)));
evalcond[1]=(((r22*x9028))+((r21*x9030))+(((-1.0)*r20*x9032)));
evalcond[2]=(((r01*x9030))+((r02*x9028))+(((-1.0)*r00*x9032)));
evalcond[3]=(cj2+((r00*x9031))+((r02*x9029))+(((-1.0)*r01*x9033)));
evalcond[4]=((1.0)+(((-1.0)*r10*x9032))+((r11*x9030))+((r12*x9028)));
evalcond[5]=((((-1.0)*sj2))+((r22*x9029))+(((-1.0)*r21*x9033))+((r20*x9031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9034=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x9034.valid){
continue;
}
CheckValue<IkReal> x9035 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9034.value)))+(x9035.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9036=IKsin(j4);
IkReal x9037=IKcos(j4);
IkReal x9038=(sj5*x9037);
IkReal x9039=(cj5*x9036);
IkReal x9040=((1.0)*cj5*x9037);
IkReal x9041=((1.0)*sj5*x9036);
evalcond[0]=(((r10*x9039))+(((-1.0)*r11*x9041))+((r12*x9037)));
evalcond[1]=(((r22*x9036))+((r21*x9038))+(((-1.0)*r20*x9040)));
evalcond[2]=(((r01*x9038))+(((-1.0)*r00*x9040))+((r02*x9036)));
evalcond[3]=(cj2+((r00*x9039))+(((-1.0)*r01*x9041))+((r02*x9037)));
evalcond[4]=((1.0)+(((-1.0)*r10*x9040))+((r11*x9038))+((r12*x9036)));
evalcond[5]=((((-1.0)*sj2))+((r22*x9037))+(((-1.0)*r21*x9041))+((r20*x9039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x9042=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x9042;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x9042);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x9043=((1.0)*cj5);
IkReal x9044=((((-1.0)*r00*sj5))+(((-1.0)*r01*x9043)));
j4eval[0]=x9044;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x9043))))));
j4eval[2]=IKsign(x9044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x9045=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x9045;
j4eval[1]=IKsign(x9045);
j4eval[2]=((IKabs((((r11*sj2*sj5))+(((-1.0)*cj5*r10*sj2)))))+(IKabs((r12*sj2))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9046=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x9046.valid){
continue;
}
CheckValue<IkReal> x9047 = IKatan2WithCheck(IkReal((r12*sj2)),IkReal((((r11*sj2*sj5))+(((-1.0)*cj5*r10*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9046.value)))+(x9047.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9048=IKsin(j4);
IkReal x9049=IKcos(j4);
IkReal x9050=(cj5*r00);
IkReal x9051=(cj5*r20);
IkReal x9052=(cj5*r10);
IkReal x9053=((1.0)*x9049);
IkReal x9054=(sj5*x9049);
IkReal x9055=((1.0)*sj5*x9048);
evalcond[0]=(((x9048*x9052))+((r12*x9049))+(((-1.0)*r11*x9055)));
evalcond[1]=(((r22*x9048))+(((-1.0)*x9051*x9053))+((r21*x9054)));
evalcond[2]=(((r01*x9054))+(((-1.0)*x9050*x9053))+((r02*x9048)));
evalcond[3]=((-1.0)+((r12*x9048))+((r11*x9054))+(((-1.0)*x9052*x9053)));
evalcond[4]=((((-1.0)*sj2))+((x9048*x9051))+(((-1.0)*r21*x9055))+((r22*x9049)));
evalcond[5]=(((x9048*x9050))+(((-1.0)*r01*x9055))+(((-1.0)*cj2))+((r02*x9049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9056=((1.0)*cj5);
CheckValue<IkReal> x9057 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x9056)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9057.valid){
continue;
}
CheckValue<IkReal> x9058=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x9056)))),-1);
if(!x9058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9057.value)+(((1.5707963267949)*(x9058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9059=IKsin(j4);
IkReal x9060=IKcos(j4);
IkReal x9061=(cj5*r00);
IkReal x9062=(cj5*r20);
IkReal x9063=(cj5*r10);
IkReal x9064=((1.0)*x9060);
IkReal x9065=(sj5*x9060);
IkReal x9066=((1.0)*sj5*x9059);
evalcond[0]=(((r12*x9060))+((x9059*x9063))+(((-1.0)*r11*x9066)));
evalcond[1]=((((-1.0)*x9062*x9064))+((r21*x9065))+((r22*x9059)));
evalcond[2]=(((r01*x9065))+(((-1.0)*x9061*x9064))+((r02*x9059)));
evalcond[3]=((-1.0)+((r11*x9065))+((r12*x9059))+(((-1.0)*x9063*x9064)));
evalcond[4]=(((r22*x9060))+(((-1.0)*sj2))+(((-1.0)*r21*x9066))+((x9059*x9062)));
evalcond[5]=((((-1.0)*r01*x9066))+((r02*x9060))+((x9059*x9061))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9067=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x9067.valid){
continue;
}
CheckValue<IkReal> x9068 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9067.value)))+(x9068.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9069=IKsin(j4);
IkReal x9070=IKcos(j4);
IkReal x9071=(cj5*r00);
IkReal x9072=(cj5*r20);
IkReal x9073=(cj5*r10);
IkReal x9074=((1.0)*x9070);
IkReal x9075=(sj5*x9070);
IkReal x9076=((1.0)*sj5*x9069);
evalcond[0]=(((x9069*x9073))+(((-1.0)*r11*x9076))+((r12*x9070)));
evalcond[1]=((((-1.0)*x9072*x9074))+((r22*x9069))+((r21*x9075)));
evalcond[2]=((((-1.0)*x9071*x9074))+((r02*x9069))+((r01*x9075)));
evalcond[3]=((-1.0)+((r12*x9069))+((r11*x9075))+(((-1.0)*x9073*x9074)));
evalcond[4]=((((-1.0)*sj2))+((x9069*x9072))+((r22*x9070))+(((-1.0)*r21*x9076)));
evalcond[5]=(((x9069*x9071))+(((-1.0)*r01*x9076))+((r02*x9070))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x9077=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x9077;
j4eval[1]=((IKabs((((cj2*r11*sj5))+(((-1.0)*cj2*cj5*r10)))))+(IKabs((cj2*r12))));
j4eval[2]=IKsign(x9077);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x9078=((1.0)*cj5);
IkReal x9079=((((-1.0)*r00*sj5))+(((-1.0)*r01*x9078)));
j4eval[0]=x9079;
j4eval[1]=((IKabs(((((-1.0)*r10*sj2*x9078))+((r11*sj2*sj5)))))+(IKabs((r12*sj2))));
j4eval[2]=IKsign(x9079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x9080=cj5*cj5;
IkReal x9081=r11*r11;
IkReal x9082=(r11*sj5);
IkReal x9083=(cj5*r10);
IkReal x9084=((r12*r12)+(((-1.0)*x9080*x9081))+x9081+(((-2.0)*x9082*x9083))+((x9080*(r10*r10))));
j4eval[0]=x9084;
j4eval[1]=((IKabs(r12))+(IKabs((x9082+(((-1.0)*x9083))))));
j4eval[2]=IKsign(x9084);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9085=cj5*cj5;
IkReal x9086=r11*r11;
IkReal x9087=(cj5*r10);
IkReal x9088=(r11*sj5);
CheckValue<IkReal> x9089 = IKatan2WithCheck(IkReal(r12),IkReal((x9088+(((-1.0)*x9087)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9089.valid){
continue;
}
CheckValue<IkReal> x9090=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9087*x9088))+(r12*r12)+x9086+((x9085*(r10*r10)))+(((-1.0)*x9085*x9086)))),-1);
if(!x9090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9089.value)+(((1.5707963267949)*(x9090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9091=IKsin(j4);
IkReal x9092=IKcos(j4);
IkReal x9093=(cj5*r00);
IkReal x9094=(cj5*r20);
IkReal x9095=(cj5*r10);
IkReal x9096=((1.0)*x9092);
IkReal x9097=(sj5*x9092);
IkReal x9098=((1.0)*sj5*x9091);
evalcond[0]=(((r12*x9092))+((x9091*x9095))+(((-1.0)*r11*x9098)));
evalcond[1]=((((-1.0)*x9094*x9096))+((r21*x9097))+((r22*x9091)));
evalcond[2]=(((r01*x9097))+(((-1.0)*x9093*x9096))+((r02*x9091)));
evalcond[3]=(sj2+((x9091*x9094))+(((-1.0)*r21*x9098))+((r22*x9092)));
evalcond[4]=(cj2+(((-1.0)*r01*x9098))+((x9091*x9093))+((r02*x9092)));
evalcond[5]=((-1.0)+((r11*x9097))+((r12*x9091))+(((-1.0)*x9095*x9096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9099=((1.0)*cj5);
CheckValue<IkReal> x9100=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9099))+(((-1.0)*r00*sj5)))),-1);
if(!x9100.valid){
continue;
}
CheckValue<IkReal> x9101 = IKatan2WithCheck(IkReal((r12*sj2)),IkReal(((((-1.0)*r10*sj2*x9099))+((r11*sj2*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9100.value)))+(x9101.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9102=IKsin(j4);
IkReal x9103=IKcos(j4);
IkReal x9104=(cj5*r00);
IkReal x9105=(cj5*r20);
IkReal x9106=(cj5*r10);
IkReal x9107=((1.0)*x9103);
IkReal x9108=(sj5*x9103);
IkReal x9109=((1.0)*sj5*x9102);
evalcond[0]=((((-1.0)*r11*x9109))+((r12*x9103))+((x9102*x9106)));
evalcond[1]=(((r22*x9102))+((r21*x9108))+(((-1.0)*x9105*x9107)));
evalcond[2]=(((r02*x9102))+((r01*x9108))+(((-1.0)*x9104*x9107)));
evalcond[3]=(sj2+((r22*x9103))+(((-1.0)*r21*x9109))+((x9102*x9105)));
evalcond[4]=(cj2+(((-1.0)*r01*x9109))+((r02*x9103))+((x9102*x9104)));
evalcond[5]=((-1.0)+((r12*x9102))+(((-1.0)*x9106*x9107))+((r11*x9108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9110=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x9110.valid){
continue;
}
CheckValue<IkReal> x9111 = IKatan2WithCheck(IkReal((cj2*r12)),IkReal((((cj2*r11*sj5))+(((-1.0)*cj2*cj5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9110.value)))+(x9111.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9112=IKsin(j4);
IkReal x9113=IKcos(j4);
IkReal x9114=(cj5*r00);
IkReal x9115=(cj5*r20);
IkReal x9116=(cj5*r10);
IkReal x9117=((1.0)*x9113);
IkReal x9118=(sj5*x9113);
IkReal x9119=((1.0)*sj5*x9112);
evalcond[0]=(((r12*x9113))+((x9112*x9116))+(((-1.0)*r11*x9119)));
evalcond[1]=(((r21*x9118))+(((-1.0)*x9115*x9117))+((r22*x9112)));
evalcond[2]=((((-1.0)*x9114*x9117))+((r01*x9118))+((r02*x9112)));
evalcond[3]=(sj2+((x9112*x9115))+(((-1.0)*r21*x9119))+((r22*x9113)));
evalcond[4]=(cj2+((x9112*x9114))+(((-1.0)*r01*x9119))+((r02*x9113)));
evalcond[5]=((-1.0)+((r12*x9112))+((r11*x9118))+(((-1.0)*x9116*x9117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x9120=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x9120;
j4eval[1]=IKsign(x9120);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x9121=((1.0)*cj5);
IkReal x9122=((((-1.0)*r00*sj5))+(((-1.0)*r01*x9121)));
j4eval[0]=x9122;
j4eval[1]=((IKabs((r12*sj2)))+(IKabs(((((-1.0)*r10*sj2*x9121))+((r11*sj2*sj5))))));
j4eval[2]=IKsign(x9122);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x9123=cj5*cj5;
IkReal x9124=r11*r11;
IkReal x9125=(cj5*r10);
IkReal x9126=(r11*sj5);
IkReal x9127=((((-1.0)*x9123*(r10*r10)))+(((2.0)*x9125*x9126))+((x9123*x9124))+(((-1.0)*(r12*r12)))+(((-1.0)*x9124)));
j4eval[0]=x9127;
j4eval[1]=((IKabs(r12))+(IKabs((x9126+(((-1.0)*x9125))))));
j4eval[2]=IKsign(x9127);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9128=cj5*cj5;
IkReal x9129=r11*r11;
IkReal x9130=(cj5*r10);
IkReal x9131=(r11*sj5);
CheckValue<IkReal> x9132 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9130))+x9131)),IKFAST_ATAN2_MAGTHRESH);
if(!x9132.valid){
continue;
}
CheckValue<IkReal> x9133=IKPowWithIntegerCheck(IKsign(((((2.0)*x9130*x9131))+((x9128*x9129))+(((-1.0)*x9128*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9129)))),-1);
if(!x9133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9132.value)+(((1.5707963267949)*(x9133.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9134=IKsin(j4);
IkReal x9135=IKcos(j4);
IkReal x9136=(cj5*r00);
IkReal x9137=(cj5*r20);
IkReal x9138=(cj5*r10);
IkReal x9139=((1.0)*x9135);
IkReal x9140=(sj5*x9135);
IkReal x9141=((1.0)*sj5*x9134);
evalcond[0]=(((x9134*x9138))+((r12*x9135))+(((-1.0)*r11*x9141)));
evalcond[1]=((((-1.0)*x9137*x9139))+((r22*x9134))+((r21*x9140)));
evalcond[2]=(((r01*x9140))+(((-1.0)*x9136*x9139))+((r02*x9134)));
evalcond[3]=(((x9134*x9137))+sj2+((r22*x9135))+(((-1.0)*r21*x9141)));
evalcond[4]=((1.0)+((r12*x9134))+(((-1.0)*x9138*x9139))+((r11*x9140)));
evalcond[5]=(((x9134*x9136))+((r02*x9135))+(((-1.0)*cj2))+(((-1.0)*r01*x9141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9142=((1.0)*cj5);
CheckValue<IkReal> x9143 = IKatan2WithCheck(IkReal((r12*sj2)),IkReal(((((-1.0)*r10*sj2*x9142))+((r11*sj2*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9143.valid){
continue;
}
CheckValue<IkReal> x9144=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x9142)))),-1);
if(!x9144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9143.value)+(((1.5707963267949)*(x9144.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9145=IKsin(j4);
IkReal x9146=IKcos(j4);
IkReal x9147=(cj5*r00);
IkReal x9148=(cj5*r20);
IkReal x9149=(cj5*r10);
IkReal x9150=((1.0)*x9146);
IkReal x9151=(sj5*x9146);
IkReal x9152=((1.0)*sj5*x9145);
evalcond[0]=((((-1.0)*r11*x9152))+((x9145*x9149))+((r12*x9146)));
evalcond[1]=((((-1.0)*x9148*x9150))+((r21*x9151))+((r22*x9145)));
evalcond[2]=((((-1.0)*x9147*x9150))+((r01*x9151))+((r02*x9145)));
evalcond[3]=(sj2+(((-1.0)*r21*x9152))+((x9145*x9148))+((r22*x9146)));
evalcond[4]=((1.0)+((r11*x9151))+((r12*x9145))+(((-1.0)*x9149*x9150)));
evalcond[5]=(((x9145*x9147))+(((-1.0)*r01*x9152))+(((-1.0)*cj2))+((r02*x9146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9153=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x9153.valid){
continue;
}
CheckValue<IkReal> x9154 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9153.value)))+(x9154.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9155=IKsin(j4);
IkReal x9156=IKcos(j4);
IkReal x9157=(cj5*r00);
IkReal x9158=(cj5*r20);
IkReal x9159=(cj5*r10);
IkReal x9160=((1.0)*x9156);
IkReal x9161=(sj5*x9156);
IkReal x9162=((1.0)*sj5*x9155);
evalcond[0]=((((-1.0)*r11*x9162))+((x9155*x9159))+((r12*x9156)));
evalcond[1]=(((r22*x9155))+((r21*x9161))+(((-1.0)*x9158*x9160)));
evalcond[2]=(((r01*x9161))+(((-1.0)*x9157*x9160))+((r02*x9155)));
evalcond[3]=(sj2+((r22*x9156))+((x9155*x9158))+(((-1.0)*r21*x9162)));
evalcond[4]=((1.0)+(((-1.0)*x9159*x9160))+((r11*x9161))+((r12*x9155)));
evalcond[5]=(((r02*x9156))+((x9155*x9157))+(((-1.0)*r01*x9162))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9163=(cj5*sj1);
IkReal x9164=((1.0)*sj0);
IkReal x9165=(cj0*sj1);
IkReal x9166=((1.0)*sj5);
CheckValue<IkReal> x9167 = IKatan2WithCheck(IkReal((((r01*sj0*sj1*sj5))+(((-1.0)*r00*x9163*x9164))+(((-1.0)*r11*x9165*x9166))+((cj0*r10*x9163)))),IkReal(((((-1.0)*r02*sj1*x9164))+((r12*x9165)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9167.valid){
continue;
}
CheckValue<IkReal> x9168=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x9166))+(((-1.0)*cj5*r21)))),-1);
if(!x9168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9167.value)+(((1.5707963267949)*(x9168.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9169=IKcos(j4);
IkReal x9170=IKsin(j4);
IkReal x9171=(cj5*r00);
IkReal x9172=(cj1*sj2);
IkReal x9173=((1.0)*x9169);
IkReal x9174=(sj5*x9169);
IkReal x9175=(cj5*x9170);
IkReal x9176=((1.0)*sj5*x9170);
evalcond[0]=(cj1+((r21*x9174))+(((-1.0)*cj5*r20*x9173))+((r22*x9170)));
evalcond[1]=(((r02*x9170))+((r01*x9174))+(((-1.0)*x9171*x9173))+((cj0*sj1)));
evalcond[2]=(((sj0*sj1))+(((-1.0)*cj5*r10*x9173))+((r12*x9170))+((r11*x9174)));
evalcond[3]=((((-1.0)*r21*x9176))+((r22*x9169))+(((-1.0)*sj1*sj2))+((r20*x9175)));
evalcond[4]=(((x9170*x9171))+((cj2*sj0))+(((-1.0)*r01*x9176))+((r02*x9169))+((cj0*x9172)));
evalcond[5]=(((r10*x9175))+((sj0*x9172))+((r12*x9169))+(((-1.0)*cj0*cj2))+(((-1.0)*r11*x9176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9177=(sj0*sj1);
IkReal x9178=((1.0)*sj5);
IkReal x9179=((1.0)*cj5);
CheckValue<IkReal> x9180=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9179))+(((-1.0)*r00*x9178)))),-1);
if(!x9180.valid){
continue;
}
CheckValue<IkReal> x9181 = IKatan2WithCheck(IkReal((((cj5*r20*x9177))+(((-1.0)*r21*x9177*x9178))+(((-1.0)*cj1*r10*x9179))+((cj1*r11*sj5)))),IkReal(((((-1.0)*cj1*r12))+((r22*x9177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9180.value)))+(x9181.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9182=IKcos(j4);
IkReal x9183=IKsin(j4);
IkReal x9184=(cj5*r00);
IkReal x9185=(cj1*sj2);
IkReal x9186=((1.0)*x9182);
IkReal x9187=(sj5*x9182);
IkReal x9188=(cj5*x9183);
IkReal x9189=((1.0)*sj5*x9183);
evalcond[0]=(cj1+(((-1.0)*cj5*r20*x9186))+((r22*x9183))+((r21*x9187)));
evalcond[1]=(((r02*x9183))+(((-1.0)*x9184*x9186))+((cj0*sj1))+((r01*x9187)));
evalcond[2]=((((-1.0)*cj5*r10*x9186))+((r11*x9187))+((r12*x9183))+((sj0*sj1)));
evalcond[3]=((((-1.0)*r21*x9189))+(((-1.0)*sj1*sj2))+((r20*x9188))+((r22*x9182)));
evalcond[4]=(((cj2*sj0))+((r02*x9182))+((x9183*x9184))+((cj0*x9185))+(((-1.0)*r01*x9189)));
evalcond[5]=(((r12*x9182))+((r10*x9188))+((sj0*x9185))+(((-1.0)*cj0*cj2))+(((-1.0)*r11*x9189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9190=((1.0)*cj1);
IkReal x9191=(cj0*sj1);
CheckValue<IkReal> x9192 = IKatan2WithCheck(IkReal((((cj1*r01*sj5))+(((-1.0)*cj5*r00*x9190))+((cj5*r20*x9191))+(((-1.0)*r21*sj5*x9191)))),IkReal((((r22*x9191))+(((-1.0)*r02*x9190)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9192.valid){
continue;
}
CheckValue<IkReal> x9193=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x9193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9192.value)+(((1.5707963267949)*(x9193.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9194=IKcos(j4);
IkReal x9195=IKsin(j4);
IkReal x9196=(cj5*r00);
IkReal x9197=(cj1*sj2);
IkReal x9198=((1.0)*x9194);
IkReal x9199=(sj5*x9194);
IkReal x9200=(cj5*x9195);
IkReal x9201=((1.0)*sj5*x9195);
evalcond[0]=(cj1+((r22*x9195))+((r21*x9199))+(((-1.0)*cj5*r20*x9198)));
evalcond[1]=(((r01*x9199))+((r02*x9195))+(((-1.0)*x9196*x9198))+((cj0*sj1)));
evalcond[2]=(((sj0*sj1))+((r12*x9195))+(((-1.0)*cj5*r10*x9198))+((r11*x9199)));
evalcond[3]=(((r20*x9200))+((r22*x9194))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x9201)));
evalcond[4]=(((cj2*sj0))+((x9195*x9196))+(((-1.0)*r01*x9201))+((r02*x9194))+((cj0*x9197)));
evalcond[5]=(((sj0*x9197))+((r10*x9200))+(((-1.0)*r11*x9201))+((r12*x9194))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9202=cj5*cj5;
IkReal x9203=r21*r21;
IkReal x9204=(cj5*r20);
IkReal x9205=(sj1*sj2);
IkReal x9206=(r21*sj5);
IkReal x9207=((((-1.0)*x9202*x9203))+(r22*r22)+x9203+(((-2.0)*x9204*x9206))+((x9202*(r20*r20))));
j4eval[0]=x9207;
j4eval[1]=IKsign(x9207);
j4eval[2]=((IKabs((((x9204*x9205))+(((-1.0)*x9205*x9206))+((cj1*r22)))))+(IKabs((((r22*x9205))+(((-1.0)*cj1*x9204))+((cj1*x9206))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9208=cj2*cj2;
IkReal x9209=((1.0)*cj5);
IkReal x9210=(cj1*cj2);
IkReal x9211=(r00*sj5);
IkReal x9212=((1.0)*r10*sj5);
IkReal x9213=((1.0)+((x9208*(cj1*cj1)))+(((-1.0)*x9208)));
j0eval[0]=x9213;
j0eval[1]=IKsign(x9213);
j0eval[2]=((IKabs(((((-1.0)*x9210*x9212))+((cj5*r01*sj2))+((sj2*x9211))+(((-1.0)*r11*x9209*x9210)))))+(IKabs(((((-1.0)*x9210*x9211))+(((-1.0)*r11*sj2*x9209))+(((-1.0)*sj2*x9212))+(((-1.0)*r01*x9209*x9210))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9214=cj2*cj2;
IkReal x9215=cj1*cj1;
IkReal x9216=(cj1*cj2);
IkReal x9217=((5453.0)*x9214);
j0eval[0]=((1.0)+(((962.772785622593)*sj1*x9216))+((x9214*x9215))+(((-1.0)*x9214))+(((-1.0)*x9216)));
j0eval[1]=IKsign(((5453.0)+(((-5453.0)*x9216))+((x9215*x9217))+(((5250000.0)*sj1*x9216))+(((-1.0)*x9217))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((2.5)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.5)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.5)*py))+IKsqr(((2.5)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((2.5)*py), ((2.5)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-2.5)*py))+(IKsin(j0)));
evalcond[1]=((((-2.5)*px))+(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x9218=((1.0)*cj5);
IkReal x9219=((((-1.0)*r10*sj5))+(((-1.0)*r11*x9218)));
j4eval[0]=x9219;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x9218))))));
j4eval[2]=IKsign(x9219);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x9220=cj5*cj5;
IkReal x9221=r21*r21;
IkReal x9222=(r21*sj5);
IkReal x9223=(cj5*r20);
IkReal x9224=((((-2.0)*x9222*x9223))+(r22*r22)+x9221+((x9220*(r20*r20)))+(((-1.0)*x9220*x9221)));
j4eval[0]=x9224;
j4eval[1]=IKsign(x9224);
j4eval[2]=((IKabs((x9222+(((-1.0)*x9223)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x9225=cj5*cj5;
IkReal x9226=r01*r01;
IkReal x9227=(r01*sj5);
IkReal x9228=(cj5*r00);
IkReal x9229=((((-1.0)*(r02*r02)))+((x9225*x9226))+(((-1.0)*x9226))+(((2.0)*x9227*x9228))+(((-1.0)*x9225*(r00*r00))));
j4eval[0]=x9229;
j4eval[1]=IKsign(x9229);
j4eval[2]=((IKabs((((sj0*x9228))+(((-1.0)*sj0*x9227)))))+(IKabs((r02*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9230=cj5*cj5;
IkReal x9231=r01*r01;
IkReal x9232=(cj5*r00);
IkReal x9233=(r01*sj5);
CheckValue<IkReal> x9234=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x9232*x9233))+((x9230*x9231))+(((-1.0)*x9231))+(((-1.0)*x9230*(r00*r00))))),-1);
if(!x9234.valid){
continue;
}
CheckValue<IkReal> x9235 = IKatan2WithCheck(IkReal(((((-1.0)*sj0*x9233))+((sj0*x9232)))),IkReal((r02*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x9235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9234.value)))+(x9235.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9236=IKsin(j4);
IkReal x9237=IKcos(j4);
IkReal x9238=(cj5*x9237);
IkReal x9239=((1.0)*x9236);
IkReal x9240=(cj5*x9236);
IkReal x9241=((1.0)*sj5*x9237);
evalcond[0]=(((r22*x9237))+((r20*x9240))+(((-1.0)*r21*sj5*x9239)));
evalcond[1]=(sj0+((r02*x9237))+((r00*x9240))+(((-1.0)*r01*sj5*x9239)));
evalcond[2]=((((-1.0)*r01*x9241))+((r00*x9238))+(((-1.0)*r02*x9239)));
evalcond[3]=((((-1.0)*r12*x9239))+(((-1.0)*r11*x9241))+((r10*x9238)));
evalcond[4]=((1.0)+(((-1.0)*r21*x9241))+((r20*x9238))+(((-1.0)*r22*x9239)));
evalcond[5]=(((r10*x9240))+((r12*x9237))+(((-1.0)*r11*sj5*x9239))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9242=cj5*cj5;
IkReal x9243=r21*r21;
IkReal x9244=(r21*sj5);
IkReal x9245=(cj5*r20);
CheckValue<IkReal> x9246=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9244*x9245))+(((-1.0)*x9242*x9243))+(r22*r22)+x9243+((x9242*(r20*r20))))),-1);
if(!x9246.valid){
continue;
}
CheckValue<IkReal> x9247 = IKatan2WithCheck(IkReal(r22),IkReal((x9244+(((-1.0)*x9245)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9246.value)))+(x9247.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9248=IKsin(j4);
IkReal x9249=IKcos(j4);
IkReal x9250=(cj5*x9249);
IkReal x9251=((1.0)*x9248);
IkReal x9252=(cj5*x9248);
IkReal x9253=((1.0)*sj5*x9249);
evalcond[0]=((((-1.0)*r21*sj5*x9251))+((r22*x9249))+((r20*x9252)));
evalcond[1]=(sj0+((r02*x9249))+((r00*x9252))+(((-1.0)*r01*sj5*x9251)));
evalcond[2]=((((-1.0)*r01*x9253))+((r00*x9250))+(((-1.0)*r02*x9251)));
evalcond[3]=((((-1.0)*r12*x9251))+(((-1.0)*r11*x9253))+((r10*x9250)));
evalcond[4]=((1.0)+(((-1.0)*r22*x9251))+(((-1.0)*r21*x9253))+((r20*x9250)));
evalcond[5]=((((-1.0)*r11*sj5*x9251))+((r10*x9252))+((r12*x9249))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9254=((1.0)*cj5);
CheckValue<IkReal> x9255 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x9254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9255.valid){
continue;
}
CheckValue<IkReal> x9256=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x9254)))),-1);
if(!x9256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9255.value)+(((1.5707963267949)*(x9256.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9257=IKsin(j4);
IkReal x9258=IKcos(j4);
IkReal x9259=(cj5*x9258);
IkReal x9260=((1.0)*x9257);
IkReal x9261=(cj5*x9257);
IkReal x9262=((1.0)*sj5*x9258);
evalcond[0]=(((r20*x9261))+((r22*x9258))+(((-1.0)*r21*sj5*x9260)));
evalcond[1]=((((-1.0)*r01*sj5*x9260))+sj0+((r02*x9258))+((r00*x9261)));
evalcond[2]=((((-1.0)*r02*x9260))+((r00*x9259))+(((-1.0)*r01*x9262)));
evalcond[3]=(((r10*x9259))+(((-1.0)*r11*x9262))+(((-1.0)*r12*x9260)));
evalcond[4]=((1.0)+(((-1.0)*r21*x9262))+(((-1.0)*r22*x9260))+((r20*x9259)));
evalcond[5]=((((-1.0)*r11*sj5*x9260))+((r10*x9261))+((r12*x9258))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((2.38342796813528)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.38342796813528)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.38342796813528)*py))+IKsqr(((2.38342796813528)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((2.38342796813528)*py), ((2.38342796813528)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.41956376)*(IKcos(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.41956376)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x9263=((1.0)*cj5);
IkReal x9264=((((-1.0)*r10*sj5))+(((-1.0)*r11*x9263)));
j4eval[0]=x9264;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x9263))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x9264);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x9265=cj5*cj5;
IkReal x9266=((1.0)*r21);
IkReal x9267=(cj5*sj5);
IkReal x9268=((1.0)*r20);
IkReal x9269=((((-1.0)*r01*x9265*x9266))+((r01*r21))+(((-1.0)*r00*x9266*x9267))+((r02*r22))+(((-1.0)*r01*x9267*x9268))+((r00*r20*x9265)));
j4eval[0]=x9269;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x9268)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x9269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x9270=cj5*cj5;
IkReal x9271=(r21*sj5);
IkReal x9272=(r11*r21);
IkReal x9273=((1.0)*cj5*r20);
IkReal x9274=((((-1.0)*r11*sj5*x9273))+x9272+(((-1.0)*cj5*r10*x9271))+((r12*r22))+(((-1.0)*x9270*x9272))+((r10*r20*x9270)));
j4eval[0]=x9274;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x9271))+(((-1.0)*sj0*x9273))))));
j4eval[2]=IKsign(x9274);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9275=cj5*cj5;
IkReal x9276=(r21*sj5);
IkReal x9277=(r11*r21);
IkReal x9278=((1.0)*cj5*r20);
CheckValue<IkReal> x9279=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x9278))+x9277+(((-1.0)*cj5*r10*x9276))+((r12*r22))+(((-1.0)*x9275*x9277))+((r10*r20*x9275)))),-1);
if(!x9279.valid){
continue;
}
CheckValue<IkReal> x9280 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x9276))+(((-1.0)*sj0*x9278)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9279.value)))+(x9280.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9281=IKsin(j4);
IkReal x9282=IKcos(j4);
IkReal x9283=(cj5*x9282);
IkReal x9284=(cj5*x9281);
IkReal x9285=((1.0)*x9281);
IkReal x9286=((1.0)*sj5*x9282);
IkReal x9287=(sj5*x9285);
evalcond[0]=(((r22*x9282))+((r20*x9284))+(((-1.0)*r21*x9287)));
evalcond[1]=(sj0+((r02*x9282))+((r00*x9284))+(((-1.0)*r01*x9287)));
evalcond[2]=((((-1.0)*r22*x9285))+((r20*x9283))+(((-1.0)*r21*x9286)));
evalcond[3]=(cj0+((r00*x9283))+(((-1.0)*r02*x9285))+(((-1.0)*r01*x9286)));
evalcond[4]=((((-1.0)*r11*x9286))+(((-1.0)*r12*x9285))+sj0+((r10*x9283)));
evalcond[5]=((((-1.0)*r11*x9287))+((r10*x9284))+((r12*x9282))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9288=cj5*cj5;
IkReal x9289=((1.0)*r21);
IkReal x9290=(cj5*sj5);
IkReal x9291=((1.0)*r20);
CheckValue<IkReal> x9292 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x9291)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9292.valid){
continue;
}
CheckValue<IkReal> x9293=IKPowWithIntegerCheck(IKsign((((r00*r20*x9288))+(((-1.0)*r00*x9289*x9290))+(((-1.0)*r01*x9288*x9289))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x9290*x9291)))),-1);
if(!x9293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9292.value)+(((1.5707963267949)*(x9293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9294=IKsin(j4);
IkReal x9295=IKcos(j4);
IkReal x9296=(cj5*x9295);
IkReal x9297=(cj5*x9294);
IkReal x9298=((1.0)*x9294);
IkReal x9299=((1.0)*sj5*x9295);
IkReal x9300=(sj5*x9298);
evalcond[0]=((((-1.0)*r21*x9300))+((r22*x9295))+((r20*x9297)));
evalcond[1]=(sj0+((r02*x9295))+((r00*x9297))+(((-1.0)*r01*x9300)));
evalcond[2]=((((-1.0)*r22*x9298))+((r20*x9296))+(((-1.0)*r21*x9299)));
evalcond[3]=(cj0+((r00*x9296))+(((-1.0)*r02*x9298))+(((-1.0)*r01*x9299)));
evalcond[4]=(sj0+(((-1.0)*r11*x9299))+((r10*x9296))+(((-1.0)*r12*x9298)));
evalcond[5]=(((r10*x9297))+(((-1.0)*r11*x9300))+(((-1.0)*cj0))+((r12*x9295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9301=((1.0)*cj5);
CheckValue<IkReal> x9302=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x9301)))),-1);
if(!x9302.valid){
continue;
}
CheckValue<IkReal> x9303 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9301))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9302.value)))+(x9303.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9304=IKsin(j4);
IkReal x9305=IKcos(j4);
IkReal x9306=(cj5*x9305);
IkReal x9307=(cj5*x9304);
IkReal x9308=((1.0)*x9304);
IkReal x9309=((1.0)*sj5*x9305);
IkReal x9310=(sj5*x9308);
evalcond[0]=((((-1.0)*r21*x9310))+((r22*x9305))+((r20*x9307)));
evalcond[1]=(((r02*x9305))+sj0+(((-1.0)*r01*x9310))+((r00*x9307)));
evalcond[2]=((((-1.0)*r21*x9309))+((r20*x9306))+(((-1.0)*r22*x9308)));
evalcond[3]=(cj0+(((-1.0)*r01*x9309))+(((-1.0)*r02*x9308))+((r00*x9306)));
evalcond[4]=(sj0+(((-1.0)*r11*x9309))+((r10*x9306))+(((-1.0)*r12*x9308)));
evalcond[5]=(((r12*x9305))+(((-1.0)*r11*x9310))+((r10*x9307))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((2.38342796813528)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.38342796813528)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.38342796813528)*py))+IKsqr(((2.38342796813528)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((2.38342796813528)*py), ((2.38342796813528)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((0.41956376)*(IKcos(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.41956376)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x9311=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x9311;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x9311);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x9312=cj5*cj5;
IkReal x9313=((1.0)*r21);
IkReal x9314=(cj5*sj5);
IkReal x9315=((1.0)*r20);
IkReal x9316=(((r00*r20*x9312))+(((-1.0)*r00*x9313*x9314))+((r01*r21))+(((-1.0)*r01*x9312*x9313))+(((-1.0)*r01*x9314*x9315))+((r02*r22)));
j4eval[0]=x9316;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x9315)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x9316);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x9317=cj5*cj5;
IkReal x9318=(r21*sj5);
IkReal x9319=(r11*r21);
IkReal x9320=((1.0)*cj5*r20);
IkReal x9321=(((r10*r20*x9317))+x9319+(((-1.0)*cj5*r10*x9318))+(((-1.0)*x9317*x9319))+((r12*r22))+(((-1.0)*r11*sj5*x9320)));
j4eval[0]=x9321;
j4eval[1]=((IKabs((((sj0*x9318))+(((-1.0)*sj0*x9320)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x9321);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9322=cj5*cj5;
IkReal x9323=(r21*sj5);
IkReal x9324=(r11*r21);
IkReal x9325=((1.0)*cj5*r20);
CheckValue<IkReal> x9326 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x9323))+(((-1.0)*sj0*x9325)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9326.valid){
continue;
}
CheckValue<IkReal> x9327=IKPowWithIntegerCheck(IKsign((x9324+((r12*r22))+(((-1.0)*x9322*x9324))+((r10*r20*x9322))+(((-1.0)*r11*sj5*x9325))+(((-1.0)*cj5*r10*x9323)))),-1);
if(!x9327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9326.value)+(((1.5707963267949)*(x9327.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9328=IKsin(j4);
IkReal x9329=IKcos(j4);
IkReal x9330=(cj5*x9329);
IkReal x9331=(cj5*x9328);
IkReal x9332=((1.0)*x9328);
IkReal x9333=((1.0)*sj5*x9329);
IkReal x9334=(sj5*x9332);
evalcond[0]=(((r20*x9331))+((r22*x9329))+(((-1.0)*r21*x9334)));
evalcond[1]=((((-1.0)*r11*x9334))+cj0+((r12*x9329))+((r10*x9331)));
evalcond[2]=(((r20*x9330))+(((-1.0)*r22*x9332))+(((-1.0)*r21*x9333)));
evalcond[3]=((((-1.0)*r01*x9333))+(((-1.0)*r02*x9332))+cj0+((r00*x9330)));
evalcond[4]=((((-1.0)*r11*x9333))+sj0+(((-1.0)*r12*x9332))+((r10*x9330)));
evalcond[5]=((((-1.0)*r01*x9334))+(((-1.0)*sj0))+((r00*x9331))+((r02*x9329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9335=cj5*cj5;
IkReal x9336=((1.0)*r21);
IkReal x9337=(cj5*sj5);
IkReal x9338=((1.0)*r20);
CheckValue<IkReal> x9339 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x9338))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9339.valid){
continue;
}
CheckValue<IkReal> x9340=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9336*x9337))+(((-1.0)*r01*x9335*x9336))+(((-1.0)*r01*x9337*x9338))+((r01*r21))+((r00*r20*x9335))+((r02*r22)))),-1);
if(!x9340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9339.value)+(((1.5707963267949)*(x9340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9341=IKsin(j4);
IkReal x9342=IKcos(j4);
IkReal x9343=(cj5*x9342);
IkReal x9344=(cj5*x9341);
IkReal x9345=((1.0)*x9341);
IkReal x9346=((1.0)*sj5*x9342);
IkReal x9347=(sj5*x9345);
evalcond[0]=(((r20*x9344))+(((-1.0)*r21*x9347))+((r22*x9342)));
evalcond[1]=(((r12*x9342))+cj0+((r10*x9344))+(((-1.0)*r11*x9347)));
evalcond[2]=((((-1.0)*r22*x9345))+((r20*x9343))+(((-1.0)*r21*x9346)));
evalcond[3]=(cj0+((r00*x9343))+(((-1.0)*r02*x9345))+(((-1.0)*r01*x9346)));
evalcond[4]=(sj0+((r10*x9343))+(((-1.0)*r12*x9345))+(((-1.0)*r11*x9346)));
evalcond[5]=((((-1.0)*sj0))+((r00*x9344))+(((-1.0)*r01*x9347))+((r02*x9342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9348=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x9348.valid){
continue;
}
CheckValue<IkReal> x9349 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9348.value)))+(x9349.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9350=IKsin(j4);
IkReal x9351=IKcos(j4);
IkReal x9352=(cj5*x9351);
IkReal x9353=(cj5*x9350);
IkReal x9354=((1.0)*x9350);
IkReal x9355=((1.0)*sj5*x9351);
IkReal x9356=(sj5*x9354);
evalcond[0]=(((r20*x9353))+(((-1.0)*r21*x9356))+((r22*x9351)));
evalcond[1]=(cj0+(((-1.0)*r11*x9356))+((r10*x9353))+((r12*x9351)));
evalcond[2]=((((-1.0)*r22*x9354))+((r20*x9352))+(((-1.0)*r21*x9355)));
evalcond[3]=(cj0+(((-1.0)*r02*x9354))+((r00*x9352))+(((-1.0)*r01*x9355)));
evalcond[4]=(sj0+(((-1.0)*r11*x9355))+(((-1.0)*r12*x9354))+((r10*x9352)));
evalcond[5]=((((-1.0)*sj0))+((r00*x9353))+(((-1.0)*r01*x9356))+((r02*x9351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((2.5)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.5)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.5)*py))+IKsqr(((2.5)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((2.5)*py), ((2.5)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-2.5)*py))+(IKsin(j0)));
evalcond[1]=((((-2.5)*px))+(IKcos(j0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x9357=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x9357;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x9357);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x9358=r21*r21;
IkReal x9359=cj5*cj5;
IkReal x9360=(r21*sj5);
IkReal x9361=(cj5*r20);
IkReal x9362=(((x9358*x9359))+(((-1.0)*x9358))+(((-1.0)*x9359*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*x9360*x9361)));
j4eval[0]=x9362;
j4eval[1]=((IKabs(r22))+(IKabs((x9360+(((-1.0)*x9361))))));
j4eval[2]=IKsign(x9362);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x9363=cj5*cj5;
IkReal x9364=(r01*r11);
IkReal x9365=(cj5*sj5);
IkReal x9366=((((-1.0)*r02*r12))+((r01*r10*x9365))+(((-1.0)*x9364))+((x9363*x9364))+((r00*r11*x9365))+(((-1.0)*r00*r10*x9363)));
j4eval[0]=x9366;
j4eval[1]=IKsign(x9366);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*cj5*r00))+(((-1.0)*cj0*r01*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9367=cj5*cj5;
IkReal x9368=(r01*r11);
IkReal x9369=(cj5*sj5);
CheckValue<IkReal> x9370 = IKatan2WithCheck(IkReal((((cj0*cj5*r00))+(((-1.0)*cj0*r01*sj5)))),IkReal((cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9370.valid){
continue;
}
CheckValue<IkReal> x9371=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((r01*r10*x9369))+(((-1.0)*x9368))+((r00*r11*x9369))+(((-1.0)*r00*r10*x9367))+((x9367*x9368)))),-1);
if(!x9371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9370.value)+(((1.5707963267949)*(x9371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9372=IKsin(j4);
IkReal x9373=IKcos(j4);
IkReal x9374=(r01*sj5);
IkReal x9375=(r21*sj5);
IkReal x9376=((1.0)*r11*sj5);
IkReal x9377=(cj5*x9373);
IkReal x9378=((1.0)*x9372);
IkReal x9379=(cj5*x9372);
IkReal x9380=((1.0)*x9373);
evalcond[0]=(((r22*x9373))+(((-1.0)*x9375*x9378))+((r20*x9379)));
evalcond[1]=(cj0+(((-1.0)*x9372*x9376))+((r12*x9373))+((r10*x9379)));
evalcond[2]=((((-1.0)*r02*x9378))+(((-1.0)*x9374*x9380))+((r00*x9377)));
evalcond[3]=((((-1.0)*x9373*x9376))+(((-1.0)*r12*x9378))+((r10*x9377)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x9378))+(((-1.0)*x9375*x9380))+((r20*x9377)));
evalcond[5]=((((-1.0)*sj0))+((r02*x9373))+(((-1.0)*x9374*x9378))+((r00*x9379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9381=r21*r21;
IkReal x9382=cj5*cj5;
IkReal x9383=(r21*sj5);
IkReal x9384=(cj5*r20);
CheckValue<IkReal> x9385=IKPowWithIntegerCheck(IKsign(((((2.0)*x9383*x9384))+(((-1.0)*x9382*(r20*r20)))+((x9381*x9382))+(((-1.0)*(r22*r22)))+(((-1.0)*x9381)))),-1);
if(!x9385.valid){
continue;
}
CheckValue<IkReal> x9386 = IKatan2WithCheck(IkReal(r22),IkReal((x9383+(((-1.0)*x9384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9385.value)))+(x9386.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9387=IKsin(j4);
IkReal x9388=IKcos(j4);
IkReal x9389=(r01*sj5);
IkReal x9390=(r21*sj5);
IkReal x9391=((1.0)*r11*sj5);
IkReal x9392=(cj5*x9388);
IkReal x9393=((1.0)*x9387);
IkReal x9394=(cj5*x9387);
IkReal x9395=((1.0)*x9388);
evalcond[0]=((((-1.0)*x9390*x9393))+((r20*x9394))+((r22*x9388)));
evalcond[1]=((((-1.0)*x9387*x9391))+((r10*x9394))+cj0+((r12*x9388)));
evalcond[2]=((((-1.0)*x9389*x9395))+(((-1.0)*r02*x9393))+((r00*x9392)));
evalcond[3]=((((-1.0)*x9388*x9391))+(((-1.0)*r12*x9393))+((r10*x9392)));
evalcond[4]=((-1.0)+(((-1.0)*x9390*x9395))+((r20*x9392))+(((-1.0)*r22*x9393)));
evalcond[5]=((((-1.0)*sj0))+((r02*x9388))+(((-1.0)*x9389*x9393))+((r00*x9394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9396=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x9396.valid){
continue;
}
CheckValue<IkReal> x9397 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9396.value)))+(x9397.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9398=IKsin(j4);
IkReal x9399=IKcos(j4);
IkReal x9400=(r01*sj5);
IkReal x9401=(r21*sj5);
IkReal x9402=((1.0)*r11*sj5);
IkReal x9403=(cj5*x9399);
IkReal x9404=((1.0)*x9398);
IkReal x9405=(cj5*x9398);
IkReal x9406=((1.0)*x9399);
evalcond[0]=(((r20*x9405))+((r22*x9399))+(((-1.0)*x9401*x9404)));
evalcond[1]=(((r12*x9399))+cj0+((r10*x9405))+(((-1.0)*x9398*x9402)));
evalcond[2]=((((-1.0)*r02*x9404))+(((-1.0)*x9400*x9406))+((r00*x9403)));
evalcond[3]=((((-1.0)*r12*x9404))+((r10*x9403))+(((-1.0)*x9399*x9402)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x9404))+((r20*x9403))+(((-1.0)*x9401*x9406)));
evalcond[5]=((((-1.0)*sj0))+((r02*x9399))+(((-1.0)*x9400*x9404))+((r00*x9405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-2.37848193105333)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.37848193105333)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.37848193105333)*py))+IKsqr(((-2.37848193105333)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-2.37848193105333)*py), ((-2.37848193105333)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.42043624)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((-0.42043624)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x9407=((1.0)*cj5);
IkReal x9408=((((-1.0)*r10*sj5))+(((-1.0)*r11*x9407)));
j4eval[0]=x9408;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x9407))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x9408);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x9409=((1.0)*cj5);
IkReal x9410=((((-1.0)*r00*sj5))+(((-1.0)*r01*x9409)));
j4eval[0]=x9410;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x9409)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x9410);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x9411=cj5*cj5;
IkReal x9412=(cj5*r20);
IkReal x9413=((1.0)*r21);
IkReal x9414=((((-1.0)*r02*r22))+((r01*sj5*x9412))+(((-1.0)*r01*x9413))+((r01*r21*x9411))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x9411)));
j4eval[0]=x9414;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x9412))+(((-1.0)*sj0*sj5*x9413))))));
j4eval[2]=IKsign(x9414);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9415=cj5*cj5;
IkReal x9416=(cj5*r20);
IkReal x9417=((1.0)*r21);
CheckValue<IkReal> x9418 = IKatan2WithCheck(IkReal((((sj0*x9416))+(((-1.0)*sj0*sj5*x9417)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x9418.valid){
continue;
}
CheckValue<IkReal> x9419=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*sj5*x9416))+(((-1.0)*r01*x9417))+((r01*r21*x9415))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x9415)))),-1);
if(!x9419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9418.value)+(((1.5707963267949)*(x9419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9420=IKsin(j4);
IkReal x9421=IKcos(j4);
IkReal x9422=((1.0)*cj0);
IkReal x9423=(cj5*x9421);
IkReal x9424=(cj5*x9420);
IkReal x9425=((1.0)*x9420);
IkReal x9426=((1.0)*sj5*x9421);
IkReal x9427=(sj5*x9425);
evalcond[0]=(((r20*x9424))+(((-1.0)*r21*x9427))+((r22*x9421)));
evalcond[1]=(((r00*x9424))+sj0+((r02*x9421))+(((-1.0)*r01*x9427)));
evalcond[2]=(((r20*x9423))+(((-1.0)*r21*x9426))+(((-1.0)*r22*x9425)));
evalcond[3]=(((r12*x9421))+(((-1.0)*r11*x9427))+(((-1.0)*x9422))+((r10*x9424)));
evalcond[4]=(((r00*x9423))+(((-1.0)*r02*x9425))+(((-1.0)*r01*x9426))+(((-1.0)*x9422)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r11*x9426))+(((-1.0)*r12*x9425))+((r10*x9423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9428=((1.0)*cj5);
CheckValue<IkReal> x9429 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x9428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9429.valid){
continue;
}
CheckValue<IkReal> x9430=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x9428)))),-1);
if(!x9430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9429.value)+(((1.5707963267949)*(x9430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9431=IKsin(j4);
IkReal x9432=IKcos(j4);
IkReal x9433=((1.0)*cj0);
IkReal x9434=(cj5*x9432);
IkReal x9435=(cj5*x9431);
IkReal x9436=((1.0)*x9431);
IkReal x9437=((1.0)*sj5*x9432);
IkReal x9438=(sj5*x9436);
evalcond[0]=(((r22*x9432))+((r20*x9435))+(((-1.0)*r21*x9438)));
evalcond[1]=(sj0+((r02*x9432))+(((-1.0)*r01*x9438))+((r00*x9435)));
evalcond[2]=(((r20*x9434))+(((-1.0)*r21*x9437))+(((-1.0)*r22*x9436)));
evalcond[3]=((((-1.0)*x9433))+(((-1.0)*r11*x9438))+((r10*x9435))+((r12*x9432)));
evalcond[4]=((((-1.0)*x9433))+(((-1.0)*r02*x9436))+(((-1.0)*r01*x9437))+((r00*x9434)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r11*x9437))+(((-1.0)*r12*x9436))+((r10*x9434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9439=((1.0)*cj5);
CheckValue<IkReal> x9440=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x9439)))),-1);
if(!x9440.valid){
continue;
}
CheckValue<IkReal> x9441 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9439))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9440.value)))+(x9441.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9442=IKsin(j4);
IkReal x9443=IKcos(j4);
IkReal x9444=((1.0)*cj0);
IkReal x9445=(cj5*x9443);
IkReal x9446=(cj5*x9442);
IkReal x9447=((1.0)*x9442);
IkReal x9448=((1.0)*sj5*x9443);
IkReal x9449=(sj5*x9447);
evalcond[0]=(((r22*x9443))+((r20*x9446))+(((-1.0)*r21*x9449)));
evalcond[1]=(sj0+((r00*x9446))+(((-1.0)*r01*x9449))+((r02*x9443)));
evalcond[2]=((((-1.0)*r22*x9447))+((r20*x9445))+(((-1.0)*r21*x9448)));
evalcond[3]=(((r10*x9446))+(((-1.0)*x9444))+((r12*x9443))+(((-1.0)*r11*x9449)));
evalcond[4]=(((r00*x9445))+(((-1.0)*r01*x9448))+(((-1.0)*x9444))+(((-1.0)*r02*x9447)));
evalcond[5]=(((r10*x9445))+(((-1.0)*sj0))+(((-1.0)*r12*x9447))+(((-1.0)*r11*x9448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-2.37848193105333)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.37848193105333)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.37848193105333)*py))+IKsqr(((-2.37848193105333)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-2.37848193105333)*py), ((-2.37848193105333)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.42043624)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((-0.42043624)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x9450=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x9450;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x9450);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x9451=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x9451;
j4eval[1]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x9451);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x9452=cj5*cj5;
IkReal x9453=(r11*r21);
IkReal x9454=(cj5*r20);
IkReal x9455=(r21*sj5);
IkReal x9456=((((-1.0)*r10*r20*x9452))+((cj5*r10*x9455))+(((-1.0)*r12*r22))+((x9452*x9453))+(((-1.0)*x9453))+((r11*sj5*x9454)));
j4eval[0]=x9456;
j4eval[1]=IKsign(x9456);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x9454))+(((-1.0)*cj0*x9455))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9457=cj5*cj5;
IkReal x9458=(r11*r21);
IkReal x9459=(r21*sj5);
IkReal x9460=(cj5*r20);
CheckValue<IkReal> x9461 = IKatan2WithCheck(IkReal((((cj0*x9460))+(((-1.0)*cj0*x9459)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9461.valid){
continue;
}
CheckValue<IkReal> x9462=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x9457))+((x9457*x9458))+((cj5*r10*x9459))+((r11*sj5*x9460))+(((-1.0)*r12*r22))+(((-1.0)*x9458)))),-1);
if(!x9462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9461.value)+(((1.5707963267949)*(x9462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9463=IKsin(j4);
IkReal x9464=IKcos(j4);
IkReal x9465=((1.0)*sj0);
IkReal x9466=(cj5*x9464);
IkReal x9467=(cj5*x9463);
IkReal x9468=((1.0)*x9463);
IkReal x9469=((1.0)*sj5*x9464);
IkReal x9470=(sj5*x9468);
evalcond[0]=(((r22*x9464))+((r20*x9467))+(((-1.0)*r21*x9470)));
evalcond[1]=(cj0+((r10*x9467))+(((-1.0)*r11*x9470))+((r12*x9464)));
evalcond[2]=((((-1.0)*r22*x9468))+((r20*x9466))+(((-1.0)*r21*x9469)));
evalcond[3]=((((-1.0)*x9465))+((r00*x9467))+(((-1.0)*r01*x9470))+((r02*x9464)));
evalcond[4]=(((r00*x9466))+(((-1.0)*r01*x9469))+(((-1.0)*cj0))+(((-1.0)*r02*x9468)));
evalcond[5]=((((-1.0)*x9465))+((r10*x9466))+(((-1.0)*r11*x9469))+(((-1.0)*r12*x9468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9471=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x9471.valid){
continue;
}
CheckValue<IkReal> x9472 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9471.value)))+(x9472.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9473=IKsin(j4);
IkReal x9474=IKcos(j4);
IkReal x9475=((1.0)*sj0);
IkReal x9476=(cj5*x9474);
IkReal x9477=(cj5*x9473);
IkReal x9478=((1.0)*x9473);
IkReal x9479=((1.0)*sj5*x9474);
IkReal x9480=(sj5*x9478);
evalcond[0]=((((-1.0)*r21*x9480))+((r22*x9474))+((r20*x9477)));
evalcond[1]=(((r10*x9477))+cj0+((r12*x9474))+(((-1.0)*r11*x9480)));
evalcond[2]=((((-1.0)*r22*x9478))+((r20*x9476))+(((-1.0)*r21*x9479)));
evalcond[3]=((((-1.0)*x9475))+(((-1.0)*r01*x9480))+((r00*x9477))+((r02*x9474)));
evalcond[4]=((((-1.0)*r02*x9478))+((r00*x9476))+(((-1.0)*r01*x9479))+(((-1.0)*cj0)));
evalcond[5]=(((r10*x9476))+(((-1.0)*x9475))+(((-1.0)*r12*x9478))+(((-1.0)*r11*x9479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9481=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x9481.valid){
continue;
}
CheckValue<IkReal> x9482 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9481.value)))+(x9482.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9483=IKsin(j4);
IkReal x9484=IKcos(j4);
IkReal x9485=((1.0)*sj0);
IkReal x9486=(cj5*x9484);
IkReal x9487=(cj5*x9483);
IkReal x9488=((1.0)*x9483);
IkReal x9489=((1.0)*sj5*x9484);
IkReal x9490=(sj5*x9488);
evalcond[0]=(((r20*x9487))+(((-1.0)*r21*x9490))+((r22*x9484)));
evalcond[1]=(cj0+((r12*x9484))+(((-1.0)*r11*x9490))+((r10*x9487)));
evalcond[2]=((((-1.0)*r21*x9489))+((r20*x9486))+(((-1.0)*r22*x9488)));
evalcond[3]=(((r00*x9487))+(((-1.0)*x9485))+((r02*x9484))+(((-1.0)*r01*x9490)));
evalcond[4]=((((-1.0)*r01*x9489))+((r00*x9486))+(((-1.0)*r02*x9488))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x9485))+((r10*x9486))+(((-1.0)*r11*x9489))+(((-1.0)*r12*x9488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9491=cj2*cj2;
IkReal x9492=((5250000.0)*sj1);
IkReal x9493=(cj5*r11);
IkReal x9494=((12500000.0)*px);
IkReal x9495=(cj5*r01);
IkReal x9496=(r00*sj5);
IkReal x9497=(cj1*cj2);
IkReal x9498=((5000000.0)*sj2);
IkReal x9499=((5453.0)*r10*sj5);
IkReal x9500=((5453.0)*x9497);
IkReal x9501=((5453.0)*x9491);
IkReal x9502=((5000000.0)*x9497);
CheckValue<IkReal> x9503 = IKatan2WithCheck(IkReal(((((-1.0)*x9492*x9493))+(((-1.0)*x9496*x9498))+(((-1.0)*x9493*x9500))+(((-1.0)*x9495*x9498))+(((-1.0)*x9497*x9499))+x9499+(((-1.0)*sj2*x9494))+(((5453.0)*x9493))+(((-1.0)*r10*sj5*x9492)))),IkReal((((x9496*x9502))+(((-5453.0)*sj2*x9493))+((x9495*x9502))+(((-1.0)*sj2*x9499))+((x9494*x9497)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9503.valid){
continue;
}
CheckValue<IkReal> x9504=IKPowWithIntegerCheck(IKsign(((5453.0)+((x9501*(cj1*cj1)))+((x9492*x9497))+(((-1.0)*x9501))+(((-1.0)*x9500)))),-1);
if(!x9504.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x9503.value)+(((1.5707963267949)*(x9504.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x9505=IKcos(j0);
IkReal x9506=IKsin(j0);
IkReal x9507=(cj1*cj2);
IkReal x9508=(cj5*r01);
IkReal x9509=((0.42)*sj1);
IkReal x9510=(r00*sj5);
IkReal x9511=(cj5*r11);
IkReal x9512=(r10*sj5);
IkReal x9513=((0.00043624)*x9505);
IkReal x9514=((0.00043624)*x9506);
evalcond[0]=(x9511+x9512+((x9506*x9507))+((sj2*x9505)));
evalcond[1]=(((x9505*x9507))+(((-1.0)*sj2*x9506))+x9508+x9510);
evalcond[2]=(((x9505*x9509))+(((-0.4)*x9510))+(((-1.0)*x9513))+((x9507*x9513))+(((-1.0)*px))+(((-1.0)*sj2*x9514))+(((-0.4)*x9508)));
evalcond[3]=(((sj2*x9513))+(((-0.4)*x9511))+(((-0.4)*x9512))+(((-1.0)*x9514))+((x9507*x9514))+(((-1.0)*py))+((x9506*x9509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9515=(sj0*sj1);
IkReal x9516=((1.0)*cj1);
IkReal x9517=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x9517;
j4eval[1]=IKsign(x9517);
j4eval[2]=((IKabs(((((-1.0)*r21*sj5*x9515))+((cj5*r20*x9515))+((cj1*r11*sj5))+(((-1.0)*cj5*r10*x9516)))))+(IKabs((((r22*x9515))+(((-1.0)*r12*x9516))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9518=((1.0)*cj1);
IkReal x9519=(cj0*sj1);
IkReal x9520=((1.0)*sj5);
IkReal x9521=((((-1.0)*cj5*r11))+(((-1.0)*r10*x9520)));
j4eval[0]=x9521;
j4eval[1]=IKsign(x9521);
j4eval[2]=((IKabs(((((-1.0)*r02*x9518))+((r22*x9519)))))+(IKabs((((cj1*r01*sj5))+((cj5*r20*x9519))+(((-1.0)*cj5*r00*x9518))+(((-1.0)*r21*x9519*x9520))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9522=cj5*cj5;
IkReal x9523=r21*r21;
IkReal x9524=(cj5*r20);
IkReal x9525=(sj1*sj2);
IkReal x9526=(r21*sj5);
IkReal x9527=((r22*r22)+(((-2.0)*x9524*x9526))+x9523+(((-1.0)*x9522*x9523))+((x9522*(r20*r20))));
j4eval[0]=x9527;
j4eval[1]=IKsign(x9527);
j4eval[2]=((IKabs((((x9524*x9525))+(((-1.0)*x9525*x9526))+((cj1*r22)))))+(IKabs(((((-1.0)*cj1*x9524))+((r22*x9525))+((cj1*x9526))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x9528=((-1.0)*r10);
IkReal x9530 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x9530)==0){
continue;
}
IkReal x9529=pow(x9530,-0.5);
CheckValue<IkReal> x9531 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x9528),IKFAST_ATAN2_MAGTHRESH);
if(!x9531.valid){
continue;
}
IkReal gconst60=((-1.0)*(x9531.value));
IkReal gconst61=(r11*x9529);
IkReal gconst62=(x9528*x9529);
CheckValue<IkReal> x9532 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x9532.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x9532.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9533=(sj0*sj1);
IkReal x9534=((1.0)*cj1);
CheckValue<IkReal> x9535 = IKatan2WithCheck(IkReal((((cj1*gconst61*r11))+(((-1.0)*gconst62*r10*x9534))+((gconst62*r20*x9533))+(((-1.0)*gconst61*r21*x9533)))),IkReal((((r22*x9533))+(((-1.0)*r12*x9534)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9535.valid){
continue;
}
CheckValue<IkReal> x9536=IKPowWithIntegerCheck(IKsign((((gconst61*r00))+((gconst62*r01)))),-1);
if(!x9536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9535.value)+(((1.5707963267949)*(x9536.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9537=IKcos(j4);
IkReal x9538=IKsin(j4);
IkReal x9539=(gconst62*r10);
IkReal x9540=(cj1*sj2);
IkReal x9541=((1.0)*gconst61*r11);
IkReal x9542=((1.0)*gconst61*r01);
IkReal x9543=((1.0)*gconst61*r21);
IkReal x9544=((1.0)*x9538);
IkReal x9545=(gconst62*x9537);
IkReal x9546=(gconst62*x9538);
evalcond[0]=((((-1.0)*x9537*x9543))+cj1+(((-1.0)*r22*x9544))+((r20*x9545)));
evalcond[1]=((((-1.0)*sj1*sj2))+((r20*x9546))+((r22*x9537))+(((-1.0)*x9538*x9543)));
evalcond[2]=((((-1.0)*x9537*x9542))+(((-1.0)*r02*x9544))+((r00*x9545))+((cj0*sj1)));
evalcond[3]=((((-1.0)*r12*x9544))+(((-1.0)*x9537*x9541))+((x9537*x9539))+((sj0*sj1)));
evalcond[4]=(((r02*x9537))+((cj2*sj0))+((cj0*x9540))+(((-1.0)*x9538*x9542))+((r00*x9546)));
evalcond[5]=(((x9538*x9539))+((r12*x9537))+(((-1.0)*x9538*x9541))+(((-1.0)*cj0*cj2))+((sj0*x9540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9547=((-1.0)*r11);
IkReal x9549 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x9549)==0){
continue;
}
IkReal x9548=pow(x9549,-0.5);
CheckValue<IkReal> x9550 = IKatan2WithCheck(IkReal(x9547),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x9550.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x9550.value))));
IkReal gconst64=(x9547*x9548);
IkReal gconst65=((1.0)*r10*x9548);
CheckValue<IkReal> x9551 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x9551.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9551.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9552=((1.0)*cj1);
IkReal x9553=(sj0*sj1);
CheckValue<IkReal> x9554=IKPowWithIntegerCheck(IKsign((((gconst64*r00))+((gconst65*r01)))),-1);
if(!x9554.valid){
continue;
}
CheckValue<IkReal> x9555 = IKatan2WithCheck(IkReal((((gconst65*r20*x9553))+(((-1.0)*gconst64*r21*x9553))+(((-1.0)*gconst65*r10*x9552))+((cj1*gconst64*r11)))),IkReal((((r22*x9553))+(((-1.0)*r12*x9552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9554.value)))+(x9555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9556=IKcos(j4);
IkReal x9557=IKsin(j4);
IkReal x9558=(gconst65*r10);
IkReal x9559=(gconst65*r20);
IkReal x9560=(gconst65*r00);
IkReal x9561=(gconst64*r01);
IkReal x9562=(gconst64*r11);
IkReal x9563=(gconst64*r21);
IkReal x9564=(cj1*sj2);
IkReal x9565=((1.0)*x9557);
IkReal x9566=((1.0)*x9556);
evalcond[0]=(cj1+(((-1.0)*x9563*x9566))+(((-1.0)*r22*x9565))+((x9556*x9559)));
evalcond[1]=(((x9557*x9559))+(((-1.0)*sj1*sj2))+(((-1.0)*x9563*x9565))+((r22*x9556)));
evalcond[2]=((((-1.0)*x9561*x9566))+((cj0*sj1))+((x9556*x9560))+(((-1.0)*r02*x9565)));
evalcond[3]=(((sj0*sj1))+((x9556*x9558))+(((-1.0)*r12*x9565))+(((-1.0)*x9562*x9566)));
evalcond[4]=(((cj2*sj0))+((cj0*x9564))+((r02*x9556))+((x9557*x9560))+(((-1.0)*x9561*x9565)));
evalcond[5]=(((r12*x9556))+((x9557*x9558))+((sj0*x9564))+(((-1.0)*cj0*cj2))+(((-1.0)*x9562*x9565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9568 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x9568)==0){
continue;
}
IkReal x9567=pow(x9568,-0.5);
CheckValue<IkReal> x9569 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x9569.valid){
continue;
}
IkReal gconst66=((-1.0)*(x9569.value));
IkReal gconst67=((-1.0)*r01*x9567);
IkReal gconst68=(r00*x9567);
CheckValue<IkReal> x9570 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x9570.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x9570.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9571=((1.0)*cj1);
IkReal x9572=(cj0*sj1);
IkReal x9573=((1.0)*gconst67);
CheckValue<IkReal> x9574=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9573))+(((-1.0)*gconst68*r11)))),-1);
if(!x9574.valid){
continue;
}
CheckValue<IkReal> x9575 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x9572*x9573))+(((-1.0)*gconst68*r00*x9571))+((gconst68*r20*x9572))+((cj1*gconst67*r01)))),IkReal(((((-1.0)*r02*x9571))+((r22*x9572)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9574.value)))+(x9575.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9576=IKcos(j4);
IkReal x9577=IKsin(j4);
IkReal x9578=((1.0)*gconst67);
IkReal x9579=(gconst68*r00);
IkReal x9580=(cj1*sj2);
IkReal x9581=(gconst68*x9576);
IkReal x9582=((1.0)*x9577);
IkReal x9583=(gconst68*x9577);
evalcond[0]=(((r20*x9581))+cj1+(((-1.0)*r21*x9576*x9578))+(((-1.0)*r22*x9582)));
evalcond[1]=(((r20*x9583))+((r22*x9576))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x9577*x9578)));
evalcond[2]=(((x9576*x9579))+(((-1.0)*r01*x9576*x9578))+((cj0*sj1))+(((-1.0)*r02*x9582)));
evalcond[3]=(((r10*x9581))+((sj0*sj1))+(((-1.0)*r11*x9576*x9578))+(((-1.0)*r12*x9582)));
evalcond[4]=(((cj2*sj0))+((x9577*x9579))+(((-1.0)*r01*x9577*x9578))+((cj0*x9580))+((r02*x9576)));
evalcond[5]=(((sj0*x9580))+(((-1.0)*r11*x9577*x9578))+((r10*x9583))+((r12*x9576))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9585 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x9585)==0){
continue;
}
IkReal x9584=pow(x9585,-0.5);
CheckValue<IkReal> x9586 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x9586.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x9586.value))));
IkReal gconst70=((1.0)*r01*x9584);
IkReal gconst71=((-1.0)*r00*x9584);
CheckValue<IkReal> x9587 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x9587.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9587.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x9590 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x9590.valid){
continue;
}
IkReal x9588=((1.0)*(x9590.value));
IkReal x9589=x9584;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x9588)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x9588)));
IkReal gconst70=((1.0)*r01*x9589);
IkReal gconst71=((-1.0)*r00*x9589);
IkReal x9591=r02*r02;
IkReal x9592=(cj1*r12);
IkReal x9593=(r22*sj0*sj1);
CheckValue<IkReal> x9597=IKPowWithIntegerCheck(((-1.0)+x9591),-1);
if(!x9597.valid){
continue;
}
IkReal x9594=x9597.value;
if((((1.0)+(((-1.0)*x9591)))) < -0.00001)
continue;
IkReal x9595=IKsqrt(((1.0)+(((-1.0)*x9591))));
IkReal x9596=(r02*x9594*x9595);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x9592*x9596))+(((-1.0)*x9593*x9596)))))+(IKabs((x9593+(((-1.0)*x9592))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9598=((1.0)*gconst71);
IkReal x9599=(cj0*sj1);
IkReal x9600=((1.0)*gconst70);
CheckValue<IkReal> x9601 = IKatan2WithCheck(IkReal((((gconst71*r20*x9599))+((cj1*gconst70*r01))+(((-1.0)*cj1*r00*x9598))+(((-1.0)*r21*x9599*x9600)))),IkReal((((r22*x9599))+(((-1.0)*cj1*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9601.valid){
continue;
}
CheckValue<IkReal> x9602=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9598))+(((-1.0)*r10*x9600)))),-1);
if(!x9602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9601.value)+(((1.5707963267949)*(x9602.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9603=IKcos(j4);
IkReal x9604=IKsin(j4);
IkReal x9605=(gconst71*r00);
IkReal x9606=(cj1*sj2);
IkReal x9607=((1.0)*gconst70*r21);
IkReal x9608=((1.0)*gconst70*r01);
IkReal x9609=(gconst71*x9603);
IkReal x9610=((1.0)*gconst70*r11);
IkReal x9611=((1.0)*x9604);
IkReal x9612=(gconst71*x9604);
evalcond[0]=((((-1.0)*r22*x9611))+cj1+((r20*x9609))+(((-1.0)*x9603*x9607)));
evalcond[1]=(((r20*x9612))+(((-1.0)*sj1*sj2))+(((-1.0)*x9604*x9607))+((r22*x9603)));
evalcond[2]=(((x9603*x9605))+(((-1.0)*r02*x9611))+((cj0*sj1))+(((-1.0)*x9603*x9608)));
evalcond[3]=((((-1.0)*r12*x9611))+((r10*x9609))+((sj0*sj1))+(((-1.0)*x9603*x9610)));
evalcond[4]=(((cj2*sj0))+((x9604*x9605))+(((-1.0)*x9604*x9608))+((cj0*x9606))+((r02*x9603)));
evalcond[5]=(((r10*x9612))+((r12*x9603))+(((-1.0)*cj0*cj2))+(((-1.0)*x9604*x9610))+((sj0*x9606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9613=(sj0*sj1);
IkReal x9614=((1.0)*cj1);
CheckValue<IkReal> x9615=IKPowWithIntegerCheck(IKsign((((gconst70*r00))+((gconst71*r01)))),-1);
if(!x9615.valid){
continue;
}
CheckValue<IkReal> x9616 = IKatan2WithCheck(IkReal(((((-1.0)*gconst70*r21*x9613))+(((-1.0)*gconst71*r10*x9614))+((cj1*gconst70*r11))+((gconst71*r20*x9613)))),IkReal(((((-1.0)*r12*x9614))+((r22*x9613)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9615.value)))+(x9616.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9617=IKcos(j4);
IkReal x9618=IKsin(j4);
IkReal x9619=(gconst71*r00);
IkReal x9620=(cj1*sj2);
IkReal x9621=((1.0)*gconst70*r21);
IkReal x9622=((1.0)*gconst70*r01);
IkReal x9623=(gconst71*x9617);
IkReal x9624=((1.0)*gconst70*r11);
IkReal x9625=((1.0)*x9618);
IkReal x9626=(gconst71*x9618);
evalcond[0]=(((r20*x9623))+(((-1.0)*x9617*x9621))+cj1+(((-1.0)*r22*x9625)));
evalcond[1]=((((-1.0)*x9618*x9621))+((r20*x9626))+(((-1.0)*sj1*sj2))+((r22*x9617)));
evalcond[2]=(((x9617*x9619))+(((-1.0)*x9617*x9622))+(((-1.0)*r02*x9625))+((cj0*sj1)));
evalcond[3]=((((-1.0)*x9617*x9624))+((r10*x9623))+((sj0*sj1))+(((-1.0)*r12*x9625)));
evalcond[4]=(((cj0*x9620))+((cj2*sj0))+(((-1.0)*x9618*x9622))+((x9618*x9619))+((r02*x9617)));
evalcond[5]=((((-1.0)*x9618*x9624))+((sj0*x9620))+((r10*x9626))+((r12*x9617))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x9627=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9627);
rxp1_1=(px*r21);
rxp1_2=(r11*x9627);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=IKsign(r02);
j4eval[2]=((IKabs(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2)))))+(IKabs((cj0*sj1))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9628=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9628);
rxp1_1=(px*r21);
rxp1_2=(r11*x9628);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9629=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9629);
rxp1_1=(px*r21);
rxp1_2=(r11*x9629);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9630=IKPowWithIntegerCheck(r02,-1);
if(!x9630.valid){
continue;
}
CheckValue<IkReal> x9631=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x9631.valid){
continue;
}
if( IKabs((cj0*sj1*(x9630.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*sj1*(x9631.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*sj1*(x9630.value)))+IKsqr(((-1.0)*sj0*sj1*(x9631.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*sj1*(x9630.value)), ((-1.0)*sj0*sj1*(x9631.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9632=IKcos(j4);
IkReal x9633=IKsin(j4);
IkReal x9634=(r11*sj5);
IkReal x9635=(cj5*r20);
IkReal x9636=(cj1*sj2);
IkReal x9637=(cj5*r10);
IkReal x9638=(r21*sj5);
IkReal x9639=((1.0)*x9633);
IkReal x9640=((1.0)*x9632);
evalcond[0]=((((-1.0)*r02*x9639))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((cj0*x9636))+((r02*x9632)));
evalcond[2]=((((-1.0)*x9638*x9640))+cj1+((x9632*x9635)));
evalcond[3]=(((x9632*x9637))+((sj0*sj1))+(((-1.0)*x9634*x9640)));
evalcond[4]=((((-1.0)*sj1*sj2))+(((-1.0)*x9638*x9639))+((x9633*x9635)));
evalcond[5]=(((sj0*x9636))+(((-1.0)*cj0*cj2))+((x9633*x9637))+(((-1.0)*x9634*x9639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9641=IKPowWithIntegerCheck(r02,-1);
if(!x9641.valid){
continue;
}
CheckValue<IkReal> x9642=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x9642.valid){
continue;
}
if( IKabs((cj0*sj1*(x9641.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj1*(x9642.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*sj1*(x9641.value)))+IKsqr(((-1.0)*cj1*(x9642.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*sj1*(x9641.value)), ((-1.0)*cj1*(x9642.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9643=IKcos(j4);
IkReal x9644=IKsin(j4);
IkReal x9645=(r11*sj5);
IkReal x9646=(cj5*r20);
IkReal x9647=(cj1*sj2);
IkReal x9648=(cj5*r10);
IkReal x9649=(r21*sj5);
IkReal x9650=((1.0)*x9644);
IkReal x9651=((1.0)*x9643);
evalcond[0]=((((-1.0)*r02*x9650))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((r02*x9643))+((cj0*x9647)));
evalcond[2]=(((x9643*x9646))+(((-1.0)*x9649*x9651))+cj1);
evalcond[3]=(((x9643*x9648))+((sj0*sj1))+(((-1.0)*x9645*x9651)));
evalcond[4]=((((-1.0)*x9649*x9650))+((x9644*x9646))+(((-1.0)*sj1*sj2)));
evalcond[5]=(((x9644*x9648))+(((-1.0)*x9645*x9650))+((sj0*x9647))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9652=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x9652.valid){
continue;
}
CheckValue<IkReal> x9653 = IKatan2WithCheck(IkReal((cj0*sj1)),IkReal(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9652.value)))+(x9653.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9654=IKcos(j4);
IkReal x9655=IKsin(j4);
IkReal x9656=(r11*sj5);
IkReal x9657=(cj5*r20);
IkReal x9658=(cj1*sj2);
IkReal x9659=(cj5*r10);
IkReal x9660=(r21*sj5);
IkReal x9661=((1.0)*x9655);
IkReal x9662=((1.0)*x9654);
evalcond[0]=((((-1.0)*r02*x9661))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((cj0*x9658))+((r02*x9654)));
evalcond[2]=(cj1+((x9654*x9657))+(((-1.0)*x9660*x9662)));
evalcond[3]=(((x9654*x9659))+((sj0*sj1))+(((-1.0)*x9656*x9662)));
evalcond[4]=((((-1.0)*sj1*sj2))+(((-1.0)*x9660*x9661))+((x9655*x9657)));
evalcond[5]=((((-1.0)*x9656*x9661))+(((-1.0)*cj0*cj2))+((x9655*x9659))+((sj0*x9658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x9663=((1.0)*sj5);
IkReal x9664=((((-1.0)*cj5*r11))+(((-1.0)*r10*x9663)));
j4eval[0]=x9664;
j4eval[1]=IKsign(x9664);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x9663)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x9665=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x9665;
j4eval[1]=IKsign(x9665);
j4eval[2]=((IKabs((cj2*r02)))+(IKabs((((cj2*r01*sj5))+(((-1.0)*cj2*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x9666=((1.0)*cj5);
IkReal x9667=((((-1.0)*r10*sj5))+(((-1.0)*r11*x9666)));
j4eval[0]=x9667;
j4eval[1]=IKsign(x9667);
j4eval[2]=((IKabs((r02*sj2)))+(IKabs((((r01*sj2*sj5))+(((-1.0)*r00*sj2*x9666))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9668=((1.0)*cj5);
CheckValue<IkReal> x9669=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x9668)))),-1);
if(!x9669.valid){
continue;
}
CheckValue<IkReal> x9670 = IKatan2WithCheck(IkReal((r02*sj2)),IkReal((((r01*sj2*sj5))+(((-1.0)*r00*sj2*x9668)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9669.value)))+(x9670.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9671=IKsin(j4);
IkReal x9672=IKcos(j4);
IkReal x9673=((1.0)*sj5);
IkReal x9674=(cj5*x9672);
IkReal x9675=(cj5*x9671);
IkReal x9676=((1.0)*x9671);
evalcond[0]=((((-1.0)*r01*x9671*x9673))+((r00*x9675))+((r02*x9672)));
evalcond[1]=(((r20*x9674))+(((-1.0)*r21*x9672*x9673))+(((-1.0)*r22*x9676)));
evalcond[2]=((((-1.0)*r11*x9672*x9673))+((r10*x9674))+(((-1.0)*r12*x9676)));
evalcond[3]=((1.0)+((r00*x9674))+(((-1.0)*r01*x9672*x9673))+(((-1.0)*r02*x9676)));
evalcond[4]=((((-1.0)*sj2))+(((-1.0)*r21*x9671*x9673))+((r20*x9675))+((r22*x9672)));
evalcond[5]=(((r12*x9672))+(((-1.0)*r11*x9671*x9673))+((r10*x9675))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9677 = IKatan2WithCheck(IkReal((cj2*r02)),IkReal((((cj2*r01*sj5))+(((-1.0)*cj2*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9677.valid){
continue;
}
CheckValue<IkReal> x9678=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x9678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9677.value)+(((1.5707963267949)*(x9678.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9679=IKsin(j4);
IkReal x9680=IKcos(j4);
IkReal x9681=((1.0)*sj5);
IkReal x9682=(cj5*x9680);
IkReal x9683=(cj5*x9679);
IkReal x9684=((1.0)*x9679);
evalcond[0]=(((r02*x9680))+(((-1.0)*r01*x9679*x9681))+((r00*x9683)));
evalcond[1]=((((-1.0)*r21*x9680*x9681))+(((-1.0)*r22*x9684))+((r20*x9682)));
evalcond[2]=((((-1.0)*r11*x9680*x9681))+(((-1.0)*r12*x9684))+((r10*x9682)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9684))+((r00*x9682))+(((-1.0)*r01*x9680*x9681)));
evalcond[4]=((((-1.0)*sj2))+(((-1.0)*r21*x9679*x9681))+((r22*x9680))+((r20*x9683)));
evalcond[5]=((((-1.0)*r11*x9679*x9681))+((r12*x9680))+((r10*x9683))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9685=((1.0)*sj5);
CheckValue<IkReal> x9686 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*x9685)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x9686.valid){
continue;
}
CheckValue<IkReal> x9687=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x9685)))),-1);
if(!x9687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9686.value)+(((1.5707963267949)*(x9687.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9688=IKsin(j4);
IkReal x9689=IKcos(j4);
IkReal x9690=((1.0)*sj5);
IkReal x9691=(cj5*x9689);
IkReal x9692=(cj5*x9688);
IkReal x9693=((1.0)*x9688);
evalcond[0]=(((r02*x9689))+((r00*x9692))+(((-1.0)*r01*x9688*x9690)));
evalcond[1]=((((-1.0)*r22*x9693))+((r20*x9691))+(((-1.0)*r21*x9689*x9690)));
evalcond[2]=((((-1.0)*r12*x9693))+(((-1.0)*r11*x9689*x9690))+((r10*x9691)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9693))+(((-1.0)*r01*x9689*x9690))+((r00*x9691)));
evalcond[4]=((((-1.0)*sj2))+((r22*x9689))+(((-1.0)*r21*x9688*x9690))+((r20*x9692)));
evalcond[5]=(((r12*x9689))+((r10*x9692))+(((-1.0)*cj2))+(((-1.0)*r11*x9688*x9690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x9694=((1.0)*cj5);
IkReal x9695=((((-1.0)*r21*x9694))+(((-1.0)*r20*sj5)));
j4eval[0]=x9695;
j4eval[1]=IKsign(x9695);
j4eval[2]=((IKabs((cj2*r02)))+(IKabs(((((-1.0)*cj2*r00*x9694))+((cj2*r01*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x9696=cj5*cj5;
IkReal x9697=r01*r01;
IkReal x9698=(r01*sj5);
IkReal x9699=(cj5*r00);
IkReal x9700=((((-1.0)*x9697))+(((-1.0)*x9696*(r00*r00)))+(((-1.0)*(r02*r02)))+((x9696*x9697))+(((2.0)*x9698*x9699)));
j4eval[0]=x9700;
j4eval[1]=IKsign(x9700);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x9699))+x9698))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x9701=cj5*cj5;
IkReal x9702=(r11*r21);
IkReal x9703=(cj5*r20);
IkReal x9704=(r21*sj5);
IkReal x9705=(((cj5*r10*x9704))+(((-1.0)*x9702))+(((-1.0)*r12*r22))+((x9701*x9702))+(((-1.0)*r10*r20*x9701))+((r11*sj5*x9703)));
j4eval[0]=x9705;
j4eval[1]=((IKabs((((cj2*x9703))+(((-1.0)*cj2*x9704)))))+(IKabs((cj2*r22))));
j4eval[2]=IKsign(x9705);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9706=cj5*cj5;
IkReal x9707=(r11*r21);
IkReal x9708=(cj5*r20);
IkReal x9709=(r21*sj5);
CheckValue<IkReal> x9710 = IKatan2WithCheck(IkReal((((cj2*x9708))+(((-1.0)*cj2*x9709)))),IkReal((cj2*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9710.valid){
continue;
}
CheckValue<IkReal> x9711=IKPowWithIntegerCheck(IKsign((((x9706*x9707))+((cj5*r10*x9709))+(((-1.0)*x9707))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x9706))+((r11*sj5*x9708)))),-1);
if(!x9711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9710.value)+(((1.5707963267949)*(x9711.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9712=IKsin(j4);
IkReal x9713=IKcos(j4);
IkReal x9714=(r21*sj5);
IkReal x9715=((1.0)*r11*sj5);
IkReal x9716=(cj5*x9713);
IkReal x9717=((1.0)*r01*sj5);
IkReal x9718=(cj5*x9712);
IkReal x9719=((1.0)*x9712);
evalcond[0]=(((r02*x9713))+(((-1.0)*x9712*x9717))+((r00*x9718)));
evalcond[1]=(cj2+((r12*x9713))+(((-1.0)*x9712*x9715))+((r10*x9718)));
evalcond[2]=(((r20*x9716))+(((-1.0)*r22*x9719))+(((-1.0)*x9713*x9714)));
evalcond[3]=((((-1.0)*r12*x9719))+(((-1.0)*x9713*x9715))+((r10*x9716)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x9719))+(((-1.0)*x9713*x9717))+((r00*x9716)));
evalcond[5]=(((r22*x9713))+(((-1.0)*sj2))+(((-1.0)*x9714*x9719))+((r20*x9718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9720=cj5*cj5;
IkReal x9721=r01*r01;
IkReal x9722=(r01*sj5);
IkReal x9723=(cj5*r00);
CheckValue<IkReal> x9724=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x9720*x9721))+(((2.0)*x9722*x9723))+(((-1.0)*x9720*(r00*r00)))+(((-1.0)*x9721)))),-1);
if(!x9724.valid){
continue;
}
CheckValue<IkReal> x9725 = IKatan2WithCheck(IkReal(r02),IkReal((x9722+(((-1.0)*x9723)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9724.value)))+(x9725.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9726=IKsin(j4);
IkReal x9727=IKcos(j4);
IkReal x9728=(r21*sj5);
IkReal x9729=((1.0)*r11*sj5);
IkReal x9730=(cj5*x9727);
IkReal x9731=((1.0)*r01*sj5);
IkReal x9732=(cj5*x9726);
IkReal x9733=((1.0)*x9726);
evalcond[0]=(((r02*x9727))+(((-1.0)*x9726*x9731))+((r00*x9732)));
evalcond[1]=(cj2+(((-1.0)*x9726*x9729))+((r12*x9727))+((r10*x9732)));
evalcond[2]=(((r20*x9730))+(((-1.0)*r22*x9733))+(((-1.0)*x9727*x9728)));
evalcond[3]=((((-1.0)*r12*x9733))+(((-1.0)*x9727*x9729))+((r10*x9730)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x9733))+(((-1.0)*x9727*x9731))+((r00*x9730)));
evalcond[5]=((((-1.0)*sj2))+((r20*x9732))+(((-1.0)*x9728*x9733))+((r22*x9727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9734=((1.0)*cj5);
CheckValue<IkReal> x9735=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9734))+(((-1.0)*r20*sj5)))),-1);
if(!x9735.valid){
continue;
}
CheckValue<IkReal> x9736 = IKatan2WithCheck(IkReal((cj2*r02)),IkReal(((((-1.0)*cj2*r00*x9734))+((cj2*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9735.value)))+(x9736.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9737=IKsin(j4);
IkReal x9738=IKcos(j4);
IkReal x9739=(r21*sj5);
IkReal x9740=((1.0)*r11*sj5);
IkReal x9741=(cj5*x9738);
IkReal x9742=((1.0)*r01*sj5);
IkReal x9743=(cj5*x9737);
IkReal x9744=((1.0)*x9737);
evalcond[0]=(((r02*x9738))+(((-1.0)*x9737*x9742))+((r00*x9743)));
evalcond[1]=(cj2+((r10*x9743))+((r12*x9738))+(((-1.0)*x9737*x9740)));
evalcond[2]=(((r20*x9741))+(((-1.0)*r22*x9744))+(((-1.0)*x9738*x9739)));
evalcond[3]=(((r10*x9741))+(((-1.0)*x9738*x9740))+(((-1.0)*r12*x9744)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x9744))+((r00*x9741))+(((-1.0)*x9738*x9742)));
evalcond[5]=((((-1.0)*x9739*x9744))+(((-1.0)*sj2))+((r20*x9743))+((r22*x9738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x9745=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x9745;
j4eval[1]=IKsign(x9745);
j4eval[2]=((IKabs((r02*sj2)))+(IKabs(((((-1.0)*cj5*r00*sj2))+((r01*sj2*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x9746=cj5*cj5;
IkReal x9747=r01*r01;
IkReal x9748=(r01*sj5);
IkReal x9749=(cj5*r00);
IkReal x9750=((((-1.0)*(r02*r02)))+(((-1.0)*x9747))+((x9746*x9747))+(((-1.0)*x9746*(r00*r00)))+(((2.0)*x9748*x9749)));
j4eval[0]=x9750;
j4eval[1]=IKsign(x9750);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x9749))+x9748))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x9751=r21*r21;
IkReal x9752=cj5*cj5;
IkReal x9753=(cj5*r20);
IkReal x9754=(r21*sj5);
IkReal x9755=((((-1.0)*x9751))+(((2.0)*x9753*x9754))+((x9751*x9752))+(((-1.0)*(r22*r22)))+(((-1.0)*x9752*(r20*r20))));
j4eval[0]=x9755;
j4eval[1]=((IKabs(((((-1.0)*sj2*x9754))+((sj2*x9753)))))+(IKabs((r22*sj2))));
j4eval[2]=IKsign(x9755);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9756=r21*r21;
IkReal x9757=cj5*cj5;
IkReal x9758=(cj5*r20);
IkReal x9759=(r21*sj5);
CheckValue<IkReal> x9760=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9756))+(((-1.0)*x9757*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*x9758*x9759))+((x9756*x9757)))),-1);
if(!x9760.valid){
continue;
}
CheckValue<IkReal> x9761 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x9759))+((sj2*x9758)))),IkReal((r22*sj2)),IKFAST_ATAN2_MAGTHRESH);
if(!x9761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9760.value)))+(x9761.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9762=IKsin(j4);
IkReal x9763=IKcos(j4);
IkReal x9764=(cj5*x9763);
IkReal x9765=(cj5*x9762);
IkReal x9766=((1.0)*x9762);
IkReal x9767=((1.0)*sj5*x9763);
IkReal x9768=(sj5*x9766);
evalcond[0]=(((r00*x9765))+((r02*x9763))+(((-1.0)*r01*x9768)));
evalcond[1]=(sj2+((r22*x9763))+(((-1.0)*r21*x9768))+((r20*x9765)));
evalcond[2]=((((-1.0)*r22*x9766))+(((-1.0)*r21*x9767))+((r20*x9764)));
evalcond[3]=(((r10*x9764))+(((-1.0)*r12*x9766))+(((-1.0)*r11*x9767)));
evalcond[4]=((-1.0)+((r00*x9764))+(((-1.0)*r02*x9766))+(((-1.0)*r01*x9767)));
evalcond[5]=(((r12*x9763))+((r10*x9765))+(((-1.0)*r11*x9768))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9769=cj5*cj5;
IkReal x9770=r01*r01;
IkReal x9771=(r01*sj5);
IkReal x9772=(cj5*r00);
CheckValue<IkReal> x9773=IKPowWithIntegerCheck(IKsign(((((2.0)*x9771*x9772))+((x9769*x9770))+(((-1.0)*x9770))+(((-1.0)*(r02*r02)))+(((-1.0)*x9769*(r00*r00))))),-1);
if(!x9773.valid){
continue;
}
CheckValue<IkReal> x9774 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x9772))+x9771)),IKFAST_ATAN2_MAGTHRESH);
if(!x9774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9773.value)))+(x9774.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9775=IKsin(j4);
IkReal x9776=IKcos(j4);
IkReal x9777=(cj5*x9776);
IkReal x9778=(cj5*x9775);
IkReal x9779=((1.0)*x9775);
IkReal x9780=((1.0)*sj5*x9776);
IkReal x9781=(sj5*x9779);
evalcond[0]=(((r00*x9778))+((r02*x9776))+(((-1.0)*r01*x9781)));
evalcond[1]=(sj2+((r22*x9776))+(((-1.0)*r21*x9781))+((r20*x9778)));
evalcond[2]=((((-1.0)*r22*x9779))+(((-1.0)*r21*x9780))+((r20*x9777)));
evalcond[3]=((((-1.0)*r11*x9780))+((r10*x9777))+(((-1.0)*r12*x9779)));
evalcond[4]=((-1.0)+((r00*x9777))+(((-1.0)*r02*x9779))+(((-1.0)*r01*x9780)));
evalcond[5]=(((r12*x9776))+(((-1.0)*r11*x9781))+((r10*x9778))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9782 = IKatan2WithCheck(IkReal((r02*sj2)),IkReal(((((-1.0)*cj5*r00*sj2))+((r01*sj2*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9782.valid){
continue;
}
CheckValue<IkReal> x9783=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x9783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9782.value)+(((1.5707963267949)*(x9783.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9784=IKsin(j4);
IkReal x9785=IKcos(j4);
IkReal x9786=(cj5*x9785);
IkReal x9787=(cj5*x9784);
IkReal x9788=((1.0)*x9784);
IkReal x9789=((1.0)*sj5*x9785);
IkReal x9790=(sj5*x9788);
evalcond[0]=(((r00*x9787))+((r02*x9785))+(((-1.0)*r01*x9790)));
evalcond[1]=(sj2+((r22*x9785))+((r20*x9787))+(((-1.0)*r21*x9790)));
evalcond[2]=((((-1.0)*r21*x9789))+(((-1.0)*r22*x9788))+((r20*x9786)));
evalcond[3]=((((-1.0)*r12*x9788))+(((-1.0)*r11*x9789))+((r10*x9786)));
evalcond[4]=((-1.0)+((r00*x9786))+(((-1.0)*r01*x9789))+(((-1.0)*r02*x9788)));
evalcond[5]=((((-1.0)*r11*x9790))+((r10*x9787))+((r12*x9785))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x9791=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x9791;
j4eval[1]=IKsign(x9791);
j4eval[2]=((IKabs((r02*sj2)))+(IKabs(((((-1.0)*cj5*r00*sj2))+((r01*sj2*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x9792=((1.0)*cj5);
IkReal x9793=((((-1.0)*r21*x9792))+(((-1.0)*r20*sj5)));
j4eval[0]=x9793;
j4eval[1]=IKsign(x9793);
j4eval[2]=((IKabs((cj2*r02)))+(IKabs(((((-1.0)*cj2*r00*x9792))+((cj2*r01*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x9794=((1.0)*sj2);
IkReal x9795=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x9795;
j4eval[1]=IKsign(x9795);
j4eval[2]=((IKabs((((cj5*r10*sj2))+(((-1.0)*cj2*cj5*r20))+(((-1.0)*r11*sj5*x9794))+((cj2*r21*sj5)))))+(IKabs(((((-1.0)*r12*x9794))+((cj2*r22))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9796=((1.0)*sj2);
CheckValue<IkReal> x9797 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x9796))+((cj2*r22)))),IkReal((((cj5*r10*sj2))+(((-1.0)*cj2*cj5*r20))+(((-1.0)*r11*sj5*x9796))+((cj2*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9797.valid){
continue;
}
CheckValue<IkReal> x9798=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x9798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9797.value)+(((1.5707963267949)*(x9798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9799=IKsin(j4);
IkReal x9800=IKcos(j4);
IkReal x9801=(cj5*x9800);
IkReal x9802=(cj5*x9799);
IkReal x9803=((1.0)*x9799);
IkReal x9804=((1.0)*sj5*x9800);
IkReal x9805=(sj5*x9803);
evalcond[0]=(((r00*x9802))+((r02*x9800))+(((-1.0)*r01*x9805)));
evalcond[1]=(sj2+((r22*x9800))+((r20*x9802))+(((-1.0)*r21*x9805)));
evalcond[2]=(((r10*x9802))+((r12*x9800))+cj2+(((-1.0)*r11*x9805)));
evalcond[3]=((((-1.0)*r22*x9803))+((r20*x9801))+(((-1.0)*r21*x9804)));
evalcond[4]=(((r10*x9801))+(((-1.0)*r11*x9804))+(((-1.0)*r12*x9803)));
evalcond[5]=((1.0)+((r00*x9801))+(((-1.0)*r02*x9803))+(((-1.0)*r01*x9804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9806=((1.0)*cj5);
CheckValue<IkReal> x9807 = IKatan2WithCheck(IkReal((cj2*r02)),IkReal((((cj2*r01*sj5))+(((-1.0)*cj2*r00*x9806)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9807.valid){
continue;
}
CheckValue<IkReal> x9808=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9806))+(((-1.0)*r20*sj5)))),-1);
if(!x9808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9807.value)+(((1.5707963267949)*(x9808.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9809=IKsin(j4);
IkReal x9810=IKcos(j4);
IkReal x9811=(cj5*x9810);
IkReal x9812=(cj5*x9809);
IkReal x9813=((1.0)*x9809);
IkReal x9814=((1.0)*sj5*x9810);
IkReal x9815=(sj5*x9813);
evalcond[0]=(((r02*x9810))+(((-1.0)*r01*x9815))+((r00*x9812)));
evalcond[1]=((((-1.0)*r21*x9815))+sj2+((r22*x9810))+((r20*x9812)));
evalcond[2]=(cj2+((r12*x9810))+(((-1.0)*r11*x9815))+((r10*x9812)));
evalcond[3]=((((-1.0)*r21*x9814))+(((-1.0)*r22*x9813))+((r20*x9811)));
evalcond[4]=((((-1.0)*r12*x9813))+(((-1.0)*r11*x9814))+((r10*x9811)));
evalcond[5]=((1.0)+(((-1.0)*r02*x9813))+(((-1.0)*r01*x9814))+((r00*x9811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9816 = IKatan2WithCheck(IkReal((r02*sj2)),IkReal(((((-1.0)*cj5*r00*sj2))+((r01*sj2*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9816.valid){
continue;
}
CheckValue<IkReal> x9817=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x9817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9816.value)+(((1.5707963267949)*(x9817.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9818=IKsin(j4);
IkReal x9819=IKcos(j4);
IkReal x9820=(cj5*x9819);
IkReal x9821=(cj5*x9818);
IkReal x9822=((1.0)*x9818);
IkReal x9823=((1.0)*sj5*x9819);
IkReal x9824=(sj5*x9822);
evalcond[0]=((((-1.0)*r01*x9824))+((r00*x9821))+((r02*x9819)));
evalcond[1]=(((r20*x9821))+sj2+((r22*x9819))+(((-1.0)*r21*x9824)));
evalcond[2]=(cj2+((r12*x9819))+(((-1.0)*r11*x9824))+((r10*x9821)));
evalcond[3]=(((r20*x9820))+(((-1.0)*r21*x9823))+(((-1.0)*r22*x9822)));
evalcond[4]=((((-1.0)*r12*x9822))+(((-1.0)*r11*x9823))+((r10*x9820)));
evalcond[5]=((1.0)+(((-1.0)*r01*x9823))+(((-1.0)*r02*x9822))+((r00*x9820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9825=cj5*cj5;
IkReal x9826=r21*r21;
IkReal x9827=(cj5*r20);
IkReal x9828=(sj1*sj2);
IkReal x9829=(r21*sj5);
CheckValue<IkReal> x9830 = IKatan2WithCheck(IkReal((((x9827*x9828))+((cj1*r22))+(((-1.0)*x9828*x9829)))),IkReal((((cj1*x9829))+((r22*x9828))+(((-1.0)*cj1*x9827)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9830.valid){
continue;
}
CheckValue<IkReal> x9831=IKPowWithIntegerCheck(IKsign(((r22*r22)+((x9825*(r20*r20)))+(((-1.0)*x9825*x9826))+(((-2.0)*x9827*x9829))+x9826)),-1);
if(!x9831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9830.value)+(((1.5707963267949)*(x9831.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9832=IKcos(j4);
IkReal x9833=IKsin(j4);
IkReal x9834=(cj5*r10);
IkReal x9835=(cj5*r00);
IkReal x9836=(cj5*r20);
IkReal x9837=(cj1*sj2);
IkReal x9838=((1.0)*r11*sj5);
IkReal x9839=((1.0)*r01*sj5);
IkReal x9840=((1.0)*r21*sj5);
IkReal x9841=((1.0)*x9833);
evalcond[0]=(cj1+((x9832*x9836))+(((-1.0)*r22*x9841))+(((-1.0)*x9832*x9840)));
evalcond[1]=((((-1.0)*x9833*x9840))+((x9833*x9836))+((r22*x9832))+(((-1.0)*sj1*sj2)));
evalcond[2]=((((-1.0)*x9832*x9839))+(((-1.0)*r02*x9841))+((x9832*x9835))+((cj0*sj1)));
evalcond[3]=((((-1.0)*x9832*x9838))+(((-1.0)*r12*x9841))+((x9832*x9834))+((sj0*sj1)));
evalcond[4]=(((cj2*sj0))+((cj0*x9837))+((x9833*x9835))+((r02*x9832))+(((-1.0)*x9833*x9839)));
evalcond[5]=(((x9833*x9834))+((r12*x9832))+((sj0*x9837))+(((-1.0)*cj0*cj2))+(((-1.0)*x9833*x9838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9842=((1.0)*cj1);
IkReal x9843=(cj0*sj1);
IkReal x9844=((1.0)*sj5);
CheckValue<IkReal> x9845 = IKatan2WithCheck(IkReal((((cj1*r01*sj5))+(((-1.0)*r21*x9843*x9844))+((cj5*r20*x9843))+(((-1.0)*cj5*r00*x9842)))),IkReal(((((-1.0)*r02*x9842))+((r22*x9843)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9845.valid){
continue;
}
CheckValue<IkReal> x9846=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x9844)))),-1);
if(!x9846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9845.value)+(((1.5707963267949)*(x9846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9847=IKcos(j4);
IkReal x9848=IKsin(j4);
IkReal x9849=(cj5*r10);
IkReal x9850=(cj5*r00);
IkReal x9851=(cj5*r20);
IkReal x9852=(cj1*sj2);
IkReal x9853=((1.0)*r11*sj5);
IkReal x9854=((1.0)*r01*sj5);
IkReal x9855=((1.0)*r21*sj5);
IkReal x9856=((1.0)*x9848);
evalcond[0]=(((x9847*x9851))+cj1+(((-1.0)*x9847*x9855))+(((-1.0)*r22*x9856)));
evalcond[1]=((((-1.0)*x9848*x9855))+(((-1.0)*sj1*sj2))+((x9848*x9851))+((r22*x9847)));
evalcond[2]=(((x9847*x9850))+(((-1.0)*r02*x9856))+(((-1.0)*x9847*x9854))+((cj0*sj1)));
evalcond[3]=(((x9847*x9849))+((sj0*sj1))+(((-1.0)*x9847*x9853))+(((-1.0)*r12*x9856)));
evalcond[4]=((((-1.0)*x9848*x9854))+((cj2*sj0))+((cj0*x9852))+((r02*x9847))+((x9848*x9850)));
evalcond[5]=((((-1.0)*x9848*x9853))+((x9848*x9849))+((sj0*x9852))+(((-1.0)*cj0*cj2))+((r12*x9847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9857=(sj0*sj1);
IkReal x9858=((1.0)*cj1);
CheckValue<IkReal> x9859 = IKatan2WithCheck(IkReal((((cj5*r20*x9857))+((cj1*r11*sj5))+(((-1.0)*cj5*r10*x9858))+(((-1.0)*r21*sj5*x9857)))),IkReal((((r22*x9857))+(((-1.0)*r12*x9858)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9859.valid){
continue;
}
CheckValue<IkReal> x9860=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x9860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9859.value)+(((1.5707963267949)*(x9860.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9861=IKcos(j4);
IkReal x9862=IKsin(j4);
IkReal x9863=(cj5*r10);
IkReal x9864=(cj5*r00);
IkReal x9865=(cj5*r20);
IkReal x9866=(cj1*sj2);
IkReal x9867=((1.0)*r11*sj5);
IkReal x9868=((1.0)*r01*sj5);
IkReal x9869=((1.0)*r21*sj5);
IkReal x9870=((1.0)*x9862);
evalcond[0]=(((x9861*x9865))+cj1+(((-1.0)*x9861*x9869))+(((-1.0)*r22*x9870)));
evalcond[1]=(((r22*x9861))+(((-1.0)*sj1*sj2))+((x9862*x9865))+(((-1.0)*x9862*x9869)));
evalcond[2]=(((x9861*x9864))+(((-1.0)*r02*x9870))+(((-1.0)*x9861*x9868))+((cj0*sj1)));
evalcond[3]=(((x9861*x9863))+((sj0*sj1))+(((-1.0)*x9861*x9867))+(((-1.0)*r12*x9870)));
evalcond[4]=(((cj2*sj0))+((r02*x9861))+((x9862*x9864))+((cj0*x9866))+(((-1.0)*x9862*x9868)));
evalcond[5]=(((sj0*x9866))+((r12*x9861))+((x9862*x9863))+(((-1.0)*cj0*cj2))+(((-1.0)*x9862*x9867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9871=cj2*cj2;
IkReal x9872=((1.0)*cj5);
IkReal x9873=(cj1*cj2);
IkReal x9874=(r00*sj5);
IkReal x9875=((1.0)*r10*sj5);
CheckValue<IkReal> x9876=IKPowWithIntegerCheck(IKsign(((1.0)+((x9871*(cj1*cj1)))+(((-1.0)*x9871)))),-1);
if(!x9876.valid){
continue;
}
CheckValue<IkReal> x9877 = IKatan2WithCheck(IkReal((((cj5*r01*sj2))+(((-1.0)*x9873*x9875))+(((-1.0)*r11*x9872*x9873))+((sj2*x9874)))),IkReal(((((-1.0)*r01*x9872*x9873))+(((-1.0)*sj2*x9875))+(((-1.0)*r11*sj2*x9872))+(((-1.0)*x9873*x9874)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9877.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9876.value)))+(x9877.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x9878=IKcos(j0);
IkReal x9879=IKsin(j0);
IkReal x9880=(cj1*cj2);
IkReal x9881=(cj5*r01);
IkReal x9882=((0.42)*sj1);
IkReal x9883=(r00*sj5);
IkReal x9884=(cj5*r11);
IkReal x9885=(r10*sj5);
IkReal x9886=((0.00043624)*x9878);
IkReal x9887=((0.00043624)*x9879);
evalcond[0]=(((x9879*x9880))+((sj2*x9878))+x9885+x9884);
evalcond[1]=((((-1.0)*sj2*x9879))+((x9878*x9880))+x9883+x9881);
evalcond[2]=((((-1.0)*sj2*x9887))+(((-1.0)*x9886))+(((-0.4)*x9881))+(((-0.4)*x9883))+(((-1.0)*px))+((x9880*x9886))+((x9878*x9882)));
evalcond[3]=((((-1.0)*x9887))+((x9879*x9882))+(((-0.4)*x9884))+(((-0.4)*x9885))+(((-1.0)*py))+((sj2*x9886))+((x9880*x9887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9888=(sj0*sj1);
IkReal x9889=((1.0)*cj1);
IkReal x9890=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x9890;
j4eval[1]=IKsign(x9890);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10*x9889))+((cj5*r20*x9888))+((cj1*r11*sj5))+(((-1.0)*r21*sj5*x9888)))))+(IKabs((((r22*x9888))+(((-1.0)*r12*x9889))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9891=((1.0)*cj1);
IkReal x9892=(cj0*sj1);
IkReal x9893=((1.0)*sj5);
IkReal x9894=((((-1.0)*cj5*r11))+(((-1.0)*r10*x9893)));
j4eval[0]=x9894;
j4eval[1]=IKsign(x9894);
j4eval[2]=((IKabs((((cj1*r01*sj5))+(((-1.0)*cj5*r00*x9891))+(((-1.0)*r21*x9892*x9893))+((cj5*r20*x9892)))))+(IKabs((((r22*x9892))+(((-1.0)*r02*x9891))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9895=cj5*cj5;
IkReal x9896=r21*r21;
IkReal x9897=(cj5*r20);
IkReal x9898=(sj1*sj2);
IkReal x9899=(r21*sj5);
IkReal x9900=((r22*r22)+(((-1.0)*x9895*x9896))+((x9895*(r20*r20)))+x9896+(((-2.0)*x9897*x9899)));
j4eval[0]=x9900;
j4eval[1]=IKsign(x9900);
j4eval[2]=((IKabs((((cj1*x9899))+((r22*x9898))+(((-1.0)*cj1*x9897)))))+(IKabs(((((-1.0)*x9898*x9899))+((cj1*r22))+((x9897*x9898))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x9901=((-1.0)*r10);
IkReal x9903 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x9903)==0){
continue;
}
IkReal x9902=pow(x9903,-0.5);
CheckValue<IkReal> x9904 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x9901),IKFAST_ATAN2_MAGTHRESH);
if(!x9904.valid){
continue;
}
IkReal gconst60=((-1.0)*(x9904.value));
IkReal gconst61=(r11*x9902);
IkReal gconst62=(x9901*x9902);
CheckValue<IkReal> x9905 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x9905.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x9905.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9906=(sj0*sj1);
IkReal x9907=((1.0)*cj1);
CheckValue<IkReal> x9908=IKPowWithIntegerCheck(IKsign((((gconst61*r00))+((gconst62*r01)))),-1);
if(!x9908.valid){
continue;
}
CheckValue<IkReal> x9909 = IKatan2WithCheck(IkReal((((cj1*gconst61*r11))+(((-1.0)*gconst61*r21*x9906))+(((-1.0)*gconst62*r10*x9907))+((gconst62*r20*x9906)))),IkReal(((((-1.0)*r12*x9907))+((r22*x9906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9908.value)))+(x9909.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9910=IKcos(j4);
IkReal x9911=IKsin(j4);
IkReal x9912=(gconst62*r10);
IkReal x9913=(cj1*sj2);
IkReal x9914=((1.0)*gconst61*r11);
IkReal x9915=((1.0)*gconst61*r01);
IkReal x9916=((1.0)*gconst61*r21);
IkReal x9917=((1.0)*x9911);
IkReal x9918=(gconst62*x9910);
IkReal x9919=(gconst62*x9911);
evalcond[0]=(((r20*x9918))+cj1+(((-1.0)*r22*x9917))+(((-1.0)*x9910*x9916)));
evalcond[1]=(((r20*x9919))+(((-1.0)*sj1*sj2))+((r22*x9910))+(((-1.0)*x9911*x9916)));
evalcond[2]=(((r00*x9918))+(((-1.0)*r02*x9917))+(((-1.0)*x9910*x9915))+((cj0*sj1)));
evalcond[3]=(((x9910*x9912))+(((-1.0)*r12*x9917))+((sj0*sj1))+(((-1.0)*x9910*x9914)));
evalcond[4]=(((cj0*x9913))+((cj2*sj0))+((r00*x9919))+((r02*x9910))+(((-1.0)*x9911*x9915)));
evalcond[5]=(((r12*x9910))+((x9911*x9912))+((sj0*x9913))+(((-1.0)*cj0*cj2))+(((-1.0)*x9911*x9914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9920=((-1.0)*r11);
IkReal x9922 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x9922)==0){
continue;
}
IkReal x9921=pow(x9922,-0.5);
CheckValue<IkReal> x9923 = IKatan2WithCheck(IkReal(x9920),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x9923.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x9923.value))));
IkReal gconst64=(x9920*x9921);
IkReal gconst65=((1.0)*r10*x9921);
CheckValue<IkReal> x9924 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x9924.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9924.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9925=((1.0)*cj1);
IkReal x9926=(sj0*sj1);
CheckValue<IkReal> x9927=IKPowWithIntegerCheck(IKsign((((gconst64*r00))+((gconst65*r01)))),-1);
if(!x9927.valid){
continue;
}
CheckValue<IkReal> x9928 = IKatan2WithCheck(IkReal((((gconst65*r20*x9926))+((cj1*gconst64*r11))+(((-1.0)*gconst64*r21*x9926))+(((-1.0)*gconst65*r10*x9925)))),IkReal(((((-1.0)*r12*x9925))+((r22*x9926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9927.value)))+(x9928.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9929=IKcos(j4);
IkReal x9930=IKsin(j4);
IkReal x9931=(gconst65*r10);
IkReal x9932=(gconst65*r20);
IkReal x9933=(gconst65*r00);
IkReal x9934=(gconst64*r01);
IkReal x9935=(gconst64*r11);
IkReal x9936=(gconst64*r21);
IkReal x9937=(cj1*sj2);
IkReal x9938=((1.0)*x9930);
IkReal x9939=((1.0)*x9929);
evalcond[0]=(cj1+((x9929*x9932))+(((-1.0)*r22*x9938))+(((-1.0)*x9936*x9939)));
evalcond[1]=((((-1.0)*sj1*sj2))+(((-1.0)*x9936*x9938))+((x9930*x9932))+((r22*x9929)));
evalcond[2]=((((-1.0)*r02*x9938))+((x9929*x9933))+(((-1.0)*x9934*x9939))+((cj0*sj1)));
evalcond[3]=(((x9929*x9931))+((sj0*sj1))+(((-1.0)*x9935*x9939))+(((-1.0)*r12*x9938)));
evalcond[4]=(((cj2*sj0))+((r02*x9929))+((cj0*x9937))+((x9930*x9933))+(((-1.0)*x9934*x9938)));
evalcond[5]=(((sj0*x9937))+((x9930*x9931))+((r12*x9929))+(((-1.0)*x9935*x9938))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9941 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x9941)==0){
continue;
}
IkReal x9940=pow(x9941,-0.5);
CheckValue<IkReal> x9942 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x9942.valid){
continue;
}
IkReal gconst66=((-1.0)*(x9942.value));
IkReal gconst67=((-1.0)*r01*x9940);
IkReal gconst68=(r00*x9940);
CheckValue<IkReal> x9943 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x9943.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x9943.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9944=((1.0)*cj1);
IkReal x9945=(cj0*sj1);
IkReal x9946=((1.0)*gconst67);
CheckValue<IkReal> x9947=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9946))+(((-1.0)*gconst68*r11)))),-1);
if(!x9947.valid){
continue;
}
CheckValue<IkReal> x9948 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x9945*x9946))+((gconst68*r20*x9945))+(((-1.0)*gconst68*r00*x9944))+((cj1*gconst67*r01)))),IkReal((((r22*x9945))+(((-1.0)*r02*x9944)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9947.value)))+(x9948.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9949=IKcos(j4);
IkReal x9950=IKsin(j4);
IkReal x9951=((1.0)*gconst67);
IkReal x9952=(gconst68*r00);
IkReal x9953=(cj1*sj2);
IkReal x9954=(gconst68*x9949);
IkReal x9955=((1.0)*x9950);
IkReal x9956=(gconst68*x9950);
evalcond[0]=((((-1.0)*r21*x9949*x9951))+cj1+((r20*x9954))+(((-1.0)*r22*x9955)));
evalcond[1]=(((r22*x9949))+(((-1.0)*sj1*sj2))+((r20*x9956))+(((-1.0)*r21*x9950*x9951)));
evalcond[2]=((((-1.0)*r01*x9949*x9951))+(((-1.0)*r02*x9955))+((x9949*x9952))+((cj0*sj1)));
evalcond[3]=((((-1.0)*r11*x9949*x9951))+(((-1.0)*r12*x9955))+((sj0*sj1))+((r10*x9954)));
evalcond[4]=(((cj2*sj0))+(((-1.0)*r01*x9950*x9951))+((cj0*x9953))+((x9950*x9952))+((r02*x9949)));
evalcond[5]=((((-1.0)*r11*x9950*x9951))+((r12*x9949))+((sj0*x9953))+(((-1.0)*cj0*cj2))+((r10*x9956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9958 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x9958)==0){
continue;
}
IkReal x9957=pow(x9958,-0.5);
CheckValue<IkReal> x9959 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x9959.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x9959.value))));
IkReal gconst70=((1.0)*r01*x9957);
IkReal gconst71=((-1.0)*r00*x9957);
CheckValue<IkReal> x9960 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x9960.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9960.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x9963 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x9963.valid){
continue;
}
IkReal x9961=((1.0)*(x9963.value));
IkReal x9962=x9957;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x9961)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x9961)));
IkReal gconst70=((1.0)*r01*x9962);
IkReal gconst71=((-1.0)*r00*x9962);
IkReal x9964=r02*r02;
IkReal x9965=(cj1*r12);
IkReal x9966=(r22*sj0*sj1);
CheckValue<IkReal> x9970=IKPowWithIntegerCheck(((-1.0)+x9964),-1);
if(!x9970.valid){
continue;
}
IkReal x9967=x9970.value;
if((((1.0)+(((-1.0)*x9964)))) < -0.00001)
continue;
IkReal x9968=IKsqrt(((1.0)+(((-1.0)*x9964))));
IkReal x9969=(r02*x9967*x9968);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x9966*x9969))+((x9965*x9969)))))+(IKabs((x9966+(((-1.0)*x9965))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9971=((1.0)*gconst71);
IkReal x9972=(cj0*sj1);
IkReal x9973=((1.0)*gconst70);
CheckValue<IkReal> x9974=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9973))+(((-1.0)*r11*x9971)))),-1);
if(!x9974.valid){
continue;
}
CheckValue<IkReal> x9975 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x9972*x9973))+((gconst71*r20*x9972))+(((-1.0)*cj1*r00*x9971))+((cj1*gconst70*r01)))),IkReal((((r22*x9972))+(((-1.0)*cj1*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9974.value)))+(x9975.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9976=IKcos(j4);
IkReal x9977=IKsin(j4);
IkReal x9978=(gconst71*r00);
IkReal x9979=(cj1*sj2);
IkReal x9980=((1.0)*gconst70*r21);
IkReal x9981=((1.0)*gconst70*r01);
IkReal x9982=(gconst71*x9976);
IkReal x9983=((1.0)*gconst70*r11);
IkReal x9984=((1.0)*x9977);
IkReal x9985=(gconst71*x9977);
evalcond[0]=(cj1+(((-1.0)*r22*x9984))+(((-1.0)*x9976*x9980))+((r20*x9982)));
evalcond[1]=(((r22*x9976))+(((-1.0)*sj1*sj2))+(((-1.0)*x9977*x9980))+((r20*x9985)));
evalcond[2]=((((-1.0)*x9976*x9981))+((x9976*x9978))+(((-1.0)*r02*x9984))+((cj0*sj1)));
evalcond[3]=(((r10*x9982))+(((-1.0)*x9976*x9983))+((sj0*sj1))+(((-1.0)*r12*x9984)));
evalcond[4]=(((cj0*x9979))+((cj2*sj0))+((x9977*x9978))+(((-1.0)*x9977*x9981))+((r02*x9976)));
evalcond[5]=(((r10*x9985))+(((-1.0)*x9977*x9983))+((r12*x9976))+((sj0*x9979))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9986=(sj0*sj1);
IkReal x9987=((1.0)*cj1);
CheckValue<IkReal> x9988 = IKatan2WithCheck(IkReal((((gconst71*r20*x9986))+(((-1.0)*gconst71*r10*x9987))+(((-1.0)*gconst70*r21*x9986))+((cj1*gconst70*r11)))),IkReal((((r22*x9986))+(((-1.0)*r12*x9987)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9988.valid){
continue;
}
CheckValue<IkReal> x9989=IKPowWithIntegerCheck(IKsign((((gconst70*r00))+((gconst71*r01)))),-1);
if(!x9989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9988.value)+(((1.5707963267949)*(x9989.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9990=IKcos(j4);
IkReal x9991=IKsin(j4);
IkReal x9992=(gconst71*r00);
IkReal x9993=(cj1*sj2);
IkReal x9994=((1.0)*gconst70*r21);
IkReal x9995=((1.0)*gconst70*r01);
IkReal x9996=(gconst71*x9990);
IkReal x9997=((1.0)*gconst70*r11);
IkReal x9998=((1.0)*x9991);
IkReal x9999=(gconst71*x9991);
evalcond[0]=(cj1+(((-1.0)*r22*x9998))+(((-1.0)*x9990*x9994))+((r20*x9996)));
evalcond[1]=((((-1.0)*x9991*x9994))+((r22*x9990))+(((-1.0)*sj1*sj2))+((r20*x9999)));
evalcond[2]=((((-1.0)*x9990*x9995))+(((-1.0)*r02*x9998))+((x9990*x9992))+((cj0*sj1)));
evalcond[3]=((((-1.0)*x9990*x9997))+((r10*x9996))+((sj0*sj1))+(((-1.0)*r12*x9998)));
evalcond[4]=(((cj2*sj0))+(((-1.0)*x9991*x9995))+((cj0*x9993))+((x9991*x9992))+((r02*x9990)));
evalcond[5]=((((-1.0)*x9991*x9997))+((r10*x9999))+((r12*x9990))+((sj0*x9993))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x10000=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10000);
rxp1_1=(px*r21);
rxp1_2=(r11*x10000);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=IKsign(r02);
j4eval[2]=((IKabs(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2)))))+(IKabs((cj0*sj1))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10001=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10001);
rxp1_1=(px*r21);
rxp1_2=(r11*x10001);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10002=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10002);
rxp1_1=(px*r21);
rxp1_2=(r11*x10002);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10003=IKPowWithIntegerCheck(r02,-1);
if(!x10003.valid){
continue;
}
CheckValue<IkReal> x10004=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x10004.valid){
continue;
}
if( IKabs((cj0*sj1*(x10003.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*sj1*(x10004.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*sj1*(x10003.value)))+IKsqr(((-1.0)*sj0*sj1*(x10004.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*sj1*(x10003.value)), ((-1.0)*sj0*sj1*(x10004.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10005=IKcos(j4);
IkReal x10006=IKsin(j4);
IkReal x10007=(r11*sj5);
IkReal x10008=(cj5*r20);
IkReal x10009=(cj1*sj2);
IkReal x10010=(cj5*r10);
IkReal x10011=(r21*sj5);
IkReal x10012=((1.0)*x10006);
IkReal x10013=((1.0)*x10005);
evalcond[0]=((((-1.0)*r02*x10012))+((cj0*sj1)));
evalcond[1]=(((cj0*x10009))+((cj2*sj0))+((r02*x10005)));
evalcond[2]=(cj1+(((-1.0)*x10011*x10013))+((x10005*x10008)));
evalcond[3]=((((-1.0)*x10007*x10013))+((sj0*sj1))+((x10005*x10010)));
evalcond[4]=((((-1.0)*sj1*sj2))+((x10006*x10008))+(((-1.0)*x10011*x10012)));
evalcond[5]=(((x10006*x10010))+(((-1.0)*x10007*x10012))+(((-1.0)*cj0*cj2))+((sj0*x10009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10014=IKPowWithIntegerCheck(r02,-1);
if(!x10014.valid){
continue;
}
CheckValue<IkReal> x10015=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x10015.valid){
continue;
}
if( IKabs((cj0*sj1*(x10014.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj1*(x10015.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*sj1*(x10014.value)))+IKsqr(((-1.0)*cj1*(x10015.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*sj1*(x10014.value)), ((-1.0)*cj1*(x10015.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10016=IKcos(j4);
IkReal x10017=IKsin(j4);
IkReal x10018=(r11*sj5);
IkReal x10019=(cj5*r20);
IkReal x10020=(cj1*sj2);
IkReal x10021=(cj5*r10);
IkReal x10022=(r21*sj5);
IkReal x10023=((1.0)*x10017);
IkReal x10024=((1.0)*x10016);
evalcond[0]=((((-1.0)*r02*x10023))+((cj0*sj1)));
evalcond[1]=(((cj0*x10020))+((cj2*sj0))+((r02*x10016)));
evalcond[2]=(cj1+(((-1.0)*x10022*x10024))+((x10016*x10019)));
evalcond[3]=(((x10016*x10021))+(((-1.0)*x10018*x10024))+((sj0*sj1)));
evalcond[4]=((((-1.0)*sj1*sj2))+(((-1.0)*x10022*x10023))+((x10017*x10019)));
evalcond[5]=(((sj0*x10020))+((x10017*x10021))+(((-1.0)*x10018*x10023))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10025=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x10025.valid){
continue;
}
CheckValue<IkReal> x10026 = IKatan2WithCheck(IkReal((cj0*sj1)),IkReal(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10025.value)))+(x10026.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10027=IKcos(j4);
IkReal x10028=IKsin(j4);
IkReal x10029=(r11*sj5);
IkReal x10030=(cj5*r20);
IkReal x10031=(cj1*sj2);
IkReal x10032=(cj5*r10);
IkReal x10033=(r21*sj5);
IkReal x10034=((1.0)*x10028);
IkReal x10035=((1.0)*x10027);
evalcond[0]=((((-1.0)*r02*x10034))+((cj0*sj1)));
evalcond[1]=(((cj0*x10031))+((cj2*sj0))+((r02*x10027)));
evalcond[2]=(cj1+((x10027*x10030))+(((-1.0)*x10033*x10035)));
evalcond[3]=(((x10027*x10032))+((sj0*sj1))+(((-1.0)*x10029*x10035)));
evalcond[4]=((((-1.0)*sj1*sj2))+((x10028*x10030))+(((-1.0)*x10033*x10034)));
evalcond[5]=(((sj0*x10031))+((x10028*x10032))+(((-1.0)*x10029*x10034))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x10036=((1.0)*sj5);
IkReal x10037=((((-1.0)*cj5*r11))+(((-1.0)*r10*x10036)));
j4eval[0]=x10037;
j4eval[1]=IKsign(x10037);
j4eval[2]=((IKabs(((((-1.0)*r21*x10036))+((cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x10038=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x10038;
j4eval[1]=IKsign(x10038);
j4eval[2]=((IKabs((cj2*r02)))+(IKabs((((cj2*r01*sj5))+(((-1.0)*cj2*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x10039=((1.0)*cj5);
IkReal x10040=((((-1.0)*r10*sj5))+(((-1.0)*r11*x10039)));
j4eval[0]=x10040;
j4eval[1]=IKsign(x10040);
j4eval[2]=((IKabs((r02*sj2)))+(IKabs((((r01*sj2*sj5))+(((-1.0)*r00*sj2*x10039))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10041=((1.0)*cj5);
CheckValue<IkReal> x10042 = IKatan2WithCheck(IkReal((r02*sj2)),IkReal((((r01*sj2*sj5))+(((-1.0)*r00*sj2*x10041)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10042.valid){
continue;
}
CheckValue<IkReal> x10043=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10041))+(((-1.0)*r10*sj5)))),-1);
if(!x10043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10042.value)+(((1.5707963267949)*(x10043.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10044=IKsin(j4);
IkReal x10045=IKcos(j4);
IkReal x10046=((1.0)*sj5);
IkReal x10047=(cj5*x10045);
IkReal x10048=(cj5*x10044);
IkReal x10049=((1.0)*x10044);
evalcond[0]=(((r00*x10048))+((r02*x10045))+(((-1.0)*r01*x10044*x10046)));
evalcond[1]=((((-1.0)*r22*x10049))+((r20*x10047))+(((-1.0)*r21*x10045*x10046)));
evalcond[2]=((((-1.0)*r12*x10049))+((r10*x10047))+(((-1.0)*r11*x10045*x10046)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10049))+(((-1.0)*r01*x10045*x10046))+((r00*x10047)));
evalcond[4]=((((-1.0)*sj2))+(((-1.0)*r21*x10044*x10046))+((r20*x10048))+((r22*x10045)));
evalcond[5]=((((-1.0)*r11*x10044*x10046))+((r10*x10048))+((r12*x10045))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10050 = IKatan2WithCheck(IkReal((cj2*r02)),IkReal((((cj2*r01*sj5))+(((-1.0)*cj2*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10050.valid){
continue;
}
CheckValue<IkReal> x10051=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x10051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10050.value)+(((1.5707963267949)*(x10051.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10052=IKsin(j4);
IkReal x10053=IKcos(j4);
IkReal x10054=((1.0)*sj5);
IkReal x10055=(cj5*x10053);
IkReal x10056=(cj5*x10052);
IkReal x10057=((1.0)*x10052);
evalcond[0]=((((-1.0)*r01*x10052*x10054))+((r00*x10056))+((r02*x10053)));
evalcond[1]=(((r20*x10055))+(((-1.0)*r22*x10057))+(((-1.0)*r21*x10053*x10054)));
evalcond[2]=(((r10*x10055))+(((-1.0)*r12*x10057))+(((-1.0)*r11*x10053*x10054)));
evalcond[3]=((1.0)+(((-1.0)*r01*x10053*x10054))+((r00*x10055))+(((-1.0)*r02*x10057)));
evalcond[4]=((((-1.0)*sj2))+((r20*x10056))+(((-1.0)*r21*x10052*x10054))+((r22*x10053)));
evalcond[5]=(((r10*x10056))+(((-1.0)*r11*x10052*x10054))+(((-1.0)*cj2))+((r12*x10053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10058=((1.0)*sj5);
CheckValue<IkReal> x10059 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*x10058)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x10059.valid){
continue;
}
CheckValue<IkReal> x10060=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x10058)))),-1);
if(!x10060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10059.value)+(((1.5707963267949)*(x10060.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10061=IKsin(j4);
IkReal x10062=IKcos(j4);
IkReal x10063=((1.0)*sj5);
IkReal x10064=(cj5*x10062);
IkReal x10065=(cj5*x10061);
IkReal x10066=((1.0)*x10061);
evalcond[0]=(((r00*x10065))+((r02*x10062))+(((-1.0)*r01*x10061*x10063)));
evalcond[1]=(((r20*x10064))+(((-1.0)*r21*x10062*x10063))+(((-1.0)*r22*x10066)));
evalcond[2]=(((r10*x10064))+(((-1.0)*r11*x10062*x10063))+(((-1.0)*r12*x10066)));
evalcond[3]=((1.0)+((r00*x10064))+(((-1.0)*r01*x10062*x10063))+(((-1.0)*r02*x10066)));
evalcond[4]=((((-1.0)*sj2))+(((-1.0)*r21*x10061*x10063))+((r20*x10065))+((r22*x10062)));
evalcond[5]=(((r10*x10065))+((r12*x10062))+(((-1.0)*r11*x10061*x10063))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x10067=((1.0)*cj5);
IkReal x10068=((((-1.0)*r21*x10067))+(((-1.0)*r20*sj5)));
j4eval[0]=x10068;
j4eval[1]=IKsign(x10068);
j4eval[2]=((IKabs(((((-1.0)*cj2*r00*x10067))+((cj2*r01*sj5)))))+(IKabs((cj2*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x10069=cj5*cj5;
IkReal x10070=r01*r01;
IkReal x10071=(r01*sj5);
IkReal x10072=(cj5*r00);
IkReal x10073=((((-1.0)*(r02*r02)))+(((2.0)*x10071*x10072))+(((-1.0)*x10069*(r00*r00)))+((x10069*x10070))+(((-1.0)*x10070)));
j4eval[0]=x10073;
j4eval[1]=IKsign(x10073);
j4eval[2]=((IKabs(r02))+(IKabs((x10071+(((-1.0)*x10072))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x10074=cj5*cj5;
IkReal x10075=(r11*r21);
IkReal x10076=(cj5*r20);
IkReal x10077=(r21*sj5);
IkReal x10078=((((-1.0)*r12*r22))+((cj5*r10*x10077))+((r11*sj5*x10076))+((x10074*x10075))+(((-1.0)*r10*r20*x10074))+(((-1.0)*x10075)));
j4eval[0]=x10078;
j4eval[1]=((IKabs((cj2*r22)))+(IKabs(((((-1.0)*cj2*x10077))+((cj2*x10076))))));
j4eval[2]=IKsign(x10078);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10079=cj5*cj5;
IkReal x10080=(r11*r21);
IkReal x10081=(cj5*r20);
IkReal x10082=(r21*sj5);
CheckValue<IkReal> x10083 = IKatan2WithCheck(IkReal((((cj2*x10081))+(((-1.0)*cj2*x10082)))),IkReal((cj2*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10083.valid){
continue;
}
CheckValue<IkReal> x10084=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((r11*sj5*x10081))+((cj5*r10*x10082))+(((-1.0)*r10*r20*x10079))+((x10079*x10080))+(((-1.0)*x10080)))),-1);
if(!x10084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10083.value)+(((1.5707963267949)*(x10084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10085=IKsin(j4);
IkReal x10086=IKcos(j4);
IkReal x10087=(r21*sj5);
IkReal x10088=((1.0)*r11*sj5);
IkReal x10089=(cj5*x10086);
IkReal x10090=((1.0)*r01*sj5);
IkReal x10091=(cj5*x10085);
IkReal x10092=((1.0)*x10085);
evalcond[0]=((((-1.0)*x10085*x10090))+((r02*x10086))+((r00*x10091)));
evalcond[1]=(cj2+(((-1.0)*x10085*x10088))+((r10*x10091))+((r12*x10086)));
evalcond[2]=((((-1.0)*x10086*x10087))+((r20*x10089))+(((-1.0)*r22*x10092)));
evalcond[3]=((((-1.0)*x10086*x10088))+(((-1.0)*r12*x10092))+((r10*x10089)));
evalcond[4]=((-1.0)+((r00*x10089))+(((-1.0)*x10086*x10090))+(((-1.0)*r02*x10092)));
evalcond[5]=((((-1.0)*sj2))+(((-1.0)*x10087*x10092))+((r22*x10086))+((r20*x10091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10093=cj5*cj5;
IkReal x10094=r01*r01;
IkReal x10095=(r01*sj5);
IkReal x10096=(cj5*r00);
CheckValue<IkReal> x10097 = IKatan2WithCheck(IkReal(r02),IkReal((x10095+(((-1.0)*x10096)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10097.valid){
continue;
}
CheckValue<IkReal> x10098=IKPowWithIntegerCheck(IKsign((((x10093*x10094))+(((-1.0)*(r02*r02)))+(((2.0)*x10095*x10096))+(((-1.0)*x10093*(r00*r00)))+(((-1.0)*x10094)))),-1);
if(!x10098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10097.value)+(((1.5707963267949)*(x10098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10099=IKsin(j4);
IkReal x10100=IKcos(j4);
IkReal x10101=(r21*sj5);
IkReal x10102=((1.0)*r11*sj5);
IkReal x10103=(cj5*x10100);
IkReal x10104=((1.0)*r01*sj5);
IkReal x10105=(cj5*x10099);
IkReal x10106=((1.0)*x10099);
evalcond[0]=(((r00*x10105))+((r02*x10100))+(((-1.0)*x10099*x10104)));
evalcond[1]=(cj2+((r10*x10105))+((r12*x10100))+(((-1.0)*x10099*x10102)));
evalcond[2]=(((r20*x10103))+(((-1.0)*r22*x10106))+(((-1.0)*x10100*x10101)));
evalcond[3]=((((-1.0)*r12*x10106))+(((-1.0)*x10100*x10102))+((r10*x10103)));
evalcond[4]=((-1.0)+((r00*x10103))+(((-1.0)*x10100*x10104))+(((-1.0)*r02*x10106)));
evalcond[5]=((((-1.0)*sj2))+((r20*x10105))+(((-1.0)*x10101*x10106))+((r22*x10100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10107=((1.0)*cj5);
CheckValue<IkReal> x10108 = IKatan2WithCheck(IkReal((cj2*r02)),IkReal((((cj2*r01*sj5))+(((-1.0)*cj2*r00*x10107)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10108.valid){
continue;
}
CheckValue<IkReal> x10109=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10107))+(((-1.0)*r20*sj5)))),-1);
if(!x10109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10108.value)+(((1.5707963267949)*(x10109.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10110=IKsin(j4);
IkReal x10111=IKcos(j4);
IkReal x10112=(r21*sj5);
IkReal x10113=((1.0)*r11*sj5);
IkReal x10114=(cj5*x10111);
IkReal x10115=((1.0)*r01*sj5);
IkReal x10116=(cj5*x10110);
IkReal x10117=((1.0)*x10110);
evalcond[0]=((((-1.0)*x10110*x10115))+((r00*x10116))+((r02*x10111)));
evalcond[1]=((((-1.0)*x10110*x10113))+cj2+((r12*x10111))+((r10*x10116)));
evalcond[2]=(((r20*x10114))+(((-1.0)*r22*x10117))+(((-1.0)*x10111*x10112)));
evalcond[3]=((((-1.0)*r12*x10117))+((r10*x10114))+(((-1.0)*x10111*x10113)));
evalcond[4]=((-1.0)+((r00*x10114))+(((-1.0)*r02*x10117))+(((-1.0)*x10111*x10115)));
evalcond[5]=((((-1.0)*sj2))+(((-1.0)*x10112*x10117))+((r20*x10116))+((r22*x10111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x10118=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x10118;
j4eval[1]=IKsign(x10118);
j4eval[2]=((IKabs((r02*sj2)))+(IKabs(((((-1.0)*cj5*r00*sj2))+((r01*sj2*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x10119=cj5*cj5;
IkReal x10120=r01*r01;
IkReal x10121=(r01*sj5);
IkReal x10122=(cj5*r00);
IkReal x10123=((((-1.0)*x10119*(r00*r00)))+((x10119*x10120))+(((-1.0)*(r02*r02)))+(((2.0)*x10121*x10122))+(((-1.0)*x10120)));
j4eval[0]=x10123;
j4eval[1]=IKsign(x10123);
j4eval[2]=((IKabs(r02))+(IKabs((x10121+(((-1.0)*x10122))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=0;
sj0=0;
cj0=1.0;
IkReal x10124=r21*r21;
IkReal x10125=cj5*cj5;
IkReal x10126=(cj5*r20);
IkReal x10127=(r21*sj5);
IkReal x10128=((((2.0)*x10126*x10127))+(((-1.0)*x10125*(r20*r20)))+((x10124*x10125))+(((-1.0)*x10124))+(((-1.0)*(r22*r22))));
j4eval[0]=x10128;
j4eval[1]=((IKabs(((((-1.0)*sj2*x10127))+((sj2*x10126)))))+(IKabs((r22*sj2))));
j4eval[2]=IKsign(x10128);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10129=r21*r21;
IkReal x10130=cj5*cj5;
IkReal x10131=(cj5*r20);
IkReal x10132=(r21*sj5);
CheckValue<IkReal> x10133 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x10132))+((sj2*x10131)))),IkReal((r22*sj2)),IKFAST_ATAN2_MAGTHRESH);
if(!x10133.valid){
continue;
}
CheckValue<IkReal> x10134=IKPowWithIntegerCheck(IKsign((((x10129*x10130))+(((-1.0)*x10130*(r20*r20)))+(((2.0)*x10131*x10132))+(((-1.0)*x10129))+(((-1.0)*(r22*r22))))),-1);
if(!x10134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10133.value)+(((1.5707963267949)*(x10134.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10135=IKsin(j4);
IkReal x10136=IKcos(j4);
IkReal x10137=(cj5*x10136);
IkReal x10138=(cj5*x10135);
IkReal x10139=((1.0)*x10135);
IkReal x10140=((1.0)*sj5*x10136);
IkReal x10141=(sj5*x10139);
evalcond[0]=(((r02*x10136))+((r00*x10138))+(((-1.0)*r01*x10141)));
evalcond[1]=(((r20*x10138))+sj2+(((-1.0)*r21*x10141))+((r22*x10136)));
evalcond[2]=(((r20*x10137))+(((-1.0)*r21*x10140))+(((-1.0)*r22*x10139)));
evalcond[3]=(((r10*x10137))+(((-1.0)*r11*x10140))+(((-1.0)*r12*x10139)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x10139))+((r00*x10137))+(((-1.0)*r01*x10140)));
evalcond[5]=(((r10*x10138))+(((-1.0)*r11*x10141))+((r12*x10136))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10142=cj5*cj5;
IkReal x10143=r01*r01;
IkReal x10144=(r01*sj5);
IkReal x10145=(cj5*r00);
CheckValue<IkReal> x10146=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x10142*x10143))+(((-1.0)*x10143))+(((-1.0)*x10142*(r00*r00)))+(((2.0)*x10144*x10145)))),-1);
if(!x10146.valid){
continue;
}
CheckValue<IkReal> x10147 = IKatan2WithCheck(IkReal(r02),IkReal((x10144+(((-1.0)*x10145)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10146.value)))+(x10147.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10148=IKsin(j4);
IkReal x10149=IKcos(j4);
IkReal x10150=(cj5*x10149);
IkReal x10151=(cj5*x10148);
IkReal x10152=((1.0)*x10148);
IkReal x10153=((1.0)*sj5*x10149);
IkReal x10154=(sj5*x10152);
evalcond[0]=(((r02*x10149))+(((-1.0)*r01*x10154))+((r00*x10151)));
evalcond[1]=(sj2+(((-1.0)*r21*x10154))+((r22*x10149))+((r20*x10151)));
evalcond[2]=((((-1.0)*r21*x10153))+(((-1.0)*r22*x10152))+((r20*x10150)));
evalcond[3]=(((r10*x10150))+(((-1.0)*r11*x10153))+(((-1.0)*r12*x10152)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x10152))+(((-1.0)*r01*x10153))+((r00*x10150)));
evalcond[5]=(((r12*x10149))+((r10*x10151))+(((-1.0)*r11*x10154))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10155 = IKatan2WithCheck(IkReal((r02*sj2)),IkReal(((((-1.0)*cj5*r00*sj2))+((r01*sj2*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10155.valid){
continue;
}
CheckValue<IkReal> x10156=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x10156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10155.value)+(((1.5707963267949)*(x10156.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10157=IKsin(j4);
IkReal x10158=IKcos(j4);
IkReal x10159=(cj5*x10158);
IkReal x10160=(cj5*x10157);
IkReal x10161=((1.0)*x10157);
IkReal x10162=((1.0)*sj5*x10158);
IkReal x10163=(sj5*x10161);
evalcond[0]=((((-1.0)*r01*x10163))+((r02*x10158))+((r00*x10160)));
evalcond[1]=((((-1.0)*r21*x10163))+sj2+((r20*x10160))+((r22*x10158)));
evalcond[2]=((((-1.0)*r21*x10162))+(((-1.0)*r22*x10161))+((r20*x10159)));
evalcond[3]=((((-1.0)*r11*x10162))+(((-1.0)*r12*x10161))+((r10*x10159)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x10162))+(((-1.0)*r02*x10161))+((r00*x10159)));
evalcond[5]=(((r12*x10158))+((r10*x10160))+(((-1.0)*r11*x10163))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x10164=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x10164;
j4eval[1]=IKsign(x10164);
j4eval[2]=((IKabs((r02*sj2)))+(IKabs(((((-1.0)*cj5*r00*sj2))+((r01*sj2*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x10165=((1.0)*cj5);
IkReal x10166=((((-1.0)*r21*x10165))+(((-1.0)*r20*sj5)));
j4eval[0]=x10166;
j4eval[1]=IKsign(x10166);
j4eval[2]=((IKabs((cj2*r02)))+(IKabs(((((-1.0)*cj2*r00*x10165))+((cj2*r01*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j0=3.14159265358979;
sj0=0;
cj0=-1.0;
IkReal x10167=((1.0)*sj2);
IkReal x10168=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x10168;
j4eval[1]=IKsign(x10168);
j4eval[2]=((IKabs((((cj5*r10*sj2))+(((-1.0)*r11*sj5*x10167))+(((-1.0)*cj2*cj5*r20))+((cj2*r21*sj5)))))+(IKabs(((((-1.0)*r12*x10167))+((cj2*r22))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10169=((1.0)*sj2);
CheckValue<IkReal> x10170 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x10169))+((cj2*r22)))),IkReal((((cj5*r10*sj2))+(((-1.0)*r11*sj5*x10169))+(((-1.0)*cj2*cj5*r20))+((cj2*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10170.valid){
continue;
}
CheckValue<IkReal> x10171=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x10171.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10170.value)+(((1.5707963267949)*(x10171.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10172=IKsin(j4);
IkReal x10173=IKcos(j4);
IkReal x10174=(cj5*x10173);
IkReal x10175=(cj5*x10172);
IkReal x10176=((1.0)*x10172);
IkReal x10177=((1.0)*sj5*x10173);
IkReal x10178=(sj5*x10176);
evalcond[0]=(((r02*x10173))+((r00*x10175))+(((-1.0)*r01*x10178)));
evalcond[1]=(sj2+(((-1.0)*r21*x10178))+((r22*x10173))+((r20*x10175)));
evalcond[2]=(((r10*x10175))+cj2+((r12*x10173))+(((-1.0)*r11*x10178)));
evalcond[3]=((((-1.0)*r22*x10176))+(((-1.0)*r21*x10177))+((r20*x10174)));
evalcond[4]=(((r10*x10174))+(((-1.0)*r12*x10176))+(((-1.0)*r11*x10177)));
evalcond[5]=((1.0)+((r00*x10174))+(((-1.0)*r01*x10177))+(((-1.0)*r02*x10176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10179=((1.0)*cj5);
CheckValue<IkReal> x10180=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10179))+(((-1.0)*r20*sj5)))),-1);
if(!x10180.valid){
continue;
}
CheckValue<IkReal> x10181 = IKatan2WithCheck(IkReal((cj2*r02)),IkReal(((((-1.0)*cj2*r00*x10179))+((cj2*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10180.value)))+(x10181.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10182=IKsin(j4);
IkReal x10183=IKcos(j4);
IkReal x10184=(cj5*x10183);
IkReal x10185=(cj5*x10182);
IkReal x10186=((1.0)*x10182);
IkReal x10187=((1.0)*sj5*x10183);
IkReal x10188=(sj5*x10186);
evalcond[0]=(((r02*x10183))+((r00*x10185))+(((-1.0)*r01*x10188)));
evalcond[1]=(sj2+((r22*x10183))+(((-1.0)*r21*x10188))+((r20*x10185)));
evalcond[2]=(((r10*x10185))+cj2+((r12*x10183))+(((-1.0)*r11*x10188)));
evalcond[3]=((((-1.0)*r21*x10187))+((r20*x10184))+(((-1.0)*r22*x10186)));
evalcond[4]=(((r10*x10184))+(((-1.0)*r12*x10186))+(((-1.0)*r11*x10187)));
evalcond[5]=((1.0)+(((-1.0)*r02*x10186))+((r00*x10184))+(((-1.0)*r01*x10187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10189 = IKatan2WithCheck(IkReal((r02*sj2)),IkReal(((((-1.0)*cj5*r00*sj2))+((r01*sj2*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10189.valid){
continue;
}
CheckValue<IkReal> x10190=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x10190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10189.value)+(((1.5707963267949)*(x10190.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10191=IKsin(j4);
IkReal x10192=IKcos(j4);
IkReal x10193=(cj5*x10192);
IkReal x10194=(cj5*x10191);
IkReal x10195=((1.0)*x10191);
IkReal x10196=((1.0)*sj5*x10192);
IkReal x10197=(sj5*x10195);
evalcond[0]=(((r02*x10192))+((r00*x10194))+(((-1.0)*r01*x10197)));
evalcond[1]=(sj2+(((-1.0)*r21*x10197))+((r22*x10192))+((r20*x10194)));
evalcond[2]=(cj2+((r10*x10194))+((r12*x10192))+(((-1.0)*r11*x10197)));
evalcond[3]=((((-1.0)*r21*x10196))+((r20*x10193))+(((-1.0)*r22*x10195)));
evalcond[4]=(((r10*x10193))+(((-1.0)*r11*x10196))+(((-1.0)*r12*x10195)));
evalcond[5]=((1.0)+(((-1.0)*r02*x10195))+((r00*x10193))+(((-1.0)*r01*x10196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10198=cj5*cj5;
IkReal x10199=r21*r21;
IkReal x10200=(cj5*r20);
IkReal x10201=(sj1*sj2);
IkReal x10202=(r21*sj5);
CheckValue<IkReal> x10203 = IKatan2WithCheck(IkReal((((x10200*x10201))+(((-1.0)*x10201*x10202))+((cj1*r22)))),IkReal((((r22*x10201))+((cj1*x10202))+(((-1.0)*cj1*x10200)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10203.valid){
continue;
}
CheckValue<IkReal> x10204=IKPowWithIntegerCheck(IKsign(((r22*r22)+((x10198*(r20*r20)))+x10199+(((-2.0)*x10200*x10202))+(((-1.0)*x10198*x10199)))),-1);
if(!x10204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10203.value)+(((1.5707963267949)*(x10204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10205=IKcos(j4);
IkReal x10206=IKsin(j4);
IkReal x10207=(cj5*r10);
IkReal x10208=(cj5*r00);
IkReal x10209=(cj5*r20);
IkReal x10210=(cj1*sj2);
IkReal x10211=((1.0)*r11*sj5);
IkReal x10212=((1.0)*r01*sj5);
IkReal x10213=((1.0)*r21*sj5);
IkReal x10214=((1.0)*x10206);
evalcond[0]=((((-1.0)*x10205*x10213))+cj1+(((-1.0)*r22*x10214))+((x10205*x10209)));
evalcond[1]=(((r22*x10205))+(((-1.0)*sj1*sj2))+((x10206*x10209))+(((-1.0)*x10206*x10213)));
evalcond[2]=((((-1.0)*x10205*x10212))+((x10205*x10208))+(((-1.0)*r02*x10214))+((cj0*sj1)));
evalcond[3]=((((-1.0)*x10205*x10211))+((x10205*x10207))+((sj0*sj1))+(((-1.0)*r12*x10214)));
evalcond[4]=(((cj2*sj0))+((r02*x10205))+((x10206*x10208))+((cj0*x10210))+(((-1.0)*x10206*x10212)));
evalcond[5]=(((sj0*x10210))+((x10206*x10207))+(((-1.0)*cj0*cj2))+((r12*x10205))+(((-1.0)*x10206*x10211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10215=((1.0)*cj1);
IkReal x10216=(cj0*sj1);
IkReal x10217=((1.0)*sj5);
CheckValue<IkReal> x10218=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x10217)))),-1);
if(!x10218.valid){
continue;
}
CheckValue<IkReal> x10219 = IKatan2WithCheck(IkReal((((cj1*r01*sj5))+((cj5*r20*x10216))+(((-1.0)*r21*x10216*x10217))+(((-1.0)*cj5*r00*x10215)))),IkReal(((((-1.0)*r02*x10215))+((r22*x10216)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10218.value)))+(x10219.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10220=IKcos(j4);
IkReal x10221=IKsin(j4);
IkReal x10222=(cj5*r10);
IkReal x10223=(cj5*r00);
IkReal x10224=(cj5*r20);
IkReal x10225=(cj1*sj2);
IkReal x10226=((1.0)*r11*sj5);
IkReal x10227=((1.0)*r01*sj5);
IkReal x10228=((1.0)*r21*sj5);
IkReal x10229=((1.0)*x10221);
evalcond[0]=((((-1.0)*x10220*x10228))+cj1+(((-1.0)*r22*x10229))+((x10220*x10224)));
evalcond[1]=(((r22*x10220))+(((-1.0)*sj1*sj2))+((x10221*x10224))+(((-1.0)*x10221*x10228)));
evalcond[2]=((((-1.0)*x10220*x10227))+(((-1.0)*r02*x10229))+((x10220*x10223))+((cj0*sj1)));
evalcond[3]=((((-1.0)*x10220*x10226))+((sj0*sj1))+(((-1.0)*r12*x10229))+((x10220*x10222)));
evalcond[4]=(((cj2*sj0))+((cj0*x10225))+((r02*x10220))+((x10221*x10223))+(((-1.0)*x10221*x10227)));
evalcond[5]=(((r12*x10220))+((sj0*x10225))+((x10221*x10222))+(((-1.0)*x10221*x10226))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10230=(sj0*sj1);
IkReal x10231=((1.0)*cj1);
CheckValue<IkReal> x10232 = IKatan2WithCheck(IkReal((((cj5*r20*x10230))+(((-1.0)*r21*sj5*x10230))+((cj1*r11*sj5))+(((-1.0)*cj5*r10*x10231)))),IkReal((((r22*x10230))+(((-1.0)*r12*x10231)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10232.valid){
continue;
}
CheckValue<IkReal> x10233=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x10233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10232.value)+(((1.5707963267949)*(x10233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10234=IKcos(j4);
IkReal x10235=IKsin(j4);
IkReal x10236=(cj5*r10);
IkReal x10237=(cj5*r00);
IkReal x10238=(cj5*r20);
IkReal x10239=(cj1*sj2);
IkReal x10240=((1.0)*r11*sj5);
IkReal x10241=((1.0)*r01*sj5);
IkReal x10242=((1.0)*r21*sj5);
IkReal x10243=((1.0)*x10235);
evalcond[0]=((((-1.0)*x10234*x10242))+cj1+((x10234*x10238))+(((-1.0)*r22*x10243)));
evalcond[1]=((((-1.0)*x10235*x10242))+((r22*x10234))+(((-1.0)*sj1*sj2))+((x10235*x10238)));
evalcond[2]=((((-1.0)*x10234*x10241))+((x10234*x10237))+((cj0*sj1))+(((-1.0)*r02*x10243)));
evalcond[3]=((((-1.0)*x10234*x10240))+((x10234*x10236))+((sj0*sj1))+(((-1.0)*r12*x10243)));
evalcond[4]=(((cj2*sj0))+(((-1.0)*x10235*x10241))+((r02*x10234))+((x10235*x10237))+((cj0*x10239)));
evalcond[5]=(((sj0*x10239))+(((-1.0)*x10235*x10240))+((x10235*x10236))+(((-1.0)*cj0*cj2))+((r12*x10234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10244=cj5*cj5;
IkReal x10245=r21*r21;
IkReal x10246=(cj5*r20);
IkReal x10247=(sj1*sj2);
IkReal x10248=(r21*sj5);
CheckValue<IkReal> x10249=IKPowWithIntegerCheck(IKsign(((r22*r22)+((x10244*(r20*r20)))+(((-1.0)*x10244*x10245))+x10245+(((-2.0)*x10246*x10248)))),-1);
if(!x10249.valid){
continue;
}
CheckValue<IkReal> x10250 = IKatan2WithCheck(IkReal(((((-1.0)*x10247*x10248))+((x10246*x10247))+((cj1*r22)))),IkReal(((((-1.0)*cj1*x10246))+((r22*x10247))+((cj1*x10248)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10249.value)))+(x10250.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x10251=IKcos(j4);
IkReal x10252=IKsin(j4);
IkReal x10253=(cj5*r20);
IkReal x10254=((1.0)*r21*sj5);
evalcond[0]=((((-1.0)*x10251*x10254))+cj1+((x10251*x10253))+(((-1.0)*r22*x10252)));
evalcond[1]=((((-1.0)*x10252*x10254))+((r22*x10251))+(((-1.0)*sj1*sj2))+((x10252*x10253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x10255=cj2*cj2;
IkReal x10256=((1.0)*cj5);
IkReal x10257=(cj1*cj2);
IkReal x10258=(r00*sj5);
IkReal x10259=((1.0)*r10*sj5);
IkReal x10260=((1.0)+((x10255*(cj1*cj1)))+(((-1.0)*x10255)));
j0eval[0]=x10260;
j0eval[1]=IKsign(x10260);
j0eval[2]=((IKabs((((cj5*r01*sj2))+((sj2*x10258))+(((-1.0)*x10257*x10259))+(((-1.0)*r11*x10256*x10257)))))+(IKabs(((((-1.0)*r11*sj2*x10256))+(((-1.0)*r01*x10256*x10257))+(((-1.0)*sj2*x10259))+(((-1.0)*x10257*x10258))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=sj1;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=cj2;
j0eval[2]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j0eval[0]=sj2;
j0eval[1]=IKsign(sj2);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j0eval[0]=cj2;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10261=((1.0)*cj5);
CheckValue<IkReal> x10262=IKPowWithIntegerCheck(cj2,-1);
if(!x10262.valid){
continue;
}
CheckValue<IkReal> x10263=IKPowWithIntegerCheck(sj2,-1);
if(!x10263.valid){
continue;
}
if( IKabs(((x10262.value)*(((((-1.0)*cj4*r02))+(((-1.0)*r00*sj4*x10261))+((r01*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10263.value)*(((((-1.0)*r10*sj5))+(((-1.0)*r11*x10261)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10262.value)*(((((-1.0)*cj4*r02))+(((-1.0)*r00*sj4*x10261))+((r01*sj4*sj5))))))+IKsqr(((x10263.value)*(((((-1.0)*r10*sj5))+(((-1.0)*r11*x10261))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x10262.value)*(((((-1.0)*cj4*r02))+(((-1.0)*r00*sj4*x10261))+((r01*sj4*sj5))))), ((x10263.value)*(((((-1.0)*r10*sj5))+(((-1.0)*r11*x10261))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x10264=IKcos(j0);
IkReal x10265=IKsin(j0);
IkReal x10266=(cj5*r10);
IkReal x10267=(cj5*r00);
IkReal x10268=(cj5*r01);
IkReal x10269=((1.0)*sj4);
IkReal x10270=(r01*sj5);
IkReal x10271=(r00*sj5);
IkReal x10272=(cj5*r11);
IkReal x10273=(r11*sj5);
IkReal x10274=((1.0)*cj4);
IkReal x10275=(r10*sj5);
IkReal x10276=(sj2*x10264);
IkReal x10277=(sj2*x10265);
evalcond[0]=(x10275+x10276+x10272);
evalcond[1]=(x10268+x10271+(((-1.0)*x10277)));
evalcond[2]=(((cj4*x10267))+(((-1.0)*r02*x10269))+x10264+(((-1.0)*x10270*x10274)));
evalcond[3]=((((-1.0)*x10273*x10274))+((cj4*x10266))+(((-1.0)*r12*x10269))+x10265);
evalcond[4]=(((cj2*x10265))+(((-1.0)*x10269*x10270))+((sj4*x10267))+((cj4*r02)));
evalcond[5]=((((-1.0)*x10269*x10273))+((sj4*x10266))+(((-1.0)*cj2*x10264))+((cj4*r12)));
evalcond[6]=((((-1.0)*px))+(((-0.4)*x10268))+(((-0.00043624)*x10277))+(((-0.4)*x10271))+(((0.41956376)*x10264)));
evalcond[7]=((((0.00043624)*x10276))+(((-1.0)*py))+(((-0.4)*x10275))+(((-0.4)*x10272))+(((0.41956376)*x10265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x10278=IKPowWithIntegerCheck(sj2,-1);
if(!x10278.valid){
continue;
}
if( IKabs(((x10278.value)*((((r00*sj5))+((cj5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*cj5*r00))+((r02*sj4))+((cj4*r01*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10278.value)*((((r00*sj5))+((cj5*r01))))))+IKsqr(((((-1.0)*cj4*cj5*r00))+((r02*sj4))+((cj4*r01*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x10278.value)*((((r00*sj5))+((cj5*r01))))), ((((-1.0)*cj4*cj5*r00))+((r02*sj4))+((cj4*r01*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x10279=IKcos(j0);
IkReal x10280=IKsin(j0);
IkReal x10281=(cj5*r10);
IkReal x10282=(cj5*r00);
IkReal x10283=(cj5*r01);
IkReal x10284=((1.0)*sj4);
IkReal x10285=(r01*sj5);
IkReal x10286=(r00*sj5);
IkReal x10287=(cj5*r11);
IkReal x10288=(r11*sj5);
IkReal x10289=((1.0)*cj4);
IkReal x10290=(r10*sj5);
IkReal x10291=(sj2*x10279);
IkReal x10292=(sj2*x10280);
evalcond[0]=(x10291+x10290+x10287);
evalcond[1]=((((-1.0)*x10292))+x10286+x10283);
evalcond[2]=(((cj4*x10282))+x10279+(((-1.0)*r02*x10284))+(((-1.0)*x10285*x10289)));
evalcond[3]=(((cj4*x10281))+(((-1.0)*r12*x10284))+(((-1.0)*x10288*x10289))+x10280);
evalcond[4]=(((cj2*x10280))+(((-1.0)*x10284*x10285))+((sj4*x10282))+((cj4*r02)));
evalcond[5]=((((-1.0)*cj2*x10279))+(((-1.0)*x10284*x10288))+((cj4*r12))+((sj4*x10281)));
evalcond[6]=((((-0.00043624)*x10292))+(((-1.0)*px))+(((-0.4)*x10286))+(((-0.4)*x10283))+(((0.41956376)*x10279)));
evalcond[7]=((((-0.4)*x10290))+(((0.41956376)*x10280))+(((-1.0)*py))+(((0.00043624)*x10291))+(((-0.4)*x10287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x10293 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10293.valid){
continue;
}
CheckValue<IkReal> x10294=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x10294.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x10293.value)+(((1.5707963267949)*(x10294.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x10295=IKcos(j0);
IkReal x10296=IKsin(j0);
IkReal x10297=(cj5*r10);
IkReal x10298=(cj5*r00);
IkReal x10299=(cj5*r01);
IkReal x10300=((1.0)*sj4);
IkReal x10301=(r01*sj5);
IkReal x10302=(r00*sj5);
IkReal x10303=(cj5*r11);
IkReal x10304=(r11*sj5);
IkReal x10305=((1.0)*cj4);
IkReal x10306=(r10*sj5);
IkReal x10307=(sj2*x10295);
IkReal x10308=(sj2*x10296);
evalcond[0]=(x10307+x10306+x10303);
evalcond[1]=((((-1.0)*x10308))+x10302+x10299);
evalcond[2]=(((cj4*x10298))+(((-1.0)*r02*x10300))+(((-1.0)*x10301*x10305))+x10295);
evalcond[3]=(((cj4*x10297))+(((-1.0)*r12*x10300))+(((-1.0)*x10304*x10305))+x10296);
evalcond[4]=(((sj4*x10298))+(((-1.0)*x10300*x10301))+((cj2*x10296))+((cj4*r02)));
evalcond[5]=(((sj4*x10297))+(((-1.0)*x10300*x10304))+(((-1.0)*cj2*x10295))+((cj4*r12)));
evalcond[6]=((((-0.4)*x10299))+(((0.41956376)*x10295))+(((-0.00043624)*x10308))+(((-1.0)*px))+(((-0.4)*x10302)));
evalcond[7]=((((0.41956376)*x10296))+(((0.00043624)*x10307))+(((-1.0)*py))+(((-0.4)*x10303))+(((-0.4)*x10306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j0eval[0]=sj2;
j0eval[1]=IKsign(sj2);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j0eval[0]=sj2;
j0eval[1]=cj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x10309=IKPowWithIntegerCheck(sj2,-1);
if(!x10309.valid){
continue;
}
CheckValue<IkReal> x10310=IKPowWithIntegerCheck(cj2,-1);
if(!x10310.valid){
continue;
}
if( IKabs(((x10309.value)*((((r00*sj5))+((cj5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10310.value)*((((cj5*r10*sj4))+(((-1.0)*r11*sj4*sj5))+((cj4*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10309.value)*((((r00*sj5))+((cj5*r01))))))+IKsqr(((x10310.value)*((((cj5*r10*sj4))+(((-1.0)*r11*sj4*sj5))+((cj4*r12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x10309.value)*((((r00*sj5))+((cj5*r01))))), ((x10310.value)*((((cj5*r10*sj4))+(((-1.0)*r11*sj4*sj5))+((cj4*r12))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x10311=IKsin(j0);
IkReal x10312=IKcos(j0);
IkReal x10313=(cj5*r10);
IkReal x10314=(cj5*r00);
IkReal x10315=(cj5*r01);
IkReal x10316=((1.0)*sj4);
IkReal x10317=(r01*sj5);
IkReal x10318=(r00*sj5);
IkReal x10319=(cj5*r11);
IkReal x10320=(r11*sj5);
IkReal x10321=((1.0)*cj4);
IkReal x10322=(r10*sj5);
IkReal x10323=((1.0)*x10311);
IkReal x10324=((1.0)*x10312);
IkReal x10325=(sj2*x10312);
evalcond[0]=(x10319+x10322+x10325);
evalcond[1]=((((-1.0)*sj2*x10323))+x10318+x10315);
evalcond[2]=(((cj2*x10311))+(((-1.0)*x10316*x10317))+((sj4*x10314))+((cj4*r02)));
evalcond[3]=(((sj4*x10313))+(((-1.0)*cj2*x10324))+(((-1.0)*x10316*x10320))+((cj4*r12)));
evalcond[4]=((((-1.0)*r02*x10316))+((cj4*x10314))+(((-1.0)*x10324))+(((-1.0)*x10317*x10321)));
evalcond[5]=((((-1.0)*r12*x10316))+((cj4*x10313))+(((-1.0)*x10323))+(((-1.0)*x10320*x10321)));
evalcond[6]=((((-0.4)*x10315))+(((-0.4)*x10318))+(((-1.0)*px))+(((-0.42043624)*x10312))+(((-0.00043624)*sj2*x10311)));
evalcond[7]=((((-0.4)*x10319))+(((0.00043624)*x10325))+(((-1.0)*py))+(((-0.42043624)*x10311))+(((-0.4)*x10322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10326=((1.0)*r11);
CheckValue<IkReal> x10327=IKPowWithIntegerCheck(sj2,-1);
if(!x10327.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*sj5*x10326))+((cj4*cj5*r10))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10327.value)*(((((-1.0)*r10*sj5))+(((-1.0)*cj5*x10326)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*sj5*x10326))+((cj4*cj5*r10))+(((-1.0)*r12*sj4))))+IKsqr(((x10327.value)*(((((-1.0)*r10*sj5))+(((-1.0)*cj5*x10326))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*sj5*x10326))+((cj4*cj5*r10))+(((-1.0)*r12*sj4))), ((x10327.value)*(((((-1.0)*r10*sj5))+(((-1.0)*cj5*x10326))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x10328=IKsin(j0);
IkReal x10329=IKcos(j0);
IkReal x10330=(cj5*r10);
IkReal x10331=(cj5*r00);
IkReal x10332=(cj5*r01);
IkReal x10333=((1.0)*sj4);
IkReal x10334=(r01*sj5);
IkReal x10335=(r00*sj5);
IkReal x10336=(cj5*r11);
IkReal x10337=(r11*sj5);
IkReal x10338=((1.0)*cj4);
IkReal x10339=(r10*sj5);
IkReal x10340=((1.0)*x10328);
IkReal x10341=((1.0)*x10329);
IkReal x10342=(sj2*x10329);
evalcond[0]=(x10342+x10336+x10339);
evalcond[1]=((((-1.0)*sj2*x10340))+x10332+x10335);
evalcond[2]=((((-1.0)*x10333*x10334))+((cj2*x10328))+((sj4*x10331))+((cj4*r02)));
evalcond[3]=((((-1.0)*cj2*x10341))+(((-1.0)*x10333*x10337))+((sj4*x10330))+((cj4*r12)));
evalcond[4]=((((-1.0)*x10334*x10338))+(((-1.0)*x10341))+((cj4*x10331))+(((-1.0)*r02*x10333)));
evalcond[5]=((((-1.0)*x10340))+((cj4*x10330))+(((-1.0)*r12*x10333))+(((-1.0)*x10337*x10338)));
evalcond[6]=((((-0.00043624)*sj2*x10328))+(((-1.0)*px))+(((-0.4)*x10332))+(((-0.4)*x10335))+(((-0.42043624)*x10329)));
evalcond[7]=((((0.00043624)*x10342))+(((-1.0)*py))+(((-0.4)*x10339))+(((-0.4)*x10336))+(((-0.42043624)*x10328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x10343 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10343.valid){
continue;
}
CheckValue<IkReal> x10344=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x10344.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x10343.value)+(((1.5707963267949)*(x10344.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x10345=IKsin(j0);
IkReal x10346=IKcos(j0);
IkReal x10347=(cj5*r10);
IkReal x10348=(cj5*r00);
IkReal x10349=(cj5*r01);
IkReal x10350=((1.0)*sj4);
IkReal x10351=(r01*sj5);
IkReal x10352=(r00*sj5);
IkReal x10353=(cj5*r11);
IkReal x10354=(r11*sj5);
IkReal x10355=((1.0)*cj4);
IkReal x10356=(r10*sj5);
IkReal x10357=((1.0)*x10345);
IkReal x10358=((1.0)*x10346);
IkReal x10359=(sj2*x10346);
evalcond[0]=(x10356+x10353+x10359);
evalcond[1]=(x10349+x10352+(((-1.0)*sj2*x10357)));
evalcond[2]=((((-1.0)*x10350*x10351))+((cj2*x10345))+((sj4*x10348))+((cj4*r02)));
evalcond[3]=((((-1.0)*cj2*x10358))+(((-1.0)*x10350*x10354))+((sj4*x10347))+((cj4*r12)));
evalcond[4]=(((cj4*x10348))+(((-1.0)*x10358))+(((-1.0)*x10351*x10355))+(((-1.0)*r02*x10350)));
evalcond[5]=(((cj4*x10347))+(((-1.0)*x10357))+(((-1.0)*x10354*x10355))+(((-1.0)*r12*x10350)));
evalcond[6]=((((-1.0)*px))+(((-0.42043624)*x10346))+(((-0.00043624)*sj2*x10345))+(((-0.4)*x10349))+(((-0.4)*x10352)));
evalcond[7]=((((-1.0)*py))+(((-0.42043624)*x10345))+(((0.00043624)*x10359))+(((-0.4)*x10356))+(((-0.4)*x10353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj5))+((cj5*r01))))+IKsqr(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*sj5))+((cj5*r01))), ((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x10360=IKcos(j0);
IkReal x10361=IKsin(j0);
IkReal x10362=(cj5*r10);
IkReal x10363=(cj5*r00);
IkReal x10364=(cj5*r01);
IkReal x10365=((1.0)*sj4);
IkReal x10366=(r01*sj5);
IkReal x10367=(r00*sj5);
IkReal x10368=(cj5*r11);
IkReal x10369=(r11*sj5);
IkReal x10370=((1.0)*cj4);
IkReal x10371=(r10*sj5);
IkReal x10372=((0.00043624)*x10360);
IkReal x10373=((0.00043624)*x10361);
IkReal x10374=(sj1*x10361);
IkReal x10375=(sj1*x10360);
evalcond[0]=(x10368+x10360+x10371);
evalcond[1]=((((-1.0)*x10361))+x10367+x10364);
evalcond[2]=(((cj1*x10360))+((sj4*x10363))+(((-1.0)*x10365*x10366))+((cj4*r02)));
evalcond[3]=(((cj1*x10361))+((sj4*x10362))+(((-1.0)*x10365*x10369))+((cj4*r12)));
evalcond[4]=(((cj4*x10363))+(((-1.0)*r02*x10365))+x10375+(((-1.0)*x10366*x10370)));
evalcond[5]=((((-1.0)*x10369*x10370))+((cj4*x10362))+x10374+(((-1.0)*r12*x10365)));
evalcond[6]=((((-0.4)*x10364))+(((-0.4)*x10367))+(((0.42)*x10375))+(((-1.0)*px))+(((-1.0)*x10373))+(((-1.0)*x10372)));
evalcond[7]=((((-0.4)*x10368))+(((-0.4)*x10371))+(((0.42)*x10374))+(((-1.0)*py))+x10372+(((-1.0)*x10373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))))+IKsqr((((cj5*r11))+((r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))), (((cj5*r11))+((r10*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x10376=IKcos(j0);
IkReal x10377=IKsin(j0);
IkReal x10378=(cj5*r10);
IkReal x10379=(cj5*r00);
IkReal x10380=(cj5*r01);
IkReal x10381=((1.0)*sj4);
IkReal x10382=(r01*sj5);
IkReal x10383=(r00*sj5);
IkReal x10384=(cj5*r11);
IkReal x10385=(r11*sj5);
IkReal x10386=((1.0)*cj4);
IkReal x10387=(r10*sj5);
IkReal x10388=((0.00043624)*x10377);
IkReal x10389=((0.00043624)*x10376);
IkReal x10390=(sj1*x10377);
IkReal x10391=((1.0)*x10376);
IkReal x10392=(sj1*x10376);
evalcond[0]=(x10377+x10380+x10383);
evalcond[1]=((((-1.0)*x10391))+x10384+x10387);
evalcond[2]=((((-1.0)*x10381*x10382))+((sj4*x10379))+(((-1.0)*cj1*x10391))+((cj4*r02)));
evalcond[3]=((((-1.0)*x10381*x10385))+((sj4*x10378))+((cj4*r12))+(((-1.0)*cj1*x10377)));
evalcond[4]=(((cj4*x10379))+(((-1.0)*r02*x10381))+x10392+(((-1.0)*x10382*x10386)));
evalcond[5]=((((-1.0)*x10385*x10386))+((cj4*x10378))+x10390+(((-1.0)*r12*x10381)));
evalcond[6]=((((-1.0)*x10389))+(((0.42)*x10392))+(((-0.4)*x10383))+(((-0.4)*x10380))+(((-1.0)*px))+x10388);
evalcond[7]=((((-1.0)*x10388))+(((-1.0)*x10389))+(((0.42)*x10390))+(((-0.4)*x10384))+(((-0.4)*x10387))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10393=((1.0)*sj2);
IkReal x10394=(cj5*r11);
IkReal x10395=(r10*sj5);
IkReal x10396=((1.0)*cj2);
IkReal x10397=(cj5*r01);
IkReal x10398=(r00*sj5);
if( IKabs(((((-1.0)*x10395*x10396))+((sj2*x10398))+((sj2*x10397))+(((-1.0)*x10394*x10396)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x10396*x10398))+(((-1.0)*x10396*x10397))+(((-1.0)*x10393*x10395))+(((-1.0)*x10393*x10394)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x10395*x10396))+((sj2*x10398))+((sj2*x10397))+(((-1.0)*x10394*x10396))))+IKsqr(((((-1.0)*x10396*x10398))+(((-1.0)*x10396*x10397))+(((-1.0)*x10393*x10395))+(((-1.0)*x10393*x10394))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x10395*x10396))+((sj2*x10398))+((sj2*x10397))+(((-1.0)*x10394*x10396))), ((((-1.0)*x10396*x10398))+(((-1.0)*x10396*x10397))+(((-1.0)*x10393*x10395))+(((-1.0)*x10393*x10394))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x10399=IKcos(j0);
IkReal x10400=IKsin(j0);
IkReal x10401=(cj5*sj4);
IkReal x10402=(cj5*r01);
IkReal x10403=(r00*sj5);
IkReal x10404=(cj5*r11);
IkReal x10405=(r10*sj5);
IkReal x10406=(sj2*x10399);
IkReal x10407=(cj2*x10400);
IkReal x10408=((0.00043624)*x10399);
IkReal x10409=((1.0)*sj4*sj5);
IkReal x10410=(cj2*x10399);
IkReal x10411=((0.00043624)*x10400);
IkReal x10412=(sj2*x10400);
IkReal x10413=(x10406+x10407);
evalcond[0]=(x10413+x10404+x10405);
evalcond[1]=(x10410+x10402+x10403+(((-1.0)*x10412)));
evalcond[2]=(((r00*x10401))+(((-1.0)*r01*x10409))+x10413+((cj4*r02)));
evalcond[3]=((((-1.0)*r11*x10409))+x10412+(((-1.0)*x10410))+((r10*x10401))+((cj4*r12)));
evalcond[4]=(((cj2*x10408))+(((-1.0)*sj2*x10411))+(((-1.0)*px))+(((-1.0)*x10408))+(((-0.4)*x10403))+(((-0.4)*x10402)));
evalcond[5]=((((-1.0)*py))+(((-1.0)*x10411))+(((-0.4)*x10405))+(((-0.4)*x10404))+(((0.00043624)*x10407))+(((0.00043624)*x10406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10414=((1.0)*sj2);
IkReal x10415=(cj5*r11);
IkReal x10416=(r10*sj5);
IkReal x10417=(r00*sj5);
IkReal x10418=(cj5*r01);
if( IKabs((((sj2*x10417))+((sj2*x10418))+((cj2*x10416))+((cj2*x10415)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x10414*x10415))+(((-1.0)*x10414*x10416))+((cj2*x10417))+((cj2*x10418)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj2*x10417))+((sj2*x10418))+((cj2*x10416))+((cj2*x10415))))+IKsqr(((((-1.0)*x10414*x10415))+(((-1.0)*x10414*x10416))+((cj2*x10417))+((cj2*x10418))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((sj2*x10417))+((sj2*x10418))+((cj2*x10416))+((cj2*x10415))), ((((-1.0)*x10414*x10415))+(((-1.0)*x10414*x10416))+((cj2*x10417))+((cj2*x10418))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x10419=IKcos(j0);
IkReal x10420=IKsin(j0);
IkReal x10421=(cj5*sj4);
IkReal x10422=(cj5*r01);
IkReal x10423=(r00*sj5);
IkReal x10424=(cj5*r11);
IkReal x10425=(r10*sj5);
IkReal x10426=((0.00043624)*x10419);
IkReal x10427=((1.0)*sj4*sj5);
IkReal x10428=((1.0)*x10419);
IkReal x10429=((0.00043624)*x10420);
IkReal x10430=(cj2*x10420);
IkReal x10431=(cj2*x10428);
IkReal x10432=((1.0)*sj2*x10420);
IkReal x10433=(x10432+x10431);
evalcond[0]=(((sj2*x10419))+(((-1.0)*x10430))+x10424+x10425);
evalcond[1]=(x10422+x10423+(((-1.0)*x10433)));
evalcond[2]=(((r00*x10421))+(((-1.0)*r01*x10427))+(((-1.0)*sj2*x10428))+x10430+((cj4*r02)));
evalcond[3]=((((-1.0)*r11*x10427))+((r10*x10421))+(((-1.0)*x10433))+((cj4*r12)));
evalcond[4]=((((-1.0)*cj2*x10426))+(((-1.0)*px))+(((-1.0)*sj2*x10429))+(((-1.0)*x10426))+(((-0.4)*x10423))+(((-0.4)*x10422)));
evalcond[5]=((((-1.0)*cj2*x10429))+((sj2*x10426))+(((-1.0)*py))+(((-1.0)*x10429))+(((-0.4)*x10425))+(((-0.4)*x10424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
IkReal x10434=((1.0)*sj5);
IkReal x10435=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs(((((-1.0)*r00*x10434))+(((-1.0)*r01*x10435)))))+(IKabs(((((-1.0)*r10*x10434))+(((-1.0)*r11*x10435))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=cj1;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10436=((1.0)*cj5);
CheckValue<IkReal> x10437=IKPowWithIntegerCheck(cj1,-1);
if(!x10437.valid){
continue;
}
CheckValue<IkReal> x10438=IKPowWithIntegerCheck(sj1,-1);
if(!x10438.valid){
continue;
}
if( IKabs(((x10437.value)*(((((-1.0)*r10*sj5))+(((-1.0)*r11*x10436)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10438.value)*((((r02*sj4))+(((-1.0)*cj4*r00*x10436))+((cj4*r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10437.value)*(((((-1.0)*r10*sj5))+(((-1.0)*r11*x10436))))))+IKsqr(((x10438.value)*((((r02*sj4))+(((-1.0)*cj4*r00*x10436))+((cj4*r01*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x10437.value)*(((((-1.0)*r10*sj5))+(((-1.0)*r11*x10436))))), ((x10438.value)*((((r02*sj4))+(((-1.0)*cj4*r00*x10436))+((cj4*r01*sj5))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x10439=IKsin(j0);
IkReal x10440=IKcos(j0);
IkReal x10441=(cj5*r10);
IkReal x10442=(cj5*r00);
IkReal x10443=(cj5*r01);
IkReal x10444=((1.0)*sj4);
IkReal x10445=(r01*sj5);
IkReal x10446=(r00*sj5);
IkReal x10447=(cj5*r11);
IkReal x10448=(r11*sj5);
IkReal x10449=((1.0)*cj4);
IkReal x10450=(r10*sj5);
IkReal x10451=((0.00043624)*x10440);
IkReal x10452=(sj1*x10439);
IkReal x10453=((0.00043624)*x10439);
IkReal x10454=(sj1*x10440);
evalcond[0]=(((cj1*x10439))+x10450+x10447);
evalcond[1]=(x10446+x10443+((cj1*x10440)));
evalcond[2]=((((-1.0)*x10444*x10445))+((sj4*x10442))+x10439+((cj4*r02)));
evalcond[3]=((((-1.0)*x10440))+(((-1.0)*x10444*x10448))+((sj4*x10441))+((cj4*r12)));
evalcond[4]=(((cj4*x10442))+(((-1.0)*x10445*x10449))+(((-1.0)*r02*x10444))+x10454);
evalcond[5]=((((-1.0)*r12*x10444))+((cj4*x10441))+x10452+(((-1.0)*x10448*x10449)));
evalcond[6]=((((0.42)*x10454))+(((-1.0)*px))+((cj1*x10451))+(((-1.0)*x10451))+(((-0.4)*x10446))+(((-0.4)*x10443)));
evalcond[7]=((((0.42)*x10452))+(((-0.4)*x10450))+(((-1.0)*py))+((cj1*x10453))+(((-1.0)*x10453))+(((-0.4)*x10447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10455=((1.0)*r11);
CheckValue<IkReal> x10456=IKPowWithIntegerCheck(cj1,-1);
if(!x10456.valid){
continue;
}
if( IKabs(((x10456.value)*(((((-1.0)*cj5*x10455))+(((-1.0)*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r10*sj4))+(((-1.0)*sj4*sj5*x10455))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10456.value)*(((((-1.0)*cj5*x10455))+(((-1.0)*r10*sj5))))))+IKsqr((((cj5*r10*sj4))+(((-1.0)*sj4*sj5*x10455))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x10456.value)*(((((-1.0)*cj5*x10455))+(((-1.0)*r10*sj5))))), (((cj5*r10*sj4))+(((-1.0)*sj4*sj5*x10455))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x10457=IKsin(j0);
IkReal x10458=IKcos(j0);
IkReal x10459=(cj5*r10);
IkReal x10460=(cj5*r00);
IkReal x10461=(cj5*r01);
IkReal x10462=((1.0)*sj4);
IkReal x10463=(r01*sj5);
IkReal x10464=(r00*sj5);
IkReal x10465=(cj5*r11);
IkReal x10466=(r11*sj5);
IkReal x10467=((1.0)*cj4);
IkReal x10468=(r10*sj5);
IkReal x10469=((0.00043624)*x10458);
IkReal x10470=(sj1*x10457);
IkReal x10471=((0.00043624)*x10457);
IkReal x10472=(sj1*x10458);
evalcond[0]=(x10465+x10468+((cj1*x10457)));
evalcond[1]=(x10464+x10461+((cj1*x10458)));
evalcond[2]=(((sj4*x10460))+(((-1.0)*x10462*x10463))+x10457+((cj4*r02)));
evalcond[3]=(((sj4*x10459))+(((-1.0)*x10458))+(((-1.0)*x10462*x10466))+((cj4*r12)));
evalcond[4]=((((-1.0)*r02*x10462))+(((-1.0)*x10463*x10467))+((cj4*x10460))+x10472);
evalcond[5]=((((-1.0)*x10466*x10467))+((cj4*x10459))+x10470+(((-1.0)*r12*x10462)));
evalcond[6]=((((-0.4)*x10461))+(((-0.4)*x10464))+(((-1.0)*px))+((cj1*x10469))+(((0.42)*x10472))+(((-1.0)*x10469)));
evalcond[7]=((((-0.4)*x10468))+(((-0.4)*x10465))+(((-1.0)*py))+((cj1*x10471))+(((0.42)*x10470))+(((-1.0)*x10471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10473=((1.0)*sj5);
IkReal x10474=((1.0)*cj5);
CheckValue<IkReal> x10475=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x10475.valid){
continue;
}
CheckValue<IkReal> x10476 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x10473))+(((-1.0)*r11*x10474)))),IkReal(((((-1.0)*r01*x10474))+(((-1.0)*r00*x10473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10476.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10475.value)))+(x10476.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x10477=IKsin(j0);
IkReal x10478=IKcos(j0);
IkReal x10479=(cj5*r10);
IkReal x10480=(cj5*r00);
IkReal x10481=(cj5*r01);
IkReal x10482=((1.0)*sj4);
IkReal x10483=(r01*sj5);
IkReal x10484=(r00*sj5);
IkReal x10485=(cj5*r11);
IkReal x10486=(r11*sj5);
IkReal x10487=((1.0)*cj4);
IkReal x10488=(r10*sj5);
IkReal x10489=((0.00043624)*x10478);
IkReal x10490=(sj1*x10477);
IkReal x10491=((0.00043624)*x10477);
IkReal x10492=(sj1*x10478);
evalcond[0]=(x10488+x10485+((cj1*x10477)));
evalcond[1]=(x10481+x10484+((cj1*x10478)));
evalcond[2]=(x10477+(((-1.0)*x10482*x10483))+((sj4*x10480))+((cj4*r02)));
evalcond[3]=((((-1.0)*x10478))+((sj4*x10479))+(((-1.0)*x10482*x10486))+((cj4*r12)));
evalcond[4]=((((-1.0)*r02*x10482))+(((-1.0)*x10483*x10487))+x10492+((cj4*x10480)));
evalcond[5]=((((-1.0)*r12*x10482))+((cj4*x10479))+(((-1.0)*x10486*x10487))+x10490);
evalcond[6]=(((cj1*x10489))+(((0.42)*x10492))+(((-1.0)*px))+(((-1.0)*x10489))+(((-0.4)*x10484))+(((-0.4)*x10481)));
evalcond[7]=(((cj1*x10491))+(((0.42)*x10490))+(((-1.0)*py))+(((-1.0)*x10491))+(((-0.4)*x10485))+(((-0.4)*x10488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=cj1;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x10493=IKPowWithIntegerCheck(cj1,-1);
if(!x10493.valid){
continue;
}
CheckValue<IkReal> x10494=IKPowWithIntegerCheck(sj1,-1);
if(!x10494.valid){
continue;
}
if( IKabs(((x10493.value)*((((cj5*r11))+((r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10494.value)*(((((-1.0)*cj4*cj5*r00))+((r02*sj4))+((cj4*r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10493.value)*((((cj5*r11))+((r10*sj5))))))+IKsqr(((x10494.value)*(((((-1.0)*cj4*cj5*r00))+((r02*sj4))+((cj4*r01*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x10493.value)*((((cj5*r11))+((r10*sj5))))), ((x10494.value)*(((((-1.0)*cj4*cj5*r00))+((r02*sj4))+((cj4*r01*sj5))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x10495=IKcos(j0);
IkReal x10496=IKsin(j0);
IkReal x10497=(cj5*r10);
IkReal x10498=(cj5*r00);
IkReal x10499=(cj5*r01);
IkReal x10500=((1.0)*sj4);
IkReal x10501=(r01*sj5);
IkReal x10502=(r00*sj5);
IkReal x10503=(cj5*r11);
IkReal x10504=(r11*sj5);
IkReal x10505=((1.0)*cj4);
IkReal x10506=(r10*sj5);
IkReal x10507=((0.00043624)*x10495);
IkReal x10508=(sj1*x10496);
IkReal x10509=((1.0)*x10496);
IkReal x10510=((0.00043624)*x10496);
IkReal x10511=(sj1*x10495);
evalcond[0]=(x10503+x10506+(((-1.0)*cj1*x10509)));
evalcond[1]=((((-1.0)*cj1*x10495))+x10502+x10499);
evalcond[2]=(x10495+((sj4*x10497))+((cj4*r12))+(((-1.0)*x10500*x10504)));
evalcond[3]=((((-1.0)*x10509))+((sj4*x10498))+(((-1.0)*x10500*x10501))+((cj4*r02)));
evalcond[4]=(((cj4*x10498))+(((-1.0)*x10501*x10505))+x10511+(((-1.0)*r02*x10500)));
evalcond[5]=(((cj4*x10497))+(((-1.0)*r12*x10500))+(((-1.0)*x10504*x10505))+x10508);
evalcond[6]=((((-1.0)*x10507))+(((-1.0)*px))+(((-0.4)*x10499))+(((0.42)*x10511))+(((-0.4)*x10502))+(((-1.0)*cj1*x10507)));
evalcond[7]=((((0.42)*x10508))+(((-1.0)*py))+(((-1.0)*x10510))+(((-0.4)*x10506))+(((-0.4)*x10503))+(((-1.0)*cj1*x10510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x10512=IKPowWithIntegerCheck(cj1,-1);
if(!x10512.valid){
continue;
}
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10512.value)*((((r00*sj5))+((cj5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5))+((cj4*r02))))+IKsqr(((x10512.value)*((((r00*sj5))+((cj5*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5))+((cj4*r02))), ((x10512.value)*((((r00*sj5))+((cj5*r01))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x10513=IKcos(j0);
IkReal x10514=IKsin(j0);
IkReal x10515=(cj5*r10);
IkReal x10516=(cj5*r00);
IkReal x10517=(cj5*r01);
IkReal x10518=((1.0)*sj4);
IkReal x10519=(r01*sj5);
IkReal x10520=(r00*sj5);
IkReal x10521=(cj5*r11);
IkReal x10522=(r11*sj5);
IkReal x10523=((1.0)*cj4);
IkReal x10524=(r10*sj5);
IkReal x10525=((0.00043624)*x10513);
IkReal x10526=(sj1*x10514);
IkReal x10527=((1.0)*x10514);
IkReal x10528=((0.00043624)*x10514);
IkReal x10529=(sj1*x10513);
evalcond[0]=((((-1.0)*cj1*x10527))+x10524+x10521);
evalcond[1]=(x10517+x10520+(((-1.0)*cj1*x10513)));
evalcond[2]=((((-1.0)*x10518*x10522))+x10513+((sj4*x10515))+((cj4*r12)));
evalcond[3]=((((-1.0)*x10527))+(((-1.0)*x10518*x10519))+((sj4*x10516))+((cj4*r02)));
evalcond[4]=((((-1.0)*r02*x10518))+x10529+((cj4*x10516))+(((-1.0)*x10519*x10523)));
evalcond[5]=(x10526+(((-1.0)*x10522*x10523))+((cj4*x10515))+(((-1.0)*r12*x10518)));
evalcond[6]=((((-1.0)*cj1*x10525))+(((-1.0)*x10525))+(((0.42)*x10529))+(((-0.4)*x10520))+(((-1.0)*px))+(((-0.4)*x10517)));
evalcond[7]=((((-1.0)*cj1*x10528))+(((-1.0)*x10528))+(((0.42)*x10526))+(((-0.4)*x10524))+(((-0.4)*x10521))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x10530=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x10530.valid){
continue;
}
CheckValue<IkReal> x10531 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10531.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10530.value)))+(x10531.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x10532=IKcos(j0);
IkReal x10533=IKsin(j0);
IkReal x10534=(cj5*r10);
IkReal x10535=(cj5*r00);
IkReal x10536=(cj5*r01);
IkReal x10537=((1.0)*sj4);
IkReal x10538=(r01*sj5);
IkReal x10539=(r00*sj5);
IkReal x10540=(cj5*r11);
IkReal x10541=(r11*sj5);
IkReal x10542=((1.0)*cj4);
IkReal x10543=(r10*sj5);
IkReal x10544=((0.00043624)*x10532);
IkReal x10545=(sj1*x10533);
IkReal x10546=((1.0)*x10533);
IkReal x10547=((0.00043624)*x10533);
IkReal x10548=(sj1*x10532);
evalcond[0]=((((-1.0)*cj1*x10546))+x10543+x10540);
evalcond[1]=((((-1.0)*cj1*x10532))+x10536+x10539);
evalcond[2]=(((sj4*x10534))+x10532+(((-1.0)*x10537*x10541))+((cj4*r12)));
evalcond[3]=((((-1.0)*x10537*x10538))+((sj4*x10535))+(((-1.0)*x10546))+((cj4*r02)));
evalcond[4]=((((-1.0)*x10538*x10542))+(((-1.0)*r02*x10537))+((cj4*x10535))+x10548);
evalcond[5]=((((-1.0)*x10541*x10542))+(((-1.0)*r12*x10537))+((cj4*x10534))+x10545);
evalcond[6]=((((-1.0)*cj1*x10544))+(((-0.4)*x10536))+(((-0.4)*x10539))+(((-1.0)*x10544))+(((-1.0)*px))+(((0.42)*x10548)));
evalcond[7]=((((-1.0)*cj1*x10547))+(((-1.0)*x10547))+(((-1.0)*py))+(((0.42)*x10545))+(((-0.4)*x10543))+(((-0.4)*x10540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x10555=IKPowWithIntegerCheck(sj1,-1);
if(!x10555.valid){
continue;
}
IkReal x10549=x10555.value;
IkReal x10550=((1.0)*cj4);
IkReal x10551=(cj5*r00);
IkReal x10552=(r01*sj5);
IkReal x10553=(r02*sj4);
IkReal x10554=((1.0)*sj1);
CheckValue<IkReal> x10556=IKPowWithIntegerCheck(cj1,-1);
if(!x10556.valid){
continue;
}
CheckValue<IkReal> x10557=IKPowWithIntegerCheck(cj2,-1);
if(!x10557.valid){
continue;
}
if( IKabs((x10549*(x10556.value)*(x10557.value)*(((((-1.0)*sj2*x10550*x10552))+(((-1.0)*cj5*r11*x10554))+(((-1.0)*sj2*x10553))+(((-1.0)*r10*sj5*x10554))+((cj4*sj2*x10551)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x10549*(((((-1.0)*x10550*x10551))+((cj4*x10552))+x10553)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10549*(x10556.value)*(x10557.value)*(((((-1.0)*sj2*x10550*x10552))+(((-1.0)*cj5*r11*x10554))+(((-1.0)*sj2*x10553))+(((-1.0)*r10*sj5*x10554))+((cj4*sj2*x10551))))))+IKsqr((x10549*(((((-1.0)*x10550*x10551))+((cj4*x10552))+x10553))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x10549*(x10556.value)*(x10557.value)*(((((-1.0)*sj2*x10550*x10552))+(((-1.0)*cj5*r11*x10554))+(((-1.0)*sj2*x10553))+(((-1.0)*r10*sj5*x10554))+((cj4*sj2*x10551))))), (x10549*(((((-1.0)*x10550*x10551))+((cj4*x10552))+x10553))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x10558=IKcos(j0);
IkReal x10559=IKsin(j0);
IkReal x10560=(cj5*r10);
IkReal x10561=(cj1*cj2);
IkReal x10562=(cj5*r00);
IkReal x10563=(cj5*r01);
IkReal x10564=((1.0)*sj4);
IkReal x10565=(r01*sj5);
IkReal x10566=(r00*sj5);
IkReal x10567=(cj5*r11);
IkReal x10568=(r11*sj5);
IkReal x10569=((1.0)*cj4);
IkReal x10570=(r10*sj5);
IkReal x10571=((0.00043624)*x10558);
IkReal x10572=((0.00043624)*x10559);
IkReal x10573=(sj1*x10559);
IkReal x10574=(sj2*x10558);
IkReal x10575=(sj1*x10558);
IkReal x10576=(sj2*x10559);
evalcond[0]=(x10567+x10574+x10570+((x10559*x10561)));
evalcond[1]=(((cj4*x10562))+x10575+(((-1.0)*x10565*x10569))+(((-1.0)*r02*x10564)));
evalcond[2]=(((cj4*x10560))+(((-1.0)*x10568*x10569))+(((-1.0)*r12*x10564))+x10573);
evalcond[3]=((((-1.0)*x10576))+x10563+x10566+((x10558*x10561)));
evalcond[4]=(((cj2*x10559))+(((-1.0)*x10564*x10565))+((sj4*x10562))+((cj1*x10574))+((cj4*r02)));
evalcond[5]=((((-1.0)*cj2*x10558))+(((-1.0)*x10564*x10568))+((sj4*x10560))+((cj4*r12))+((cj1*x10576)));
evalcond[6]=((((-1.0)*sj2*x10572))+(((0.42)*x10575))+(((-1.0)*x10571))+((x10561*x10571))+(((-1.0)*px))+(((-0.4)*x10566))+(((-0.4)*x10563)));
evalcond[7]=((((0.42)*x10573))+(((-1.0)*x10572))+((x10561*x10572))+(((-1.0)*py))+(((-0.4)*x10570))+(((-0.4)*x10567))+((sj2*x10571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x10582=IKPowWithIntegerCheck(sj1,-1);
if(!x10582.valid){
continue;
}
IkReal x10577=x10582.value;
IkReal x10578=(cj1*cj2);
IkReal x10579=(r02*sj4);
IkReal x10580=(cj4*r01*sj5);
IkReal x10581=((1.0)*cj4*cj5*r00);
CheckValue<IkReal> x10583=IKPowWithIntegerCheck(sj2,-1);
if(!x10583.valid){
continue;
}
if( IKabs((x10577*(x10583.value)*(((((-1.0)*x10578*x10581))+((cj5*r01*sj1))+((x10578*x10580))+((r00*sj1*sj5))+((x10578*x10579)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x10577*((x10580+x10579+(((-1.0)*x10581)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10577*(x10583.value)*(((((-1.0)*x10578*x10581))+((cj5*r01*sj1))+((x10578*x10580))+((r00*sj1*sj5))+((x10578*x10579))))))+IKsqr((x10577*((x10580+x10579+(((-1.0)*x10581))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x10577*(x10583.value)*(((((-1.0)*x10578*x10581))+((cj5*r01*sj1))+((x10578*x10580))+((r00*sj1*sj5))+((x10578*x10579))))), (x10577*((x10580+x10579+(((-1.0)*x10581))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x10584=IKcos(j0);
IkReal x10585=IKsin(j0);
IkReal x10586=(cj5*r10);
IkReal x10587=(cj1*cj2);
IkReal x10588=(cj5*r00);
IkReal x10589=(cj5*r01);
IkReal x10590=((1.0)*sj4);
IkReal x10591=(r01*sj5);
IkReal x10592=(r00*sj5);
IkReal x10593=(cj5*r11);
IkReal x10594=(r11*sj5);
IkReal x10595=((1.0)*cj4);
IkReal x10596=(r10*sj5);
IkReal x10597=((0.00043624)*x10584);
IkReal x10598=((0.00043624)*x10585);
IkReal x10599=(sj1*x10585);
IkReal x10600=(sj2*x10584);
IkReal x10601=(sj1*x10584);
IkReal x10602=(sj2*x10585);
evalcond[0]=(((x10585*x10587))+x10593+x10596+x10600);
evalcond[1]=((((-1.0)*r02*x10590))+(((-1.0)*x10591*x10595))+x10601+((cj4*x10588)));
evalcond[2]=((((-1.0)*r12*x10590))+(((-1.0)*x10594*x10595))+x10599+((cj4*x10586)));
evalcond[3]=((((-1.0)*x10602))+((x10584*x10587))+x10592+x10589);
evalcond[4]=(((sj4*x10588))+((cj1*x10600))+(((-1.0)*x10590*x10591))+((cj2*x10585))+((cj4*r02)));
evalcond[5]=((((-1.0)*cj2*x10584))+((sj4*x10586))+((cj1*x10602))+(((-1.0)*x10590*x10594))+((cj4*r12)));
evalcond[6]=((((-1.0)*x10597))+(((-0.4)*x10592))+(((-1.0)*px))+(((0.42)*x10601))+((x10587*x10597))+(((-0.4)*x10589))+(((-1.0)*sj2*x10598)));
evalcond[7]=((((0.42)*x10599))+((sj2*x10597))+(((-1.0)*x10598))+(((-0.4)*x10596))+(((-0.4)*x10593))+(((-1.0)*py))+((x10587*x10598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10603=cj2*cj2;
IkReal x10604=((1.0)*cj5);
IkReal x10605=(cj1*cj2);
IkReal x10606=(r00*sj5);
IkReal x10607=((1.0)*r10*sj5);
CheckValue<IkReal> x10608 = IKatan2WithCheck(IkReal((((cj5*r01*sj2))+(((-1.0)*r11*x10604*x10605))+((sj2*x10606))+(((-1.0)*x10605*x10607)))),IkReal(((((-1.0)*r01*x10604*x10605))+(((-1.0)*x10605*x10606))+(((-1.0)*r11*sj2*x10604))+(((-1.0)*sj2*x10607)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10608.valid){
continue;
}
CheckValue<IkReal> x10609=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*x10603))+((x10603*(cj1*cj1))))),-1);
if(!x10609.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x10608.value)+(((1.5707963267949)*(x10609.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x10610=IKcos(j0);
IkReal x10611=IKsin(j0);
IkReal x10612=(cj5*r10);
IkReal x10613=(cj1*cj2);
IkReal x10614=(cj5*r00);
IkReal x10615=(cj5*r01);
IkReal x10616=((1.0)*sj4);
IkReal x10617=(r01*sj5);
IkReal x10618=(r00*sj5);
IkReal x10619=(cj5*r11);
IkReal x10620=(r11*sj5);
IkReal x10621=((1.0)*cj4);
IkReal x10622=(r10*sj5);
IkReal x10623=((0.00043624)*x10610);
IkReal x10624=((0.00043624)*x10611);
IkReal x10625=(sj1*x10611);
IkReal x10626=(sj2*x10610);
IkReal x10627=(sj1*x10610);
IkReal x10628=(sj2*x10611);
evalcond[0]=(((x10611*x10613))+x10622+x10626+x10619);
evalcond[1]=((((-1.0)*x10617*x10621))+(((-1.0)*r02*x10616))+((cj4*x10614))+x10627);
evalcond[2]=((((-1.0)*r12*x10616))+((cj4*x10612))+x10625+(((-1.0)*x10620*x10621)));
evalcond[3]=((((-1.0)*x10628))+((x10610*x10613))+x10615+x10618);
evalcond[4]=(((cj2*x10611))+(((-1.0)*x10616*x10617))+((sj4*x10614))+((cj1*x10626))+((cj4*r02)));
evalcond[5]=(((sj4*x10612))+((cj1*x10628))+(((-1.0)*cj2*x10610))+(((-1.0)*x10616*x10620))+((cj4*r12)));
evalcond[6]=((((-1.0)*sj2*x10624))+(((-0.4)*x10615))+(((-0.4)*x10618))+(((0.42)*x10627))+(((-1.0)*x10623))+((x10613*x10623))+(((-1.0)*px)));
evalcond[7]=((((-0.4)*x10619))+(((0.42)*x10625))+(((-1.0)*x10624))+((x10613*x10624))+(((-1.0)*py))+(((-0.4)*x10622))+((sj2*x10623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10629=cj2*cj2;
IkReal x10630=cj1*cj1;
IkReal x10631=((68162500000.0)*py);
IkReal x10632=((65625000000000.0)*sj1);
IkReal x10633=((57256500000.0)*sj1);
IkReal x10634=((27265000000.0)*cj5);
IkReal x10635=(cj1*cj2);
IkReal x10636=(r00*sj5);
IkReal x10637=((26250000000000.0)*sj1);
IkReal x10638=(r10*sj5);
IkReal x10639=((68162500000.0)*px);
IkReal x10640=((27265000000.0)*sj2*sj5);
IkReal x10641=((29735209.0)*x10629);
IkReal x10642=(cj5*x10637);
CheckValue<IkReal> x10643 = IKatan2WithCheck(IkReal(((((27265000000.0)*x10635*x10638))+(((-1.0)*sj2*x10639))+(((-1.0)*r01*sj2*x10634))+((py*x10632))+(((-1.0)*x10631))+((x10637*x10638))+(((-1.0)*r11*x10634))+((r11*x10634*x10635))+(((-27265000000.0)*x10638))+(((-27265000000.0)*sj2*x10636))+((r11*x10642))+((x10631*x10635)))),IkReal(((((27265000000.0)*x10635*x10636))+(((-1.0)*r01*x10634))+(((27265000000.0)*sj2*x10638))+((r01*x10642))+((px*x10632))+((x10635*x10639))+((r11*sj2*x10634))+(((-1.0)*x10639))+(((-27265000000.0)*x10636))+((x10636*x10637))+((sj2*x10631))+((r01*x10634*x10635)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10643.valid){
continue;
}
CheckValue<IkReal> x10644=IKPowWithIntegerCheck(IKsign(((27562559470418.0)+(((-27562500000000.0)*x10630))+(((-59470418.0)*x10635))+(((-1.0)*x10641))+(((-1.0)*x10633))+((x10630*x10641))+((x10633*x10635)))),-1);
if(!x10644.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x10643.value)+(((1.5707963267949)*(x10644.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x10645=IKcos(j0);
IkReal x10646=IKsin(j0);
IkReal x10647=((0.4)*sj5);
IkReal x10648=((0.42)*sj1);
IkReal x10649=(cj1*cj2);
IkReal x10650=((0.4)*cj5);
IkReal x10651=((0.00043624)*x10645);
IkReal x10652=((0.00043624)*x10646);
evalcond[0]=((((-1.0)*sj2*x10652))+(((-1.0)*r00*x10647))+((x10645*x10648))+(((-1.0)*r01*x10650))+(((-1.0)*px))+((x10649*x10651))+(((-1.0)*x10651)));
evalcond[1]=(((x10646*x10648))+((sj2*x10651))+(((-1.0)*py))+(((-1.0)*r10*x10647))+((x10649*x10652))+(((-1.0)*r11*x10650))+(((-1.0)*x10652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x10653=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x10653;
j4eval[1]=IKsign(x10653);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10654=((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)));
j4eval[0]=x10654;
j4eval[1]=IKsign(x10654);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10655=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x10655;
j4eval[1]=IKsign(x10655);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x10657 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10657)==0){
continue;
}
IkReal x10656=pow(x10657,-0.5);
CheckValue<IkReal> x10658 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10658.valid){
continue;
}
IkReal gconst0=((-1.0)*(x10658.value));
IkReal gconst1=((-1.0)*r21*x10656);
IkReal gconst2=(r20*x10656);
CheckValue<IkReal> x10659 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10659.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x10659.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10660=(sj1*sj2);
IkReal x10661=(cj0*cj2);
IkReal x10662=(gconst2*r20);
IkReal x10663=(gconst1*r21);
IkReal x10664=(cj1*sj0*sj2);
CheckValue<IkReal> x10665 = IKatan2WithCheck(IkReal((((r22*x10664))+((r12*x10660))+(((-1.0)*r22*x10661)))),IkReal((((gconst1*r11*x10660))+((x10661*x10662))+(((-1.0)*x10661*x10663))+(((-1.0)*x10662*x10664))+((x10663*x10664))+(((-1.0)*gconst2*r10*x10660)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10665.valid){
continue;
}
CheckValue<IkReal> x10666=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x10666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10665.value)+(((1.5707963267949)*(x10666.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10667=IKsin(j4);
IkReal x10668=IKcos(j4);
IkReal x10669=((1.0)*gconst1);
IkReal x10670=(cj3*gconst1);
IkReal x10671=(cj1*cj2);
IkReal x10672=(r20*sj3);
IkReal x10673=(r00*sj3);
IkReal x10674=((1.0)*sj1);
IkReal x10675=(r21*sj3);
IkReal x10676=((1.0)*gconst2);
IkReal x10677=(r11*sj3);
IkReal x10678=(cj0*sj2);
IkReal x10679=(r01*sj3);
IkReal x10680=(cj3*gconst2);
IkReal x10681=(r10*sj3);
IkReal x10682=(sj0*sj2);
IkReal x10683=(gconst2*x10667);
IkReal x10684=(cj3*x10667);
IkReal x10685=(sj3*x10667);
IkReal x10686=(gconst1*x10668);
IkReal x10687=(x10668*x10676);
evalcond[0]=(((r22*x10668))+(((-1.0)*sj2*x10674))+(((-1.0)*r21*x10667*x10669))+((r20*x10683)));
evalcond[1]=(((cj2*sj0))+((r02*x10668))+((r00*x10683))+((cj1*x10678))+(((-1.0)*r01*x10667*x10669)));
evalcond[2]=(((r12*x10668))+(((-1.0)*r11*x10667*x10669))+((r10*x10683))+((cj1*x10682))+(((-1.0)*cj0*cj2)));
evalcond[3]=(cj1+(((-1.0)*x10672*x10687))+((r20*x10670))+((r22*x10685))+((r21*x10680))+((x10675*x10686)));
evalcond[4]=(((r00*x10670))+(((-1.0)*x10673*x10687))+((r01*x10680))+((x10679*x10686))+((r02*x10685))+((cj0*sj1)));
evalcond[5]=(((r10*x10670))+((x10677*x10686))+((sj0*sj1))+((r11*x10680))+((r12*x10685))+(((-1.0)*x10681*x10687)));
evalcond[6]=((((-1.0)*x10669*x10672))+(((-1.0)*cj3*r20*x10687))+((r21*x10668*x10670))+(((-1.0)*cj2*x10674))+(((-1.0)*x10675*x10676))+((r22*x10684)));
evalcond[7]=((((-1.0)*x10676*x10677))+((sj0*x10671))+(((-1.0)*cj3*r10*x10687))+((r11*x10668*x10670))+(((-1.0)*x10669*x10681))+((r12*x10684))+x10678);
evalcond[8]=((((-1.0)*x10669*x10673))+(((-1.0)*x10676*x10679))+(((-1.0)*cj3*r00*x10687))+((r01*x10668*x10670))+(((-1.0)*x10682))+((r02*x10684))+((cj0*x10671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10689 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10689)==0){
continue;
}
IkReal x10688=pow(x10689,-0.5);
CheckValue<IkReal> x10690 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10690.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10690.value))));
IkReal gconst4=((1.0)*r21*x10688);
IkReal gconst5=((-1.0)*r20*x10688);
CheckValue<IkReal> x10691 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10691.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10691.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10692=(gconst4*r21);
IkReal x10693=(gconst5*r20);
IkReal x10694=(sj1*sj2);
IkReal x10695=((1.0)*cj0*cj2);
IkReal x10696=(cj1*sj0*sj2);
CheckValue<IkReal> x10697 = IKatan2WithCheck(IkReal((((r22*x10696))+(((-1.0)*r22*x10695))+((r12*x10694)))),IkReal(((((-1.0)*gconst5*r10*x10694))+((x10692*x10696))+((cj0*cj2*x10693))+(((-1.0)*x10692*x10695))+((gconst4*r11*x10694))+(((-1.0)*x10693*x10696)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10697.valid){
continue;
}
CheckValue<IkReal> x10698=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10697.value)+(((1.5707963267949)*(x10698.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10699=IKsin(j4);
IkReal x10700=IKcos(j4);
IkReal x10701=((1.0)*sj3);
IkReal x10702=(gconst4*r10);
IkReal x10703=(gconst4*r21);
IkReal x10704=(gconst5*r11);
IkReal x10705=((1.0)*cj3);
IkReal x10706=((1.0)*sj1);
IkReal x10707=(cj0*cj2);
IkReal x10708=(gconst4*r11);
IkReal x10709=(gconst5*r01);
IkReal x10710=(gconst4*r01);
IkReal x10711=(cj2*sj0);
IkReal x10712=(gconst5*r21);
IkReal x10713=(cj0*sj2);
IkReal x10714=(gconst4*r20);
IkReal x10715=(sj0*sj2);
IkReal x10716=(gconst4*r00);
IkReal x10717=(gconst5*x10700);
IkReal x10718=((1.0)*x10699);
IkReal x10719=(cj3*x10699);
IkReal x10720=(sj3*x10699);
IkReal x10721=(sj3*x10700);
IkReal x10722=(cj3*x10700);
IkReal x10723=(gconst5*x10699);
evalcond[0]=((((-1.0)*x10703*x10718))+(((-1.0)*sj2*x10706))+((r22*x10700))+((r20*x10723)));
evalcond[1]=(((cj1*x10713))+(((-1.0)*x10710*x10718))+((r02*x10700))+x10711+((r00*x10723)));
evalcond[2]=(((r10*x10723))+((cj1*x10715))+(((-1.0)*x10708*x10718))+(((-1.0)*x10707))+((r12*x10700)));
evalcond[3]=(((r22*x10720))+cj1+((cj3*x10714))+((cj3*x10712))+(((-1.0)*r20*x10701*x10717))+((x10703*x10721)));
evalcond[4]=(((cj3*x10709))+((cj3*x10716))+((r02*x10720))+((x10710*x10721))+((cj0*sj1))+(((-1.0)*r00*x10701*x10717)));
evalcond[5]=(((x10708*x10721))+((cj3*x10702))+((cj3*x10704))+((sj0*sj1))+(((-1.0)*r10*x10701*x10717))+((r12*x10720)));
evalcond[6]=((((-1.0)*r20*x10705*x10717))+((r22*x10719))+((x10703*x10722))+(((-1.0)*cj2*x10706))+(((-1.0)*x10701*x10714))+(((-1.0)*x10701*x10712)));
evalcond[7]=(((cj1*x10711))+((r12*x10719))+((x10708*x10722))+(((-1.0)*r10*x10705*x10717))+x10713+(((-1.0)*x10701*x10702))+(((-1.0)*x10701*x10704)));
evalcond[8]=((((-1.0)*x10715))+(((-1.0)*r00*x10705*x10717))+((cj1*x10707))+((x10710*x10722))+(((-1.0)*x10701*x10709))+(((-1.0)*x10701*x10716))+((r02*x10719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10724=((-1.0)*r10);
IkReal x10726 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x10726)==0){
continue;
}
IkReal x10725=pow(x10726,-0.5);
CheckValue<IkReal> x10727 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x10724),IKFAST_ATAN2_MAGTHRESH);
if(!x10727.valid){
continue;
}
IkReal gconst6=((-1.0)*(x10727.value));
IkReal gconst7=(r11*x10725);
IkReal gconst8=(x10724*x10725);
CheckValue<IkReal> x10728 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x10728.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x10728.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10729=(gconst7*r21);
IkReal x10730=(sj1*sj2);
IkReal x10731=((1.0)*gconst8);
IkReal x10732=((1.0)*cj0*cj2);
IkReal x10733=(cj1*sj0*sj2);
CheckValue<IkReal> x10734=IKPowWithIntegerCheck(IKsign((((gconst7*r00))+((gconst8*r01)))),-1);
if(!x10734.valid){
continue;
}
CheckValue<IkReal> x10735 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x10732))+((r22*x10733))+((r12*x10730)))),IkReal((((x10729*x10733))+(((-1.0)*r10*x10730*x10731))+((gconst7*r11*x10730))+((cj0*cj2*gconst8*r20))+(((-1.0)*x10729*x10732))+(((-1.0)*r20*x10731*x10733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10734.value)))+(x10735.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10736=IKsin(j4);
IkReal x10737=IKcos(j4);
IkReal x10738=(gconst8*r00);
IkReal x10739=(cj3*gconst8);
IkReal x10740=((1.0)*sj3);
IkReal x10741=(cj1*cj2);
IkReal x10742=(cj3*gconst7);
IkReal x10743=(cj0*sj2);
IkReal x10744=((1.0)*sj1);
IkReal x10745=(sj0*sj2);
IkReal x10746=(gconst7*sj3);
IkReal x10747=(r01*x10737);
IkReal x10748=(cj3*x10736);
IkReal x10749=(r10*x10737);
IkReal x10750=(sj3*x10736);
IkReal x10751=(r11*x10737);
IkReal x10752=(r21*x10737);
IkReal x10753=((1.0)*x10737);
IkReal x10754=(gconst8*x10736);
IkReal x10755=((1.0)*gconst7*x10736);
evalcond[0]=(((r20*x10754))+(((-1.0)*r21*x10755))+((r22*x10737))+(((-1.0)*sj2*x10744)));
evalcond[1]=(((cj2*sj0))+((r02*x10737))+(((-1.0)*r01*x10755))+((x10736*x10738))+((cj1*x10743)));
evalcond[2]=(((r10*x10754))+(((-1.0)*r11*x10755))+(((-1.0)*cj0*cj2))+((r12*x10737))+((cj1*x10745)));
evalcond[3]=(((x10746*x10752))+cj1+((r22*x10750))+((r21*x10739))+((r20*x10742))+(((-1.0)*gconst8*r20*x10737*x10740)));
evalcond[4]=(((x10746*x10747))+(((-1.0)*x10737*x10738*x10740))+((r02*x10750))+((r01*x10739))+((cj0*sj1))+((r00*x10742)));
evalcond[5]=(((x10746*x10751))+((r10*x10742))+(((-1.0)*gconst8*x10740*x10749))+((sj0*sj1))+((r12*x10750))+((r11*x10739)));
evalcond[6]=((((-1.0)*cj2*x10744))+((r22*x10748))+(((-1.0)*gconst8*r21*x10740))+(((-1.0)*gconst7*r20*x10740))+((x10742*x10752))+(((-1.0)*r20*x10739*x10753)));
evalcond[7]=((((-1.0)*gconst8*r11*x10740))+((sj0*x10741))+(((-1.0)*x10739*x10749))+(((-1.0)*gconst7*r10*x10740))+((r12*x10748))+x10743+((x10742*x10751)));
evalcond[8]=((((-1.0)*x10745))+(((-1.0)*cj3*x10738*x10753))+((cj0*x10741))+(((-1.0)*gconst7*r00*x10740))+(((-1.0)*gconst8*r01*x10740))+((r02*x10748))+((x10742*x10747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10756=((-1.0)*r11);
IkReal x10758 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x10758)==0){
continue;
}
IkReal x10757=pow(x10758,-0.5);
CheckValue<IkReal> x10759 = IKatan2WithCheck(IkReal(x10756),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x10759.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x10759.value))));
IkReal gconst10=(x10756*x10757);
IkReal gconst11=((1.0)*r10*x10757);
CheckValue<IkReal> x10760 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x10760.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10760.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10761=(gconst10*sj2);
IkReal x10762=(cj1*sj0);
IkReal x10763=(sj1*sj2);
IkReal x10764=(gconst11*r20);
IkReal x10765=((1.0)*cj0*cj2);
CheckValue<IkReal> x10766 = IKatan2WithCheck(IkReal((((r12*x10763))+(((-1.0)*r22*x10765))+((r22*sj2*x10762)))),IkReal(((((-1.0)*gconst10*r21*x10765))+((r21*x10761*x10762))+(((-1.0)*gconst11*r10*x10763))+((cj0*cj2*x10764))+(((-1.0)*sj2*x10762*x10764))+((r11*sj1*x10761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10766.valid){
continue;
}
CheckValue<IkReal> x10767=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x10767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10766.value)+(((1.5707963267949)*(x10767.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10768=IKsin(j4);
IkReal x10769=IKcos(j4);
IkReal x10770=(cj3*r10);
IkReal x10771=(gconst10*sj3);
IkReal x10772=((1.0)*r00);
IkReal x10773=(cj1*sj0);
IkReal x10774=((1.0)*sj3);
IkReal x10775=(cj3*gconst11);
IkReal x10776=(cj3*gconst10);
IkReal x10777=((1.0)*sj1);
IkReal x10778=(cj0*cj2);
IkReal x10779=((1.0)*r20);
IkReal x10780=(cj0*sj2);
IkReal x10781=(gconst11*x10769);
IkReal x10782=(r21*x10769);
IkReal x10783=(cj3*x10768);
IkReal x10784=(gconst11*x10768);
IkReal x10785=(r01*x10769);
IkReal x10786=(sj3*x10768);
IkReal x10787=(r11*x10769);
IkReal x10788=((1.0)*gconst10*x10768);
evalcond[0]=((((-1.0)*r21*x10788))+(((-1.0)*sj2*x10777))+((r20*x10784))+((r22*x10769)));
evalcond[1]=(((cj2*sj0))+(((-1.0)*r01*x10788))+((cj1*x10780))+((r00*x10784))+((r02*x10769)));
evalcond[2]=(((r12*x10769))+(((-1.0)*x10778))+(((-1.0)*r11*x10788))+((sj2*x10773))+((r10*x10784)));
evalcond[3]=(((r22*x10786))+cj1+((r20*x10776))+(((-1.0)*r20*x10774*x10781))+((x10771*x10782))+((r21*x10775)));
evalcond[4]=(((r02*x10786))+((x10771*x10785))+(((-1.0)*sj3*x10772*x10781))+((r00*x10776))+((r01*x10775))+((cj0*sj1)));
evalcond[5]=(((r11*x10775))+(((-1.0)*r10*x10774*x10781))+((x10771*x10787))+((sj0*sj1))+((gconst10*x10770))+((r12*x10786)));
evalcond[6]=(((r22*x10783))+(((-1.0)*x10771*x10779))+(((-1.0)*gconst11*r21*x10774))+(((-1.0)*x10769*x10775*x10779))+((x10776*x10782))+(((-1.0)*cj2*x10777)));
evalcond[7]=(((cj2*x10773))+(((-1.0)*r10*x10771))+(((-1.0)*gconst11*r11*x10774))+((x10776*x10787))+(((-1.0)*x10770*x10781))+x10780+((r12*x10783)));
evalcond[8]=((((-1.0)*x10769*x10772*x10775))+((cj1*x10778))+((r02*x10783))+(((-1.0)*x10771*x10772))+(((-1.0)*gconst11*r01*x10774))+(((-1.0)*sj0*sj2))+((x10776*x10785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10790 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x10790)==0){
continue;
}
IkReal x10789=pow(x10790,-0.5);
CheckValue<IkReal> x10791 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10791.valid){
continue;
}
IkReal gconst12=((-1.0)*(x10791.value));
IkReal gconst13=((-1.0)*r01*x10789);
IkReal gconst14=(r00*x10789);
CheckValue<IkReal> x10792 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10792.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x10792.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10793=(cj2*sj0);
IkReal x10794=(sj1*sj2);
IkReal x10795=(gconst13*r21);
IkReal x10796=((1.0)*gconst14);
IkReal x10797=(r20*x10796);
IkReal x10798=(cj0*cj1*sj2);
CheckValue<IkReal> x10799 = IKatan2WithCheck(IkReal((((r02*x10794))+((r22*x10798))+((r22*x10793)))),IkReal((((x10795*x10798))+(((-1.0)*r00*x10794*x10796))+((gconst13*r01*x10794))+(((-1.0)*x10793*x10797))+((x10793*x10795))+(((-1.0)*x10797*x10798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10799.valid){
continue;
}
CheckValue<IkReal> x10800=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x10796)))),-1);
if(!x10800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10799.value)+(((1.5707963267949)*(x10800.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10801=IKsin(j4);
IkReal x10802=IKcos(j4);
IkReal x10803=((1.0)*sj3);
IkReal x10804=(gconst13*r20);
IkReal x10805=(gconst13*r10);
IkReal x10806=((1.0)*sj1);
IkReal x10807=(cj0*cj2);
IkReal x10808=(gconst13*r00);
IkReal x10809=(cj3*gconst14);
IkReal x10810=(cj2*sj0);
IkReal x10811=(cj0*sj2);
IkReal x10812=((1.0)*cj3);
IkReal x10813=(sj0*sj2);
IkReal x10814=(gconst14*x10802);
IkReal x10815=(cj3*x10801);
IkReal x10816=(gconst14*x10801);
IkReal x10817=(sj3*x10801);
IkReal x10818=((1.0)*gconst13*x10801);
IkReal x10819=(gconst13*r21*x10802);
IkReal x10820=(gconst13*r01*x10802);
IkReal x10821=(gconst13*r11*x10802);
evalcond[0]=((((-1.0)*sj2*x10806))+((r22*x10802))+((r20*x10816))+(((-1.0)*r21*x10818)));
evalcond[1]=(((cj1*x10811))+(((-1.0)*r01*x10818))+((r02*x10802))+((r00*x10816))+x10810);
evalcond[2]=(((cj1*x10813))+(((-1.0)*r11*x10818))+((r12*x10802))+(((-1.0)*x10807))+((r10*x10816)));
evalcond[3]=(((r22*x10817))+cj1+((cj3*x10804))+((r21*x10809))+((sj3*x10819))+(((-1.0)*r20*x10803*x10814)));
evalcond[4]=(((r02*x10817))+((cj3*x10808))+((r01*x10809))+(((-1.0)*r00*x10803*x10814))+((sj3*x10820))+((cj0*sj1)));
evalcond[5]=(((cj3*x10805))+(((-1.0)*r10*x10803*x10814))+((r11*x10809))+((sj0*sj1))+((sj3*x10821))+((r12*x10817)));
evalcond[6]=(((r22*x10815))+(((-1.0)*cj2*x10806))+(((-1.0)*x10803*x10804))+(((-1.0)*gconst14*r21*x10803))+((cj3*x10819))+(((-1.0)*r20*x10802*x10809)));
evalcond[7]=(((cj1*x10810))+(((-1.0)*r10*x10802*x10809))+(((-1.0)*x10803*x10805))+((cj3*x10821))+(((-1.0)*gconst14*r11*x10803))+((r12*x10815))+x10811);
evalcond[8]=((((-1.0)*r00*x10802*x10809))+((r02*x10815))+(((-1.0)*x10813))+(((-1.0)*x10803*x10808))+(((-1.0)*gconst14*r01*x10803))+((cj1*x10807))+((cj3*x10820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10823 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x10823)==0){
continue;
}
IkReal x10822=pow(x10823,-0.5);
CheckValue<IkReal> x10824 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10824.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x10824.value))));
IkReal gconst16=((1.0)*r01*x10822);
IkReal gconst17=((-1.0)*r00*x10822);
CheckValue<IkReal> x10825 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10825.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10825.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x10828 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x10828.valid){
continue;
}
IkReal x10826=((1.0)*(x10828.value));
IkReal x10827=x10822;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x10826)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x10826)));
IkReal gconst16=((1.0)*r01*x10827);
IkReal gconst17=((-1.0)*r00*x10827);
j4eval[0]=0;
j4eval[1]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10829=((1.0)*gconst17);
IkReal x10830=(sj1*sj2);
IkReal x10831=(cj2*sj0);
IkReal x10832=(gconst16*r21);
IkReal x10833=(cj0*cj1*sj2);
CheckValue<IkReal> x10834 = IKatan2WithCheck(IkReal((((r22*x10833))+((r22*x10831))+((r02*x10830)))),IkReal((((x10832*x10833))+((gconst16*r01*x10830))+((x10831*x10832))+(((-1.0)*r20*x10829*x10831))+(((-1.0)*r20*x10829*x10833))+(((-1.0)*r00*x10829*x10830)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10834.valid){
continue;
}
CheckValue<IkReal> x10835=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x10829)))),-1);
if(!x10835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10834.value)+(((1.5707963267949)*(x10835.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10836=IKsin(j4);
IkReal x10837=IKcos(j4);
IkReal x10838=((1.0)*gconst17);
IkReal x10839=(cj1*sj0);
IkReal x10840=(r01*sj3);
IkReal x10841=(gconst16*r11);
IkReal x10842=(gconst16*r21);
IkReal x10843=(cj3*gconst17);
IkReal x10844=((1.0)*sj1);
IkReal x10845=(cj0*cj2);
IkReal x10846=(gconst16*r10);
IkReal x10847=((1.0)*sj3);
IkReal x10848=(gconst16*r00);
IkReal x10849=(cj0*sj2);
IkReal x10850=(gconst16*r20);
IkReal x10851=(cj3*x10837);
IkReal x10852=(cj3*x10836);
IkReal x10853=(sj3*x10836);
IkReal x10854=(gconst17*x10836);
IkReal x10855=(sj3*x10837);
IkReal x10856=((1.0)*gconst16*x10836);
evalcond[0]=((((-1.0)*x10836*x10842))+(((-1.0)*sj2*x10844))+((r22*x10837))+((r20*x10854)));
evalcond[1]=(((cj2*sj0))+((r02*x10837))+((cj1*x10849))+(((-1.0)*r01*x10856))+((r00*x10854)));
evalcond[2]=((((-1.0)*x10836*x10841))+((r10*x10854))+(((-1.0)*x10845))+((r12*x10837))+((sj2*x10839)));
evalcond[3]=(((cj3*x10850))+((x10842*x10855))+cj1+(((-1.0)*r20*x10838*x10855))+((r21*x10843))+((r22*x10853)));
evalcond[4]=(((r01*x10843))+((cj3*x10848))+((gconst16*x10837*x10840))+((r02*x10853))+((cj0*sj1))+(((-1.0)*r00*x10838*x10855)));
evalcond[5]=(((r12*x10853))+((x10841*x10855))+((cj3*x10846))+((sj0*sj1))+((r11*x10843))+(((-1.0)*r10*x10838*x10855)));
evalcond[6]=(((x10842*x10851))+(((-1.0)*cj2*x10844))+(((-1.0)*r20*x10838*x10851))+(((-1.0)*r21*sj3*x10838))+((r22*x10852))+(((-1.0)*x10847*x10850)));
evalcond[7]=(((r12*x10852))+((x10841*x10851))+(((-1.0)*x10846*x10847))+((cj2*x10839))+(((-1.0)*r10*x10838*x10851))+(((-1.0)*r11*sj3*x10838))+x10849);
evalcond[8]=((((-1.0)*x10847*x10848))+((cj1*x10845))+(((-1.0)*sj0*sj2))+(((-1.0)*x10838*x10840))+((r02*x10852))+((gconst16*r01*x10851))+(((-1.0)*r00*x10838*x10851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10857=(gconst17*r20);
IkReal x10858=(cj0*cj2);
IkReal x10859=(gconst16*r21);
IkReal x10860=(sj1*sj2);
IkReal x10861=(cj1*sj0*sj2);
CheckValue<IkReal> x10862=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x10862.valid){
continue;
}
CheckValue<IkReal> x10863 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x10858))+((r12*x10860))+((r22*x10861)))),IkReal((((x10859*x10861))+((x10857*x10858))+(((-1.0)*gconst17*r10*x10860))+(((-1.0)*x10858*x10859))+(((-1.0)*x10857*x10861))+((gconst16*r11*x10860)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10862.value)))+(x10863.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10864=IKsin(j4);
IkReal x10865=IKcos(j4);
IkReal x10866=((1.0)*gconst17);
IkReal x10867=(cj1*sj0);
IkReal x10868=(r01*sj3);
IkReal x10869=(gconst16*r11);
IkReal x10870=(gconst16*r21);
IkReal x10871=(cj3*gconst17);
IkReal x10872=((1.0)*sj1);
IkReal x10873=(cj0*cj2);
IkReal x10874=(gconst16*r10);
IkReal x10875=((1.0)*sj3);
IkReal x10876=(gconst16*r00);
IkReal x10877=(cj0*sj2);
IkReal x10878=(gconst16*r20);
IkReal x10879=(cj3*x10865);
IkReal x10880=(cj3*x10864);
IkReal x10881=(sj3*x10864);
IkReal x10882=(gconst17*x10864);
IkReal x10883=(sj3*x10865);
IkReal x10884=((1.0)*gconst16*x10864);
evalcond[0]=((((-1.0)*x10864*x10870))+((r22*x10865))+(((-1.0)*sj2*x10872))+((r20*x10882)));
evalcond[1]=(((cj2*sj0))+(((-1.0)*r01*x10884))+((r00*x10882))+((cj1*x10877))+((r02*x10865)));
evalcond[2]=((((-1.0)*x10864*x10869))+((r12*x10865))+((sj2*x10867))+(((-1.0)*x10873))+((r10*x10882)));
evalcond[3]=(((r21*x10871))+((cj3*x10878))+cj1+(((-1.0)*r20*x10866*x10883))+((r22*x10881))+((x10870*x10883)));
evalcond[4]=(((cj3*x10876))+((gconst16*x10865*x10868))+(((-1.0)*r00*x10866*x10883))+((r02*x10881))+((r01*x10871))+((cj0*sj1)));
evalcond[5]=(((cj3*x10874))+((r11*x10871))+((x10869*x10883))+((sj0*sj1))+((r12*x10881))+(((-1.0)*r10*x10866*x10883)));
evalcond[6]=((((-1.0)*r20*x10866*x10879))+((x10870*x10879))+((r22*x10880))+(((-1.0)*x10875*x10878))+(((-1.0)*r21*sj3*x10866))+(((-1.0)*cj2*x10872)));
evalcond[7]=(((cj2*x10867))+(((-1.0)*r11*sj3*x10866))+(((-1.0)*r10*x10866*x10879))+(((-1.0)*x10874*x10875))+((r12*x10880))+((x10869*x10879))+x10877);
evalcond[8]=(((gconst16*r01*x10879))+(((-1.0)*r00*x10866*x10879))+(((-1.0)*x10866*x10868))+(((-1.0)*x10875*x10876))+((r02*x10880))+((cj1*x10873))+(((-1.0)*sj0*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10885=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10885);
rxp1_1=(px*r21);
rxp1_2=(r11*x10885);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10886=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10886);
rxp1_1=(px*r21);
rxp1_2=(r11*x10886);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10887=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10887);
rxp1_1=(px*r21);
rxp1_2=(r11*x10887);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x10888=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10888);
rxp1_1=(px*r21);
rxp1_2=(r11*x10888);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
j4eval[1]=IKsign(r02);
j4eval[2]=((IKabs(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2)))))+(IKabs((cj0*sj1))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10889=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10889);
rxp1_1=(px*r21);
rxp1_2=(r11*x10889);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10890=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10890);
rxp1_1=(px*r21);
rxp1_2=(r11*x10890);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x10891=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10891);
rxp1_1=(px*r21);
rxp1_2=(r11*x10891);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x10892=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x10892;
j4eval[1]=((IKabs(cj1))+(IKabs(sj1)));
j4eval[2]=IKsign(x10892);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10893=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10893);
rxp1_1=(px*r21);
rxp1_2=(r11*x10893);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x10894=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x10894;
j4eval[1]=IKsign(x10894);
j4eval[2]=((IKabs(cj1))+(IKabs(sj1)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10895=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10895);
rxp1_1=(px*r21);
rxp1_2=(r11*x10895);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10896=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x10896.valid){
continue;
}
CheckValue<IkReal> x10897=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x10897.valid){
continue;
}
if( IKabs((sj1*(x10896.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj1*(x10897.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj1*(x10896.value)))+IKsqr(((-1.0)*sj1*(x10897.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj1*(x10896.value)), ((-1.0)*sj1*(x10897.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10898=IKsin(j4);
IkReal x10899=IKcos(j4);
IkReal x10900=(sj5*x10899);
IkReal x10901=(cj5*x10898);
IkReal x10902=((1.0)*sj5*x10898);
IkReal x10903=((1.0)*cj5*x10899);
evalcond[0]=(r02*x10899);
evalcond[1]=(r02*x10898);
evalcond[2]=(cj1+(((-1.0)*r11*x10902))+((r10*x10901)));
evalcond[3]=(cj1+(((-1.0)*r20*x10903))+((r21*x10900)));
evalcond[4]=(sj1+(((-1.0)*r10*x10903))+((r11*x10900)));
evalcond[5]=((((-1.0)*sj1))+(((-1.0)*r21*x10902))+((r20*x10901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10904=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x10904.valid){
continue;
}
CheckValue<IkReal> x10905 = IKatan2WithCheck(IkReal(((-1.0)*cj1)),IkReal(sj1),IKFAST_ATAN2_MAGTHRESH);
if(!x10905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10904.value)))+(x10905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10906=IKsin(j4);
IkReal x10907=IKcos(j4);
IkReal x10908=(sj5*x10907);
IkReal x10909=(cj5*x10906);
IkReal x10910=((1.0)*sj5*x10906);
IkReal x10911=((1.0)*cj5*x10907);
evalcond[0]=(r02*x10907);
evalcond[1]=(r02*x10906);
evalcond[2]=(cj1+(((-1.0)*r11*x10910))+((r10*x10909)));
evalcond[3]=(cj1+(((-1.0)*r20*x10911))+((r21*x10908)));
evalcond[4]=(sj1+(((-1.0)*r10*x10911))+((r11*x10908)));
evalcond[5]=((((-1.0)*sj1))+(((-1.0)*r21*x10910))+((r20*x10909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10912 = IKatan2WithCheck(IkReal(sj1),IkReal(cj1),IKFAST_ATAN2_MAGTHRESH);
if(!x10912.valid){
continue;
}
CheckValue<IkReal> x10913=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x10913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10912.value)+(((1.5707963267949)*(x10913.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10914=IKsin(j4);
IkReal x10915=IKcos(j4);
IkReal x10916=(sj5*x10915);
IkReal x10917=(cj5*x10914);
IkReal x10918=((1.0)*sj5*x10914);
IkReal x10919=((1.0)*cj5*x10915);
evalcond[0]=(r02*x10915);
evalcond[1]=(r02*x10914);
evalcond[2]=(cj1+(((-1.0)*r11*x10918))+((r10*x10917)));
evalcond[3]=(cj1+(((-1.0)*r20*x10919))+((r21*x10916)));
evalcond[4]=(sj1+(((-1.0)*r10*x10919))+((r11*x10916)));
evalcond[5]=((((-1.0)*sj1))+(((-1.0)*r21*x10918))+((r20*x10917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x10920=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10920);
rxp1_1=(px*r21);
rxp1_2=(r11*x10920);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x10921=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x10921;
j4eval[1]=((IKabs(cj1))+(IKabs(sj1)));
j4eval[2]=IKsign(x10921);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10922=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10922);
rxp1_1=(px*r21);
rxp1_2=(r11*x10922);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x10923=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x10923;
j4eval[1]=IKsign(x10923);
j4eval[2]=((IKabs(cj1))+(IKabs(sj1)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10924=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10924);
rxp1_1=(px*r21);
rxp1_2=(r11*x10924);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10925=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x10925.valid){
continue;
}
CheckValue<IkReal> x10926=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x10926.valid){
continue;
}
if( IKabs((sj1*(x10925.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj1*(x10926.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj1*(x10925.value)))+IKsqr((sj1*(x10926.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj1*(x10925.value)), (sj1*(x10926.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10927=IKcos(j4);
IkReal x10928=IKsin(j4);
IkReal x10929=((1.0)*sj1);
IkReal x10930=(cj5*r10);
IkReal x10931=(cj5*r20);
IkReal x10932=((1.0)*x10927);
IkReal x10933=(sj5*x10927);
IkReal x10934=((1.0)*sj5*x10928);
evalcond[0]=(r02*x10927);
evalcond[1]=(r02*x10928);
evalcond[2]=((((-1.0)*x10931*x10932))+cj1+((r21*x10933)));
evalcond[3]=((((-1.0)*x10929))+(((-1.0)*r21*x10934))+((x10928*x10931)));
evalcond[4]=((((-1.0)*r11*x10934))+((x10928*x10930))+(((-1.0)*cj1)));
evalcond[5]=((((-1.0)*x10929))+((r11*x10933))+(((-1.0)*x10930*x10932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10935=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x10935.valid){
continue;
}
CheckValue<IkReal> x10936 = IKatan2WithCheck(IkReal(cj1),IkReal(((-1.0)*sj1)),IKFAST_ATAN2_MAGTHRESH);
if(!x10936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10935.value)))+(x10936.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10937=IKcos(j4);
IkReal x10938=IKsin(j4);
IkReal x10939=((1.0)*sj1);
IkReal x10940=(cj5*r10);
IkReal x10941=(cj5*r20);
IkReal x10942=((1.0)*x10937);
IkReal x10943=(sj5*x10937);
IkReal x10944=((1.0)*sj5*x10938);
evalcond[0]=(r02*x10937);
evalcond[1]=(r02*x10938);
evalcond[2]=(((r21*x10943))+cj1+(((-1.0)*x10941*x10942)));
evalcond[3]=((((-1.0)*x10939))+((x10938*x10941))+(((-1.0)*r21*x10944)));
evalcond[4]=((((-1.0)*r11*x10944))+((x10938*x10940))+(((-1.0)*cj1)));
evalcond[5]=(((r11*x10943))+(((-1.0)*x10939))+(((-1.0)*x10940*x10942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10945 = IKatan2WithCheck(IkReal(sj1),IkReal(cj1),IKFAST_ATAN2_MAGTHRESH);
if(!x10945.valid){
continue;
}
CheckValue<IkReal> x10946=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x10946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10945.value)+(((1.5707963267949)*(x10946.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10947=IKcos(j4);
IkReal x10948=IKsin(j4);
IkReal x10949=((1.0)*sj1);
IkReal x10950=(cj5*r10);
IkReal x10951=(cj5*r20);
IkReal x10952=((1.0)*x10947);
IkReal x10953=(sj5*x10947);
IkReal x10954=((1.0)*sj5*x10948);
evalcond[0]=(r02*x10947);
evalcond[1]=(r02*x10948);
evalcond[2]=(cj1+(((-1.0)*x10951*x10952))+((r21*x10953)));
evalcond[3]=((((-1.0)*r21*x10954))+(((-1.0)*x10949))+((x10948*x10951)));
evalcond[4]=((((-1.0)*cj1))+(((-1.0)*r11*x10954))+((x10948*x10950)));
evalcond[5]=((((-1.0)*x10949))+(((-1.0)*x10950*x10952))+((r11*x10953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x10955=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10955);
rxp1_1=(px*r21);
rxp1_2=(r11*x10955);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x10956=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x10956;
j4eval[1]=((IKabs(cj1))+(IKabs(sj1)));
j4eval[2]=IKsign(x10956);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10957=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10957);
rxp1_1=(px*r21);
rxp1_2=(r11*x10957);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x10958=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x10958;
j4eval[1]=((IKabs(cj1))+(IKabs(sj1)));
j4eval[2]=IKsign(x10958);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10959=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10959);
rxp1_1=(px*r21);
rxp1_2=(r11*x10959);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10960=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x10960.valid){
continue;
}
CheckValue<IkReal> x10961=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x10961.valid){
continue;
}
if( IKabs((cj1*(x10960.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj1*(x10961.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*(x10960.value)))+IKsqr(((-1.0)*cj1*(x10961.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj1*(x10960.value)), ((-1.0)*cj1*(x10961.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10962=IKsin(j4);
IkReal x10963=IKcos(j4);
IkReal x10964=(cj5*r10);
IkReal x10965=(cj5*r20);
IkReal x10966=((1.0)*x10963);
IkReal x10967=(sj5*x10963);
IkReal x10968=((1.0)*sj5*x10962);
evalcond[0]=(r02*x10963);
evalcond[1]=(r02*x10962);
evalcond[2]=((((-1.0)*r21*x10968))+sj1+((x10962*x10965)));
evalcond[3]=(cj1+((r21*x10967))+(((-1.0)*x10965*x10966)));
evalcond[4]=(((r11*x10967))+sj1+(((-1.0)*x10964*x10966)));
evalcond[5]=(((x10962*x10964))+(((-1.0)*r11*x10968))+(((-1.0)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10969 = IKatan2WithCheck(IkReal(((-1.0)*sj1)),IkReal(cj1),IKFAST_ATAN2_MAGTHRESH);
if(!x10969.valid){
continue;
}
CheckValue<IkReal> x10970=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x10970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10969.value)+(((1.5707963267949)*(x10970.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10971=IKsin(j4);
IkReal x10972=IKcos(j4);
IkReal x10973=(cj5*r10);
IkReal x10974=(cj5*r20);
IkReal x10975=((1.0)*x10972);
IkReal x10976=(sj5*x10972);
IkReal x10977=((1.0)*sj5*x10971);
evalcond[0]=(r02*x10972);
evalcond[1]=(r02*x10971);
evalcond[2]=(sj1+(((-1.0)*r21*x10977))+((x10971*x10974)));
evalcond[3]=(cj1+((r21*x10976))+(((-1.0)*x10974*x10975)));
evalcond[4]=(((r11*x10976))+(((-1.0)*x10973*x10975))+sj1);
evalcond[5]=(((x10971*x10973))+(((-1.0)*r11*x10977))+(((-1.0)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10978 = IKatan2WithCheck(IkReal(cj1),IkReal(sj1),IKFAST_ATAN2_MAGTHRESH);
if(!x10978.valid){
continue;
}
CheckValue<IkReal> x10979=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x10979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10978.value)+(((1.5707963267949)*(x10979.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10980=IKsin(j4);
IkReal x10981=IKcos(j4);
IkReal x10982=(cj5*r10);
IkReal x10983=(cj5*r20);
IkReal x10984=((1.0)*x10981);
IkReal x10985=(sj5*x10981);
IkReal x10986=((1.0)*sj5*x10980);
evalcond[0]=(r02*x10981);
evalcond[1]=(r02*x10980);
evalcond[2]=(sj1+((x10980*x10983))+(((-1.0)*r21*x10986)));
evalcond[3]=((((-1.0)*x10983*x10984))+((r21*x10985))+cj1);
evalcond[4]=(sj1+((r11*x10985))+(((-1.0)*x10982*x10984)));
evalcond[5]=(((x10980*x10982))+(((-1.0)*r11*x10986))+(((-1.0)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x10987=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10987);
rxp1_1=(px*r21);
rxp1_2=(r11*x10987);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x10988=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x10988;
j4eval[1]=((IKabs(cj1))+(IKabs(sj1)));
j4eval[2]=IKsign(x10988);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10989=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10989);
rxp1_1=(px*r21);
rxp1_2=(r11*x10989);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x10990=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x10990;
j4eval[1]=IKsign(x10990);
j4eval[2]=((IKabs(cj1))+(IKabs(sj1)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10991=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10991);
rxp1_1=(px*r21);
rxp1_2=(r11*x10991);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10992=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x10992.valid){
continue;
}
CheckValue<IkReal> x10993=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x10993.valid){
continue;
}
if( IKabs(((-1.0)*sj1*(x10992.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj1*(x10993.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj1*(x10992.value)))+IKsqr((sj1*(x10993.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj1*(x10992.value)), (sj1*(x10993.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10994=IKsin(j4);
IkReal x10995=IKcos(j4);
IkReal x10996=(cj5*r10);
IkReal x10997=(cj5*r20);
IkReal x10998=((1.0)*x10995);
IkReal x10999=(sj5*x10995);
IkReal x11000=((1.0)*sj5*x10994);
evalcond[0]=(r02*x10995);
evalcond[1]=(r02*x10994);
evalcond[2]=(sj1+(((-1.0)*r21*x11000))+((x10994*x10997)));
evalcond[3]=(cj1+(((-1.0)*r11*x11000))+((x10994*x10996)));
evalcond[4]=((((-1.0)*x10997*x10998))+((r21*x10999))+cj1);
evalcond[5]=((((-1.0)*sj1))+((r11*x10999))+(((-1.0)*x10996*x10998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11001 = IKatan2WithCheck(IkReal(((-1.0)*cj1)),IkReal(((-1.0)*sj1)),IKFAST_ATAN2_MAGTHRESH);
if(!x11001.valid){
continue;
}
CheckValue<IkReal> x11002=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x11002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11001.value)+(((1.5707963267949)*(x11002.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11003=IKsin(j4);
IkReal x11004=IKcos(j4);
IkReal x11005=(cj5*r10);
IkReal x11006=(cj5*r20);
IkReal x11007=((1.0)*x11004);
IkReal x11008=(sj5*x11004);
IkReal x11009=((1.0)*sj5*x11003);
evalcond[0]=(r02*x11004);
evalcond[1]=(r02*x11003);
evalcond[2]=(sj1+((x11003*x11006))+(((-1.0)*r21*x11009)));
evalcond[3]=(cj1+((x11003*x11005))+(((-1.0)*r11*x11009)));
evalcond[4]=(cj1+((r21*x11008))+(((-1.0)*x11006*x11007)));
evalcond[5]=((((-1.0)*sj1))+(((-1.0)*x11005*x11007))+((r11*x11008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11010 = IKatan2WithCheck(IkReal(((-1.0)*sj1)),IkReal(cj1),IKFAST_ATAN2_MAGTHRESH);
if(!x11010.valid){
continue;
}
CheckValue<IkReal> x11011=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x11011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11010.value)+(((1.5707963267949)*(x11011.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11012=IKsin(j4);
IkReal x11013=IKcos(j4);
IkReal x11014=(cj5*r10);
IkReal x11015=(cj5*r20);
IkReal x11016=((1.0)*x11013);
IkReal x11017=(sj5*x11013);
IkReal x11018=((1.0)*sj5*x11012);
evalcond[0]=(r02*x11013);
evalcond[1]=(r02*x11012);
evalcond[2]=(sj1+((x11012*x11015))+(((-1.0)*r21*x11018)));
evalcond[3]=(cj1+((x11012*x11014))+(((-1.0)*r11*x11018)));
evalcond[4]=(cj1+(((-1.0)*x11015*x11016))+((r21*x11017)));
evalcond[5]=((((-1.0)*sj1))+(((-1.0)*x11014*x11016))+((r11*x11017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11019=((-1.0)*sj1);
CheckValue<IkReal> x11020=IKPowWithIntegerCheck(r02,-1);
if(!x11020.valid){
continue;
}
CheckValue<IkReal> x11021=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x11021.valid){
continue;
}
if( IKabs((cj0*x11019*(x11020.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x11019*(x11021.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*x11019*(x11020.value)))+IKsqr((sj0*x11019*(x11021.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*x11019*(x11020.value)), (sj0*x11019*(x11021.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11022=IKcos(j4);
IkReal x11023=IKsin(j4);
IkReal x11024=(cj1*sj2);
IkReal x11025=(sj5*x11022);
IkReal x11026=(cj5*x11023);
IkReal x11027=((1.0)*sj5*x11023);
IkReal x11028=((1.0)*cj5*x11022);
evalcond[0]=(((r02*x11023))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((cj0*x11024))+((r02*x11022)));
evalcond[2]=((((-1.0)*r20*x11028))+((r21*x11025))+cj1);
evalcond[3]=(((sj0*sj1))+(((-1.0)*r10*x11028))+((r11*x11025)));
evalcond[4]=((((-1.0)*r21*x11027))+((r20*x11026))+(((-1.0)*sj1*sj2)));
evalcond[5]=(((r10*x11026))+((sj0*x11024))+(((-1.0)*r11*x11027))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11029=IKPowWithIntegerCheck(r02,-1);
if(!x11029.valid){
continue;
}
CheckValue<IkReal> x11030=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x11030.valid){
continue;
}
if( IKabs(((-1.0)*cj0*sj1*(x11029.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj1*(x11030.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*sj1*(x11029.value)))+IKsqr(((-1.0)*cj1*(x11030.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*sj1*(x11029.value)), ((-1.0)*cj1*(x11030.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11031=IKcos(j4);
IkReal x11032=IKsin(j4);
IkReal x11033=(cj1*sj2);
IkReal x11034=(sj5*x11031);
IkReal x11035=(cj5*x11032);
IkReal x11036=((1.0)*sj5*x11032);
IkReal x11037=((1.0)*cj5*x11031);
evalcond[0]=(((r02*x11032))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((cj0*x11033))+((r02*x11031)));
evalcond[2]=((((-1.0)*r20*x11037))+((r21*x11034))+cj1);
evalcond[3]=(((sj0*sj1))+(((-1.0)*r10*x11037))+((r11*x11034)));
evalcond[4]=(((r20*x11035))+(((-1.0)*r21*x11036))+(((-1.0)*sj1*sj2)));
evalcond[5]=(((r10*x11035))+((sj0*x11033))+(((-1.0)*r11*x11036))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11038=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x11038.valid){
continue;
}
CheckValue<IkReal> x11039 = IKatan2WithCheck(IkReal(((-1.0)*cj0*sj1)),IkReal(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11038.value)))+(x11039.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11040=IKcos(j4);
IkReal x11041=IKsin(j4);
IkReal x11042=(cj1*sj2);
IkReal x11043=(sj5*x11040);
IkReal x11044=(cj5*x11041);
IkReal x11045=((1.0)*sj5*x11041);
IkReal x11046=((1.0)*cj5*x11040);
evalcond[0]=(((r02*x11041))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((cj0*x11042))+((r02*x11040)));
evalcond[2]=(cj1+(((-1.0)*r20*x11046))+((r21*x11043)));
evalcond[3]=(((r11*x11043))+((sj0*sj1))+(((-1.0)*r10*x11046)));
evalcond[4]=(((r20*x11044))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x11045)));
evalcond[5]=(((r10*x11044))+((sj0*x11042))+(((-1.0)*r11*x11045))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11047=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11047);
rxp1_1=(px*r21);
rxp1_2=(r11*x11047);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
j4eval[1]=IKsign(r02);
j4eval[2]=((IKabs(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2)))))+(IKabs((cj0*sj1))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11048=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11048);
rxp1_1=(px*r21);
rxp1_2=(r11*x11048);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11049=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11049);
rxp1_1=(px*r21);
rxp1_2=(r11*x11049);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11050=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11050);
rxp1_1=(px*r21);
rxp1_2=(r11*x11050);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x11051=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x11051;
j4eval[1]=((IKabs(cj1))+(IKabs(sj1)));
j4eval[2]=IKsign(x11051);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11052=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11052);
rxp1_1=(px*r21);
rxp1_2=(r11*x11052);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x11053=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x11053;
j4eval[1]=IKsign(x11053);
j4eval[2]=((IKabs(cj1))+(IKabs(sj1)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11054=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11054);
rxp1_1=(px*r21);
rxp1_2=(r11*x11054);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x11055=((1.0)*sj5);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*x11055)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*x11055)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11056=((1.0)*sj5);
CheckValue<IkReal> x11057=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*x11056))),-1);
if(!x11057.valid){
continue;
}
CheckValue<IkReal> x11058=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*x11056))),-1);
if(!x11058.valid){
continue;
}
if( IKabs((sj1*(x11057.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj1*(x11058.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj1*(x11057.value)))+IKsqr(((-1.0)*sj1*(x11058.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj1*(x11057.value)), ((-1.0)*sj1*(x11058.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11059=IKsin(j4);
IkReal x11060=IKcos(j4);
IkReal x11061=((1.0)*r11*sj5);
IkReal x11062=(cj5*x11060);
IkReal x11063=(cj5*x11059);
IkReal x11064=((1.0)*r21*sj5);
evalcond[0]=(r02*x11060);
evalcond[1]=((-1.0)*r02*x11059);
evalcond[2]=(cj1+((r10*x11063))+(((-1.0)*x11059*x11061)));
evalcond[3]=(((r20*x11062))+cj1+(((-1.0)*x11060*x11064)));
evalcond[4]=(sj1+(((-1.0)*x11060*x11061))+((r10*x11062)));
evalcond[5]=((((-1.0)*sj1))+((r20*x11063))+(((-1.0)*x11059*x11064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11065 = IKatan2WithCheck(IkReal(((-1.0)*cj1)),IkReal(((-1.0)*sj1)),IKFAST_ATAN2_MAGTHRESH);
if(!x11065.valid){
continue;
}
CheckValue<IkReal> x11066=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x11066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11065.value)+(((1.5707963267949)*(x11066.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11067=IKsin(j4);
IkReal x11068=IKcos(j4);
IkReal x11069=((1.0)*r11*sj5);
IkReal x11070=(cj5*x11068);
IkReal x11071=(cj5*x11067);
IkReal x11072=((1.0)*r21*sj5);
evalcond[0]=(r02*x11068);
evalcond[1]=((-1.0)*r02*x11067);
evalcond[2]=(cj1+(((-1.0)*x11067*x11069))+((r10*x11071)));
evalcond[3]=(cj1+((r20*x11070))+(((-1.0)*x11068*x11072)));
evalcond[4]=((((-1.0)*x11068*x11069))+sj1+((r10*x11070)));
evalcond[5]=((((-1.0)*sj1))+(((-1.0)*x11067*x11072))+((r20*x11071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11073 = IKatan2WithCheck(IkReal(sj1),IkReal(((-1.0)*cj1)),IKFAST_ATAN2_MAGTHRESH);
if(!x11073.valid){
continue;
}
CheckValue<IkReal> x11074=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x11074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11073.value)+(((1.5707963267949)*(x11074.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11075=IKsin(j4);
IkReal x11076=IKcos(j4);
IkReal x11077=((1.0)*r11*sj5);
IkReal x11078=(cj5*x11076);
IkReal x11079=(cj5*x11075);
IkReal x11080=((1.0)*r21*sj5);
evalcond[0]=(r02*x11076);
evalcond[1]=((-1.0)*r02*x11075);
evalcond[2]=(cj1+((r10*x11079))+(((-1.0)*x11075*x11077)));
evalcond[3]=((((-1.0)*x11076*x11080))+cj1+((r20*x11078)));
evalcond[4]=(sj1+((r10*x11078))+(((-1.0)*x11076*x11077)));
evalcond[5]=((((-1.0)*x11075*x11080))+(((-1.0)*sj1))+((r20*x11079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11081=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11081);
rxp1_1=(px*r21);
rxp1_2=(r11*x11081);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x11082=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x11082;
j4eval[1]=((IKabs(cj1))+(IKabs(sj1)));
j4eval[2]=IKsign(x11082);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11083=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11083);
rxp1_1=(px*r21);
rxp1_2=(r11*x11083);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x11084=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x11084;
j4eval[1]=((IKabs(cj1))+(IKabs(sj1)));
j4eval[2]=IKsign(x11084);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11085=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11085);
rxp1_1=(px*r21);
rxp1_2=(r11*x11085);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x11086=((1.0)*sj5);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*x11086)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*x11086)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11087=((1.0)*sj5);
CheckValue<IkReal> x11088=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*x11087))),-1);
if(!x11088.valid){
continue;
}
CheckValue<IkReal> x11089=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*x11087))),-1);
if(!x11089.valid){
continue;
}
if( IKabs((sj1*(x11088.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj1*(x11089.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj1*(x11088.value)))+IKsqr((sj1*(x11089.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj1*(x11088.value)), (sj1*(x11089.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11090=IKcos(j4);
IkReal x11091=IKsin(j4);
IkReal x11092=((1.0)*sj1);
IkReal x11093=(cj5*x11090);
IkReal x11094=(cj5*x11091);
IkReal x11095=((1.0)*sj5*x11090);
IkReal x11096=((1.0)*sj5*x11091);
evalcond[0]=(r02*x11090);
evalcond[1]=((-1.0)*r02*x11091);
evalcond[2]=(cj1+((r20*x11093))+(((-1.0)*r21*x11095)));
evalcond[3]=((((-1.0)*x11092))+((r20*x11094))+(((-1.0)*r21*x11096)));
evalcond[4]=((((-1.0)*r11*x11096))+((r10*x11094))+(((-1.0)*cj1)));
evalcond[5]=((((-1.0)*r11*x11095))+(((-1.0)*x11092))+((r10*x11093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11097 = IKatan2WithCheck(IkReal(sj1),IkReal(((-1.0)*cj1)),IKFAST_ATAN2_MAGTHRESH);
if(!x11097.valid){
continue;
}
CheckValue<IkReal> x11098=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x11098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11097.value)+(((1.5707963267949)*(x11098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11099=IKcos(j4);
IkReal x11100=IKsin(j4);
IkReal x11101=((1.0)*sj1);
IkReal x11102=(cj5*x11099);
IkReal x11103=(cj5*x11100);
IkReal x11104=((1.0)*sj5*x11099);
IkReal x11105=((1.0)*sj5*x11100);
evalcond[0]=(r02*x11099);
evalcond[1]=((-1.0)*r02*x11100);
evalcond[2]=((((-1.0)*r21*x11104))+cj1+((r20*x11102)));
evalcond[3]=((((-1.0)*r21*x11105))+((r20*x11103))+(((-1.0)*x11101)));
evalcond[4]=(((r10*x11103))+(((-1.0)*r11*x11105))+(((-1.0)*cj1)));
evalcond[5]=(((r10*x11102))+(((-1.0)*r11*x11104))+(((-1.0)*x11101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11106 = IKatan2WithCheck(IkReal(cj1),IkReal(sj1),IKFAST_ATAN2_MAGTHRESH);
if(!x11106.valid){
continue;
}
CheckValue<IkReal> x11107=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x11107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11106.value)+(((1.5707963267949)*(x11107.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11108=IKcos(j4);
IkReal x11109=IKsin(j4);
IkReal x11110=((1.0)*sj1);
IkReal x11111=(cj5*x11108);
IkReal x11112=(cj5*x11109);
IkReal x11113=((1.0)*sj5*x11108);
IkReal x11114=((1.0)*sj5*x11109);
evalcond[0]=(r02*x11108);
evalcond[1]=((-1.0)*r02*x11109);
evalcond[2]=((((-1.0)*r21*x11113))+cj1+((r20*x11111)));
evalcond[3]=((((-1.0)*r21*x11114))+((r20*x11112))+(((-1.0)*x11110)));
evalcond[4]=(((r10*x11112))+(((-1.0)*r11*x11114))+(((-1.0)*cj1)));
evalcond[5]=(((r10*x11111))+(((-1.0)*r11*x11113))+(((-1.0)*x11110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11115=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11115);
rxp1_1=(px*r21);
rxp1_2=(r11*x11115);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x11116=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x11116;
j4eval[1]=IKsign(x11116);
j4eval[2]=((IKabs(cj1))+(IKabs(sj1)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11117=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11117);
rxp1_1=(px*r21);
rxp1_2=(r11*x11117);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x11118=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x11118;
j4eval[1]=((IKabs(cj1))+(IKabs(sj1)));
j4eval[2]=IKsign(x11118);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11119=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11119);
rxp1_1=(px*r21);
rxp1_2=(r11*x11119);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=1.5707963267949;
sj0=1.0;
cj0=0;
IkReal x11120=((1.0)*sj5);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*x11120)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*x11120)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11121=((1.0)*sj5);
CheckValue<IkReal> x11122=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*x11121))),-1);
if(!x11122.valid){
continue;
}
CheckValue<IkReal> x11123=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*x11121))),-1);
if(!x11123.valid){
continue;
}
if( IKabs((cj1*(x11122.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj1*(x11123.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*(x11122.value)))+IKsqr(((-1.0)*cj1*(x11123.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj1*(x11122.value)), ((-1.0)*cj1*(x11123.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11124=IKsin(j4);
IkReal x11125=IKcos(j4);
IkReal x11126=(cj5*r20);
IkReal x11127=(cj5*r10);
IkReal x11128=((1.0)*r11*sj5);
IkReal x11129=((1.0)*r21*sj5);
evalcond[0]=(r02*x11125);
evalcond[1]=((-1.0)*r02*x11124);
evalcond[2]=(sj1+((x11124*x11126))+(((-1.0)*x11124*x11129)));
evalcond[3]=(cj1+((x11125*x11126))+(((-1.0)*x11125*x11129)));
evalcond[4]=(sj1+((x11125*x11127))+(((-1.0)*x11125*x11128)));
evalcond[5]=(((x11124*x11127))+(((-1.0)*cj1))+(((-1.0)*x11124*x11128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11130 = IKatan2WithCheck(IkReal(((-1.0)*sj1)),IkReal(((-1.0)*cj1)),IKFAST_ATAN2_MAGTHRESH);
if(!x11130.valid){
continue;
}
CheckValue<IkReal> x11131=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x11131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11130.value)+(((1.5707963267949)*(x11131.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11132=IKsin(j4);
IkReal x11133=IKcos(j4);
IkReal x11134=(cj5*r20);
IkReal x11135=(cj5*r10);
IkReal x11136=((1.0)*r11*sj5);
IkReal x11137=((1.0)*r21*sj5);
evalcond[0]=(r02*x11133);
evalcond[1]=((-1.0)*r02*x11132);
evalcond[2]=(sj1+(((-1.0)*x11132*x11137))+((x11132*x11134)));
evalcond[3]=(cj1+(((-1.0)*x11133*x11137))+((x11133*x11134)));
evalcond[4]=(sj1+(((-1.0)*x11133*x11136))+((x11133*x11135)));
evalcond[5]=((((-1.0)*x11132*x11136))+((x11132*x11135))+(((-1.0)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11138=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x11138.valid){
continue;
}
CheckValue<IkReal> x11139 = IKatan2WithCheck(IkReal(cj1),IkReal(((-1.0)*sj1)),IKFAST_ATAN2_MAGTHRESH);
if(!x11139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11138.value)))+(x11139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11140=IKsin(j4);
IkReal x11141=IKcos(j4);
IkReal x11142=(cj5*r20);
IkReal x11143=(cj5*r10);
IkReal x11144=((1.0)*r11*sj5);
IkReal x11145=((1.0)*r21*sj5);
evalcond[0]=(r02*x11141);
evalcond[1]=((-1.0)*r02*x11140);
evalcond[2]=((((-1.0)*x11140*x11145))+sj1+((x11140*x11142)));
evalcond[3]=(cj1+(((-1.0)*x11141*x11145))+((x11141*x11142)));
evalcond[4]=(sj1+(((-1.0)*x11141*x11144))+((x11141*x11143)));
evalcond[5]=((((-1.0)*x11140*x11144))+((x11140*x11143))+(((-1.0)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11146=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11146);
rxp1_1=(px*r21);
rxp1_2=(r11*x11146);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x11147=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x11147;
j4eval[1]=IKsign(x11147);
j4eval[2]=((IKabs(cj1))+(IKabs(sj1)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11148=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11148);
rxp1_1=(px*r21);
rxp1_2=(r11*x11148);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x11149=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x11149;
j4eval[1]=((IKabs(cj1))+(IKabs(sj1)));
j4eval[2]=IKsign(x11149);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11150=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11150);
rxp1_1=(px*r21);
rxp1_2=(r11*x11150);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
j0=-1.5707963267949;
sj0=-1.0;
cj0=0;
IkReal x11151=((1.0)*sj5);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*x11151)));
j4eval[1]=(((cj5*r10))+(((-1.0)*r11*x11151)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11152=((1.0)*sj5);
CheckValue<IkReal> x11153=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*x11152))),-1);
if(!x11153.valid){
continue;
}
CheckValue<IkReal> x11154=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*x11152))),-1);
if(!x11154.valid){
continue;
}
if( IKabs(((-1.0)*sj1*(x11153.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj1*(x11154.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj1*(x11153.value)))+IKsqr((sj1*(x11154.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj1*(x11153.value)), (sj1*(x11154.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11155=IKsin(j4);
IkReal x11156=IKcos(j4);
IkReal x11157=(cj5*x11156);
IkReal x11158=(cj5*x11155);
IkReal x11159=((1.0)*sj5*x11156);
IkReal x11160=((1.0)*sj5*x11155);
evalcond[0]=(r02*x11156);
evalcond[1]=((-1.0)*r02*x11155);
evalcond[2]=(sj1+(((-1.0)*r21*x11160))+((r20*x11158)));
evalcond[3]=(cj1+(((-1.0)*r11*x11160))+((r10*x11158)));
evalcond[4]=(cj1+(((-1.0)*r21*x11159))+((r20*x11157)));
evalcond[5]=((((-1.0)*sj1))+((r10*x11157))+(((-1.0)*r11*x11159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11161 = IKatan2WithCheck(IkReal(((-1.0)*sj1)),IkReal(((-1.0)*cj1)),IKFAST_ATAN2_MAGTHRESH);
if(!x11161.valid){
continue;
}
CheckValue<IkReal> x11162=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x11162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11161.value)+(((1.5707963267949)*(x11162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11163=IKsin(j4);
IkReal x11164=IKcos(j4);
IkReal x11165=(cj5*x11164);
IkReal x11166=(cj5*x11163);
IkReal x11167=((1.0)*sj5*x11164);
IkReal x11168=((1.0)*sj5*x11163);
evalcond[0]=(r02*x11164);
evalcond[1]=((-1.0)*r02*x11163);
evalcond[2]=(sj1+((r20*x11166))+(((-1.0)*r21*x11168)));
evalcond[3]=(cj1+(((-1.0)*r11*x11168))+((r10*x11166)));
evalcond[4]=(((r20*x11165))+cj1+(((-1.0)*r21*x11167)));
evalcond[5]=((((-1.0)*sj1))+(((-1.0)*r11*x11167))+((r10*x11165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11169=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x11169.valid){
continue;
}
CheckValue<IkReal> x11170 = IKatan2WithCheck(IkReal(((-1.0)*cj1)),IkReal(sj1),IKFAST_ATAN2_MAGTHRESH);
if(!x11170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11169.value)))+(x11170.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11171=IKsin(j4);
IkReal x11172=IKcos(j4);
IkReal x11173=(cj5*x11172);
IkReal x11174=(cj5*x11171);
IkReal x11175=((1.0)*sj5*x11172);
IkReal x11176=((1.0)*sj5*x11171);
evalcond[0]=(r02*x11172);
evalcond[1]=((-1.0)*r02*x11171);
evalcond[2]=(sj1+((r20*x11174))+(((-1.0)*r21*x11176)));
evalcond[3]=(cj1+(((-1.0)*r11*x11176))+((r10*x11174)));
evalcond[4]=(cj1+((r20*x11173))+(((-1.0)*r21*x11175)));
evalcond[5]=((((-1.0)*sj1))+(((-1.0)*r11*x11175))+((r10*x11173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11177=IKPowWithIntegerCheck(r02,-1);
if(!x11177.valid){
continue;
}
CheckValue<IkReal> x11178=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x11178.valid){
continue;
}
if( IKabs((cj0*sj1*(x11177.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*sj1*(x11178.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*sj1*(x11177.value)))+IKsqr(((-1.0)*sj0*sj1*(x11178.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*sj1*(x11177.value)), ((-1.0)*sj0*sj1*(x11178.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11179=IKcos(j4);
IkReal x11180=IKsin(j4);
IkReal x11181=(r11*sj5);
IkReal x11182=(cj5*r20);
IkReal x11183=(cj1*sj2);
IkReal x11184=(cj5*r10);
IkReal x11185=(r21*sj5);
IkReal x11186=((1.0)*x11180);
IkReal x11187=((1.0)*x11179);
evalcond[0]=((((-1.0)*r02*x11186))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((cj0*x11183))+((r02*x11179)));
evalcond[2]=(cj1+(((-1.0)*x11185*x11187))+((x11179*x11182)));
evalcond[3]=((((-1.0)*x11181*x11187))+((sj0*sj1))+((x11179*x11184)));
evalcond[4]=((((-1.0)*x11185*x11186))+(((-1.0)*sj1*sj2))+((x11180*x11182)));
evalcond[5]=((((-1.0)*x11181*x11186))+((x11180*x11184))+(((-1.0)*cj0*cj2))+((sj0*x11183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11188=IKPowWithIntegerCheck(r02,-1);
if(!x11188.valid){
continue;
}
CheckValue<IkReal> x11189=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11189.valid){
continue;
}
if( IKabs((cj0*sj1*(x11188.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj1*(x11189.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*sj1*(x11188.value)))+IKsqr(((-1.0)*cj1*(x11189.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*sj1*(x11188.value)), ((-1.0)*cj1*(x11189.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11190=IKcos(j4);
IkReal x11191=IKsin(j4);
IkReal x11192=(r11*sj5);
IkReal x11193=(cj5*r20);
IkReal x11194=(cj1*sj2);
IkReal x11195=(cj5*r10);
IkReal x11196=(r21*sj5);
IkReal x11197=((1.0)*x11191);
IkReal x11198=((1.0)*x11190);
evalcond[0]=((((-1.0)*r02*x11197))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((r02*x11190))+((cj0*x11194)));
evalcond[2]=(((x11190*x11193))+cj1+(((-1.0)*x11196*x11198)));
evalcond[3]=(((x11190*x11195))+((sj0*sj1))+(((-1.0)*x11192*x11198)));
evalcond[4]=((((-1.0)*x11196*x11197))+(((-1.0)*sj1*sj2))+((x11191*x11193)));
evalcond[5]=(((x11191*x11195))+(((-1.0)*x11192*x11197))+(((-1.0)*cj0*cj2))+((sj0*x11194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11199=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x11199.valid){
continue;
}
CheckValue<IkReal> x11200 = IKatan2WithCheck(IkReal((cj0*sj1)),IkReal(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11199.value)))+(x11200.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11201=IKcos(j4);
IkReal x11202=IKsin(j4);
IkReal x11203=(r11*sj5);
IkReal x11204=(cj5*r20);
IkReal x11205=(cj1*sj2);
IkReal x11206=(cj5*r10);
IkReal x11207=(r21*sj5);
IkReal x11208=((1.0)*x11202);
IkReal x11209=((1.0)*x11201);
evalcond[0]=((((-1.0)*r02*x11208))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((r02*x11201))+((cj0*x11205)));
evalcond[2]=(cj1+((x11201*x11204))+(((-1.0)*x11207*x11209)));
evalcond[3]=((((-1.0)*x11203*x11209))+((x11201*x11206))+((sj0*sj1)));
evalcond[4]=((((-1.0)*sj1*sj2))+((x11202*x11204))+(((-1.0)*x11207*x11208)));
evalcond[5]=((((-1.0)*x11203*x11208))+((x11202*x11206))+((sj0*x11205))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11210=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11210);
rxp1_1=(px*r21);
rxp1_2=(r11*x11210);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r02;
j4eval[1]=IKsign(r02);
j4eval[2]=((IKabs((sj0*sj2)))+(IKabs((cj2*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11211=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11211);
rxp1_1=(px*r21);
rxp1_2=(r11*x11211);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal x11212=(cj1*sj0);
IkReal x11213=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x11213;
j4eval[1]=IKsign(x11213);
j4eval[2]=((IKabs((sj2*x11212)))+(IKabs((cj2*x11212))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11214=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11214);
rxp1_1=(px*r21);
rxp1_2=(r11*x11214);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r02;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11215=IKPowWithIntegerCheck(r02,-1);
if(!x11215.valid){
continue;
}
CheckValue<IkReal> x11216=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x11216.valid){
continue;
}
if( IKabs((sj0*sj2*(x11215.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj1*cj2*sj0*(x11216.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*sj2*(x11215.value)))+IKsqr(((-1.0)*cj1*cj2*sj0*(x11216.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*sj2*(x11215.value)), ((-1.0)*cj1*cj2*sj0*(x11216.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11217=IKsin(j4);
IkReal x11218=IKcos(j4);
IkReal x11219=(cj2*sj0);
IkReal x11220=(cj5*r10);
IkReal x11221=(cj5*r20);
IkReal x11222=(sj0*sj2);
IkReal x11223=((1.0)*x11218);
IkReal x11224=(sj5*x11218);
IkReal x11225=((1.0)*sj5*x11217);
evalcond[0]=(((r02*x11218))+x11219);
evalcond[1]=(((r02*x11217))+(((-1.0)*x11222)));
evalcond[2]=((((-1.0)*r21*x11225))+((x11217*x11221)));
evalcond[3]=(((r21*x11224))+(((-1.0)*x11221*x11223)));
evalcond[4]=((((-1.0)*r11*x11225))+((cj1*x11222))+((x11217*x11220)));
evalcond[5]=(((r11*x11224))+(((-1.0)*x11220*x11223))+((cj1*x11219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11226=(cj1*sj0);
CheckValue<IkReal> x11227 = IKatan2WithCheck(IkReal(((-1.0)*sj2*x11226)),IkReal((cj2*x11226)),IKFAST_ATAN2_MAGTHRESH);
if(!x11227.valid){
continue;
}
CheckValue<IkReal> x11228=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x11228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11227.value)+(((1.5707963267949)*(x11228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11229=IKsin(j4);
IkReal x11230=IKcos(j4);
IkReal x11231=(cj2*sj0);
IkReal x11232=(cj5*r10);
IkReal x11233=(cj5*r20);
IkReal x11234=(sj0*sj2);
IkReal x11235=((1.0)*x11230);
IkReal x11236=(sj5*x11230);
IkReal x11237=((1.0)*sj5*x11229);
evalcond[0]=(x11231+((r02*x11230)));
evalcond[1]=((((-1.0)*x11234))+((r02*x11229)));
evalcond[2]=(((x11229*x11233))+(((-1.0)*r21*x11237)));
evalcond[3]=((((-1.0)*x11233*x11235))+((r21*x11236)));
evalcond[4]=(((cj1*x11234))+((x11229*x11232))+(((-1.0)*r11*x11237)));
evalcond[5]=(((cj1*x11231))+((r11*x11236))+(((-1.0)*x11232*x11235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11238=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x11238.valid){
continue;
}
CheckValue<IkReal> x11239 = IKatan2WithCheck(IkReal((sj0*sj2)),IkReal(((-1.0)*cj2*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x11239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11238.value)))+(x11239.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11240=IKsin(j4);
IkReal x11241=IKcos(j4);
IkReal x11242=(cj2*sj0);
IkReal x11243=(cj5*r10);
IkReal x11244=(cj5*r20);
IkReal x11245=(sj0*sj2);
IkReal x11246=((1.0)*x11241);
IkReal x11247=(sj5*x11241);
IkReal x11248=((1.0)*sj5*x11240);
evalcond[0]=(x11242+((r02*x11241)));
evalcond[1]=((((-1.0)*x11245))+((r02*x11240)));
evalcond[2]=(((x11240*x11244))+(((-1.0)*r21*x11248)));
evalcond[3]=((((-1.0)*x11244*x11246))+((r21*x11247)));
evalcond[4]=(((cj1*x11245))+((x11240*x11243))+(((-1.0)*r11*x11248)));
evalcond[5]=((((-1.0)*x11243*x11246))+((cj1*x11242))+((r11*x11247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11249=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11249);
rxp1_1=(px*r21);
rxp1_2=(r11*x11249);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r02;
j4eval[1]=IKsign(r02);
j4eval[2]=((IKabs((sj0*sj2)))+(IKabs((cj2*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11250=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11250);
rxp1_1=(px*r21);
rxp1_2=(r11*x11250);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x11251=(cj1*sj0);
IkReal x11252=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x11252;
j4eval[1]=((IKabs((sj2*x11251)))+(IKabs((cj2*x11251))));
j4eval[2]=IKsign(x11252);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11253=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11253);
rxp1_1=(px*r21);
rxp1_2=(r11*x11253);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11254=((-1.0)*sj0);
CheckValue<IkReal> x11255=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x11255.valid){
continue;
}
CheckValue<IkReal> x11256=IKPowWithIntegerCheck(r02,-1);
if(!x11256.valid){
continue;
}
if( IKabs((cj1*sj2*x11254*(x11255.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj2*x11254*(x11256.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*sj2*x11254*(x11255.value)))+IKsqr((cj2*x11254*(x11256.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj1*sj2*x11254*(x11255.value)), (cj2*x11254*(x11256.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11257=IKsin(j4);
IkReal x11258=IKcos(j4);
IkReal x11259=(cj2*sj0);
IkReal x11260=(sj0*sj2);
IkReal x11261=((1.0)*x11257);
IkReal x11262=(cj5*x11258);
IkReal x11263=(cj5*x11257);
IkReal x11264=((1.0)*sj5*x11258);
evalcond[0]=(x11259+((r02*x11258)));
evalcond[1]=((((-1.0)*r02*x11261))+(((-1.0)*x11260)));
evalcond[2]=((((-1.0)*r21*sj5*x11261))+((r20*x11263)));
evalcond[3]=(((r20*x11262))+(((-1.0)*r21*x11264)));
evalcond[4]=(((cj1*x11260))+(((-1.0)*r11*sj5*x11261))+((r10*x11263)));
evalcond[5]=(((cj1*x11259))+(((-1.0)*r11*x11264))+((r10*x11262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11265=((-1.0)*cj1*sj0);
CheckValue<IkReal> x11266=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x11266.valid){
continue;
}
CheckValue<IkReal> x11267 = IKatan2WithCheck(IkReal((sj2*x11265)),IkReal((cj2*x11265)),IKFAST_ATAN2_MAGTHRESH);
if(!x11267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11266.value)))+(x11267.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11268=IKsin(j4);
IkReal x11269=IKcos(j4);
IkReal x11270=(cj2*sj0);
IkReal x11271=(sj0*sj2);
IkReal x11272=((1.0)*x11268);
IkReal x11273=(cj5*x11269);
IkReal x11274=(cj5*x11268);
IkReal x11275=((1.0)*sj5*x11269);
evalcond[0]=(x11270+((r02*x11269)));
evalcond[1]=((((-1.0)*x11271))+(((-1.0)*r02*x11272)));
evalcond[2]=((((-1.0)*r21*sj5*x11272))+((r20*x11274)));
evalcond[3]=((((-1.0)*r21*x11275))+((r20*x11273)));
evalcond[4]=(((r10*x11274))+(((-1.0)*r11*sj5*x11272))+((cj1*x11271)));
evalcond[5]=(((r10*x11273))+(((-1.0)*r11*x11275))+((cj1*x11270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11276=((-1.0)*sj0);
CheckValue<IkReal> x11277=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x11277.valid){
continue;
}
CheckValue<IkReal> x11278 = IKatan2WithCheck(IkReal((sj2*x11276)),IkReal((cj2*x11276)),IKFAST_ATAN2_MAGTHRESH);
if(!x11278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11277.value)))+(x11278.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11279=IKsin(j4);
IkReal x11280=IKcos(j4);
IkReal x11281=(cj2*sj0);
IkReal x11282=(sj0*sj2);
IkReal x11283=((1.0)*x11279);
IkReal x11284=(cj5*x11280);
IkReal x11285=(cj5*x11279);
IkReal x11286=((1.0)*sj5*x11280);
evalcond[0]=(x11281+((r02*x11280)));
evalcond[1]=((((-1.0)*r02*x11283))+(((-1.0)*x11282)));
evalcond[2]=((((-1.0)*r21*sj5*x11283))+((r20*x11285)));
evalcond[3]=((((-1.0)*r21*x11286))+((r20*x11284)));
evalcond[4]=((((-1.0)*r11*sj5*x11283))+((r10*x11285))+((cj1*x11282)));
evalcond[5]=((((-1.0)*r11*x11286))+((r10*x11284))+((cj1*x11281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11287=((-1.0)*r21);
CheckValue<IkReal> x11288 = IKatan2WithCheck(IkReal(r20),IkReal(x11287),IKFAST_ATAN2_MAGTHRESH);
if(!x11288.valid){
continue;
}
IkReal gconst18=((-1.0)*(x11288.value));
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x11287;
CheckValue<IkReal> x11289 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11289.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11289.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11290=((-1.0)*r21);
IkReal x11291=((-1.0)*px);
CheckValue<IkReal> x11293 = IKatan2WithCheck(IkReal(r20),IkReal(x11290),IKFAST_ATAN2_MAGTHRESH);
if(!x11293.valid){
continue;
}
IkReal x11292=((-1.0)*(x11293.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11291);
rxp1_1=(px*r21);
rxp1_2=(r11*x11291);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst19;
cj5=gconst20;
j5=x11292;
IkReal gconst18=x11292;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x11290;
j4eval[0]=(((r11*r20))+(((-1.0)*r10*r21)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11294=((-1.0)*r21);
IkReal x11295=((-1.0)*px);
CheckValue<IkReal> x11297 = IKatan2WithCheck(IkReal(r20),IkReal(x11294),IKFAST_ATAN2_MAGTHRESH);
if(!x11297.valid){
continue;
}
IkReal x11296=((-1.0)*(x11297.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11295);
rxp1_1=(px*r21);
rxp1_2=(r11*x11295);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst19;
cj5=gconst20;
j5=x11296;
IkReal gconst18=x11296;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x11294;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11298=((-1.0)*r21);
IkReal x11299=((-1.0)*px);
CheckValue<IkReal> x11301 = IKatan2WithCheck(IkReal(r20),IkReal(x11298),IKFAST_ATAN2_MAGTHRESH);
if(!x11301.valid){
continue;
}
IkReal x11300=((-1.0)*(x11301.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11299);
rxp1_1=(px*r21);
rxp1_2=(r11*x11299);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst19;
cj5=gconst20;
j5=x11300;
IkReal gconst18=x11300;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x11298;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11302=((-1.0)*r21);
IkReal x11303=((-1.0)*px);
CheckValue<IkReal> x11305 = IKatan2WithCheck(IkReal(r20),IkReal(x11302),IKFAST_ATAN2_MAGTHRESH);
if(!x11305.valid){
continue;
}
IkReal x11304=((-1.0)*(x11305.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11303);
rxp1_1=(px*r21);
rxp1_2=(r11*x11303);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst19;
cj5=gconst20;
j5=x11304;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x11304;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x11302;
j4eval[0]=r02;
j4eval[1]=IKsign(r02);
j4eval[2]=((IKabs(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2)))))+(IKabs((cj0*sj1))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11306=((-1.0)*r21);
IkReal x11307=((-1.0)*px);
CheckValue<IkReal> x11309 = IKatan2WithCheck(IkReal(r20),IkReal(x11306),IKFAST_ATAN2_MAGTHRESH);
if(!x11309.valid){
continue;
}
IkReal x11308=((-1.0)*(x11309.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11307);
rxp1_1=(px*r21);
rxp1_2=(r11*x11307);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst19;
cj5=gconst20;
j5=x11308;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x11308;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x11306;
IkReal x11310=(((r11*r20))+(((-1.0)*r10*r21)));
j4eval[0]=x11310;
j4eval[1]=((IKabs((((cj0*cj2))+(((-1.0)*cj1*sj0*sj2)))))+(IKabs((sj0*sj1))));
j4eval[2]=IKsign(x11310);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11311=((-1.0)*r21);
IkReal x11312=((-1.0)*px);
CheckValue<IkReal> x11314 = IKatan2WithCheck(IkReal(r20),IkReal(x11311),IKFAST_ATAN2_MAGTHRESH);
if(!x11314.valid){
continue;
}
IkReal x11313=((-1.0)*(x11314.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11312);
rxp1_1=(px*r21);
rxp1_2=(r11*x11312);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst19;
cj5=gconst20;
j5=x11313;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x11313;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x11311;
j4eval[0]=r02;
j4eval[1]=((((-1.0)*r11*r20))+((r10*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11315=((-1.0)*sj1);
CheckValue<IkReal> x11316=IKPowWithIntegerCheck(r02,-1);
if(!x11316.valid){
continue;
}
CheckValue<IkReal> x11317=IKPowWithIntegerCheck(((((-1.0)*gconst20*r10))+((gconst19*r11))),-1);
if(!x11317.valid){
continue;
}
if( IKabs((cj0*x11315*(x11316.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x11315*(x11317.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*x11315*(x11316.value)))+IKsqr((sj0*x11315*(x11317.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*x11315*(x11316.value)), (sj0*x11315*(x11317.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11318=IKcos(j4);
IkReal x11319=IKsin(j4);
IkReal x11320=(gconst20*r20);
IkReal x11321=(cj1*sj2);
IkReal x11322=(gconst20*r10);
IkReal x11323=(gconst19*x11318);
IkReal x11324=((1.0)*x11318);
IkReal x11325=((1.0)*gconst19*x11319);
evalcond[0]=(((r02*x11319))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((r02*x11318))+((cj0*x11321)));
evalcond[2]=(cj1+((r21*x11323))+(((-1.0)*x11320*x11324)));
evalcond[3]=((((-1.0)*x11322*x11324))+((sj0*sj1))+((r11*x11323)));
evalcond[4]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x11325))+((x11319*x11320)));
evalcond[5]=(((sj0*x11321))+(((-1.0)*r11*x11325))+((x11319*x11322))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11326 = IKatan2WithCheck(IkReal((((cj0*cj2))+(((-1.0)*cj1*sj0*sj2)))),IkReal((sj0*sj1)),IKFAST_ATAN2_MAGTHRESH);
if(!x11326.valid){
continue;
}
CheckValue<IkReal> x11327=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst19*r11))+((gconst20*r10)))),-1);
if(!x11327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11326.value)+(((1.5707963267949)*(x11327.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11328=IKcos(j4);
IkReal x11329=IKsin(j4);
IkReal x11330=(gconst20*r20);
IkReal x11331=(cj1*sj2);
IkReal x11332=(gconst20*r10);
IkReal x11333=(gconst19*x11328);
IkReal x11334=((1.0)*x11328);
IkReal x11335=((1.0)*gconst19*x11329);
evalcond[0]=(((r02*x11329))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((cj0*x11331))+((r02*x11328)));
evalcond[2]=(cj1+(((-1.0)*x11330*x11334))+((r21*x11333)));
evalcond[3]=(((r11*x11333))+((sj0*sj1))+(((-1.0)*x11332*x11334)));
evalcond[4]=((((-1.0)*r21*x11335))+(((-1.0)*sj1*sj2))+((x11329*x11330)));
evalcond[5]=(((x11329*x11332))+((sj0*x11331))+(((-1.0)*cj0*cj2))+(((-1.0)*r11*x11335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11336=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x11336.valid){
continue;
}
CheckValue<IkReal> x11337 = IKatan2WithCheck(IkReal(((-1.0)*cj0*sj1)),IkReal(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11336.value)))+(x11337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11338=IKcos(j4);
IkReal x11339=IKsin(j4);
IkReal x11340=(gconst20*r20);
IkReal x11341=(cj1*sj2);
IkReal x11342=(gconst20*r10);
IkReal x11343=(gconst19*x11338);
IkReal x11344=((1.0)*x11338);
IkReal x11345=((1.0)*gconst19*x11339);
evalcond[0]=(((r02*x11339))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((cj0*x11341))+((r02*x11338)));
evalcond[2]=(cj1+(((-1.0)*x11340*x11344))+((r21*x11343)));
evalcond[3]=(((r11*x11343))+(((-1.0)*x11342*x11344))+((sj0*sj1)));
evalcond[4]=(((x11339*x11340))+(((-1.0)*r21*x11345))+(((-1.0)*sj1*sj2)));
evalcond[5]=((((-1.0)*r11*x11345))+((x11339*x11342))+((sj0*x11341))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11346=((-1.0)*r21);
IkReal x11347=((-1.0)*px);
CheckValue<IkReal> x11349 = IKatan2WithCheck(IkReal(r20),IkReal(x11346),IKFAST_ATAN2_MAGTHRESH);
if(!x11349.valid){
continue;
}
IkReal x11348=((-1.0)*(x11349.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11347);
rxp1_1=(px*r21);
rxp1_2=(r11*x11347);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst19;
cj5=gconst20;
j5=x11348;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x11348;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x11346;
j4eval[0]=r02;
j4eval[1]=IKsign(r02);
j4eval[2]=((IKabs(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2)))))+(IKabs((cj0*sj1))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11350=((-1.0)*r21);
IkReal x11351=((-1.0)*px);
CheckValue<IkReal> x11353 = IKatan2WithCheck(IkReal(r20),IkReal(x11350),IKFAST_ATAN2_MAGTHRESH);
if(!x11353.valid){
continue;
}
IkReal x11352=((-1.0)*(x11353.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11351);
rxp1_1=(px*r21);
rxp1_2=(r11*x11351);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst19;
cj5=gconst20;
j5=x11352;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x11352;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x11350;
IkReal x11354=(((r11*r20))+(((-1.0)*r10*r21)));
j4eval[0]=x11354;
j4eval[1]=IKsign(x11354);
j4eval[2]=((IKabs((((cj0*cj2))+(((-1.0)*cj1*sj0*sj2)))))+(IKabs((sj0*sj1))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11355=((-1.0)*r21);
IkReal x11356=((-1.0)*px);
CheckValue<IkReal> x11358 = IKatan2WithCheck(IkReal(r20),IkReal(x11355),IKFAST_ATAN2_MAGTHRESH);
if(!x11358.valid){
continue;
}
IkReal x11357=((-1.0)*(x11358.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11356);
rxp1_1=(px*r21);
rxp1_2=(r11*x11356);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst19;
cj5=gconst20;
j5=x11357;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x11357;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x11355;
j4eval[0]=r02;
j4eval[1]=(((r11*r20))+(((-1.0)*r10*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11359=IKPowWithIntegerCheck(r02,-1);
if(!x11359.valid){
continue;
}
CheckValue<IkReal> x11360=IKPowWithIntegerCheck(((((-1.0)*gconst19*r11))+((gconst20*r10))),-1);
if(!x11360.valid){
continue;
}
if( IKabs((cj0*sj1*(x11359.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*sj1*(x11360.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*sj1*(x11359.value)))+IKsqr(((-1.0)*sj0*sj1*(x11360.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*sj1*(x11359.value)), ((-1.0)*sj0*sj1*(x11360.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11361=IKcos(j4);
IkReal x11362=IKsin(j4);
IkReal x11363=(cj1*sj2);
IkReal x11364=(gconst19*r11);
IkReal x11365=(gconst19*r21);
IkReal x11366=(gconst20*x11361);
IkReal x11367=((1.0)*x11362);
IkReal x11368=((1.0)*x11361);
IkReal x11369=(gconst20*x11362);
evalcond[0]=((((-1.0)*r02*x11367))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((r02*x11361))+((cj0*x11363)));
evalcond[2]=(cj1+(((-1.0)*x11365*x11368))+((r20*x11366)));
evalcond[3]=(((sj0*sj1))+((r10*x11366))+(((-1.0)*x11364*x11368)));
evalcond[4]=((((-1.0)*sj1*sj2))+(((-1.0)*x11365*x11367))+((r20*x11369)));
evalcond[5]=(((r10*x11369))+(((-1.0)*cj0*cj2))+((sj0*x11363))+(((-1.0)*x11364*x11367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11370=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst19*r11))+((gconst20*r10)))),-1);
if(!x11370.valid){
continue;
}
CheckValue<IkReal> x11371 = IKatan2WithCheck(IkReal((((cj0*cj2))+(((-1.0)*cj1*sj0*sj2)))),IkReal(((-1.0)*sj0*sj1)),IKFAST_ATAN2_MAGTHRESH);
if(!x11371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11370.value)))+(x11371.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11372=IKcos(j4);
IkReal x11373=IKsin(j4);
IkReal x11374=(cj1*sj2);
IkReal x11375=(gconst19*r11);
IkReal x11376=(gconst19*r21);
IkReal x11377=(gconst20*x11372);
IkReal x11378=((1.0)*x11373);
IkReal x11379=((1.0)*x11372);
IkReal x11380=(gconst20*x11373);
evalcond[0]=((((-1.0)*r02*x11378))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((r02*x11372))+((cj0*x11374)));
evalcond[2]=(((r20*x11377))+cj1+(((-1.0)*x11376*x11379)));
evalcond[3]=((((-1.0)*x11375*x11379))+((sj0*sj1))+((r10*x11377)));
evalcond[4]=(((r20*x11380))+(((-1.0)*sj1*sj2))+(((-1.0)*x11376*x11378)));
evalcond[5]=(((r10*x11380))+(((-1.0)*x11375*x11378))+((sj0*x11374))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11381=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x11381.valid){
continue;
}
CheckValue<IkReal> x11382 = IKatan2WithCheck(IkReal((cj0*sj1)),IkReal(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11381.value)))+(x11382.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11383=IKcos(j4);
IkReal x11384=IKsin(j4);
IkReal x11385=(cj1*sj2);
IkReal x11386=(gconst19*r11);
IkReal x11387=(gconst19*r21);
IkReal x11388=(gconst20*x11383);
IkReal x11389=((1.0)*x11384);
IkReal x11390=((1.0)*x11383);
IkReal x11391=(gconst20*x11384);
evalcond[0]=((((-1.0)*r02*x11389))+((cj0*sj1)));
evalcond[1]=(((r02*x11383))+((cj2*sj0))+((cj0*x11385)));
evalcond[2]=(cj1+((r20*x11388))+(((-1.0)*x11387*x11390)));
evalcond[3]=(((r10*x11388))+((sj0*sj1))+(((-1.0)*x11386*x11390)));
evalcond[4]=(((r20*x11391))+(((-1.0)*sj1*sj2))+(((-1.0)*x11387*x11389)));
evalcond[5]=(((sj0*x11385))+((r10*x11391))+(((-1.0)*cj0*cj2))+(((-1.0)*x11386*x11389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11392=((-1.0)*r21);
IkReal x11393=((-1.0)*px);
CheckValue<IkReal> x11395 = IKatan2WithCheck(IkReal(r20),IkReal(x11392),IKFAST_ATAN2_MAGTHRESH);
if(!x11395.valid){
continue;
}
IkReal x11394=((-1.0)*(x11395.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11393);
rxp1_1=(px*r21);
rxp1_2=(r11*x11393);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst19;
cj5=gconst20;
j5=x11394;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x11394;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x11392;
j4eval[0]=r02;
j4eval[1]=IKsign(r02);
j4eval[2]=((IKabs((sj0*sj2)))+(IKabs((cj2*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11396=((-1.0)*r21);
IkReal x11397=((-1.0)*px);
CheckValue<IkReal> x11399 = IKatan2WithCheck(IkReal(r20),IkReal(x11396),IKFAST_ATAN2_MAGTHRESH);
if(!x11399.valid){
continue;
}
IkReal x11398=((-1.0)*(x11399.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11397);
rxp1_1=(px*r21);
rxp1_2=(r11*x11397);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst19;
cj5=gconst20;
j5=x11398;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x11398;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x11396;
IkReal x11400=(cj1*sj0);
IkReal x11401=(((r11*r20))+(((-1.0)*r10*r21)));
j4eval[0]=x11401;
j4eval[1]=IKsign(x11401);
j4eval[2]=((IKabs((sj2*x11400)))+(IKabs((cj2*x11400))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11402=((-1.0)*r21);
IkReal x11403=((-1.0)*px);
CheckValue<IkReal> x11405 = IKatan2WithCheck(IkReal(r20),IkReal(x11402),IKFAST_ATAN2_MAGTHRESH);
if(!x11405.valid){
continue;
}
IkReal x11404=((-1.0)*(x11405.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11403);
rxp1_1=(px*r21);
rxp1_2=(r11*x11403);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst19;
cj5=gconst20;
j5=x11404;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x11404;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x11402;
j4eval[0]=r02;
j4eval[1]=((((-1.0)*r11*r20))+((r10*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11406=IKPowWithIntegerCheck(r02,-1);
if(!x11406.valid){
continue;
}
CheckValue<IkReal> x11407=IKPowWithIntegerCheck(((((-1.0)*gconst20*r10))+((gconst19*r11))),-1);
if(!x11407.valid){
continue;
}
if( IKabs((sj0*sj2*(x11406.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj1*cj2*sj0*(x11407.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*sj2*(x11406.value)))+IKsqr(((-1.0)*cj1*cj2*sj0*(x11407.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*sj2*(x11406.value)), ((-1.0)*cj1*cj2*sj0*(x11407.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11408=IKsin(j4);
IkReal x11409=IKcos(j4);
IkReal x11410=(cj2*sj0);
IkReal x11411=(sj0*sj2);
IkReal x11412=(gconst19*x11409);
IkReal x11413=(gconst20*x11408);
IkReal x11414=((1.0)*gconst19*x11408);
IkReal x11415=((1.0)*gconst20*x11409);
evalcond[0]=(x11410+((r02*x11409)));
evalcond[1]=((((-1.0)*x11411))+((r02*x11408)));
evalcond[2]=((((-1.0)*r21*x11414))+((r20*x11413)));
evalcond[3]=((((-1.0)*r20*x11415))+((r21*x11412)));
evalcond[4]=(((r10*x11413))+(((-1.0)*r11*x11414))+((cj1*x11411)));
evalcond[5]=((((-1.0)*r10*x11415))+((r11*x11412))+((cj1*x11410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11416=(cj1*sj0);
CheckValue<IkReal> x11417=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst19*r11))+((gconst20*r10)))),-1);
if(!x11417.valid){
continue;
}
CheckValue<IkReal> x11418 = IKatan2WithCheck(IkReal(((-1.0)*sj2*x11416)),IkReal((cj2*x11416)),IKFAST_ATAN2_MAGTHRESH);
if(!x11418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11417.value)))+(x11418.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11419=IKsin(j4);
IkReal x11420=IKcos(j4);
IkReal x11421=(cj2*sj0);
IkReal x11422=(sj0*sj2);
IkReal x11423=(gconst19*x11420);
IkReal x11424=(gconst20*x11419);
IkReal x11425=((1.0)*gconst19*x11419);
IkReal x11426=((1.0)*gconst20*x11420);
evalcond[0]=(((r02*x11420))+x11421);
evalcond[1]=((((-1.0)*x11422))+((r02*x11419)));
evalcond[2]=(((r20*x11424))+(((-1.0)*r21*x11425)));
evalcond[3]=(((r21*x11423))+(((-1.0)*r20*x11426)));
evalcond[4]=(((r10*x11424))+(((-1.0)*r11*x11425))+((cj1*x11422)));
evalcond[5]=((((-1.0)*r10*x11426))+((r11*x11423))+((cj1*x11421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11427=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x11427.valid){
continue;
}
CheckValue<IkReal> x11428 = IKatan2WithCheck(IkReal((sj0*sj2)),IkReal(((-1.0)*cj2*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x11428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11427.value)))+(x11428.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11429=IKsin(j4);
IkReal x11430=IKcos(j4);
IkReal x11431=(cj2*sj0);
IkReal x11432=(sj0*sj2);
IkReal x11433=(gconst19*x11430);
IkReal x11434=(gconst20*x11429);
IkReal x11435=((1.0)*gconst19*x11429);
IkReal x11436=((1.0)*gconst20*x11430);
evalcond[0]=(((r02*x11430))+x11431);
evalcond[1]=(((r02*x11429))+(((-1.0)*x11432)));
evalcond[2]=(((r20*x11434))+(((-1.0)*r21*x11435)));
evalcond[3]=(((r21*x11433))+(((-1.0)*r20*x11436)));
evalcond[4]=(((r10*x11434))+(((-1.0)*r11*x11435))+((cj1*x11432)));
evalcond[5]=((((-1.0)*r10*x11436))+((r11*x11433))+((cj1*x11431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11437=((-1.0)*r21);
IkReal x11438=((-1.0)*px);
CheckValue<IkReal> x11440 = IKatan2WithCheck(IkReal(r20),IkReal(x11437),IKFAST_ATAN2_MAGTHRESH);
if(!x11440.valid){
continue;
}
IkReal x11439=((-1.0)*(x11440.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11438);
rxp1_1=(px*r21);
rxp1_2=(r11*x11438);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst19;
cj5=gconst20;
j5=x11439;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x11439;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x11437;
j4eval[0]=r02;
j4eval[1]=IKsign(r02);
j4eval[2]=((IKabs((sj0*sj2)))+(IKabs((cj2*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11441=((-1.0)*r21);
IkReal x11442=((-1.0)*px);
CheckValue<IkReal> x11444 = IKatan2WithCheck(IkReal(r20),IkReal(x11441),IKFAST_ATAN2_MAGTHRESH);
if(!x11444.valid){
continue;
}
IkReal x11443=((-1.0)*(x11444.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11442);
rxp1_1=(px*r21);
rxp1_2=(r11*x11442);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst19;
cj5=gconst20;
j5=x11443;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x11443;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x11441;
IkReal x11445=(cj1*sj0);
IkReal x11446=(((r11*r20))+(((-1.0)*r10*r21)));
j4eval[0]=x11446;
j4eval[1]=((IKabs((cj2*x11445)))+(IKabs((sj2*x11445))));
j4eval[2]=IKsign(x11446);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11447=((-1.0)*r21);
IkReal x11448=((-1.0)*px);
CheckValue<IkReal> x11450 = IKatan2WithCheck(IkReal(r20),IkReal(x11447),IKFAST_ATAN2_MAGTHRESH);
if(!x11450.valid){
continue;
}
IkReal x11449=((-1.0)*(x11450.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11448);
rxp1_1=(px*r21);
rxp1_2=(r11*x11448);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst19;
cj5=gconst20;
j5=x11449;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x11449;
IkReal gconst19=((-1.0)*r20);
IkReal gconst20=x11447;
j4eval[0]=(((r11*r20))+(((-1.0)*r10*r21)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11451=((-1.0)*sj0);
CheckValue<IkReal> x11452=IKPowWithIntegerCheck(((((-1.0)*gconst19*r11))+((gconst20*r10))),-1);
if(!x11452.valid){
continue;
}
CheckValue<IkReal> x11453=IKPowWithIntegerCheck(r02,-1);
if(!x11453.valid){
continue;
}
if( IKabs((cj1*sj2*x11451*(x11452.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj2*x11451*(x11453.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*sj2*x11451*(x11452.value)))+IKsqr((cj2*x11451*(x11453.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj1*sj2*x11451*(x11452.value)), (cj2*x11451*(x11453.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11454=IKsin(j4);
IkReal x11455=IKcos(j4);
IkReal x11456=(cj2*sj0);
IkReal x11457=(gconst19*r11);
IkReal x11458=(sj0*sj2);
IkReal x11459=(gconst19*r21);
IkReal x11460=((1.0)*x11454);
IkReal x11461=((1.0)*x11455);
IkReal x11462=(gconst20*x11454);
IkReal x11463=(gconst20*x11455);
evalcond[0]=(x11456+((r02*x11455)));
evalcond[1]=((((-1.0)*x11458))+(((-1.0)*r02*x11460)));
evalcond[2]=(((r20*x11462))+(((-1.0)*x11459*x11460)));
evalcond[3]=(((r20*x11463))+(((-1.0)*x11459*x11461)));
evalcond[4]=(((r10*x11462))+((cj1*x11458))+(((-1.0)*x11457*x11460)));
evalcond[5]=(((r10*x11463))+((cj1*x11456))+(((-1.0)*x11457*x11461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11464=((-1.0)*cj1*sj0);
CheckValue<IkReal> x11465=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst19*r11))+((gconst20*r10)))),-1);
if(!x11465.valid){
continue;
}
CheckValue<IkReal> x11466 = IKatan2WithCheck(IkReal((sj2*x11464)),IkReal((cj2*x11464)),IKFAST_ATAN2_MAGTHRESH);
if(!x11466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11465.value)))+(x11466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11467=IKsin(j4);
IkReal x11468=IKcos(j4);
IkReal x11469=(cj2*sj0);
IkReal x11470=(gconst19*r11);
IkReal x11471=(sj0*sj2);
IkReal x11472=(gconst19*r21);
IkReal x11473=((1.0)*x11467);
IkReal x11474=((1.0)*x11468);
IkReal x11475=(gconst20*x11467);
IkReal x11476=(gconst20*x11468);
evalcond[0]=(x11469+((r02*x11468)));
evalcond[1]=((((-1.0)*x11471))+(((-1.0)*r02*x11473)));
evalcond[2]=(((r20*x11475))+(((-1.0)*x11472*x11473)));
evalcond[3]=(((r20*x11476))+(((-1.0)*x11472*x11474)));
evalcond[4]=(((cj1*x11471))+((r10*x11475))+(((-1.0)*x11470*x11473)));
evalcond[5]=(((cj1*x11469))+((r10*x11476))+(((-1.0)*x11470*x11474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11477=((-1.0)*sj0);
CheckValue<IkReal> x11478=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x11478.valid){
continue;
}
CheckValue<IkReal> x11479 = IKatan2WithCheck(IkReal((sj2*x11477)),IkReal((cj2*x11477)),IKFAST_ATAN2_MAGTHRESH);
if(!x11479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11478.value)))+(x11479.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11480=IKsin(j4);
IkReal x11481=IKcos(j4);
IkReal x11482=(cj2*sj0);
IkReal x11483=(gconst19*r11);
IkReal x11484=(sj0*sj2);
IkReal x11485=(gconst19*r21);
IkReal x11486=((1.0)*x11480);
IkReal x11487=((1.0)*x11481);
IkReal x11488=(gconst20*x11480);
IkReal x11489=(gconst20*x11481);
evalcond[0]=(x11482+((r02*x11481)));
evalcond[1]=((((-1.0)*r02*x11486))+(((-1.0)*x11484)));
evalcond[2]=(((r20*x11488))+(((-1.0)*x11485*x11486)));
evalcond[3]=(((r20*x11489))+(((-1.0)*x11485*x11487)));
evalcond[4]=((((-1.0)*x11483*x11486))+((cj1*x11484))+((r10*x11488)));
evalcond[5]=((((-1.0)*x11483*x11487))+((cj1*x11482))+((r10*x11489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11493=IKPowWithIntegerCheck(r02,-1);
if(!x11493.valid){
continue;
}
IkReal x11490=x11493.value;
IkReal x11491=((1.0)*cj2);
IkReal x11492=(cj0*cj1);
CheckValue<IkReal> x11494=IKPowWithIntegerCheck(cj3,-1);
if(!x11494.valid){
continue;
}
if( IKabs((x11490*(x11494.value)*(((((-1.0)*x11491*x11492))+((sj0*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11490*(((((-1.0)*sj2*x11492))+(((-1.0)*sj0*x11491)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11490*(x11494.value)*(((((-1.0)*x11491*x11492))+((sj0*sj2))))))+IKsqr((x11490*(((((-1.0)*sj2*x11492))+(((-1.0)*sj0*x11491))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11490*(x11494.value)*(((((-1.0)*x11491*x11492))+((sj0*sj2))))), (x11490*(((((-1.0)*sj2*x11492))+(((-1.0)*sj0*x11491))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11495=IKsin(j4);
IkReal x11496=IKcos(j4);
IkReal x11497=(gconst20*r20);
IkReal x11498=(cj1*cj2);
IkReal x11499=(cj3*gconst19);
IkReal x11500=((1.0)*cj2);
IkReal x11501=(cj3*gconst20);
IkReal x11502=((1.0)*sj2);
IkReal x11503=(gconst19*r21);
IkReal x11504=((1.0)*gconst20);
IkReal x11505=(cj0*sj2);
IkReal x11506=(gconst19*r11);
IkReal x11507=((1.0)*r10);
IkReal x11508=(gconst19*sj3);
IkReal x11509=(sj3*x11496);
IkReal x11510=(r02*x11495);
IkReal x11511=((1.0)*x11495);
evalcond[0]=(((sj3*x11510))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((cj1*x11505))+((r02*x11496)));
evalcond[2]=(((cj3*x11510))+((cj0*x11498))+(((-1.0)*sj0*x11502)));
evalcond[3]=((((-1.0)*sj1*x11502))+(((-1.0)*x11503*x11511))+((x11495*x11497)));
evalcond[4]=(((gconst20*r10*x11495))+(((-1.0)*cj0*x11500))+((cj1*sj0*sj2))+(((-1.0)*x11506*x11511)));
evalcond[5]=((((-1.0)*x11497*x11509))+cj1+((r21*x11501))+((x11503*x11509))+((r20*x11499)));
evalcond[6]=(((x11506*x11509))+((r11*x11501))+((r10*x11499))+((sj0*sj1))+(((-1.0)*r10*x11504*x11509)));
evalcond[7]=((((-1.0)*sj1*x11500))+((r21*x11496*x11499))+(((-1.0)*cj3*x11496*x11497))+(((-1.0)*r21*sj3*x11504))+(((-1.0)*r20*x11508)));
evalcond[8]=(x11505+(((-1.0)*x11507*x11508))+(((-1.0)*x11496*x11501*x11507))+(((-1.0)*r11*sj3*x11504))+((r11*x11496*x11499))+((sj0*x11498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11513=IKPowWithIntegerCheck(r02,-1);
if(!x11513.valid){
continue;
}
IkReal x11512=x11513.value;
CheckValue<IkReal> x11514=IKPowWithIntegerCheck(sj3,-1);
if(!x11514.valid){
continue;
}
if( IKabs(((-1.0)*cj0*sj1*x11512*(x11514.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11512*(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*sj1*x11512*(x11514.value)))+IKsqr((x11512*(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*sj1*x11512*(x11514.value)), (x11512*(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11515=IKsin(j4);
IkReal x11516=IKcos(j4);
IkReal x11517=(gconst20*r20);
IkReal x11518=(cj1*cj2);
IkReal x11519=(cj3*gconst19);
IkReal x11520=((1.0)*cj2);
IkReal x11521=(cj3*gconst20);
IkReal x11522=((1.0)*sj2);
IkReal x11523=(gconst19*r21);
IkReal x11524=((1.0)*gconst20);
IkReal x11525=(cj0*sj2);
IkReal x11526=(gconst19*r11);
IkReal x11527=((1.0)*r10);
IkReal x11528=(gconst19*sj3);
IkReal x11529=(sj3*x11516);
IkReal x11530=(r02*x11515);
IkReal x11531=((1.0)*x11515);
evalcond[0]=(((sj3*x11530))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((cj1*x11525))+((r02*x11516)));
evalcond[2]=(((cj0*x11518))+(((-1.0)*sj0*x11522))+((cj3*x11530)));
evalcond[3]=(((x11515*x11517))+(((-1.0)*sj1*x11522))+(((-1.0)*x11523*x11531)));
evalcond[4]=(((cj1*sj0*sj2))+(((-1.0)*cj0*x11520))+((gconst20*r10*x11515))+(((-1.0)*x11526*x11531)));
evalcond[5]=(cj1+((r20*x11519))+(((-1.0)*x11517*x11529))+((r21*x11521))+((x11523*x11529)));
evalcond[6]=(((r11*x11521))+((sj0*sj1))+(((-1.0)*r10*x11524*x11529))+((x11526*x11529))+((r10*x11519)));
evalcond[7]=((((-1.0)*r21*sj3*x11524))+((r21*x11516*x11519))+(((-1.0)*cj3*x11516*x11517))+(((-1.0)*r20*x11528))+(((-1.0)*sj1*x11520)));
evalcond[8]=(x11525+(((-1.0)*x11527*x11528))+((sj0*x11518))+(((-1.0)*x11516*x11521*x11527))+((r11*x11516*x11519))+(((-1.0)*r11*sj3*x11524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11532=((1.0)*sj0);
IkReal x11533=(cj1*sj2);
CheckValue<IkReal> x11534=IKPowWithIntegerCheck(((((-1.0)*gconst19*r11))+((gconst20*r10))),-1);
if(!x11534.valid){
continue;
}
CheckValue<IkReal> x11535=IKPowWithIntegerCheck(r02,-1);
if(!x11535.valid){
continue;
}
if( IKabs(((x11534.value)*((((cj0*cj2))+(((-1.0)*x11532*x11533)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11535.value)*(((((-1.0)*cj2*x11532))+(((-1.0)*cj0*x11533)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11534.value)*((((cj0*cj2))+(((-1.0)*x11532*x11533))))))+IKsqr(((x11535.value)*(((((-1.0)*cj2*x11532))+(((-1.0)*cj0*x11533))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11534.value)*((((cj0*cj2))+(((-1.0)*x11532*x11533))))), ((x11535.value)*(((((-1.0)*cj2*x11532))+(((-1.0)*cj0*x11533))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11536=IKsin(j4);
IkReal x11537=IKcos(j4);
IkReal x11538=(gconst20*r20);
IkReal x11539=(cj1*cj2);
IkReal x11540=(cj3*gconst19);
IkReal x11541=((1.0)*cj2);
IkReal x11542=(cj3*gconst20);
IkReal x11543=((1.0)*sj2);
IkReal x11544=(gconst19*r21);
IkReal x11545=((1.0)*gconst20);
IkReal x11546=(cj0*sj2);
IkReal x11547=(gconst19*r11);
IkReal x11548=((1.0)*r10);
IkReal x11549=(gconst19*sj3);
IkReal x11550=(sj3*x11537);
IkReal x11551=(r02*x11536);
IkReal x11552=((1.0)*x11536);
evalcond[0]=(((sj3*x11551))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((cj1*x11546))+((r02*x11537)));
evalcond[2]=(((cj3*x11551))+((cj0*x11539))+(((-1.0)*sj0*x11543)));
evalcond[3]=((((-1.0)*x11544*x11552))+((x11536*x11538))+(((-1.0)*sj1*x11543)));
evalcond[4]=((((-1.0)*cj0*x11541))+(((-1.0)*x11547*x11552))+((gconst20*r10*x11536))+((cj1*sj0*sj2)));
evalcond[5]=(((x11544*x11550))+cj1+((r20*x11540))+((r21*x11542))+(((-1.0)*x11538*x11550)));
evalcond[6]=(((x11547*x11550))+((r10*x11540))+((sj0*sj1))+((r11*x11542))+(((-1.0)*r10*x11545*x11550)));
evalcond[7]=(((r21*x11537*x11540))+(((-1.0)*r20*x11549))+(((-1.0)*r21*sj3*x11545))+(((-1.0)*sj1*x11541))+(((-1.0)*cj3*x11537*x11538)));
evalcond[8]=((((-1.0)*r11*sj3*x11545))+x11546+((r11*x11537*x11540))+(((-1.0)*x11537*x11542*x11548))+(((-1.0)*x11548*x11549))+((sj0*x11539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x11553 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11553.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x11553.value))));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
CheckValue<IkReal> x11554 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11554.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11554.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11555=((-1.0)*px);
CheckValue<IkReal> x11557 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11557.valid){
continue;
}
IkReal x11556=((1.0)*(x11557.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11555);
rxp1_1=(px*r21);
rxp1_2=(r11*x11555);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x11556)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x11556)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j4eval[0]=((((-1.0)*r11*r20))+(((1.0)*r10*r21)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11558=((-1.0)*px);
CheckValue<IkReal> x11560 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11560.valid){
continue;
}
IkReal x11559=((1.0)*(x11560.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11558);
rxp1_1=(px*r21);
rxp1_2=(r11*x11558);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x11559)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x11559)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11561=((-1.0)*px);
CheckValue<IkReal> x11563 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11563.valid){
continue;
}
IkReal x11562=((1.0)*(x11563.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11561);
rxp1_1=(px*r21);
rxp1_2=(r11*x11561);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x11562)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x11562)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11564=((-1.0)*px);
CheckValue<IkReal> x11566 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11566.valid){
continue;
}
IkReal x11565=((1.0)*(x11566.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11564);
rxp1_1=(px*r21);
rxp1_2=(r11*x11564);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x11565)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x11565)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j4eval[0]=r02;
j4eval[1]=IKsign(r02);
j4eval[2]=((IKabs(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2)))))+(IKabs((cj0*sj1))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11567=((-1.0)*px);
CheckValue<IkReal> x11569 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11569.valid){
continue;
}
IkReal x11568=((1.0)*(x11569.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11567);
rxp1_1=(px*r21);
rxp1_2=(r11*x11567);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x11568)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x11568)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
IkReal x11570=((((-1.0)*r11*r20))+(((1.0)*r10*r21)));
j4eval[0]=x11570;
j4eval[1]=IKsign(x11570);
j4eval[2]=((IKabs((((cj0*cj2))+(((-1.0)*cj1*sj0*sj2)))))+(IKabs((sj0*sj1))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11571=((-1.0)*px);
CheckValue<IkReal> x11573 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11573.valid){
continue;
}
IkReal x11572=((1.0)*(x11573.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11571);
rxp1_1=(px*r21);
rxp1_2=(r11*x11571);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x11572)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x11572)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j4eval[0]=r02;
j4eval[1]=((((1.0)*r11*r20))+(((-1.0)*r10*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11574=((-1.0)*sj1);
CheckValue<IkReal> x11575=IKPowWithIntegerCheck(r02,-1);
if(!x11575.valid){
continue;
}
CheckValue<IkReal> x11576=IKPowWithIntegerCheck((((gconst22*r11))+(((-1.0)*gconst23*r10))),-1);
if(!x11576.valid){
continue;
}
if( IKabs((cj0*x11574*(x11575.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj0*x11574*(x11576.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*x11574*(x11575.value)))+IKsqr((sj0*x11574*(x11576.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*x11574*(x11575.value)), (sj0*x11574*(x11576.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11577=IKcos(j4);
IkReal x11578=IKsin(j4);
IkReal x11579=(cj1*sj2);
IkReal x11580=(gconst23*x11578);
IkReal x11581=(gconst22*x11577);
IkReal x11582=((1.0)*gconst23*x11577);
IkReal x11583=((1.0)*gconst22*x11578);
evalcond[0]=(((r02*x11578))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((cj0*x11579))+((r02*x11577)));
evalcond[2]=(cj1+((r21*x11581))+(((-1.0)*r20*x11582)));
evalcond[3]=(((sj0*sj1))+(((-1.0)*r10*x11582))+((r11*x11581)));
evalcond[4]=(((r20*x11580))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x11583)));
evalcond[5]=(((sj0*x11579))+((r10*x11580))+(((-1.0)*r11*x11583))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11584 = IKatan2WithCheck(IkReal((((cj0*cj2))+(((-1.0)*cj1*sj0*sj2)))),IkReal((sj0*sj1)),IKFAST_ATAN2_MAGTHRESH);
if(!x11584.valid){
continue;
}
CheckValue<IkReal> x11585=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r11))+((gconst23*r10)))),-1);
if(!x11585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11584.value)+(((1.5707963267949)*(x11585.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11586=IKcos(j4);
IkReal x11587=IKsin(j4);
IkReal x11588=(cj1*sj2);
IkReal x11589=(gconst23*x11587);
IkReal x11590=(gconst22*x11586);
IkReal x11591=((1.0)*gconst23*x11586);
IkReal x11592=((1.0)*gconst22*x11587);
evalcond[0]=(((r02*x11587))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((cj0*x11588))+((r02*x11586)));
evalcond[2]=(cj1+((r21*x11590))+(((-1.0)*r20*x11591)));
evalcond[3]=(((sj0*sj1))+((r11*x11590))+(((-1.0)*r10*x11591)));
evalcond[4]=(((r20*x11589))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x11592)));
evalcond[5]=(((sj0*x11588))+(((-1.0)*r11*x11592))+((r10*x11589))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11593=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x11593.valid){
continue;
}
CheckValue<IkReal> x11594 = IKatan2WithCheck(IkReal(((-1.0)*cj0*sj1)),IkReal(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11593.value)))+(x11594.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11595=IKcos(j4);
IkReal x11596=IKsin(j4);
IkReal x11597=(cj1*sj2);
IkReal x11598=(gconst23*x11596);
IkReal x11599=(gconst22*x11595);
IkReal x11600=((1.0)*gconst23*x11595);
IkReal x11601=((1.0)*gconst22*x11596);
evalcond[0]=(((r02*x11596))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((r02*x11595))+((cj0*x11597)));
evalcond[2]=((((-1.0)*r20*x11600))+cj1+((r21*x11599)));
evalcond[3]=((((-1.0)*r10*x11600))+((sj0*sj1))+((r11*x11599)));
evalcond[4]=((((-1.0)*r21*x11601))+((r20*x11598))+(((-1.0)*sj1*sj2)));
evalcond[5]=((((-1.0)*r11*x11601))+((sj0*x11597))+((r10*x11598))+(((-1.0)*cj0*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11602=((-1.0)*px);
CheckValue<IkReal> x11604 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11604.valid){
continue;
}
IkReal x11603=((1.0)*(x11604.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11602);
rxp1_1=(px*r21);
rxp1_2=(r11*x11602);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x11603)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x11603)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j4eval[0]=r02;
j4eval[1]=IKsign(r02);
j4eval[2]=((IKabs(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2)))))+(IKabs((cj0*sj1))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11605=((-1.0)*px);
CheckValue<IkReal> x11607 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11607.valid){
continue;
}
IkReal x11606=((1.0)*(x11607.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11605);
rxp1_1=(px*r21);
rxp1_2=(r11*x11605);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x11606)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x11606)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
IkReal x11608=((((-1.0)*r11*r20))+(((1.0)*r10*r21)));
j4eval[0]=x11608;
j4eval[1]=IKsign(x11608);
j4eval[2]=((IKabs((((cj0*cj2))+(((-1.0)*cj1*sj0*sj2)))))+(IKabs((sj0*sj1))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11609=((-1.0)*px);
CheckValue<IkReal> x11611 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11611.valid){
continue;
}
IkReal x11610=((1.0)*(x11611.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11609);
rxp1_1=(px*r21);
rxp1_2=(r11*x11609);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x11610)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x11610)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j4eval[0]=r02;
j4eval[1]=((((-1.0)*r11*r20))+(((1.0)*r10*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11612=IKPowWithIntegerCheck(r02,-1);
if(!x11612.valid){
continue;
}
CheckValue<IkReal> x11613=IKPowWithIntegerCheck(((((-1.0)*gconst22*r11))+((gconst23*r10))),-1);
if(!x11613.valid){
continue;
}
if( IKabs((cj0*sj1*(x11612.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*sj1*(x11613.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*sj1*(x11612.value)))+IKsqr(((-1.0)*sj0*sj1*(x11613.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*sj1*(x11612.value)), ((-1.0)*sj0*sj1*(x11613.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11614=IKcos(j4);
IkReal x11615=IKsin(j4);
IkReal x11616=((1.0)*gconst22);
IkReal x11617=(cj1*sj2);
IkReal x11618=(gconst23*x11614);
IkReal x11619=(gconst23*x11615);
evalcond[0]=((((-1.0)*r02*x11615))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((cj0*x11617))+((r02*x11614)));
evalcond[2]=(cj1+(((-1.0)*r21*x11614*x11616))+((r20*x11618)));
evalcond[3]=(((sj0*sj1))+(((-1.0)*r11*x11614*x11616))+((r10*x11618)));
evalcond[4]=((((-1.0)*r21*x11615*x11616))+(((-1.0)*sj1*sj2))+((r20*x11619)));
evalcond[5]=(((sj0*x11617))+(((-1.0)*r11*x11615*x11616))+(((-1.0)*cj0*cj2))+((r10*x11619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11620=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r11))+((gconst23*r10)))),-1);
if(!x11620.valid){
continue;
}
CheckValue<IkReal> x11621 = IKatan2WithCheck(IkReal((((cj0*cj2))+(((-1.0)*cj1*sj0*sj2)))),IkReal(((-1.0)*sj0*sj1)),IKFAST_ATAN2_MAGTHRESH);
if(!x11621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11620.value)))+(x11621.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11622=IKcos(j4);
IkReal x11623=IKsin(j4);
IkReal x11624=((1.0)*gconst22);
IkReal x11625=(cj1*sj2);
IkReal x11626=(gconst23*x11622);
IkReal x11627=(gconst23*x11623);
evalcond[0]=((((-1.0)*r02*x11623))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((cj0*x11625))+((r02*x11622)));
evalcond[2]=(cj1+(((-1.0)*r21*x11622*x11624))+((r20*x11626)));
evalcond[3]=((((-1.0)*r11*x11622*x11624))+((sj0*sj1))+((r10*x11626)));
evalcond[4]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x11623*x11624))+((r20*x11627)));
evalcond[5]=((((-1.0)*r11*x11623*x11624))+((sj0*x11625))+(((-1.0)*cj0*cj2))+((r10*x11627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11628=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x11628.valid){
continue;
}
CheckValue<IkReal> x11629 = IKatan2WithCheck(IkReal((cj0*sj1)),IkReal(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11628.value)))+(x11629.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11630=IKcos(j4);
IkReal x11631=IKsin(j4);
IkReal x11632=((1.0)*gconst22);
IkReal x11633=(cj1*sj2);
IkReal x11634=(gconst23*x11630);
IkReal x11635=(gconst23*x11631);
evalcond[0]=((((-1.0)*r02*x11631))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((r02*x11630))+((cj0*x11633)));
evalcond[2]=((((-1.0)*r21*x11630*x11632))+cj1+((r20*x11634)));
evalcond[3]=(((r10*x11634))+((sj0*sj1))+(((-1.0)*r11*x11630*x11632)));
evalcond[4]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x11631*x11632))+((r20*x11635)));
evalcond[5]=(((r10*x11635))+((sj0*x11633))+(((-1.0)*cj0*cj2))+(((-1.0)*r11*x11631*x11632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11636=((-1.0)*px);
CheckValue<IkReal> x11638 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11638.valid){
continue;
}
IkReal x11637=((1.0)*(x11638.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11636);
rxp1_1=(px*r21);
rxp1_2=(r11*x11636);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x11637)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x11637)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j4eval[0]=r02;
j4eval[1]=IKsign(r02);
j4eval[2]=((IKabs((sj0*sj2)))+(IKabs((cj2*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11639=((-1.0)*px);
CheckValue<IkReal> x11641 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11641.valid){
continue;
}
IkReal x11640=((1.0)*(x11641.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11639);
rxp1_1=(px*r21);
rxp1_2=(r11*x11639);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x11640)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x11640)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
IkReal x11642=(cj1*sj0);
IkReal x11643=((((-1.0)*r11*r20))+(((1.0)*r10*r21)));
j4eval[0]=x11643;
j4eval[1]=IKsign(x11643);
j4eval[2]=((IKabs((cj2*x11642)))+(IKabs((sj2*x11642))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11644=((-1.0)*px);
CheckValue<IkReal> x11646 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11646.valid){
continue;
}
IkReal x11645=((1.0)*(x11646.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11644);
rxp1_1=(px*r21);
rxp1_2=(r11*x11644);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x11645)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x11645)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j4eval[0]=r02;
j4eval[1]=((((1.0)*r11*r20))+(((-1.0)*r10*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11647=IKPowWithIntegerCheck(r02,-1);
if(!x11647.valid){
continue;
}
CheckValue<IkReal> x11648=IKPowWithIntegerCheck((((gconst22*r11))+(((-1.0)*gconst23*r10))),-1);
if(!x11648.valid){
continue;
}
if( IKabs((sj0*sj2*(x11647.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj1*cj2*sj0*(x11648.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*sj2*(x11647.value)))+IKsqr(((-1.0)*cj1*cj2*sj0*(x11648.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*sj2*(x11647.value)), ((-1.0)*cj1*cj2*sj0*(x11648.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11649=IKsin(j4);
IkReal x11650=IKcos(j4);
IkReal x11651=(cj2*sj0);
IkReal x11652=(sj0*sj2);
IkReal x11653=(gconst23*x11649);
IkReal x11654=(gconst22*x11650);
IkReal x11655=((1.0)*gconst23*x11650);
IkReal x11656=((1.0)*gconst22*x11649);
evalcond[0]=(x11651+((r02*x11650)));
evalcond[1]=((((-1.0)*x11652))+((r02*x11649)));
evalcond[2]=(((r20*x11653))+(((-1.0)*r21*x11656)));
evalcond[3]=(((r21*x11654))+(((-1.0)*r20*x11655)));
evalcond[4]=(((r10*x11653))+((cj1*x11652))+(((-1.0)*r11*x11656)));
evalcond[5]=(((r11*x11654))+((cj1*x11651))+(((-1.0)*r10*x11655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11657=(cj1*sj0);
CheckValue<IkReal> x11658=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r11))+((gconst23*r10)))),-1);
if(!x11658.valid){
continue;
}
CheckValue<IkReal> x11659 = IKatan2WithCheck(IkReal(((-1.0)*sj2*x11657)),IkReal((cj2*x11657)),IKFAST_ATAN2_MAGTHRESH);
if(!x11659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11658.value)))+(x11659.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11660=IKsin(j4);
IkReal x11661=IKcos(j4);
IkReal x11662=(cj2*sj0);
IkReal x11663=(sj0*sj2);
IkReal x11664=(gconst23*x11660);
IkReal x11665=(gconst22*x11661);
IkReal x11666=((1.0)*gconst23*x11661);
IkReal x11667=((1.0)*gconst22*x11660);
evalcond[0]=(x11662+((r02*x11661)));
evalcond[1]=((((-1.0)*x11663))+((r02*x11660)));
evalcond[2]=((((-1.0)*r21*x11667))+((r20*x11664)));
evalcond[3]=(((r21*x11665))+(((-1.0)*r20*x11666)));
evalcond[4]=((((-1.0)*r11*x11667))+((cj1*x11663))+((r10*x11664)));
evalcond[5]=(((r11*x11665))+((cj1*x11662))+(((-1.0)*r10*x11666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11668=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x11668.valid){
continue;
}
CheckValue<IkReal> x11669 = IKatan2WithCheck(IkReal((sj0*sj2)),IkReal(((-1.0)*cj2*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x11669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11668.value)))+(x11669.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11670=IKsin(j4);
IkReal x11671=IKcos(j4);
IkReal x11672=(cj2*sj0);
IkReal x11673=(sj0*sj2);
IkReal x11674=(gconst23*x11670);
IkReal x11675=(gconst22*x11671);
IkReal x11676=((1.0)*gconst23*x11671);
IkReal x11677=((1.0)*gconst22*x11670);
evalcond[0]=(x11672+((r02*x11671)));
evalcond[1]=(((r02*x11670))+(((-1.0)*x11673)));
evalcond[2]=((((-1.0)*r21*x11677))+((r20*x11674)));
evalcond[3]=((((-1.0)*r20*x11676))+((r21*x11675)));
evalcond[4]=(((r10*x11674))+((cj1*x11673))+(((-1.0)*r11*x11677)));
evalcond[5]=(((r11*x11675))+(((-1.0)*r10*x11676))+((cj1*x11672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11678=((-1.0)*px);
CheckValue<IkReal> x11680 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11680.valid){
continue;
}
IkReal x11679=((1.0)*(x11680.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11678);
rxp1_1=(px*r21);
rxp1_2=(r11*x11678);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x11679)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x11679)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j4eval[0]=r02;
j4eval[1]=IKsign(r02);
j4eval[2]=((IKabs((sj0*sj2)))+(IKabs((cj2*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11681=((-1.0)*px);
CheckValue<IkReal> x11683 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11683.valid){
continue;
}
IkReal x11682=((1.0)*(x11683.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11681);
rxp1_1=(px*r21);
rxp1_2=(r11*x11681);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x11682)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x11682)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
IkReal x11684=(cj1*sj0);
IkReal x11685=((((-1.0)*r11*r20))+(((1.0)*r10*r21)));
j4eval[0]=x11685;
j4eval[1]=IKsign(x11685);
j4eval[2]=((IKabs((sj2*x11684)))+(IKabs((cj2*x11684))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11686=((-1.0)*px);
CheckValue<IkReal> x11688 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11688.valid){
continue;
}
IkReal x11687=((1.0)*(x11688.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11686);
rxp1_1=(px*r21);
rxp1_2=(r11*x11686);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x11687)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x11687)));
IkReal gconst22=((1.0)*r20);
IkReal gconst23=((1.0)*r21);
j4eval[0]=((((-1.0)*r11*r20))+(((1.0)*r10*r21)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11689=((-1.0)*sj0);
CheckValue<IkReal> x11690=IKPowWithIntegerCheck(((((-1.0)*gconst22*r11))+((gconst23*r10))),-1);
if(!x11690.valid){
continue;
}
CheckValue<IkReal> x11691=IKPowWithIntegerCheck(r02,-1);
if(!x11691.valid){
continue;
}
if( IKabs((cj1*sj2*x11689*(x11690.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj2*x11689*(x11691.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*sj2*x11689*(x11690.value)))+IKsqr((cj2*x11689*(x11691.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj1*sj2*x11689*(x11690.value)), (cj2*x11689*(x11691.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11692=IKsin(j4);
IkReal x11693=IKcos(j4);
IkReal x11694=((1.0)*gconst22);
IkReal x11695=(cj2*sj0);
IkReal x11696=(gconst23*r10);
IkReal x11697=(sj0*sj2);
IkReal x11698=(gconst23*r20);
evalcond[0]=(x11695+((r02*x11693)));
evalcond[1]=((((-1.0)*x11697))+(((-1.0)*r02*x11692)));
evalcond[2]=(((x11692*x11698))+(((-1.0)*r21*x11692*x11694)));
evalcond[3]=(((x11693*x11698))+(((-1.0)*r21*x11693*x11694)));
evalcond[4]=((((-1.0)*r11*x11692*x11694))+((x11692*x11696))+((cj1*x11697)));
evalcond[5]=(((x11693*x11696))+((cj1*x11695))+(((-1.0)*r11*x11693*x11694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11699=((-1.0)*cj1*sj0);
CheckValue<IkReal> x11700=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r11))+((gconst23*r10)))),-1);
if(!x11700.valid){
continue;
}
CheckValue<IkReal> x11701 = IKatan2WithCheck(IkReal((sj2*x11699)),IkReal((cj2*x11699)),IKFAST_ATAN2_MAGTHRESH);
if(!x11701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11700.value)))+(x11701.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11702=IKsin(j4);
IkReal x11703=IKcos(j4);
IkReal x11704=((1.0)*gconst22);
IkReal x11705=(cj2*sj0);
IkReal x11706=(gconst23*r10);
IkReal x11707=(sj0*sj2);
IkReal x11708=(gconst23*r20);
evalcond[0]=(x11705+((r02*x11703)));
evalcond[1]=((((-1.0)*r02*x11702))+(((-1.0)*x11707)));
evalcond[2]=(((x11702*x11708))+(((-1.0)*r21*x11702*x11704)));
evalcond[3]=(((x11703*x11708))+(((-1.0)*r21*x11703*x11704)));
evalcond[4]=((((-1.0)*r11*x11702*x11704))+((x11702*x11706))+((cj1*x11707)));
evalcond[5]=(((x11703*x11706))+(((-1.0)*r11*x11703*x11704))+((cj1*x11705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11709=((-1.0)*sj0);
CheckValue<IkReal> x11710=IKPowWithIntegerCheck(IKsign(r02),-1);
if(!x11710.valid){
continue;
}
CheckValue<IkReal> x11711 = IKatan2WithCheck(IkReal((sj2*x11709)),IkReal((cj2*x11709)),IKFAST_ATAN2_MAGTHRESH);
if(!x11711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11710.value)))+(x11711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11712=IKsin(j4);
IkReal x11713=IKcos(j4);
IkReal x11714=((1.0)*gconst22);
IkReal x11715=(cj2*sj0);
IkReal x11716=(gconst23*r10);
IkReal x11717=(sj0*sj2);
IkReal x11718=(gconst23*r20);
evalcond[0]=(x11715+((r02*x11713)));
evalcond[1]=((((-1.0)*x11717))+(((-1.0)*r02*x11712)));
evalcond[2]=((((-1.0)*r21*x11712*x11714))+((x11712*x11718)));
evalcond[3]=(((x11713*x11718))+(((-1.0)*r21*x11713*x11714)));
evalcond[4]=(((x11712*x11716))+(((-1.0)*r11*x11712*x11714))+((cj1*x11717)));
evalcond[5]=(((x11713*x11716))+((cj1*x11715))+(((-1.0)*r11*x11713*x11714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11722=IKPowWithIntegerCheck(r02,-1);
if(!x11722.valid){
continue;
}
IkReal x11719=x11722.value;
IkReal x11720=((1.0)*cj2);
IkReal x11721=(cj0*cj1);
CheckValue<IkReal> x11723=IKPowWithIntegerCheck(cj3,-1);
if(!x11723.valid){
continue;
}
if( IKabs((x11719*(x11723.value)*(((((-1.0)*x11720*x11721))+((sj0*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11719*(((((-1.0)*sj2*x11721))+(((-1.0)*sj0*x11720)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11719*(x11723.value)*(((((-1.0)*x11720*x11721))+((sj0*sj2))))))+IKsqr((x11719*(((((-1.0)*sj2*x11721))+(((-1.0)*sj0*x11720))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11719*(x11723.value)*(((((-1.0)*x11720*x11721))+((sj0*sj2))))), (x11719*(((((-1.0)*sj2*x11721))+(((-1.0)*sj0*x11720))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11724=IKsin(j4);
IkReal x11725=IKcos(j4);
IkReal x11726=(gconst22*r21);
IkReal x11727=((1.0)*sj3);
IkReal x11728=(gconst23*r10);
IkReal x11729=(gconst22*r20);
IkReal x11730=(gconst23*r21);
IkReal x11731=((1.0)*sj1);
IkReal x11732=(cj0*cj2);
IkReal x11733=(gconst22*r10);
IkReal x11734=(cj1*sj0);
IkReal x11735=(gconst23*r20);
IkReal x11736=(gconst22*r11);
IkReal x11737=(cj0*sj2);
IkReal x11738=(gconst23*r11);
IkReal x11739=(cj3*x11725);
IkReal x11740=((1.0)*x11724);
IkReal x11741=(sj3*x11725);
IkReal x11742=(r02*x11724);
evalcond[0]=(((cj0*sj1))+((sj3*x11742)));
evalcond[1]=(((cj2*sj0))+((r02*x11725))+((cj1*x11737)));
evalcond[2]=(((cj1*x11732))+(((-1.0)*sj0*sj2))+((cj3*x11742)));
evalcond[3]=((((-1.0)*sj2*x11731))+((x11724*x11735))+(((-1.0)*x11726*x11740)));
evalcond[4]=((((-1.0)*x11732))+((x11724*x11728))+(((-1.0)*x11736*x11740))+((sj2*x11734)));
evalcond[5]=(cj1+((cj3*x11729))+(((-1.0)*x11725*x11727*x11735))+((cj3*x11730))+((x11726*x11741)));
evalcond[6]=(((x11736*x11741))+((sj0*sj1))+(((-1.0)*x11725*x11727*x11728))+((cj3*x11733))+((cj3*x11738)));
evalcond[7]=((((-1.0)*x11735*x11739))+(((-1.0)*cj2*x11731))+(((-1.0)*x11727*x11729))+(((-1.0)*x11727*x11730))+((x11726*x11739)));
evalcond[8]=(((x11736*x11739))+x11737+((cj2*x11734))+(((-1.0)*x11727*x11733))+(((-1.0)*x11727*x11738))+(((-1.0)*x11728*x11739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11744=IKPowWithIntegerCheck(r02,-1);
if(!x11744.valid){
continue;
}
IkReal x11743=x11744.value;
CheckValue<IkReal> x11745=IKPowWithIntegerCheck(sj3,-1);
if(!x11745.valid){
continue;
}
if( IKabs(((-1.0)*cj0*sj1*x11743*(x11745.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11743*(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*sj1*x11743*(x11745.value)))+IKsqr((x11743*(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*sj1*x11743*(x11745.value)), (x11743*(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11746=IKsin(j4);
IkReal x11747=IKcos(j4);
IkReal x11748=(gconst22*r21);
IkReal x11749=((1.0)*sj3);
IkReal x11750=(gconst23*r10);
IkReal x11751=(gconst22*r20);
IkReal x11752=(gconst23*r21);
IkReal x11753=((1.0)*sj1);
IkReal x11754=(cj0*cj2);
IkReal x11755=(gconst22*r10);
IkReal x11756=(cj1*sj0);
IkReal x11757=(gconst23*r20);
IkReal x11758=(gconst22*r11);
IkReal x11759=(cj0*sj2);
IkReal x11760=(gconst23*r11);
IkReal x11761=(cj3*x11747);
IkReal x11762=((1.0)*x11746);
IkReal x11763=(sj3*x11747);
IkReal x11764=(r02*x11746);
evalcond[0]=(((sj3*x11764))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((r02*x11747))+((cj1*x11759)));
evalcond[2]=(((cj3*x11764))+(((-1.0)*sj0*sj2))+((cj1*x11754)));
evalcond[3]=((((-1.0)*sj2*x11753))+((x11746*x11757))+(((-1.0)*x11748*x11762)));
evalcond[4]=((((-1.0)*x11754))+((x11746*x11750))+((sj2*x11756))+(((-1.0)*x11758*x11762)));
evalcond[5]=((((-1.0)*x11747*x11749*x11757))+((x11748*x11763))+cj1+((cj3*x11751))+((cj3*x11752)));
evalcond[6]=((((-1.0)*x11747*x11749*x11750))+((sj0*sj1))+((cj3*x11760))+((cj3*x11755))+((x11758*x11763)));
evalcond[7]=(((x11748*x11761))+(((-1.0)*cj2*x11753))+(((-1.0)*x11749*x11751))+(((-1.0)*x11749*x11752))+(((-1.0)*x11757*x11761)));
evalcond[8]=(x11759+(((-1.0)*x11750*x11761))+(((-1.0)*x11749*x11755))+(((-1.0)*x11749*x11760))+((cj2*x11756))+((x11758*x11761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11765=((1.0)*sj0);
IkReal x11766=(cj1*sj2);
CheckValue<IkReal> x11767=IKPowWithIntegerCheck(((((-1.0)*gconst22*r11))+((gconst23*r10))),-1);
if(!x11767.valid){
continue;
}
CheckValue<IkReal> x11768=IKPowWithIntegerCheck(r02,-1);
if(!x11768.valid){
continue;
}
if( IKabs(((x11767.value)*(((((-1.0)*x11765*x11766))+((cj0*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11768.value)*(((((-1.0)*cj0*x11766))+(((-1.0)*cj2*x11765)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11767.value)*(((((-1.0)*x11765*x11766))+((cj0*cj2))))))+IKsqr(((x11768.value)*(((((-1.0)*cj0*x11766))+(((-1.0)*cj2*x11765))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11767.value)*(((((-1.0)*x11765*x11766))+((cj0*cj2))))), ((x11768.value)*(((((-1.0)*cj0*x11766))+(((-1.0)*cj2*x11765))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11769=IKsin(j4);
IkReal x11770=IKcos(j4);
IkReal x11771=(gconst22*r21);
IkReal x11772=((1.0)*sj3);
IkReal x11773=(gconst23*r10);
IkReal x11774=(gconst22*r20);
IkReal x11775=(gconst23*r21);
IkReal x11776=((1.0)*sj1);
IkReal x11777=(cj0*cj2);
IkReal x11778=(gconst22*r10);
IkReal x11779=(cj1*sj0);
IkReal x11780=(gconst23*r20);
IkReal x11781=(gconst22*r11);
IkReal x11782=(cj0*sj2);
IkReal x11783=(gconst23*r11);
IkReal x11784=(cj3*x11770);
IkReal x11785=((1.0)*x11769);
IkReal x11786=(sj3*x11770);
IkReal x11787=(r02*x11769);
evalcond[0]=(((sj3*x11787))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((r02*x11770))+((cj1*x11782)));
evalcond[2]=(((cj1*x11777))+(((-1.0)*sj0*sj2))+((cj3*x11787)));
evalcond[3]=((((-1.0)*x11771*x11785))+(((-1.0)*sj2*x11776))+((x11769*x11780)));
evalcond[4]=((((-1.0)*x11777))+((x11769*x11773))+(((-1.0)*x11781*x11785))+((sj2*x11779)));
evalcond[5]=(cj1+((x11771*x11786))+((cj3*x11775))+((cj3*x11774))+(((-1.0)*x11770*x11772*x11780)));
evalcond[6]=(((sj0*sj1))+(((-1.0)*x11770*x11772*x11773))+((cj3*x11783))+((cj3*x11778))+((x11781*x11786)));
evalcond[7]=((((-1.0)*x11780*x11784))+(((-1.0)*cj2*x11776))+(((-1.0)*x11772*x11774))+(((-1.0)*x11772*x11775))+((x11771*x11784)));
evalcond[8]=(x11782+(((-1.0)*x11772*x11778))+(((-1.0)*x11772*x11783))+((cj2*x11779))+(((-1.0)*x11773*x11784))+((x11781*x11784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11791=IKPowWithIntegerCheck(r02,-1);
if(!x11791.valid){
continue;
}
IkReal x11788=x11791.value;
IkReal x11789=((1.0)*cj2);
IkReal x11790=(cj0*cj1);
CheckValue<IkReal> x11792=IKPowWithIntegerCheck(cj3,-1);
if(!x11792.valid){
continue;
}
if( IKabs((x11788*(x11792.value)*((((sj0*sj2))+(((-1.0)*x11789*x11790)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11788*(((((-1.0)*sj0*x11789))+(((-1.0)*sj2*x11790)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11788*(x11792.value)*((((sj0*sj2))+(((-1.0)*x11789*x11790))))))+IKsqr((x11788*(((((-1.0)*sj0*x11789))+(((-1.0)*sj2*x11790))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11788*(x11792.value)*((((sj0*sj2))+(((-1.0)*x11789*x11790))))), (x11788*(((((-1.0)*sj0*x11789))+(((-1.0)*sj2*x11790))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11793=IKsin(j4);
IkReal x11794=IKcos(j4);
IkReal x11795=(r11*sj5);
IkReal x11796=(cj1*sj0);
IkReal x11797=((1.0)*sj2);
IkReal x11798=((1.0)*cj2);
IkReal x11799=(cj5*r10);
IkReal x11800=(cj3*sj5);
IkReal x11801=(r21*sj5);
IkReal x11802=((1.0)*sj3);
IkReal x11803=(cj5*r11);
IkReal x11804=(cj5*r20);
IkReal x11805=(cj0*sj2);
IkReal x11806=(cj5*r21);
IkReal x11807=((1.0)*x11793);
IkReal x11808=(cj3*x11794);
IkReal x11809=(sj3*x11794);
IkReal x11810=(r02*x11793);
evalcond[0]=(((sj3*x11810))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((cj1*x11805))+((r02*x11794)));
evalcond[2]=(((cj0*cj1*cj2))+(((-1.0)*sj0*x11797))+((cj3*x11810)));
evalcond[3]=((((-1.0)*sj1*x11797))+((x11793*x11804))+(((-1.0)*x11801*x11807)));
evalcond[4]=((((-1.0)*x11795*x11807))+((x11793*x11799))+(((-1.0)*cj0*x11798))+((sj2*x11796)));
evalcond[5]=(cj1+((r20*x11800))+((x11801*x11809))+(((-1.0)*x11794*x11802*x11804))+((cj3*x11806)));
evalcond[6]=((((-1.0)*x11794*x11799*x11802))+((x11795*x11809))+((sj0*sj1))+((r10*x11800))+((cj3*x11803)));
evalcond[7]=((((-1.0)*x11802*x11806))+(((-1.0)*sj1*x11798))+(((-1.0)*x11804*x11808))+(((-1.0)*r20*sj5*x11802))+((r21*x11794*x11800)));
evalcond[8]=((((-1.0)*x11802*x11803))+(((-1.0)*r10*sj5*x11802))+((x11795*x11808))+(((-1.0)*x11799*x11808))+((cj2*x11796))+x11805);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11812=IKPowWithIntegerCheck(r02,-1);
if(!x11812.valid){
continue;
}
IkReal x11811=x11812.value;
CheckValue<IkReal> x11813=IKPowWithIntegerCheck(sj3,-1);
if(!x11813.valid){
continue;
}
if( IKabs(((-1.0)*cj0*sj1*x11811*(x11813.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11811*(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*sj1*x11811*(x11813.value)))+IKsqr((x11811*(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*sj1*x11811*(x11813.value)), (x11811*(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11814=IKsin(j4);
IkReal x11815=IKcos(j4);
IkReal x11816=(r11*sj5);
IkReal x11817=(cj1*sj0);
IkReal x11818=((1.0)*sj2);
IkReal x11819=((1.0)*cj2);
IkReal x11820=(cj5*r10);
IkReal x11821=(cj3*sj5);
IkReal x11822=(r21*sj5);
IkReal x11823=((1.0)*sj3);
IkReal x11824=(cj5*r11);
IkReal x11825=(cj5*r20);
IkReal x11826=(cj0*sj2);
IkReal x11827=(cj5*r21);
IkReal x11828=((1.0)*x11814);
IkReal x11829=(cj3*x11815);
IkReal x11830=(sj3*x11815);
IkReal x11831=(r02*x11814);
evalcond[0]=(((sj3*x11831))+((cj0*sj1)));
evalcond[1]=(((cj2*sj0))+((cj1*x11826))+((r02*x11815)));
evalcond[2]=((((-1.0)*sj0*x11818))+((cj0*cj1*cj2))+((cj3*x11831)));
evalcond[3]=((((-1.0)*x11822*x11828))+((x11814*x11825))+(((-1.0)*sj1*x11818)));
evalcond[4]=(((x11814*x11820))+(((-1.0)*cj0*x11819))+((sj2*x11817))+(((-1.0)*x11816*x11828)));
evalcond[5]=(((cj3*x11827))+cj1+(((-1.0)*x11815*x11823*x11825))+((x11822*x11830))+((r20*x11821)));
evalcond[6]=(((cj3*x11824))+((x11816*x11830))+(((-1.0)*x11815*x11820*x11823))+((r10*x11821))+((sj0*sj1)));
evalcond[7]=((((-1.0)*x11825*x11829))+(((-1.0)*r20*sj5*x11823))+(((-1.0)*x11823*x11827))+((r21*x11815*x11821))+(((-1.0)*sj1*x11819)));
evalcond[8]=(((x11816*x11829))+(((-1.0)*x11820*x11829))+(((-1.0)*x11823*x11824))+((cj2*x11817))+x11826+(((-1.0)*r10*sj5*x11823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11832=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11832.valid){
continue;
}
CheckValue<IkReal> x11833=IKPowWithIntegerCheck(r02,-1);
if(!x11833.valid){
continue;
}
if( IKabs((sj1*sj2*(x11832.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11833.value)*(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj1*sj2*(x11832.value)))+IKsqr(((x11833.value)*(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj1*sj2*(x11832.value)), ((x11833.value)*(((((-1.0)*cj2*sj0))+(((-1.0)*cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11834=IKsin(j4);
IkReal x11835=IKcos(j4);
IkReal x11836=(r11*sj5);
IkReal x11837=(cj1*sj0);
IkReal x11838=((1.0)*sj2);
IkReal x11839=((1.0)*cj2);
IkReal x11840=(cj5*r10);
IkReal x11841=(cj3*sj5);
IkReal x11842=(r21*sj5);
IkReal x11843=((1.0)*sj3);
IkReal x11844=(cj5*r11);
IkReal x11845=(cj5*r20);
IkReal x11846=(cj0*sj2);
IkReal x11847=(cj5*r21);
IkReal x11848=((1.0)*x11834);
IkReal x11849=(cj3*x11835);
IkReal x11850=(sj3*x11835);
IkReal x11851=(r02*x11834);
evalcond[0]=(((cj0*sj1))+((sj3*x11851)));
evalcond[1]=(((cj2*sj0))+((r02*x11835))+((cj1*x11846)));
evalcond[2]=(((cj0*cj1*cj2))+((cj3*x11851))+(((-1.0)*sj0*x11838)));
evalcond[3]=(((x11834*x11845))+(((-1.0)*sj1*x11838))+(((-1.0)*x11842*x11848)));
evalcond[4]=(((x11834*x11840))+((sj2*x11837))+(((-1.0)*cj0*x11839))+(((-1.0)*x11836*x11848)));
evalcond[5]=((((-1.0)*x11835*x11843*x11845))+cj1+((r20*x11841))+((x11842*x11850))+((cj3*x11847)));
evalcond[6]=((((-1.0)*x11835*x11840*x11843))+((x11836*x11850))+((sj0*sj1))+((cj3*x11844))+((r10*x11841)));
evalcond[7]=((((-1.0)*x11843*x11847))+(((-1.0)*r20*sj5*x11843))+(((-1.0)*sj1*x11839))+(((-1.0)*x11845*x11849))+((r21*x11835*x11841)));
evalcond[8]=((((-1.0)*x11843*x11844))+((x11836*x11849))+(((-1.0)*x11840*x11849))+(((-1.0)*r10*sj5*x11843))+x11846+((cj2*x11837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11852=(cj0*cj2);
IkReal x11853=(cj2*sj0);
IkReal x11854=(cj1*sj2);
IkReal x11855=((1.0)*sj0);
IkReal x11856=(r11*sj5);
IkReal x11857=(cj5*r00);
IkReal x11858=(r01*sj5);
IkReal x11859=((1.0)*cj5*r10);
CheckValue<IkReal> x11860=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x11860.valid){
continue;
}
CheckValue<IkReal> x11861 = IKatan2WithCheck(IkReal((((cj0*r12*x11854))+((r12*x11853))+(((-1.0)*r02*x11854*x11855))+((r02*x11852)))),IkReal((((x11853*x11856))+((x11852*x11858))+(((-1.0)*x11852*x11857))+(((-1.0)*x11854*x11855*x11858))+(((-1.0)*x11853*x11859))+((sj0*x11854*x11857))+((cj0*x11854*x11856))+(((-1.0)*cj0*x11854*x11859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11860.value)))+(x11861.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11862=IKsin(j4);
IkReal x11863=IKcos(j4);
IkReal x11864=(r11*sj5);
IkReal x11865=(cj1*cj2);
IkReal x11866=(cj3*cj5);
IkReal x11867=((1.0)*sj2);
IkReal x11868=((1.0)*cj2);
IkReal x11869=(cj5*r10);
IkReal x11870=(cj3*sj5);
IkReal x11871=(r21*sj5);
IkReal x11872=(r01*sj5);
IkReal x11873=((1.0)*sj3);
IkReal x11874=(cj5*r00);
IkReal x11875=(cj5*r20);
IkReal x11876=(cj0*sj2);
IkReal x11877=((1.0)*x11862);
IkReal x11878=(cj3*x11862);
IkReal x11879=(cj3*x11863);
IkReal x11880=(sj3*x11862);
IkReal x11881=(sj3*x11863);
evalcond[0]=((((-1.0)*x11871*x11877))+(((-1.0)*sj1*x11867))+((x11862*x11875))+((r22*x11863)));
evalcond[1]=(((r02*x11863))+(((-1.0)*x11872*x11877))+((cj2*sj0))+((cj1*x11876))+((x11862*x11874)));
evalcond[2]=(((cj1*sj0*sj2))+((r12*x11863))+((x11862*x11869))+(((-1.0)*cj0*x11868))+(((-1.0)*x11864*x11877)));
evalcond[3]=(cj1+(((-1.0)*x11863*x11873*x11875))+((r20*x11870))+((x11871*x11881))+((r22*x11880))+((r21*x11866)));
evalcond[4]=((((-1.0)*x11863*x11873*x11874))+((x11872*x11881))+((r00*x11870))+((r01*x11866))+((r02*x11880))+((cj0*sj1)));
evalcond[5]=((((-1.0)*x11863*x11869*x11873))+((x11864*x11881))+((sj0*sj1))+((r11*x11866))+((r10*x11870))+((r12*x11880)));
evalcond[6]=(((r21*x11863*x11870))+(((-1.0)*r20*x11863*x11866))+(((-1.0)*sj1*x11868))+(((-1.0)*cj5*r21*x11873))+((r22*x11878))+(((-1.0)*r20*sj5*x11873)));
evalcond[7]=(((x11864*x11879))+(((-1.0)*r10*sj5*x11873))+(((-1.0)*cj5*r11*x11873))+((r12*x11878))+(((-1.0)*r10*x11863*x11866))+((sj0*x11865))+x11876);
evalcond[8]=((((-1.0)*cj5*r01*x11873))+(((-1.0)*r00*x11863*x11866))+(((-1.0)*r00*sj5*x11873))+((r01*x11863*x11870))+(((-1.0)*sj0*x11867))+((cj0*x11865))+((r02*x11878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11882=((1.0)*cj5);
IkReal x11883=(r21*sj5);
IkReal x11884=(cj2*sj0);
IkReal x11885=(sj1*sj2);
IkReal x11886=(cj0*cj1*sj2);
CheckValue<IkReal> x11887 = IKatan2WithCheck(IkReal((((r22*x11884))+((r22*x11886))+((r02*x11885)))),IkReal((((r01*sj5*x11885))+((x11883*x11886))+((x11883*x11884))+(((-1.0)*r20*x11882*x11886))+(((-1.0)*r20*x11882*x11884))+(((-1.0)*r00*x11882*x11885)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11887.valid){
continue;
}
CheckValue<IkReal> x11888=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x11882)))),-1);
if(!x11888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11887.value)+(((1.5707963267949)*(x11888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11889=IKsin(j4);
IkReal x11890=IKcos(j4);
IkReal x11891=(r11*sj5);
IkReal x11892=(cj1*cj2);
IkReal x11893=(cj3*cj5);
IkReal x11894=((1.0)*sj2);
IkReal x11895=((1.0)*cj2);
IkReal x11896=(cj5*r10);
IkReal x11897=(cj3*sj5);
IkReal x11898=(r21*sj5);
IkReal x11899=(r01*sj5);
IkReal x11900=((1.0)*sj3);
IkReal x11901=(cj5*r00);
IkReal x11902=(cj5*r20);
IkReal x11903=(cj0*sj2);
IkReal x11904=((1.0)*x11889);
IkReal x11905=(cj3*x11889);
IkReal x11906=(cj3*x11890);
IkReal x11907=(sj3*x11889);
IkReal x11908=(sj3*x11890);
evalcond[0]=(((r22*x11890))+((x11889*x11902))+(((-1.0)*sj1*x11894))+(((-1.0)*x11898*x11904)));
evalcond[1]=((((-1.0)*x11899*x11904))+((cj2*sj0))+((r02*x11890))+((x11889*x11901))+((cj1*x11903)));
evalcond[2]=(((x11889*x11896))+(((-1.0)*x11891*x11904))+((cj1*sj0*sj2))+(((-1.0)*cj0*x11895))+((r12*x11890)));
evalcond[3]=(cj1+((r22*x11907))+(((-1.0)*x11890*x11900*x11902))+((r21*x11893))+((x11898*x11908))+((r20*x11897)));
evalcond[4]=((((-1.0)*x11890*x11900*x11901))+((r01*x11893))+((r00*x11897))+((r02*x11907))+((x11899*x11908))+((cj0*sj1)));
evalcond[5]=(((r12*x11907))+((x11891*x11908))+((sj0*sj1))+((r10*x11897))+(((-1.0)*x11890*x11896*x11900))+((r11*x11893)));
evalcond[6]=(((r22*x11905))+(((-1.0)*r20*x11890*x11893))+(((-1.0)*r20*sj5*x11900))+(((-1.0)*sj1*x11895))+(((-1.0)*cj5*r21*x11900))+((r21*x11890*x11897)));
evalcond[7]=(x11903+((sj0*x11892))+((r12*x11905))+(((-1.0)*r10*sj5*x11900))+(((-1.0)*r10*x11890*x11893))+(((-1.0)*cj5*r11*x11900))+((x11891*x11906)));
evalcond[8]=((((-1.0)*cj5*r01*x11900))+(((-1.0)*r00*sj5*x11900))+(((-1.0)*sj0*x11894))+(((-1.0)*r00*x11890*x11893))+((r02*x11905))+((r01*x11890*x11897))+((cj0*x11892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11909=(sj1*sj2);
IkReal x11910=((1.0)*cj5);
IkReal x11911=(cj0*cj2);
IkReal x11912=(r21*sj5);
IkReal x11913=(cj1*sj0*sj2);
CheckValue<IkReal> x11914 = IKatan2WithCheck(IkReal((((r12*x11909))+(((-1.0)*r22*x11911))+((r22*x11913)))),IkReal((((cj5*r20*x11911))+((x11912*x11913))+(((-1.0)*r20*x11910*x11913))+((r11*sj5*x11909))+(((-1.0)*r10*x11909*x11910))+(((-1.0)*x11911*x11912)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11914.valid){
continue;
}
CheckValue<IkReal> x11915=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x11915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11914.value)+(((1.5707963267949)*(x11915.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11916=IKsin(j4);
IkReal x11917=IKcos(j4);
IkReal x11918=(r11*sj5);
IkReal x11919=(cj1*cj2);
IkReal x11920=(cj3*cj5);
IkReal x11921=((1.0)*sj2);
IkReal x11922=((1.0)*cj2);
IkReal x11923=(cj5*r10);
IkReal x11924=(cj3*sj5);
IkReal x11925=(r21*sj5);
IkReal x11926=(r01*sj5);
IkReal x11927=((1.0)*sj3);
IkReal x11928=(cj5*r00);
IkReal x11929=(cj5*r20);
IkReal x11930=(cj0*sj2);
IkReal x11931=((1.0)*x11916);
IkReal x11932=(cj3*x11916);
IkReal x11933=(cj3*x11917);
IkReal x11934=(sj3*x11916);
IkReal x11935=(sj3*x11917);
evalcond[0]=(((x11916*x11929))+((r22*x11917))+(((-1.0)*x11925*x11931))+(((-1.0)*sj1*x11921)));
evalcond[1]=(((cj2*sj0))+((x11916*x11928))+((cj1*x11930))+(((-1.0)*x11926*x11931))+((r02*x11917)));
evalcond[2]=((((-1.0)*x11918*x11931))+((x11916*x11923))+(((-1.0)*cj0*x11922))+((cj1*sj0*sj2))+((r12*x11917)));
evalcond[3]=((((-1.0)*x11917*x11927*x11929))+((r21*x11920))+cj1+((r20*x11924))+((x11925*x11935))+((r22*x11934)));
evalcond[4]=((((-1.0)*x11917*x11927*x11928))+((r02*x11934))+((x11926*x11935))+((r01*x11920))+((r00*x11924))+((cj0*sj1)));
evalcond[5]=(((r10*x11924))+((x11918*x11935))+((sj0*sj1))+(((-1.0)*x11917*x11923*x11927))+((r11*x11920))+((r12*x11934)));
evalcond[6]=((((-1.0)*r20*x11917*x11920))+((r21*x11917*x11924))+(((-1.0)*cj5*r21*x11927))+((r22*x11932))+(((-1.0)*r20*sj5*x11927))+(((-1.0)*sj1*x11922)));
evalcond[7]=(x11930+((sj0*x11919))+((x11918*x11933))+(((-1.0)*r10*sj5*x11927))+(((-1.0)*r10*x11917*x11920))+((r12*x11932))+(((-1.0)*cj5*r11*x11927)));
evalcond[8]=((((-1.0)*r00*x11917*x11920))+((r01*x11917*x11924))+((r02*x11932))+((cj0*x11919))+(((-1.0)*r00*sj5*x11927))+(((-1.0)*cj5*r01*x11927))+(((-1.0)*sj0*x11921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11936=cj5*cj5;
IkReal x11937=r21*r21;
IkReal x11938=r20*r20;
IkReal x11939=(cj5*r21);
IkReal x11940=(r20*sj5);
IkReal x11941=((1.0)*sj5);
IkReal x11942=(cj3*cj5);
IkReal x11943=(cj5*r20);
IkReal x11944=((1.0)*cj3*r22);
IkReal x11945=(cj3*r20*r21);
IkReal x11946=(sj1*sj2*sj3);
IkReal x11947=(sj3*x11937);
CheckValue<IkReal> x11948=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+x11947+((sj3*x11936*x11938))+(((-2.0)*sj3*x11939*x11940))+(((-1.0)*x11936*x11947)))),-1);
if(!x11948.valid){
continue;
}
CheckValue<IkReal> x11949 = IKatan2WithCheck(IkReal(((((-1.0)*x11940*x11944))+((x11943*x11946))+(((-1.0)*cj1*r22))+(((-1.0)*r21*x11941*x11946))+(((-1.0)*x11939*x11944)))),IkReal((((cj1*x11943))+(((-1.0)*x11937*x11941*x11942))+(((-1.0)*x11945))+(((-1.0)*cj1*r21*x11941))+((sj5*x11938*x11942))+((r22*x11946))+(((2.0)*x11936*x11945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11948.value)))+(x11949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x11950=IKsin(j4);
IkReal x11951=IKcos(j4);
IkReal x11952=(cj3*r21);
IkReal x11953=(r20*sj5);
IkReal x11954=((1.0)*sj1);
IkReal x11955=(sj5*x11951);
IkReal x11956=(r22*x11950);
IkReal x11957=((1.0)*cj5*sj3);
IkReal x11958=(r20*x11951);
evalcond[0]=((((-1.0)*r21*sj5*x11950))+(((-1.0)*sj2*x11954))+((r22*x11951))+((cj5*r20*x11950)));
evalcond[1]=(cj1+((cj5*x11952))+((r21*sj3*x11955))+((cj3*x11953))+((sj3*x11956))+(((-1.0)*x11957*x11958)));
evalcond[2]=((((-1.0)*cj3*cj5*x11958))+((x11952*x11955))+(((-1.0)*sj3*x11953))+(((-1.0)*cj2*x11954))+((cj3*x11956))+(((-1.0)*r21*x11957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[2];
IkReal x11959=cj1*cj1;
IkReal x11960=cj2*cj2;
IkReal x11961=((((-1.0)*x11960))+((x11959*x11960))+(((-1.0)*x11959)));
j0eval[0]=x11961;
j0eval[1]=IKsign(x11961);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x11962=(cj2*sj1);
j0eval[0]=(cj1+(((962.772785622593)*x11962))+(((-1.0)*cj2)));
j0eval[1]=IKsign(((((5453.0)*cj1))+(((5250000.0)*x11962))+(((-5453.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
j0eval[0]=cj2;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x11963=(sj4*sj5);
IkReal x11964=((1.0)*cj4);
IkReal x11965=((1.0)*cj5*sj4);
j0eval[0]=cj1;
j0eval[1]=((IKabs(((((-1.0)*r10*x11965))+(((-1.0)*r12*x11964))+((r11*x11963)))))+(IKabs((((r01*x11963))+(((-1.0)*r00*x11965))+(((-1.0)*r02*x11964))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=((((962.772785622593)*cj1*sj1))+(((-1.0)*cj1)));
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11966=(r00*sj5);
IkReal x11967=(cj5*r11);
IkReal x11968=(r10*sj5);
IkReal x11969=(cj5*r01);
if( IKabs(((((-0.00099126339489238)*x11966))+(((-0.00099126339489238)*x11969))+(((-0.00247815848723095)*px))+(((0.953370156591352)*x11968))+(((0.953370156591352)*x11967))+(((2.38342539147838)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.00247815848723095)*py))+(((0.00099126339489238)*x11968))+(((0.00099126339489238)*x11967))+(((0.953370156591352)*x11969))+(((0.953370156591352)*x11966))+(((2.38342539147838)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.00099126339489238)*x11966))+(((-0.00099126339489238)*x11969))+(((-0.00247815848723095)*px))+(((0.953370156591352)*x11968))+(((0.953370156591352)*x11967))+(((2.38342539147838)*py))))+IKsqr(((((0.00247815848723095)*py))+(((0.00099126339489238)*x11968))+(((0.00099126339489238)*x11967))+(((0.953370156591352)*x11969))+(((0.953370156591352)*x11966))+(((2.38342539147838)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.00099126339489238)*x11966))+(((-0.00099126339489238)*x11969))+(((-0.00247815848723095)*px))+(((0.953370156591352)*x11968))+(((0.953370156591352)*x11967))+(((2.38342539147838)*py))), ((((0.00247815848723095)*py))+(((0.00099126339489238)*x11968))+(((0.00099126339489238)*x11967))+(((0.953370156591352)*x11969))+(((0.953370156591352)*x11966))+(((2.38342539147838)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11970=IKcos(j0);
IkReal x11971=IKsin(j0);
IkReal x11972=(cj3*sj4);
IkReal x11973=(r10*sj3);
IkReal x11974=(cj3*r00);
IkReal x11975=(cj3*r10);
IkReal x11976=(cj3*r01);
IkReal x11977=(cj4*sj5);
IkReal x11978=(r01*sj3);
IkReal x11979=(r00*sj3);
IkReal x11980=(cj5*r11);
IkReal x11981=(sj3*sj4);
IkReal x11982=((1.0)*sj5);
IkReal x11983=((0.4)*sj5);
IkReal x11984=((1.0)*cj4*cj5);
evalcond[0]=((((-1.0)*r00*x11983))+(((-1.0)*px))+(((-0.00043624)*x11971))+(((-0.4)*cj5*r01))+(((0.41956376)*x11970)));
evalcond[1]=((((-0.4)*x11980))+(((-1.0)*r10*x11983))+(((-1.0)*py))+(((0.41956376)*x11971))+(((0.00043624)*x11970)));
evalcond[2]=(x11970+(((-1.0)*x11979*x11984))+((x11977*x11978))+((r02*x11981))+((sj5*x11974))+((cj5*x11976)));
evalcond[3]=(x11971+((r11*sj3*x11977))+((sj5*x11975))+((r12*x11981))+(((-1.0)*x11973*x11984))+((cj3*x11980)));
evalcond[4]=(x11970+((r12*x11972))+(((-1.0)*x11973*x11982))+(((-1.0)*x11975*x11984))+((cj3*r11*x11977))+(((-1.0)*sj3*x11980)));
evalcond[5]=(((x11976*x11977))+(((-1.0)*x11971))+(((-1.0)*x11979*x11982))+(((-1.0)*x11974*x11984))+((r02*x11972))+(((-1.0)*cj5*x11978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11985=(cj5*r01);
IkReal x11986=((0.000987153572246896)*sj5);
IkReal x11987=((0.951391748161685)*sj5);
IkReal x11988=(cj5*r11);
if( IKabs(((((-2.37847937040421)*py))+(((-0.000987153572246896)*x11985))+(((-1.0)*r10*x11987))+(((-0.00246788393061724)*px))+(((-1.0)*r00*x11986))+(((-0.951391748161685)*x11988)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.37847937040421)*px))+((r10*x11986))+(((-1.0)*r00*x11987))+(((0.000987153572246896)*x11988))+(((-0.951391748161685)*x11985))+(((0.00246788393061724)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.37847937040421)*py))+(((-0.000987153572246896)*x11985))+(((-1.0)*r10*x11987))+(((-0.00246788393061724)*px))+(((-1.0)*r00*x11986))+(((-0.951391748161685)*x11988))))+IKsqr(((((-2.37847937040421)*px))+((r10*x11986))+(((-1.0)*r00*x11987))+(((0.000987153572246896)*x11988))+(((-0.951391748161685)*x11985))+(((0.00246788393061724)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.37847937040421)*py))+(((-0.000987153572246896)*x11985))+(((-1.0)*r10*x11987))+(((-0.00246788393061724)*px))+(((-1.0)*r00*x11986))+(((-0.951391748161685)*x11988))), ((((-2.37847937040421)*px))+((r10*x11986))+(((-1.0)*r00*x11987))+(((0.000987153572246896)*x11988))+(((-0.951391748161685)*x11985))+(((0.00246788393061724)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11989=IKcos(j0);
IkReal x11990=IKsin(j0);
IkReal x11991=(cj3*sj4);
IkReal x11992=(r10*sj3);
IkReal x11993=(cj3*r00);
IkReal x11994=(cj3*r10);
IkReal x11995=(cj3*r01);
IkReal x11996=(cj4*sj5);
IkReal x11997=(r01*sj3);
IkReal x11998=(r00*sj3);
IkReal x11999=(cj5*r11);
IkReal x12000=(sj3*sj4);
IkReal x12001=((1.0)*sj5);
IkReal x12002=((0.4)*sj5);
IkReal x12003=((1.0)*x11990);
IkReal x12004=((1.0)*cj4*cj5);
evalcond[0]=((((-0.42043624)*x11989))+(((-0.00043624)*x11990))+(((-1.0)*r00*x12002))+(((-1.0)*px))+(((-0.4)*cj5*r01)));
evalcond[1]=((((-1.0)*r10*x12002))+(((-0.42043624)*x11990))+(((0.00043624)*x11989))+(((-0.4)*x11999))+(((-1.0)*py)));
evalcond[2]=((((-1.0)*x11998*x12004))+((x11996*x11997))+((cj5*x11995))+(((-1.0)*x11989))+((sj5*x11993))+((r02*x12000)));
evalcond[3]=((((-1.0)*x12003))+((r11*sj3*x11996))+((sj5*x11994))+((r12*x12000))+(((-1.0)*x11992*x12004))+((cj3*x11999)));
evalcond[4]=((((-1.0)*x11994*x12004))+x11989+(((-1.0)*sj3*x11999))+((cj3*r11*x11996))+(((-1.0)*x11992*x12001))+((r12*x11991)));
evalcond[5]=((((-1.0)*x11998*x12001))+((x11995*x11996))+(((-1.0)*x12003))+(((-1.0)*cj5*x11997))+(((-1.0)*x11993*x12004))+((r02*x11991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x12011=IKPowWithIntegerCheck(cj1,-1);
if(!x12011.valid){
continue;
}
IkReal x12005=x12011.value;
IkReal x12006=(cj4*r02);
IkReal x12007=((5250000.0)*sj1);
IkReal x12008=((5000000.0)*cj1);
IkReal x12009=(cj5*r00*sj4);
IkReal x12010=(r01*sj4*sj5);
if( IKabs(((0.000183385292499542)*x12005*(((((-1.0)*x12006*x12007))+(((5453.0)*x12006))+(((5453.0)*x12009))+(((-5453.0)*x12010))+(((-1.0)*r00*sj5*x12008))+(((-1.0)*x12007*x12009))+((x12007*x12010))+(((-1.0)*cj5*r01*x12008))+(((-12500000.0)*cj1*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x12005*(((((-1.0)*x12009))+(((-1.0)*x12006))+x12010)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.000183385292499542)*x12005*(((((-1.0)*x12006*x12007))+(((5453.0)*x12006))+(((5453.0)*x12009))+(((-5453.0)*x12010))+(((-1.0)*r00*sj5*x12008))+(((-1.0)*x12007*x12009))+((x12007*x12010))+(((-1.0)*cj5*r01*x12008))+(((-12500000.0)*cj1*px))))))+IKsqr((x12005*(((((-1.0)*x12009))+(((-1.0)*x12006))+x12010))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.000183385292499542)*x12005*(((((-1.0)*x12006*x12007))+(((5453.0)*x12006))+(((5453.0)*x12009))+(((-5453.0)*x12010))+(((-1.0)*r00*sj5*x12008))+(((-1.0)*x12007*x12009))+((x12007*x12010))+(((-1.0)*cj5*r01*x12008))+(((-12500000.0)*cj1*px))))), (x12005*(((((-1.0)*x12009))+(((-1.0)*x12006))+x12010))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12012=IKcos(j0);
IkReal x12013=IKsin(j0);
IkReal x12014=(cj3*sj4);
IkReal x12015=(r10*sj3);
IkReal x12016=(cj3*r00);
IkReal x12017=(cj5*sj4);
IkReal x12018=(r01*sj5);
IkReal x12019=((1.0)*sj4);
IkReal x12020=(cj3*r10);
IkReal x12021=(cj3*cj5);
IkReal x12022=((1.0)*sj3);
IkReal x12023=(cj5*r11);
IkReal x12024=(cj4*sj3);
IkReal x12025=(cj3*cj4);
IkReal x12026=(sj3*sj4);
IkReal x12027=(r00*sj5);
IkReal x12028=(r11*sj5);
IkReal x12029=(cj5*r01);
IkReal x12030=((0.00043624)*x12012);
IkReal x12031=((0.00043624)*x12013);
IkReal x12032=((1.0)*cj4*cj5);
IkReal x12033=(sj1*x12013);
IkReal x12034=(sj1*x12012);
evalcond[0]=((((-1.0)*x12018*x12019))+((r00*x12017))+((cj1*x12012))+((cj4*r02)));
evalcond[1]=(((r10*x12017))+((cj1*x12013))+((cj4*r12))+(((-1.0)*x12019*x12028)));
evalcond[2]=((((-1.0)*x12030))+(((-1.0)*x12031))+(((0.42)*x12034))+(((-0.4)*x12029))+(((-0.4)*x12027))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*x12031))+(((-0.4)*r10*sj5))+(((0.42)*x12033))+(((-0.4)*x12023))+(((-1.0)*py))+x12030);
evalcond[4]=(((x12018*x12024))+((r01*x12021))+((sj5*x12016))+x12034+((r02*x12026))+(((-1.0)*cj4*cj5*r00*x12022)));
evalcond[5]=((((-1.0)*x12015*x12032))+x12033+((r12*x12026))+((sj5*x12020))+((x12024*x12028))+((r11*x12021)));
evalcond[6]=(((r12*x12014))+(((-1.0)*sj5*x12015))+(((-1.0)*x12020*x12032))+x12012+((x12025*x12028))+(((-1.0)*x12022*x12023)));
evalcond[7]=((((-1.0)*x12016*x12032))+((x12018*x12025))+((r02*x12014))+(((-1.0)*x12013))+(((-1.0)*x12022*x12029))+(((-1.0)*x12022*x12027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12035=((5000000.0)*cj1);
IkReal x12036=(cj4*r02);
IkReal x12037=(cj5*r00*sj4);
IkReal x12038=(r01*sj4*sj5);
CheckValue<IkReal> x12039=IKPowWithIntegerCheck(((((5250000.0)*cj1*sj1))+(((-5453.0)*cj1))),-1);
if(!x12039.valid){
continue;
}
CheckValue<IkReal> x12040=IKPowWithIntegerCheck(cj1,-1);
if(!x12040.valid){
continue;
}
if( IKabs(((x12039.value)*((((cj5*r11*x12035))+(((5453.0)*x12037))+(((5453.0)*x12036))+(((-5453.0)*x12038))+((r10*sj5*x12035))+(((12500000.0)*cj1*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12040.value)*(((((-1.0)*x12037))+(((-1.0)*x12036))+x12038)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12039.value)*((((cj5*r11*x12035))+(((5453.0)*x12037))+(((5453.0)*x12036))+(((-5453.0)*x12038))+((r10*sj5*x12035))+(((12500000.0)*cj1*py))))))+IKsqr(((x12040.value)*(((((-1.0)*x12037))+(((-1.0)*x12036))+x12038))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12039.value)*((((cj5*r11*x12035))+(((5453.0)*x12037))+(((5453.0)*x12036))+(((-5453.0)*x12038))+((r10*sj5*x12035))+(((12500000.0)*cj1*py))))), ((x12040.value)*(((((-1.0)*x12037))+(((-1.0)*x12036))+x12038))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12041=IKcos(j0);
IkReal x12042=IKsin(j0);
IkReal x12043=(cj3*sj4);
IkReal x12044=(r10*sj3);
IkReal x12045=(cj3*r00);
IkReal x12046=(cj5*sj4);
IkReal x12047=(r01*sj5);
IkReal x12048=((1.0)*sj4);
IkReal x12049=(cj3*r10);
IkReal x12050=(cj3*cj5);
IkReal x12051=((1.0)*sj3);
IkReal x12052=(cj5*r11);
IkReal x12053=(cj4*sj3);
IkReal x12054=(cj3*cj4);
IkReal x12055=(sj3*sj4);
IkReal x12056=(r00*sj5);
IkReal x12057=(r11*sj5);
IkReal x12058=(cj5*r01);
IkReal x12059=((0.00043624)*x12041);
IkReal x12060=((0.00043624)*x12042);
IkReal x12061=((1.0)*cj4*cj5);
IkReal x12062=(sj1*x12042);
IkReal x12063=(sj1*x12041);
evalcond[0]=((((-1.0)*x12047*x12048))+((r00*x12046))+((cj1*x12041))+((cj4*r02)));
evalcond[1]=(((r10*x12046))+(((-1.0)*x12048*x12057))+((cj1*x12042))+((cj4*r12)));
evalcond[2]=((((-1.0)*x12059))+(((-0.4)*x12058))+(((-0.4)*x12056))+(((-1.0)*px))+(((0.42)*x12063))+(((-1.0)*x12060)));
evalcond[3]=((((-0.4)*x12052))+(((-0.4)*r10*sj5))+(((-1.0)*py))+x12059+(((0.42)*x12062))+(((-1.0)*x12060)));
evalcond[4]=(((sj5*x12045))+(((-1.0)*cj4*cj5*r00*x12051))+((r01*x12050))+x12063+((x12047*x12053))+((r02*x12055)));
evalcond[5]=(((sj5*x12049))+((x12053*x12057))+(((-1.0)*x12044*x12061))+x12062+((r11*x12050))+((r12*x12055)));
evalcond[6]=((((-1.0)*sj5*x12044))+((r12*x12043))+x12041+(((-1.0)*x12049*x12061))+(((-1.0)*x12051*x12052))+((x12054*x12057)));
evalcond[7]=(((r02*x12043))+(((-1.0)*x12042))+((x12047*x12054))+(((-1.0)*x12045*x12061))+(((-1.0)*x12051*x12058))+(((-1.0)*x12051*x12056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12064=(sj4*sj5);
IkReal x12065=((1.0)*cj4);
IkReal x12066=((1.0)*cj5*sj4);
CheckValue<IkReal> x12067=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x12067.valid){
continue;
}
CheckValue<IkReal> x12068 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12066))+(((-1.0)*r12*x12065))+((r11*x12064)))),IkReal((((r01*x12064))+(((-1.0)*r02*x12065))+(((-1.0)*r00*x12066)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12068.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12067.value)))+(x12068.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12069=IKcos(j0);
IkReal x12070=IKsin(j0);
IkReal x12071=(cj3*sj4);
IkReal x12072=(r10*sj3);
IkReal x12073=(cj3*r00);
IkReal x12074=(cj5*sj4);
IkReal x12075=(r01*sj5);
IkReal x12076=((1.0)*sj4);
IkReal x12077=(cj3*r10);
IkReal x12078=(cj3*cj5);
IkReal x12079=((1.0)*sj3);
IkReal x12080=(cj5*r11);
IkReal x12081=(cj4*sj3);
IkReal x12082=(cj3*cj4);
IkReal x12083=(sj3*sj4);
IkReal x12084=(r00*sj5);
IkReal x12085=(r11*sj5);
IkReal x12086=(cj5*r01);
IkReal x12087=((0.00043624)*x12069);
IkReal x12088=((0.00043624)*x12070);
IkReal x12089=((1.0)*cj4*cj5);
IkReal x12090=(sj1*x12070);
IkReal x12091=(sj1*x12069);
evalcond[0]=(((cj1*x12069))+(((-1.0)*x12075*x12076))+((r00*x12074))+((cj4*r02)));
evalcond[1]=(((cj1*x12070))+(((-1.0)*x12076*x12085))+((r10*x12074))+((cj4*r12)));
evalcond[2]=((((-0.4)*x12086))+(((-0.4)*x12084))+(((-1.0)*x12087))+(((-1.0)*x12088))+(((-1.0)*px))+(((0.42)*x12091)));
evalcond[3]=((((-0.4)*x12080))+(((-1.0)*x12088))+(((-0.4)*r10*sj5))+(((-1.0)*py))+x12087+(((0.42)*x12090)));
evalcond[4]=((((-1.0)*cj4*cj5*r00*x12079))+((r02*x12083))+((x12075*x12081))+((sj5*x12073))+x12091+((r01*x12078)));
evalcond[5]=(((x12081*x12085))+((r11*x12078))+((sj5*x12077))+(((-1.0)*x12072*x12089))+x12090+((r12*x12083)));
evalcond[6]=(((x12082*x12085))+(((-1.0)*x12077*x12089))+x12069+(((-1.0)*x12079*x12080))+(((-1.0)*sj5*x12072))+((r12*x12071)));
evalcond[7]=((((-1.0)*x12070))+((x12075*x12082))+(((-1.0)*x12073*x12089))+((r02*x12071))+(((-1.0)*x12079*x12084))+(((-1.0)*x12079*x12086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x12092=(cj5*sj4);
IkReal x12093=((1.0)*sj4*sj5);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs(((((-1.0)*r11*x12093))+((r10*x12092))+((cj4*r12)))))+(IKabs((((r00*x12092))+(((-1.0)*r01*x12093))+((cj4*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=((((962.772785622593)*cj1*sj1))+(((-1.0)*cj1)));
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12094=(r00*sj5);
IkReal x12095=(cj5*r11);
IkReal x12096=(r10*sj5);
IkReal x12097=(cj5*r01);
if( IKabs(((((0.00247815848723095)*px))+(((0.953370156591352)*x12095))+(((0.953370156591352)*x12096))+(((0.00099126339489238)*x12097))+(((0.00099126339489238)*x12094))+(((2.38342539147838)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.953370156591352)*x12094))+(((0.953370156591352)*x12097))+(((-0.00247815848723095)*py))+(((2.38342539147838)*px))+(((-0.00099126339489238)*x12096))+(((-0.00099126339489238)*x12095)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.00247815848723095)*px))+(((0.953370156591352)*x12095))+(((0.953370156591352)*x12096))+(((0.00099126339489238)*x12097))+(((0.00099126339489238)*x12094))+(((2.38342539147838)*py))))+IKsqr(((((0.953370156591352)*x12094))+(((0.953370156591352)*x12097))+(((-0.00247815848723095)*py))+(((2.38342539147838)*px))+(((-0.00099126339489238)*x12096))+(((-0.00099126339489238)*x12095))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.00247815848723095)*px))+(((0.953370156591352)*x12095))+(((0.953370156591352)*x12096))+(((0.00099126339489238)*x12097))+(((0.00099126339489238)*x12094))+(((2.38342539147838)*py))), ((((0.953370156591352)*x12094))+(((0.953370156591352)*x12097))+(((-0.00247815848723095)*py))+(((2.38342539147838)*px))+(((-0.00099126339489238)*x12096))+(((-0.00099126339489238)*x12095))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12098=IKsin(j0);
IkReal x12099=IKcos(j0);
IkReal x12100=(cj3*sj4);
IkReal x12101=(r10*sj3);
IkReal x12102=(cj3*r00);
IkReal x12103=(cj3*r10);
IkReal x12104=(cj3*r01);
IkReal x12105=(cj4*sj5);
IkReal x12106=(r01*sj3);
IkReal x12107=(r00*sj3);
IkReal x12108=(cj5*r11);
IkReal x12109=(sj3*sj4);
IkReal x12110=((1.0)*sj5);
IkReal x12111=((0.4)*sj5);
IkReal x12112=((1.0)*cj4*cj5);
evalcond[0]=((((0.00043624)*x12098))+(((0.41956376)*x12099))+(((-1.0)*r00*x12111))+(((-1.0)*px))+(((-0.4)*cj5*r01)));
evalcond[1]=((((0.41956376)*x12098))+(((-1.0)*r10*x12111))+(((-0.4)*x12108))+(((-1.0)*py))+(((-0.00043624)*x12099)));
evalcond[2]=(((x12105*x12106))+((r02*x12109))+x12099+((sj5*x12102))+((cj5*x12104))+(((-1.0)*x12107*x12112)));
evalcond[3]=(((cj3*x12108))+(((-1.0)*x12101*x12112))+x12098+((sj5*x12103))+((r11*sj3*x12105))+((r12*x12109)));
evalcond[4]=(((r02*x12100))+(((-1.0)*x12102*x12112))+(((-1.0)*cj5*x12106))+x12098+((x12104*x12105))+(((-1.0)*x12107*x12110)));
evalcond[5]=((((-1.0)*x12101*x12110))+(((-1.0)*x12099))+(((-1.0)*x12103*x12112))+(((-1.0)*sj3*x12108))+((r12*x12100))+((cj3*r11*x12105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12113=(cj5*r01);
IkReal x12114=((0.000987153572246896)*sj5);
IkReal x12115=(cj5*r11);
IkReal x12116=((0.951391748161685)*sj5);
if( IKabs(((((-2.37847937040421)*py))+(((-0.951391748161685)*x12115))+(((-1.0)*r10*x12116))+((r00*x12114))+(((0.000987153572246896)*x12113))+(((0.00246788393061724)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.000987153572246896)*x12115))+(((-2.37847937040421)*px))+(((-0.951391748161685)*x12113))+(((-1.0)*r10*x12114))+(((-0.00246788393061724)*py))+(((-1.0)*r00*x12116)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.37847937040421)*py))+(((-0.951391748161685)*x12115))+(((-1.0)*r10*x12116))+((r00*x12114))+(((0.000987153572246896)*x12113))+(((0.00246788393061724)*px))))+IKsqr(((((-0.000987153572246896)*x12115))+(((-2.37847937040421)*px))+(((-0.951391748161685)*x12113))+(((-1.0)*r10*x12114))+(((-0.00246788393061724)*py))+(((-1.0)*r00*x12116))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.37847937040421)*py))+(((-0.951391748161685)*x12115))+(((-1.0)*r10*x12116))+((r00*x12114))+(((0.000987153572246896)*x12113))+(((0.00246788393061724)*px))), ((((-0.000987153572246896)*x12115))+(((-2.37847937040421)*px))+(((-0.951391748161685)*x12113))+(((-1.0)*r10*x12114))+(((-0.00246788393061724)*py))+(((-1.0)*r00*x12116))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12117=IKsin(j0);
IkReal x12118=IKcos(j0);
IkReal x12119=(cj3*sj4);
IkReal x12120=(r10*sj3);
IkReal x12121=(cj3*r00);
IkReal x12122=(cj3*r10);
IkReal x12123=(cj3*r01);
IkReal x12124=(cj4*sj5);
IkReal x12125=(r01*sj3);
IkReal x12126=(r00*sj3);
IkReal x12127=(cj5*r11);
IkReal x12128=(sj3*sj4);
IkReal x12129=((1.0)*sj5);
IkReal x12130=((0.4)*sj5);
IkReal x12131=((1.0)*x12118);
IkReal x12132=((1.0)*cj4*cj5);
evalcond[0]=((((0.00043624)*x12117))+(((-1.0)*px))+(((-0.4)*cj5*r01))+(((-1.0)*r00*x12130))+(((-0.42043624)*x12118)));
evalcond[1]=((((-0.00043624)*x12118))+(((-1.0)*py))+(((-0.4)*x12127))+(((-1.0)*r10*x12130))+(((-0.42043624)*x12117)));
evalcond[2]=((((-1.0)*x12126*x12132))+(((-1.0)*x12131))+((sj5*x12121))+((x12124*x12125))+((r02*x12128))+((cj5*x12123)));
evalcond[3]=((((-1.0)*x12117))+((r11*sj3*x12124))+((r12*x12128))+((cj3*x12127))+((sj5*x12122))+(((-1.0)*x12120*x12132)));
evalcond[4]=(((r02*x12119))+x12117+((x12123*x12124))+(((-1.0)*cj5*x12125))+(((-1.0)*x12121*x12132))+(((-1.0)*x12126*x12129)));
evalcond[5]=((((-1.0)*sj3*x12127))+(((-1.0)*x12131))+((r12*x12119))+((cj3*r11*x12124))+(((-1.0)*x12120*x12129))+(((-1.0)*x12122*x12132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x12139=IKPowWithIntegerCheck(cj1,-1);
if(!x12139.valid){
continue;
}
IkReal x12133=x12139.value;
IkReal x12134=(cj4*r02);
IkReal x12135=((5250000.0)*sj1);
IkReal x12136=((5000000.0)*cj1);
IkReal x12137=(cj5*r00*sj4);
IkReal x12138=(r01*sj4*sj5);
if( IKabs(((0.000183385292499542)*x12133*(((((5453.0)*x12137))+(((5453.0)*x12134))+((r00*sj5*x12136))+((cj5*r01*x12136))+(((-1.0)*x12135*x12137))+((x12135*x12138))+(((-1.0)*x12134*x12135))+(((12500000.0)*cj1*px))+(((-5453.0)*x12138)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x12133*((x12134+x12137+(((-1.0)*x12138)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.000183385292499542)*x12133*(((((5453.0)*x12137))+(((5453.0)*x12134))+((r00*sj5*x12136))+((cj5*r01*x12136))+(((-1.0)*x12135*x12137))+((x12135*x12138))+(((-1.0)*x12134*x12135))+(((12500000.0)*cj1*px))+(((-5453.0)*x12138))))))+IKsqr((x12133*((x12134+x12137+(((-1.0)*x12138))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.000183385292499542)*x12133*(((((5453.0)*x12137))+(((5453.0)*x12134))+((r00*sj5*x12136))+((cj5*r01*x12136))+(((-1.0)*x12135*x12137))+((x12135*x12138))+(((-1.0)*x12134*x12135))+(((12500000.0)*cj1*px))+(((-5453.0)*x12138))))), (x12133*((x12134+x12137+(((-1.0)*x12138))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12140=IKcos(j0);
IkReal x12141=IKsin(j0);
IkReal x12142=(cj3*sj4);
IkReal x12143=(r10*sj3);
IkReal x12144=(cj3*r00);
IkReal x12145=(cj5*sj4);
IkReal x12146=(r01*sj5);
IkReal x12147=((1.0)*sj4);
IkReal x12148=(cj3*r10);
IkReal x12149=(sj3*sj4);
IkReal x12150=(cj3*cj5);
IkReal x12151=((1.0)*sj3);
IkReal x12152=(cj5*r11);
IkReal x12153=(cj4*sj3);
IkReal x12154=(cj3*cj4);
IkReal x12155=(r00*sj5);
IkReal x12156=(r11*sj5);
IkReal x12157=(cj5*r01);
IkReal x12158=((0.00043624)*x12141);
IkReal x12159=((0.00043624)*x12140);
IkReal x12160=((1.0)*cj4*cj5);
IkReal x12161=(sj1*x12141);
IkReal x12162=((1.0)*x12140);
IkReal x12163=(sj1*x12140);
evalcond[0]=(((r00*x12145))+(((-1.0)*cj1*x12162))+(((-1.0)*x12146*x12147))+((cj4*r02)));
evalcond[1]=(((r10*x12145))+(((-1.0)*cj1*x12141))+(((-1.0)*x12147*x12156))+((cj4*r12)));
evalcond[2]=((((-0.4)*x12157))+(((-0.4)*x12155))+(((0.42)*x12163))+x12158+(((-1.0)*px))+(((-1.0)*x12159)));
evalcond[3]=((((-0.4)*x12152))+(((0.42)*x12161))+(((-0.4)*r10*sj5))+(((-1.0)*py))+(((-1.0)*x12159))+(((-1.0)*x12158)));
evalcond[4]=((((-1.0)*cj4*cj5*r00*x12151))+((r02*x12149))+((x12146*x12153))+x12163+((r01*x12150))+((sj5*x12144)));
evalcond[5]=((((-1.0)*x12143*x12160))+((r12*x12149))+x12161+((r11*x12150))+((x12153*x12156))+((sj5*x12148)));
evalcond[6]=((((-1.0)*x12144*x12160))+((r02*x12142))+((x12146*x12154))+x12141+(((-1.0)*x12151*x12155))+(((-1.0)*x12151*x12157)));
evalcond[7]=(((r12*x12142))+(((-1.0)*x12162))+(((-1.0)*sj5*x12143))+(((-1.0)*x12151*x12152))+((x12154*x12156))+(((-1.0)*x12148*x12160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12164=((5000000.0)*cj1);
IkReal x12165=(cj4*r02);
IkReal x12166=(cj5*r00*sj4);
IkReal x12167=(r01*sj4*sj5);
CheckValue<IkReal> x12168=IKPowWithIntegerCheck(((((5250000.0)*cj1*sj1))+(((-5453.0)*cj1))),-1);
if(!x12168.valid){
continue;
}
CheckValue<IkReal> x12169=IKPowWithIntegerCheck(cj1,-1);
if(!x12169.valid){
continue;
}
if( IKabs(((x12168.value)*((((cj5*r11*x12164))+((r10*sj5*x12164))+(((-5453.0)*x12167))+(((12500000.0)*cj1*py))+(((5453.0)*x12165))+(((5453.0)*x12166)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12169.value)*(((((-1.0)*x12167))+x12166+x12165)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12168.value)*((((cj5*r11*x12164))+((r10*sj5*x12164))+(((-5453.0)*x12167))+(((12500000.0)*cj1*py))+(((5453.0)*x12165))+(((5453.0)*x12166))))))+IKsqr(((x12169.value)*(((((-1.0)*x12167))+x12166+x12165))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12168.value)*((((cj5*r11*x12164))+((r10*sj5*x12164))+(((-5453.0)*x12167))+(((12500000.0)*cj1*py))+(((5453.0)*x12165))+(((5453.0)*x12166))))), ((x12169.value)*(((((-1.0)*x12167))+x12166+x12165))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12170=IKcos(j0);
IkReal x12171=IKsin(j0);
IkReal x12172=(cj3*sj4);
IkReal x12173=(r10*sj3);
IkReal x12174=(cj3*r00);
IkReal x12175=(cj5*sj4);
IkReal x12176=(r01*sj5);
IkReal x12177=((1.0)*sj4);
IkReal x12178=(cj3*r10);
IkReal x12179=(sj3*sj4);
IkReal x12180=(cj3*cj5);
IkReal x12181=((1.0)*sj3);
IkReal x12182=(cj5*r11);
IkReal x12183=(cj4*sj3);
IkReal x12184=(cj3*cj4);
IkReal x12185=(r00*sj5);
IkReal x12186=(r11*sj5);
IkReal x12187=(cj5*r01);
IkReal x12188=((0.00043624)*x12171);
IkReal x12189=((0.00043624)*x12170);
IkReal x12190=((1.0)*cj4*cj5);
IkReal x12191=(sj1*x12171);
IkReal x12192=((1.0)*x12170);
IkReal x12193=(sj1*x12170);
evalcond[0]=(((r00*x12175))+(((-1.0)*x12176*x12177))+(((-1.0)*cj1*x12192))+((cj4*r02)));
evalcond[1]=((((-1.0)*cj1*x12171))+((r10*x12175))+(((-1.0)*x12177*x12186))+((cj4*r12)));
evalcond[2]=((((-1.0)*x12189))+x12188+(((-1.0)*px))+(((0.42)*x12193))+(((-0.4)*x12187))+(((-0.4)*x12185)));
evalcond[3]=((((-1.0)*x12188))+(((-1.0)*x12189))+(((-0.4)*r10*sj5))+(((-1.0)*py))+(((0.42)*x12191))+(((-0.4)*x12182)));
evalcond[4]=(x12193+((sj5*x12174))+((x12176*x12183))+((r01*x12180))+((r02*x12179))+(((-1.0)*cj4*cj5*r00*x12181)));
evalcond[5]=(((r11*x12180))+x12191+((x12183*x12186))+(((-1.0)*x12173*x12190))+((sj5*x12178))+((r12*x12179)));
evalcond[6]=((((-1.0)*x12174*x12190))+x12171+(((-1.0)*x12181*x12187))+(((-1.0)*x12181*x12185))+((x12176*x12184))+((r02*x12172)));
evalcond[7]=((((-1.0)*x12192))+((x12184*x12186))+(((-1.0)*sj5*x12173))+(((-1.0)*x12181*x12182))+((r12*x12172))+(((-1.0)*x12178*x12190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12194=(cj5*sj4);
IkReal x12195=((1.0)*sj4*sj5);
CheckValue<IkReal> x12196=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x12196.valid){
continue;
}
CheckValue<IkReal> x12197 = IKatan2WithCheck(IkReal((((r10*x12194))+(((-1.0)*r11*x12195))+((cj4*r12)))),IkReal(((((-1.0)*r01*x12195))+((r00*x12194))+((cj4*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12197.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12196.value)))+(x12197.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12198=IKcos(j0);
IkReal x12199=IKsin(j0);
IkReal x12200=(cj3*sj4);
IkReal x12201=(r10*sj3);
IkReal x12202=(cj3*r00);
IkReal x12203=(cj5*sj4);
IkReal x12204=(r01*sj5);
IkReal x12205=((1.0)*sj4);
IkReal x12206=(cj3*r10);
IkReal x12207=(sj3*sj4);
IkReal x12208=(cj3*cj5);
IkReal x12209=((1.0)*sj3);
IkReal x12210=(cj5*r11);
IkReal x12211=(cj4*sj3);
IkReal x12212=(cj3*cj4);
IkReal x12213=(r00*sj5);
IkReal x12214=(r11*sj5);
IkReal x12215=(cj5*r01);
IkReal x12216=((0.00043624)*x12199);
IkReal x12217=((0.00043624)*x12198);
IkReal x12218=((1.0)*cj4*cj5);
IkReal x12219=(sj1*x12199);
IkReal x12220=((1.0)*x12198);
IkReal x12221=(sj1*x12198);
evalcond[0]=((((-1.0)*x12204*x12205))+(((-1.0)*cj1*x12220))+((r00*x12203))+((cj4*r02)));
evalcond[1]=((((-1.0)*x12205*x12214))+(((-1.0)*cj1*x12199))+((r10*x12203))+((cj4*r12)));
evalcond[2]=((((-1.0)*x12217))+x12216+(((-1.0)*px))+(((-0.4)*x12215))+(((-0.4)*x12213))+(((0.42)*x12221)));
evalcond[3]=((((-1.0)*x12216))+(((-1.0)*x12217))+(((-0.4)*r10*sj5))+(((-1.0)*py))+(((-0.4)*x12210))+(((0.42)*x12219)));
evalcond[4]=(((r02*x12207))+(((-1.0)*cj4*cj5*r00*x12209))+((sj5*x12202))+x12221+((x12204*x12211))+((r01*x12208)));
evalcond[5]=(((r12*x12207))+((sj5*x12206))+(((-1.0)*x12201*x12218))+((x12211*x12214))+x12219+((r11*x12208)));
evalcond[6]=(((r02*x12200))+(((-1.0)*x12202*x12218))+x12199+((x12204*x12212))+(((-1.0)*x12209*x12215))+(((-1.0)*x12209*x12213)));
evalcond[7]=(((r12*x12200))+((x12212*x12214))+(((-1.0)*x12220))+(((-1.0)*sj5*x12201))+(((-1.0)*x12206*x12218))+(((-1.0)*x12209*x12210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12222=((1.0)*sj2);
IkReal x12223=(sj4*sj5);
IkReal x12224=(cj4*r12);
IkReal x12225=(cj4*r02);
IkReal x12226=((1.0)*cj2);
IkReal x12227=(cj5*r10*sj4);
IkReal x12228=(cj5*r00*sj4);
if( IKabs(((((-1.0)*x12225*x12226))+((cj2*r01*x12223))+((r11*sj2*x12223))+(((-1.0)*x12226*x12228))+(((-1.0)*x12222*x12227))+(((-1.0)*x12222*x12224)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x12223*x12226))+((r01*sj2*x12223))+((cj2*x12227))+((cj2*x12224))+(((-1.0)*x12222*x12225))+(((-1.0)*x12222*x12228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x12225*x12226))+((cj2*r01*x12223))+((r11*sj2*x12223))+(((-1.0)*x12226*x12228))+(((-1.0)*x12222*x12227))+(((-1.0)*x12222*x12224))))+IKsqr(((((-1.0)*r11*x12223*x12226))+((r01*sj2*x12223))+((cj2*x12227))+((cj2*x12224))+(((-1.0)*x12222*x12225))+(((-1.0)*x12222*x12228))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x12225*x12226))+((cj2*r01*x12223))+((r11*sj2*x12223))+(((-1.0)*x12226*x12228))+(((-1.0)*x12222*x12227))+(((-1.0)*x12222*x12224))), ((((-1.0)*r11*x12223*x12226))+((r01*sj2*x12223))+((cj2*x12227))+((cj2*x12224))+(((-1.0)*x12222*x12225))+(((-1.0)*x12222*x12228))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12229=IKsin(j0);
IkReal x12230=IKcos(j0);
IkReal x12231=(cj3*sj4);
IkReal x12232=(cj5*r00);
IkReal x12233=(r01*sj5);
IkReal x12234=((1.0)*sj4);
IkReal x12235=(cj5*r10);
IkReal x12236=(r00*sj5);
IkReal x12237=((1.0)*sj3);
IkReal x12238=(cj5*r11);
IkReal x12239=(cj3*cj4);
IkReal x12240=(r10*sj5);
IkReal x12241=(r11*sj5);
IkReal x12242=(cj5*r01);
IkReal x12243=(sj2*x12230);
IkReal x12244=(cj2*x12229);
IkReal x12245=((0.00043624)*x12230);
IkReal x12246=((1.0)*x12239);
IkReal x12247=(cj2*x12230);
IkReal x12248=(sj2*x12229);
IkReal x12249=(x12243+x12244);
evalcond[0]=(((sj4*x12232))+x12249+(((-1.0)*x12233*x12234))+((cj4*r02)));
evalcond[1]=(((sj4*x12235))+(((-1.0)*x12234*x12241))+x12248+(((-1.0)*x12247))+((cj4*r12)));
evalcond[2]=((((-0.4)*x12236))+(((-1.0)*px))+(((-1.0)*x12245))+(((-0.00043624)*x12248))+((cj2*x12245))+(((-0.4)*x12242)));
evalcond[3]=((((0.00043624)*x12243))+(((0.00043624)*x12244))+(((-0.4)*x12238))+(((-1.0)*py))+(((-0.00043624)*x12229))+(((-0.4)*x12240)));
evalcond[4]=(((r12*x12231))+x12249+((x12239*x12241))+(((-1.0)*x12237*x12238))+(((-1.0)*x12237*x12240))+(((-1.0)*x12235*x12246)));
evalcond[5]=(x12247+((x12233*x12239))+(((-1.0)*x12248))+((r02*x12231))+(((-1.0)*x12236*x12237))+(((-1.0)*x12232*x12246))+(((-1.0)*x12237*x12242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12250=(cj4*r12);
IkReal x12251=((1.0)*sj2);
IkReal x12252=(cj4*r02);
IkReal x12253=((1.0)*cj2);
IkReal x12254=(cj5*r10*sj4);
IkReal x12255=(r01*sj4*sj5);
IkReal x12256=(cj5*r00*sj4);
IkReal x12257=(r11*sj4*sj5);
if( IKabs((((cj2*x12255))+(((-1.0)*x12251*x12257))+(((-1.0)*x12253*x12256))+(((-1.0)*x12252*x12253))+((sj2*x12250))+((sj2*x12254)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj2*x12250))+((cj2*x12254))+(((-1.0)*x12251*x12255))+(((-1.0)*x12253*x12257))+((sj2*x12256))+((sj2*x12252)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj2*x12255))+(((-1.0)*x12251*x12257))+(((-1.0)*x12253*x12256))+(((-1.0)*x12252*x12253))+((sj2*x12250))+((sj2*x12254))))+IKsqr((((cj2*x12250))+((cj2*x12254))+(((-1.0)*x12251*x12255))+(((-1.0)*x12253*x12257))+((sj2*x12256))+((sj2*x12252))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj2*x12255))+(((-1.0)*x12251*x12257))+(((-1.0)*x12253*x12256))+(((-1.0)*x12252*x12253))+((sj2*x12250))+((sj2*x12254))), (((cj2*x12250))+((cj2*x12254))+(((-1.0)*x12251*x12255))+(((-1.0)*x12253*x12257))+((sj2*x12256))+((sj2*x12252))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12258=IKcos(j0);
IkReal x12259=IKsin(j0);
IkReal x12260=(cj3*sj4);
IkReal x12261=(cj5*r00);
IkReal x12262=(r01*sj5);
IkReal x12263=((1.0)*sj4);
IkReal x12264=(cj5*r10);
IkReal x12265=(r00*sj5);
IkReal x12266=((1.0)*sj3);
IkReal x12267=(cj5*r11);
IkReal x12268=(cj3*cj4);
IkReal x12269=(r10*sj5);
IkReal x12270=(r11*sj5);
IkReal x12271=(cj5*r01);
IkReal x12272=((0.00043624)*x12258);
IkReal x12273=((1.0)*x12268);
IkReal x12274=((1.0)*x12258);
IkReal x12275=(cj2*x12259);
IkReal x12276=(sj2*x12259);
IkReal x12277=(cj2*x12274);
IkReal x12278=((1.0)*x12276);
IkReal x12279=(x12278+x12277);
evalcond[0]=((((-1.0)*sj2*x12274))+x12275+((sj4*x12261))+(((-1.0)*x12262*x12263))+((cj4*r02)));
evalcond[1]=((((-1.0)*x12279))+((sj4*x12264))+(((-1.0)*x12263*x12270))+((cj4*r12)));
evalcond[2]=((((-0.4)*x12265))+(((-1.0)*x12272))+(((-1.0)*cj2*x12272))+(((-1.0)*px))+(((-0.00043624)*x12276))+(((-0.4)*x12271)));
evalcond[3]=((((-0.00043624)*x12259))+(((-0.4)*x12267))+(((-0.4)*x12269))+(((-1.0)*py))+((sj2*x12272))+(((-0.00043624)*x12275)));
evalcond[4]=((((-1.0)*x12264*x12273))+(((-1.0)*x12275))+((x12268*x12270))+((r12*x12260))+(((-1.0)*x12266*x12269))+(((-1.0)*x12266*x12267))+((sj2*x12258)));
evalcond[5]=((((-1.0)*x12266*x12271))+(((-1.0)*x12279))+(((-1.0)*x12261*x12273))+(((-1.0)*x12265*x12266))+((x12262*x12268))+((r02*x12260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x12291=IKPowWithIntegerCheck(sj1,-1);
if(!x12291.valid){
continue;
}
IkReal x12280=x12291.value;
IkReal x12281=(r01*sj5);
IkReal x12282=(sj1*sj4);
IkReal x12283=((1.0)*cj3);
IkReal x12284=(cj5*r01);
IkReal x12285=(cj4*sj3);
IkReal x12286=(cj1*sj2);
IkReal x12287=((1.0)*r02);
IkReal x12288=(cj5*r00);
IkReal x12289=(r00*sj5);
IkReal x12290=(sj3*sj4);
CheckValue<IkReal> x12292=IKPowWithIntegerCheck(cj2,-1);
if(!x12292.valid){
continue;
}
if( IKabs((x12280*(x12292.value)*((((x12281*x12282))+((cj3*x12286*x12289))+(((-1.0)*x12285*x12286*x12288))+(((-1.0)*x12282*x12288))+(((-1.0)*cj4*sj1*x12287))+((cj3*x12284*x12286))+((x12281*x12285*x12286))+((r02*x12286*x12290)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x12280*(((((-1.0)*x12281*x12285))+(((-1.0)*x12287*x12290))+((x12285*x12288))+(((-1.0)*x12283*x12289))+(((-1.0)*x12283*x12284)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12280*(x12292.value)*((((x12281*x12282))+((cj3*x12286*x12289))+(((-1.0)*x12285*x12286*x12288))+(((-1.0)*x12282*x12288))+(((-1.0)*cj4*sj1*x12287))+((cj3*x12284*x12286))+((x12281*x12285*x12286))+((r02*x12286*x12290))))))+IKsqr((x12280*(((((-1.0)*x12281*x12285))+(((-1.0)*x12287*x12290))+((x12285*x12288))+(((-1.0)*x12283*x12289))+(((-1.0)*x12283*x12284))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x12280*(x12292.value)*((((x12281*x12282))+((cj3*x12286*x12289))+(((-1.0)*x12285*x12286*x12288))+(((-1.0)*x12282*x12288))+(((-1.0)*cj4*sj1*x12287))+((cj3*x12284*x12286))+((x12281*x12285*x12286))+((r02*x12286*x12290))))), (x12280*(((((-1.0)*x12281*x12285))+(((-1.0)*x12287*x12290))+((x12285*x12288))+(((-1.0)*x12283*x12289))+(((-1.0)*x12283*x12284))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12293=IKsin(j0);
IkReal x12294=IKcos(j0);
IkReal x12295=(cj3*sj4);
IkReal x12296=(r10*sj3);
IkReal x12297=(cj3*r00);
IkReal x12298=(cj5*sj4);
IkReal x12299=(r01*sj5);
IkReal x12300=((1.0)*sj4);
IkReal x12301=(cj3*r10);
IkReal x12302=(cj1*cj2);
IkReal x12303=(cj5*r01);
IkReal x12304=(cj5*r11);
IkReal x12305=((1.0)*sj3);
IkReal x12306=(cj4*sj3);
IkReal x12307=(cj3*cj4);
IkReal x12308=(sj3*sj4);
IkReal x12309=(r00*sj5);
IkReal x12310=(r11*sj5);
IkReal x12311=((0.00043624)*x12294);
IkReal x12312=((1.0)*cj4*cj5);
IkReal x12313=((0.00043624)*x12293);
IkReal x12314=(sj1*x12293);
IkReal x12315=(sj2*x12294);
IkReal x12316=(sj1*x12294);
IkReal x12317=(sj2*x12293);
evalcond[0]=(((cj1*x12315))+((cj2*x12293))+((r00*x12298))+(((-1.0)*x12299*x12300))+((cj4*r02)));
evalcond[1]=(((cj1*x12317))+(((-1.0)*cj2*x12294))+((r10*x12298))+(((-1.0)*x12300*x12310))+((cj4*r12)));
evalcond[2]=(((cj3*x12303))+x12316+((x12299*x12306))+((sj5*x12297))+(((-1.0)*cj4*cj5*r00*x12305))+((r02*x12308)));
evalcond[3]=(((cj3*x12304))+(((-1.0)*x12296*x12312))+x12314+((r12*x12308))+((x12306*x12310))+((sj5*x12301)));
evalcond[4]=(((x12302*x12311))+(((-1.0)*sj2*x12313))+(((-0.4)*x12309))+(((-0.4)*x12303))+(((-1.0)*px))+(((-1.0)*x12311))+(((0.42)*x12316)));
evalcond[5]=(((x12302*x12313))+(((-0.4)*x12304))+((sj2*x12311))+(((-0.4)*r10*sj5))+(((-1.0)*py))+(((-1.0)*x12313))+(((0.42)*x12314)));
evalcond[6]=(((x12293*x12302))+x12315+((r12*x12295))+(((-1.0)*sj5*x12296))+((x12307*x12310))+(((-1.0)*x12301*x12312))+(((-1.0)*x12304*x12305)));
evalcond[7]=((((-1.0)*x12297*x12312))+(((-1.0)*x12305*x12309))+(((-1.0)*x12317))+((x12294*x12302))+((x12299*x12307))+((r02*x12295))+(((-1.0)*x12303*x12305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12318=((5250000.0)*sj1);
IkReal x12319=(cj1*cj2);
IkReal x12320=(cj1*sj2);
IkReal x12321=((12500000.0)*px);
IkReal x12322=((5453.0)*cj4*r02);
IkReal x12323=((5000000.0)*r00*sj5);
IkReal x12324=(r01*sj4*sj5);
IkReal x12325=((5000000.0)*cj5*r01);
IkReal x12326=((5453.0)*cj5*r00*sj4);
CheckValue<IkReal> x12327=IKPowWithIntegerCheck(IKsign((((cj2*x12318))+(((5453.0)*cj1))+(((-5453.0)*cj2)))),-1);
if(!x12327.valid){
continue;
}
CheckValue<IkReal> x12328 = IKatan2WithCheck(IkReal(((((-1.0)*x12319*x12322))+(((-1.0)*x12319*x12326))+(((-1.0)*cj5*r00*sj4*x12318))+(((5453.0)*x12319*x12324))+(((-1.0)*x12320*x12323))+(((-1.0)*x12320*x12325))+(((-1.0)*x12320*x12321))+x12322+x12326+(((-5453.0)*x12324))+((x12318*x12324))+(((-1.0)*cj4*r02*x12318)))),IkReal(((((5453.0)*sj2*x12324))+((cj2*x12323))+((cj2*x12325))+((cj2*x12321))+(((-1.0)*sj2*x12326))+(((-1.0)*sj2*x12322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12328.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12327.value)))+(x12328.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12329=IKsin(j0);
IkReal x12330=IKcos(j0);
IkReal x12331=(cj3*sj4);
IkReal x12332=(r10*sj3);
IkReal x12333=(cj3*r00);
IkReal x12334=(cj5*sj4);
IkReal x12335=(r01*sj5);
IkReal x12336=((1.0)*sj4);
IkReal x12337=(cj3*r10);
IkReal x12338=(cj1*cj2);
IkReal x12339=(cj5*r01);
IkReal x12340=(cj5*r11);
IkReal x12341=((1.0)*sj3);
IkReal x12342=(cj4*sj3);
IkReal x12343=(cj3*cj4);
IkReal x12344=(sj3*sj4);
IkReal x12345=(r00*sj5);
IkReal x12346=(r11*sj5);
IkReal x12347=((0.00043624)*x12330);
IkReal x12348=((1.0)*cj4*cj5);
IkReal x12349=((0.00043624)*x12329);
IkReal x12350=(sj1*x12329);
IkReal x12351=(sj2*x12330);
IkReal x12352=(sj1*x12330);
IkReal x12353=(sj2*x12329);
evalcond[0]=(((r00*x12334))+(((-1.0)*x12335*x12336))+((cj2*x12329))+((cj1*x12351))+((cj4*r02)));
evalcond[1]=((((-1.0)*cj2*x12330))+((cj1*x12353))+((r10*x12334))+((cj4*r12))+(((-1.0)*x12336*x12346)));
evalcond[2]=((((-1.0)*cj4*cj5*r00*x12341))+((x12335*x12342))+x12352+((sj5*x12333))+((cj3*x12339))+((r02*x12344)));
evalcond[3]=((((-1.0)*x12332*x12348))+x12350+((cj3*x12340))+((sj5*x12337))+((r12*x12344))+((x12342*x12346)));
evalcond[4]=((((-1.0)*x12347))+(((-0.4)*x12345))+(((-1.0)*sj2*x12349))+(((-1.0)*px))+(((-0.4)*x12339))+(((0.42)*x12352))+((x12338*x12347)));
evalcond[5]=((((-0.4)*r10*sj5))+(((-1.0)*x12349))+(((-0.4)*x12340))+(((-1.0)*py))+((sj2*x12347))+(((0.42)*x12350))+((x12338*x12349)));
evalcond[6]=((((-1.0)*x12337*x12348))+(((-1.0)*x12340*x12341))+x12351+((x12343*x12346))+(((-1.0)*sj5*x12332))+((x12329*x12338))+((r12*x12331)));
evalcond[7]=((((-1.0)*x12353))+((x12330*x12338))+((x12335*x12343))+(((-1.0)*x12341*x12345))+(((-1.0)*x12339*x12341))+(((-1.0)*x12333*x12348))+((r02*x12331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12354=cj1*cj1;
IkReal x12355=cj2*cj2;
IkReal x12356=(cj2*sj4);
IkReal x12357=((1.0)*sj5);
IkReal x12358=(cj5*r00);
IkReal x12359=(cj5*r10);
IkReal x12360=(cj4*r12);
IkReal x12361=(cj1*sj2);
IkReal x12362=(cj4*r02);
IkReal x12363=(sj4*x12361);
CheckValue<IkReal> x12364 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x12356*x12357))+(((-1.0)*r11*x12357*x12363))+((cj2*x12362))+((x12356*x12358))+((x12360*x12361))+((x12359*x12363)))),IkReal(((((-1.0)*x12356*x12359))+((x12361*x12362))+(((-1.0)*r01*x12357*x12363))+(((-1.0)*cj2*x12360))+((x12358*x12363))+((r11*sj5*x12356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12364.valid){
continue;
}
CheckValue<IkReal> x12365=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12354))+(((-1.0)*x12355))+((x12354*x12355)))),-1);
if(!x12365.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x12364.value)+(((1.5707963267949)*(x12365.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12366=IKsin(j0);
IkReal x12367=IKcos(j0);
IkReal x12368=(cj3*sj4);
IkReal x12369=(r10*sj3);
IkReal x12370=(cj3*r00);
IkReal x12371=(cj5*sj4);
IkReal x12372=(r01*sj5);
IkReal x12373=((1.0)*sj4);
IkReal x12374=(cj3*r10);
IkReal x12375=(cj1*cj2);
IkReal x12376=(cj5*r01);
IkReal x12377=(cj5*r11);
IkReal x12378=((1.0)*sj3);
IkReal x12379=(cj4*sj3);
IkReal x12380=(cj3*cj4);
IkReal x12381=(sj3*sj4);
IkReal x12382=(r00*sj5);
IkReal x12383=(r11*sj5);
IkReal x12384=((0.00043624)*x12367);
IkReal x12385=((1.0)*cj4*cj5);
IkReal x12386=((0.00043624)*x12366);
IkReal x12387=(sj1*x12366);
IkReal x12388=(sj2*x12367);
IkReal x12389=(sj1*x12367);
IkReal x12390=(sj2*x12366);
evalcond[0]=(((cj1*x12388))+((cj2*x12366))+(((-1.0)*x12372*x12373))+((r00*x12371))+((cj4*r02)));
evalcond[1]=(((r10*x12371))+(((-1.0)*x12373*x12383))+((cj1*x12390))+(((-1.0)*cj2*x12367))+((cj4*r12)));
evalcond[2]=(((r02*x12381))+((sj5*x12370))+x12389+((cj3*x12376))+(((-1.0)*cj4*cj5*r00*x12378))+((x12372*x12379)));
evalcond[3]=(((r12*x12381))+((sj5*x12374))+x12387+((cj3*x12377))+(((-1.0)*x12369*x12385))+((x12379*x12383)));
evalcond[4]=((((-1.0)*sj2*x12386))+(((-0.4)*x12382))+(((-1.0)*px))+(((0.42)*x12389))+(((-1.0)*x12384))+(((-0.4)*x12376))+((x12375*x12384)));
evalcond[5]=((((-0.4)*r10*sj5))+(((-1.0)*py))+(((0.42)*x12387))+(((-1.0)*x12386))+(((-0.4)*x12377))+((sj2*x12384))+((x12375*x12386)));
evalcond[6]=((((-1.0)*x12377*x12378))+((x12380*x12383))+((x12366*x12375))+x12388+(((-1.0)*sj5*x12369))+(((-1.0)*x12374*x12385))+((r12*x12368)));
evalcond[7]=((((-1.0)*x12370*x12385))+((x12372*x12380))+((x12367*x12375))+(((-1.0)*x12376*x12378))+(((-1.0)*x12390))+((r02*x12368))+(((-1.0)*x12378*x12382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12391=cj5*cj5;
IkReal x12392=r21*r21;
IkReal x12393=r20*r20;
IkReal x12394=(r20*r21);
IkReal x12395=(cj5*sj5);
IkReal x12396=(cj5*r20);
IkReal x12397=(cj2*sj1);
IkReal x12398=(r22*sj3);
IkReal x12399=(r21*sj5);
IkReal x12400=(cj3*x12392);
IkReal x12401=(cj3*sj1*sj2);
CheckValue<IkReal> x12402=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj3*x12394*x12395))+((cj3*x12391*x12393))+((cj3*(r22*r22)))+(((-1.0)*x12391*x12400))+x12400)),-1);
if(!x12402.valid){
continue;
}
CheckValue<IkReal> x12403 = IKatan2WithCheck(IkReal((((r22*x12397))+(((-1.0)*x12399*x12401))+((x12396*x12401))+((cj5*r21*x12398))+((r20*sj5*x12398)))),IkReal(((((-2.0)*sj3*x12391*x12394))+((r22*x12401))+((x12397*x12399))+((sj3*x12392*x12395))+(((-1.0)*x12396*x12397))+((sj3*x12394))+(((-1.0)*sj3*x12393*x12395)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12402.value)))+(x12403.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x12404=IKsin(j4);
IkReal x12405=IKcos(j4);
IkReal x12406=(cj3*r21);
IkReal x12407=(r20*sj5);
IkReal x12408=((1.0)*sj1);
IkReal x12409=(sj5*x12405);
IkReal x12410=(r22*x12404);
IkReal x12411=((1.0)*cj5*sj3);
IkReal x12412=(r20*x12405);
evalcond[0]=(((r22*x12405))+(((-1.0)*sj2*x12408))+((cj5*r20*x12404))+(((-1.0)*r21*sj5*x12404)));
evalcond[1]=(((sj3*x12410))+cj1+(((-1.0)*x12411*x12412))+((r21*sj3*x12409))+((cj3*x12407))+((cj5*x12406)));
evalcond[2]=(((cj3*x12410))+(((-1.0)*r21*x12411))+(((-1.0)*cj2*x12408))+(((-1.0)*cj3*cj5*x12412))+((x12406*x12409))+(((-1.0)*sj3*x12407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[2];
IkReal x12413=cj1*cj1;
IkReal x12414=cj2*cj2;
IkReal x12415=((((-1.0)*x12414))+(((-1.0)*x12413))+((x12413*x12414)));
j0eval[0]=x12415;
j0eval[1]=IKsign(x12415);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x12416=(cj2*sj1);
j0eval[0]=(cj1+(((-1.0)*cj2))+(((962.772785622593)*x12416)));
j0eval[1]=IKsign(((((5453.0)*cj1))+(((5250000.0)*x12416))+(((-5453.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
j0eval[0]=cj2;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x12417=(sj4*sj5);
IkReal x12418=((1.0)*cj4);
IkReal x12419=((1.0)*cj5*sj4);
j0eval[0]=cj1;
j0eval[1]=((IKabs((((r01*x12417))+(((-1.0)*r02*x12418))+(((-1.0)*r00*x12419)))))+(IKabs(((((-1.0)*r10*x12419))+((r11*x12417))+(((-1.0)*r12*x12418))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=((((962.772785622593)*cj1*sj1))+(((-1.0)*cj1)));
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12420=(r00*sj5);
IkReal x12421=(cj5*r11);
IkReal x12422=(r10*sj5);
IkReal x12423=(cj5*r01);
if( IKabs(((((-0.00099126339489238)*x12420))+(((-0.00099126339489238)*x12423))+(((0.953370156591352)*x12421))+(((0.953370156591352)*x12422))+(((-0.00247815848723095)*px))+(((2.38342539147838)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.00247815848723095)*py))+(((0.00099126339489238)*x12421))+(((0.00099126339489238)*x12422))+(((0.953370156591352)*x12423))+(((0.953370156591352)*x12420))+(((2.38342539147838)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.00099126339489238)*x12420))+(((-0.00099126339489238)*x12423))+(((0.953370156591352)*x12421))+(((0.953370156591352)*x12422))+(((-0.00247815848723095)*px))+(((2.38342539147838)*py))))+IKsqr(((((0.00247815848723095)*py))+(((0.00099126339489238)*x12421))+(((0.00099126339489238)*x12422))+(((0.953370156591352)*x12423))+(((0.953370156591352)*x12420))+(((2.38342539147838)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.00099126339489238)*x12420))+(((-0.00099126339489238)*x12423))+(((0.953370156591352)*x12421))+(((0.953370156591352)*x12422))+(((-0.00247815848723095)*px))+(((2.38342539147838)*py))), ((((0.00247815848723095)*py))+(((0.00099126339489238)*x12421))+(((0.00099126339489238)*x12422))+(((0.953370156591352)*x12423))+(((0.953370156591352)*x12420))+(((2.38342539147838)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12424=IKcos(j0);
IkReal x12425=IKsin(j0);
IkReal x12426=(cj3*sj4);
IkReal x12427=(r10*sj3);
IkReal x12428=(cj3*r00);
IkReal x12429=(cj3*r10);
IkReal x12430=(cj3*r01);
IkReal x12431=(cj4*sj5);
IkReal x12432=(r01*sj3);
IkReal x12433=(r00*sj3);
IkReal x12434=(cj5*r11);
IkReal x12435=(sj3*sj4);
IkReal x12436=((1.0)*sj5);
IkReal x12437=((0.4)*sj5);
IkReal x12438=((1.0)*cj4*cj5);
evalcond[0]=((((-1.0)*r00*x12437))+(((-0.00043624)*x12425))+(((-1.0)*px))+(((-0.4)*cj5*r01))+(((0.41956376)*x12424)));
evalcond[1]=((((0.00043624)*x12424))+(((-1.0)*r10*x12437))+(((-0.4)*x12434))+(((-1.0)*py))+(((0.41956376)*x12425)));
evalcond[2]=((((-1.0)*x12433*x12438))+((r02*x12435))+((x12431*x12432))+((sj5*x12428))+x12424+((cj5*x12430)));
evalcond[3]=((((-1.0)*x12427*x12438))+((r11*sj3*x12431))+((cj3*x12434))+((r12*x12435))+((sj5*x12429))+x12425);
evalcond[4]=((((-1.0)*x12427*x12436))+((cj3*r11*x12431))+(((-1.0)*x12429*x12438))+(((-1.0)*sj3*x12434))+((r12*x12426))+x12424);
evalcond[5]=((((-1.0)*x12425))+(((-1.0)*x12428*x12438))+(((-1.0)*x12433*x12436))+((r02*x12426))+(((-1.0)*cj5*x12432))+((x12430*x12431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12439=(cj5*r01);
IkReal x12440=((0.000987153572246896)*sj5);
IkReal x12441=((0.951391748161685)*sj5);
IkReal x12442=(cj5*r11);
if( IKabs(((((-2.37847937040421)*py))+(((-0.00246788393061724)*px))+(((-1.0)*r10*x12441))+(((-1.0)*r00*x12440))+(((-0.951391748161685)*x12442))+(((-0.000987153572246896)*x12439)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.37847937040421)*px))+(((-1.0)*r00*x12441))+(((-0.951391748161685)*x12439))+(((0.000987153572246896)*x12442))+((r10*x12440))+(((0.00246788393061724)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.37847937040421)*py))+(((-0.00246788393061724)*px))+(((-1.0)*r10*x12441))+(((-1.0)*r00*x12440))+(((-0.951391748161685)*x12442))+(((-0.000987153572246896)*x12439))))+IKsqr(((((-2.37847937040421)*px))+(((-1.0)*r00*x12441))+(((-0.951391748161685)*x12439))+(((0.000987153572246896)*x12442))+((r10*x12440))+(((0.00246788393061724)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.37847937040421)*py))+(((-0.00246788393061724)*px))+(((-1.0)*r10*x12441))+(((-1.0)*r00*x12440))+(((-0.951391748161685)*x12442))+(((-0.000987153572246896)*x12439))), ((((-2.37847937040421)*px))+(((-1.0)*r00*x12441))+(((-0.951391748161685)*x12439))+(((0.000987153572246896)*x12442))+((r10*x12440))+(((0.00246788393061724)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12443=IKcos(j0);
IkReal x12444=IKsin(j0);
IkReal x12445=(cj3*sj4);
IkReal x12446=(r10*sj3);
IkReal x12447=(cj3*r00);
IkReal x12448=(cj3*r10);
IkReal x12449=(cj3*r01);
IkReal x12450=(cj4*sj5);
IkReal x12451=(r01*sj3);
IkReal x12452=(r00*sj3);
IkReal x12453=(cj5*r11);
IkReal x12454=(sj3*sj4);
IkReal x12455=((1.0)*sj5);
IkReal x12456=((0.4)*sj5);
IkReal x12457=((1.0)*x12444);
IkReal x12458=((1.0)*cj4*cj5);
evalcond[0]=((((-0.00043624)*x12444))+(((-0.42043624)*x12443))+(((-1.0)*px))+(((-1.0)*r00*x12456))+(((-0.4)*cj5*r01)));
evalcond[1]=((((-1.0)*r10*x12456))+(((-0.42043624)*x12444))+(((0.00043624)*x12443))+(((-0.4)*x12453))+(((-1.0)*py)));
evalcond[2]=(((r02*x12454))+(((-1.0)*x12443))+((x12450*x12451))+(((-1.0)*x12452*x12458))+((cj5*x12449))+((sj5*x12447)));
evalcond[3]=((((-1.0)*x12446*x12458))+((r11*sj3*x12450))+((r12*x12454))+((cj3*x12453))+(((-1.0)*x12457))+((sj5*x12448)));
evalcond[4]=(((cj3*r11*x12450))+(((-1.0)*x12446*x12455))+(((-1.0)*sj3*x12453))+((r12*x12445))+(((-1.0)*x12448*x12458))+x12443);
evalcond[5]=((((-1.0)*cj5*x12451))+((r02*x12445))+(((-1.0)*x12452*x12455))+(((-1.0)*x12457))+(((-1.0)*x12447*x12458))+((x12449*x12450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x12465=IKPowWithIntegerCheck(cj1,-1);
if(!x12465.valid){
continue;
}
IkReal x12459=x12465.value;
IkReal x12460=(cj4*r02);
IkReal x12461=((5250000.0)*sj1);
IkReal x12462=((5000000.0)*cj1);
IkReal x12463=(cj5*r00*sj4);
IkReal x12464=(r01*sj4*sj5);
if( IKabs(((0.000183385292499542)*x12459*(((((-1.0)*cj5*r01*x12462))+((x12461*x12464))+(((-1.0)*x12460*x12461))+(((-1.0)*r00*sj5*x12462))+(((5453.0)*x12463))+(((5453.0)*x12460))+(((-5453.0)*x12464))+(((-12500000.0)*cj1*px))+(((-1.0)*x12461*x12463)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x12459*(((((-1.0)*x12463))+(((-1.0)*x12460))+x12464)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.000183385292499542)*x12459*(((((-1.0)*cj5*r01*x12462))+((x12461*x12464))+(((-1.0)*x12460*x12461))+(((-1.0)*r00*sj5*x12462))+(((5453.0)*x12463))+(((5453.0)*x12460))+(((-5453.0)*x12464))+(((-12500000.0)*cj1*px))+(((-1.0)*x12461*x12463))))))+IKsqr((x12459*(((((-1.0)*x12463))+(((-1.0)*x12460))+x12464))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.000183385292499542)*x12459*(((((-1.0)*cj5*r01*x12462))+((x12461*x12464))+(((-1.0)*x12460*x12461))+(((-1.0)*r00*sj5*x12462))+(((5453.0)*x12463))+(((5453.0)*x12460))+(((-5453.0)*x12464))+(((-12500000.0)*cj1*px))+(((-1.0)*x12461*x12463))))), (x12459*(((((-1.0)*x12463))+(((-1.0)*x12460))+x12464))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12466=IKcos(j0);
IkReal x12467=IKsin(j0);
IkReal x12468=(cj3*sj4);
IkReal x12469=(r10*sj3);
IkReal x12470=(cj3*r00);
IkReal x12471=(cj5*sj4);
IkReal x12472=(r01*sj5);
IkReal x12473=((1.0)*sj4);
IkReal x12474=(cj3*r10);
IkReal x12475=(cj3*cj5);
IkReal x12476=((1.0)*sj3);
IkReal x12477=(cj5*r11);
IkReal x12478=(cj4*sj3);
IkReal x12479=(cj3*cj4);
IkReal x12480=(sj3*sj4);
IkReal x12481=(r00*sj5);
IkReal x12482=(r11*sj5);
IkReal x12483=(cj5*r01);
IkReal x12484=((0.00043624)*x12466);
IkReal x12485=((0.00043624)*x12467);
IkReal x12486=((1.0)*cj4*cj5);
IkReal x12487=(sj1*x12467);
IkReal x12488=(sj1*x12466);
evalcond[0]=(((r00*x12471))+(((-1.0)*x12472*x12473))+((cj1*x12466))+((cj4*r02)));
evalcond[1]=((((-1.0)*x12473*x12482))+((cj1*x12467))+((r10*x12471))+((cj4*r12)));
evalcond[2]=((((-1.0)*x12485))+(((-1.0)*x12484))+(((-0.4)*x12483))+(((-0.4)*x12481))+(((-1.0)*px))+(((0.42)*x12488)));
evalcond[3]=((((-0.4)*x12477))+(((-1.0)*x12485))+(((-0.4)*r10*sj5))+(((-1.0)*py))+(((0.42)*x12487))+x12484);
evalcond[4]=(((sj5*x12470))+((r01*x12475))+((r02*x12480))+(((-1.0)*cj4*cj5*r00*x12476))+x12488+((x12472*x12478)));
evalcond[5]=(((sj5*x12474))+((x12478*x12482))+((r11*x12475))+((r12*x12480))+(((-1.0)*x12469*x12486))+x12487);
evalcond[6]=((((-1.0)*x12476*x12477))+(((-1.0)*x12474*x12486))+((r12*x12468))+((x12479*x12482))+(((-1.0)*sj5*x12469))+x12466);
evalcond[7]=((((-1.0)*x12467))+(((-1.0)*x12470*x12486))+((r02*x12468))+((x12472*x12479))+(((-1.0)*x12476*x12483))+(((-1.0)*x12476*x12481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12489=((5000000.0)*cj1);
IkReal x12490=(cj4*r02);
IkReal x12491=(cj5*r00*sj4);
IkReal x12492=(r01*sj4*sj5);
CheckValue<IkReal> x12493=IKPowWithIntegerCheck(((((5250000.0)*cj1*sj1))+(((-5453.0)*cj1))),-1);
if(!x12493.valid){
continue;
}
CheckValue<IkReal> x12494=IKPowWithIntegerCheck(cj1,-1);
if(!x12494.valid){
continue;
}
if( IKabs(((x12493.value)*((((r10*sj5*x12489))+(((12500000.0)*cj1*py))+(((5453.0)*x12491))+(((5453.0)*x12490))+(((-5453.0)*x12492))+((cj5*r11*x12489)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12494.value)*((x12492+(((-1.0)*x12491))+(((-1.0)*x12490)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12493.value)*((((r10*sj5*x12489))+(((12500000.0)*cj1*py))+(((5453.0)*x12491))+(((5453.0)*x12490))+(((-5453.0)*x12492))+((cj5*r11*x12489))))))+IKsqr(((x12494.value)*((x12492+(((-1.0)*x12491))+(((-1.0)*x12490))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12493.value)*((((r10*sj5*x12489))+(((12500000.0)*cj1*py))+(((5453.0)*x12491))+(((5453.0)*x12490))+(((-5453.0)*x12492))+((cj5*r11*x12489))))), ((x12494.value)*((x12492+(((-1.0)*x12491))+(((-1.0)*x12490))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12495=IKcos(j0);
IkReal x12496=IKsin(j0);
IkReal x12497=(cj3*sj4);
IkReal x12498=(r10*sj3);
IkReal x12499=(cj3*r00);
IkReal x12500=(cj5*sj4);
IkReal x12501=(r01*sj5);
IkReal x12502=((1.0)*sj4);
IkReal x12503=(cj3*r10);
IkReal x12504=(cj3*cj5);
IkReal x12505=((1.0)*sj3);
IkReal x12506=(cj5*r11);
IkReal x12507=(cj4*sj3);
IkReal x12508=(cj3*cj4);
IkReal x12509=(sj3*sj4);
IkReal x12510=(r00*sj5);
IkReal x12511=(r11*sj5);
IkReal x12512=(cj5*r01);
IkReal x12513=((0.00043624)*x12495);
IkReal x12514=((0.00043624)*x12496);
IkReal x12515=((1.0)*cj4*cj5);
IkReal x12516=(sj1*x12496);
IkReal x12517=(sj1*x12495);
evalcond[0]=(((cj1*x12495))+((r00*x12500))+(((-1.0)*x12501*x12502))+((cj4*r02)));
evalcond[1]=((((-1.0)*x12502*x12511))+((cj1*x12496))+((r10*x12500))+((cj4*r12)));
evalcond[2]=((((-1.0)*x12514))+(((-1.0)*x12513))+(((-0.4)*x12512))+(((-0.4)*x12510))+(((-1.0)*px))+(((0.42)*x12517)));
evalcond[3]=((((-1.0)*x12514))+(((-0.4)*r10*sj5))+(((-0.4)*x12506))+(((-1.0)*py))+(((0.42)*x12516))+x12513);
evalcond[4]=((((-1.0)*cj4*cj5*r00*x12505))+((r01*x12504))+((x12501*x12507))+x12517+((r02*x12509))+((sj5*x12499)));
evalcond[5]=((((-1.0)*x12498*x12515))+((r11*x12504))+((x12507*x12511))+x12516+((sj5*x12503))+((r12*x12509)));
evalcond[6]=((((-1.0)*sj5*x12498))+(((-1.0)*x12505*x12506))+((x12508*x12511))+x12495+((r12*x12497))+(((-1.0)*x12503*x12515)));
evalcond[7]=((((-1.0)*x12505*x12512))+(((-1.0)*x12505*x12510))+((x12501*x12508))+((r02*x12497))+(((-1.0)*x12499*x12515))+(((-1.0)*x12496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12518=(sj4*sj5);
IkReal x12519=((1.0)*cj4);
IkReal x12520=((1.0)*cj5*sj4);
CheckValue<IkReal> x12521=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x12521.valid){
continue;
}
CheckValue<IkReal> x12522 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12519))+(((-1.0)*r10*x12520))+((r11*x12518)))),IkReal(((((-1.0)*r00*x12520))+(((-1.0)*r02*x12519))+((r01*x12518)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12522.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12521.value)))+(x12522.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12523=IKcos(j0);
IkReal x12524=IKsin(j0);
IkReal x12525=(cj3*sj4);
IkReal x12526=(r10*sj3);
IkReal x12527=(cj3*r00);
IkReal x12528=(cj5*sj4);
IkReal x12529=(r01*sj5);
IkReal x12530=((1.0)*sj4);
IkReal x12531=(cj3*r10);
IkReal x12532=(cj3*cj5);
IkReal x12533=((1.0)*sj3);
IkReal x12534=(cj5*r11);
IkReal x12535=(cj4*sj3);
IkReal x12536=(cj3*cj4);
IkReal x12537=(sj3*sj4);
IkReal x12538=(r00*sj5);
IkReal x12539=(r11*sj5);
IkReal x12540=(cj5*r01);
IkReal x12541=((0.00043624)*x12523);
IkReal x12542=((0.00043624)*x12524);
IkReal x12543=((1.0)*cj4*cj5);
IkReal x12544=(sj1*x12524);
IkReal x12545=(sj1*x12523);
evalcond[0]=(((cj1*x12523))+((r00*x12528))+(((-1.0)*x12529*x12530))+((cj4*r02)));
evalcond[1]=(((r10*x12528))+(((-1.0)*x12530*x12539))+((cj1*x12524))+((cj4*r12)));
evalcond[2]=((((-1.0)*px))+(((-0.4)*x12540))+(((-0.4)*x12538))+(((0.42)*x12545))+(((-1.0)*x12542))+(((-1.0)*x12541)));
evalcond[3]=((((-0.4)*r10*sj5))+(((-1.0)*py))+(((-0.4)*x12534))+x12541+(((0.42)*x12544))+(((-1.0)*x12542)));
evalcond[4]=(((sj5*x12527))+(((-1.0)*cj4*cj5*r00*x12533))+((r02*x12537))+x12545+((x12529*x12535))+((r01*x12532)));
evalcond[5]=(((r11*x12532))+(((-1.0)*x12526*x12543))+((x12535*x12539))+((sj5*x12531))+x12544+((r12*x12537)));
evalcond[6]=((((-1.0)*x12533*x12534))+((x12536*x12539))+((r12*x12525))+x12523+(((-1.0)*sj5*x12526))+(((-1.0)*x12531*x12543)));
evalcond[7]=((((-1.0)*x12533*x12538))+(((-1.0)*x12527*x12543))+(((-1.0)*x12533*x12540))+(((-1.0)*x12524))+((x12529*x12536))+((r02*x12525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x12546=(cj5*sj4);
IkReal x12547=((1.0)*sj4*sj5);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs(((((-1.0)*r11*x12547))+((r10*x12546))+((cj4*r12)))))+(IKabs((((r00*x12546))+(((-1.0)*r01*x12547))+((cj4*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=((((962.772785622593)*cj1*sj1))+(((-1.0)*cj1)));
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12548=(r00*sj5);
IkReal x12549=(cj5*r11);
IkReal x12550=(r10*sj5);
IkReal x12551=(cj5*r01);
if( IKabs(((((0.00099126339489238)*x12551))+(((0.00247815848723095)*px))+(((0.00099126339489238)*x12548))+(((0.953370156591352)*x12550))+(((0.953370156591352)*x12549))+(((2.38342539147838)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.00247815848723095)*py))+(((0.953370156591352)*x12551))+(((0.953370156591352)*x12548))+(((2.38342539147838)*px))+(((-0.00099126339489238)*x12549))+(((-0.00099126339489238)*x12550)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.00099126339489238)*x12551))+(((0.00247815848723095)*px))+(((0.00099126339489238)*x12548))+(((0.953370156591352)*x12550))+(((0.953370156591352)*x12549))+(((2.38342539147838)*py))))+IKsqr(((((-0.00247815848723095)*py))+(((0.953370156591352)*x12551))+(((0.953370156591352)*x12548))+(((2.38342539147838)*px))+(((-0.00099126339489238)*x12549))+(((-0.00099126339489238)*x12550))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.00099126339489238)*x12551))+(((0.00247815848723095)*px))+(((0.00099126339489238)*x12548))+(((0.953370156591352)*x12550))+(((0.953370156591352)*x12549))+(((2.38342539147838)*py))), ((((-0.00247815848723095)*py))+(((0.953370156591352)*x12551))+(((0.953370156591352)*x12548))+(((2.38342539147838)*px))+(((-0.00099126339489238)*x12549))+(((-0.00099126339489238)*x12550))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12552=IKsin(j0);
IkReal x12553=IKcos(j0);
IkReal x12554=(cj3*sj4);
IkReal x12555=(r10*sj3);
IkReal x12556=(cj3*r00);
IkReal x12557=(cj3*r10);
IkReal x12558=(cj3*r01);
IkReal x12559=(cj4*sj5);
IkReal x12560=(r01*sj3);
IkReal x12561=(r00*sj3);
IkReal x12562=(cj5*r11);
IkReal x12563=(sj3*sj4);
IkReal x12564=((1.0)*sj5);
IkReal x12565=((0.4)*sj5);
IkReal x12566=((1.0)*cj4*cj5);
evalcond[0]=((((0.00043624)*x12552))+(((-1.0)*r00*x12565))+(((0.41956376)*x12553))+(((-1.0)*px))+(((-0.4)*cj5*r01)));
evalcond[1]=((((-0.4)*x12562))+(((0.41956376)*x12552))+(((-1.0)*py))+(((-0.00043624)*x12553))+(((-1.0)*r10*x12565)));
evalcond[2]=((((-1.0)*x12561*x12566))+((sj5*x12556))+((r02*x12563))+((x12559*x12560))+x12553+((cj5*x12558)));
evalcond[3]=(((r11*sj3*x12559))+((cj3*x12562))+((r12*x12563))+((sj5*x12557))+x12552+(((-1.0)*x12555*x12566)));
evalcond[4]=((((-1.0)*x12561*x12564))+(((-1.0)*x12556*x12566))+((r02*x12554))+(((-1.0)*cj5*x12560))+x12552+((x12558*x12559)));
evalcond[5]=((((-1.0)*x12553))+((r12*x12554))+((cj3*r11*x12559))+(((-1.0)*x12557*x12566))+(((-1.0)*sj3*x12562))+(((-1.0)*x12555*x12564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12567=(cj5*r01);
IkReal x12568=((0.000987153572246896)*sj5);
IkReal x12569=(cj5*r11);
IkReal x12570=((0.951391748161685)*sj5);
if( IKabs(((((-2.37847937040421)*py))+(((0.000987153572246896)*x12567))+(((-0.951391748161685)*x12569))+((r00*x12568))+(((-1.0)*r10*x12570))+(((0.00246788393061724)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.37847937040421)*px))+(((-0.00246788393061724)*py))+(((-0.951391748161685)*x12567))+(((-0.000987153572246896)*x12569))+(((-1.0)*r00*x12570))+(((-1.0)*r10*x12568)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.37847937040421)*py))+(((0.000987153572246896)*x12567))+(((-0.951391748161685)*x12569))+((r00*x12568))+(((-1.0)*r10*x12570))+(((0.00246788393061724)*px))))+IKsqr(((((-2.37847937040421)*px))+(((-0.00246788393061724)*py))+(((-0.951391748161685)*x12567))+(((-0.000987153572246896)*x12569))+(((-1.0)*r00*x12570))+(((-1.0)*r10*x12568))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.37847937040421)*py))+(((0.000987153572246896)*x12567))+(((-0.951391748161685)*x12569))+((r00*x12568))+(((-1.0)*r10*x12570))+(((0.00246788393061724)*px))), ((((-2.37847937040421)*px))+(((-0.00246788393061724)*py))+(((-0.951391748161685)*x12567))+(((-0.000987153572246896)*x12569))+(((-1.0)*r00*x12570))+(((-1.0)*r10*x12568))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12571=IKsin(j0);
IkReal x12572=IKcos(j0);
IkReal x12573=(cj3*sj4);
IkReal x12574=(r10*sj3);
IkReal x12575=(cj3*r00);
IkReal x12576=(cj3*r10);
IkReal x12577=(cj3*r01);
IkReal x12578=(cj4*sj5);
IkReal x12579=(r01*sj3);
IkReal x12580=(r00*sj3);
IkReal x12581=(cj5*r11);
IkReal x12582=(sj3*sj4);
IkReal x12583=((1.0)*sj5);
IkReal x12584=((0.4)*sj5);
IkReal x12585=((1.0)*x12572);
IkReal x12586=((1.0)*cj4*cj5);
evalcond[0]=((((-0.42043624)*x12572))+(((-1.0)*px))+(((0.00043624)*x12571))+(((-0.4)*cj5*r01))+(((-1.0)*r00*x12584)));
evalcond[1]=((((-0.00043624)*x12572))+(((-1.0)*r10*x12584))+(((-0.42043624)*x12571))+(((-0.4)*x12581))+(((-1.0)*py)));
evalcond[2]=((((-1.0)*x12580*x12586))+((sj5*x12575))+((cj5*x12577))+((r02*x12582))+(((-1.0)*x12585))+((x12578*x12579)));
evalcond[3]=(((r12*x12582))+(((-1.0)*x12574*x12586))+((sj5*x12576))+((cj3*x12581))+((r11*sj3*x12578))+(((-1.0)*x12571)));
evalcond[4]=((((-1.0)*x12580*x12583))+(((-1.0)*x12575*x12586))+((r02*x12573))+(((-1.0)*cj5*x12579))+x12571+((x12577*x12578)));
evalcond[5]=((((-1.0)*sj3*x12581))+(((-1.0)*x12574*x12583))+((r12*x12573))+(((-1.0)*x12585))+((cj3*r11*x12578))+(((-1.0)*x12576*x12586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x12593=IKPowWithIntegerCheck(cj1,-1);
if(!x12593.valid){
continue;
}
IkReal x12587=x12593.value;
IkReal x12588=(cj4*r02);
IkReal x12589=((5250000.0)*sj1);
IkReal x12590=((5000000.0)*cj1);
IkReal x12591=(cj5*r00*sj4);
IkReal x12592=(r01*sj4*sj5);
if( IKabs(((0.000183385292499542)*x12587*(((((-1.0)*x12588*x12589))+((x12589*x12592))+((r00*sj5*x12590))+(((5453.0)*x12588))+(((5453.0)*x12591))+(((-1.0)*x12589*x12591))+(((12500000.0)*cj1*px))+((cj5*r01*x12590))+(((-5453.0)*x12592)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x12587*((x12588+x12591+(((-1.0)*x12592)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.000183385292499542)*x12587*(((((-1.0)*x12588*x12589))+((x12589*x12592))+((r00*sj5*x12590))+(((5453.0)*x12588))+(((5453.0)*x12591))+(((-1.0)*x12589*x12591))+(((12500000.0)*cj1*px))+((cj5*r01*x12590))+(((-5453.0)*x12592))))))+IKsqr((x12587*((x12588+x12591+(((-1.0)*x12592))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((0.000183385292499542)*x12587*(((((-1.0)*x12588*x12589))+((x12589*x12592))+((r00*sj5*x12590))+(((5453.0)*x12588))+(((5453.0)*x12591))+(((-1.0)*x12589*x12591))+(((12500000.0)*cj1*px))+((cj5*r01*x12590))+(((-5453.0)*x12592))))), (x12587*((x12588+x12591+(((-1.0)*x12592))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12594=IKcos(j0);
IkReal x12595=IKsin(j0);
IkReal x12596=(cj3*sj4);
IkReal x12597=(r10*sj3);
IkReal x12598=(cj3*r00);
IkReal x12599=(cj5*sj4);
IkReal x12600=(r01*sj5);
IkReal x12601=((1.0)*sj4);
IkReal x12602=(cj3*r10);
IkReal x12603=(sj3*sj4);
IkReal x12604=(cj3*cj5);
IkReal x12605=((1.0)*sj3);
IkReal x12606=(cj5*r11);
IkReal x12607=(cj4*sj3);
IkReal x12608=(cj3*cj4);
IkReal x12609=(r00*sj5);
IkReal x12610=(r11*sj5);
IkReal x12611=(cj5*r01);
IkReal x12612=((0.00043624)*x12595);
IkReal x12613=((0.00043624)*x12594);
IkReal x12614=((1.0)*cj4*cj5);
IkReal x12615=(sj1*x12595);
IkReal x12616=((1.0)*x12594);
IkReal x12617=(sj1*x12594);
evalcond[0]=((((-1.0)*cj1*x12616))+((r00*x12599))+(((-1.0)*x12600*x12601))+((cj4*r02)));
evalcond[1]=((((-1.0)*cj1*x12595))+(((-1.0)*x12601*x12610))+((cj4*r12))+((r10*x12599)));
evalcond[2]=((((-0.4)*x12611))+(((-0.4)*x12609))+(((0.42)*x12617))+(((-1.0)*px))+x12612+(((-1.0)*x12613)));
evalcond[3]=((((-0.4)*r10*sj5))+(((-0.4)*x12606))+(((0.42)*x12615))+(((-1.0)*py))+(((-1.0)*x12612))+(((-1.0)*x12613)));
evalcond[4]=(((x12600*x12607))+((r01*x12604))+((r02*x12603))+((sj5*x12598))+x12617+(((-1.0)*cj4*cj5*r00*x12605)));
evalcond[5]=(((sj5*x12602))+((r11*x12604))+((r12*x12603))+x12615+(((-1.0)*x12597*x12614))+((x12607*x12610)));
evalcond[6]=(((x12600*x12608))+(((-1.0)*x12598*x12614))+(((-1.0)*x12605*x12611))+((r02*x12596))+x12595+(((-1.0)*x12605*x12609)));
evalcond[7]=(((r12*x12596))+(((-1.0)*sj5*x12597))+((x12608*x12610))+(((-1.0)*x12602*x12614))+(((-1.0)*x12605*x12606))+(((-1.0)*x12616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12618=((5000000.0)*cj1);
IkReal x12619=(cj4*r02);
IkReal x12620=(cj5*r00*sj4);
IkReal x12621=(r01*sj4*sj5);
CheckValue<IkReal> x12622=IKPowWithIntegerCheck(((((5250000.0)*cj1*sj1))+(((-5453.0)*cj1))),-1);
if(!x12622.valid){
continue;
}
CheckValue<IkReal> x12623=IKPowWithIntegerCheck(cj1,-1);
if(!x12623.valid){
continue;
}
if( IKabs(((x12622.value)*(((((5453.0)*x12620))+(((5453.0)*x12619))+(((-5453.0)*x12621))+((r10*sj5*x12618))+(((12500000.0)*cj1*py))+((cj5*r11*x12618)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12623.value)*(((((-1.0)*x12621))+x12620+x12619)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12622.value)*(((((5453.0)*x12620))+(((5453.0)*x12619))+(((-5453.0)*x12621))+((r10*sj5*x12618))+(((12500000.0)*cj1*py))+((cj5*r11*x12618))))))+IKsqr(((x12623.value)*(((((-1.0)*x12621))+x12620+x12619))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12622.value)*(((((5453.0)*x12620))+(((5453.0)*x12619))+(((-5453.0)*x12621))+((r10*sj5*x12618))+(((12500000.0)*cj1*py))+((cj5*r11*x12618))))), ((x12623.value)*(((((-1.0)*x12621))+x12620+x12619))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12624=IKcos(j0);
IkReal x12625=IKsin(j0);
IkReal x12626=(cj3*sj4);
IkReal x12627=(r10*sj3);
IkReal x12628=(cj3*r00);
IkReal x12629=(cj5*sj4);
IkReal x12630=(r01*sj5);
IkReal x12631=((1.0)*sj4);
IkReal x12632=(cj3*r10);
IkReal x12633=(sj3*sj4);
IkReal x12634=(cj3*cj5);
IkReal x12635=((1.0)*sj3);
IkReal x12636=(cj5*r11);
IkReal x12637=(cj4*sj3);
IkReal x12638=(cj3*cj4);
IkReal x12639=(r00*sj5);
IkReal x12640=(r11*sj5);
IkReal x12641=(cj5*r01);
IkReal x12642=((0.00043624)*x12625);
IkReal x12643=((0.00043624)*x12624);
IkReal x12644=((1.0)*cj4*cj5);
IkReal x12645=(sj1*x12625);
IkReal x12646=((1.0)*x12624);
IkReal x12647=(sj1*x12624);
evalcond[0]=(((r00*x12629))+(((-1.0)*cj1*x12646))+(((-1.0)*x12630*x12631))+((cj4*r02)));
evalcond[1]=((((-1.0)*cj1*x12625))+(((-1.0)*x12631*x12640))+((r10*x12629))+((cj4*r12)));
evalcond[2]=((((-0.4)*x12641))+(((-0.4)*x12639))+(((-1.0)*px))+x12642+(((-1.0)*x12643))+(((0.42)*x12647)));
evalcond[3]=((((-0.4)*r10*sj5))+(((-0.4)*x12636))+(((-1.0)*py))+(((-1.0)*x12643))+(((-1.0)*x12642))+(((0.42)*x12645)));
evalcond[4]=((((-1.0)*cj4*cj5*r00*x12635))+((x12630*x12637))+((r01*x12634))+((sj5*x12628))+((r02*x12633))+x12647);
evalcond[5]=(((r11*x12634))+((r12*x12633))+(((-1.0)*x12627*x12644))+((sj5*x12632))+((x12637*x12640))+x12645);
evalcond[6]=(((r02*x12626))+((x12630*x12638))+(((-1.0)*x12628*x12644))+x12625+(((-1.0)*x12635*x12641))+(((-1.0)*x12635*x12639)));
evalcond[7]=(((x12638*x12640))+(((-1.0)*x12632*x12644))+(((-1.0)*x12646))+((r12*x12626))+(((-1.0)*sj5*x12627))+(((-1.0)*x12635*x12636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12648=(cj5*sj4);
IkReal x12649=((1.0)*sj4*sj5);
CheckValue<IkReal> x12650 = IKatan2WithCheck(IkReal((((r10*x12648))+(((-1.0)*r11*x12649))+((cj4*r12)))),IkReal((((r00*x12648))+(((-1.0)*r01*x12649))+((cj4*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12650.valid){
continue;
}
CheckValue<IkReal> x12651=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x12651.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x12650.value)+(((1.5707963267949)*(x12651.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12652=IKcos(j0);
IkReal x12653=IKsin(j0);
IkReal x12654=(cj3*sj4);
IkReal x12655=(r10*sj3);
IkReal x12656=(cj3*r00);
IkReal x12657=(cj5*sj4);
IkReal x12658=(r01*sj5);
IkReal x12659=((1.0)*sj4);
IkReal x12660=(cj3*r10);
IkReal x12661=(sj3*sj4);
IkReal x12662=(cj3*cj5);
IkReal x12663=((1.0)*sj3);
IkReal x12664=(cj5*r11);
IkReal x12665=(cj4*sj3);
IkReal x12666=(cj3*cj4);
IkReal x12667=(r00*sj5);
IkReal x12668=(r11*sj5);
IkReal x12669=(cj5*r01);
IkReal x12670=((0.00043624)*x12653);
IkReal x12671=((0.00043624)*x12652);
IkReal x12672=((1.0)*cj4*cj5);
IkReal x12673=(sj1*x12653);
IkReal x12674=((1.0)*x12652);
IkReal x12675=(sj1*x12652);
evalcond[0]=((((-1.0)*cj1*x12674))+(((-1.0)*x12658*x12659))+((r00*x12657))+((cj4*r02)));
evalcond[1]=(((r10*x12657))+(((-1.0)*x12659*x12668))+(((-1.0)*cj1*x12653))+((cj4*r12)));
evalcond[2]=((((-0.4)*x12667))+(((-0.4)*x12669))+(((0.42)*x12675))+(((-1.0)*x12671))+(((-1.0)*px))+x12670);
evalcond[3]=((((-0.4)*x12664))+(((0.42)*x12673))+(((-1.0)*x12670))+(((-1.0)*x12671))+(((-0.4)*r10*sj5))+(((-1.0)*py)));
evalcond[4]=(((x12658*x12665))+((r02*x12661))+x12675+(((-1.0)*cj4*cj5*r00*x12663))+((r01*x12662))+((sj5*x12656)));
evalcond[5]=((((-1.0)*x12655*x12672))+((r12*x12661))+((r11*x12662))+((sj5*x12660))+x12673+((x12665*x12668)));
evalcond[6]=((((-1.0)*x12656*x12672))+((r02*x12654))+((x12658*x12666))+(((-1.0)*x12663*x12669))+(((-1.0)*x12663*x12667))+x12653);
evalcond[7]=((((-1.0)*sj5*x12655))+(((-1.0)*x12674))+(((-1.0)*x12660*x12672))+((r12*x12654))+(((-1.0)*x12663*x12664))+((x12666*x12668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12676=((1.0)*sj2);
IkReal x12677=(sj4*sj5);
IkReal x12678=(cj4*r12);
IkReal x12679=(cj4*r02);
IkReal x12680=((1.0)*cj2);
IkReal x12681=(cj5*r10*sj4);
IkReal x12682=(cj5*r00*sj4);
if( IKabs(((((-1.0)*x12676*x12678))+(((-1.0)*x12676*x12681))+((r11*sj2*x12677))+((cj2*r01*x12677))+(((-1.0)*x12680*x12682))+(((-1.0)*x12679*x12680)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj2*x12681))+(((-1.0)*x12676*x12679))+(((-1.0)*x12676*x12682))+((cj2*x12678))+(((-1.0)*r11*x12677*x12680))+((r01*sj2*x12677)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x12676*x12678))+(((-1.0)*x12676*x12681))+((r11*sj2*x12677))+((cj2*r01*x12677))+(((-1.0)*x12680*x12682))+(((-1.0)*x12679*x12680))))+IKsqr((((cj2*x12681))+(((-1.0)*x12676*x12679))+(((-1.0)*x12676*x12682))+((cj2*x12678))+(((-1.0)*r11*x12677*x12680))+((r01*sj2*x12677))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x12676*x12678))+(((-1.0)*x12676*x12681))+((r11*sj2*x12677))+((cj2*r01*x12677))+(((-1.0)*x12680*x12682))+(((-1.0)*x12679*x12680))), (((cj2*x12681))+(((-1.0)*x12676*x12679))+(((-1.0)*x12676*x12682))+((cj2*x12678))+(((-1.0)*r11*x12677*x12680))+((r01*sj2*x12677))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12683=IKsin(j0);
IkReal x12684=IKcos(j0);
IkReal x12685=(cj3*sj4);
IkReal x12686=(cj5*r00);
IkReal x12687=(r01*sj5);
IkReal x12688=((1.0)*sj4);
IkReal x12689=(cj5*r10);
IkReal x12690=(r00*sj5);
IkReal x12691=((1.0)*sj3);
IkReal x12692=(cj5*r11);
IkReal x12693=(cj3*cj4);
IkReal x12694=(r10*sj5);
IkReal x12695=(r11*sj5);
IkReal x12696=(cj5*r01);
IkReal x12697=(sj2*x12684);
IkReal x12698=(cj2*x12683);
IkReal x12699=((0.00043624)*x12684);
IkReal x12700=((1.0)*x12693);
IkReal x12701=(cj2*x12684);
IkReal x12702=(sj2*x12683);
IkReal x12703=(x12697+x12698);
evalcond[0]=((((-1.0)*x12687*x12688))+x12703+((sj4*x12686))+((cj4*r02)));
evalcond[1]=((((-1.0)*x12688*x12695))+x12702+((sj4*x12689))+((cj4*r12))+(((-1.0)*x12701)));
evalcond[2]=((((-0.4)*x12690))+(((-0.4)*x12696))+(((-0.00043624)*x12702))+((cj2*x12699))+(((-1.0)*x12699))+(((-1.0)*px)));
evalcond[3]=((((-0.4)*x12694))+(((-0.4)*x12692))+(((-0.00043624)*x12683))+(((-1.0)*py))+(((0.00043624)*x12697))+(((0.00043624)*x12698)));
evalcond[4]=(((x12693*x12695))+((r12*x12685))+(((-1.0)*x12691*x12694))+(((-1.0)*x12691*x12692))+(((-1.0)*x12689*x12700))+x12703);
evalcond[5]=((((-1.0)*x12691*x12696))+((x12687*x12693))+((r02*x12685))+x12701+(((-1.0)*x12686*x12700))+(((-1.0)*x12690*x12691))+(((-1.0)*x12702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12704=(cj4*r12);
IkReal x12705=((1.0)*sj2);
IkReal x12706=(cj4*r02);
IkReal x12707=((1.0)*cj2);
IkReal x12708=(cj5*r10*sj4);
IkReal x12709=(r01*sj4*sj5);
IkReal x12710=(cj5*r00*sj4);
IkReal x12711=(r11*sj4*sj5);
if( IKabs((((sj2*x12708))+((sj2*x12704))+(((-1.0)*x12706*x12707))+(((-1.0)*x12707*x12710))+(((-1.0)*x12705*x12711))+((cj2*x12709)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj2*x12706))+(((-1.0)*x12707*x12711))+(((-1.0)*x12705*x12709))+((cj2*x12708))+((cj2*x12704))+((sj2*x12710)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj2*x12708))+((sj2*x12704))+(((-1.0)*x12706*x12707))+(((-1.0)*x12707*x12710))+(((-1.0)*x12705*x12711))+((cj2*x12709))))+IKsqr((((sj2*x12706))+(((-1.0)*x12707*x12711))+(((-1.0)*x12705*x12709))+((cj2*x12708))+((cj2*x12704))+((sj2*x12710))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((sj2*x12708))+((sj2*x12704))+(((-1.0)*x12706*x12707))+(((-1.0)*x12707*x12710))+(((-1.0)*x12705*x12711))+((cj2*x12709))), (((sj2*x12706))+(((-1.0)*x12707*x12711))+(((-1.0)*x12705*x12709))+((cj2*x12708))+((cj2*x12704))+((sj2*x12710))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12712=IKcos(j0);
IkReal x12713=IKsin(j0);
IkReal x12714=(cj3*sj4);
IkReal x12715=(cj5*r00);
IkReal x12716=(r01*sj5);
IkReal x12717=((1.0)*sj4);
IkReal x12718=(cj5*r10);
IkReal x12719=(r00*sj5);
IkReal x12720=((1.0)*sj3);
IkReal x12721=(cj5*r11);
IkReal x12722=(cj3*cj4);
IkReal x12723=(r10*sj5);
IkReal x12724=(r11*sj5);
IkReal x12725=(cj5*r01);
IkReal x12726=((0.00043624)*x12712);
IkReal x12727=((1.0)*x12722);
IkReal x12728=((1.0)*x12712);
IkReal x12729=(cj2*x12713);
IkReal x12730=(sj2*x12713);
IkReal x12731=(cj2*x12728);
IkReal x12732=((1.0)*x12730);
IkReal x12733=(x12732+x12731);
evalcond[0]=((((-1.0)*x12716*x12717))+(((-1.0)*sj2*x12728))+((sj4*x12715))+x12729+((cj4*r02)));
evalcond[1]=((((-1.0)*x12733))+(((-1.0)*x12717*x12724))+((sj4*x12718))+((cj4*r12)));
evalcond[2]=((((-0.00043624)*x12730))+(((-0.4)*x12719))+(((-1.0)*x12726))+(((-1.0)*px))+(((-0.4)*x12725))+(((-1.0)*cj2*x12726)));
evalcond[3]=((((-0.00043624)*x12729))+(((-0.00043624)*x12713))+(((-1.0)*py))+(((-0.4)*x12723))+(((-0.4)*x12721))+((sj2*x12726)));
evalcond[4]=((((-1.0)*x12729))+((x12722*x12724))+((r12*x12714))+(((-1.0)*x12718*x12727))+(((-1.0)*x12720*x12721))+(((-1.0)*x12720*x12723))+((sj2*x12712)));
evalcond[5]=(((x12716*x12722))+(((-1.0)*x12715*x12727))+((r02*x12714))+(((-1.0)*x12733))+(((-1.0)*x12719*x12720))+(((-1.0)*x12720*x12725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x12745=IKPowWithIntegerCheck(sj1,-1);
if(!x12745.valid){
continue;
}
IkReal x12734=x12745.value;
IkReal x12735=(r01*sj5);
IkReal x12736=(sj1*sj4);
IkReal x12737=((1.0)*cj3);
IkReal x12738=(cj5*r01);
IkReal x12739=(cj4*sj3);
IkReal x12740=(cj1*sj2);
IkReal x12741=((1.0)*r02);
IkReal x12742=(cj5*r00);
IkReal x12743=(r00*sj5);
IkReal x12744=(sj3*sj4);
CheckValue<IkReal> x12746=IKPowWithIntegerCheck(cj2,-1);
if(!x12746.valid){
continue;
}
if( IKabs((x12734*(x12746.value)*((((r02*x12740*x12744))+((x12735*x12739*x12740))+(((-1.0)*cj4*sj1*x12741))+((cj3*x12740*x12743))+((x12735*x12736))+((cj3*x12738*x12740))+(((-1.0)*x12739*x12740*x12742))+(((-1.0)*x12736*x12742)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x12734*(((((-1.0)*x12741*x12744))+(((-1.0)*x12735*x12739))+((x12739*x12742))+(((-1.0)*x12737*x12738))+(((-1.0)*x12737*x12743)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12734*(x12746.value)*((((r02*x12740*x12744))+((x12735*x12739*x12740))+(((-1.0)*cj4*sj1*x12741))+((cj3*x12740*x12743))+((x12735*x12736))+((cj3*x12738*x12740))+(((-1.0)*x12739*x12740*x12742))+(((-1.0)*x12736*x12742))))))+IKsqr((x12734*(((((-1.0)*x12741*x12744))+(((-1.0)*x12735*x12739))+((x12739*x12742))+(((-1.0)*x12737*x12738))+(((-1.0)*x12737*x12743))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x12734*(x12746.value)*((((r02*x12740*x12744))+((x12735*x12739*x12740))+(((-1.0)*cj4*sj1*x12741))+((cj3*x12740*x12743))+((x12735*x12736))+((cj3*x12738*x12740))+(((-1.0)*x12739*x12740*x12742))+(((-1.0)*x12736*x12742))))), (x12734*(((((-1.0)*x12741*x12744))+(((-1.0)*x12735*x12739))+((x12739*x12742))+(((-1.0)*x12737*x12738))+(((-1.0)*x12737*x12743))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12747=IKsin(j0);
IkReal x12748=IKcos(j0);
IkReal x12749=(cj3*sj4);
IkReal x12750=(r10*sj3);
IkReal x12751=(cj3*r00);
IkReal x12752=(cj5*sj4);
IkReal x12753=(r01*sj5);
IkReal x12754=((1.0)*sj4);
IkReal x12755=(cj3*r10);
IkReal x12756=(cj1*cj2);
IkReal x12757=(cj5*r01);
IkReal x12758=(cj5*r11);
IkReal x12759=((1.0)*sj3);
IkReal x12760=(cj4*sj3);
IkReal x12761=(cj3*cj4);
IkReal x12762=(sj3*sj4);
IkReal x12763=(r00*sj5);
IkReal x12764=(r11*sj5);
IkReal x12765=((0.00043624)*x12748);
IkReal x12766=((1.0)*cj4*cj5);
IkReal x12767=((0.00043624)*x12747);
IkReal x12768=(sj1*x12747);
IkReal x12769=(sj2*x12748);
IkReal x12770=(sj1*x12748);
IkReal x12771=(sj2*x12747);
evalcond[0]=(((cj2*x12747))+(((-1.0)*x12753*x12754))+((r00*x12752))+((cj1*x12769))+((cj4*r02)));
evalcond[1]=((((-1.0)*cj2*x12748))+(((-1.0)*x12754*x12764))+((r10*x12752))+((cj1*x12771))+((cj4*r12)));
evalcond[2]=(((sj5*x12751))+((r02*x12762))+((cj3*x12757))+x12770+(((-1.0)*cj4*cj5*r00*x12759))+((x12753*x12760)));
evalcond[3]=(((r12*x12762))+((sj5*x12755))+((cj3*x12758))+x12768+((x12760*x12764))+(((-1.0)*x12750*x12766)));
evalcond[4]=(((x12756*x12765))+(((-1.0)*sj2*x12767))+(((0.42)*x12770))+(((-1.0)*x12765))+(((-1.0)*px))+(((-0.4)*x12763))+(((-0.4)*x12757)));
evalcond[5]=(((x12756*x12767))+((sj2*x12765))+(((-0.4)*r10*sj5))+(((-1.0)*x12767))+(((-1.0)*py))+(((0.42)*x12768))+(((-0.4)*x12758)));
evalcond[6]=((((-1.0)*sj5*x12750))+(((-1.0)*x12755*x12766))+x12769+(((-1.0)*x12758*x12759))+((x12761*x12764))+((x12747*x12756))+((r12*x12749)));
evalcond[7]=((((-1.0)*x12759*x12763))+(((-1.0)*x12771))+((r02*x12749))+(((-1.0)*x12757*x12759))+(((-1.0)*x12751*x12766))+((x12753*x12761))+((x12748*x12756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12772=((5250000.0)*sj1);
IkReal x12773=(cj1*cj2);
IkReal x12774=(cj1*sj2);
IkReal x12775=((12500000.0)*px);
IkReal x12776=((5453.0)*cj4*r02);
IkReal x12777=((5000000.0)*r00*sj5);
IkReal x12778=(r01*sj4*sj5);
IkReal x12779=((5000000.0)*cj5*r01);
IkReal x12780=((5453.0)*cj5*r00*sj4);
CheckValue<IkReal> x12781=IKPowWithIntegerCheck(IKsign((((cj2*x12772))+(((5453.0)*cj1))+(((-5453.0)*cj2)))),-1);
if(!x12781.valid){
continue;
}
CheckValue<IkReal> x12782 = IKatan2WithCheck(IkReal((((x12772*x12778))+(((5453.0)*x12773*x12778))+(((-1.0)*cj5*r00*sj4*x12772))+(((-1.0)*x12774*x12777))+(((-1.0)*x12774*x12775))+(((-1.0)*x12774*x12779))+(((-5453.0)*x12778))+(((-1.0)*x12773*x12780))+(((-1.0)*cj4*r02*x12772))+(((-1.0)*x12773*x12776))+x12780+x12776)),IkReal((((cj2*x12779))+((cj2*x12775))+((cj2*x12777))+(((-1.0)*sj2*x12776))+(((5453.0)*sj2*x12778))+(((-1.0)*sj2*x12780)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12782.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12781.value)))+(x12782.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12783=IKsin(j0);
IkReal x12784=IKcos(j0);
IkReal x12785=(cj3*sj4);
IkReal x12786=(r10*sj3);
IkReal x12787=(cj3*r00);
IkReal x12788=(cj5*sj4);
IkReal x12789=(r01*sj5);
IkReal x12790=((1.0)*sj4);
IkReal x12791=(cj3*r10);
IkReal x12792=(cj1*cj2);
IkReal x12793=(cj5*r01);
IkReal x12794=(cj5*r11);
IkReal x12795=((1.0)*sj3);
IkReal x12796=(cj4*sj3);
IkReal x12797=(cj3*cj4);
IkReal x12798=(sj3*sj4);
IkReal x12799=(r00*sj5);
IkReal x12800=(r11*sj5);
IkReal x12801=((0.00043624)*x12784);
IkReal x12802=((1.0)*cj4*cj5);
IkReal x12803=((0.00043624)*x12783);
IkReal x12804=(sj1*x12783);
IkReal x12805=(sj2*x12784);
IkReal x12806=(sj1*x12784);
IkReal x12807=(sj2*x12783);
evalcond[0]=(((r00*x12788))+(((-1.0)*x12789*x12790))+((cj2*x12783))+((cj1*x12805))+((cj4*r02)));
evalcond[1]=((((-1.0)*cj2*x12784))+((r10*x12788))+((cj1*x12807))+(((-1.0)*x12790*x12800))+((cj4*r12)));
evalcond[2]=(((r02*x12798))+x12806+((x12789*x12796))+((cj3*x12793))+((sj5*x12787))+(((-1.0)*cj4*cj5*r00*x12795)));
evalcond[3]=(((sj5*x12791))+x12804+((r12*x12798))+((cj3*x12794))+(((-1.0)*x12786*x12802))+((x12796*x12800)));
evalcond[4]=((((-1.0)*x12801))+((x12792*x12801))+(((-1.0)*sj2*x12803))+(((0.42)*x12806))+(((-1.0)*px))+(((-0.4)*x12793))+(((-0.4)*x12799)));
evalcond[5]=((((-1.0)*x12803))+((x12792*x12803))+(((-0.4)*r10*sj5))+(((0.42)*x12804))+(((-1.0)*py))+((sj2*x12801))+(((-0.4)*x12794)));
evalcond[6]=((((-1.0)*x12794*x12795))+(((-1.0)*sj5*x12786))+((x12797*x12800))+x12805+(((-1.0)*x12791*x12802))+((r12*x12785))+((x12783*x12792)));
evalcond[7]=(((x12784*x12792))+(((-1.0)*x12787*x12802))+((x12789*x12797))+(((-1.0)*x12793*x12795))+(((-1.0)*x12807))+((r02*x12785))+(((-1.0)*x12795*x12799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12808=cj1*cj1;
IkReal x12809=cj2*cj2;
IkReal x12810=(cj2*sj4);
IkReal x12811=((1.0)*sj5);
IkReal x12812=(cj5*r00);
IkReal x12813=(cj5*r10);
IkReal x12814=(cj4*r12);
IkReal x12815=(cj1*sj2);
IkReal x12816=(cj4*r02);
IkReal x12817=(sj4*x12815);
CheckValue<IkReal> x12818 = IKatan2WithCheck(IkReal((((x12813*x12817))+((x12810*x12812))+((x12814*x12815))+((cj2*x12816))+(((-1.0)*r11*x12811*x12817))+(((-1.0)*r01*x12810*x12811)))),IkReal((((x12815*x12816))+((x12812*x12817))+(((-1.0)*x12810*x12813))+(((-1.0)*r01*x12811*x12817))+((r11*sj5*x12810))+(((-1.0)*cj2*x12814)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12818.valid){
continue;
}
CheckValue<IkReal> x12819=IKPowWithIntegerCheck(IKsign((((x12808*x12809))+(((-1.0)*x12808))+(((-1.0)*x12809)))),-1);
if(!x12819.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x12818.value)+(((1.5707963267949)*(x12819.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12820=IKsin(j0);
IkReal x12821=IKcos(j0);
IkReal x12822=(cj3*sj4);
IkReal x12823=(r10*sj3);
IkReal x12824=(cj3*r00);
IkReal x12825=(cj5*sj4);
IkReal x12826=(r01*sj5);
IkReal x12827=((1.0)*sj4);
IkReal x12828=(cj3*r10);
IkReal x12829=(cj1*cj2);
IkReal x12830=(cj5*r01);
IkReal x12831=(cj5*r11);
IkReal x12832=((1.0)*sj3);
IkReal x12833=(cj4*sj3);
IkReal x12834=(cj3*cj4);
IkReal x12835=(sj3*sj4);
IkReal x12836=(r00*sj5);
IkReal x12837=(r11*sj5);
IkReal x12838=((0.00043624)*x12821);
IkReal x12839=((1.0)*cj4*cj5);
IkReal x12840=((0.00043624)*x12820);
IkReal x12841=(sj1*x12820);
IkReal x12842=(sj2*x12821);
IkReal x12843=(sj1*x12821);
IkReal x12844=(sj2*x12820);
evalcond[0]=(((cj2*x12820))+((r00*x12825))+(((-1.0)*x12826*x12827))+((cj1*x12842))+((cj4*r02)));
evalcond[1]=(((r10*x12825))+(((-1.0)*cj2*x12821))+((cj1*x12844))+(((-1.0)*x12827*x12837))+((cj4*r12)));
evalcond[2]=(((cj3*x12830))+x12843+((sj5*x12824))+((r02*x12835))+((x12826*x12833))+(((-1.0)*cj4*cj5*r00*x12832)));
evalcond[3]=(((cj3*x12831))+x12841+((r12*x12835))+((sj5*x12828))+((x12833*x12837))+(((-1.0)*x12823*x12839)));
evalcond[4]=((((0.42)*x12843))+(((-1.0)*px))+(((-1.0)*x12838))+(((-0.4)*x12830))+(((-0.4)*x12836))+(((-1.0)*sj2*x12840))+((x12829*x12838)));
evalcond[5]=(((x12829*x12840))+(((0.42)*x12841))+(((-0.4)*r10*sj5))+((sj2*x12838))+(((-1.0)*py))+(((-0.4)*x12831))+(((-1.0)*x12840)));
evalcond[6]=(x12842+(((-1.0)*sj5*x12823))+((r12*x12822))+((x12820*x12829))+((x12834*x12837))+(((-1.0)*x12828*x12839))+(((-1.0)*x12831*x12832)));
evalcond[7]=((((-1.0)*x12832*x12836))+(((-1.0)*x12824*x12839))+(((-1.0)*x12844))+((x12826*x12834))+((r02*x12822))+((x12821*x12829))+(((-1.0)*x12830*x12832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "21dbf201e7b955e009859b2bfb52126f"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
